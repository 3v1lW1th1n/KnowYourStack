{"Data":{"GitHub":{"Issues":[{"Id":"358241981","IsPullRequest":true,"CreatedAt":"2018-09-07T23:41:23","Actor":"sfilipi","Number":"865","RawContent":null,"Title":"Ova estimator","State":"open","Body":"Converting OVA and PKPD to derive from TrainerEstimatorBase. \r\nUpdating the arguments of those Metalinear learners to have the standard Feature, Label, Weights columns. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/865","RelatedDescription":"Open PR \"Ova estimator\" (#865)"},{"Id":"358237995","IsPullRequest":true,"CreatedAt":"2018-09-07T23:12:34","Actor":"Anipik","Number":"864","RawContent":null,"Title":"Ported some of the tests from TestCommandMore","State":"open","Body":"- Ported some of the tests from TestCommandMore. Remaining tests contain modules or datasets that are not yet available\r\n\r\ncc @danmosemsft @eerhardt ","Url":"https://github.com/dotnet/machinelearning/pull/864","RelatedDescription":"Open PR \"Ported some of the tests from TestCommandMore\" (#864)"},{"Id":"358237494","IsPullRequest":true,"CreatedAt":"2018-09-07T23:09:21","Actor":"codemzs","Number":"863","RawContent":null,"Title":"Replace DV data type system with .NET standard type system.","State":"open","Body":"This change replaces DvType system with .NET standard data type system and fixes #673 \r\n\r\n| Old Type | New Type  \r\n|:-:|:-:\r\n| DvInt1 | `sbyte`  \r\n| DvInt2 | `short`  \r\n| DvInt4 | `int`\r\n| DvInt8 | `long`  \r\n| DvBool | `bool`  \r\n| DvDateTime | `DateTime`\r\n| DvDateTimeZone | `DateTimeOffset`  \r\n| DvTimeSpan | `TimeSpan`  \r\n| DvText | `ReadOnlyMemory<char>`  ","Url":"https://github.com/dotnet/machinelearning/pull/863","RelatedDescription":"Open PR \"Replace DV data type system with .NET standard type system.\" (#863)"},{"Id":"358234554","IsPullRequest":true,"CreatedAt":"2018-09-07T22:51:02","Actor":"yaeldekel","Number":"862","RawContent":null,"Title":"WIP: Create API for extracting information about the nodes in a TensorFlow model","State":"open","Body":"This PR addresses issue #791 .\r\nPlease feel free to add feedback or suggestions.","Url":"https://github.com/dotnet/machinelearning/pull/862","RelatedDescription":"Open PR \"WIP: Create API for extracting information about the nodes in a TensorFlow model\" (#862)"},{"Id":"358231396","IsPullRequest":false,"CreatedAt":"2018-09-07T22:34:12","Actor":"eerhardt","Number":"861","RawContent":null,"Title":"Move IComponentFactory from EntryPoints namespace","State":"open","Body":"The current `IComponentFactory` types are in the `Microsoft.ML.Runtime.EntryPoints` namespace.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/841ba785c58eb84fa0ce07de324f25d6e3dcbf94/src/Microsoft.ML.Core/EntryPoints/ComponentFactory.cs#L7-L12\r\n\r\nWe should move them to a more appropriate namespace, since `EntryPoint` doesn't really make sense, they are used outside of `EntryPoints`. I think they should go in the same namespace as the `ComponentCatalog`.\r\n\r\nAlso, we should remove the `IArgsComponent` interface, as I don't see it serving any purpose.\r\n\r\n/cc @TomFinley @Zruty0 @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/861","RelatedDescription":"Open issue \"Move IComponentFactory from EntryPoints namespace\" (#861)"},{"Id":"358229625","IsPullRequest":true,"CreatedAt":"2018-09-07T22:25:41","Actor":"artidoro","Number":"860","RawContent":null,"Title":"Updated version number of MlNetMklDeps package to 0.0.0.6","State":"open","Body":"Fixes #859.\r\n\r\nI updated the version number of the package MlNetMklDeps in build/Dependencies.props. \r\n\r\nAlthough ML.NET does not officially support x86 at this moment, the new MlNetMklDeps nuget package contains the x86 binaries.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/860","RelatedDescription":"Open PR \"Updated version number of MlNetMklDeps package to 0.0.0.6\" (#860)"},{"Id":"358229458","IsPullRequest":false,"CreatedAt":"2018-09-07T22:24:54","Actor":"artidoro","Number":"859","RawContent":null,"Title":"Update MlNetMklDeps Package Version","State":"open","Body":"Update the NlNetMklDeps package to the new version 0.0.0.6. The new package version contains x86 binaries.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/859","RelatedDescription":"Open issue \"Update MlNetMklDeps Package Version\" (#859)"},{"Id":"358227691","IsPullRequest":true,"CreatedAt":"2018-09-07T22:15:53","Actor":"Ivanidzo4ka","Number":"858","RawContent":null,"Title":"KeyToVector estimators","State":"open","Body":"Move KeyToVector to estimators land","Url":"https://github.com/dotnet/machinelearning/pull/858","RelatedDescription":"Open PR \"KeyToVector estimators\" (#858)"},{"Id":"358223357","IsPullRequest":true,"CreatedAt":"2018-09-07T21:56:30","Actor":"yaeldekel","Number":"857","RawContent":null,"Title":"Handle inputs with unknown shapes in TensorFlow","State":"open","Body":"This PR adds support for unknown shapes in the inputs and in the outputs of TensorFlow transform.\r\nCloses #848 .\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/857","RelatedDescription":"Open PR \"Handle inputs with unknown shapes in TensorFlow\" (#857)"},{"Id":"358222236","IsPullRequest":true,"CreatedAt":"2018-09-07T21:51:28","Actor":"Zruty0","Number":"856","RawContent":null,"Title":"Converted KeyToValue to estimator","State":"open","Body":"Converted KeyToValue to estimator, added Pigsty extensions.","Url":"https://github.com/dotnet/machinelearning/pull/856","RelatedDescription":"Open PR \"Converted KeyToValue to estimator\" (#856)"},{"Id":"358216272","IsPullRequest":true,"CreatedAt":"2018-09-07T21:25:17","Actor":"sfilipi","Number":"855","RawContent":null,"Title":"WIP: Tree estimators","State":"open","Body":"Ongoing work on converting the trainers to estimators. This PR converts the Tree -type Predictors.  \r\n","Url":"https://github.com/dotnet/machinelearning/pull/855","RelatedDescription":"Open PR \"WIP: Tree estimators\" (#855)"},{"Id":"357408774","IsPullRequest":true,"CreatedAt":"2018-09-07T19:53:57","Actor":"Ivanidzo4ka","Number":"840","RawContent":null,"Title":"TensorFlow estimator","State":"closed","Body":"Converts TensorFlow transform to estimator/transformer + tests for them","Url":"https://github.com/dotnet/machinelearning/pull/840","RelatedDescription":"Closed or merged PR \"TensorFlow estimator\" (#840)"},{"Id":"358159111","IsPullRequest":false,"CreatedAt":"2018-09-07T17:59:55","Actor":"elbruno","Number":"854","RawContent":null,"Title":"Any chance to get access to [Microsft.ML.TensorFlow.TestModels] ? ","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nNeed to run the tests for TensorFlow new features\r\n\r\n- **What happened?**\r\nIt seems that the \"cifar_model\" folder and some TF files are included in this package.\r\n\r\n- **What did you expect?**\r\nDownload and have access to [cifar_model/frozen_model.pb]\r\n\r\nThanks in advance.\r\n\r\n![image](https://user-images.githubusercontent.com/3533489/45235197-1f0c1180-b2a6-11e8-83d9-e51a7c9a7ad0.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/854","RelatedDescription":"Open issue \"Any chance to get access to [Microsft.ML.TensorFlow.TestModels] ? \" (#854)"},{"Id":"357550702","IsPullRequest":true,"CreatedAt":"2018-09-07T15:51:51","Actor":"TomFinley","Number":"843","RawContent":null,"Title":"Statically Typed Normalizer Estimators","State":"closed","Body":"Related to #632, with normalizers being put into the PiGSTy. This is relatively straightforward.\r\n\r\nOn thing which may not be obvious is the grouping of the mean-var/CDF/log-mean-var/log-CDF normalization functions.\r\n\r\n* In the \"dynamic\" land, mean-var/CDF are grouped, and log-mean-var/log-CDF are grouped.\r\n* In the \"static\" land, mean-var/log-mean-var, and CDF/log-CDF are grouped.\r\n\r\nThe former grouping appeared to have been motivated by the fact that the training procedures resembled each other. However in static typed land, what matters more is what the *result* of that training will be, and in mean-var it is always an affine normalizer, and in CDF (whether log-CDF or not) it is a CDF normalizer. For `onFit` to have a sensible signature I must therefore split it up according to that criteria.\r\n\r\nAlso even though it is not quite efficient now, I feel like exposing the \"guts\" of things might be aided longterm by shifting what we can to use `ImmutableArray<>`. Not sure though.","Url":"https://github.com/dotnet/machinelearning/pull/843","RelatedDescription":"Closed or merged PR \"Statically Typed Normalizer Estimators\" (#843)"},{"Id":"357868979","IsPullRequest":true,"CreatedAt":"2018-09-07T15:25:48","Actor":"eerhardt","Number":"852","RawContent":null,"Title":"Remove SubComponent","State":"closed","Body":"This change completely removes SubComponent from ML.NET product, and moves it to the test code (since it is so heavily used there).\r\n\r\nThis PR builds on top of #817, so the first commit can be reviewed on that PR.","Url":"https://github.com/dotnet/machinelearning/pull/852","RelatedDescription":"Closed or merged PR \"Remove SubComponent\" (#852)"},{"Id":"357647891","IsPullRequest":true,"CreatedAt":"2018-09-07T03:37:29","Actor":"TomFinley","Number":"845","RawContent":null,"Title":"SchemaShape.Column metadata is now SchemaShape not string array","State":"closed","Body":"Fixes #755 . Existing estimators and static pipeline logic updated to take advantage of the new architecture.","Url":"https://github.com/dotnet/machinelearning/pull/845","RelatedDescription":"Closed or merged PR \"SchemaShape.Column metadata is now SchemaShape not string array\" (#845)"},{"Id":"357875036","IsPullRequest":true,"CreatedAt":"2018-09-07T00:17:43","Actor":"abgoswam","Number":"853","RawContent":null,"Title":"WIP : Enable TensorFlowTransform to work with pre-trained models that are not frozen","State":"open","Body":"Fixes #784 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/853","RelatedDescription":"Open PR \"WIP : Enable TensorFlowTransform to work with pre-trained models that are not frozen\" (#853)"},{"Id":"357843267","IsPullRequest":true,"CreatedAt":"2018-09-06T21:57:44","Actor":"sfilipi","Number":"851","RawContent":null,"Title":"For the GitHub issues classification aspirational example, the 'Area' is not needed as input to Predict(), since it is the label.","State":"open","Body":"Creating a IssueInput class for the github classification pigsty aspirational example, and removing the Area - since it is the label, ad the ID - since it is not used, from the example. Fixes #841","Url":"https://github.com/dotnet/machinelearning/pull/851","RelatedDescription":"Open PR \"For the GitHub issues classification aspirational example, the 'Area' is not needed as input to Predict(), since it is the label.\" (#851)"},{"Id":"357830543","IsPullRequest":false,"CreatedAt":"2018-09-06T21:15:29","Actor":"zeahmed","Number":"850","RawContent":null,"Title":"Update Matrix multiplication test for multi-output.","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/850","RelatedDescription":"Open issue \"Update Matrix multiplication test for multi-output.\" (#850)"},{"Id":"357778618","IsPullRequest":true,"CreatedAt":"2018-09-06T18:44:34","Actor":"sfilipi","Number":"849","RawContent":null,"Title":"Ap, LinearSVM, OGD as estimators","State":"open","Body":"Converting AveragePerceptron, LinearSVM and ODG trainers to estimators. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/849","RelatedDescription":"Open PR \"Ap, LinearSVM, OGD as estimators\" (#849)"},{"Id":"357748392","IsPullRequest":false,"CreatedAt":"2018-09-06T17:13:21","Actor":"CESARDELATORRE","Number":"848","RawContent":null,"Title":"TensorFlowScorer in ML.NET does not support input tensor of unknown shape ","State":"open","Body":"Using Microsoft.ML 0.5.0\r\nYael told me she's already working on a PR to fix this issue. 👍 \r\n\r\n**Issue/Bug:** \r\nWe’d like to extend your test case TensorFlowTransformCifarLearningPipelineTest for making a demo, but instead of loading your “cifar” frozen model, we’ll be using an inception model trained for imagenet (downloaded from https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip  ).\r\n\r\nThe main issue is that when executing the Train method of the pipeline, we get an error related to the initialization of the TensorFlowScorer, which I believe is related with using an input tensor of unknown shape. \r\n\r\nDetails of the bug/issue are below, but the main question is if we’ll be able to use an input tensor of unknown shape.\r\n \r\nvar shape = tfShapes[i].ToIntArray().Skip(tfShapes[i][0] == -1 ? BatchSize : 0)\r\n\r\nFormer code is executed in the method TensorFlowMapper.GetInputMetaData(). tfShapes[i] is an object of type TFShape; if the shape is unknown, accessing by the indexer to the first dimension ( tfSfapes[i][0] ) throws a null exception. I checked that most of the methods in TFShape have a guard condition on dims == null, but the overridden indexer doesn’t have this guard, what could be the culprit of the NullReferenceException\r\n\r\nBut even if you fix the indexer, then the method tfShapes[i].ToIntArray() it will return null for an unknown tensor, so this will throw again an exception.\r\n\r\nFull source code of the demo (and the crash) is available here:\r\nhttps://github.com/CESARDELATORRE/TensorFlowMLNETSamples/blob/master/src/TensorFlowMLNETInceptionv3ModelScoring/Program.cs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/848","RelatedDescription":"Open issue \"TensorFlowScorer in ML.NET does not support input tensor of unknown shape \" (#848)"},{"Id":"357708950","IsPullRequest":false,"CreatedAt":"2018-09-06T15:26:21","Actor":"Zruty0","Number":"847","RawContent":null,"Title":"Proof of concept for debugger visualization","State":"open","Body":"We need to play around and see how we will visualize these things: \r\n- Data view\r\n- Row \r\n- Schema (including metadata)\r\n\r\nI think we should do this for static-typed things first, but for non-static-typed ones as well.\r\n\r\n/cc @TomFinley  @eerhardt \r\n","Url":"https://github.com/dotnet/machinelearning/issues/847","RelatedDescription":"Open issue \"Proof of concept for debugger visualization\" (#847)"},{"Id":"357672807","IsPullRequest":true,"CreatedAt":"2018-09-06T14:10:23","Actor":"shmoradims","Number":"846","RawContent":null,"Title":"Using sonoma nuget","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/846","RelatedDescription":"Closed or merged PR \"Using sonoma nuget\" (#846)"},{"Id":"357390701","IsPullRequest":false,"CreatedAt":"2018-09-06T12:02:37","Actor":"elbruno","Number":"839","RawContent":null,"Title":"The file [frozen_model.pb] is missing in the repo","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?** \r\nI'm trying to run the test [ machinelearning/test/Microsoft.ML.Tests/Scenarios/TensorflowTests.cs]\r\n\r\n- **What happened?** \r\nIt seems that I need the file [var model_location = \"cifar_model/frozen_model.pb\"] and it's not in the repo.\r\n\r\n- **What did you expect?**\r\nI can't train the sample test pipeline without the TensorFlow frozen model.\r\n\r\nAny guidance or help?\r\n\r\nThanks","Url":"https://github.com/dotnet/machinelearning/issues/839","RelatedDescription":"Closed issue \"The file [frozen_model.pb] is missing in the repo\" (#839)"},{"Id":"357596640","IsPullRequest":false,"CreatedAt":"2018-09-06T10:38:49","Actor":"kant2002","Number":"844","RawContent":null,"Title":"Train operation should be cancellable.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: All supported\r\n- **.NET Version (eg., dotnet --info)**: All supported.\r\n\r\n### Issue\r\n\r\n- I attempt to write training of the models using API as part of internal pipeline\r\n- After I run `pipeline.Train()` I was not able to stop training using standard .NET CancellationToken API\r\n- Please provide ability to cancel such long running operation as training.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/844","RelatedDescription":"Open issue \"Train operation should be cancellable.\" (#844)"},{"Id":"357470082","IsPullRequest":true,"CreatedAt":"2018-09-06T02:10:35","Actor":"artidoro","Number":"842","RawContent":null,"Title":"Modified official build yaml file to also push to VSTS's artifacts tab","State":"open","Body":"Fixes #483.\r\n\r\nI based my change on [the old version](https://github.com/dotnet/machinelearning/commit/436700aadf615e7f05a22925476cc441c63a919d#diff-fd7f6e99583f511aa0a2af1c74d32620L148) of the file which pushed to the VSTS feed only. In order to keep pushing to MyGet and also push to VSTS I added a new task to the yaml file. The task is identical to what was found in the old version of the file. \r\n\r\nHowever, I don't know how to test this code and make sure that it works. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/842","RelatedDescription":"Open PR \"Modified official build yaml file to also push to VSTS's artifacts tab\" (#842)"},{"Id":"357081321","IsPullRequest":true,"CreatedAt":"2018-09-06T00:05:19","Actor":"TomFinley","Number":"837","RawContent":null,"Title":"SDCA Regression and BinaryClassification Pigsty extensions","State":"closed","Body":"Related to the closed #632 and the API overall. In here I introduce extensions for SDCA regression and binary classification. (No multiclass until I also write extensions for term.)\r\n\r\nThis also includes a sort of general purpose utilities for writing reconcilers for trainers, though, again, only regression, binary classification, and binary classification without probabilities so far.\r\n\r\nAlso a minor change to the linear classification trainer, as it was not identifying that it was producing probabilities sometimes.","Url":"https://github.com/dotnet/machinelearning/pull/837","RelatedDescription":"Closed or merged PR \"SDCA Regression and BinaryClassification Pigsty extensions\" (#837)"},{"Id":"357426408","IsPullRequest":false,"CreatedAt":"2018-09-05T22:25:18","Actor":"CESARDELATORRE","Number":"841","RawContent":null,"Title":"The \"Area\" should not be provided as input when predicting a GitHub issue's label/area","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/f89908708f81ae28ad23c7574d405c525ce61b62/test/Microsoft.ML.Tests/Scenarios/Api/AspirationalExamples.cs#L124\r\n\r\nI don't think the \"area\" (such as \"area-System.Net\") should be provided as input data when predicting the GitHub issue label/area because that is precisely what we want to predict. \r\n\r\nThe input data to provide when predicting in this case should just be:\r\n- Issue ID\r\n- Issue name/title\r\n- Issue description","Url":"https://github.com/dotnet/machinelearning/issues/841","RelatedDescription":"Open issue \"The \"Area\" should not be provided as input when predicting a GitHub issue's label/area\" (#841)"},{"Id":"357379233","IsPullRequest":false,"CreatedAt":"2018-09-05T19:55:20","Actor":"Zruty0","Number":"838","RawContent":null,"Title":"Make TextFeaturizer's extractors etc. configurable again","State":"open","Body":"#801 is making the parameters default and hardcoded for the following options of Text featurizer:\r\n- Stop word remover (defaults to none)\r\n- Custom term dictionary (defaults to none)\r\n- Word feature extractor (defaults to unigrams)\r\n- Char feature extractor (defaults to 3-char)\r\n\r\nOnce individual building blocks become estimators, we should bring these parameters back (in a form of estimator for word/char extractor etc.). \r\n\r\nOr maybe we shouldn't, and instead just demonstrate how to compose your version of text transform from the individual building blocks?","Url":"https://github.com/dotnet/machinelearning/issues/838","RelatedDescription":"Open issue \"Make TextFeaturizer's extractors etc. configurable again\" (#838)"},{"Id":"357036296","IsPullRequest":false,"CreatedAt":"2018-09-05T01:55:12","Actor":"briancylui","Number":"836","RawContent":null,"Title":"CpuMath Enhancement: Double-compute input elements in hardware intrinsics","State":"open","Body":"Style changes needed to solve part of https://github.com/dotnet/machinelearning/issues/823\r\n\r\nAfter implementing \"double-compute\", it is expected to make hardware intrinsics more efficient.\r\n\r\n## Details (mostly from @tannergooding)\r\n- In `src\\Microsoft.ML.CpuMath\\SseIntrinsics.cs` and `src\\Microsoft.ML.CpuMath\\AvxIntrinsics.cs`, change the last loop of the existing 3-loop code pattern into the following:\r\n    1. Saving the stored result (`dstVector`) from the last iteration of the vectorized code\r\n    2. Moving `pDstCurrent` back such that `pDstCurrent + elementsPerIteration == pEnd`\r\n    3. Doing a single iteration for the remaining elements\r\n    4. Mix the saved result from the last iteration of the vectorized code with the result from the remaining elements\r\n    5. Write the result\r\n\r\nThis generally results in more performant code, depending on the exact algorithm and number of remaining elements\r\n\r\n-  On handling unpadded parts in AVX intrinsics:\r\n\r\nFor some algorithms (like `Sum`), it is possible to “double-compute” a few elements in the beginning and end to have better overall performance. See the following pseudo-code:\r\n```\r\nif addr not aligned\r\n              tmp = unaligned load from addr\r\n              tmp &= mask which zero's elements after the first aligned address\r\n              result = tmp\r\n              move addr forward to the first aligned address \r\n\r\nwhile addr is aligned and remaining bits >= 128\r\n              result += aligned load\r\n              addr += 128-bits\r\n\r\nif any remaining\r\n              addr = endAddr - 128\r\n              tmp = unaligned load from addr\r\n              tmp &= mask which zero's elements already processed\r\n              result += tmp\r\n\r\nSum the elements in result (using \"horizontal add\" or \"shuffle and add\")\r\n```\r\n\r\nSo, your overall algorithm will probably look like:\r\n```\r\nif (Avx.IsSupported && (Length >= AvxLimit))\r\n{\r\n    // Process 256-bits, we have a limit since 256-bit \r\n    // AVX instructions can cause a downclock in the CPU\r\n    // Algorithm would be similar to the SSE pseudo-code\r\n}\r\nelse if (Sse.IsSupported && (Length >= SseLimit))\r\n{\r\n    // Pseudo-code algorithm given above\r\n\r\n    // 128-bit instructions operate at full frequency\r\n    // and don't downclock the CPU, we can only use\r\n    // them for more than 128-bits so we don't AV\r\n}\r\nelse\r\n{\r\n    // Software Implementation\r\n}\r\n```\r\n\r\nIf you can’t “double-compute” for some reason, then you generally do the “software” processing for the beginning (to become aligned) and end (to catch stray elements).\r\n•\t`AvxLimit` is generally a number that takes into account the “downclocking” that can occur for heavy 256-bit instruction usage\r\n•\t`SseLimit` is generally 128-bits for algorithms where you can “double-compute” and some profiled number for other algorithms\r\n\r\n\r\ncc: @tannergooding since he suggested this approach.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/836","RelatedDescription":"Open issue \"CpuMath Enhancement: Double-compute input elements in hardware intrinsics\" (#836)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-08T05:30:35.6923015Z","RunDurationInMilliseconds":1108}