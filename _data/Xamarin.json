{"Data":{"Blog":{"FeedItems":[{"Title":"The New, Feature-Packed UrhoSharp 1.8","PublishedOn":"2018-02-28T19:34:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"UrhoSharp is a .NET API for building 3D experiences in your apps. A .NET binding to the Urho3D engine, it allows developers to write cross-platform code targeting Android, iOS, Windows and macOS with...","Href":"https://blog.xamarin.com/announcing-urhosharp-1-8-release/","RawContent":null},{"Title":"New Xamarin University Course: Navigation Patterns in Xamarin.Forms (XAM205)","PublishedOn":"2018-02-26T19:10:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms, a popular choice for cross-platform Xamarin apps, has two stacks. It&#8217;s common to implement navigation by pushing and popping Pages on a stack, but the two stacks are intended for...","Href":"https://blog.xamarin.com/xamarin-forms-navigation-patterns-xam205/","RawContent":null},{"Title":"Add Tizen Projects to Your Xamarin.Forms Applications","PublishedOn":"2018-02-23T19:24:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Jay Cho of the Samsung Tizen team. It&#8217;s been a while since the first preview version of Tizen .NET was released. Thanks to the newest release, developing...","Href":"https://blog.xamarin.com/add-tizen-projects-xamarin-forms-apps/","RawContent":null},{"Title":"Create and Host tvOS TVML Apps with Azure and Xamarin","PublishedOn":"2018-02-22T20:30:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Creating amazing tvOS TVML apps doesn&#8217;t have to be hard. In this blog post, I&#8217;ll go over the many similarities tvOS has to iOS and show you how to create a sample quiz app using UIKit that...","Href":"https://blog.xamarin.com/create-tvos-tvml-apps-azure-xamarin/","RawContent":null},{"Title":"Use CoreML And Azure To Create Simple Xamarin.iOS Apps","PublishedOn":"2018-02-20T19:36:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last year Apple released a device-optimized machine learning framework called Core ML to make it as easy as possible to integrate machine learning and artificial intelligence services into your iOS...","Href":"https://blog.xamarin.com/coreml-azure-create-simple-xamarin-ios-apps/","RawContent":null},{"Title":"Extend Xamarin.Forms Controls Functionality with Behaviors","PublishedOn":"2018-02-16T18:48:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms provides a way to build 100% native, cross-platform applications with both a shared logic layer and a shared user-interface layer. Built-in Xamarin.Forms controls also provide a ton of...","Href":"https://blog.xamarin.com/extend-xamarin-forms-controls-functionality-with-behaviors/","RawContent":null},{"Title":"Xamarin.iOS and Xcode 9.3 Web Preview","PublishedOn":"2018-02-15T20:36:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The next release of Xcode, version 9.3,Â is currently in beta. Development of Xamarin.iOS to support the new Xcode 9.3 version is in-progress and available now as a web preview. Participating in...","Href":"https://blog.xamarin.com/xcode-9-3-web-preview-high-sierra-required/","RawContent":null},{"Title":"Add a Search Bar to Your Xamarin Apps in iOS 11","PublishedOn":"2018-02-12T20:00:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As described in the Go Large with iOS 11 post, view controllers in iOS 11 can use large titles to improve the clarity of an app&#8217;s user interface. To complement a view controller&#8217;s large...","Href":"https://blog.xamarin.com/add-search-bar-xamarin-ios-11/","RawContent":null},{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null},{"Title":"Add Languages to Your Xamarin Apps with Multilingual App Toolkit","PublishedOn":"2018-02-08T20:10:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With Xamarin, you can extend your cross-platform apps with support for native speakers, reaching markets that might otherwise be overlooked. However, managing multiple languages and keeping everything...","Href":"https://blog.xamarin.com/add-languages-to-your-apps-with-xamarin-and-multilingual-app-toolkit/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7312647004","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:42:08","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1353","RelatedDescription":"Opened pull request \"Make it easier to build for an API platform other than default\" (#1353) at xamarin/xamarin-android","RelatedBody":"This commits adds the `ANDROID_API` makefile variable which, when set, will\r\nbuild XA for the specified platform. It takes advantage of the variables found\r\nin BuildEverything.mk by indexing the ALL_FRAMEWORKS variable with the API level\r\nnumber and setting the msbuild properties accordingly."},{"Id":"7312460948","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:04:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1352","RelatedDescription":"Opened pull request \"[xabuild] Remove Mono.Posix use\" (#1352) at xamarin/xamarin-android","RelatedBody":"We would like to migrate to using `msbuild` to build everything on\r\nJenkins, instead of `xbuild`.\r\n\r\nBefore doing so, we updated the [xamarin-android-msbuild][0] job so\r\nthat it mirrored the [xamarin-android][1] job, updating it to build\r\nand run unit tests. (Unit tests were previously skipped on the\r\n`xamarin-android-msbuild` job because unit test execution takes\r\nawhile, and behavior under MSBuild *should* be identical to that under\r\n`xbuild`, so there wasn't a perceived need to spend time on them.)\r\n\r\nIt is at that point that [everything stopped working][2]:\r\n\r\n\t/Users/builder/jenkins/workspace/xamarin-android-msbuild/tools/scripts/../../bin/Debug/bin/xabuild.exe.dll /p:Configuration=Debug /p:MonoDroidInstallDirectory=/Users/builder/jenkins/workspace/xamarin-android-msbuild/tools/scripts/../../bin/Debug /v:diag Xamarin.Android-Tests.sln\r\n\t...\r\n\tStacktrace:\r\n\r\n\t  at <unknown> <0xffffffff>\r\n\t  at (wrapper managed-to-native) object.__icall_wrapper_mono_gc_alloc_vector (intptr,intptr,intptr)\r\n\t  at (wrapper alloc) object.AllocVector (intptr,intptr)\r\n\t  at System.Collections.Hashtable.rehash (int,bool)\r\n\t  at System.Collections.Hashtable.expand ()\r\n\t  at System.Collections.Hashtable.Insert (object,object,bool)\r\n\t  at System.Collections.Hashtable.set_Item (object,object)\r\n\t  at System.Environment.GetEnvironmentVariables ()\r\n\t  at Microsoft.Build.Internal.CommunicationsUtilities.GetEnvironmentVariables ()\r\n\t  at Microsoft.Build.Execution.BuildParameters.Initialize (Microsoft.Build.Collections.PropertyDictionary`1<Microsoft.Build.Execution.ProjectPropertyInstance>,Microsoft.Build.Evaluation.ProjectRootElementCache,Microsoft.Build.Evaluation.ToolsetProvider)\r\n\t  at Microsoft.Build.Execution.BuildParameters..ctor (Microsoft.Build.Evaluation.ProjectCollection)\r\n\t  at Microsoft.Build.Execution.ProjectInstance..ctor (Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary`2<string, string>,string,int,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.BackEnd.SdkResolution.ISdkResolverService,int)\r\n\t  at Microsoft.Build.Construction.SolutionProjectGenerator.CreateTraversalInstance (string,bool,System.Collections.Generic.List`1<Microsoft.Build.Construction.ProjectInSolution>)\r\n\t  at Microsoft.Build.Construction.SolutionProjectGenerator.CreateSolutionProject (string,bool)\r\n\t  at Microsoft.Build.Construction.SolutionProjectGenerator.Generate ()\r\n\t  at Microsoft.Build.Construction.SolutionProjectGenerator.Generate (Microsoft.Build.Construction.SolutionFile,System.Collections.Generic.IDictionary`2<string, string>,string,Microsoft.Build.Framework.BuildEventContext,Microsoft.Build.BackEnd.Logging.ILoggingService,System.Collections.Generic.IReadOnlyCollection`1<string>,Microsoft.Build.BackEnd.SdkResolution.ISdkResolverService,int)\r\n\t  at Microsoft.Build.Execution.ProjectInstance.GenerateSolutionWrapper (string,System.Collections.Generic.IDictionary`2<string, string>,string,Microsoft.Build.BackEnd.Logging.ILoggingService,Microsoft.Build.Framework.BuildEventContext,System.Collections.Generic.IReadOnlyCollection`1<string>,Microsoft.Build.BackEnd.SdkResolution.ISdkResolverService,int)\r\n\t  at Microsoft.Build.Execution.ProjectInstance.LoadSolutionForBuild (string,Microsoft.Build.Collections.PropertyDictionary`1<Microsoft.Build.Execution.ProjectPropertyInstance>,string,Microsoft.Build.Execution.BuildParameters,Microsoft.Build.BackEnd.Logging.ILoggingService,Microsoft.Build.Framework.BuildEventContext,bool,System.Collections.Generic.IReadOnlyCollection`1<string>,Microsoft.Build.BackEnd.SdkResolution.ISdkResolverService,int)\r\n\t  at Microsoft.Build.Execution.BuildManager.LoadSolutionIntoConfiguration (Microsoft.Build.BackEnd.BuildRequestConfiguration,Microsoft.Build.BackEnd.BuildRequest)\r\n\t  at Microsoft.Build.Execution.BuildManager.HandleNewRequest (int,Microsoft.Build.BackEnd.BuildRequestBlocker)\r\n\t  at Microsoft.Build.Execution.BuildManager.IssueRequestToScheduler (Microsoft.Build.Execution.BuildSubmission,bool,Microsoft.Build.BackEnd.BuildRequestBlocker)\r\n\t  at Microsoft.Build.Execution.BuildManager/<>c__DisplayClass63_1.<ExecuteSubmission>b__0 ()\r\n\t  at Microsoft.Build.Execution.BuildManager.ProcessWorkQueue (System.Action)\r\n\t  at Microsoft.Build.Execution.BuildManager.<BeginBuild>b__50_0 (System.Action)\r\n\t  at System.Threading.Tasks.Dataflow.ActionBlock`1<TInput_REF>.ProcessMessage (System.Action`1<TInput_REF>,System.Collections.Generic.KeyValuePair`2<TInput_REF, long>)\r\n\t  at System.Threading.Tasks.Dataflow.ActionBlock`1/<>c__DisplayClass5<TInput_REF>.<.ctor>b__0 (System.Collections.Generic.KeyValuePair`2<TInput_REF, long>)\r\n\t  at System.Threading.Tasks.Dataflow.Internal.TargetCore`1<TInput_REF>.ProcessMessagesLoopCore ()\r\n\t  at System.Threading.Tasks.Dataflow.Internal.TargetCore`1<TInput_REF>.<ProcessAsyncIfNecessary_Slow>b__3 (object)\r\n\t  at System.Threading.Tasks.Task.InnerInvoke ()\r\n\t  at System.Threading.Tasks.Task.Execute ()\r\n\t  at System.Threading.Tasks.Task.ExecutionContextCallback (object)\r\n\t  at System.Threading.ExecutionContext.RunInternal (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool)\r\n\t  at System.Threading.ExecutionContext.Run (System.Threading.ExecutionContext,System.Threading.ContextCallback,object,bool)\r\n\t  at System.Threading.Tasks.Task.ExecuteWithThreadLocal (System.Threading.Tasks.Task&)\r\n\t  at System.Threading.Tasks.Task.ExecuteEntry (bool)\r\n\t  at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem ()\r\n\t  at System.Threading.ThreadPoolWorkQueue.Dispatch ()\r\n\t  at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback ()\r\n\t  at (wrapper runtime-invoke) <Module>.runtime_invoke_bool (object,intptr,intptr,intptr)\r\n\r\n\tNative stacktrace:\r\n\r\n\t\t0   mono                                0x000000010b3c1251 mono_handle_native_crash + 257\r\n\t\t1   mono                                0x000000010b45d9f6 altstack_handle_and_restore + 70\r\n\t\t2   mono                                0x000000010b593fd4 sgen_client_par_object_get_size + 4\r\n\t\t3   mono                                0x000000010b594e6b pin_objects_in_nursery + 667\r\n\t\t4   mono                                0x000000010b5942a0 collect_nursery + 512\r\n\t\t5   mono                                0x000000010b590dea sgen_perform_collection + 442\r\n\t\t6   mono                                0x000000010b58662b sgen_alloc_obj_nolock + 763\r\n\t\t7   mono                                0x000000010b583997 mono_gc_alloc_vector + 119\r\n\t\t8   ???                                 0x000000010bac87f5 0x0 + 4490823669\r\n\t\t9   mscorlib.dll.dylib                  0x000000010d79596f System_Collections_Hashtable_rehash_int_bool + 95\r\n\t\t10  ???                                 0x000000010f213323 0x0 + 4548801315\r\n\t\t11  ???                                 0x000000010f29e123 0x0 + 4549370147\r\n\t\t12  ???                                 0x000000010f29ce73 0x0 + 4549365363\r\n\t\t13  ???                                 0x000000010f29cb1b 0x0 + 4549364507\r\n\t\t14  ???                                 0x000000010f23aa2b 0x0 + 4548962859\r\n\t\t15  ???                                 0x000000010f238fc3 0x0 + 4548956099\r\n\t\t16  ???                                 0x000000010f2384d3 0x0 + 4548953299\r\n\t\t17  ???                                 0x000000010f237fbb 0x0 + 4548951995\r\n\t\t18  ???                                 0x000000010f237853 0x0 + 4548950099\r\n\t\t19  ???                                 0x000000010f237463 0x0 + 4548949091\r\n\t\t20  ???                                 0x000000010f237262 0x0 + 4548948578\r\n\t\t21  ???                                 0x000000010f23710b 0x0 + 4548948235\r\n\t\t22  ???                                 0x000000010f236eab 0x0 + 4548947627\r\n\t\t23  ???                                 0x000000010f235f6b 0x0 + 4548943723\r\n\t\t24  mscorlib.dll.dylib                  0x000000010d6679b6 System_Threading_Tasks_Task_ExecutionContextCallback_object + 70\r\n\t\t25  mscorlib.dll.dylib                  0x000000010d63d651 System_Threading_ExecutionContext_Run_System_Threading_ExecutionContext_System_Threading_ContextCallback_object_bool + 33\r\n\t\t26  mscorlib.dll.dylib                  0x000000010d667767 System_Threading_Tasks_Task_ExecuteEntry_bool + 231\r\n\t\t27  mscorlib.dll.dylib                  0x000000010d644ab9 System_Threading__ThreadPoolWaitCallback_PerformWaitCallback + 9\r\n\t\t28  mono                                0x000000010b3163d7 mono_jit_runtime_invoke + 1383\r\n\t\t29  mono                                0x000000010b50e1f4 do_runtime_invoke + 84\r\n\t\t30  mono                                0x000000010b532ac6 worker_callback + 966\r\n\t\t31  mono                                0x000000010b53519c worker_thread + 348\r\n\t\t32  mono                                0x000000010b530080 start_wrapper + 704\r\n\t\t33  libsystem_pthread.dylib             0x00007fff8ff5199d _pthread_body + 131\r\n\t\t34  libsystem_pthread.dylib             0x00007fff8ff5191a _pthread_body + 0\r\n\t\t35  libsystem_pthread.dylib             0x00007fff8ff4f351 thread_start + 13\r\n\r\nThe #mono team investigated, and determined that the crash was due to\r\nmemory corruption caused by `Mono.Unix.Native.Syscall.stat()`.\r\n\r\nSpecifically, the [`Mono.Posix.dll` package][3] which `xabuild.exe`\r\nwas using is *ancient* (5+ years old), and -- more importantly --\r\ncomes from a time *before* the `Mono.Unix.Native.Stat.st_atime_nsec`\r\nand related fields existed. Consequently, the `Stat` size within\r\n`Mono.Posix.dll` differed -- 24 bytes smaller! -- than what\r\n`libMonoPosixHelper.dylib` expected, wherein `libMonoPosixHelper.dylib`\r\nis coming from the `build-tools/mono-runtimes` build (significantly\r\nnewer than `Mono.Posix.dll`).\r\n\r\nThe `Mono.Posix` nuget package is thus incompatible with our current\r\nuse case.\r\n\r\nAlternatively, we could update the mono bundle to include the built\r\n`build/net45/mac/Mono.Posix.dll` file, but I have \"bootstrap\"\r\nconcerns, and am not convinced that I want to wait until after\r\n`build-tools/mono-runtimes` has finished building in order to use\r\n`xabuild.exe` in all scenarios.\r\n\r\nThus, to fix the above memory corruption, *remove* use of\r\n`Mono.Posix.dll` from `xabuild.exe`, and instead directly P/Invoke the\r\nneeded POSIX functions, specifically **symlink**(2) and **perror**(3).\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-msbuild/\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/\r\n[2]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-msbuild/761/\r\n[3]: https://www.nuget.org/packages/Mono.Posix/4.0.0"},{"Id":"7312301613","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:32:02","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1351","RelatedDescription":"Opened pull request \"[proguard] Preserve ManagedPeer class\" (#1351) at xamarin/xamarin-android","RelatedBody":"After XA stopped using Java.Interop built in XAIntegration\r\nconfiguration, we need com.xamarin.java_interop.ManagedPeer to be\r\npresent in the mono.android.jar file, as managed ManagedPeer type\r\nrequires it.\r\n\r\nThus we need to preserve that class when using proguard.\r\n\r\nFixes https://github.com/xamarin/xamarin-android/issues/1331"},{"Id":"7312141750","Type":"PullRequestEvent","CreatedAt":"2018-02-28T19:59:50","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1348","RelatedDescription":"Merged pull request \"Don't throw exception on HTTP status 300 and no Location header\" (#1348) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/xamarin/xamarin-android/issues/1334\r\n\r\nAs per https://tools.ietf.org/html/rfc7231#section-6.4.1 the reponse isn't\r\nrequired to contain the Location header and the client should act accordingly.\r\nSince it is not documented what the action in this case should be, we're\r\nfollowing what Xamarin.iOS does and simply return the content of the request\r\nas if it wasn't a redirect."},{"Id":"7312141734","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:59:50","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1334","RelatedDescription":"Closed issue \"It is optional to have Location header on response 300\" (#1334) at xamarin/xamarin-android","RelatedBody":"https://tools.ietf.org/html/rfc7231#section-6.4.1\r\nRegarding this, Android should not throw exception when HttpClient returns response with code 300 not including **Location** header.\r\niOS handles this fine.\r\n\r\nThis line should be changed:\r\nhttps://github.com/xamarin/xamarin-android/blob/8354bef4d6c1978aa979d3b2a055a4c16a2bdfe8/src/Mono.Android/Xamarin.Android.Net/AndroidClientHandler.cs#L539-L540"},{"Id":"7311963908","Type":"PullRequestEvent","CreatedAt":"2018-02-28T19:26:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1350","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Default to XA_TLS_PROVIDER=btls\" (#1350) at xamarin/xamarin-android","RelatedBody":"What do we want? TLS 1.2+ support by default!\r\n\r\nThe question has been, how \"best\" to do that? See also: 908f56d6.\r\n\r\nIf you need TLS 1.2 support via `System.Net.Http.HttpClient`, *and* you\r\ndon't need TLS 1.2 support via `System.Net.WebClient`, *and* you\r\n*only* run on Android 5.0 or later (API-21+), you can use\r\n`Xamarin.Android.Net.AndroidClientHandler`.\r\n\r\nThat is, admittedly, a lot of \"and\"s. Pre-Android 4.4 devices make up\r\napproximately 17% of devices [accessing the Google Play Store][0]\r\n(as of 2018-Feb-28). `AndroidClientHandler` will *work* on those\r\ndevices, but it uses the underlying Android APIs to provide TLS\r\naccess, and Android itself didn't support TLS 1.2 until 5.0.\r\n\r\n`AndroidClientHandler` can be enabled by building with\r\n`$(AndroidHttpClientHandlerType)` set to\r\n`Xamarin.Android.Net.AndroidClientHandler`.\r\n\r\nThe alternative to all of the above limitations -- support for *all*\r\nAndroid versions, support for `WebClient` -- has been \"btls\", which\r\nprovides TLS 1.2 support via the `libmono-btls-shared.so` native\r\nlibrary.\r\n\r\nBTLS can be enabled by setting `$(AndroidTlsProvider)` to `btls`.\r\n\r\nThe problem with using btls is that `libmono-btls-shared.so` is *big*,\r\nbetween 3.3MB for x86 to 3.8MB for x86_64. Compressed into a `.apk`,\r\nit contributes *at least* 1MB *per supported ABI*.\r\n\r\nHowever, \"missing\" TLS 1.2 support in default projects is becoming\r\nuntenable. We need to pick *something* to improve our default project\r\nexperience.\r\n\r\nUpdate the `<BuildApk/>` task so that if `$(AndroidTlsProvider)` is\r\nnot otherwise set, we default to using `btls`.\r\n\r\nDevelopers may \"undo\" this change to default build behavior by setting\r\n`$(AndroidTlsProvider)` to either `default` or `legacy`.\r\n\r\n[0]: https://developer.android.com/about/dashboards/index.html"},{"Id":"7311646062","Type":"IssuesEvent","CreatedAt":"2018-02-28T18:25:51","Actor":"baulig","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1346","RelatedDescription":"Closed issue \"Linker requires symbol files\" (#1346) at xamarin/xamarin-android","RelatedBody":"It looks like the linker currently requires symbol files to be present: [Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/Linker.cs:51](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/Linker.cs#L51).\r\n\r\nThis is causing a test failure in the [2018-02 monthly integration](https://github.com/xamarin/xamarin-android/pull/1289) because the latest nuget package of `Newtonsoft.Json` doesn't seem to ship a `.pdb`.\r\n\r\nI added a [temporary FIXME](https://github.com/xamarin/xamarin-android/commit/676104bafd821fca02713ae2ce4d32bea69834ab) to the integration branch just to get the build going, but this is probably not what we want long-term."},{"Id":"7311081203","Type":"IssuesEvent","CreatedAt":"2018-02-28T16:43:00","Actor":"MBuenter","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1349","RelatedDescription":"Opened issue \"Broadcastreciever on intent Wifi_State_Changed dosen't receive \"Enabling\" state change\" (#1349) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Register broadcast receiver on intent WifiManager.WifiStateChangedAction\r\n2. In the OnReceive handler of the broadcast receiver check additonally the lookup key ExtraWifiState:\r\nintent.GetIntExtra(WifiManager.ExtraWifiState, (int)WifiState.Unknown);\r\n3. Start the app on device. Enable respectively disable the Wifi manually on device. Check the OnReceive handler respectively  the lookup key.\r\n\r\n\r\n### Expected Behavior\r\nEnabling Wifi (if previously disabled): The wifi state changes to enabling then to enabled, so the OnReceive handler gets called two times.\r\nDisabling Wifi (if previously enabled): The wifi state changes to disabling then to disabled, so the OnReceive handler gets called two times.\r\n\r\n### Actual Behavior\r\nEnabling Wifi (if previously disabled): The wifi state changes to enabled, the OnReceive handler gets called one time and the Wifi is not yet enabled. The state changes immediately from disabled to enabled.\r\nDisabling Wifi (if previously enabled): The wifi state changes to disabling then to disabled, the OnReceive handler gets called two times.\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.3\r\nVisualStudio.15.Release/15.5.3+27130.2020\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00370-20003-88521-AA935\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00370-20003-88521-AA935\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00370-20003-88521-AA935\r\nMicrosoft Visual F# 4.1\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAssetsToolWindow Extension   1.0\r\nAssetsToolWindow Visual Studio Extension Detailed Info\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Data Lake Tools for Visual Studio   2.2.9000.1\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nGitFlow.VS.Extension   1.0\r\nVisual Studio extension that integrates GitFlow\r\n\r\nGitHub.VisualStudio   2.2.0.10\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.2.9000.1\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.2.9000.1\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   1.8\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.2.9000.1\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nResXManager   1.11.893.0\r\nManage localization of all ResX-Based resources in one place. Shows all resources of a solution and let's you edit the strings and their localizations in a well-arranged data grid.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nSvgConverterToolWindow Extension   1.0\r\nSvgConverterToolWindow Visual Studio Extension Detailed Info\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27130.2020\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWeb Extension Pack 2017   15.0.4\r\nThe easiest way to set up Visual Studio for the ultimate web development experience.\r\n\r\nWebJobs Tools v1.0.0   15.0.31106.0\r\nWebJobs Tools v1.0.0\r\n\r\nXamarin   4.8.0.757 (7f9ec2a)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.3.0 (HEAD/ef47226b7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n"},{"Id":"7310204914","Type":"PullRequestEvent","CreatedAt":"2018-02-28T14:22:32","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1348","RelatedDescription":"Opened pull request \"Don't throw exception on HTTP status 300 and no Location header\" (#1348) at xamarin/xamarin-android","RelatedBody":"Fixes https://github.com/xamarin/xamarin-android/issues/1334\r\n\r\nAs per https://tools.ietf.org/html/rfc7231#section-6.4.1 the reponse isn't\r\nrequired to contain the Location header and the client should act accordingly.\r\nSince it is not documented what the action in this case should be, we're\r\nfollowing what Xamarin.iOS does and simply return the content of the request\r\nas if it wasn't a redirect."},{"Id":"7308524522","Type":"IssuesEvent","CreatedAt":"2018-02-28T08:41:32","Actor":"borrrden","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1347","RelatedDescription":"Opened issue \"TcpClient and NetworkStream do not react to network changes\" (#1347) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build and install the attached project\r\n2. Note the logcat output indicating (on a 5 second loop) that the TcpClient is connected, and its network stream is read-writable\r\n3. Put the device into airplane mode\r\n\r\n[NetworkStreamBug.zip](https://github.com/xamarin/xamarin-android/files/1766265/NetworkStreamBug.zip)\r\n\r\n### Expected Behavior\r\n\r\nThe TcpClient would no longer show a connected status, and/or the NetworkStream would either have CanRead/CanWrite be false or throw an exception when a read or write is attempted (not applicable to this demo project, but I have a more sophisticated project that shows how writing stuff seems to write into a void never to be seen again if you are interested.  It just requires more setup)\r\n\r\n### Actual Behavior\r\n\r\nThe TcpClient stays in a connected state, and reads / writes from NetworkStream succeed despite actually doing nothing.  Furthermore, on connection restoration this situation continues.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.5.7\r\nVisualStudio.15.Release/15.5.7+27130.2036\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00369-60000-00001-AA422\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nVisual Basic 2017   00369-60000-00001-AA422\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA422\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00369-60000-00001-AA422\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA422\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31129.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2017.3.1    Build 111.0.20171221.145902\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright Â© 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27130.2036\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.760 (fc93f3f5b)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.5.0 (HEAD/75f8c6838)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.4 (db807ec)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n[Gist link](https://gist.github.com/borrrden/79217c45939edf26cf12308836a712a5)"},{"Id":"7306791685","Type":"IssuesEvent","CreatedAt":"2018-02-27T23:27:17","Actor":"baulig","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1346","RelatedDescription":"Opened issue \"Linker requires symbol files\" (#1346) at xamarin/xamarin-android","RelatedBody":"It looks like the linker currently requires symbol files to be present: [Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/Linker.cs:51](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/Linker.cs#L51).\r\n\r\nThis is causing a test failure in the [2018-02 monthly integration](https://github.com/xamarin/xamarin-android/pull/1289) because the latest nuget package of `Newtonsoft.Json` doesn't seem to ship a `.pdb`.\r\n\r\nI added a [temporary FIXME](https://github.com/xamarin/xamarin-android/commit/676104bafd821fca02713ae2ce4d32bea69834ab) to the integration branch just to get the build going, but this is probably not what we want long-term."},{"Id":"7305843161","Type":"PullRequestEvent","CreatedAt":"2018-02-27T20:05:45","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1185","RelatedDescription":"Merged pull request \"Better NetStandard Support\" (#1185) at xamarin/xamarin-android","RelatedBody":"Context #1154 \r\n\r\nThis PR brings in changes from xamarin/xamarin-macios#2643 and xamarin/xamarin-macios#2731 to improve our net standard support. While it does not fix the packaging problem in #1154 it will give us parity with the iOS code base. "},{"Id":"7305829747","Type":"PullRequestEvent","CreatedAt":"2018-02-27T20:03:09","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1345","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add Default Metadata for `@(AndroidResource)` Items.\" (#1345) at xamarin/xamarin-android","RelatedBody":"Fixes #1287\r\n\r\nOne of the problems we have encountered is that the logic behind\r\nhow and when the design time build (DTB) is run is unclear. Specifically\r\nwhat events/changes trigger a DTB. After lenghty conversations with\r\nthe Visual Studio team it seems that their prefered solution is to\r\nuse the `Generator` metadata.\r\n\r\nThe idea behind this is that an Item can include\r\n\r\n\t<Generator>MSBuild:Target</Generator>\r\n\r\nmetadata which specify the MSBuild `Target` to run if that file\r\nis modified. If these data is present Visual Studio will run the\r\ntarget, which then modifies the required files which then triggers\r\nan DTB update. Other ideas included adding a FileSystemWatcher to\r\nthe Visual Studio Addin to detect these changes and run targets.\r\nThat said the Generator metadata is built in and should work for\r\nthis purpose.\r\n\r\nSo now the problem. Normally you define this metadata on the Item\r\nin the csproj. We have 1000's of developers with existing projects\r\nwhich DO NOT include this data. So how do we fix up existing projects\r\nwithout a) requiring manual changes or b) having to write a tool to\r\nupgrade the projects.\r\n\r\nThis is where `<ItemDefinitionGroup/>` [1] comes in :). It allows\r\nus to define the `default` metadata we want to include on Items.\r\nSo if we define\r\n\r\n\t<ItemDefinitionGroup>\r\n\t\t<Foo>\r\n           \t\t<A>bar</A>\r\n        \t</Foo>\r\n\t</ItemDefinitionGroup>\r\n\r\n\t<Foo Include=\"1\">\r\n\t\t<A>some</A>\r\n\t</Foo>\r\n\t<Foo Include=\"2\" />\r\n\r\nWhen will happen is `<A>bar</A>` will be automatically added to\r\nthe `<Foo Include=\"2\" />`. It will be skipped on the other one\r\nbecause it already has a `<A/>` element defined. This is a really\r\nnice feature since it allows us to add the required metadata in\r\nthe background without having to get users to upgrade projects.\r\nAlso because these are default values the csproj files will NOT\r\nbe changed when a user alters the project for some other reason.\r\ni.e they WONT end up will ALL the `<AndroidResource />` items\r\nhaving this new data on them.\r\n\r\nThe other thing to note is that these changes will only apply to\r\nthe DTB. The target we are calling in this case is `UpdateGeneratedFiles`.\r\nThis target is not part of the `Build` chain. As a result\r\n`_SetupDesingTimeBuildForCompile` will be called. This sets `$(DesignTimeBuild)`\r\nto true. So calling this target will ONLY update the DTB related files.\r\n\r\n[1] https://docs.microsoft.com/en-us/visualstudio/msbuild/itemdefinitiongroup-element-msbuild"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7312078718","Type":"PullRequestEvent","CreatedAt":"2018-02-28T19:47:49","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1997","RelatedDescription":"Opened pull request \"[flex] better margin support with Wrap\" (#1997) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n<img width=\"984\" alt=\"2018-02-28_2047\" src=\"https://user-images.githubusercontent.com/313003/36809587-975d5fe6-1cc8-11e8-830f-199fded535a9.png\">\r\n\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7312071495","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:46:26","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1993","RelatedDescription":"Closed issue \"IOS NFC Library support (reading tags)\" (#1993) at xamarin/Xamarin.Forms","RelatedBody":"Are you going to introduce some library/ies to support NFC for ios? The reading-event only is enough, so you can create an app for windows, android and ios(only reading here). "},{"Id":"7311870816","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:09:53","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1994","RelatedDescription":"Closed issue \"IOS 'Cannot start process because a file name has not been provided'\" (#1994) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nI'm getting the error in the title when trying to build and run on IOS emulator.\r\nCorresponding with the following log entries:\r\n```\r\nSystem.InvalidOperationException: Cannot start process because a file name has not been provided.\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Extensions.RunAsync(Process process, ProcessStartInfo startInfo, CancellationToken cancellationToken, Func`2 failureCondition) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\External\\messaging\\src\\Xamarin.Messaging.Common\\Extensions\\ProcessExtensions.cs:line 68\r\n   at Xamarin.VisualStudio.IOS.RemoteSimulatorLauncher.LaunchApplication(Simulator simulator, AppInfo appInfo, Boolean debugging, IProgressReport progress) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Devices\\RemoteSimulatorLauncher.cs:line 81\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDevice.StartApplication(MonoTouchRunSessionInfo runSessionInfo, IProgressReport progress, Boolean debugging, Int32 debugPort) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Devices\\MonoTouchDevice.cs:line 319\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDebuggerSession.StartMonoTouchOnServer(MonoTouchStartInfo info) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Debugging\\MonoTouchDebuggerSession.cs:line 160\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDebuggerSession.OnRun(DebuggerStartInfo startInfo) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Debugging\\MonoTouchDebuggerSession.cs:line 103\r\n   at Mono.Debugging.Client.DebuggerSession.<>c__DisplayClass87_0.<Run>b__0() in E:\\A\\_work\\160\\s\\external\\debugger-libs\\Mono.Debugging\\Mono.Debugging.Client\\DebuggerSession.cs:line 326\r\nSystem.Net.Mqtt.Sdk.ClientPacketListener|Information|0|Client vs17964jnixo - Dispatching Publish message to flow PublishReceiverFlow and topic xma/message-status\r\nSystem.Net.Mqtt.Sdk.MqttClientImpl|Information|0|Client vs17964jnixo - An application message for topic xma/message-status was received\r\nMono.Debugging.VisualStudio.MonoDebuggerLauncher|Error|0|System.InvalidOperationException: Cannot start process because a file name has not been provided.\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Extensions.RunAsync(Process process, ProcessStartInfo startInfo, CancellationToken cancellationToken, Func`2 failureCondition) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\External\\messaging\\src\\Xamarin.Messaging.Common\\Extensions\\ProcessExtensions.cs:line 68\r\n   at Xamarin.VisualStudio.IOS.RemoteSimulatorLauncher.LaunchApplication(Simulator simulator, AppInfo appInfo, Boolean debugging, IProgressReport progress) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Devices\\RemoteSimulatorLauncher.cs:line 81\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDevice.StartApplication(MonoTouchRunSessionInfo runSessionInfo, IProgressReport progress, Boolean debugging, Int32 debugPort) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Devices\\MonoTouchDevice.cs:line 319\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDebuggerSession.StartMonoTouchOnServer(MonoTouchStartInfo info) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Debugging\\MonoTouchDebuggerSession.cs:line 160\r\n   at Xamarin.VisualStudio.IOS.MonoTouchDebuggerSession.OnRun(DebuggerStartInfo startInfo) in C:\\d\\lanes\\5409\\fc93f3f5\\source\\xamarinvs\\src\\Core\\VisualStudio.IOS\\Debugging\\MonoTouchDebuggerSession.cs:line 103\r\n   at Mono.Debugging.Client.DebuggerSession.<>c__DisplayClass87_0.<Run>b__0() in E:\\A\\_work\\160\\s\\external\\debugger-libs\\Mono.Debugging\\Mono.Debugging.Client\\DebuggerSession.cs:line 326\r\n```\r\n\r\nThere have not been significant changes since the last time I tried emulating on IOS, but will continue to look down that path.\r\n\r\nSeems to build and load fine onto actual devices.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Currently unknown, will work on getting them in - Posting the issue before I know this, in case someone already knows what's wrong.\r\n\r\n### Expected Behavior\r\nSideload/load on IOS emulator\r\n\r\n### Actual Behavior\r\nFails to launch\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version: 2.5.0.280555\r\n- IDE: Visual Studio - Windows\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.2\r\n- Nuget Packages: \r\n  - CarouselView.FormsPlugin (5.2.0)\r\n  - NewtonsoftJson (11.0.1)\r\n  - Rg.Plugins.Popup (1.1.4.145-pre)\r\n  - Xamarin.FFImageLoading.Forms (2.3.4)\r\n- Affected Devices:\r\n  - IOS Emulator - iPhone 6 Plus (11.2)\r\n"},{"Id":"7311843483","Type":"IssuesEvent","CreatedAt":"2018-02-28T19:04:00","Actor":"ajhuntsman","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1996","RelatedDescription":"Opened issue \"Picker: width calculation should be based on the longest item, not the selected item\" (#1996) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nIn Xamarin Forms XAML, using `HorizontalOptions=\"Start\"` or `HorizontalOptions=\"StartAndExpand\"` for a `Picker` element may cause the final layout width of the Picker to be insufficient, and therefore truncate longer items upon selection.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Follow the [recommended steps](https://blog.xamarin.com/new-bindable-picker-control-for-xamarin-forms/) from Xamarin for a basic Picker.\r\n2. In the XAML, inside the `Picker` element, set its horizontal options to be `HorizontalOptions=\"Start\"`.\r\n3. In the view model, create a list of strings to display in the picker: `Red`, `Blue`, `Green`, `Magenta`, `Aquamarine`.\r\n4. In the view model, set the initial selected index property to be `0` so that `Red` is selected by default.\r\n5. Run the app, and note that the width of the picker exactly matches the width of the initial selected item, rather than matching the width of the longest item.\r\n6. Tap on the picker and select `Magenta` or `Aquamarine`.\r\n\r\n### Expected Behavior\r\nThe width of the Picker element at runtime should be wide enough to accommodate the longest value in the list (\"best fit\").\r\n\r\n### Actual Behavior\r\nThe width of the Picker element at runtime is insufficient, which truncates longer values upon selection.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms (2.5.0.280555)\r\n- Last known good version: (unknown)\r\n- IDE: Visual Studio for Mac 7.4 Preview (7.4 build 1026)\r\n- Platform Target Frameworks:\r\n  - Android: 8.0\r\n- Android Support Library Version: 26.1.0.1\r\n- Nuget Packages:  \r\n  - ReactiveUI.XamForms (8.0.0-alpha0117) \r\n  - Xam.Plugins.Settings (3.1.1)\r\n  - Xam.Plugins.TextToSpeech (3.2.1)\r\n  - Xam.Plugins.Vibrate (3.0.1)\r\n  - Xamarin.Plugins.Clipboard (2.0.0)\r\n- Affected Devices: Android devices\r\n\r\n### Screenshots\r\n\r\n![01_picker_width_matches_initial_value_red](https://user-images.githubusercontent.com/1542226/36806909-875887d0-1c8f-11e8-9a95-a3f197b3922f.png)\r\n\r\n![02_picker_items](https://user-images.githubusercontent.com/1542226/36806926-9256d772-1c8f-11e8-913d-b663d95e6aa2.png)\r\n\r\n![03_picker_width_truncates_longer_values](https://user-images.githubusercontent.com/1542226/36806932-9672d068-1c8f-11e8-966a-80df47fb501a.png)\r\n\r\n"},{"Id":"7311568946","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:10:50","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1995","RelatedDescription":"Opened pull request \"[Enhancement] GTK: Implemented App Lifecycle events\" (#1995) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplemented App Lifecycle events in **GTK** Backend:\r\n- SendStart();\r\n- SendResume();\r\n- SendSleep();\r\n\r\n### Bugs Fixed ###\r\n\r\n- [GTK: App Lifecycle events have not been implemented](https://github.com/xamarin/Xamarin.Forms/issues/1933)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7312576587","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:29:41","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3616","RelatedDescription":"Merged pull request \"[runtime] Fix exception marshalling when the dynamic registrar is removed.\" (#3616) at xamarin/xamarin-macios","RelatedBody":"This can be reproduced by running monotouch-test with all optimizations in\nDebug mode (because some of the exception marshalling tests are only enabled\nin debug mode), so add such a configuration to xharness. To avoid bloating PR\nbuilds, this configuration is only enabled when running all tests (either\nmanually selecting all tests for a PR, or on Wrench, where everything is\nalways tested)."},{"Id":"7312568038","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:28:09","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3618","RelatedDescription":"Opened pull request \"[tests] Run iOS extensions tests on device.\" (#3618) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7312563260","Type":"PullRequestEvent","CreatedAt":"2018-02-28T21:27:35","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3617","RelatedDescription":"Opened pull request \"[static registrar] Make sure to include frameworks for linked away protocol types as well.\" (#3617) at xamarin/xamarin-macios","RelatedBody":"At some point the code wasn't able to figure out the framework for linked away\ntypes (because linked away types don't know which assembly they belong to, and\nthus we couldn't verify that the type in question was a platform type or not),\nso I skipped checking the namespace for such types.\n\nSome time later I implemented support for storing the assembly for a linked\naway type separately, so that it can later be looked up, and thus it's not\nnecessary to exclude linked away types anymore.\n\nThis fixes a build problem with the generated registrar code (which happens\nonly if the INCWidgetProviding interface is linked away) when building the\nlinkall extension tests:\n\n    /work/maccore/master/xamarin-macios/tests/xharness/tmp-test-dir/link all1894/obj/iPhone/Debug64-today-extension/mtouch-cache/registrar.h:319:51: error: no type or protocol named 'NCWidgetProviding'\n    @interface TodayViewController : UIViewController<NCWidgetProviding> {\n                                                      ^"},{"Id":"7312416045","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:55:27","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3615","RelatedDescription":"Merged pull request \"[xharness] Propagate custom defines to referenced projects as well. Fixes maccore #655.\" (#3615) at xamarin/xamarin-macios","RelatedBody":"The ProtocolTest test is located in the bindings-test assembly, and it\nrequires certain conditional compilation defines to be set in order to behave\nproperly.\n\nWith this fix we correctly set these defines when cloning the bindings-test\nproject (in addition to when we set the defines for the main project, which is\neither monotouch-test or linkall for this test).\n\nFixes https://github.com/xamarin/maccore/issues/655."},{"Id":"7312371554","Type":"PullRequestEvent","CreatedAt":"2018-02-28T20:46:24","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3605","RelatedDescription":"Merged pull request \"[AVFoundation] Backport new API from master.\" (#3605) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7311792378","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:54:10","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3614","RelatedDescription":"Merged pull request \"Bump mono and Touch.Unit to head of their branches\" (#3614) at xamarin/xamarin-macios","RelatedBody":"Commit list for spouliot/Touch.Unit:\n\n* spouliot/Touch.Unit@1c41c75 Revert \"[TouchRunner] do not use FinallyDelegate in Runner, because it requires remoting API to be available (#49)\" (#50)\n* spouliot/Touch.Unit@4ac4e32 [TouchRunner] do not use FinallyDelegate in Runner, because it requires remoting API to be available (#49)\n\nDiff: https://github.com/spouliot/Touch.Unit/compare/b5b227e80b7ceeb04ab3e6b85b0853784438f129...1c41c75983ed840e9dc7079b5d4b0c31d1565359\n\nCommit list for mono/mono:\n\n* mono/mono@3f4f070d3db disable test_42_arm64_dyncall_vtypebyval\n* mono/mono@331f927bfea Bump nunitlite (#7276)\n* mono/mono@da6a45a158b Check if we are exceeding the worker count limit\n* mono/mono@21d6b331fc8 Ios sdk changes (#7258)\n* mono/mono@e87d1235da1 Merge mxe-Win32 and mxe-Win64 targets since we are building both in XA anyway (#7280)\n* mono/mono@b9fb4d88572 Bump bockbuild to get curl error changes\n* mono/mono@b7031bccfc8 Emit the same instances in hybrid aot mode as in full aot mode.\n* mono/mono@3538148a18d [2017-12] [xbuild] add property that is available in msbuild (#7224)\n* mono/mono@947e457f0eb [sdks] Instead of using a XCODE_VERSION variable, let the caller set the XCODE_DIR variable directly, since x.ios is using a full path. (#7111)\n* mono/mono@7f0c97aa038 Bump bockbuild for https://github.com/mono/bockbuild/pull/62 (#7207)\n* mono/mono@85cfb9ccab5 Disable partial sharing during JITting, its only been tested in full aot mode, and doesn't seem to work with JITted methods. Fixes https://github.com/mono/mono/issues/7085.\n* mono/mono@22a6ec10b15 Add hybrid aot tests.\n* mono/mono@454bd206aa6 Remove reflection calls for value has to be set\n* mono/mono@4adf8229e88 bump nunit-lite (#7139)\n* mono/mono@de4729fae29 [mono-api-html] Expand \"ignore\" functionality (#7154)\n* mono/mono@721462c4a15 [2017-12] [corlib] Fix RuntimeFeatureTest.NoNewFeaturesAdded on mobile (#7152)\n\nDiff: https://github.com/mono/mono/compare/177997b0632b3b2391ed62a5c2eb2ce6dc4bf9f0...3f4f070d3db5d87abb16016c811f5a8cb68cb792"},{"Id":"7311663446","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:29:12","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3616","RelatedDescription":"Opened pull request \"[runtime] Fix exception marshalling when the dynamic registrar is removed.\" (#3616) at xamarin/xamarin-macios","RelatedBody":"This can be reproduced by running monotouch-test with all optimizations in\nDebug mode (because some of the exception marshalling tests are only enabled\nin debug mode), so add such a configuration to xharness. To avoid bloating PR\nbuilds, this configuration is only enabled when running all tests (either\nmanually selecting all tests for a PR, or on Wrench, where everything is\nalways tested)."},{"Id":"7311648854","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:26:24","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3615","RelatedDescription":"Opened pull request \"[xharness] Propagate custom defines to referenced projects as well. Fixes maccore #655.\" (#3615) at xamarin/xamarin-macios","RelatedBody":"The ProtocolTest test is located in the bindings-test assembly, and it\nrequires certain conditional compilation defines to be set in order to behave\nproperly.\n\nWith this fix we correctly set these defines when cloning the bindings-test\nproject (in addition to when we set the defines for the main project, which is\neither monotouch-test or linkall for this test).\n\nFixes https://github.com/xamarin/maccore/issues/655."},{"Id":"7310193302","Type":"PullRequestEvent","CreatedAt":"2018-02-28T14:20:36","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3614","RelatedDescription":"Opened pull request \"Bump mono and Touch.Unit to head of their branches\" (#3614) at xamarin/xamarin-macios","RelatedBody":"Commit list for spouliot/Touch.Unit:\n\n* spouliot/Touch.Unit@1c41c75 Revert \"[TouchRunner] do not use FinallyDelegate in Runner, because it requires remoting API to be available (#49)\" (#50)\n* spouliot/Touch.Unit@4ac4e32 [TouchRunner] do not use FinallyDelegate in Runner, because it requires remoting API to be available (#49)\n\nDiff: https://github.com/spouliot/Touch.Unit/compare/b5b227e80b7ceeb04ab3e6b85b0853784438f129...1c41c75983ed840e9dc7079b5d4b0c31d1565359\n\nCommit list for mono/mono:\n\n* mono/mono@3f4f070d3db disable test_42_arm64_dyncall_vtypebyval\n* mono/mono@331f927bfea Bump nunitlite (#7276)\n* mono/mono@da6a45a158b Check if we are exceeding the worker count limit\n* mono/mono@21d6b331fc8 Ios sdk changes (#7258)\n* mono/mono@e87d1235da1 Merge mxe-Win32 and mxe-Win64 targets since we are building both in XA anyway (#7280)\n* mono/mono@b9fb4d88572 Bump bockbuild to get curl error changes\n* mono/mono@b7031bccfc8 Emit the same instances in hybrid aot mode as in full aot mode.\n* mono/mono@3538148a18d [2017-12] [xbuild] add property that is available in msbuild (#7224)\n* mono/mono@947e457f0eb [sdks] Instead of using a XCODE_VERSION variable, let the caller set the XCODE_DIR variable directly, since x.ios is using a full path. (#7111)\n* mono/mono@7f0c97aa038 Bump bockbuild for https://github.com/mono/bockbuild/pull/62 (#7207)\n* mono/mono@85cfb9ccab5 Disable partial sharing during JITting, its only been tested in full aot mode, and doesn't seem to work with JITted methods. Fixes https://github.com/mono/mono/issues/7085.\n* mono/mono@22a6ec10b15 Add hybrid aot tests.\n* mono/mono@454bd206aa6 Remove reflection calls for value has to be set\n* mono/mono@4adf8229e88 bump nunit-lite (#7139)\n* mono/mono@de4729fae29 [mono-api-html] Expand \"ignore\" functionality (#7154)\n* mono/mono@721462c4a15 [2017-12] [corlib] Fix RuntimeFeatureTest.NoNewFeaturesAdded on mobile (#7152)\n\nDiff: https://github.com/mono/mono/compare/177997b0632b3b2391ed62a5c2eb2ce6dc4bf9f0...3f4f070d3db5d87abb16016c811f5a8cb68cb792"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"968935619358527488","CreatedAt":"2018-02-28T19:47:08+00:00","UserScreenname":"xamarinhq","Text":"Check out the new, feature-packed release of #UrhoSharp 1.8: https://t.co/ZxSIstdhNE https://t.co/cwathwkTEw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"968895325460103168","CreatedAt":"2018-02-28T17:07:01+00:00","UserScreenname":"xamarinhq","Text":"Add Augmented Reality to your #XamarinAndroid apps with #ARCore: https://t.co/TwpBAAMyUJ https://t.co/YZBmRK5CcT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":5,"RawContent":null},{"Id":"968530780724088832","CreatedAt":"2018-02-27T16:58:27+00:00","UserScreenname":"xamarinhq","Text":"Our own @mayur_tendulkar shows you how to build a mobile app using #XamarinForms and the Microsoft Graph API:â¦ https://t.co/svcX6jHBJ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":15,"RawContent":null},{"Id":"968204127166754816","CreatedAt":"2018-02-26T19:20:26+00:00","UserScreenname":"xamarinhq","Text":"Get a sneak peek at our newest @XamarinU course, \"Navigation Patterns in #XamarinForms\": https://t.co/3fd0sIUJMZ https://t.co/GzDZxRtlZH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":20,"RawContent":null},{"Id":"968170803916361728","CreatedAt":"2018-02-26T17:08:02+00:00","UserScreenname":"xamarinhq","Text":"Learn how to supercharge your Xamarin.Mac app startup times: https://t.co/JzwELyF3Tm https://t.co/ABxM6v3B6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":4,"RawContent":null},{"Id":"967928201430388736","CreatedAt":"2018-02-26T01:04:01+00:00","UserScreenname":"xamarinhq","Text":"Implement or improve end-to-end mobile #DevOps in your apps with this series from Greg Shackles on the #VSAppCenterâ¦ https://t.co/bCckhyxtl6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":25,"RawContent":null},{"Id":"967564304206745600","CreatedAt":"2018-02-25T00:58:01+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/6VAIpDbCD7","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":77,"FavoriteCount":44,"RawContent":null},{"Id":"967121514339405824","CreatedAt":"2018-02-23T19:38:31+00:00","UserScreenname":"xamarinhq","Text":"Add @TizenProject to your #XamarinForms apps: https://t.co/pom9Nki4vo https://t.co/EVWC9fi7wy","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":8,"RawContent":null},{"Id":"967078348043190272","CreatedAt":"2018-02-23T16:47:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":22,"RawContent":null},{"Id":"966787653097181187","CreatedAt":"2018-02-22T21:31:53+00:00","UserScreenname":"xamarinhq","Text":"Create and host tvOS TVML apps with Microsoft #Azure and #Xamarin: https://t.co/ScMHDQBDvs https://t.co/sPxlVR6weS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":18,"RawContent":null},{"Id":"966716967104245760","CreatedAt":"2018-02-22T16:51:00+00:00","UserScreenname":"xamarinhq","Text":"It's almost time for our webinar with @XamarinU on building your first intelligent app with #Xamarin and Microsoftâ¦ https://t.co/nrzOWMsSV0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":4,"RawContent":null},{"Id":"966354831018520577","CreatedAt":"2018-02-21T16:52:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss tomorrow's webinar with @XamarinU on building your first intelligent app with #Xamarin and Mâ¦ https://t.co/XMK3ovJfTs","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":17,"RawContent":null},{"Id":"966037865846181889","CreatedAt":"2018-02-20T19:52:29+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/Qv70tw9axj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":35,"RawContent":null},{"Id":"965998738874556416","CreatedAt":"2018-02-20T17:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:â¦ https://t.co/1lAEfhDA1g","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null},{"Id":"965632571618062337","CreatedAt":"2018-02-19T17:02:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":27,"RawContent":null},{"Id":"965372405307904001","CreatedAt":"2018-02-18T23:48:11+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/jYvtDxgwWV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":18,"RawContent":null},{"Id":"965038410061754371","CreatedAt":"2018-02-18T01:41:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expeâ¦ https://t.co/RWk7OAQZFR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":126,"FavoriteCount":45,"RawContent":null},{"Id":"964574735530065920","CreatedAt":"2018-02-16T18:58:32+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/7nB0W3r0xF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":23,"RawContent":null},{"Id":"964541888152920064","CreatedAt":"2018-02-16T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/WXW0TRw6LE","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":10,"RawContent":null},{"Id":"964239391743979520","CreatedAt":"2018-02-15T20:46:00+00:00","UserScreenname":"xamarinhq","Text":"Try out the just-released Xamarin.iOS and Xcode 9.3 Web Preview: https://t.co/2zZi61OBFp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-02-28T21:47:00.5822037Z","RunDurationInMilliseconds":4635}