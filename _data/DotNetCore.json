{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddressed an issue where the Framework would throw an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9266559615","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:03:34","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Merged pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""},{"Id":"9225246598","Type":"PullRequestEvent","CreatedAt":"2019-03-12T10:03:37","Actor":"devlead","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Opened pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""},{"Id":"9214022828","Type":"PullRequestEvent","CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Opened pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9208392766","Type":"IssuesEvent","CreatedAt":"2019-03-08T19:00:06","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"9208389675","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:32","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Merged pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9208386555","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Merged pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9208386542","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"9208384997","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Merged pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9208384964","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"9208383052","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:27","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Merged pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9284961641","Type":"PullRequestEvent","CreatedAt":"2019-03-21T04:29:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23381","RelatedDescription":"Opened pull request \"Hoist calls to IsBitwiseEquatable\" (#23381) at dotnet/coreclr","RelatedBody":"Smaller IL is easier for JIT"},{"Id":"9284693594","Type":"IssuesEvent","CreatedAt":"2019-03-21T02:59:29","Actor":"Zhentar","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23380","RelatedDescription":"Opened issue \"HWIntrinsics: Load folding to immediate address?\" (#23380) at dotnet/coreclr","RelatedBody":"I've been taking a go at porting the XXH3 hash algorithm including SSE & AVX versions. My current AVX2 code for the hot loop is here: https://github.com/Zhentar/xxHash3.NET/blob/ee6a626e87f2a829ec786690d4dfa560d876dda7/xxHash3/xxHash3_AVX2.cs#L103\r\n\r\nSo far I've gotten it up to 36GB/s, against the clang compiled native version's ~40GB/s.\r\n\r\nOne sub-piece by clang looks like this:\r\n```asm\r\nvmovdqu ymm3, ymmword ptr [rax-360h]\r\nvpaddd  ymm4, ymm3, cs:ymmword_40BDC0\r\nvpshufd ymm6, ymm4, 31h\r\nvpmuludq ymm4, ymm6, ymm4\r\nvpaddq  ymm3, ymm5, ymm3\r\nvpaddq  ymm0, ymm0, ymm3\r\n```\r\n\r\nWhile my version looks like this:\r\n```asm\r\nvmovupd ymm8,ymmword ptr [r10+88h]\r\nvmovupd ymm9,ymmword ptr [r11+360h]\r\nvpaddd  ymm8,ymm9,ymm8\r\nvpshufd ymm10,ymm8,31h\r\nvpmuludq ymm8,ymm8,ymm10\r\nvpaddq  ymm1,ymm9,ymm1\r\nvpaddq  ymm1,ymm8,ymm1\r\n```\r\n\r\nOr, if I arrange the code such that folding kicks in (uncommenting the `in` for the `ProcessStripePiece_AVX2` key argument), this:\r\n```asm\r\nlea     r14,[rax+20h]\r\nvmovupd ymm4,ymmword ptr [rbp+100h]\r\nvpaddd  ymm5,ymm4,ymmword ptr [r14]\r\nvpshufd ymm6,ymm5,31h\r\nvpmuludq ymm5,ymm5,ymm6\r\nvpaddq  ymm0,ymm4,ymm0\r\nvpaddq  ymm0,ymm5,ymm0\r\n```\r\n\r\nHowever, the folded version performs worse, because the `lea` competes with the add/shuf/mul instructions for an integer ALU port instead of a load port.\r\n\r\nIs there any way to get an immediate address folded into the `vpaddd` instead of an execution time calculated displacement? I've tried a static readonly field, but that still resulted in an lea displacement calculation.\t\t"},{"Id":"9284579259","Type":"PullRequestEvent","CreatedAt":"2019-03-21T02:23:00","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23379","RelatedDescription":"Opened pull request \"[WIP] Filtering EventPipe correctly\" (#23379) at dotnet/coreclr","RelatedBody":""},{"Id":"9284569952","Type":"PullRequestEvent","CreatedAt":"2019-03-21T02:20:02","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23257","RelatedDescription":"Merged pull request \"Test for PollingCounter\" (#23257) at dotnet/coreclr","RelatedBody":"Related issue: https://github.com/dotnet/coreclr/issues/23217\r\n\r\nFor now this uses reflection since PollingCounter is not a public API yet. Once it's made public, this test will be modified to stop using reflection. \r\n\r\nThis test currently tests:\r\n\r\n- Constructor for PollingCounter\r\n- PollingCounter Payload correctness \r\n\r\ncc @vancem @noahfalk @jorive @cshung"},{"Id":"9284527874","Type":"IssuesEvent","CreatedAt":"2019-03-21T02:06:28","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23378","RelatedDescription":"Opened issue \"[arm64] arm64_cross_checked_windows_nt_corefx_jitstressregs\" (#23378) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x80_tst/25/\r\n\r\n**Log:**\r\n```\r\nAssertion Failed\r\n\r\n   at System.Threading.ThreadPoolBoundHandle.BindHandleCore(SafeHandle handle)\r\n   at System.Threading.ThreadPoolBoundHandle.BindHandle(SafeHandle handle)\r\n   at System.Net.Sockets.SafeSocketHandle.GetOrAllocateThreadPoolBoundHandle(Boolean trySkipCompletionPortOnSuccess) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SafeSocketHandle.Windows.cs:line 51\r\n   at System.Net.Sockets.Socket.GetOrAllocateThreadPoolBoundHandleSlow() in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Windows.cs:line 304\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.SetUnmanagedStructures(Object objectsToPin) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\BaseOverlappedAsyncResult.Windows.cs:line 50\r\n   at System.Net.Sockets.OverlappedAsyncResult.SetUnmanagedStructures(Byte[] buffer, Int32 offset, Int32 size, SocketAddress socketAddress) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\OverlappedAsyncResult.Windows.cs:line 61\r\n   at System.Net.Sockets.SocketPal.SendAsync(SafeSocketHandle handle, Byte[] buffer, Int32 offset, Int32 count, SocketFlags socketFlags, OverlappedAsyncResult asyncResult) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketPal.Windows.cs:line 917\r\n   at System.Net.Sockets.Socket.DoBeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, OverlappedAsyncResult asyncResult) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2562\r\n   at System.Net.Sockets.Socket.BeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, Object state) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2538\r\n   at System.Net.Sockets.Socket.BeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, AsyncCallback callback, Object state) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2504\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl(Func`3 beginMethod, Func`2 endFunction, Action`1 endAction, Object state, TaskCreationOptions creationOptions)\r\n   at System.Net.Sockets.Tests.SendReceive`1.<>c__DisplayClass15_1.<SendAsync_ConcurrentDispose_SucceedsOrThrowsAppropriateException>b__1() in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\tests\\FunctionalTests\\SendReceive.cs:line 881\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj)\r\nexit code -2146232797 \r\n```"},{"Id":"9284479866","Type":"PullRequestEvent","CreatedAt":"2019-03-21T01:51:24","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23377","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,corert\" (#23377) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"9284434078","Type":"PullRequestEvent","CreatedAt":"2019-03-21T01:36:36","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23360","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#23360) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190319.04\r\n- **Date Produced**: 3/19/2019 6:57 PM\r\n- **Commit**: 4d6b497d03a1758b9beed08a0b3fa258bc78160d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27519-04\r\n\r\n"},{"Id":"9284427906","Type":"IssuesEvent","CreatedAt":"2019-03-21T01:34:36","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23376","RelatedDescription":"Closed issue \"[x86] System.Tests.ArraySegment_Tests.CopyTo_Invalid\" (#23376) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_minopts/754/\r\n\r\n**Failed tests:**\r\nSystem.Tests.ArraySegment_Tests.CopyTo_Invalid\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.ArraySegment_Tests.CopyTo_Invalid(arraySegment: [4, 5, 6]) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: (null)\r\n        Actual:   destination\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---91802095\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(68,0): at System.AssertExtensions.Throws[T](String paramName, Action action)\r\n          D:\\j\\workspace\\x86_checked_w---91802095\\_\\fx\\src\\System.Runtime\\tests\\System\\ArraySegmentTests.netcoreapp.cs(233,0): at System.Tests.ArraySegment_Tests.CopyTo_Invalid(ArraySegment`1 arraySegment)\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9284258398","Type":"PullRequestEvent","CreatedAt":"2019-03-21T00:41:45","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11004","RelatedDescription":"Opened pull request \"Convert from using Newtonsoft.Json for reading launchSettings.json to System.Text.Json\" (#11004) at dotnet/cli","RelatedBody":""},{"Id":"9284118100","Type":"PullRequestEvent","CreatedAt":"2019-03-21T00:01:15","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11003","RelatedDescription":"Opened pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#11003) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9268764968","Type":"IssuesEvent","CreatedAt":"2019-03-19T06:25:35","Actor":"githubdigo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1103","RelatedDescription":"Opened issue \"After updating to .netStandard 2.0.3 Convert.ToString(null) is throwing Null reference exception\" (#1103) at dotnet/standard","RelatedBody":""},{"Id":"9265826140","Type":"PullRequestEvent","CreatedAt":"2019-03-18T19:09:35","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1102","RelatedDescription":"Merged pull request \"Expose RandomNumberGenerator.GetInt32\" (#1102) at dotnet/standard","RelatedBody":"Fixes #1101."},{"Id":"9265826095","Type":"IssuesEvent","CreatedAt":"2019-03-18T19:09:35","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1101","RelatedDescription":"Closed issue \"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32\" (#1101) at dotnet/standard","RelatedBody":"I'd like to propose the inclusion of the new `System.Security.Cryptography.RandomNumberGenerator.GetInt32` APIs, added in https://github.com/dotnet/corefx/pull/31243.\r\n\r\nAs noted in https://github.com/dotnet/corefx/issues/30873, this is often incorrectly implemented, which can lead to security vulnerabilities and bias. It would be nice if it was part of the standard, to have a convenient API for this across all platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex ec34484..2b7d68b 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -810,6 +810,8 @@ namespace System.Security.Cryptography\r\n         public virtual void GetBytes(System.Span<byte> data) { }\r\n         public virtual void GetNonZeroBytes(byte[] data) { }\r\n         public virtual void GetNonZeroBytes(System.Span<byte> data) { }\r\n+        public static int GetInt32(int fromInclusive, int toExclusive) { throw null; }\r\n+        public static int GetInt32(int toExclusive) { throw null; }\r\n     }\r\n     [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]\r\n     public abstract partial class RC2 : System.Security.Cryptography.SymmetricAlgorithm\r\n\r\n```\r\n\r\n// @terrajobst "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9284994928","Type":"PullRequestEvent","CreatedAt":"2019-03-21T04:41:15","Actor":"lmolkova","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36203","RelatedDescription":"Opened pull request \"Fix 31687 on netfx: escape Correlation-Context keys and values\" (#36203) at dotnet/corefx","RelatedBody":"Fixes #31687\r\n\r\nSee #35906"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9285058509","Type":"PullRequestEvent","CreatedAt":"2019-03-21T05:03:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34323","RelatedDescription":"Opened pull request \"Track l-value and r-value types in conditional operator\" (#34323) at dotnet/roslyn","RelatedBody":"Assignment to ref variable produces safety warnings\r\n\r\n\r\n- Fixes https://github.com/dotnet/roslyn/issues/33982 (Mismatched null assignment through a ref variable should be a safety warning)\r\n- Fixes https://github.com/dotnet/roslyn/issues/30432 (Report nullability warning for best common type mismatch with `ref`)\r\n- Fixes https://github.com/dotnet/roslyn/issues/33664 (Conditional ref operator should require same nullability)\r\n- Closes to https://github.com/dotnet/roslyn/issues/29869 (Confirm ``` /*T:...*/``` expectations in ConditionalOperator_14 unit-test)\r\n- Relates to https://github.com/dotnet/roslyn/issues/33025 (Track null state through ref assignments to ref ternaries)"},{"Id":"9284775931","Type":"PullRequestEvent","CreatedAt":"2019-03-21T03:25:29","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34322","RelatedDescription":"Opened pull request \"Move EnC debug information reading to Features.\" (#34322) at dotnet/roslyn","RelatedBody":"Encapsulate the logic in EditAndContinueMethodDebugInfoReader."},{"Id":"9284631329","Type":"IssuesEvent","CreatedAt":"2019-03-21T02:39:28","Actor":"lostmsu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34321","RelatedDescription":"Opened issue \"Can't compile \"Unmanaged constructed type\" after deploying the latest master from Visual Studio\" (#34321) at dotnet/roslyn","RelatedBody":"**Version Used**: 6de8558637d012340122c9849be633be3004ed9c\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Follow Roslyn Visual Studio 2019 build instructions\r\n2. Launch RoslynDev instance of VS 2019\r\n3. Clone https://github.com/losttech/TypeNum\r\n4. Open TypeNum/TypeNum.sln\r\n5. Try building solution\r\n\r\n**Expected Behavior**:\r\nIDE does not show any errors\r\nSolution builds\r\n\r\n**Actual Behavior**:\r\nIDE does not show any errors (which is correct)\r\nBuild fails: `error CS8377: The type 'N1<int>' must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter 'TNum' in the generic type or method 'Twice<TNum, T>'`\r\n\r\n**Environment**\r\nVS 16.0.0 RC.2\r\ndotnet --version: 3.0.100-preview3-010431\r\n\r\n**Related**\r\n#31374\r\ndotnet/csharplang#1744"},{"Id":"9284571870","Type":"PullRequestEvent","CreatedAt":"2019-03-21T02:20:37","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34320","RelatedDescription":"Opened pull request \"Fixing completion test harness\" (#34320) at dotnet/roslyn","RelatedBody":""},{"Id":"9284564513","Type":"PullRequestEvent","CreatedAt":"2019-03-21T02:18:18","Actor":"chsienki","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34319","RelatedDescription":"Opened pull request \"Don't warn about #nullable in disabled code:\" (#34319) at dotnet/roslyn","RelatedBody":" - Check if in an active code region before warning about #nullable directives in lower lang versions\r\n - Add test"},{"Id":"9284457543","Type":"PullRequestEvent","CreatedAt":"2019-03-21T01:44:16","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34318","RelatedDescription":"Opened pull request \"Ensure we wait for the workspace changes from .editorconfig changes \" (#34318) at dotnet/roslyn","RelatedBody":"Our integration tests were modifying .editorconfig files and then waiting on our workspace waiters to ensure the change is propagated to the workspace. This isn't sufficient, since there's asynchrony in various places before it gets back to our system:\r\n\r\n1. The kernel has to actually notify the devenv process.\r\n2. The Visual Studio file watching service has asynchrony in it to notify on the appropriate threads.\r\n3. The coding conventions library internally does some async locking around a semaphore, so things might get deferred there if timing is just right."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9284481032","Type":"PullRequestEvent","CreatedAt":"2019-03-21T01:51:46","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7195","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7195) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9284354318","Type":"PullRequestEvent","CreatedAt":"2019-03-21T01:11:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7182","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7182) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"9283765444","Type":"PullRequestEvent","CreatedAt":"2019-03-20T22:34:10","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7194","RelatedDescription":"Merged pull request \"Get CoreCLR tests from Azure\" (#7194) at dotnet/corert","RelatedBody":"Jenkins saved build artifacts are likely to be deleted as we move to AzDO. Move them all to the cloudcijobs account and update URL pointers in the repo."},{"Id":"9283325786","Type":"PullRequestEvent","CreatedAt":"2019-03-20T21:15:07","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7194","RelatedDescription":"Opened pull request \"Get CoreCLR tests from Azure\" (#7194) at dotnet/corert","RelatedBody":"Jenkins saved build artifacts are likely to be deleted as we move to AzDO. Move them all to the cloudcijobs account and update URL pointers in the repo."},{"Id":"9282187630","Type":"PullRequestEvent","CreatedAt":"2019-03-20T18:22:12","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7192","RelatedDescription":"Merged pull request \"Run CoreFX tests single threaded\" (#7192) at dotnet/corert","RelatedBody":"Might help us avoid `abort trap 6` that has been plaguing the CI (#7118).\r\n\r\nDisabling parallel execution everywhere because it doesn't have big impact on test execution time and helps keep the changes to build-job.yml short."},{"Id":"9282174349","Type":"PullRequestEvent","CreatedAt":"2019-03-20T18:20:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7193","RelatedDescription":"Merged pull request \"Make CoreFX tests RD.XML smaller\" (#7193) at dotnet/corert","RelatedBody":"Most of this stuff is no longer needed."},{"Id":"9280054193","Type":"IssuesEvent","CreatedAt":"2019-03-20T14:04:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/2666","RelatedDescription":"Closed issue \"Port Enum performance parsing/formatting optimizations from CoreCLR\" (#2666) at dotnet/corert","RelatedBody":"Enum performance parsing/formatting optimizations done in CoreCLR:\r\n\r\nhttps://github.com/dotnet/coreclr/pull/9340\r\nhttps://github.com/dotnet/coreclr/pull/6645\r\nhttps://github.com/dotnet/coreclr/pull/3061\r\nhttps://github.com/dotnet/coreclr/pull/81\r\n\r\nWe should make sure to port these optimizations; and verify that the Enum parsing/formatting performance is on par with CoreCLR."},{"Id":"9278210774","Type":"PullRequestEvent","CreatedAt":"2019-03-20T09:37:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7193","RelatedDescription":"Opened pull request \"Make CoreFX tests RD.XML smaller\" (#7193) at dotnet/corert","RelatedBody":"Most of this stuff is no longer needed."},{"Id":"9278208786","Type":"PullRequestEvent","CreatedAt":"2019-03-20T09:37:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7192","RelatedDescription":"Opened pull request \"Run CoreFX tests single threaded\" (#7192) at dotnet/corert","RelatedBody":"Might help us avoid `abort trap 6` that has been plaguing the CI (#7118).\r\n\r\nDisabling parallel execution everywhere because it doesn't have big impact on test execution time and helps keep the changes to build-job.yml short."},{"Id":"9277519274","Type":"PullRequestEvent","CreatedAt":"2019-03-20T07:41:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7191","RelatedDescription":"Merged pull request \"Add back APIs dropped from RuntimeHelpers by accident\" (#7191) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9283956200","Type":"PullRequestEvent","CreatedAt":"2019-03-20T23:17:58","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3030","RelatedDescription":"Opened pull request \"Prevent copy-local of runtime assets when targeting .NET Framework TFM.\" (#3030) at dotnet/sdk","RelatedBody":"This commit prevents the copying of \"runtime\" assets (those that end up\r\nin the `runtimes/` sub-directory for resolution based on the RID at\r\nruntime) when building or publishing an application that targets a .NET\r\nFramework TFM.  Only the .NET Core runtime will resolve these assets\r\nbased on RID, so copying them for .NET Framework targeted applications\r\nis unnecessary.\r\n\r\nFixes dotnet/cli#10979."},{"Id":"9283156184","Type":"PullRequestEvent","CreatedAt":"2019-03-20T20:49:07","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3029","RelatedDescription":"Opened pull request \"Update branding to 2.2.300\" (#3029) at dotnet/sdk","RelatedBody":""},{"Id":"9283149376","Type":"PullRequestEvent","CreatedAt":"2019-03-20T20:48:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3028","RelatedDescription":"Opened pull request \"Updating brandh to 2.1.700\" (#3028) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"423568399","IsPullRequest":true,"CreatedAt":"2019-03-21T04:29:12","Actor":"jkotas","Number":"23381","RawContent":null,"Title":"Hoist calls to IsBitwiseEquatable","State":"open","Body":"Smaller IL is easier for JIT","Url":"https://github.com/dotnet/coreclr/pull/23381","RelatedDescription":"Open PR \"Hoist calls to IsBitwiseEquatable\" (#23381)"},{"Id":"423554480","IsPullRequest":false,"CreatedAt":"2019-03-21T02:59:28","Actor":"Zhentar","Number":"23380","RawContent":null,"Title":"HWIntrinsics: Load folding to immediate address?","State":"open","Body":"I've been taking a go at porting the XXH3 hash algorithm including SSE & AVX versions. My current AVX2 code for the hot loop is here: https://github.com/Zhentar/xxHash3.NET/blob/ee6a626e87f2a829ec786690d4dfa560d876dda7/xxHash3/xxHash3_AVX2.cs#L103\r\n\r\nSo far I've gotten it up to 36GB/s, against the clang compiled native version's ~40GB/s.\r\n\r\nOne sub-piece by clang looks like this:\r\n```asm\r\nvmovdqu ymm3, ymmword ptr [rax-360h]\r\nvpaddd  ymm4, ymm3, cs:ymmword_40BDC0\r\nvpshufd ymm6, ymm4, 31h\r\nvpmuludq ymm4, ymm6, ymm4\r\nvpaddq  ymm3, ymm5, ymm3\r\nvpaddq  ymm0, ymm0, ymm3\r\n```\r\n\r\nWhile my version looks like this:\r\n```asm\r\nvmovupd ymm8,ymmword ptr [r10+88h]\r\nvmovupd ymm9,ymmword ptr [r11+360h]\r\nvpaddd  ymm8,ymm9,ymm8\r\nvpshufd ymm10,ymm8,31h\r\nvpmuludq ymm8,ymm8,ymm10\r\nvpaddq  ymm1,ymm9,ymm1\r\nvpaddq  ymm1,ymm8,ymm1\r\n```\r\n\r\nOr, if I arrange the code such that folding kicks in (uncommenting the `in` for the `ProcessStripePiece_AVX2` key argument), this:\r\n```asm\r\nlea     r14,[rax+20h]\r\nvmovupd ymm4,ymmword ptr [rbp+100h]\r\nvpaddd  ymm5,ymm4,ymmword ptr [r14]\r\nvpshufd ymm6,ymm5,31h\r\nvpmuludq ymm5,ymm5,ymm6\r\nvpaddq  ymm0,ymm4,ymm0\r\nvpaddq  ymm0,ymm5,ymm0\r\n```\r\n\r\nHowever, the folded version performs worse, because the `lea` competes with the add/shuf/mul instructions for an integer ALU port instead of a load port.\r\n\r\nIs there any way to get an immediate address folded into the `vpaddd` instead of an execution time calculated displacement? I've tried a static readonly field, but that still resulted in an lea displacement calculation.\t\t","Url":"https://github.com/dotnet/coreclr/issues/23380","RelatedDescription":"Open issue \"HWIntrinsics: Load folding to immediate address?\" (#23380)"},{"Id":"423548631","IsPullRequest":true,"CreatedAt":"2019-03-21T02:22:59","Actor":"sywhang","Number":"23379","RawContent":null,"Title":"[WIP] Filtering EventPipe correctly","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23379","RelatedDescription":"Open PR \"[WIP] Filtering EventPipe correctly\" (#23379)"},{"Id":"423545911","IsPullRequest":false,"CreatedAt":"2019-03-21T02:06:27","Actor":"VincentBu","Number":"23378","RawContent":null,"Title":"[arm64] arm64_cross_checked_windows_nt_corefx_jitstressregs","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x80_tst/25/\r\n\r\n**Log:**\r\n```\r\nAssertion Failed\r\n\r\n   at System.Threading.ThreadPoolBoundHandle.BindHandleCore(SafeHandle handle)\r\n   at System.Threading.ThreadPoolBoundHandle.BindHandle(SafeHandle handle)\r\n   at System.Net.Sockets.SafeSocketHandle.GetOrAllocateThreadPoolBoundHandle(Boolean trySkipCompletionPortOnSuccess) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SafeSocketHandle.Windows.cs:line 51\r\n   at System.Net.Sockets.Socket.GetOrAllocateThreadPoolBoundHandleSlow() in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.Windows.cs:line 304\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.SetUnmanagedStructures(Object objectsToPin) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\BaseOverlappedAsyncResult.Windows.cs:line 50\r\n   at System.Net.Sockets.OverlappedAsyncResult.SetUnmanagedStructures(Byte[] buffer, Int32 offset, Int32 size, SocketAddress socketAddress) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\OverlappedAsyncResult.Windows.cs:line 61\r\n   at System.Net.Sockets.SocketPal.SendAsync(SafeSocketHandle handle, Byte[] buffer, Int32 offset, Int32 count, SocketFlags socketFlags, OverlappedAsyncResult asyncResult) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketPal.Windows.cs:line 917\r\n   at System.Net.Sockets.Socket.DoBeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, OverlappedAsyncResult asyncResult) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2562\r\n   at System.Net.Sockets.Socket.BeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, Object state) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2538\r\n   at System.Net.Sockets.Socket.BeginSend(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, AsyncCallback callback, Object state) in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\Socket.cs:line 2504\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl(Func`3 beginMethod, Func`2 endFunction, Action`1 endAction, Object state, TaskCreationOptions creationOptions)\r\n   at System.Net.Sockets.Tests.SendReceive`1.<>c__DisplayClass15_1.<SendAsync_ConcurrentDispose_SucceedsOrThrowsAppropriateException>b__1() in D:\\j\\workspace\\arm64_cross_c---650b4731\\_\\fx\\src\\System.Net.Sockets\\tests\\FunctionalTests\\SendReceive.cs:line 881\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart(Object obj)\r\nexit code -2146232797 \r\n```","Url":"https://github.com/dotnet/coreclr/issues/23378","RelatedDescription":"Open issue \"[arm64] arm64_cross_checked_windows_nt_corefx_jitstressregs\" (#23378)"},{"Id":"423543474","IsPullRequest":true,"CreatedAt":"2019-03-21T01:51:23","Actor":"Dotnet-GitSync-Bot","Number":"23377","RawContent":null,"Title":"Mirror changes from dotnet/corefx,corert","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/23377","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,corert\" (#23377)"},{"Id":"423222418","IsPullRequest":true,"CreatedAt":"2019-03-21T01:36:35","Actor":"dotnet-maestro[bot]","Number":"23360","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190319.04\r\n- **Date Produced**: 3/19/2019 6:57 PM\r\n- **Commit**: 4d6b497d03a1758b9beed08a0b3fa258bc78160d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27519-04\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#23360)"},{"Id":"423539535","IsPullRequest":false,"CreatedAt":"2019-03-21T01:34:35","Actor":"VincentBu","Number":"23376","RawContent":null,"Title":"[x86] System.Tests.ArraySegment_Tests.CopyTo_Invalid","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_minopts/754/\r\n\r\n**Failed tests:**\r\nSystem.Tests.ArraySegment_Tests.CopyTo_Invalid\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.ArraySegment_Tests.CopyTo_Invalid(arraySegment: [4, 5, 6]) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: (null)\r\n        Actual:   destination\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x86_checked_w---91802095\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(68,0): at System.AssertExtensions.Throws[T](String paramName, Action action)\r\n          D:\\j\\workspace\\x86_checked_w---91802095\\_\\fx\\src\\System.Runtime\\tests\\System\\ArraySegmentTests.netcoreapp.cs(233,0): at System.Tests.ArraySegment_Tests.CopyTo_Invalid(ArraySegment`1 arraySegment)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23376","RelatedDescription":"Closed issue \"[x86] System.Tests.ArraySegment_Tests.CopyTo_Invalid\" (#23376)"},{"Id":"423528352","IsPullRequest":false,"CreatedAt":"2019-03-21T00:23:00","Actor":"BrianBohe","Number":"23375","RawContent":null,"Title":"Setting the stack level to 0 when generating code for each BasicBlock","State":"open","Body":"After [setting the stack level to 0 on genInitialize ](https://github.com/BrianBohe/coreclr/blob/1ee36b6a373fb194799989a8dd0cdfbca9172879/src/jit/codegenlinear.cpp#L117-L119), it seems we don't need to [keep setting it to 0](https://github.com/dotnet/coreclr/blob/master/src/jit/codegenlinear.cpp#L345-L349) for each of the BasicBlocks.\r\n\r\ncc @sandreenko ","Url":"https://github.com/dotnet/coreclr/issues/23375","RelatedDescription":"Open issue \"Setting the stack level to 0 when generating code for each BasicBlock\" (#23375)"},{"Id":"423517775","IsPullRequest":true,"CreatedAt":"2019-03-20T23:34:16","Actor":"jkoritzinsky","Number":"23374","RawContent":null,"Title":"Update Ubuntu 18.04 ARM64 queues","State":"open","Body":"According to the infra team, this should fix our Interop.PInvoke test infra failures on ARM64.","Url":"https://github.com/dotnet/coreclr/pull/23374","RelatedDescription":"Open PR \"Update Ubuntu 18.04 ARM64 queues\" (#23374)"},{"Id":"423517772","IsPullRequest":true,"CreatedAt":"2019-03-20T23:34:15","Actor":"BrianBohe","Number":"23373","RawContent":null,"Title":"A new way of tracking variables","State":"open","Body":"This is a rephrasing of [other PR](https://github.com/dotnet/coreclr/pull/22770) that is quite huge.\r\n\r\nI have splitted that main PR in different PRs:\r\n\r\n1. [Moving gen stack level to code gen interface](https://github.com/dotnet/coreclr/pull/23328): **not merged**, those are the first 3 commits con this PR.\r\n2. [Adding comments](https://github.com/dotnet/coreclr/pull/23327): **not merged** and not included here.\r\n3. [Adding const to functions that don't change or shouldn't change state](https://github.com/dotnet/coreclr/pull/23329): **merged**\r\n4. [Adding a flag to able/disable scope info](https://github.com/dotnet/coreclr/pull/23298) **merged**\r\n\r\nI am reporting arguments, special arguments and IL local variables. The integration has been checked from VS IDE.\r\n\r\nI am writing a file for the documentation of the repository about reporting variable home.","Url":"https://github.com/dotnet/coreclr/pull/23373","RelatedDescription":"Open PR \"A new way of tracking variables\" (#23373)"},{"Id":"423501302","IsPullRequest":true,"CreatedAt":"2019-03-20T22:30:44","Actor":"jashook","Number":"23372","RawContent":null,"Title":"Remove innerloop flow jobs that were missed","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23372","RelatedDescription":"Open PR \"Remove innerloop flow jobs that were missed\" (#23372)"},{"Id":"423498108","IsPullRequest":true,"CreatedAt":"2019-03-20T22:19:43","Actor":"adiaaida","Number":"23371","RawContent":null,"Title":"Change perf smoketest queue","State":"open","Body":"We have installed python3 on all of the Helix queues, so we no longer need to be on a special perf queue for the smoketest runs.","Url":"https://github.com/dotnet/coreclr/pull/23371","RelatedDescription":"Open PR \"Change perf smoketest queue\" (#23371)"},{"Id":"423478961","IsPullRequest":false,"CreatedAt":"2019-03-20T21:23:27","Actor":"AndyAyersMS","Number":"23370","RawContent":null,"Title":"General inlining of tail calls","State":"open","Body":" This note explores expanding jit inlining to handle cases of explicit tail calls.\r\n\r\ncc @dotnet/jit-contrib @dsyme \r\n\r\nRelated issues: #18406, Microsoft/visualfsharp#6329\r\n\r\n## Current behavior of the jit\r\n - freely allows inlining of implicit tail calls\r\n - propagates implicit tail to qualified inlinee call sites\r\n - demotes implicit tail call to normal call, if it requires a helper\r\n - blocks inlining of methods that make explicit tail calls\r\n - blocks inlining methods at explicit tail call sites\r\n - will use the slow helper for explicit tail calls if necessary\r\n\r\n We will use the following notation to describe a chain of calls and call sites:\r\n ```\r\n A -(cs1:?t)-> B -(cs2:et)-> C\r\n```\r\nHere `A`, `B`, and `C` are methods, and `cs1` and `cs2` are call sites in `A` and\r\n`B` respectively. We will also use `A`, `B`, and `C` in formulas where they\r\nindicate the stack space used by the respective methods, and `S` for the total\r\nstack needed by some logical chain of calls.\r\n\r\nA call site can be:\r\n - `?t` a tail call or a normal call\r\n - `xt` a normal call\r\n - `it` an implicit tail call\r\n - `et` an explicit tail call (can be fast or slow)\r\n\r\n ## Case 0: Inlining at explicit tail call sites\r\n\r\n`A -(cs1:et)-> B`\r\n\r\nBefore stack size is\r\n```\r\nS = max(A, B)\r\n```\r\nAfter stack size is\r\n```\r\nS' = A + B\r\n```\r\nworst case, when jit can't optimize some away any stack usage after inlining,\r\nthe stack delta is:\r\n```\r\nS' - S = A + B - max(A, B) = min(A, B)\r\n```\r\nFor performance, the before picture may have required slow tail call, so we can\r\nexpect good perf boost from inlining, perhaps better than a typical inline. If\r\nwe could anticipate this we could even give inlining an extra profitability boost.\r\n\r\n```[Case 0 Heuristic]: allow if A or B is small stack, boost if cs1 was slow tail call```\r\n\r\nHeuristics that depend on estimating the stack size of `A` or the nature of the\r\ntail call to `B` may not be workable in the current jit; see commentary below.\r\nSo we may decide to just rely on size of `B`:\r\n\r\n```[Simple Case 0 Heuristic]: allow if B is small stack```\r\n\r\n ## Inlining methods that make explicit tail calls\r\n\r\n ### Case 1: method invoked from non-tail call site\r\n\r\nIf `B` is inlined then none of its internal sites can be tail call sites. So\r\nthey will all become normal calls:\r\n```\r\nA -(cs1:xt)-> B -(cs2:xt)-> C   ;; cs2 goes from et to xt\r\n```\r\nBefore stack usage is:\r\n```\r\nS = A + max(B, C)\r\n```\r\nStack consumption depends on inlining. Generally the jit won't be able to\r\nestimate the stack size of `C` at the time it has to decide on whether or not\r\nto inline `B`.\r\n\r\n - if `B` is inlined and `C` is not, `S' = (A + B) + C`, possibly less\r\n - if both `B` and `C` are inlined, `S' = ((A + B) + C)`, possibly less\r\n\r\nAssuming worst case where inlining does not allow the jit to optimize away any\r\nstack usage, stack increase is\r\n\r\n```\r\nS' - S = A + B + C - (A + max(B, C)) = min(B, C)\r\n```\r\n\r\nAs noted before the jit will likely be unable to estimate `C`.\r\n\r\nFor perf, if the call to `C` was a slow tail call, perf will improve beyond just\r\nthe normal inline boost. But jit may not be able to anticipate this easily.\r\n\r\n```[Case 1 Heuristic]: allow if B is small stack```\r\n\r\n### Case2: method invoked from implicit tail call site\r\n\r\nIf `cs1` is an implicit tail call, the jit can inline `B` and retain `cs2` as\r\nan explicit tail call:\r\n```\r\n   A -(cs1:it)-> B -(cs2:et)-> C\r\n```\r\nBefore stack usage depends on whether `B` was tail called or called normally:\r\n```\r\n   S' = max(A, B, C) if B was tail called \r\n        max(A + B, C) if B was called\r\n```\r\nWe will use the former as it is smaller.\r\n\r\nAfter stack usage (assuming `C` not inlined)\r\n```\r\nS' = max(A + B, C)\r\n```\r\nSo worst-case stack impact is \r\n```\r\nS' - S = max(A + B, C) - max(A, B, C) = min(A, B)\r\n```\r\nSo for stack usage, inlining seems ok if either `A` or `B` is small stack.\r\n\r\nFor perf, jit should only do this if call to `C` does not change from a fast\r\ntail call to a slow call. Generally slow tail calls happen because caller stack\r\nis insufficiently large. A rough heuristic for this is the number of args for\r\n`A` and `B` respectively (some ABIs will need more complex logic).\r\n\r\n```[Case2 Heuristic]: allow if B is small stack, and #args(A) >= #args(B)```\r\n\r\n### Case3: method invoked from explicit call site\r\n\r\nThis dovetails with the Case0 and Case2 above and the reasoning is similar.\r\n\r\n```[Case3 Heuristic]: allow if B is small stack, and #args(A) >= #args(B)```\r\n\r\n## Use of the tail call helper\r\n\r\nIn cases where the jit determines a tail call from `A` will need a helper,\r\nit might be feasible to modify `A`so that its frame has sufficient arg space to\r\nmake a fast tail call by giving `A` a special prolog. This would be viable\r\nprovided the tail call sites(s) were executed frequently enough that we'd be\r\nwilling to pay a bit more on every call, and non-tail call paths through `A`\r\nwere rare and perhaps did not involve other calls.\r\n\r\n## Notes\r\n\r\n* The jit lacks a way to obtain a reliable stack size estimate for an inline\r\ncandidate, but presumably we could develop something. Using number\r\nand type of args and locals might be sufficient, though there are bad\r\ncases where jit temps predominate (we could presumably also screen based\r\non IL size to help rule these out).\r\n* The jit also is unable to make early determination for when an inline\r\ncandidate's tail calls will be slow tail calls. Here the information must be\r\nbased on an IL prescan. The jit does not resolve inline candidate tokens in so\r\nmay not know how many args are consumed at a call site. But again we might be\r\nable to guess well enough.\r\n* In cases above, if none of `A`, `B`, `C` are part of recursive cycles we\r\nare somewhat less worried about increase in stack size, as it can't be\r\nmagnified. The jit probably can't reason about this, but some up front tools\r\nperhaps could.\r\n* Stack size estimates for `A` must take already accepted inlines into account,\r\nso \"optimal\" results given a number of possible candidates depend on order in\r\nwhich inline candidates are considered.  Currently the jit is not smart about\r\nthis, which is why the simplified heuristic for Case 0 is suggested.\r\n* If the jit was able to do \"stack packing\" it would be able to be more aggressive\r\nsince tail call method locals are lifetime disjoint from root method locals. So\r\nstack size impact of inlining a tail call would be more like `max(A,B)` than `A + B`.\r\nThis would remove most restrictions and might end up being a better option long\r\nterm (it could also potentially help address other problems like excessive prolog\r\nzeroing).\r\n\r\n## Proposal\r\n\r\n- [ ] develop code to estimate stack size increase from an inline\r\n- [ ] develop code to estimate when an explicit tail call will end up using a helper\r\n- [ ] update inliner to unmark explicit tall call sites in inlinees called from\r\nnon tail-call sites\r\n- [ ] update inliner with new heuristic based on above estimates and unblock\r\ninlines of methods at tail call sites and methods with explicit tail calls\r\n- [ ] validate new behavior on suitable test suite\r\n- [ ] explore possibility of using modified prologs to avoid or limit the use of tail call helpers","Url":"https://github.com/dotnet/coreclr/issues/23370","RelatedDescription":"Open issue \"General inlining of tail calls\" (#23370)"},{"Id":"423454894","IsPullRequest":true,"CreatedAt":"2019-03-20T20:22:24","Actor":"BruceForstall","Number":"23369","RawContent":null,"Title":"Update emitter statistics","State":"open","Body":"1. Move BasicBlock static statistics output to block.cpp,\r\nand update it to match the current BasicBlock declaration.\r\n2. Add counts for each instrDesc type that is used.\r\n3. Dump instrDesc type sizes.\r\n4. Dump IG \"static\" buffer sizes.\r\n5. Dump how many of each instrDesc can fit in the \"static\" IG.\r\n6. Dump the maximum prolog instrDesc count and prolog IG size.\r\n7. Fix and enable the \"common small constants\" output.","Url":"https://github.com/dotnet/coreclr/pull/23369","RelatedDescription":"Open PR \"Update emitter statistics\" (#23369)"},{"Id":"423446186","IsPullRequest":true,"CreatedAt":"2019-03-20T20:01:05","Actor":"sandreenko","Number":"23368","RawContent":null,"Title":"JIT: optimize fgMorphTree for GenTreeArgList","State":"open","Body":"#### Description\r\n\r\nPort of #18582 and #23346  to release/2.2.\r\n\r\nWe can have deep `GT_LIST` trees that can cause Stack Overflow when they are morphed with a recursive algorithm. This PR adds a non-recursive morph for `GT_LIST`. The depth of other trees is restricted in importer. \r\n\r\nFixes #23309.\r\n\r\n#### Customer Impact\r\n\r\nThe issue was reported by the external customer who actively used generic classes injections in their new application. The issue was not easy to debug and identify because under VS 2017 it looked like `Access Violation` instead of `Stack OverFlow` and it won't be able to get the debugger to break in.\r\n#### Regression?\r\n\r\nNot a regression.\r\n\r\n#### Risk\r\n\r\nLow, the change is small and local; it was added to the master branch 8 months ago and no issues were found with it.\r\nThe change doesn't produce asm/throughput diffs.","Url":"https://github.com/dotnet/coreclr/pull/23368","RelatedDescription":"Open PR \"JIT: optimize fgMorphTree for GenTreeArgList\" (#23368)"},{"Id":"423433374","IsPullRequest":true,"CreatedAt":"2019-03-20T19:28:13","Actor":"echesakovMSFT","Number":"23367","RawContent":null,"Title":"Use join function in yaml","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23367","RelatedDescription":"Open PR \"Use join function in yaml\" (#23367)"},{"Id":"423431363","IsPullRequest":true,"CreatedAt":"2019-03-20T19:23:04","Actor":"andy-ms","Number":"23366","RawContent":null,"Title":"Don't compact LOH just because a heap_hard_limit exists","State":"open","Body":"Don't compact LOH just because a heap_hard_limit exists\r\n\r\nThis is based on a perf test with 100% survival in a container, before\r\nand after #22180. GC pause times were greater after that commit.\r\nDebugging showed that the reason was that after, we were always doing\r\ncompacting GC, and objects were staying in generation 1 and not making it\r\nto generation 2. The reason was that in the \"after\" build,\r\n`should_compact_loh()` was always returning true if heap_hard_limit was\r\nset; currently if we do an LOH compaction, we compact all other\r\ngenerations too. As the comment indicates, we should decide that\r\nautomatically, not just set it to true all the time.","Url":"https://github.com/dotnet/coreclr/pull/23366","RelatedDescription":"Open PR \"Don't compact LOH just because a heap_hard_limit exists\" (#23366)"},{"Id":"423424127","IsPullRequest":false,"CreatedAt":"2019-03-20T19:04:56","Actor":"BruceForstall","Number":"23365","RawContent":null,"Title":"Eliminate insGroup overflow allocation platform differences","State":"open","Body":"Currently, instruction groups are filled with variable-sized instructions (instrDescs) until full. If code in the same basic block is still being generated, the instructions are copied to a new location, and an \"overflow\" or \"emitAdd\" group is added to continue collecting generated instructions.\r\n\r\nInstruction groups appear in generated asm diffs as labels marked \"emitAdd\", although they don't contribute to generated code differences.\r\n\r\nInstruction groups are also used to split arm32/arm64 function fragments at large boundaries (or under stress), e.g., https://github.com/dotnet/coreclr/issues/22169.\r\n\r\nBecause the size of instrDescs differs between Debug and non-Debug builds, and between different platforms (including potentially cross-bitness and native-bitness compilations, where a native-sized host pointer is included), the number of instrDescs that fill the insGroup can differ between platforms/flavors. This can create unnecessary differences between flavors/platforms.\r\n\r\nInstead, change the allocation scheme to always allocate enough space for a given, fixed number of instructions, of any type. Then, when that number is reached, create an overflow IG. This way, the \"overflow\"/\"emitAdd\" IGs will be created in exactly the same place (between the same two generated instructions) independent of flavor/platform. This will reduce flavor/platform differences.","Url":"https://github.com/dotnet/coreclr/issues/23365","RelatedDescription":"Open issue \"Eliminate insGroup overflow allocation platform differences\" (#23365)"},{"Id":"423420099","IsPullRequest":false,"CreatedAt":"2019-03-20T18:55:24","Actor":"BruceForstall","Number":"23364","RawContent":null,"Title":"Allow multiple prolog instruction groups","State":"open","Body":"The JIT emitter design supports any number of instruction groups (insGroup, or IG) for all items (normal code, funclet prologs and epilogs, normal epilogs), except the main function prolog, which much exist completely within a single IG. This group is the first created IG and is pointed to be `emitPrologIG`. Functions that use this include `emitBegProlog()`, `emitMarkPrologEnd()`, `emitEndProlog()`, `emitIGisInProlog()`, and `emitGetPrologOffsetEstimate()`.\r\n\r\nThis limitation is what causes us to use an overly large (or possibly overly large) \"static\" instruction group buffer size (size designated by `SC_IG_BUFFER_SIZE`), because that size must be big enough for all possible prologs. This size is defined in a way that probably makes no real sense.\r\n\r\nEliminating this restriction would make the code more flexible, and free us from the current static size constraint.","Url":"https://github.com/dotnet/coreclr/issues/23364","RelatedDescription":"Open issue \"Allow multiple prolog instruction groups\" (#23364)"},{"Id":"423027304","IsPullRequest":false,"CreatedAt":"2019-03-20T18:20:56","Actor":"AriNuer","Number":"23355","RawContent":null,"Title":"[x64\\windows]Error: no assets for test sdk package where found","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_tieredcompilation/235/\r\n\r\n**Failed log:**\r\n```\r\nD:\\j\\workspace\\x64_checked_w---1f14678a\\_\\fx\\external\\test-runtime\\XUnit.Runtime.depproj(211,5): error : Error: no assets for test sdk package where found under: C:\\Users\\dotnet-bot\\.nuget\\packages\\microsoft.net.test.sdk\\16.0.1\\build\\netcoreapp1.0\\*.*\r\n\r\nBuild FAILED.\r\n\r\nD:\\j\\workspace\\x64_checked_w---1f14678a\\_\\fx\\external\\test-runtime\\XUnit.Runtime.depproj(211,5): error : Error: no assets for test sdk package where found under: C:\\Users\\dotnet-bot\\.nuget\\packages\\microsoft.net.test.sdk\\16.0.1\\build\\netcoreapp1.0\\*.*\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:01:38.51\r\nBuild failed.\r\n[D:\\j\\workspace\\x64_checked_w---1f14678a\\tests\\scripts\\run-corefx-tests.py]: Error: exit code 1\r\n\r\nD:\\j\\workspace\\x64_checked_w---1f14678a>exit 1 \r\n```","Url":"https://github.com/dotnet/coreclr/issues/23355","RelatedDescription":"Closed issue \"[x64\\windows]Error: no assets for test sdk package where found\" (#23355)"},{"Id":"423398088","IsPullRequest":true,"CreatedAt":"2019-03-20T18:04:36","Actor":"davidwrighton","Number":"23363","RawContent":null,"Title":"Replace Win32 resource reading logic with cross platform implementation","State":"open","Body":"- Replace, instead of implementing PAL api as implementing a faithful copy of FindResource is difficult to implement due to the extensive list of possible fallbacks in the Windows api, and the lack of clarity in the api as to exactly which search technique is actually needed for lookup. This implementation can easily be stable across various operating systems, and meets the current needs of resource lookup.","Url":"https://github.com/dotnet/coreclr/pull/23363","RelatedDescription":"Open PR \"Replace Win32 resource reading logic with cross platform implementation\" (#23363)"},{"Id":"422997979","IsPullRequest":true,"CreatedAt":"2019-03-20T17:12:07","Actor":"sandreenko","Number":"23353","RawContent":null,"Title":"Restrict gc stress platforms for ADO runs.","State":"closed","Body":"Run GCStress testing only on supported platforms. Exclude OSX (does not have CoreDisTools) and arm platforms where we do not run tests.","Url":"https://github.com/dotnet/coreclr/pull/23353","RelatedDescription":"Closed or merged PR \"Restrict gc stress platforms for ADO runs.\" (#23353)"},{"Id":"423301617","IsPullRequest":false,"CreatedAt":"2019-03-20T15:01:48","Actor":"nitroxis","Number":"23362","RawContent":null,"Title":"System.Reflection.Emit MethodBuilder fails when using delegates with 'in' parameters","State":"open","Body":"It appears that there is a bug regarding MethodBuilder and generic delegates containing 'in' (i.e. readonly ref) parameters. When calling an emitted method that invokes such a delegate, the runtime throws a MissingMethodException for the delegate's \"Invoke\" method. It seems that this only happens when the delegate is generic, however. I'm running .NET Core 3 preview-3 and System.Reflection.Emit 4.3.0. I'm not sure whether this is an issue in the runtime or the library.\r\n\r\nHere is a short repro that demonstrates the issue:\r\n```csharp\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\n\r\npublic static class Program\r\n{\r\n\tpublic delegate void TestDelegate<T>(in T x);\r\n\r\n\tpublic static void Main()\r\n\t{\r\n\t\tType delegateType = typeof(TestDelegate<int>);\r\n\r\n\t\tAssemblyBuilder assembly = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(\"test\"), AssemblyBuilderAccess.Run);\r\n\t\tModuleBuilder module = assembly.DefineDynamicModule(\"test\");\r\n\t\tTypeBuilder type = module.DefineType(\"t\");\r\n\t\tMethodBuilder method = type.DefineMethod(\"m\", MethodAttributes.Public | MethodAttributes.Static, typeof(void), new Type[] {delegateType});\r\n\r\n\t\t// void m(TestDelegate<int> arg) {\r\n\t\t//   int i = 1337;\r\n\t\t//   arg.Invoke(in i);\r\n\t\t// }\r\n\t\tILGenerator il = method.GetILGenerator();\r\n\t\tLocalBuilder local = il.DeclareLocal(typeof(int));\r\n\t\til.Emit(OpCodes.Ldc_I4, 1337);\r\n\t\til.Emit(OpCodes.Stloc, local);\r\n\t\til.Emit(OpCodes.Ldarg_0);\r\n\t\til.Emit(OpCodes.Ldloca, local);\r\n\t\tMethodInfo targetMethod = delegateType.GetMethod(\"Invoke\", BindingFlags.Public | BindingFlags.Instance);\r\n\t\til.Emit(OpCodes.Callvirt, targetMethod);\r\n\t\til.Emit(OpCodes.Ret);\r\n\r\n\t\tMethodInfo compiledMethod = type.CreateTypeInfo().GetMethod(\"m\", BindingFlags.Public | BindingFlags.Static);\r\n\t\tcompiledMethod.Invoke(null, new object[]\r\n\t\t{\r\n\t\t\tnew TestDelegate<int>((in int x) =>\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(x);\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\nRunning this code throws the following exception in compiledMethod.Invoke:\r\n```\r\nSystem.Reflection.TargetInvocationException\r\n  HResult=0x80131604\r\n  Message=Exception has been thrown by the target of an invocation.\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in F:\\vsagent\\2\\s\\src\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs:line 466\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) in F:\\vsagent\\2\\s\\src\\System.Private.CoreLib\\shared\\System\\Reflection\\MethodBase.cs:line 54\r\n   at Program.Main() in C:\\Users\\nitroxis\\Documents\\Visual Studio 2019\\Projects\\ConsoleApp2\\ConsoleApp2\\Program.cs:line 33\r\n\r\nInner Exception 1:\r\nMissingMethodException: Method not found: 'Void TestDelegate`1.Invoke(!0 ByRef)'.\r\n```\r\n\r\nExchanging the 'in' with 'ref' and leaving everything else untouched works without problems. Using a DynamicMethod instead of a MethodBuilder works fine as well.\r\n","Url":"https://github.com/dotnet/coreclr/issues/23362","RelatedDescription":"Open issue \"System.Reflection.Emit MethodBuilder fails when using delegates with 'in' parameters\" (#23362)"},{"Id":"423236040","IsPullRequest":true,"CreatedAt":"2019-03-20T12:55:39","Actor":"marek-safar","Number":"23361","RawContent":null,"Title":"Move Exception to shared partition","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23361","RelatedDescription":"Open PR \"Move Exception to shared partition\" (#23361)"},{"Id":"423126381","IsPullRequest":false,"CreatedAt":"2019-03-20T08:33:31","Actor":"simplejackcoder","Number":"23359","RawContent":null,"Title":"Accessing first character of a string without using fixed","State":"open","Body":"Is it possible to retrieve the _firstchar property of a string reference without having to put it inside a `fixed` block in C#?\r\n\r\nI tried to use the `Unsafe` class but I'm not available to get a working solution.\r\n\r\nIs this only possible in IL?\r\n\r\nIs it safe to do? My hunch is yes because it is used in coreclr quite often. I'm fine using `OffsetToStringData` but without having to put it as fixed.\r\n\r\nIn other words can I make the first char a byref so it is tracked safely by GC.","Url":"https://github.com/dotnet/coreclr/issues/23359","RelatedDescription":"Open issue \"Accessing first character of a string without using fixed\" (#23359)"},{"Id":"423089636","IsPullRequest":false,"CreatedAt":"2019-03-20T06:33:50","Actor":"dotnet-mc-bot","Number":"23358","RawContent":null,"Title":"Test failure: Interop_IJW._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_/_CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `Interop_IJW._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_/_CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_cmd` has failed.\n\nFailure Message:\n```\n\n\nReturn code:      1\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\817b0b0d-3498-46e8-998b-98c2d3d32e6b\\\\Work\\\\cc65ef92-05c7-49f8-9102-78a2fe8f95c0\\\\Exec\\\\Reports\\\\Interop.IJW\\\\CopyConstructorMarshaler\\\\CopyConstructorMarshaler\\\\CopyConstructorMarshaler.output.txt\nRaw output:\nBEGIN EXECUTION\\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\817b0b0d-3498-46e8-998b-98c2d3d32e6b\\\\Payload\\\\corerun.exe\\\" CopyConstructorMarshaler.exe \\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'IjwCopyConstructorMarshaler, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\\r\nFile name: 'IjwCopyConstructorMarshaler, Culture=neutral, PublicKeyToken=null'\\r\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly assemblyContext, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, IntPtr ptrLoadContextBinder)\\r\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, StackCrawlMark& stackMark, IntPtr ptrLoadContextBinder)\\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, StackCrawlMark& stackMark)\\r\n   at System.Reflection.Assembly.Load(String assemblyString)\\r\n   at CopyConstructorMarshaler.CopyConstructorMarshaler.Main(String[] args) in F:\\\\vsagent\\\\44\\\\s\\\\tests\\\\src\\\\Interop\\\\IJW\\\\CopyConstructorMarshaler\\\\CopyConstructorMarshaler.cs:line 27\\r\n\\r\n\\r\nExpected: 100\\r\nActual: 101\\r\nEND EXECUTION - FAILED\\r\nFAILED\\r\nTest Harness Exitcode is : 1\\r\n\nTo run the test:\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\817b0b0d-3498-46e8-998b-98c2d3d32e6b\\\\Payload\n> C:\\\\dotnetbuild\\\\work\\\\817b0b0d-3498-46e8-998b-98c2d3d32e6b\\\\Work\\\\cc65ef92-05c7-49f8-9102-78a2fe8f95c0\\\\Exec\\\\CopyConstructorMarshaler\\\\CopyConstructorMarshaler\\\\CopyConstructorMarshaler.cmd\n\\r\nExpected: True\\r\nActual:   False\n```\n\nStack Trace:\n```\n   at Interop_IJW._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_cmd() in F:\\vsagent\\44\\s\\bin\\tests\\Windows_NT.arm.Release\\TestWrappers\\Interop.IJW\\Interop.IJW.XUnitWrapper.cs:line 109\n```\n\nBuild : 3.0 - 20190319.73 (Core Tests)\nFailing configurations:\n- Windows.10.Arm64-arm\n  - \n  - \nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190319.73/workItem/Interop.IJW/analysis/xunit/Interop_IJW._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_~2F_CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_cmd","Url":"https://github.com/dotnet/coreclr/issues/23358","RelatedDescription":"Open issue \"Test failure: Interop_IJW._CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_/_CopyConstructorMarshaler_CopyConstructorMarshaler_CopyConstructorMarshaler_cmd\" (#23358)"},{"Id":"423049128","IsPullRequest":true,"CreatedAt":"2019-03-20T03:27:01","Actor":"jorive","Number":"23357","RawContent":null,"Title":"[EventPipe] Fix linker warning on Debug/Checked build and unlink Unix Domain Socket #23334","State":"open","Body":"- Attempt to close-behind unix domain socket and repurpose LF_REMOTING facility.\r\n  - On shutdown, attempt to unlink the bound socket so it can be removed from the file system when the last reference to it it closed.\r\n  - Rename unused LF_REMOTING to LF_DIAGNOSTICS_PORT. This new flag will be used by the diagnostic server stress log calls.\r\n- Fix `libcmtd.lib(initializers.obj) : warning LNK4098: defaultlib 'libcmt.lib' conflicts with use of other libs; use /NODEFAULTLIB:library [S:\\github.com\\jorive\\coreclr\\bin\\obj\\Windows_NT.x64.Checked\\src\\dlls\\mscoree\\coreclr\\coreclr.vcxproj]`\r\n- Move some preprocessors and includes around.\r\n\r\nFixes: https://github.com/dotnet/coreclr/issues/23324","Url":"https://github.com/dotnet/coreclr/pull/23357","RelatedDescription":"Open PR \"[EventPipe] Fix linker warning on Debug/Checked build and unlink Unix Domain Socket #23334\" (#23357)"},{"Id":"423038464","IsPullRequest":true,"CreatedAt":"2019-03-20T02:37:01","Actor":"BrianBohe","Number":"23356","RawContent":null,"Title":"Adding function Compiler::lvaGetVarNum(const LclVarDsc*) ","State":"open","Body":"As a way of getting the index of a variable in compiler::lvaTable. There is a property of LclVarDsc for this purpose called lvSlotNum, which is not set for every variable.","Url":"https://github.com/dotnet/coreclr/pull/23356","RelatedDescription":"Open PR \"Adding function Compiler::lvaGetVarNum(const LclVarDsc*) \" (#23356)"},{"Id":"423014553","IsPullRequest":true,"CreatedAt":"2019-03-20T00:36:30","Actor":"sandreenko","Number":"23354","RawContent":null,"Title":"Add call to setup-stress-dependencies.sh to build-test.sh.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23354","RelatedDescription":"Open PR \"Add call to setup-stress-dependencies.sh to build-test.sh.\" (#23354)"},{"Id":"422989398","IsPullRequest":true,"CreatedAt":"2019-03-19T22:52:20","Actor":"marek-safar","Number":"23352","RawContent":null,"Title":"Move Buffer constants to platform specific files","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23352","RelatedDescription":"Open PR \"Move Buffer constants to platform specific files\" (#23352)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"423531889","IsPullRequest":true,"CreatedAt":"2019-03-21T00:41:45","Actor":"mlorbetske","Number":"11004","RawContent":null,"Title":"[WIP] Convert from using Newtonsoft.Json for reading launchSettings.json to System.Text.Json","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11004","RelatedDescription":"Open PR \"[WIP] Convert from using Newtonsoft.Json for reading launchSettings.json to System.Text.Json\" (#11004)"},{"Id":"423523637","IsPullRequest":true,"CreatedAt":"2019-03-21T00:01:14","Actor":"dotnet-bot","Number":"11003","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11003","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11003)"},{"Id":"423519365","IsPullRequest":true,"CreatedAt":"2019-03-20T23:41:21","Actor":"wli3","Number":"11002","RawContent":null,"Title":"Move to System.Text.Json for local global tools","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11002","RelatedDescription":"Open PR \"Move to System.Text.Json for local global tools\" (#11002)"},{"Id":"423519068","IsPullRequest":true,"CreatedAt":"2019-03-20T23:40:21","Actor":"wli3","Number":"11001","RawContent":null,"Title":"Bcl.json better commit","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11001","RelatedDescription":"Closed or merged PR \"Bcl.json better commit\" (#11001)"},{"Id":"423486374","IsPullRequest":true,"CreatedAt":"2019-03-20T22:53:43","Actor":"nguerrera","Number":"10999","RawContent":null,"Title":"Clean up package references for source build","State":"closed","Body":"* Remove package references that aren't needed\r\n* Move hard-coded versions to eng\\Versions.props","Url":"https://github.com/dotnet/cli/pull/10999","RelatedDescription":"Closed or merged PR \"Clean up package references for source build\" (#10999)"},{"Id":"423507694","IsPullRequest":true,"CreatedAt":"2019-03-20T22:53:37","Actor":"LordMike","Number":"11000","RawContent":null,"Title":"Add solution folder argument to dotnet-sln add","State":"open","Body":"I've begun work on the first half of what I think \"dotnet-sln add\" should be allowed to do:\r\n\r\n- Target arbitrary solution folders within an SLN\r\n- Add arbitrary files as solution-level files, and not just projects\r\n\r\nIf possible, I'd like some feedback before proceeding to add the ability for \"dotnet-sln add\" to add arbitrary files. So, I suppose this is kind of a WIP which isn't exactly preferable... Sorry about that.\r\n\r\nIs there a test project for \"dotnet sln\" ?\r\n\r\nRelated issues:\r\n- Issue https://github.com/dotnet/cli/issues/8678, which discuses a \"add\" feature that allows arbitrary files to be added; where I outline my intended commandline layout\r\n- PR https://github.com/dotnet/cli/pull/10873, which touches on a similar subject, but also adds a unit test project. Naming between that PR, and this one, should be coordinated.","Url":"https://github.com/dotnet/cli/pull/11000","RelatedDescription":"Open PR \"Add solution folder argument to dotnet-sln add\" (#11000)"},{"Id":"423464116","IsPullRequest":true,"CreatedAt":"2019-03-20T20:45:08","Actor":"livarcocc","Number":"10998","RawContent":null,"Title":"Update branding to 2.2.300","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10998","RelatedDescription":"Open PR \"Update branding to 2.2.300\" (#10998)"},{"Id":"423463722","IsPullRequest":true,"CreatedAt":"2019-03-20T20:44:07","Actor":"livarcocc","Number":"10997","RawContent":null,"Title":"Update branding to 2.1.7xx","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10997","RelatedDescription":"Open PR \"Update branding to 2.1.7xx\" (#10997)"},{"Id":"422986481","IsPullRequest":true,"CreatedAt":"2019-03-20T20:37:07","Actor":"livarcocc","Number":"10993","RawContent":null,"Title":"Update branding to 2.2.203","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10993","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.203\" (#10993)"},{"Id":"422986019","IsPullRequest":true,"CreatedAt":"2019-03-20T20:36:56","Actor":"livarcocc","Number":"10992","RawContent":null,"Title":"Update branding to 2.1.603","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10992","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.603\" (#10992)"},{"Id":"423314749","IsPullRequest":false,"CreatedAt":"2019-03-20T17:29:00","Actor":"polterguy","Number":"10996","RawContent":null,"Title":"Support for generate command","State":"closed","Body":"Somebody sent me a pull request to my [own repo](https://github.com/polterguy/magic) supplying a CLI template file, and I started playing around with the CLI arguably for the first time really studying it myself, and I quickly realized the beauty of the dotnet CLI project, allowing me to among other things _\"generate\"_ entire solution/project structures, etc.\r\n\r\nHowever, as I look through the project, I realize at least for my own purposes, how extremely useful it would be to have something resembling _\"ng generate\"_ in the dotnet CLI, which unfortunately doesn't seem to exist at the moment.\r\n\r\nFor instance for my personal usage in [Magic](https://github.com/polterguy/magic), being able to _\"generate\"_ new controllers/services/etc by using the dotnet CLI, would significantly reduce the pain associated with adding to the existing code base of a Magic project.\r\n\r\nTo create a new domain type in Magic for instance, requires to create a new service, a new service interface, a new controller endpoint, and the database model + the view model. Plus (possibly) also new projects for each of the previously mentioned classes/interfaces. If the CLI could simply _\"automagically\"_ create this for me, and my users, and either associate with existing project, and/or create new projects and associate the solution with - Obviously a lot of time would be saved in this process ...\r\n\r\nBasically, what I am looking for, is something similar to `ng generate`, which allows the developer to generate components, etc - Hopefully implemented in such a way that I could extend it myself somehow, to work with my own Magic project ...\r\n\r\n* Is this something that has been considered implement in the dotnet CLI?\r\n* If not, why?\r\n* Is it possible to create as my own plugin to the CLI?\r\n* Would you possibly be willing to accept a pull request, if I actually went forth and implemented such commands myself, assuming it's generic in nature, good solid code, obeys by your coding standard, and not in any ways _\"hard coded\"_ towards my own baby (Magic) ...?\r\n\r\nThx,\r\n\r\n.t","Url":"https://github.com/dotnet/cli/issues/10996","RelatedDescription":"Closed issue \"Support for generate command\" (#10996)"},{"Id":"423127451","IsPullRequest":false,"CreatedAt":"2019-03-20T08:36:33","Actor":"leighghunt","Number":"10995","RawContent":null,"Title":"Build fails with 'MSB3552: Resource file \"**/*.resx\" cannot be found.' on Mac when folders with windows like paths exist in project folder","State":"open","Body":"## Steps to reproduce\r\n- Create a new console application\r\n- Create a folder named `D:\\Processed` within the project directory\r\n- Build the project\r\n\r\n## Expected  behavior\r\n- Successful build\r\n\r\n## Actual behavior\r\n- Build fails.\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 36.12 ms for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj.\r\n/usr/local/share/dotnet/sdk/2.2.102/Microsoft.Common.CurrentVersion.targets(3049,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. [/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj]\r\n\r\nBuild FAILED.\r\n```\r\n\r\nComplete work through of issue from scratch:\r\n```\r\n✔ ~/dev/test \r\n21:30 $ mkdir dotnet-cli-build-error\r\n✔ ~/dev/test \r\n21:30 $ cd dotnet-cli-build-error/\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:30 $ dotnet new console\r\nThe template \"Console Application\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj...\r\n  Restoring packages for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj...\r\n  Generating MSBuild file /Users/leigh/dev/test/dotnet-cli-build-error/obj/dotnet-cli-build-error.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/leigh/dev/test/dotnet-cli-build-error/obj/dotnet-cli-build-error.csproj.nuget.g.targets.\r\n  Restore completed in 197.37 ms for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj.\r\n\r\nRestore succeeded.\r\n\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:30 $ dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 36.83 ms for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj.\r\n  dotnet-cli-build-error -> /Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.26\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:31 $ mkdir D\\:\\\\Processed\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:31 $ ls -l\r\ntotal 16\r\ndrwxr-xr-x  2 leigh  staff   64 20 Mar 21:31 D:\\Processed\r\n-rw-r--r--  1 leigh  staff  204 20 Mar 21:30 Program.cs\r\ndrwxr-xr-x  3 leigh  staff   96 20 Mar 21:31 bin\r\n-rw-r--r--  1 leigh  staff  237 20 Mar 21:30 dotnet-cli-build-error.csproj\r\ndrwxr-xr-x  7 leigh  staff  224 20 Mar 21:31 obj\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:31 $ dotnet clean; dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 20/03/19 9:31:43 PM.\r\n     1>Project \"/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj\" on node 1 (Clean target(s)).\r\n     1>CoreClean:\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.deps.json\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.runtimeconfig.json\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.runtimeconfig.dev.json\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.dll\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.pdb\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.csprojAssemblyReference.cache\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.csproj.CoreCompileInputs.cache\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.AssemblyInfoInputs.cache\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.AssemblyInfo.cs\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.dll\".\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.pdb\".\r\n     1>Done Building Project \"/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj\" (Clean target(s)).\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.49\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 36.12 ms for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj.\r\n/usr/local/share/dotnet/sdk/2.2.102/Microsoft.Common.CurrentVersion.targets(3049,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. [/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/local/share/dotnet/sdk/2.2.102/Microsoft.Common.CurrentVersion.targets(3049,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. [/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.91\r\n✘-1 ~/dev/test/dotnet-cli-build-error \r\n```\r\n\r\nNote that removal of the folder resolves the issue:\r\n```\r\n21:31 $ rmdir D\\:\\\\Processed/\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:31 $ dotnet clean; dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 20/03/19 9:31:56 PM.\r\n     1>Project \"/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj\" on node 1 (Clean target(s)).\r\n     1>CoreClean:\r\n         Deleting file \"/Users/leigh/dev/test/dotnet-cli-build-error/obj/Debug/netcoreapp2.2/dotnet-cli-build-error.csprojAssemblyReference.cache\".\r\n     1>Done Building Project \"/Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj\" (Clean target(s)).\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.45\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 36.79 ms for /Users/leigh/dev/test/dotnet-cli-build-error/dotnet-cli-build-error.csproj.\r\n  dotnet-cli-build-error -> /Users/leigh/dev/test/dotnet-cli-build-error/bin/Debug/netcoreapp2.2/dotnet-cli-build-error.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.07\r\n✔ ~/dev/test/dotnet-cli-build-error \r\n21:31 $ \r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.0.1 [/usr/local/share/dotnet/sdk]\r\n  1.0.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.4 [/usr/local/share/dotnet/sdk]\r\n  2.2.100-preview3-009430 [/usr/local/share/dotnet/sdk]\r\n  2.2.102 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10995","RelatedDescription":"Open issue \"Build fails with 'MSB3552: Resource file \"**/*.resx\" cannot be found.' on Mac when folders with windows like paths exist in project folder\" (#10995)"},{"Id":"422994622","IsPullRequest":true,"CreatedAt":"2019-03-20T00:48:17","Actor":"wli3","Number":"10994","RawContent":null,"Title":"dotnet list package interactive","State":"closed","Body":"add --interactive flag to dotnet list\r\n\r\ncontinue of https://github.com/dotnet/cli/pull/10721","Url":"https://github.com/dotnet/cli/pull/10994","RelatedDescription":"Closed or merged PR \"dotnet list package interactive\" (#10994)"},{"Id":"422695219","IsPullRequest":true,"CreatedAt":"2019-03-19T12:04:54","Actor":"dotnet-maestro[bot]","Number":"10991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19167.10\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190317.10\r\n- **Date Produced**: 3/18/2019 7:14 AM\r\n- **Commit**: de7be3ba62b92e5c48c36876c851a14f154444af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19167.10\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10991","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#10991)"},{"Id":"421309067","IsPullRequest":true,"CreatedAt":"2019-03-18T23:35:39","Actor":"wli3","Number":"10980","RawContent":null,"Title":"Invoke localtool with dotnet","State":"closed","Body":"enable invoke tool with `dotnet TOOLNAME`\r\n\r\nlargely bring back the code from https://github.com/dotnet/cli/pull/10341 but still keep `dotnet tool run TOOLNAME` as non ambiguous version","Url":"https://github.com/dotnet/cli/pull/10980","RelatedDescription":"Closed or merged PR \"Invoke localtool with dotnet\" (#10980)"},{"Id":"422422588","IsPullRequest":false,"CreatedAt":"2019-03-18T21:44:36","Actor":"billwert","Number":"10990","RawContent":null,"Title":"dotnet build does not consider <Optimize> tag for output directory","State":"closed","Body":"When running ```dotnet build``` passing ```-c Release```, the output directory is ```bin\\Release```. If you omit passing ```-c Release``` and instead rely on the ```<Optimize>``` tag, the output directory is ```bin\\Debug```.\r\n\r\n## Steps to reproduce\r\n```dotnet new console```\r\nedit csproj, add ```<Optimize>true</Optimize>``` somewhere\r\n```dotnet build```\r\n\r\n## Expected  behavior\r\nOutput path is Release\r\n\r\n## Actual behavior\r\nOutput path is Debug\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18358\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10990","RelatedDescription":"Closed issue \"dotnet build does not consider <Optimize> tag for output directory\" (#10990)"},{"Id":"421916098","IsPullRequest":false,"CreatedAt":"2019-03-18T17:47:24","Actor":"patrikbeno","Number":"10988","RawContent":null,"Title":"RestoreLockedMode: Unexpected NU1004 when ProjectReference refers to a project with custom AssemblyName","State":"closed","Body":"## Steps to reproduce\r\n\r\n```xml\r\n<!-- ClassLib1/ClassLib1.csproj -->\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <!-- following line breaks RestoreLockedMode=true -->\r\n    <AssemblyName>CustomName</AssemblyName>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\n<!-- ClassLib2/ClassLib2.csproj -->\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ClassLib1\\ClassLib1.csproj\" />  \r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n```\r\n$ cd ClassLib2\r\n$ dotnet restore -f --use-lock-file\r\n$ dotnet restore -f --locked-mode\r\n```\r\n\r\n## Expected  behavior\r\n\r\n`dotnet restore -f --locked-mode` completes without error.\r\n\r\n## Actual behavior\r\n\r\n```\r\nClassLib2/ClassLib2.csproj : error NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file.\r\nRestore failed in 56.35 ms for /solution/ClassLib2/ClassLib2.csproj.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ntested in latest `dotnet/core/sdk:2.2-alpine` docker image\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.105\r\n Commit:    7cecb35b92\r\n\r\nRuntime Environment:\r\n OS Name:     alpine\r\n OS Version:  3.8\r\n OS Platform: Linux\r\n RID:         linux-musl-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.105/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10988","RelatedDescription":"Closed issue \"RestoreLockedMode: Unexpected NU1004 when ProjectReference refers to a project with custom AssemblyName\" (#10988)"},{"Id":"422330845","IsPullRequest":false,"CreatedAt":"2019-03-18T17:00:13","Actor":"jaredpar","Number":"10989","RawContent":null,"Title":"Error NETSDK1005 temporarily fires when switching TF","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Create a netcoreapp3.0 console application\r\n1. Ensure the error list is visible \r\n1. Open the project file for editing \r\n1. Change the `TargetFramework` value to net472\r\n1. Save All\r\n\r\n## Expected  behavior\r\nNo errors\r\n\r\n## Actual behavior\r\nBriefly a NETSDK1005 error will appear in the error list. It seems to disappear as soon as auto-restore kicks in. \r\n\r\nThis error is causing the Roslyn team issues as it breaks our integration tests. They are keyed to fail on any error and even this transient one is considered. There are work arounds but they end up causing us to more globally suppress NETSDK1005 which we'd like to avoid. \r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10989","RelatedDescription":"Open issue \"Error NETSDK1005 temporarily fires when switching TF\" (#10989)"},{"Id":"420896951","IsPullRequest":false,"CreatedAt":"2019-03-18T09:07:50","Actor":"warrenbuckley","Number":"10977","RawContent":null,"Title":"Self Contained Publish & MacOS Store Submission (System.Security.Cryptography.Native.OpenSsl.dylib)","State":"closed","Body":"## Background\r\nI am currently building a cross platform Electron app that uses a .NET Core and Kestrel for a localhost WebAPI for .NET Core to do the lifting & processing that will communicate over HTTP in the HTML/JS of the Electron application.\r\n\r\nBuilding the application and running this works perfectly fine, however when the application is submitted to Apple's AppStore for Review I get the following error from them.\r\n\r\n## Response from Apple's App Review Team 🍎 \r\n>Your app uses or references the following non-public APIs:\r\n>Symbols: _EVP_sha384, _EVP_sha256, _EVP_sha512\r\n>From framework: @rpath/libcrypto.1.0.0.dylib\r\n>In binary: >Contents/Resources/LogViewer.Server/bin/dist/osx/System.Security.Cryptography.Native.OpenSsl.dylib\r\n\r\nAs `System.Security.Cryptography` is part of the .NET Core framework that I need to ship & bundle as part of the application (as I have no guarantee of .NET Core being installed on users machines)\r\n\r\nAre there any suggestions on what I can do?\r\nThanks :)\r\n\r\n\r\n## Steps to reproduce ⚒ \r\nIf you wish you can clone my repository for the project here\r\nhttps://github.com/warrenbuckley/Compact-Log-Format-Viewer/\r\n\r\nIn the `LogViewer.Server` folder run the dotnet CLI publish command as follows:\r\n`dotnet publish --runtime osx-x64 --output bin/dist/osx`\r\n\r\n### CSProj & Nuget References\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <PropertyGroup>\r\n    <!--<RuntimeIdentifiers>win10-x64;osx.10.11-x64</RuntimeIdentifiers>-->\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Serilog.Filters.Expressions\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog.Formatting.Compact.Reader\" Version=\"1.0.3\" />\r\n    <PackageReference Include=\"Serilog.Sinks.File\" Version=\"4.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [/usr/local/share/dotnet/sdk]\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.504 [/usr/local/share/dotnet/sdk]\r\n  2.2.104 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10977","RelatedDescription":"Closed issue \"Self Contained Publish & MacOS Store Submission (System.Security.Cryptography.Native.OpenSsl.dylib)\" (#10977)"},{"Id":"421800450","IsPullRequest":true,"CreatedAt":"2019-03-16T12:34:07","Actor":"dotnet-maestro[bot]","Number":"10987","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19165.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10987","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10987)"},{"Id":"421755124","IsPullRequest":false,"CreatedAt":"2019-03-16T01:37:46","Actor":"swaroop-sridhar","Number":"10986","RawContent":null,"Title":"Supporting third party libraries/frameworks ","State":"open","Body":"Recently, we had enquiries for a customer who wanted to deploy their own custom framework on client machines. This discussion is about possible solutions for this scenario in .Net Core 3.\r\n \r\n## Customer requirements\r\n \r\nThe developer wants to:\r\n* Implement a suite of several libraries, that are used by several client apps.\r\n* Deploy one copy of library-suite on client machines in a central location\r\n* Push updates to the library-suite without having to recompile the client apps\r\n* Is happy to change their library-suite/apps to target .net core 3\r\n \r\nIn particular, the customer specifically asked allowing third party frameworks (similar to standard frameworks like `Microsoft.AspNetCore.App`).\r\n\r\n## Solution Options\r\n \r\n### Additional-deps\r\nThis is a simple solution to separate some of the app’s dependencies to a separate (possible shared) location. This option involves:\r\n* App development: Remove references to the library-suite from the apps, instead use a different light-up option such as startup-hook.\r\n* On client machines: Deploy the library-suite to a shared location, and set up `DOTNET_ADDITIONAL_DEPS` when apps are run.\r\n\r\nAdditional-deps have several known limitations, for example, as noted here.\r\n \r\n### Startup Hook\r\nThis option involves dynamically loading the library-suite into apps during application startup. \r\n* This requires setting `DOTNET_STARTUP_HOOKS` to appropriate loader code on client machines at app-startup. The loader code can then use custom logic to load the library-suite from a possible shared/versioned location.\r\n* This may require some coordination with other parties (ex: profiler) that may use the startup-hook (multiple assemblies can be hooked up at startup).\r\n\r\n### Custom AppHost\r\nThe library developer provides a custom host to be used by the app-developers. The custom host will then setup the appropriate library dependencies during app startup, before starting the runtime.\r\n \r\n### Components\r\nThis option is to load the library-suite as a plugin, where:\r\n* The library-suite exposes a minimal version (similar to reference assemblies) which only exposes the public API, and implements stub code to load the implementation assemblies dynamically.\r\n* Apps build with a package-reference to the suite.\r\nAt runtime, the above stub code loads the actual library code (say, using the AssemblyDependencyResolver), from a possibly shared location.\r\n \r\n### Third-party frameworks\r\nIn this option, the library-suite is published as a framework. This naturally achieves the customer requirements because:\r\n* The library-suite is published as a nuget package that contains:\r\n    * Its reference assemblies\r\n    * A target file that can be imported by the apps to include this suite as an additional target framework\r\n* Apps import/reference the above nuget package and ship independent of the library-suite’s implementation\r\n* The implementation assemblies of the library-suite are installed to `dotnet/shared/<library-suite>/<version>` on client machines. (one-copy shared, versioned location).\r\n \r\nThe above approach is straight-forward for developers to use. However, support for third-party frameworks is not yet officially available. \r\n\r\nI tried out a prototype, and was able to load a custom framework from a shared location (with some work-arounds for issues discussed below).\r\n \r\n### Pending work\r\nHere’s the known required work, there will likely be more as we productize this feature:\r\n* Tooling for adding frameworks: It should easy to add a framework to the list of dependent frameworks published in the `runtimeconfig.json` file (ex: add a framework to `RuntimeFramework` item). However, currently doesn’t work in the CLI because the property is overwritten by one of the build tasks. This should be a straightforward issue to fix.\r\n* Mismatched shared framework versions can cause problems: dotnet/core-setup#4947. This is again a bug that should be fixed.\r\n \r\n### Reservations\r\nWhile we agree that supporting third-party frameworks is useful for developers, there are some reservations about making this feature publicly available in .Net Core 3. The concerns are:\r\n* Bugs: We have a controlled environment with known frameworks. Custom frameworks may trigger unforeseen bugs. It is better to let the multiple-frameworks feature bake with existing framework for a release cycle.\r\n* Framework references: There are unresolved issues with supporting custom framework-references (which are not exposed by using third-party frameworks with package-references).\r\n* Install location:  Unanticipated issues with custom code within `dotnet` install location (`dotnet/shared/…`).\r\n* Design limitation: We have previously excluded custom frameworks from .net core 3. We may redesign the issue in .net core 3.1. But exposing the feature now may create a compatibility requirement, and restrict design options. Note that users may themselves figure out and use custom frameworks – but these are not supported by the `dotnet` org.\r\n \r\n## Discussion\r\n \r\nPlease add your thoughts / considerations about:\r\n* Exposing the possibility of third-party frameworks to customers, say as a sample.\r\n* Any other options to solve the customer scenario.\r\n* Similar usage scenarios\r\n","Url":"https://github.com/dotnet/cli/issues/10986","RelatedDescription":"Open issue \"Supporting third party libraries/frameworks \" (#10986)"},{"Id":"421727930","IsPullRequest":false,"CreatedAt":"2019-03-15T22:34:42","Actor":"MichaelSimons","Number":"10985","RawContent":null,"Title":"'Exec format error' when running global tool on ARM32","State":"open","Body":"Installing a global tool on ARM32 doesn't run.  Fails with `cannot execute binary file: Exec format error`.\r\n\r\n# Repro Steps\r\n1. Requirement - run from an ARM32 machine.  \r\n1. docker run -it --rm mcr.microsoft.com/dotnet/core/sdk:3.0\r\n1. dotnet tool install --tool-path /mytool <some tool>\r\n1. cd /mytool \r\n1. execute installed tool\r\n\r\n# Results\r\n\r\ncannot execute binary file: Exec format error`\r\n\r\n# Expected Results\r\n\r\nThe tool should run\r\n\r\n# Observations\r\n1. I verified this scenario works for 2.1 but not 3.0.\r\n1. The app will run if you path down to the .store/.../tools folder and run dotnet/tool.dll\r\n1. This was discovered with testing installing PowerShell as a global tool - https://github.com/dotnet/dotnet-docker/pull/960#discussion_r266060183.  PowerShell in this case is built against 2.1 but has a custom roll forward policy defined - https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/roll-forward-on-no-candidate-fx.md.  I don't know if that is a factor or not.  It works just find in amd64.\r\n","Url":"https://github.com/dotnet/cli/issues/10985","RelatedDescription":"Open issue \"'Exec format error' when running global tool on ARM32\" (#10985)"},{"Id":"421698028","IsPullRequest":true,"CreatedAt":"2019-03-15T20:46:37","Actor":"Potapy4","Number":"10984","RawContent":null,"Title":"Fix typo","State":"open","Body":"- Rename from `.Net` to `.NET`","Url":"https://github.com/dotnet/cli/pull/10984","RelatedDescription":"Open PR \"Fix typo\" (#10984)"},{"Id":"421627864","IsPullRequest":false,"CreatedAt":"2019-03-15T17:28:51","Actor":"wli3","Number":"10983","RawContent":null,"Title":"Should we unify global tools invocation and local tools invocation","State":"open","Body":"local tools require prefix `dotnet` like `dotnet t-rex` due to technical constrain while global tools only need `t-rex`. The cause tools' author needing extra documentation. Should we also allow global tools be able to invoke by `dotnet t-rex` ?","Url":"https://github.com/dotnet/cli/issues/10983","RelatedDescription":"Open issue \"Should we unify global tools invocation and local tools invocation\" (#10983)"},{"Id":"421623237","IsPullRequest":false,"CreatedAt":"2019-03-15T17:17:03","Actor":"leecow","Number":"10982","RawContent":null,"Title":"Assembly built with \"Portable\" debugging information - contains source information","State":"open","Body":"@pavlexander commented on [Thu Mar 14 2019](https://github.com/dotnet/core/issues/2449)\n\n# Assembly built with \"Portable\" debugging information - contains source information\r\n\r\n## Description\r\n\r\nWhen referencing an assembly that was build with \"Portable\" debugging information - it is possible to step into the source code, while in debug mode. According to documentation - \"Portable\" debugging information ensures that a \"pdb\" file is created. It says **nothing** about the fact that the DLL itself will contain an information about where the DLL was compiled at. Therefore, when this information is inside DLL - you are able to step into the source, given that location and checksum not changed.\r\n\r\nHere is the documentation I was referencing to:\r\nhttps://docs.microsoft.com/en-us/visualstudio/ide/reference/advanced-build-settings-dialog-box-csharp?view=vs-2017\r\n\r\n> * none\r\n> \r\n> Specifies that no debugging information will be generated.\r\n> \r\n> * portable\r\n> \r\n> Produces a .PDB file, a non-platform-specific, portable symbol file that provides other tools, especially debuggers, information about what is in the main executable file and how it was produced. See Portable PDB for more information.\r\n\r\n# General\r\n\r\n## Specs\r\nOS:\r\n\r\nOS Name\tMicrosoft Windows 10 Enterprise\r\nVersion 10.0.16299 Build 16299\r\nVS:\r\n\r\nMicrosoft Visual Studio Professional 2017\r\nVersion 15.9.7\r\nVisualStudio.15.Release/15.9.7+28307.423\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\ndotnet --version\r\n\r\n2.2.104\r\n\r\n## Prerequisites\r\n\r\nCheckout the solution from my repo:\r\n\r\nhttps://github.com/pavlexander/dotnetbugs/tree/master/Bugs/13032019_DllIncludesPdbInformation\r\n\r\n## Steps to reproduce\r\n\r\n1. Open the solution in VisualStudio\r\n2. Build project \"DllWithPortableDebuggingInformation\"\r\n**Note 1**: see the post-build events. The script will copy the DLL into a console app project.\r\n**Note 2**: script will also delete PDB so there is no information anywhere about the source..\r\n**Note 3**: see the project settings. Debugging information set to \"Portable\".\r\n3. For console application, right click on project, \"Add -> Reference\". Browse for DLL that was copied into the root folder of console app project, add a reference to it!\r\nPath: \"\\Bugs\\13032019_DllIncludesPdbInformation\\DllIncludesPdbInformation\\DllWithPortableDebuggingInformation.dll\"\r\n4. Go to \"Program.cs\" of console application and un-comment the line which is marked with a comment. \r\n5. Put a debug point onto the same line that you have uncommented.\r\n6. Start console app in debug mode. On break - step into the code of external library.\r\n\r\n**Expected result:**\r\nStepping into the code is skipped because DLL has no information about source code location.\r\n\r\n**Actual result:**\r\nStepping into the code works, despite the fact that PDB file does not even exists.\r\n\r\n\r\n## Proposed solution\r\n\r\nWe either need information about this behavior to be properly documented, or, if it's a bug, then it needs to be fixed.\r\n\r\n## Additional questions\r\n\r\nPlease take a minute to answer following questions:\r\n\r\n1. How to tell, if PDB information is embedded into an DLL? For example, can I use \"JetBrains dotPeek\" to inspect DLL and see what kind of information it contains about the source? I couldn't find any tutorials on how to do it and how/where this information is stored in DLL. Any hints or links are appreciated.\r\n\r\n2. Is it possible to override the \"default source location\" for the loaded DLLs? For example, if an assembly was compiled at \"C:/myCompiledLibs\", but afterwards I moved the source to \"D:/newLocation\" - how do I make it so, that the Visual Studio would look into this new directory for sources, instead of using this info that is embedded into DLL/PDB?\r\n\r\nAny answers are much appreciated.\n\n","Url":"https://github.com/dotnet/cli/issues/10982","RelatedDescription":"Open issue \"Assembly built with \"Portable\" debugging information - contains source information\" (#10982)"},{"Id":"421593590","IsPullRequest":false,"CreatedAt":"2019-03-15T16:06:51","Actor":"qmfrederik","Number":"10981","RawContent":null,"Title":"Build hangs on low-memory device with many CPU cores","State":"open","Body":"## Steps to reproduce\r\n\r\nI'm compiling a .NET Core solution (~40 projects) on a Raspberry Pi. This machine has 4 CPU cores, but only 1 GB of RAM.\r\n\r\nI run `dotnet build` to compile my solution.\r\n\r\n## Expected  behavior\r\n\r\nI expect `dotnet build` to be slow, but work.\r\n\r\n## Actual behavior\r\n\r\nWhat I've observed is that many `dotnet` processes are being launched, eating away memory, until the machine completely runs out of memory and becomes unusable.\r\n\r\nWhen I run the build in a Docker container, and limit the CPUs which the container can access to 1 or 2, the build completes correctly.\r\n\r\nIt appears that `dotnet build` limits the concurrency when the machine is low on CPU, but not when the machine is low on memory.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nroot@da5fb4612217:/# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-arm64\r\n Base Path:   /usr/local/dotnet/sdk/3.0.100-preview3-010431/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview3-010431 [/usr/local/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [/usr/local/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [/usr/local/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10981","RelatedDescription":"Open issue \"Build hangs on low-memory device with many CPU cores\" (#10981)"},{"Id":"421147994","IsPullRequest":false,"CreatedAt":"2019-03-14T17:19:27","Actor":"jaredpar","Number":"10979","RawContent":null,"Title":"3.0 SDK is copying runtimes folders and assets to desktop TF","State":"open","Body":"Found during https://github.com/dotnet/roslyn/pull/34093\r\n\r\nRepro Steps\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Use branch fix-sdk\r\n- Run `Build.cmd -build -restore`\r\n\r\nNotice that after build every net472 directory has a runtimes folder under it with the assets you'd expect from .NET Core TF. Example:\r\n\r\n```\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\lib\\net461\\System.Text.Encoding.CodePages.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.amd64.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.arm.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win\\native\\Microsoft.DiaSymReader.Native.x86.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win-x64\\native\\Microsoft.DiaSymReader.Native.amd64.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win-x86\\native\\Microsoft.DiaSymReader.Native.x86.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win7-x64\\native\\e_sqlite3.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win7-x86\\native\\e_sqlite3.dll\r\nE:\\code\\roslyn\\artifacts\\bin\\Roslyn.VisualStudio.Next.UnitTests\\Debug\\net472\\runtimes\\win8-arm\\native\\Microsoft.DiaSymReader.Native.arm.dll\r\n```","Url":"https://github.com/dotnet/cli/issues/10979","RelatedDescription":"Open issue \"3.0 SDK is copying runtimes folders and assets to desktop TF\" (#10979)"},{"Id":"420979739","IsPullRequest":true,"CreatedAt":"2019-03-14T16:53:37","Actor":"dotnet-maestro[bot]","Number":"10978","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19163.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10978","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10978)"},{"Id":"420462559","IsPullRequest":true,"CreatedAt":"2019-03-13T12:36:42","Actor":"dotnet-maestro[bot]","Number":"10975","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10975","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10975)"},{"Id":"420462579","IsPullRequest":true,"CreatedAt":"2019-03-13T12:31:44","Actor":"dotnet-maestro[bot]","Number":"10976","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19162.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10976","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10976)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"422563592","IsPullRequest":false,"CreatedAt":"2019-03-19T06:25:32","Actor":"githubdigo","Number":"1103","RawContent":null,"Title":"After updating to .netStandard 2.0.3 Convert.ToString(null) is throwing Null reference exception","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1103","RelatedDescription":"Open issue \"After updating to .netStandard 2.0.3 Convert.ToString(null) is throwing Null reference exception\" (#1103)"},{"Id":"421676181","IsPullRequest":true,"CreatedAt":"2019-03-18T19:09:34","Actor":"terrajobst","Number":"1102","RawContent":null,"Title":"Expose RandomNumberGenerator.GetInt32","State":"closed","Body":"Fixes #1101.","Url":"https://github.com/dotnet/standard/pull/1102","RelatedDescription":"Closed or merged PR \"Expose RandomNumberGenerator.GetInt32\" (#1102)"},{"Id":"420975088","IsPullRequest":false,"CreatedAt":"2019-03-18T19:09:34","Actor":"khellang","Number":"1101","RawContent":null,"Title":"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32","State":"closed","Body":"I'd like to propose the inclusion of the new `System.Security.Cryptography.RandomNumberGenerator.GetInt32` APIs, added in https://github.com/dotnet/corefx/pull/31243.\r\n\r\nAs noted in https://github.com/dotnet/corefx/issues/30873, this is often incorrectly implemented, which can lead to security vulnerabilities and bias. It would be nice if it was part of the standard, to have a convenient API for this across all platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex ec34484..2b7d68b 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -810,6 +810,8 @@ namespace System.Security.Cryptography\r\n         public virtual void GetBytes(System.Span<byte> data) { }\r\n         public virtual void GetNonZeroBytes(byte[] data) { }\r\n         public virtual void GetNonZeroBytes(System.Span<byte> data) { }\r\n+        public static int GetInt32(int fromInclusive, int toExclusive) { throw null; }\r\n+        public static int GetInt32(int toExclusive) { throw null; }\r\n     }\r\n     [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]\r\n     public abstract partial class RC2 : System.Security.Cryptography.SymmetricAlgorithm\r\n\r\n```\r\n\r\n// @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1101","RelatedDescription":"Closed issue \"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32\" (#1101)"},{"Id":"420728685","IsPullRequest":false,"CreatedAt":"2019-03-13T21:30:55","Actor":"OpenSpacesAndPlaces","Number":"1100","RawContent":null,"Title":"Question....On .Net Framework 4.7 without any SDKs...","State":"open","Body":"I'm currently running into an issue with a hosting company that only has .Net Framework 4.7 installed and no supporting SDKS for netstandard 2.0.\r\n\r\nThe netstandard 2.0. library is needed for EntityFramework Core and SignalR Core.\r\n\r\nThe problem is:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n\r\n- Simply trying to add the 4.7.1. dll results in:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context\r\n\r\n- Pre-compiling/Publish has not helped.\r\n- Attempting to include the required base libraries (the ones .Net Standard would be used to pull in) has not helped.\r\n- Various combinations of assembly rules/config settings has not helped.\r\n\r\n---\r\n\r\nI'm totally fine with hand adding every last nuget package needed if there is a way to redirect the netstandard bindings to the base libraries.\r\n\r\nUnfortunately there is no RDP access to the server - so any fix has to be within the confines of bin folder drops or web.config values.\r\n\r\n---\r\n\r\nAny help appreciated!\r\nAny other details I can provide - let me know!","Url":"https://github.com/dotnet/standard/issues/1100","RelatedDescription":"Open issue \"Question....On .Net Framework 4.7 without any SDKs...\" (#1100)"},{"Id":"419180568","IsPullRequest":false,"CreatedAt":"2019-03-10T17:28:29","Actor":"jinyuttt","Number":"1099","RawContent":null,"Title":"Elliptic Curve Cryptography","State":"closed","Body":"Provide elliptic curve cryptography? ","Url":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099)"},{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"423570165","IsPullRequest":true,"CreatedAt":"2019-03-21T04:41:15","Actor":"lmolkova","Number":"36203","RawContent":null,"Title":"Fix 31687 on netfx: escape Correlation-Context keys and values","State":"open","Body":"Fixes #31687\r\n\r\nSee #35906","Url":"https://github.com/dotnet/corefx/pull/36203","RelatedDescription":"Open PR \"Fix 31687 on netfx: escape Correlation-Context keys and values\" (#36203)"},{"Id":"423543505","IsPullRequest":true,"CreatedAt":"2019-03-21T02:29:27","Actor":"Dotnet-GitSync-Bot","Number":"36200","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/36200","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#36200)"},{"Id":"423546039","IsPullRequest":false,"CreatedAt":"2019-03-21T02:07:21","Actor":"layomia","Number":"36202","RawContent":null,"Title":"Implement escaped-character handling in (Try)GetDateTime(Offset) methods of the Utf8JsonReader","State":"open","Body":"Similar to the implementation for `(Try)GetGuid` (https://github.com/dotnet/corefx/pull/36122), we want these methods to handle escaped characters.","Url":"https://github.com/dotnet/corefx/issues/36202","RelatedDescription":"Open issue \"Implement escaped-character handling in (Try)GetDateTime(Offset) methods of the Utf8JsonReader\" (#36202)"},{"Id":"423545547","IsPullRequest":true,"CreatedAt":"2019-03-21T02:04:19","Actor":"steveharter","Number":"36201","RawContent":null,"Title":"Add JsonSerializer Xml doc and change DefaultBufferSize semantics","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/36174\r\n\r\nAlso changes the DefaultBufferSize to return an explicit value for the default value (16K) instead of trying to hide the actual value by returning -1. The main reason for the change is that it may be important for others to be able to easily inspect the actual value being used, plus it is the general pattern that other implementations of a default size use.","Url":"https://github.com/dotnet/corefx/pull/36201","RelatedDescription":"Open PR \"Add JsonSerializer Xml doc and change DefaultBufferSize semantics\" (#36201)"},{"Id":"423538908","IsPullRequest":true,"CreatedAt":"2019-03-21T01:23:35","Actor":"stephentoub","Number":"36199","RawContent":null,"Title":"Make Process.{Safe}Handle be a waitable event handle on Unix","State":"open","Body":"The documentation for Process.{Safe}Handle state that its value can be used to initialize a SafeWaitHandle that can then be used with a method like WaitHandle.WaitAny. However, on Unix, the SafeProcessHandle we currently return from Process.SafeHandle just uses the process ID as its faux handle value, since on Unix there isn't actually an OS process handle that's waitable in this fashion.\r\n\r\nWe already have to manufacture a ManualResetEvent to serve as such a wait handle, though. as we use that for WaitForExit, raising the Exited event, and so on.  As such, we can change SafeProcessHandle to be backed by that MRE's handle rather than by the process ID.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35544\r\ncc: @tmds, @wtgodbe, @krwq","Url":"https://github.com/dotnet/corefx/pull/36199","RelatedDescription":"Open PR \"Make Process.{Safe}Handle be a waitable event handle on Unix\" (#36199)"},{"Id":"423529532","IsPullRequest":false,"CreatedAt":"2019-03-21T00:28:55","Actor":"josetr","Number":"36198","RawContent":null,"Title":"API for inserting a Span<T> into a List<T> efficiently","State":"open","Body":"Perhaps an `AddRange` overload taking a `Span<T>` can be added to the `List` class?\r\n\r\n```\r\nvar list = new List<byte>();\r\nlist.AddRange(new Span<byte>());\r\n```\r\n\r\n**Workarounds**\r\n\r\n```\r\nforeach(var b in span)\r\n    list.Add(b); // Inefficient only copying one byte at a time\r\n```\r\n\r\n```\r\nvar list = new List<byte>();\r\nvar span = new Span<byte>();\r\nlist.AddRange(span.ToArray()); Silly allocation\r\n```","Url":"https://github.com/dotnet/corefx/issues/36198","RelatedDescription":"Open issue \"API for inserting a Span<T> into a List<T> efficiently\" (#36198)"},{"Id":"423507403","IsPullRequest":false,"CreatedAt":"2019-03-20T22:52:28","Actor":"ChadNedzlek","Number":"36197","RawContent":null,"Title":"NamedPipeServerStream.GetImpersonationUserName() throws InvalidationOperationException(\"The operation completed successfully\")","State":"open","Body":"According to https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes.namedpipeserverstream.getimpersonationusername?view=netcore-2.2#remarks, when the client is opened without impersonation allowed, this method should return null.\r\n\r\nWhen I run this code on windows, with dotnet.exe version 2.1.504, netcoreapp2.1\r\n```C#\r\nif (client)\r\n{\r\n  var stream = new NamedPipeClientStream(\".\",\r\n    name,\r\n    PipeDirection.InOut,\r\n    PipeOptions.None,\r\n    TokenImpersonationLevel.Identification);\r\n  await stream.ConnectAsync();\r\n}\r\nelse\r\n{\r\n  var stream = new NamedPipeServerStream(name, PipeDirection.InOut, 1, PipeTransmissionMode.Byte, PipeOptions.None);\r\n  await stream.WaitForConnectionAsync();\r\n  var userName = stream.GetImpersonationUserName();\r\n}\r\n```\r\n\r\nit instead throws:\r\n```\r\nUnhandled Exception: System.IO.IOException: The operation completed successfully\r\n   at System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName()\r\n   ...\r\n```\r\n\r\nThis is both contrary to the documentation and an unhelpful error.","Url":"https://github.com/dotnet/corefx/issues/36197","RelatedDescription":"Open issue \"NamedPipeServerStream.GetImpersonationUserName() throws InvalidationOperationException(\"The operation completed successfully\")\" (#36197)"},{"Id":"423505016","IsPullRequest":true,"CreatedAt":"2019-03-20T22:43:50","Actor":"ericstj","Number":"36196","RawContent":null,"Title":"Manual update to 20190320.3 of arcade","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/36196","RelatedDescription":"Open PR \"Manual update to 20190320.3 of arcade\" (#36196)"},{"Id":"423498853","IsPullRequest":false,"CreatedAt":"2019-03-20T22:22:29","Actor":"jpfreyen","Number":"36195","RawContent":null,"Title":"macOS: undocumented errorCode for IOException thrown on FileInfo(path).Open(FileMode.Open)","State":"open","Body":"# Issue Title\r\n\r\nmacOS: undocumented errorCode for IOException thrown on FileInfo(path).Open(FileMode.Open)\r\n\r\n# General\r\n\r\nEnvironment: MacOS Mojave 14.3\r\n.NetCoreApp-v2.1\r\n\r\nwhen using FileInfo(pathname).Open(FileMode.Open)) and an IOException is thrown, errorCode reported is 35 regardless if Marshal.GetHRForException(e) or e.HResult is used to retrieve the error code.  error code 35 is undocumented in your documentation:\r\n\r\nhttps://docs.microsoft.com/en-us/windows/desktop/debug/system-error-codes--0-499-\r\n\r\nThe mono implementation .NETFoundation 462 does the more correct thing and report an error code 32.  This error code is reasonable error for the situation in a macOS environment (process can't be shared because it's being used by another process).\r\n\r\nBUT if 35 is actually the right error code, Microsoft needs to document this as its undocumented.\r\n\r\nSample code:\r\n\r\n``` .    // macOS Mojave 14.3\r\n             try\r\n             {\r\n                using (new FileInfo(Path.GetTempFileName()).Open(FileMode.Open))\r\n                 {\r\n                     return false;\r\n                 }\r\n             }\r\n             catch (IOException e)\r\n             {\r\n                 // mono .NETFramework 462 is value 32, .NETCore-v2.1 is 35\r\n                    var errorCode = Marshal.GetHRForException(e) & ((1 << 16) - 1);\r\n                 \r\n                 // .NETCore-v2.1 value is 35, mono .NETFramework 462 is some huge negative number\r\n                var errorCode2 = e.HResult;\r\n\r\n             }\r\n```","Url":"https://github.com/dotnet/corefx/issues/36195","RelatedDescription":"Open issue \"macOS: undocumented errorCode for IOException thrown on FileInfo(path).Open(FileMode.Open)\" (#36195)"},{"Id":"423490455","IsPullRequest":true,"CreatedAt":"2019-03-20T21:55:30","Actor":"maryamariyan","Number":"36194","RawContent":null,"Title":"[WIP] Add ReadOnlySequence<T>.FirstSpan","State":"open","Body":"Fixes: #33029 \r\n\r\ncc: @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/36194","RelatedDescription":"Open PR \"[WIP] Add ReadOnlySequence<T>.FirstSpan\" (#36194)"},{"Id":"423483851","IsPullRequest":false,"CreatedAt":"2019-03-20T21:36:27","Actor":"HumanEquivalentUnit","Number":"36193","RawContent":null,"Title":"Can we get a String.SplitEnd() method or StringSplitOptions.FromEnd ?","State":"open","Body":"There are pairs of string methods which work with both ends of a string:\r\n\r\n    StartsWith / EndsWith\r\n    PadLeft / PadRight\r\n    TrimStart / TrimEnd\r\n\r\nbut `String.Split` with a count for a limited number of splits, can only split from the left (AFAICT?):\r\n\r\n    \"foo,bar,baz\".Split(',', 2)\r\n    //  \"foo\" and \"bar,baz\"\r\n\r\nRequesting:\r\n\r\n    \"foo,bar,baz\".SplitEnd(',', 2)\r\n    // or\r\n    \"foo,bar,baz\".Split(',', 2, StringSplitOptions.FromEnd)\r\n    // \"foo,bar\" and \"baz\"\r\n\r\nOr any other appropriate name. The same split behaviour, just working the split points back from the end of the string, instead of forwards from the start. In the case where the `count` parameter is not used and the string is split into as many pieces as possible, the result would be the same with or without `SplitEnd`.\r\n\r\nRationale: I miss `str.RSplit()` from Python and keep wanting to use it in PowerShell; string contents often represent data in some hierarchy, e.g. with `c:\\path\\to\\file.txt` it's useful to split the filename out from the folder structure and PowerShell has a couple of ways to address this specifically for filesystem paths, but the general case would be a nice convenience to have.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36193","RelatedDescription":"Open issue \"Can we get a String.SplitEnd() method or StringSplitOptions.FromEnd ?\" (#36193)"},{"Id":"423424372","IsPullRequest":false,"CreatedAt":"2019-03-20T21:21:51","Actor":"deinok","Number":"36190","RawContent":null,"Title":"Package for Accesing to raw Linux APIs","State":"closed","Body":"Hi, I feel like there is no standard way to access to the exposed system calls of linux.\r\n\r\nI mean, a lot of projects are building their own bindings for system calls. Of course most of this projects like corefx itself hide this API.\r\n\r\nWouldn't be better to create a package to wrap the linux API?","Url":"https://github.com/dotnet/corefx/issues/36190","RelatedDescription":"Closed issue \"Package for Accesing to raw Linux APIs\" (#36190)"},{"Id":"423424541","IsPullRequest":true,"CreatedAt":"2019-03-20T20:15:59","Actor":"davidsh","Number":"36191","RawContent":null,"Title":"Fix HttpWebRequest proxy test","State":"closed","Body":"Change test so that it doesn't trip up CredScan in the Azure repo mirror.\r\n\r\nFixes #36187","Url":"https://github.com/dotnet/corefx/pull/36191","RelatedDescription":"Closed or merged PR \"Fix HttpWebRequest proxy test\" (#36191)"},{"Id":"423351361","IsPullRequest":false,"CreatedAt":"2019-03-20T20:15:58","Actor":"MattGal","Number":"36187","RawContent":null,"Title":"Variable naming in local loopback server trips credential scanning automation","State":"closed","Body":"As seen on [this line](https://github.com/dotnet/corefx/commit/2e006bb1a471d2b75d1bbae282241d15da388899#diff-25f859e9dd82e6bb39d6bfc84f10fbe1R1325) , even though the \"password\" in question is only used for a local loopback server the pattern used triggers credential scanning automation and breaks automated engineering services code flow from arcade (see https://github.com/dotnet/core-eng/issues/5510 ).\r\n\r\nI'm opening this to have something to track as this has affected dozens and dozens of build failures.  @davidsh if you have an issue tracking this already feel free to close in favor of that.","Url":"https://github.com/dotnet/corefx/issues/36187","RelatedDescription":"Closed issue \"Variable naming in local loopback server trips credential scanning automation\" (#36187)"},{"Id":"423428367","IsPullRequest":true,"CreatedAt":"2019-03-20T19:15:53","Actor":"Gnbrkm41","Number":"36192","RawContent":null,"Title":"Fix System.Drawing.Tests.SystemFontsTests.SystemFont_Get_ReturnsExpected_WindowsNames test for different locales","State":"open","Body":"Fixed a problem where the test data assumes the user locale is `en-US` or other locales that use `Segoe UI` as the default system font, therefore failing in some PCs with different culture.\r\n\r\nAlso, I have removed tests for DefaultFont/DialogFont, as it does not look like we cannot determine these two only with LCIDs. Workaround for this could be only to enable this when it's running in the official CI where it is guaranteed to be certain fonts, but I'm not entirely sure about it.\r\n\r\nFixes #35664.","Url":"https://github.com/dotnet/corefx/pull/36192","RelatedDescription":"Open PR \"Fix System.Drawing.Tests.SystemFontsTests.SystemFont_Get_ReturnsExpected_WindowsNames test for different locales\" (#36192)"},{"Id":"423413852","IsPullRequest":false,"CreatedAt":"2019-03-20T18:40:38","Actor":"PaitoAnderson","Number":"36189","RawContent":null,"Title":"CookieContainer storing cookies with a space in the name","State":"open","Body":"We're dealing with a website that requires a space in the cookie name, and I'm not able to store it in the CookieContainer, is this something you would consider changing to match browsers?\r\n\r\n<img width=\"676\" alt=\"Screen Shot 2019-03-20 at 2 36 40 PM\" src=\"https://user-images.githubusercontent.com/4108718/54710292-b8ea2c00-4b1d-11e9-8f39-e221968b9c7b.png\">\r\n\r\n```cs\r\nvar cookieContainer = new CookieContainer();\r\ncookieContainer.Add(new Cookie\r\n{\r\n    Value = \"Value\",\r\n    Name = \"White Space\",\r\n    Domain = \"microsoft.com\",\r\n    HttpOnly = true\r\n});\r\n```","Url":"https://github.com/dotnet/corefx/issues/36189","RelatedDescription":"Open issue \"CookieContainer storing cookies with a space in the name\" (#36189)"},{"Id":"423395668","IsPullRequest":false,"CreatedAt":"2019-03-20T17:59:13","Actor":"Gnbrkm41","Number":"36188","RawContent":null,"Title":"CMD refuses to get inputs longer than a certain length with Console.ReadLine()","State":"open","Body":"Operating System: Windows 10 Home x64, Korean Build 17763.379\r\nRuntime used: .NET Framework 4.7.2, .NET Core 3.0 Preview\r\n\r\nwhen using Console.ReadLine, the CMD refuses to read inputs over a certain length; For example, `Console.ReadLine()` without anything done previously refuses to read over 254 characters (the input cuts off after that point). Well-known workarounds for this is to do `Console.SetIn(new StreamReader(Console.OpenStandardInput(8192)))`, however, per [comments on the OpenStandardInput method](https://github.com/dotnet/corefx/blob/1caac52208d277ce673e17bc0069ded9b9fcb4c2/src/System.Console/src/System/Console.cs#L360) the bufferSize is ignored, and although this kind of works, it only extends that limit to 1022 characters which still isn't a whole lot. \r\n\r\nAccording to the [MS Support page](https://support.microsoft.com/en-us/help/830473/command-prompt-cmd-exe-command-line-string-limitation) about the topic, the max input supported by CMD is 8191 on XP+, and some websites suggest that it's extended to 32767 on 7+. I was able to go up to 4095 when I did something similar with C++. (Still not reaching that limit, however bigger than the limit with .NET)\r\n\r\nIs this done intentionally, or is it a bug / system limitation? Would there be any workarounds to this? ","Url":"https://github.com/dotnet/corefx/issues/36188","RelatedDescription":"Open issue \"CMD refuses to get inputs longer than a certain length with Console.ReadLine()\" (#36188)"},{"Id":"423093688","IsPullRequest":false,"CreatedAt":"2019-03-20T17:28:46","Actor":"iSazonov","Number":"36175","RawContent":null,"Title":"Enhance Console.ReadKey() to return at Tab","State":"closed","Body":"On Windows PowerShell implements tab completions in command line (without PSReadline).\r\nhttps://github.com/PowerShell/PowerShell/blob/0f7efddd22a4a44f61a2f22de86f5d6b6aa47564/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleControl.cs#L753\r\n\r\nOn Unix PowerShell can not do this because Console API doesn't support read complete when the Tab button is pressed.\r\nhttps://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/System.Console/src/System/IO/StdInReader.cs#L149\r\n\r\nOnce feature request is implemented, in PowerShell repo we can use the same code on all systems, enhance supported features on Unix and remove explicit P/Invokes.\r\n\r\n### Feature request\r\n\r\nEnhance Console API so that Console.ReadKey() can returns when the Tab (others?) button is pressed.\r\n","Url":"https://github.com/dotnet/corefx/issues/36175","RelatedDescription":"Closed issue \"Enhance Console.ReadKey() to return at Tab\" (#36175)"},{"Id":"423345642","IsPullRequest":false,"CreatedAt":"2019-03-20T16:18:59","Actor":"jkotas","Number":"36186","RawContent":null,"Title":"ProjectNTfs dependency is not auto-updated","State":"open","Body":"The last auto-update was in February. I am doing manual one as part of https://github.com/dotnet/corefx/pull/36172.","Url":"https://github.com/dotnet/corefx/issues/36186","RelatedDescription":"Open issue \"ProjectNTfs dependency is not auto-updated\" (#36186)"},{"Id":"423216716","IsPullRequest":true,"CreatedAt":"2019-03-20T15:55:22","Actor":"dotnet-maestro[bot]","Number":"36180","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190319.71\r\n- **Date Produced**: 3/19/2019 12:48 PM\r\n- **Commit**: 1f3f474a13bdde1c5fecdf8cd9ce525dbe5df000\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview4-27519-71\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview4-27519-71\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview4-27519-71\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36180","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#36180)"},{"Id":"423325556","IsPullRequest":false,"CreatedAt":"2019-03-20T15:43:08","Actor":"chrishaly","Number":"36185","RawContent":null,"Title":"inject code to method before JIT - Add feature Like Java ClassFileTransformer","State":"open","Body":"In Java we can Create Agent and add ClassFileTransformer before method been JIT. .Net Core added startup Hook but there aren't method to inject code to method before JIT.\r\nIt's a vary import feature for AOP, such as generic Logging, Metric, Trace.\r\nSo are there plan to add feature like this? If not we strongly recommend to add this.","Url":"https://github.com/dotnet/corefx/issues/36185","RelatedDescription":"Open issue \"inject code to method before JIT - Add feature Like Java ClassFileTransformer\" (#36185)"},{"Id":"423294825","IsPullRequest":true,"CreatedAt":"2019-03-20T14:50:02","Actor":"tmds","Number":"36184","RawContent":null,"Title":"Process.Kill: don't throw for exited processes","State":"open","Body":"Implements https://github.com/dotnet/corefx/issues/35257\r\n\r\nCC @danmosemsft @wtgodbe @krwq","Url":"https://github.com/dotnet/corefx/pull/36184","RelatedDescription":"Open PR \"Process.Kill: don't throw for exited processes\" (#36184)"},{"Id":"423214822","IsPullRequest":true,"CreatedAt":"2019-03-20T14:45:07","Actor":"dotnet-maestro[bot]","Number":"36179","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190317.10\r\n- **Date Produced**: 3/18/2019 7:14 AM\r\n- **Commit**: de7be3ba62b92e5c48c36876c851a14f154444af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19167.10\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19167.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.SourceRewriter** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19167.10\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36179","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#36179)"},{"Id":"423133576","IsPullRequest":false,"CreatedAt":"2019-03-20T13:59:33","Actor":"czd890","Number":"36176","RawContent":null,"Title":"SslStream BeginReader throw StackOverFlowException","State":"closed","Body":"### BeginRead() throw stackoverflowexception\r\n\r\nnet core 2.2 console  application\r\n```C#\r\nvoid start(){\r\n//init socket code...\r\nvar socket = new Socket()\r\nsocket.Connect(...)\r\nvar tcpStream = new NetworkStream(socket, true);\r\nvar tcpSSLStream = new SslStream(tcpStream, false,...)\r\ntcpSSLStream.AuthenticateAsClient\r\nbeginread()\r\n}\r\nvoid beginread(){\r\nthis.tcpSSLStream.BeginRead(buffer, 0, buffer.length, this.receive, null);\r\n}\r\nvoid receive(){\r\nvar readerLength = this.tcpSSLStream.EndRead(asyncResult);\r\nthis.beginread();\r\n}\r\n```\r\n\r\nstack info:\r\n>\tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 105\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState)\t未知\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.BeginRead() 行 101\tC#\r\n \tSwissQuoteFeed.Engine.dll!SwissQuoteFeed.Engine.FeedReader.SwissQuoteTcpReader.Receive(System.IAsyncResult asyncResult) 行 128\tC#\r\n \tSystem.Net.Security.dll!System.Threading.Tasks.TaskToApm.InvokeCallbackWhenTaskCompletes.AnonymousMethod__0()\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__12_0(System.Action innerContinuation, System.Threading.Tasks.Task innerTask)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<int>.TrySetResult(int result)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int>.SetExistingTaskResult(int result)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<int>.SetResult(int result)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamInternal.ReadAsyncInternal<System.Net.Security.SslStreamInternal.SslReadAsync>(System.Net.Security.SslStreamInternal.SslReadAsync adapter, System.Memory<byte> buffer)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int>.AsyncStateMachineBox<System.Net.Security.SslStreamInternal.<ReadAsyncInternal>d__34<System.Net.Security.SslStreamInternal.SslReadAsync>>.MoveNext()\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.TaskAwaiter.OutputWaitEtwEvents.AnonymousMethod__12_0(System.Action innerContinuation, System.Threading.Tasks.Task innerTask)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Action action, bool allowInlining)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<int>.TrySetResult(int result)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int>.SetExistingTaskResult(int result)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int>.SetResult(int result)\t未知\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamInternal.FillBufferAsync.__InternalFillBufferAsync|38_0<System.Net.Security.SslStreamInternal.SslReadAsync>(System.Net.Security.SslStreamInternal.SslReadAsync adap, System.Threading.Tasks.ValueTask<int> task, int min, int initial)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int>.AsyncStateMachineBox<System.Net.Security.SslStreamInternal.<<FillBufferAsync>g__InternalFillBufferAsync|38_0>d<System.Net.Security.SslStreamInternal.SslReadAsync>>.MoveNext()\t未知\r\n \tSystem.Net.Sockets.dll!System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action<object> continuation, object state, bool forceAsync)\t未知\r\n \tSystem.Net.Sockets.dll!System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs _)\t未知\r\n \tSystem.Net.Sockets.dll!System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(int bytesTransferred, System.Net.Sockets.SocketFlags flags)\t未知\r\n \tSystem.Net.Sockets.dll!System.Net.Sockets.SocketAsyncEventArgs..cctor.AnonymousMethod__177_0(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* nativeOverlapped)\t未知\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\t未知\r\n","Url":"https://github.com/dotnet/corefx/issues/36176","RelatedDescription":"Closed issue \"SslStream BeginReader throw StackOverFlowException\" (#36176)"},{"Id":"423220505","IsPullRequest":true,"CreatedAt":"2019-03-20T13:33:22","Actor":"dotnet-maestro[bot]","Number":"36181","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190319.04\r\n- **Date Produced**: 3/19/2019 6:57 PM\r\n- **Commit**: 4d6b497d03a1758b9beed08a0b3fa258bc78160d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27519-04\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview4-27519-04\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview4-27519-04\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36181","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#36181)"},{"Id":"423251162","IsPullRequest":true,"CreatedAt":"2019-03-20T13:29:28","Actor":"ViktorHofer","Number":"36183","RawContent":null,"Title":"Uppercase configuration string","State":"open","Body":"Upper-casing the first character to allow lower-case configurations in the CLI. Requires bash v4+ (2009 released).","Url":"https://github.com/dotnet/corefx/pull/36183","RelatedDescription":"Open PR \"Uppercase configuration string\" (#36183)"},{"Id":"423223051","IsPullRequest":false,"CreatedAt":"2019-03-20T12:24:02","Actor":"ajayban","Number":"36182","RawContent":null,"Title":"System.Runtime.CompilerServices.Unsafe causing issues with ASP.NET CORE app 2.1","State":"open","Body":"Hello All, \r\n\r\nOne of customer I was working with reported this assembly load failure issue with his .NET Core 2.1 app. Below is the call stack:\r\n------------------------------------------------------------------------------------------------------\r\nSystem.IO.FileLoadException: Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\nFile name: 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.StringUtilities.TryGetAsciiString(Byte* input, Char* output, Int32 count)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities.GetAsciiStringNonNullCharacters(Span`1 span)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.OnOriginFormTarget(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection.OnStartLine(HttpMethod method, HttpVersion version, Span`1 target, Span`1 path, Span`1 query, Span`1 customMethod, Boolean pathEncoded)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, Byte* data, Int32 length)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1.ParseRequestLine(TRequestHandler handler, ReadOnlySequence`1& buffer, SequencePosition& consumed, SequencePosition& examined)\r\n------------------------------------------------------------------------------------------------------\r\nWe were able to resolve the issue by removing the runtime reference according to https://github.com/dotnet/corefx/issues/23988#issuecomment-329200879.\r\n\r\nThis looks like this issue has reappear: https://github.com/dotnet/corefx/issues/23988. Can someone please look into this?\r\n","Url":"https://github.com/dotnet/corefx/issues/36182","RelatedDescription":"Open issue \"System.Runtime.CompilerServices.Unsafe causing issues with ASP.NET CORE app 2.1\" (#36182)"},{"Id":"423162520","IsPullRequest":false,"CreatedAt":"2019-03-20T10:00:28","Actor":"MarcoGix","Number":"36178","RawContent":null,"Title":"ConfigurationManager do not load AppSettings from EnvironmentVariables under Net Core, does under NetFramework","State":"open","Body":"Good morning to all,\r\n\r\nI have an issue using ConfigurationManager in NetCore in Azure WebApps.\r\n\r\nAzure WebApps provides configuration settings setted in the Azure Portal as EnvironmentVariables with the convention APPSETTINGS_{key}={value}\r\n\r\nThis kind of usage is supported by NetFramework (461 for sure, dunno if also olders) and if I run the project targeting 461 it works just fine. When I target netcoreapp2.2 it does load App.Config settings but doesn't load setting configured via EnvironmentVariables.\r\n\r\nWe've a lot of projects that we'd like to migrate to NetCore but still using the static ConfigurationManager in AzureWebApps. I\r\ns this a bug, or is a missing feature?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36178","RelatedDescription":"Open issue \"ConfigurationManager do not load AppSettings from EnvironmentVariables under Net Core, does under NetFramework\" (#36178)"},{"Id":"423155267","IsPullRequest":true,"CreatedAt":"2019-03-20T09:44:26","Actor":"filipnavara","Number":"36177","RawContent":null,"Title":"WIP: Read system proxy information on macOS","State":"open","Body":"Partially fixes #26593\r\n\r\nTested with HTTP, HTTPS and Autoconfiguration settings. Doesn't pick-up the stored credentials yet.","Url":"https://github.com/dotnet/corefx/pull/36177","RelatedDescription":"Open PR \"WIP: Read system proxy information on macOS\" (#36177)"},{"Id":"423081559","IsPullRequest":false,"CreatedAt":"2019-03-20T06:02:16","Actor":"ahsonkhan","Number":"36174","RawContent":null,"Title":"Add xml style comments to JsonSerializer public APIs","State":"open","Body":"From https://github.com/dotnet/corefx/pull/35609#discussion_r261813179\r\n\r\n@steveharter, we need to add XML style doc comments to all the public surface area that you added (`JsonSerializer`, `JsonSerializerOptions`). Would you mind adding them?\r\n\r\nFor examples, see the existing API surface (`Utf8JsonReader`/`Ut8JsonWriter`/`JsonDocument`) or checkout this PR from @bartonjs: https://github.com/dotnet/corefx/pull/35503","Url":"https://github.com/dotnet/corefx/issues/36174","RelatedDescription":"Open issue \"Add xml style comments to JsonSerializer public APIs\" (#36174)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"423573656","IsPullRequest":true,"CreatedAt":"2019-03-21T05:03:50","Actor":"jcouv","Number":"34323","RawContent":null,"Title":"Track l-value and r-value types in conditional operator","State":"open","Body":"Assignment to ref variable produces safety warnings\r\n\r\n\r\n- Fixes https://github.com/dotnet/roslyn/issues/33982 (Mismatched null assignment through a ref variable should be a safety warning)\r\n- Fixes https://github.com/dotnet/roslyn/issues/30432 (Report nullability warning for best common type mismatch with `ref`)\r\n- Fixes https://github.com/dotnet/roslyn/issues/33664 (Conditional ref operator should require same nullability)\r\n- Closes to https://github.com/dotnet/roslyn/issues/29869 (Confirm ``` /*T:...*/``` expectations in ConditionalOperator_14 unit-test)\r\n- Relates to https://github.com/dotnet/roslyn/issues/33025 (Track null state through ref assignments to ref ternaries)","Url":"https://github.com/dotnet/roslyn/pull/34323","RelatedDescription":"Open PR \"Track l-value and r-value types in conditional operator\" (#34323)"},{"Id":"423558782","IsPullRequest":true,"CreatedAt":"2019-03-21T03:25:29","Actor":"tmat","Number":"34322","RawContent":null,"Title":"Move EnC debug information reading to Features.","State":"open","Body":"Encapsulate the logic in EditAndContinueMethodDebugInfoReader.","Url":"https://github.com/dotnet/roslyn/pull/34322","RelatedDescription":"Open PR \"Move EnC debug information reading to Features.\" (#34322)"},{"Id":"423551273","IsPullRequest":false,"CreatedAt":"2019-03-21T02:39:27","Actor":"lostmsu","Number":"34321","RawContent":null,"Title":"Can't compile \"Unmanaged constructed type\" after deploying the latest master from Visual Studio","State":"open","Body":"**Version Used**: 6de8558637d012340122c9849be633be3004ed9c\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Follow Roslyn Visual Studio 2019 build instructions\r\n2. Launch RoslynDev instance of VS 2019\r\n3. Clone https://github.com/losttech/TypeNum\r\n4. Open TypeNum/TypeNum.sln\r\n5. Try building solution\r\n\r\n**Expected Behavior**:\r\nIDE does not show any errors\r\nSolution builds\r\n\r\n**Actual Behavior**:\r\nIDE does not show any errors (which is correct)\r\nBuild fails: `error CS8377: The type 'N1<int>' must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter 'TNum' in the generic type or method 'Twice<TNum, T>'`\r\n\r\n**Environment**\r\nVS 16.0.0 RC.2\r\ndotnet --version: 3.0.100-preview3-010431\r\n\r\n**Related**\r\n#31374\r\ndotnet/csharplang#1744","Url":"https://github.com/dotnet/roslyn/issues/34321","RelatedDescription":"Open issue \"Can't compile \"Unmanaged constructed type\" after deploying the latest master from Visual Studio\" (#34321)"},{"Id":"423548245","IsPullRequest":true,"CreatedAt":"2019-03-21T02:20:37","Actor":"ivanbasov","Number":"34320","RawContent":null,"Title":"Fixing completion test harness","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34320","RelatedDescription":"Open PR \"Fixing completion test harness\" (#34320)"},{"Id":"423547819","IsPullRequest":true,"CreatedAt":"2019-03-21T02:18:17","Actor":"chsienki","Number":"34319","RawContent":null,"Title":"Don't warn about #nullable in disabled code:","State":"open","Body":" - Check if in an active code region before warning about #nullable directives in lower lang versions\r\n - Add test","Url":"https://github.com/dotnet/roslyn/pull/34319","RelatedDescription":"Open PR \"Don't warn about #nullable in disabled code:\" (#34319)"},{"Id":"423542364","IsPullRequest":true,"CreatedAt":"2019-03-21T01:44:16","Actor":"jasonmalinowski","Number":"34318","RawContent":null,"Title":"Ensure we wait for the workspace changes from .editorconfig changes ","State":"open","Body":"Our integration tests were modifying .editorconfig files and then waiting on our workspace waiters to ensure the change is propagated to the workspace. This isn't sufficient, since there's asynchrony in various places before it gets back to our system:\r\n\r\n1. The kernel has to actually notify the devenv process.\r\n2. The Visual Studio file watching service has asynchrony in it to notify on the appropriate threads.\r\n3. The coding conventions library internally does some async locking around a semaphore, so things might get deferred there if timing is just right.","Url":"https://github.com/dotnet/roslyn/pull/34318","RelatedDescription":"Open PR \"Ensure we wait for the workspace changes from .editorconfig changes \" (#34318)"},{"Id":"423523470","IsPullRequest":true,"CreatedAt":"2019-03-21T01:30:05","Actor":"dotnet-bot","Number":"34310","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34310","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#34310)"},{"Id":"423533358","IsPullRequest":false,"CreatedAt":"2019-03-21T00:56:18","Actor":"bbi-nickkoufou","Number":"34317","RawContent":null,"Title":"ArgumentNullException from ReadDebugInfo()","State":"closed","Body":"https://github.com/dotnet/roslyn/blob/6de8558637d012340122c9849be633be3004ed9c/src/Workspaces/Core/MSBuild/MSBuild/ProjectFile/CommandLineArgumentReader.cs#L171\r\n\r\nThe line above will throw an exception when the workspace has a DebugSymbols property but no DebugType property defined. In my particular use case I have to pass both to MSBuildWorkspace.Create() to avoid any issues. For some additional context we create a workspace and load projects as part of a T4 transformation pipeline.","Url":"https://github.com/dotnet/roslyn/issues/34317","RelatedDescription":"Closed issue \"ArgumentNullException from ReadDebugInfo()\" (#34317)"},{"Id":"423526485","IsPullRequest":true,"CreatedAt":"2019-03-21T00:13:55","Actor":"agocke","Number":"34316","RawContent":null,"Title":"Check reachability when looking at uninitialized non-null fields","State":"open","Body":"If the end of a constructor is unreachable we shouldn't warn about\r\nfields which are uninitialized at the end.","Url":"https://github.com/dotnet/roslyn/pull/34316","RelatedDescription":"Open PR \"Check reachability when looking at uninitialized non-null fields\" (#34316)"},{"Id":"423526227","IsPullRequest":true,"CreatedAt":"2019-03-21T00:12:48","Actor":"JoeRobich","Number":"34315","RawContent":null,"Title":"Filter out additive classifications in EditorClassifier","State":"open","Body":"The EditorClassifier was already filtering down to one ClassifiedSpan per textspan. This change ensures that the additive classifications are the ones filtered out instead of relying on ordering.\r\n\r\nSupporting additive classifications in ClassifiedSpans and TaggedText has an open issue https://github.com/dotnet/roslyn/issues/32770\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/34307\r\n\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nUser runs Find All References on a static identifier and some entries in the Find All Reference dialog will be missing the name of the identifier.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/34308\r\n\r\n### Workarounds, if any\r\n\r\nNone\r\n\r\n### Risk\r\n\r\nLow\r\n\r\n### Performance impact\r\n\r\nLow\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes, regression was introduced in https://github.com/dotnet/roslyn/pull/31231. This issue was partially addressed in https://github.com/dotnet/roslyn/pull/32725.\r\n\r\n### Root cause analysis\r\n\r\nIn Dev16, we added the concept of additive classifications to provide additional information about a primary classification. Which means the same text span could potentially get multiple classifications. Existing services were not expecting this change and would compensate by filtering down to one classification per particular span. This change ensures that when filtered the primary classification is preserved instead of the additive classification.\r\n\r\n### How was the bug found?\r\n\r\nReported through developer feedback\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/34315","RelatedDescription":"Open PR \"Filter out additive classifications in EditorClassifier\" (#34315)"},{"Id":"423526038","IsPullRequest":true,"CreatedAt":"2019-03-21T00:11:58","Actor":"dibarbet","Number":"34314","RawContent":null,"Title":"Change supports feature service to use text buffers over document.","State":"open","Body":"Addresses feedback from #34133\r\n\r\nEasiest to review first commit, then second.","Url":"https://github.com/dotnet/roslyn/pull/34314","RelatedDescription":"Open PR \"Change supports feature service to use text buffers over document.\" (#34314)"},{"Id":"423520433","IsPullRequest":false,"CreatedAt":"2019-03-21T00:11:54","Actor":"vsfeedback","Number":"34308","RawContent":null,"Title":"VS2019 RC.2 Find References window displays references incorrectly","State":"closed","Body":"VSF_TYPE_MARKDOWNIn my code there is a line like below;\r\n\r\nIFoobar foo = GetFooBar();\r\n\r\nif i press Shift + F12 (Find All References) on IFooBar\r\n\r\nFind References windows shows like this;\r\n\r\nIFoobar foo = ();\r\n\r\nI attached a sample screenshot..\r\n\r\n![vs15 9](https://user-images.githubusercontent.com/611219/54726454-6b2aef00-4b30-11e9-986c-e4e4be7139c0.jpg)\r\nVS 2017.9 on the left  vs VS 2019 RC on the right\r\n\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489651/vs2019-rc2-find-references-window-displays-referen.html\r\nVSTS ticketId: 820583_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 3/14/2019, 07:46 PM (5 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\nVisual Studio Feedback System on 3/20/2019, 00:41 PM (4 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34308","RelatedDescription":"Closed issue \"VS2019 RC.2 Find References window displays references incorrectly\" (#34308)"},{"Id":"423525869","IsPullRequest":false,"CreatedAt":"2019-03-21T00:11:15","Actor":"josetr","Number":"34313","RawContent":null,"Title":"Problem with temporary object lifetime","State":"open","Body":"This may or may not be a bug depending on the exact rules governing object lifetimes which I can't find anywhere. \r\n\r\n**Version Used**: \r\nVS 2019 Preview 4.2\r\n\r\n**Expected Behavior**:\r\n\r\nTest should output `not equal`. The first temporary object should not be destroyed and its underlying storage shouldn't be available for reuse till the full expression is evaluated. \r\n\r\n**Actual Behavior**:\r\n\r\nTest outputs `equal` because it receives 2 references pointing to the same location.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\n\r\nstruct Num\r\n{\r\n    byte n;\r\n\r\n    public Num(byte n)\r\n    {\r\n        this.n = n;\r\n    }\r\n\r\n    public Span<byte> Span => MemoryMarshal.CreateSpan(ref n, 1);\r\n}\r\n\r\nstatic void Test(Span<byte> a, Span<byte> b)\r\n{\r\n    Console.WriteLine(a.SequenceEqual(b) ? \"equal\" : \"not equal\");\r\n}\r\n\r\nstatic void Main()\r\n{\r\n    Test(new Num(1).Span, new Num(2).Span);\r\n}\r\n```\r\n\r\n**IL** seems to make things more obvious:\r\n```\r\n// Method begins at RVA 0x2688\r\n// Code size 38 (0x26)\r\n.maxstack 2\r\n.entrypoint\r\n.locals init(\r\n    [0] valuetype ConsoleApp1.Program/Num\r\n\r\n)\r\n\r\n// (no C# code)\r\n    IL_0000: nop\r\n// Num num = new Num(1);\r\nIL_0001: ldc.i4.1\r\nIL_0002: newobj instance void ConsoleApp1.Program/Num::.ctor(uint8)\r\nIL_0007: stloc.0\r\n// Span<byte> span = num.Span;\r\nIL_0008: ldloca.s 0\r\n\r\nIL_000a: call instance valuetype[System.Runtime] System.Span`1<uint8> ConsoleApp1.Program/Num::get_Span()\r\n// num = new Num(2);\r\nIL_000f: ldc.i4.2\r\n\r\nIL_0010: newobj instance void ConsoleApp1.Program/Num::.ctor(uint8)\r\nIL_0015: stloc.0\r\n// Test(span, num.Span);\r\nIL_0016: ldloca.s 0\r\n\r\nIL_0018: call instance valuetype[System.Runtime] System.Span`1<uint8> ConsoleApp1.Program/Num::get_Span()\r\nIL_001d: call void ConsoleApp1.Program::Test(valuetype[System.Runtime] System.Span`1<uint8>, valuetype[System.Runtime] System.Span`1<uint8>)\r\n// (no C# code)\r\n    IL_0022: nop\r\nIL_0023: br.s IL_0025\r\n\r\n\r\nIL_0025: ret\r\n} // end of method Program::Main\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34313","RelatedDescription":"Open issue \"Problem with temporary object lifetime\" (#34313)"},{"Id":"423524454","IsPullRequest":true,"CreatedAt":"2019-03-21T00:04:54","Actor":"ivanbasov","Number":"34312","RawContent":null,"Title":"Completion missing members of lambda parameter in fault tolerance case","State":"open","Body":"Fix https://github.com/dotnet/roslyn/issues/8237","Url":"https://github.com/dotnet/roslyn/pull/34312","RelatedDescription":"Open PR \"Completion missing members of lambda parameter in fault tolerance case\" (#34312)"},{"Id":"423523679","IsPullRequest":true,"CreatedAt":"2019-03-21T00:01:24","Actor":"ivanbasov","Number":"34311","RawContent":null,"Title":"minor refactoring of RecommendationService","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34311","RelatedDescription":"Open PR \"minor refactoring of RecommendationService\" (#34311)"},{"Id":"423521179","IsPullRequest":false,"CreatedAt":"2019-03-20T23:49:31","Actor":"jasonmalinowski","Number":"34309","RawContent":null,"Title":"Starting and ending a VisualStudioProject batch triggers WorkspaceChanged for no reason","State":"open","Body":"If you start and stop a batch without actually doing anything, we still trigger WorkspaceChanged. This is unnecessary, and makes it a bit tricky to figure out what *did* change if you're trying to debug something responding to workspace changed.","Url":"https://github.com/dotnet/roslyn/issues/34309","RelatedDescription":"Open issue \"Starting and ending a VisualStudioProject batch triggers WorkspaceChanged for no reason\" (#34309)"},{"Id":"423520432","IsPullRequest":false,"CreatedAt":"2019-03-20T23:46:09","Actor":"vsfeedback","Number":"34307","RawContent":null,"Title":"VS2019 RC.2 Find References window displays references incorrectly","State":"open","Body":"VSF_TYPE_MARKDOWNIn my code there is a line like below;\r\n\r\nIFoobar foo = GetFooBar();\r\n\r\nif i press Shift + F12 (Find All References) on IFooBar\r\n\r\nFind References windows shows like this;\r\n\r\nIFoobar foo = ();\r\n\r\nI attached a sample screenshot..\r\n\r\n![vs15 9](https://user-images.githubusercontent.com/611219/54726454-6b2aef00-4b30-11e9-986c-e4e4be7139c0.jpg)\r\nVS 2017.9 on the left  vs VS 2019 RC on the right\r\n\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/489651/vs2019-rc2-find-references-window-displays-referen.html\r\nVSTS ticketId: 820583_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 3/14/2019, 07:46 PM (5 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\nVisual Studio Feedback System on 3/20/2019, 00:41 PM (4 hours ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/34307","RelatedDescription":"Open issue \"VS2019 RC.2 Find References window displays references incorrectly\" (#34307)"},{"Id":"423519580","IsPullRequest":true,"CreatedAt":"2019-03-20T23:42:17","Actor":"agocke","Number":"34306","RawContent":null,"Title":"Remove IFromIndexOperation completely","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34306","RelatedDescription":"Open PR \"Remove IFromIndexOperation completely\" (#34306)"},{"Id":"423515662","IsPullRequest":true,"CreatedAt":"2019-03-20T23:25:19","Actor":"AlekseyTs","Number":"34305","RawContent":null,"Title":"Adjust completion for explicit interface implementations","State":"open","Body":"- Enable type recommendation within interfaces.\r\n- Do not recommend non-implementable members.","Url":"https://github.com/dotnet/roslyn/pull/34305","RelatedDescription":"Open PR \"Adjust completion for explicit interface implementations\" (#34305)"},{"Id":"423515269","IsPullRequest":false,"CreatedAt":"2019-03-20T23:23:37","Actor":"tinaschrepfer","Number":"34304","RawContent":null,"Title":"Roslyn should guard all calls to ServiceHub and not FailFast.","State":"open","Body":"Based on Watson data, we're noticing a number of crashes in VS because Roslyn is making a call to ServiceHub when the pipe is broken.  Based on discussions with @heejaechang, these are the changes that should be made:\r\n\r\n* Guard all service hub calls so that failures don't leak to FailFast.\r\n* Check to see if JsonRpc is disposed (as part of package close) before using it or logging NFE.\r\n\r\nSample calls:\r\nFindReferenceMethodsAsync\r\nFindReferenceMethodsAsync\r\nGetReferenceCountAsync\r\nGetFullyQualified\r\nOnGlobalOperationStarted\r\nInitialize\r\nUpdateSolutionStorageLocation\r\n","Url":"https://github.com/dotnet/roslyn/issues/34304","RelatedDescription":"Open issue \"Roslyn should guard all calls to ServiceHub and not FailFast.\" (#34304)"},{"Id":"423497691","IsPullRequest":true,"CreatedAt":"2019-03-20T22:18:22","Actor":"cston","Number":"34303","RawContent":null,"Title":"Track nullability across reference and nullable conversions of tuple elements","State":"open","Body":"Moves tracking of nullability across conversions into `ApplyConversion` and adds support for reference and nullable conversions of tuple elements.","Url":"https://github.com/dotnet/roslyn/pull/34303","RelatedDescription":"Open PR \"Track nullability across reference and nullable conversions of tuple elements\" (#34303)"},{"Id":"423473394","IsPullRequest":false,"CreatedAt":"2019-03-20T21:08:41","Actor":"cston","Number":"34302","RawContent":null,"Title":"NullableWalker should visit each BoundConversion node","State":"open","Body":"`NullableWalker` should visit each `BoundConversion` node. Currently, grouped conversions are visited as a single node.\r\n\r\nThe conversion nodes should be visited separately so the correct nullability is available for each corresponding `IOperation` instance.","Url":"https://github.com/dotnet/roslyn/issues/34302","RelatedDescription":"Open issue \"NullableWalker should visit each BoundConversion node\" (#34302)"},{"Id":"423456580","IsPullRequest":false,"CreatedAt":"2019-03-20T20:26:39","Actor":"NickCraver","Number":"34301","RawContent":null,"Title":"AD0001 - CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer threw an exception of type 'System.ArgumentOutOfRangeException'","State":"open","Body":"**Version Used**: VS 2019 Preview 4.2\r\n\r\n**Steps to Reproduce**:\r\nUnknown - just opening the solution causes it but intermittently. The exception info is:\r\n\r\n```\r\nError: `AD0001 - Analyzer 'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw an exception of type 'System.ArgumentOutOfRangeException' with message 'Specified argument was out of the range of valid values.\r\nParameter name: localFunction'.\r\n\r\n'Microsoft.CodeAnalysis.CSharp.RemoveUnusedParametersAndValues.CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer' threw the following exception:\r\n'Exception occurred with following context:\r\nCompilation: StackOverflow\r\nISymbol: DisposeDB (Method)\r\n\r\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\r\nParameter name: localFunction\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraphExtensions.GetLocalFunctionControlFlowGraphInScope(ControlFlowGraph controlFlowGraph, IMethodSymbol localFunction, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.FlowGraphAnalysisData.AnalyzeLocalFunctionInvocationCore(IMethodSymbol localFunction, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.AnalysisData.AnalyzeLocalFunctionInvocation(IMethodSymbol localFunction, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeLocalFunctionInvocation(IMethodSymbol localFunction)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.VisitInvocation(IInvocationOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.VisitArray[T](IEnumerable`1 operations)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.DefaultVisit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.OperationVisitor.VisitExpressionStatement(IExpressionStatementOperation operation)\r\n   at Microsoft.CodeAnalysis.Operations.BaseExpressionStatementOperation.Accept(OperationVisitor visitor)\r\n   at Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(IOperation operation)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.Visit(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.Walker.AnalyzeOperationsAndUpdateData(IEnumerable`1 operations, AnalysisData analysisData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.AnalyzeBlock(BasicBlock basicBlock, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.RunCore(ImmutableArray`1 blocks, DataFlowAnalyzer`1 analyzer, Int32 firstBlockOrdinal, Int32 lastBlockOrdinal, TBlockAnalysisData initialAnalysisData, ArrayBuilder`1 unreachableBlocksToVisit, SortedSet`1 outOfRangeBlocksToVisit, PooledDictionary`2 continueDispatchAfterFinally, PooledHashSet`1 dispatchedExceptionsFromRegions, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.CustomDataFlowAnalysis`1.Run(ControlFlowGraph controlFlowGraph, DataFlowAnalyzer`1 analyzer, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.FlowAnalysis.SymbolUsageAnalysis.SymbolUsageAnalysis.DataFlowAnalyzer.RunAnalysis(ControlFlowGraph cfg, ISymbol owningSymbol, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeUnusedValueAssignments(OperationBlockAnalysisContext context, Boolean isComputingUnusedParams, PooledHashSet`1 symbolUsageResultsBuilder, Boolean& hasBlockWithAllUsedSymbolWrites)\r\n   at Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedParametersAndValuesDiagnosticAnalyzer.SymbolStartAnalyzer.BlockAnalyzer.AnalyzeOperationBlockEnd(OperationBlockAnalysisContext context)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__55`2.<ExecuteBlockActions>b__55_1(ValueTuple`2 data)\r\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\r\n```\r\nI don't know for sure, but an educated guess at the `.DisposeDB()` it's throwing on is probably this method written by @mgravell:\r\n```c#\r\npublic virtual void DisposeDB()\r\n{\r\n    /* static */ void KillDB<T>(StackOverflowContext ctx, string key) where T : StackDbContext\r\n    {   // where are static local methods when you need them? oh yeah, C# 8.0!\r\n        var db = ctx.GetContextItem<T>(key);\r\n        if (db != null)\r\n        {\r\n            ctx.SetContextItem(key, null);\r\n            db.LogDispose = false; // this is a valid way to dispose this object\r\n            db.Dispose();\r\n        }\r\n    }\r\n\r\n    KillDB<DBContext>(this, nameof(DB));\r\n    KillDB<SitesDBContext>(this, nameof(SitesDB));\r\n    KillDB<DBContext>(this, nameof(ReadOnlyDB));\r\n    KillDB<SitesDBContext>(this, nameof(ReadOnlySitesDB));\r\n\r\n    var stackMailDB = GetContextItem<DbConnection>(nameof(StackMailDB));\r\n    if (stackMailDB != null)\r\n    {\r\n        SetContextItem(nameof(StackMailDB), null);\r\n        stackMailDB.Dispose();\r\n    }\r\n\r\n    StackMailHelper.DisposeSmtpClient();\r\n}\r\n```\r\n\r\n**Expected Behavior**: It doesn't error.\r\n**Actual Behavior**: It errors.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34301","RelatedDescription":"Open issue \"AD0001 - CSharpRemoveUnusedParametersAndValuesDiagnosticAnalyzer threw an exception of type 'System.ArgumentOutOfRangeException'\" (#34301)"},{"Id":"423456204","IsPullRequest":true,"CreatedAt":"2019-03-20T20:25:44","Actor":"gafter","Number":"34300","RawContent":null,"Title":"Analyze captured variables at the location lambda is converted to a delegate","State":"open","Body":"Fixes #29617","Url":"https://github.com/dotnet/roslyn/pull/34300","RelatedDescription":"Open PR \"Analyze captured variables at the location lambda is converted to a delegate\" (#34300)"},{"Id":"423444351","IsPullRequest":false,"CreatedAt":"2019-03-20T19:56:37","Actor":"gafter","Number":"34299","RawContent":null,"Title":"Lambdas in array initializers not checked in nullable walker","State":"open","Body":"The following proposed test fails.  The second warning is not produced.\r\n\r\n``` c#\r\n        [Fact, WorkItem(34299, \"https://github.com/dotnet/roslyn/issues/34299\")]\r\n        public void CheckLambdaInArrayInitializer()\r\n        {\r\n            var source =\r\n@\"using System;\r\n\r\nclass C\r\n{\r\n    static void G(object? o)\r\n    {\r\n        Func<object> f = () => o; // possible null reference return\r\n        var fa3 = new[] {\r\n            f, // this defines the array element type as Func<object>\r\n            () => o, // possible null reference return\r\n            };\r\n        fa3[0]().ToString();\r\n    }\r\n}\r\n\";\r\n            var comp = CreateCompilation(new[] { source }, options: WithNonNullTypesTrue());\r\n            comp.VerifyDiagnostics(\r\n                // (7,32): warning CS8603: Possible null reference return.\r\n                //         Func<object> f = () => o; // possible null reference return\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"o\").WithLocation(7, 32),\r\n                // (11,19): warning CS8603: Possible null reference return.\r\n                //            () => o, // possible null reference return\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReturn, \"o\").WithLocation(11, 19));\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34299","RelatedDescription":"Open issue \"Lambdas in array initializers not checked in nullable walker\" (#34299)"},{"Id":"423438177","IsPullRequest":true,"CreatedAt":"2019-03-20T19:41:00","Actor":"chcosta","Number":"34298","RawContent":null,"Title":"Validate CI failure","State":"open","Body":"Validating failure case","Url":"https://github.com/dotnet/roslyn/pull/34298","RelatedDescription":"Open PR \"Validate CI failure\" (#34298)"},{"Id":"423422773","IsPullRequest":false,"CreatedAt":"2019-03-20T19:01:33","Actor":"AntonLapounov","Number":"34297","RawContent":null,"Title":"Race condition in PENestedNamespaceSymbol.EnsureAllMembersLoaded","State":"open","Body":"https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/CSharp/Portable/Symbols/Metadata/PE/PENestedNamespaceSymbol.cs#L122-L132\r\n\r\nReading `_typesByNS` at line 124 is not synchronized with writing it at line 130, which creates a race condition.  Namely, reading `_typesByNS` may be reordered with checking the `lazyTypes == null || lazyNamespaces == null` condition.  If another thread sets `_typesByNS` to `null` in that window, this thread then passes `null` to `LoadAllMembers`, which crashes the process due to an unhandled `NullReferenceException`.","Url":"https://github.com/dotnet/roslyn/issues/34297","RelatedDescription":"Open issue \"Race condition in PENestedNamespaceSymbol.EnsureAllMembersLoaded\" (#34297)"},{"Id":"423417196","IsPullRequest":true,"CreatedAt":"2019-03-20T18:48:36","Actor":"chsienki","Number":"34296","RawContent":null,"Title":"Use TestRuntimeAdditionalArguments from Arcade:","State":"open","Body":" - Remove invoke mono script\r\n - Pass through debug flag via supported arcade mechanism instead\r\n\r\nRelated to https://github.com/dotnet/roslyn/pull/32885 and https://github.com/dotnet/arcade/pull/2054","Url":"https://github.com/dotnet/roslyn/pull/34296","RelatedDescription":"Open PR \"Use TestRuntimeAdditionalArguments from Arcade:\" (#34296)"},{"Id":"423399827","IsPullRequest":false,"CreatedAt":"2019-03-20T18:08:33","Actor":"agocke","Number":"34295","RawContent":null,"Title":"`-shared` doesn't seem to work on Mac, only `/shared`","State":"open","Body":"`-shared` produces the error \"unrecognized option '-shared'\"","Url":"https://github.com/dotnet/roslyn/issues/34295","RelatedDescription":"Open issue \"`-shared` doesn't seem to work on Mac, only `/shared`\" (#34295)"},{"Id":"423391004","IsPullRequest":true,"CreatedAt":"2019-03-20T17:49:08","Actor":"AlekseyTs","Number":"34294","RawContent":null,"Title":"Enable completion for modifiers allowed for interface members.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34294","RelatedDescription":"Open PR \"Enable completion for modifiers allowed for interface members.\" (#34294)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"423543547","IsPullRequest":true,"CreatedAt":"2019-03-21T01:51:45","Actor":"Dotnet-GitSync-Bot","Number":"7195","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @GrabYourPitchforks @GrabYourPitchforks @grant-d @sywhang","Url":"https://github.com/dotnet/corert/pull/7195","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7195)"},{"Id":"421886707","IsPullRequest":true,"CreatedAt":"2019-03-21T01:11:57","Actor":"Dotnet-GitSync-Bot","Number":"7182","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7182","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7182)"},{"Id":"423475823","IsPullRequest":true,"CreatedAt":"2019-03-20T22:34:10","Actor":"nattress","Number":"7194","RawContent":null,"Title":"Get CoreCLR tests from Azure","State":"closed","Body":"Jenkins saved build artifacts are likely to be deleted as we move to AzDO. Move them all to the cloudcijobs account and update URL pointers in the repo.","Url":"https://github.com/dotnet/corert/pull/7194","RelatedDescription":"Closed or merged PR \"Get CoreCLR tests from Azure\" (#7194)"},{"Id":"423152064","IsPullRequest":true,"CreatedAt":"2019-03-20T18:22:11","Actor":"MichalStrehovsky","Number":"7192","RawContent":null,"Title":"Run CoreFX tests single threaded","State":"closed","Body":"Might help us avoid `abort trap 6` that has been plaguing the CI (#7118).\r\n\r\nDisabling parallel execution everywhere because it doesn't have big impact on test execution time and helps keep the changes to build-job.yml short.","Url":"https://github.com/dotnet/corert/pull/7192","RelatedDescription":"Closed or merged PR \"Run CoreFX tests single threaded\" (#7192)"},{"Id":"423152175","IsPullRequest":true,"CreatedAt":"2019-03-20T18:20:16","Actor":"MichalStrehovsky","Number":"7193","RawContent":null,"Title":"Make CoreFX tests RD.XML smaller","State":"closed","Body":"Most of this stuff is no longer needed.","Url":"https://github.com/dotnet/corert/pull/7193","RelatedDescription":"Closed or merged PR \"Make CoreFX tests RD.XML smaller\" (#7193)"},{"Id":"423022378","IsPullRequest":true,"CreatedAt":"2019-03-20T07:41:28","Actor":"jkotas","Number":"7191","RawContent":null,"Title":"Add back APIs dropped from RuntimeHelpers by accident","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7191","RelatedDescription":"Closed or merged PR \"Add back APIs dropped from RuntimeHelpers by accident\" (#7191)"},{"Id":"422926102","IsPullRequest":true,"CreatedAt":"2019-03-19T23:42:06","Actor":"trylek","Number":"7190","RawContent":null,"Title":"SuperIlc improvements, part #1","State":"closed","Body":"This change enables parallelization of ILC compilation when building\r\nmultiple assemblies. For the CoreCLR framework I'm observing about\r\n3~4 times compilation time speedup (about 33 seconds where\r\npreviously I was observing about 120 seconds with SuperIlc and\r\nabout 180 seconds with the legacy scripts).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7190","RelatedDescription":"Closed or merged PR \"SuperIlc improvements, part #1\" (#7190)"},{"Id":"422441417","IsPullRequest":true,"CreatedAt":"2019-03-19T23:03:16","Actor":"trylek","Number":"7189","RawContent":null,"Title":"Fix the last remaining compilation error in ASP.NET assemblies","State":"closed","Body":"This change fixes the build of ASP.NET S.P.Corelib which needs\r\nGC ref map construction for ByRefLike types - I skipped this\r\ncorner case in my initial implementation with a TODO throw.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7189","RelatedDescription":"Closed or merged PR \"Fix the last remaining compilation error in ASP.NET assemblies\" (#7189)"},{"Id":"421843317","IsPullRequest":true,"CreatedAt":"2019-03-19T19:33:05","Actor":"EgorBo","Number":"7180","RawContent":null,"Title":"[WIP] Move Enum to shared","State":"closed","Body":"This PR tests CoreRT side of https://github.com/dotnet/coreclr/pull/23177","Url":"https://github.com/dotnet/corert/pull/7180","RelatedDescription":"Closed or merged PR \"[WIP] Move Enum to shared\" (#7180)"},{"Id":"421749829","IsPullRequest":true,"CreatedAt":"2019-03-19T18:57:19","Actor":"nattress","Number":"7176","RawContent":null,"Title":"Dotnet publish support for ready-to-run images","State":"closed","Body":"* Publishing MSBuild script changes to enable dotnet publish support with `<NativeCodeGen>ReadyToRun</NativeCodeGen>` set in the project file.\r\n    * To enable for a project, add a reference to `Microsoft.DotNet.ILCompiler` package, enable ready-to-run compilation with `<NativeCodeGen>readytorun</NativeCodeGen>` in the project file. Assemblies can be skipped by adding the assembly filename (without extension) to the `ReadyToRunSkipAssembly` item.\r\n    * In ready-to-run mode, the `BuildAllReadyToRunAssemblies` target is used to trigger ILC instead of the `LinkNative` target (which is used for single-file RyuJit mode). `BuildAllReadyToRunAssemblies` compiles assemblies in parallel through nested invocations of MSBuild, each optimizing a single assembly.\r\n    * Sub-invocations of MSBuild use the same project file but override the set of targets that are run, restricting the targets to just collecting the list of dependencies to reference and invoking IlcCompile. This keeps the compilation context the same so all intermediates and binaries go into the same bin and obj directories.\r\n* Add a functional test (WebApi) that is built using the live built compiler in this tree which starts up Asp.Net Core and sends a web request to it.\r\n* Remove .ni extension for produced images to match Crossgen\r\n* Remove the ReadyToRunMultiModule test. It is not an interesting test now we are able to compile all the assemblies in a published .NET Core app.","Url":"https://github.com/dotnet/corert/pull/7176","RelatedDescription":"Closed or merged PR \"Dotnet publish support for ready-to-run images\" (#7176)"},{"Id":"421954193","IsPullRequest":true,"CreatedAt":"2019-03-18T12:58:49","Actor":"MichalStrehovsky","Number":"7186","RawContent":null,"Title":"Add infrastructure to remove framework features","State":"closed","Body":"This makes it possible to remove framework features that add a big pile of junk code and data to the output: ETW instrumentation, and ResourceManager.\r\n\r\nLong term, we will probably want IL Linker to do this, but given the level of funding for CoreRT, interest in making IL Linker play well with other things that hook into the build flow, etc., it's easier to just put this functionality into the CoreRT compiler for now. This is sufficiently \"on the side\" within the compiler that I'm not too worried about it. It's the same as the temporary RD.XML parser.\r\n\r\nI don't expect this to grow beyond one more thing: removal of globalization code.\r\n\r\nWith this, Hello world goes from 4,187,136 bytes, to 3,798,016 bytes (ETW removed) to 3,364,352 bytes (ETW & resource manager removed).","Url":"https://github.com/dotnet/corert/pull/7186","RelatedDescription":"Closed or merged PR \"Add infrastructure to remove framework features\" (#7186)"},{"Id":"422203816","IsPullRequest":true,"CreatedAt":"2019-03-18T12:58:30","Actor":"MichalStrehovsky","Number":"7188","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7188","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7188)"},{"Id":"422027423","IsPullRequest":false,"CreatedAt":"2019-03-18T03:59:41","Actor":"rogusdev","Number":"7187","RawContent":null,"Title":"System.IO.IOException while building CoreRT samples in vagrant box","State":"open","Body":"The Documentation folder has a README that links to \"Prerequisites for building\" here:\r\nhttps://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n\r\nHowever, the samples (e.g. HellowWorld and WebApi) instead link to:\r\nhttps://github.com/dotnet/corert/blob/master/samples/prerequisites.md\r\n\r\nI suspect the former doc is more up to date, so perhaps the samples should just link to that.\r\n\r\nHowever even the non-sample prereqs doc appears to be out of date.  I have ubuntu 18.04 (running in virtualbox) and it did not find the dependency \"libicu55\" when I attempted to apt-get it.\r\n\r\nAdditionally, possibly because of the missing dependency (or perhaps because of the virtualbox, tho I doubt it?), I was unable to build HelloWorld in linux.  I got this exception:\r\n```\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018: The \"EmbedAppNameInHost\" task failed unexpectedly. [/vagran\r\nt/dotnet/HelloWorld/HelloWorld.csproj]\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018: System.IO.IOException: Invalid argument [/vagrant/dotnet/He\r\nlloWorld/HelloWorld.csproj]\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018:    at System.IO.MemoryMappedFiles.MemoryMappedView.CreateVi\r\new(SafeMemoryMappedFileHandle memMappedFileHandle, MemoryMappedFileAccess access, Int64 requestedOffset, Int64 requestedSize) [/vagrant/dotnet/HelloWorld/HelloWorld.csproj]\r\n...(call stack continues for a few more lines)\r\n```\r\n\r\nI followed the directions from:\r\nhttps://github.com/dotnet/corert/tree/master/samples/HelloWorld\r\n\r\nIt does work in windows for me.\r\n\r\nThese are the versions that were restored in my initial linux run of this app:\r\n```\r\n  Restoring packages for /vagrant/dotnet/HelloWorld/HelloWorld.csproj...\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27516-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.1.\r\n  Restore completed in 49.34 sec for /vagrant/dotnet/HelloWorld/HelloWorld.csproj.\r\n```","Url":"https://github.com/dotnet/corert/issues/7187","RelatedDescription":"Open issue \"System.IO.IOException while building CoreRT samples in vagrant box\" (#7187)"},{"Id":"421953020","IsPullRequest":true,"CreatedAt":"2019-03-17T18:59:07","Actor":"jkotas","Number":"7185","RawContent":null,"Title":"Enclose Win32 resource file name in quotes","State":"closed","Body":"Fixes #7184","Url":"https://github.com/dotnet/corert/pull/7185","RelatedDescription":"Closed or merged PR \"Enclose Win32 resource file name in quotes\" (#7185)"},{"Id":"421950139","IsPullRequest":false,"CreatedAt":"2019-03-17T18:59:07","Actor":"Fabi","Number":"7184","RawContent":null,"Title":"Can not open input file if spaces in assembly name (remake)","State":"closed","Body":"The current corert version got the same problems like in https://github.com/dotnet/corert/issues/5096\r\n\r\nProbably caused by the Win32 resource implementation.","Url":"https://github.com/dotnet/corert/issues/7184","RelatedDescription":"Closed issue \"Can not open input file if spaces in assembly name (remake)\" (#7184)"},{"Id":"421907804","IsPullRequest":true,"CreatedAt":"2019-03-17T14:01:10","Actor":"MichalStrehovsky","Number":"7183","RawContent":null,"Title":"Add options to favor code size or code speed","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7183","RelatedDescription":"Closed or merged PR \"Add options to favor code size or code speed\" (#7183)"},{"Id":"421799813","IsPullRequest":true,"CreatedAt":"2019-03-17T10:06:49","Actor":"MichalStrehovsky","Number":"7177","RawContent":null,"Title":"Optimize method alignment","State":"closed","Body":"Method alignment of 16 is more optimal in terms of processor cache utilization. This number results in better raw performance in microbenchmarks and more stable microbenchmark results. It also matches the alignment choice made by e.g. the C++ compiler.\r\n\r\nAlso adding opt-out switch for use cases that favor code size to execution speed.","Url":"https://github.com/dotnet/corert/pull/7177","RelatedDescription":"Closed or merged PR \"Optimize method alignment\" (#7177)"},{"Id":"421873177","IsPullRequest":true,"CreatedAt":"2019-03-17T05:24:51","Actor":"Dotnet-GitSync-Bot","Number":"7181","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7181","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7181)"},{"Id":"421821154","IsPullRequest":true,"CreatedAt":"2019-03-16T15:47:49","Actor":"Dotnet-GitSync-Bot","Number":"7179","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Potapy4","Url":"https://github.com/dotnet/corert/pull/7179","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7179)"},{"Id":"421810328","IsPullRequest":true,"CreatedAt":"2019-03-16T14:02:35","Actor":"MichalStrehovsky","Number":"7178","RawContent":null,"Title":"Factor numeric constant parsing out of ParseConstantValue","State":"open","Body":"Salvages the usable part of #5455.\r\n\r\nAfter looking at the Enum code in CoreCLR, Enum APIs already only work on runtime types, so that pull request can be made simpler (no need for a `LowLevelEnumInfo`). I'll look into that one weekend.","Url":"https://github.com/dotnet/corert/pull/7178","RelatedDescription":"Open PR \"Factor numeric constant parsing out of ParseConstantValue\" (#7178)"},{"Id":"421688625","IsPullRequest":true,"CreatedAt":"2019-03-16T03:58:51","Actor":"jkotas","Number":"7175","RawContent":null,"Title":"Delete exclusions of selected upstack framework binaries","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7175","RelatedDescription":"Closed or merged PR \"Delete exclusions of selected upstack framework binaries\" (#7175)"},{"Id":"421608237","IsPullRequest":true,"CreatedAt":"2019-03-15T17:19:46","Actor":"MichalStrehovsky","Number":"7174","RawContent":null,"Title":"Make NativeCallable method static","State":"closed","Body":"I was checking something for an internal customer when I noticed this. Well, the Project N compiler noticed it. We track validation on CoreRT side in #6893.","Url":"https://github.com/dotnet/corert/pull/7174","RelatedDescription":"Closed or merged PR \"Make NativeCallable method static\" (#7174)"},{"Id":"421560612","IsPullRequest":true,"CreatedAt":"2019-03-15T17:18:51","Actor":"MichalStrehovsky","Number":"7173","RawContent":null,"Title":"Don't root reflection-blocked types and methods","State":"closed","Body":"Noticed this while working on the previous fix.\r\n\r\nReflection scanner correctly detects reflection light up here:\r\n\r\nhttps://github.com/dotnet/corert/blob/132884042966b874c830c6012e7293d70148b933/src/System.Private.CoreLib/shared/System/Resources/ResourceReader.cs#L796-L799\r\n\r\nBut since `CreateUntypedDelegate` is reflection blocked, the generated method body is useless. This then shows up as a diff between scanning phase and compilation phase (usage based metadata analyzer won't pass this additional root to the compilation phase, because the method is not a reflection root - it's compiled, but not reflection visible).","Url":"https://github.com/dotnet/corert/pull/7173","RelatedDescription":"Closed or merged PR \"Don't root reflection-blocked types and methods\" (#7173)"},{"Id":"421550405","IsPullRequest":true,"CreatedAt":"2019-03-15T17:17:46","Actor":"MichalStrehovsky","Number":"7171","RawContent":null,"Title":"Fix protocol between UsageBased and AnalysisBased metadata managers","State":"closed","Body":"In #7042 I made it possible to express reflectability of something purely based on canonical code presence (so if e.g. `Foo<__Canon>..ctor` is compiled, `Foo<__Canon>..ctor` should be considered reflectable). Previously we only considered reflectability of concrete instantiations.\r\n\r\nThis was not reflected in the protocol between usage based and analysis based metadata managers: usage based manager was forgetting to tell the analysis based metadata manager about canonical bodies. As a result, places that relied on marking canonical bodies to make things reflectable (such as RD.XML and `--rootallapplicationassemblies`) were not getting that behavior when IL scanner was involved (optimized builds).\r\n\r\nFixes #7169.","Url":"https://github.com/dotnet/corert/pull/7171","RelatedDescription":"Closed or merged PR \"Fix protocol between UsageBased and AnalysisBased metadata managers\" (#7171)"},{"Id":"421294622","IsPullRequest":false,"CreatedAt":"2019-03-15T17:17:46","Actor":"jkotas","Number":"7169","RawContent":null,"Title":"SampleWebApi sample crashes with MissingRuntimeArtifactException","State":"closed","Body":"Repro:\r\n\r\n```\r\ncd Samples\\WebApi\r\ndotnet publish -c Release -r win-x64\r\nbin\\x64\\Release\\netcoreapp2.1\\win-x64\\publish\\SampleWebApi.exe\r\n```\r\n\r\nResult:\r\n```\r\nUnhandled Exception: EETypeRva:0x01468718(System.Reflection.MissingRuntimeArtifactException): This object cannot be invoked because it was metadata-enabled for browsing only: 'Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration<Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider>..ctor(Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory)' For more information, please visit  http://go.microsoft.com/fwlink/?LinkID=616867\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.get_UncachedMethodInvoker() + 0xa1\r\n   at System.Reflection.Runtime.MethodInfos.RuntimePlainConstructorInfo`1.Invoke(BindingFlags, Binder, Object[], CultureInfo) + 0x65\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x9e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite, ServiceProviderEngineScope) + 0x16\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite, ServiceProviderEngineScope) + 0x52\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite, ServiceProviderEngineScope) + 0x6b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite, ServiceProviderEngineScope) + 0x62\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type) + 0x5e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider) + 0x29\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build() + 0xd1\r\n```\r\n","Url":"https://github.com/dotnet/corert/issues/7169","RelatedDescription":"Closed issue \"SampleWebApi sample crashes with MissingRuntimeArtifactException\" (#7169)"},{"Id":"421558595","IsPullRequest":true,"CreatedAt":"2019-03-15T17:06:31","Actor":"Dotnet-GitSync-Bot","Number":"7172","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @justinvp","Url":"https://github.com/dotnet/corert/pull/7172","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7172)"},{"Id":"421220216","IsPullRequest":true,"CreatedAt":"2019-03-15T06:41:43","Actor":"nattress","Number":"7167","RawContent":null,"Title":"SuperIlc show compile failures","State":"closed","Body":"Couple small quality of life improvements:\r\n* After compiling all assemblies, write a list of compilation failures to the console\r\n* Emit ready-to-run images without the `.ni` part of the extension. This was initially useful so we knew which images were R2R but the CoreCLR loader expects the app host in a .NET Core app to be a .dll and Crossgen doesn't use `.ni` anymore.","Url":"https://github.com/dotnet/corert/pull/7167","RelatedDescription":"Closed or merged PR \"SuperIlc show compile failures\" (#7167)"},{"Id":"421340652","IsPullRequest":true,"CreatedAt":"2019-03-15T05:11:32","Actor":"Dotnet-GitSync-Bot","Number":"7170","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7170","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7170)"},{"Id":"421237691","IsPullRequest":false,"CreatedAt":"2019-03-14T20:49:15","Actor":"trylek","Number":"7168","RawContent":null,"Title":"CPAOT - re-enable vtable calls within CoreLib","State":"open","Body":"We need to temporarily disable the optimization regarding vtable calls in CoreLib because it requires either re-implementing the CoreCLR method table builder in CPAOT or persisting the vtable layouts in the R2R image. Neither technology exists today. We however need to re-enable this optimization before shipping because the optimization is important for CoreLib performance and needed for letting us publish R2R (instead of fragile NGEN) CoreLib.\r\n\r\nThe bit of code I am commenting out is in ceeInfoGetCallInfo in CorInfoImpl.ReadyToRun.cs around line 1070 under the conditional clause\r\n\r\n<code>\r\nif (MethodInSystemVersionBubble(callerMethod) && MethodInSystemVersionBubble(targetMethod))\r\n</code>","Url":"https://github.com/dotnet/corert/issues/7168","RelatedDescription":"Open issue \"CPAOT - re-enable vtable calls within CoreLib\" (#7168)"},{"Id":"420922804","IsPullRequest":true,"CreatedAt":"2019-03-14T14:16:52","Actor":"MichalStrehovsky","Number":"7166","RawContent":null,"Title":"Ignore scanner mismatch for ThrowPNSE helper","State":"closed","Body":"RyuJIT will inject calls to this from some HW intrinsics. This causes a compilation failure on checked builds of the compiler when optimizing. Not worth doing anything else for this at this point.","Url":"https://github.com/dotnet/corert/pull/7166","RelatedDescription":"Closed or merged PR \"Ignore scanner mismatch for ThrowPNSE helper\" (#7166)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"423513883","IsPullRequest":true,"CreatedAt":"2019-03-20T23:17:58","Actor":"peterhuene","Number":"3030","RawContent":null,"Title":"Prevent copy-local of runtime assets when targeting .NET Framework TFM.","State":"open","Body":"This commit prevents the copying of \"runtime\" assets (those that end up\r\nin the `runtimes/` sub-directory for resolution based on the RID at\r\nruntime) when building or publishing an application that targets a .NET\r\nFramework TFM.  Only the .NET Core runtime will resolve these assets\r\nbased on RID, so copying them for .NET Framework targeted applications\r\nis unnecessary.\r\n\r\nFixes dotnet/cli#10979.","Url":"https://github.com/dotnet/sdk/pull/3030","RelatedDescription":"Open PR \"Prevent copy-local of runtime assets when targeting .NET Framework TFM.\" (#3030)"},{"Id":"423465719","IsPullRequest":true,"CreatedAt":"2019-03-20T20:49:07","Actor":"livarcocc","Number":"3029","RawContent":null,"Title":"Update branding to 2.2.300","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3029","RelatedDescription":"Open PR \"Update branding to 2.2.300\" (#3029)"},{"Id":"423465302","IsPullRequest":true,"CreatedAt":"2019-03-20T20:48:01","Actor":"livarcocc","Number":"3028","RawContent":null,"Title":"Updating brandh to 2.1.700","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3028","RelatedDescription":"Open PR \"Updating brandh to 2.1.700\" (#3028)"},{"Id":"423048476","IsPullRequest":false,"CreatedAt":"2019-03-20T03:24:01","Actor":"davidwengier","Number":"3027","RawContent":null,"Title":"Duplicate \"_PackageReferenceToAdd\" item name breaks builds in VS","State":"open","Body":"Looks like this was introduced here:\r\nhttps://github.com/dotnet/sdk/commit/63d7cdec5041a9a97b002b1e81d3d1f835cad871\r\n\r\n`_PackageReferenceToAdd` is used twice.\r\nIt's used in: https://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.TargetingPackResolution.targets#L124\r\n\r\nand:\r\n\r\nhttps://github.com/dotnet/sdk/blob/f217153b0a1624a012041a4de375faf76ddfdc07/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L278\r\n\r\nThis is breaking the https://github.com/dotnet/project-system build in VS for me (we have duplicate nuget references)","Url":"https://github.com/dotnet/sdk/issues/3027","RelatedDescription":"Open issue \"Duplicate \"_PackageReferenceToAdd\" item name breaks builds in VS\" (#3027)"},{"Id":"422694774","IsPullRequest":true,"CreatedAt":"2019-03-19T12:03:51","Actor":"dotnet-maestro[bot]","Number":"3025","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19167.10\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19167.10\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190317.10\r\n- **Date Produced**: 3/18/2019 7:14 AM\r\n- **Commit**: de7be3ba62b92e5c48c36876c851a14f154444af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19167.10\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19167.10\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3025","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3025)"},{"Id":"422622666","IsPullRequest":false,"CreatedAt":"2019-03-19T09:25:27","Actor":"itn3000","Number":"3024","RawContent":null,"Title":"dotnet pack always failed on Ubuntu-18.04 with dotnet-sdk-3.0-preview3","State":"open","Body":"# Overview\r\n\r\n`dotnet pack` command always failed in Ubuntu-18.04 in dotnet-sdk-3.0-preview3.\r\nif dotnet-sdk-2.2 was used, it successed.\r\n\r\n# Environment\r\n\r\nplatform is ubuntu-18.04-x64(created from azure virtual machine)\r\n\r\nhere is my `dotnet --info`\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/itn/dotnet/sdk/3.0.100-preview3-010431/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview3-010431 [/home/itn/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [/home/itn/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [/home/itn/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n1. download dotnet-sdk-3.0-preview3 for linux-x64 from [SDK's download page](https://dotnet.microsoft.com/download/dotnet-core/3.0)\r\n2. extract archive to directory(`$HOME/dotnet`)\r\n3. add `$HOME/dotnet` to `$PATH` env\r\n4. run `dotnet new classlib --name test1`\r\n5. change directory to test1\r\n6. change `TargetFramework` to `netstandard2.1`\r\n6. run `dotnet pack`\r\n\r\n# Expected Behavior\r\n\r\ntest1.nupkg was created in `bin` directory.\r\n\r\n# Actual Behavior\r\n\r\nfailed to create nupkg with following error message.\r\n```\r\n/home/itn/dotnet/sdk/3.0.100-preview3-010431/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(199,5): error NU5019: File not found: '/home/itn/test1/bin/Debug/netstandard2.1/test1.dll'. [/home/itn/test1/test1.csproj]\r\n```\r\n`/home/itn/test1/bin/Debug/netstandard2.1/test1.dll` was created successfuly.\r\nI also tried to change `TargetFramework` to `netstandard2.0`, but did not success.\r\n","Url":"https://github.com/dotnet/sdk/issues/3024","RelatedDescription":"Open issue \"dotnet pack always failed on Ubuntu-18.04 with dotnet-sdk-3.0-preview3\" (#3024)"},{"Id":"421891895","IsPullRequest":false,"CreatedAt":"2019-03-17T07:33:13","Actor":"fernacolo","Number":"3023","RawContent":null,"Title":"PackAsTool true breaks debugging in Visual Studio when project is WPF","State":"open","Body":"I'm writing a tool application that uses WPF. It is intended to be called from console, but it shows graphics that cannot be represented by text, therefore I need WPF. It works fine in .NET Framework, but when migrating to .NET Core, when I add `<PackAsTool>true</PackAsTool>`, VS2019 cannot debug it anymore, saying:\r\n\r\n **The debug executable 'c:\\path\\to\\mytool.exe' specified in 'mytool' debug profile does not exist.**\r\n\r\nThis might be a VS2019 issue (as you are probably thinking right now 😉), however it seems that when `<PackAsTool>true</PackAsTool>` is added to the `.csproj`, it **changes the output type to dll**, even though the project says it's `WinExe`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n    <PackageType>DotnetTool</PackageType>\r\n    <PackAsTool>true</PackAsTool>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThis is bad because I cannot use the simplicity of `<PackAsTool>true</PackAsTool>` for publishing and installation (i.e. have an automatic shim installed to path).\r\n\r\nEven if I ignore the VS limitation, I'm also not sure if a DLL would work as expected for a WPF project. My understanding is that WPF requires `WinExe` for certain features.\r\n\r\nHere's my `dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.601 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nAnd this is my VS version:\r\n\r\n![image](https://user-images.githubusercontent.com/8313235/54486907-1b0c0e00-484c-11e9-80a9-9503c7136747.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/3023","RelatedDescription":"Open issue \"PackAsTool true breaks debugging in Visual Studio when project is WPF\" (#3023)"},{"Id":"422743497","IsPullRequest":false,"CreatedAt":"2019-03-15T23:16:35","Actor":"jzabroski","Number":"3026","RawContent":null,"Title":"<EnableDefaultItems>true</EnableDefaultItems> not configurable","State":"open","Body":"Example usage:\r\n\r\n```\r\n<PropertyGroup>\r\n    <EnableDefaultItems>true</EnableDefaultItems>\r\n    <DefaultItems>\r\n      <DefaultItem Type=\"Compile\" Include=\"**/*.cs\" Exclude=\"**/*.user; **/*.*proj; **/*.sln; **/*.vssscc\" />\r\n      <DefaultItem Type=\"EmbeddedResource\" Include=\"**/*.resx; **/*.sql\" Exclude=\"**/*.user; **/*.*proj; **/*.sln; **/*.vssscc\" />\r\n      <DefaultItem Type=\"None\" Include=\"**/*\" Exclude=\"**/*.user; **/*.*proj; **/*.sln; **/*.vssscc\" />\r\n    </DefaultItems>\r\n</PropertyGroup>\r\n```\r\n\r\nhttps://aka.ms/sdkimplicititems lays out the current behavior of `EnableDefaultItems` - I find it strange that the only way to auto-include resources if they have a resx extension.\r\n\r\nI love the ability to do the following, but it does not allow me to recursively include an entire folder as a certain Build Action (like EmbeddedResource):\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <EnableDefaultItems>false</EnableDefaultItems>\r\n</PropertyGroup>\r\n```\r\n\r\nI don't know about most developers, but I hate project file merge conflicts, and we have to deal with a lot of them in our SQL projects using FluentMigrator.  Our directory structure looks like:\r\n\r\n```\r\nDatabase.csproj\r\n \\_ Schema\r\n    \\_ Functions\r\n    \\_ Security\r\n    \\_ Stored Procedures\r\n    \\_ Triggers\r\n    \\_ Types\r\n    \\_ Views\r\n```\r\n\r\nIdeally, I want the ability to say \"any item in this folder tree is an EmbeddedResource\".  I realize you can [use wildcards](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items?view=vs-2015#BKMK_Wildcards) like `<EmbeddedResource Include=\"Schema/**/*.sql\" />` but the user story doesn't work well - adding new SQL files includes them as Content, etc.  Here is a link to a StackOverflow question where someone else opines on the same pain in a different context of RazorTemplate engine: https://stackoverflow.com/questions/27839645/automatically-add-files-as-embedded\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3026","RelatedDescription":"Open issue \"<EnableDefaultItems>true</EnableDefaultItems> not configurable\" (#3026)"},{"Id":"420462297","IsPullRequest":true,"CreatedAt":"2019-03-15T20:24:11","Actor":"dotnet-maestro[bot]","Number":"3020","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19162.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19162.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3020","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3020)"},{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-15T01:00:20","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"421179324","IsPullRequest":true,"CreatedAt":"2019-03-14T23:24:43","Actor":"johnbeisner","Number":"3022","RawContent":null,"Title":"Picking up the latest changes from the BuildPerformanceTestAssets repo","State":"closed","Body":"Reference: https://github.com/dotnet/BuildPerformanceTestAssets/pull/5\r\n\r\n@jorive","Url":"https://github.com/dotnet/sdk/pull/3022","RelatedDescription":"Closed or merged PR \"Picking up the latest changes from the BuildPerformanceTestAssets repo\" (#3022)"},{"Id":"420786755","IsPullRequest":true,"CreatedAt":"2019-03-14T23:09:17","Actor":"peterhuene","Number":"3021","RawContent":null,"Title":"Remove duplicates items from resolved publish assets.","State":"closed","Body":"When `CopyLocalLockFileAssemblies` was true, `ReferenceCopyLocalPaths`\r\ncontained the set of `RuntimePackAsset` items.\r\n\r\nWhen resolving assets to copy local for publish, the `RuntimePackAsset` items\r\nwere added twice: once explicitly and again via `ReferenceCopyLocalPaths`.\r\n\r\nThis commit fixes this by only adding to the resolved copy local assets for\r\npublish when `CopyLocalLockFileAssemblies` is false.\r\n\r\nFixes #3007.","Url":"https://github.com/dotnet/sdk/pull/3021","RelatedDescription":"Closed or merged PR \"Remove duplicates items from resolved publish assets.\" (#3021)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-14T23:09:16","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"closed","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Closed issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"419948212","IsPullRequest":true,"CreatedAt":"2019-03-13T12:00:14","Actor":"dotnet-maestro[bot]","Number":"3018","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19161.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19161.14\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3018","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3018)"},{"Id":"420065077","IsPullRequest":true,"CreatedAt":"2019-03-12T23:01:18","Actor":"dsplaisted","Number":"3019","RawContent":null,"Title":"Don't set \"platform library\" for .NET Core 3.0 and higher","State":"closed","Body":"Don't try to exclude files from the platform library on .NET Core 3.0 and higher, which uses runtime and targeting packs instead\r\n\r\nFixes #3004\r\n\r\nTo help verify whether this is safe, I looked at the places where `MicrosoftNETPlatformLibrary` is used:\r\n\r\n- It's used by the `GenerateDepsFile`, `GenerateRuntimeConfigurationFiles`, and `ResolveCopyLocalAssets` tasks.  These all simply pass it to `LockFileExtensions.CreateProjectContext`.  In that method, it's used as part of the check to determine if the app is framework dependent:\r\n    ```C#\r\n    bool isFrameworkDependent = (platformLibrary != null || runtimeFrameworks?.Any() == true) &&\r\n        (!isSelfContained || string.IsNullOrEmpty(lockFileTarget.RuntimeIdentifier));\r\n    ```\r\n    Note that for .NET Core 3.0 and higher, the `ResolveFrameworkReferences` should add `RuntimeFramework` items, so the `isFrameworkDependent` calculation should still work.\r\n- In the created `ProjectContext`, the `GetRuntimeLibraries` method excludes assets from the platform library for framework dependent apps.\r\n- The `GenerateRuntimeConfigurationFiles` task also uses the platform library from the `ProjectContext` in order to write the runtimeconfig file, but only if there aren't any `RuntimeFrameworks`.\r\n- The `ResolvePackageAssets` task excludes assets from the platform library in `GetPlatformPackageExclusions`.  (It also excludes assets from libraries matching names of `RuntimeFrameworks`, which I believe we should now remove, as those assets will come from runtime packs and won't be in the assets file anyway now).\r\n- The `_RestoreCrossgen` and `PrepforRestoreForComposeStore` use the platform library name.  These are both part of support for `dotnet store`, which we are [considering dropping](https://github.com/dotnet/sdk/issues/2914), and which will need a lot of work in any case if we want it to work when targeting .NET Core 3","Url":"https://github.com/dotnet/sdk/pull/3019","RelatedDescription":"Closed or merged PR \"Don't set \"platform library\" for .NET Core 3.0 and higher\" (#3019)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-12T23:01:18","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"closed","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Closed issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"419043286","IsPullRequest":false,"CreatedAt":"2019-03-11T15:36:04","Actor":"saxenark","Number":"3014","RawContent":null,"Title":"Installing JRE in microsoft/dotnet:sdk container","State":"closed","Body":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n\r\nI am using Windows Server 2016 1607 with Docker basic EE\r\n\r\nThanks,\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Closed issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014)"},{"Id":"419249712","IsPullRequest":true,"CreatedAt":"2019-03-11T13:32:19","Actor":"dotnet-maestro[bot]","Number":"3017","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3017","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3017)"},{"Id":"419177642","IsPullRequest":true,"CreatedAt":"2019-03-10T13:16:08","Actor":"dotnet-maestro[bot]","Number":"3016","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19159.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3016)"},{"Id":"419069291","IsPullRequest":true,"CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Number":"3015","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3015)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-08T14:43:34","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.23\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1107676822957744128","CreatedAt":"2019-03-18T16:15:08+00:00","UserScreenname":"dotnet","Text":"Got a suggested topic or guest for a .NET Community Standup? \n\nLet us know!\n\nhttps://t.co/STWml56tti","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1106559820415406080","CreatedAt":"2019-03-15T14:16:34+00:00","UserScreenname":"dotnet","Text":".NET Core Container Images now Published to Microsoft Container Registry https://t.co/025dCayCnx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":87,"FavoriteCount":53,"RawContent":null},{"Id":"1106511609768357889","CreatedAt":"2019-03-15T11:05:00+00:00","UserScreenname":"dotnet","Text":"Did you know you could build video games with .NET? \n\nCheck out this episode of #OnDotNet where \n@BrianPeek &amp;… https://t.co/g6DSHnfV18","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":20,"RawContent":null},{"Id":"1105555943285288961","CreatedAt":"2019-03-12T19:47:31+00:00","UserScreenname":"dotnet","Text":"Tune in to the @VisualStudio channel on Thursday for a virtual workshop for Windows Application Developers\n\nMore de… https://t.co/6IsLRLIz6N","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-03-21T05:30:31.1918679Z","RunDurationInMilliseconds":9212}