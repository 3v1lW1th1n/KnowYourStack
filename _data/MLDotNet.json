{"Data":{"GitHub":{"Issues":[{"Id":"396746235","IsPullRequest":true,"CreatedAt":"2019-01-08T04:27:50","Actor":"shauheen","Number":"2067","RawContent":null,"Title":"Update release for 0.9","State":"open","Body":"This updates the release branch for 0.9","Url":"https://github.com/dotnet/machinelearning/pull/2067","RelatedDescription":"Open PR \"Update release for 0.9\" (#2067)"},{"Id":"396682069","IsPullRequest":true,"CreatedAt":"2019-01-08T04:10:42","Actor":"shauheen","Number":"2061","RawContent":null,"Title":"Add release notes for ML.NET 0.9","State":"closed","Body":"This adds release notes for 0.9","Url":"https://github.com/dotnet/machinelearning/pull/2061","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.9\" (#2061)"},{"Id":"396657997","IsPullRequest":true,"CreatedAt":"2019-01-08T02:40:15","Actor":"wschin","Number":"2060","RawContent":null,"Title":"Remove ISchema in GroupTransform","State":"closed","Body":"Another ISchema implementation is going to leave. This PR is part of #1501.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2060","RelatedDescription":"Closed or merged PR \"Remove ISchema in GroupTransform\" (#2060)"},{"Id":"396696988","IsPullRequest":true,"CreatedAt":"2019-01-08T01:31:28","Actor":"yaeldekel","Number":"2065","RawContent":null,"Title":"Change CheckSamePipeline method from private to internal","State":"closed","Body":"Related to #2036. Missed one method that is needed in the internal repo.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2065","RelatedDescription":"Closed or merged PR \"Change CheckSamePipeline method from private to internal\" (#2065)"},{"Id":"396712891","IsPullRequest":true,"CreatedAt":"2019-01-08T01:17:29","Actor":"wschin","Number":"2066","RawContent":null,"Title":"Remove ISchema in UngroupTransform","State":"open","Body":"Remove ISchema in UngroupTransform. It's a part of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2066","RelatedDescription":"Open PR \"Remove ISchema in UngroupTransform\" (#2066)"},{"Id":"396691593","IsPullRequest":false,"CreatedAt":"2019-01-07T23:33:02","Actor":"TomFinley","Number":"2064","RawContent":null,"Title":"Estimator arguments should take output column name as first parameter, any inputs as subsequent parameters","State":"open","Body":"So, a somewhat embarrassing blunder to report... not quite sure how to say this.\r\n\r\nThroughout our codebase, for years we've ***always*** specified the name of the output column of a transform first, *then* the source(s).\r\n\r\nThat's good. But when estimators were introduced, somehow, nearly all of them were introduced in the reverse order: nearly all of them specify the inputs, *then* the outputs. This was probably an unconscious mistake, but it's one with fairly wide consequences, since that mistaken pattern was copied again and again as people did the estimator conversion work, to the point where most (not all!) estimators are now inconsistent with the whole rest of the codebase!\r\n\r\nThis should be corrected: it is at least inconsistent, and even if not inconsistent actually rather obnoxious practically because specifying the name of the output first has practical benefits, and makes a lot more sense, since if you're specifying a transformation the *most* important information someone will want to know is what you're calling your output!\r\n\r\n# The Story Until a Few Months Ago\r\n\r\nSo, throughout our codebase, for years, it has been our practice that when specifying a transform, you specify the name of the output, *then* you specify the name of the input(s) (if any). The reason for this is practical: the outputs are usually the result of a well defined single calculation (the application of the transform), whereas what is taken as an \"input\" to a transform can have various meanings since it is sometimes a multivariate function in its *inputs* more often than in its *outputs*. (E.g., concatenate can have multiple inputs, text can have multiple inputs, MI feature selection takes multiple heterogeneous inputs, but all produce single output columns.)\r\n\r\nThis was our practice certainly when this code was a tool, as we see in the command line help string, specifying name *then* source.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb46fdf405828134de9feebce74f21b4aacb15ed/src/Microsoft.ML.Data/Transforms/ColumnCopying.cs#L109-L110\r\n\r\nThis trend continued during our initial attempts at an API, as seen in this [early discussion in PR 405](https://github.com/dotnet/machinelearning/pull/405#discussion_r197980521), and as seen here:\r\n\r\nhttps://github.com/zeahmed/machinelearning/blob/16f7883933b56f8fd86077bf0fd262b24374e9d0/src/Microsoft.ML.Data/Transforms/ConvertTransform.cs#L116\r\n\r\nand here\r\n\r\nhttps://github.com/zeahmed/machinelearning/blob/16f7883933b56f8fd86077bf0fd262b24374e9d0/src/Microsoft.ML.Data/Transforms/DropSlotsTransform.cs#L226\r\n\r\nand numerous other places.\r\n\r\nThis is done for the practical reason that, when a transform produces an\r\noutput, what outputs it has are usually finite and well defined, whereas it can take multiple examles. The most conspicuous and widely used example of this is\r\nthe concatenation transform. Also included are things like the text featurizing transform, and other such things.\r\n\r\nSo far so good...\r\n\r\n# But Then...\r\n\r\nNow, somehow, through some mechanism that wasn't quite clear to me, as `IEstimator` implementations are being created, someone commits a fateful mistake of *reversing* inputs and outputs. Suddenly instead of being typically parameterized as `name` and a sometimes optional `source`, we instead have the required `input` and a sometimes optional `output`. What a disaster! And, I did not catch it in review. An early example:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c8de311476eb04dd4c8be1ad5b898487d66c9ef5/src/Microsoft.ML.Transforms/Text/TextTransform.cs#L278-L279\r\n\r\nThen, as people use this as a template for their own estimator conversion work, nearly *all* estimators copied this mistake, until practically all estimators had this problem. This includes much of the extensions.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d9270c9c42da70817e8a71e39a069d2339f6972d/src/Microsoft.ML.Data/Transforms/ExtensionsCatalog.cs#L30-L31\r\n\r\nNow then, the reason why I know any of this is that @stephentoub wrote and says, \"hey, how come you have your column concatenation operation specify output *then* inputs? That's different from everywhere else! I know it's less convenient, but it's better to be consistent.\"\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d9270c9c42da70817e8a71e39a069d2339f6972d/src/Microsoft.ML.Data/Transforms/ExtensionsCatalog.cs#L39\r\n\r\nAnd, after thinking that he must be very confused, since again, the pattern of name *then* source being very, very well defined throughout the codebase, I look and find **he is absolutely correct**, and a thoroughly massive blunder had somehow made it throughout the entire codebase under our very noses, including it must be said mine. :) :)\r\n\r\nSo, this is bad, but happily this was caught before v1. But, needless to say this must be fixed immediately.","Url":"https://github.com/dotnet/machinelearning/issues/2064","RelatedDescription":"Open issue \"Estimator arguments should take output column name as first parameter, any inputs as subsequent parameters\" (#2064)"},{"Id":"396685323","IsPullRequest":false,"CreatedAt":"2019-01-07T23:05:48","Actor":"montebhoover","Number":"2063","RawContent":null,"Title":"How should EntryPoint consumers register ML.NET assemblies?","State":"open","Body":"@eerhardt,  when we made HostEnvironmentBase and ComponentCatalog internal you mentioned that EntryPoint consumers like NimbusML or the GUI should be responsible for registering their ML.NET assemblies:\r\n\r\n>[2. ...\r\n>3. Other subsystems (like the GUI, command-line, Entry Points, and model loading) will be responsible for registering the components they require in the manner they require.\r\n>4. ...](https://github.com/dotnet/machinelearning/issues/208#issuecomment-422136134)\r\n\r\nCould you give me some pointers on how to best go about that?  Currently NimbusML registers assemblies using the ComponentCatalog from when it was public and we need to update this to ML.NET 0.9:  https://github.com/Microsoft/NimbusML/blob/e1004720ec0c252ba87f02c190c33739d9c00f20/src/DotNetBridge/Bridge.cs#L314\r\n\r\ncc: @TomFinley @yaeldekel @shmoradims \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2063","RelatedDescription":"Open issue \"How should EntryPoint consumers register ML.NET assemblies?\" (#2063)"},{"Id":"396684412","IsPullRequest":false,"CreatedAt":"2019-01-07T23:02:10","Actor":"shmoradims","Number":"2062","RawContent":null,"Title":"Fixing NimbusML GraphRunner","State":"open","Body":"ML.NET changes below are causing NimbusML GraphRunner to break. @TomFinley, @yaeldekel  could you please advise how to best fix these?\r\n\r\n1. [GraphRunner.GetPortDataKind](https://github.com/dotnet/machinelearning/blob/0c62e30b4d9eabb60322b2a3e75bc90e20007889/src/Microsoft.ML.EntryPoints/JsonUtils/GraphRunner.cs#L142) is made internal and inaccessible. [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L134). Also TlcModule.DataKind is made internal and inaccessible. \r\n\r\n2. Cannot load PredictorModel from file using constructor, because the class has become abstract. [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L170).\r\n\r\n3. PredictorModel.Save is made internal and inaccessible.  [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L85).\r\n\r\n4. Both 2 & 3 also apply to 2 TransformModel.\r\n\r\n5. #1958 (being discussed separately in that issue)","Url":"https://github.com/dotnet/machinelearning/issues/2062","RelatedDescription":"Open issue \"Fixing NimbusML GraphRunner\" (#2062)"},{"Id":"396294408","IsPullRequest":true,"CreatedAt":"2019-01-07T21:02:35","Actor":"ujjwaljha","Number":"2045","RawContent":null,"Title":"Open a pull request","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2045","RelatedDescription":"Closed or merged PR \"Open a pull request\" (#2045)"},{"Id":"396631608","IsPullRequest":true,"CreatedAt":"2019-01-07T20:09:48","Actor":"mareklinka","Number":"2059","RawContent":null,"Title":"[WIP] Make TextLoader.ArgumentsCore.Separator internal","State":"open","Body":"Since `TextLoader.ArgumentsCore.Separator` is only used for the command line interface, #2041 aims to make the field internal so that it doesn't show for API users. In order to facilitate this hiding, the `CmdParser.GetArgumentInfo` had to be updated to reflect on both public and private fields of the provided type.\r\n\r\nAt the same time, the API-serving `SeparatorChars` field was renamed to simply `Separators`.\r\n\r\nWork in progress. More fields might be turned `internal`, depending on discussion in the issue.\r\n\r\nFixes #2041","Url":"https://github.com/dotnet/machinelearning/pull/2059","RelatedDescription":"Open PR \"[WIP] Make TextLoader.ArgumentsCore.Separator internal\" (#2059)"},{"Id":"396611261","IsPullRequest":true,"CreatedAt":"2019-01-07T19:07:53","Actor":"najeeb-kazmi","Number":"2058","RawContent":null,"Title":"MLContext.Data.ReadFromBinary to accept IMultiStreamSource rather than Stream","State":"open","Body":"Fixes #2052 ","Url":"https://github.com/dotnet/machinelearning/pull/2058","RelatedDescription":"Open PR \"MLContext.Data.ReadFromBinary to accept IMultiStreamSource rather than Stream\" (#2058)"},{"Id":"396594596","IsPullRequest":true,"CreatedAt":"2019-01-07T18:16:12","Actor":"eerhardt","Number":"2057","RawContent":null,"Title":"Remove \"KeyType\" specific members on ColumnType.","State":"open","Body":"Remove the following members from ColumnType:\r\n\r\n- IsKey\r\n- KeyCount\r\n- KeyCountCore\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.","Url":"https://github.com/dotnet/machinelearning/pull/2057","RelatedDescription":"Open PR \"Remove \"KeyType\" specific members on ColumnType.\" (#2057)"},{"Id":"396587971","IsPullRequest":false,"CreatedAt":"2019-01-07T17:55:46","Actor":"jignparm","Number":"2056","RawContent":null,"Title":"Add Linux support for OnnxRuntime and OnnxTransform","State":"open","Body":"Require scoring support for Onnx models on Linux","Url":"https://github.com/dotnet/machinelearning/issues/2056","RelatedDescription":"Open issue \"Add Linux support for OnnxRuntime and OnnxTransform\" (#2056)"},{"Id":"396574013","IsPullRequest":false,"CreatedAt":"2019-01-07T17:14:52","Actor":"yaeldekel","Number":"2055","RawContent":null,"Title":"Run code in documentation regularly, to prevent breaks","State":"open","Body":"We need to figure out a way to run the code in the documentation, perhaps using a unit test.\r\nRelated to #2039 .\r\n@justinormont , in the issue above it is mentioned that you had already suggested some sort of solution to this, please feel free to reference the issue discussing this, or close this issue if it is a duplicate.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2055","RelatedDescription":"Open issue \"Run code in documentation regularly, to prevent breaks\" (#2055)"},{"Id":"396569525","IsPullRequest":false,"CreatedAt":"2019-01-07T17:02:34","Actor":"yaeldekel","Number":"2054","RawContent":null,"Title":"Update broken documentation code","State":"open","Body":"For example: https://github.com/dotnet/machinelearning/blob/80f5720438d544b1c9cf019a889479d8e67d5837/docs/code/SchemaComprehension.md.\r\n\r\nRelated to #2039 .","Url":"https://github.com/dotnet/machinelearning/issues/2054","RelatedDescription":"Open issue \"Update broken documentation code\" (#2054)"},{"Id":"396566993","IsPullRequest":false,"CreatedAt":"2019-01-07T16:56:16","Actor":"TomFinley","Number":"2053","RawContent":null,"Title":"Metrics results ToString overload?","State":"open","Body":"Consider this class, a result from a non-calibrated evaluation of binary classification.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e2f7075782764c9dab8f0a04013aaf8b9921d984/src/Microsoft.ML.Data/Evaluators/Metrics/BinaryClassificationMetrics.cs#L10\r\n\r\nIt might be nice if `ToString` was enabled on it, would it not? Maybe something that looks like a JSON serialized object (perhaps even exploiting the presence of Newtonsoft, since we must rely on it elsewhere?) would be appropriate? Who knows.\r\n\r\nNeedless to say, if we do it for one we should probably do it for all.","Url":"https://github.com/dotnet/machinelearning/issues/2053","RelatedDescription":"Open issue \"Metrics results ToString overload?\" (#2053)"},{"Id":"396564514","IsPullRequest":false,"CreatedAt":"2019-01-07T16:49:44","Actor":"TomFinley","Number":"2052","RawContent":null,"Title":"BinaryLoader created from IMultiStreamSource not Stream","State":"open","Body":"Whenever a binary loader is created, it can be crated from either a path or a stream. It is inappropriate for the public API to intimate that it is possible for the binary loader to be creatable from a stream. Even though it can be, this is a historical accident as the format (and its reader) predates `IMultiStreamSource`. Rather it, like all readers of this shape, should take `IMultiStreamSource`. That *internally* it operates over a single stream is an implementation detail that should not be visible externally.","Url":"https://github.com/dotnet/machinelearning/issues/2052","RelatedDescription":"Open issue \"BinaryLoader created from IMultiStreamSource not Stream\" (#2052)"},{"Id":"396548632","IsPullRequest":false,"CreatedAt":"2019-01-07T16:10:16","Actor":"TomFinley","Number":"2051","RawContent":null,"Title":"Removal of IHostEnvironment.ConcurrencyFactor and replace with ... ?","State":"open","Body":"Consider this property\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e2f7075782764c9dab8f0a04013aaf8b9921d984/src/Microsoft.ML.Core/Data/IHostEnvironment.cs#L43\r\n\r\nset for example via this `conc` parameter here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/e2f7075782764c9dab8f0a04013aaf8b9921d984/src/Microsoft.ML.Data/MLContext.cs#L76\r\n\r\nThat we should have some sort of indication hinting of degree of desired parallelism might have seemed useful at one point, but the practical reality has more closely resembled this: components where parallelism matters for performance or results invariably wind up having their own independent settings *anyway*, to such a degree even that the `IHostEnvironment.ConcurrencyFactory` property is for the most part totally ignored -- e.g., people set `conc = 1` thinking this will give them deterministic results, but of course things like SDCA and LR have separate multithreading behavior, which under default settings will not give deterministic results unless it is set.\r\n\r\nAs an integer property, and as originally intended, this property is, i'd claim, a failure, since everywhere it *could* matter we wind up inevitably ignoring and overriding its behavior anyway, and where we don't it's only because that is a situation where such control doesn't really matter.\r\n\r\nWe ought at least to remove this, I think. This must be done prior to v1.\r\n\r\nWhether post v1 we want to replace it with *anything* is another matter. Clearly at least for *test* purposes we want to have something to ensure consistent deterministic results, but is this really a user concern? (Definitely in other ML frameworks it is not a guarantee at all, so the idea of providing it and making it some sort of global configuration option seems questionable.)\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2051","RelatedDescription":"Open issue \"Removal of IHostEnvironment.ConcurrencyFactor and replace with ... ?\" (#2051)"},{"Id":"396536833","IsPullRequest":false,"CreatedAt":"2019-01-07T15:41:59","Actor":"TomFinley","Number":"2050","RawContent":null,"Title":"Gentle suggestion for missing columns?","State":"open","Body":"Often times, we have a method that takes some input with a default column names as inputs... e.g., `Label` and `Features` for trainers, `Label` and `Score` for evaluators, and so on, and so on. Indeed this was the subject of a discussion in issue #1524.\r\n\r\nIn these situations, it might be helpful if the error message, in addition to saying, \"we could not find column `Foo`\" might provide a gentle parenthetical suggestion along the lines of \"(Did you remember to actually produce that column, or did you perhaps name it something else?)\" might help get people thinking in the \"right\" direction.\r\n\r\nLess sure about this one.\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2050","RelatedDescription":"Open issue \"Gentle suggestion for missing columns?\" (#2050)"},{"Id":"396514974","IsPullRequest":true,"CreatedAt":"2019-01-07T14:47:04","Actor":"mareklinka","Number":"2049","RawContent":null,"Title":"Replace MLContext.Log Action<string> delegate with an event","State":"open","Body":"As proposed in #2042, this PR replaces the `Action<string> MLContext.Log` property with an event of the same name.\r\n\r\nI changed the invocation logic slightly as well to guard again possible multithreaded null references. I created a very simple smoke test to help with the refactoring but I don't see much added value in it so I can scrap it when requested.\r\n\r\nFixed #2042","Url":"https://github.com/dotnet/machinelearning/pull/2049","RelatedDescription":"Open PR \"Replace MLContext.Log Action<string> delegate with an event\" (#2049)"},{"Id":"396364293","IsPullRequest":true,"CreatedAt":"2019-01-07T06:30:39","Actor":"sfilipi","Number":"2048","RawContent":null,"Title":"WIP - Cleanup the statistics usage API","State":"open","Body":"Resolves #2010 by breaking down the existing LinearModelStatistics into two classes: ModelStatistics and LinearParameterModelStatistics. \r\n\r\nThe only reason why the two classes are hierarchical, is backwards compatibility, so we can load either one of them in the Statistics field that exists in [MulticlassLogisticRegressionModelParameters ](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/LogisticRegression/MulticlassLogisticRegression.cs#L374)and [LinearBinaryModelParameters](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/LinearModelParameters.cs#L410). \r\n\r\nIf we don't want to worry about backwards compatibility, ModelStatistics and LinearParameterModelStatstics, could each be a property in the LinearBinaryModelParameters, the artifact of training LR. As far as MLR, ModelStatistics would replace the current LinearModelStatistics. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2048","RelatedDescription":"Open PR \"WIP - Cleanup the statistics usage API\" (#2048)"},{"Id":"396235547","IsPullRequest":true,"CreatedAt":"2019-01-07T05:54:13","Actor":"codemzs","Number":"2043","RawContent":null,"Title":"End of an era - Delete Microsoft.ML.Legacy","State":"closed","Body":"Deletes Microsoft.ML.Legacy project and related references/files including BatchPredictionEngine.\r\n\r\nreplaces #1971","Url":"https://github.com/dotnet/machinelearning/pull/2043","RelatedDescription":"Closed or merged PR \"End of an era - Delete Microsoft.ML.Legacy\" (#2043)"},{"Id":"396326925","IsPullRequest":true,"CreatedAt":"2019-01-07T02:35:49","Actor":"abgoswam","Number":"2047","RawContent":null,"Title":"Modify API for advanced settings. (FastTree,  RandomForest)","State":"open","Body":"Towards #1798 . Also fixes #2019 \r\n\r\nThis PR addresses **only** the  FastTree and RandomForest algos.  For the other remaining components, we will have separate PRs.\r\n\r\nThe following 3 changes have been made:\r\n\r\n1. Two distinct constructors/extension methods, one for simple arguments and the other for advanced options\r\n2. Rename `Arguments` to `Options`\r\n3. Pass `Options`  objects as arguments instead of `Action` delegate\r\n4. Added Help text as the XML comment of `Options`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2047","RelatedDescription":"Open PR \"Modify API for advanced settings. (FastTree,  RandomForest)\" (#2047)"},{"Id":"396311883","IsPullRequest":false,"CreatedAt":"2019-01-07T00:34:06","Actor":"TomFinley","Number":"2046","RawContent":null,"Title":"TextLoader Arguments/ArgumentsCore classes","State":"open","Body":"Consider this class, the settings object for `TextLoader`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L382\r\n\r\nThis descends from this class.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L337\r\n\r\nWhy establish this class relationship? Well, because we want to distinguish between arguments that are \"core\" vs. not, and so that should be retained when we save the \"header\" of the text file, vs. those that might vary from iteration to iteration.\r\n\r\nThis class is used in two places for this purpose, in two places exactly.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1193-L1195\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1230-L1236\r\n\r\nBack when these classes were written and meant to support a command line and GUI tool only, it was acceptable to use class relationships for this purpsoe -- we did not expose this class to the users via an API. Now that we do expose it through an API, this little \"trick\" is no longer acceptable and causes confusion. There are only three \"special\" non-core arguments to account for, surely we can handle their presence through some mechanism other than this odd pollution of our type hierarchy (which is visible to users necessarily), and instead just handle it in the code for the saving/loading of the header itself. (That is, the load/save code could just account for the three arguments directly, instead of working in this strange way through the command line processor.)\r\n\r\nThe end result of this should be there should be only one class, `Arguments`, containing everything that is now in these two classes. It is also essential that the arguments presently occurring *only* in the `Arguments` class at present be excluded from the header and header parsing code.\r\n\r\nThere are several ways we could imagine doing this.\r\n\r\n1. The most obvious is to just special case this code in the `TextLoader` code itself.\r\n\r\n2. Another possibility is we add another attribute to the command line processing code itself, to capture those arguments that are meant to capture purely runtime and not behavioral considerations. Indeed, this happens in other contexts: those components that benefit from GPU acceleration might, naturally, have the GPU device ID as a configuration parameter, but if we were to ask this component to describe its configuration, behaviorally we might want it to *exclude* that configuration, since that is not portable from one computer or platform to another. (Which is the purpose of the current arrangement.) Rather than special casing this, as suggested above, we could have another (internal!!) attribute to flag such arguments as these.\r\n\r\nI give two options because O am not too particular as to how. I might favor 1 until we gain more experience in scenario 2 so as to justify a more general solution. Though, perhaps we have already reached that point, since I know scenario 2 that I have described has already come up, though in situations less central and important than the text loader.\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2046","RelatedDescription":"Open issue \"TextLoader Arguments/ArgumentsCore classes\" (#2046)"},{"Id":"396290933","IsPullRequest":false,"CreatedAt":"2019-01-06T20:21:57","Actor":"TomFinley","Number":"2044","RawContent":null,"Title":"Improve TrainerEstimatorBase exception messages for types","State":"open","Body":"Consider this error message:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/Training/TrainerEstimatorBase.cs#L98-L99\r\n\r\nThis is quite a charming message. Most of the time (not always, perhaps) a trainer expects a known size vector of float. What if the user feeds in something else? They get this, and are told that it is \"not compatible.\" It is absolutely true. That's not compatible. They try something else, if it doesn't happen to be exactly right, they get the same error message. Not compatible. So, while absolutely true, it sort of reminds me of this game:\r\n\r\n![Calvin and Hobbes \"Nope guess again\"](https://i.pinimg.com/736x/c0/f3/32/c0f33288f377a621cca764d375b09092.jpg)\r\n\r\nThis error message is in the `TrainerEstimatorBase`. Which is to say, nearly all trainers (except specialized trainers) will check the features column through this, which means that a user's likelihood of seeing this message is fairly high.\r\n\r\nConsider the following far more helpful example. Note that we even have a convenience function for standard reporting and formatting of this type mismatch error, since it is so common!\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/Evaluators/MultiClassClassifierEvaluator.cs#L82-L83\r\n\r\nOf course, it may be that there are plenty of places that we are not being less descriptive with types than we should be, but since trainers (and especially the base class!) will be used by nearly everyone, we might identify this as deserving special prioritization.\r\n\r\nWe should probably change `TrainerEstimatorBase` so that it or its subclasses use these more descriptive helpers, throughout the type checks. Ideally we'd also scour the codebase for typical checks of this form to make sure they are likewise descriptive.\r\n\r\nThat is at least what we should do, but, in a *super* ideal world, we might be able to go one step further and even provide advice on *what* should be done to get it into the required form (that is, be not just descriptive, but prescriptive, to borrow a phrase from @stephentoub), but how to do that is unclear to me. (The best thing I can think of is, we, by which I mean a data scientist, probably ought to write a web article on typical strategies for featurization, and why it's important to give it some thought, but that's certainly not something you want to put in an exception message. Though it might be a nice thing to *link* from the exception, if possible.)\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2044","RelatedDescription":"Open issue \"Improve TrainerEstimatorBase exception messages for types\" (#2044)"},{"Id":"396233233","IsPullRequest":false,"CreatedAt":"2019-01-06T06:43:15","Actor":"TomFinley","Number":"2042","RawContent":null,"Title":"MLContext.Log to become event?","State":"open","Body":"Consider this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/faffd179c961f120ec4e6babb06bbfb2cca6a6ea/src/Microsoft.ML.Data/MLContext.cs#L64\r\n\r\nIf that were instead an event, we would gain some benefits, specifically, some measure of protection again line X registering some logging, then line X+N in some way registering more logging that in some way undoes the original logging. (It is linguistically simpler to perform this \"wrong\" action in C#, so some guard against it may certainly be worthwhile.)\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2042","RelatedDescription":"Open issue \"MLContext.Log to become event?\" (#2042)"},{"Id":"396229213","IsPullRequest":false,"CreatedAt":"2019-01-06T05:18:40","Actor":"TomFinley","Number":"2041","RawContent":null,"Title":"TextLoader Separator/SeparatorChars","State":"open","Body":"Consider these two settings:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/496e185fdaf8969ffd856c65c42dd259368a242d/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L356-L360\r\n\r\nThey both exist for the same purpose but serve very different endpoints. One exists for the benefit of the command line, one for the benefit of the API. The API one (currently named `SeparatorChars`) should instead become `Separators` (plural pursuant to #2040). The other, currently named `Separator`, can remain named that, but should be invisible to API users since it exists purely for the benefit of the command line users. So, it should become `internal`.\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2041","RelatedDescription":"Open issue \"TextLoader Separator/SeparatorChars\" (#2041)"},{"Id":"396227082","IsPullRequest":false,"CreatedAt":"2019-01-06T04:31:28","Actor":"TomFinley","Number":"2040","RawContent":null,"Title":"Pluralize names of settings/arguments field values to plural when array","State":"open","Body":"Consider this content of concatentating transformer's `Argument`'s class:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/496e185fdaf8969ffd856c65c42dd259368a242d/src/Microsoft.ML.Data/Transforms/ColumnConcatenatingTransformer.cs#L116-L117\r\n\r\nOr this similar entry:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/496e185fdaf8969ffd856c65c42dd259368a242d/src/Microsoft.ML.Data/Transforms/ColumnConcatenatingTransformer.cs#L122-L123\r\n\r\nYou will notice something curious. This is an array of `Column[]`, yet is named `Column`, not `Columns`. The reason for this is somewhat odd: this settings object *originally* arose out of the need to provide a command line settable object back when this code was supporting a tool (and not an API!). And, the presence of an array indicate that this setting can be set multiple times... so one could say, for instance, `column=Foo column=Bar column=Biz`, and so wind up with this field populated with 3 items. In this setting the name \"column\" is the most natural name.\r\n\r\nNow we are trying to ship an API. What we did for the convenience of the command line now causes confusion for an API user, because they see an array (which can clearly handle multiple items), yet it has a singular name!\r\n\r\nFortunately, we can have our cake and eat it too: the `ArgumentAttribute` has something called `Name`, to allow the field name to be distinguished from the command line name. So, this:\r\n\r\n```csharp\r\n[Argument(ArgumentType.Multiple | ArgumentType.Required,\r\n    HelpText = \"New column definition(s) (optional form: name:srcs)\",\r\n    ShortName = \"col\", SortOrder = 1)]\r\npublic Column[] Column;\r\n```\r\n\r\ncould become this:\r\n\r\n```csharp\r\n[Argument(ArgumentType.Multiple | ArgumentType.Required,\r\n    HelpText = \"New column definition(s) (optional form: name:srcs)\",\r\n    Name = \"Column\", ShortName = \"col\", SortOrder = 1)]\r\npublic Column[] Columns;\r\n```\r\n\r\nand remain equivalent from the command line perspective, while not being confusing from the API perspective.\r\n\r\nAs a general rule any field with an `ArgumentAttribute` attribute on it that is also an array, we have often not made plural, for the aforementioned reasons. If it is singular:\r\n\r\n1. Make the field name itself plural and\r\n\r\n2. Retain the old singular command line as this `Name` parameter, so as to retain the benefit of why we named it this way in the first place.\r\n\r\nHowever, please, not thoughtlessly! Think about whether that change makes sense *in context*.\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/2040","RelatedDescription":"Open issue \"Pluralize names of settings/arguments field values to plural when array\" (#2040)"},{"Id":"396224973","IsPullRequest":false,"CreatedAt":"2019-01-06T03:45:02","Actor":"daholste","Number":"2039","RawContent":null,"Title":"Code in Documentation Not Working","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nNavigated to https://github.com/dotnet/machinelearning/blob/80f5720438d544b1c9cf019a889479d8e67d5837/docs/code/SchemaComprehension.md\r\n\r\nNoticed that the code uses Microsoft.ML.Data.TlcEnvironment that no longer exists\r\n\r\n@justinormont had a great suggestion -- perhaps wrap each documentation code sample in a unit test to prevent breakage?","Url":"https://github.com/dotnet/machinelearning/issues/2039","RelatedDescription":"Open issue \"Code in Documentation Not Working\" (#2039)"},{"Id":"396144986","IsPullRequest":false,"CreatedAt":"2019-01-05T08:14:48","Actor":"wschin","Number":"2038","RawContent":null,"Title":"ReplaceMissingValues' input argument type","State":"open","Body":"Most transforms use string as column names but in the function below, users need to create `ColumnInfo` first.\r\n```\r\n        public static MissingValueReplacingEstimator ReplaceMissingValues(this TransformsCatalog catalog, params MissingValueReplacingTransformer.ColumnInfo[] columns)\r\n```\r\nIs it appropriate to use\r\n```\r\n        public static MissingValueReplacingEstimator ReplaceMissingValues(this TransformsCatalog catalog, string[] inputs, string[] outputs)\r\n```\r\nor\r\n```\r\n        public static MissingValueReplacingEstimator ReplaceMissingValues(this TransformsCatalog catalog, params (string, string) inputOutputColumnPairs)\r\n```\r\n?","Url":"https://github.com/dotnet/machinelearning/issues/2038","RelatedDescription":"Open issue \"ReplaceMissingValues' input argument type\" (#2038)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-08T05:30:48.7832953Z","RunDurationInMilliseconds":982}