{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3734","PublishedOn":"2019-01-29T00:30:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are getting closer to the final version now! This release includes several accessibility, performance and reliability fixes across the major framework libraries. We will continue to stabilize this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/announcing-net-framework-4-8-early-access-build-3734/","RawContent":null},{"Title":"Help us plan the future of .NET and Big Data","PublishedOn":"2019-01-28T22:05:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We’re currently looking into how we can make .NET great for Big Data scenarios.    Please fill out the survey below and help shape how we can improve .NET for Big Data by sharing your experiences,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/help-us-plan-the-future-of-net-and-big-data/","RawContent":null},{"Title":"Debugging .NET Apps with Time Travel Debugging (TTD)","PublishedOn":"2019-01-25T19:32:21+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"When you are debugging an application, there are many tools and techniques you can use, like logs, memory dumps and Event Tracing for Windows (ETW). In this post, we will talk about Time Travel...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/25/debugging-net-apps-with-time-travel-debugging-ttd/","RawContent":null},{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":51,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2019 Preview 2","PublishedOn":"2019-01-24T15:30:31+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Another preview of Visual Studio 2019, another update on the cool stuff going into it! We&#8217;re pleased to announce some updates to the .NET Core tools for Visual Studio 2019. You can try these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-core-tooling-update-for-visual-studio-2019-preview-2/","RawContent":null},{"Title":".NET Framework January 22, 2018 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-01-22T22:22:08+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the January 22, 2018 .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Help us help you! What desktop apps are you bringing to .NET Core 3.0?","PublishedOn":"2019-01-17T16:00:26+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Windows Desktop applications are coming to .NET Core. The recently released .NET Core 3.0 Preview 1 version includes WinForms and WPF support. To make .NET Core 3.0 viable for as many of you as...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/17/help-us-help-you-what-desktop-apps-are-you-bringing-to-net-core-3-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8975377242","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:57:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22280","RelatedDescription":"Merged pull request \"Add AmbiguousImplementationException\" (#22280) at dotnet/coreclr","RelatedBody":"For dotnet/corefx#34124 (Exception to throw when interface dispatch is ambiguous)\r\n\r\nI based the new exception on `SerializationException`. I also added a constructor that takes parameters for string formatting for the proposed error string, and a default error string for use in the parameterless constructor. (I've never messed with resx files before, so hopefully I did this right.)\r\n\r\nI didn't try to compile it or anything, so someone else might want to test it before merging."},{"Id":"8975374805","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:56:33","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22281","RelatedDescription":"Merged pull request \"Do not cache error string in SerializationException\" (#22281) at dotnet/coreclr","RelatedBody":"`System.Runtime.Serialization.SerializationException` caches its error string. As discussed [here](https://github.com/dotnet/coreclr/pull/22280#discussion_r252049592), this is an outlier and does not offer any benefit."},{"Id":"8975367463","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:54:05","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22289","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#22289) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"8975248024","Type":"IssuesEvent","CreatedAt":"2019-01-30T04:13:24","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22077","RelatedDescription":"Closed issue \"CoreFX tests work 3x time slower on arm64 than on arm32.\" (#22077) at dotnet/coreclr","RelatedBody":"Out arm64 corefx jobs are usually failing with timeouts: [example](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_baseline_tst/23/console).\r\n\r\nIt happens because most tests work very slow (significantly slower than on arm32, on arm32 [the job takes ~3 hours](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_corefx_baseline_tst/51/), on arm64 fails with 6 hours timeout).\r\n\r\nI have tested it locally and got the same result, for example:\r\n```\r\narm32\r\nZ:\\_\\fxArm\\artifacts\\bin\\tests\\System.ComponentModel.Annotations.Tests\\netcoreapp-Windows_NT-Release-arm>call Z:\\_\\fxArm\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe xunit.console.dll System.ComponentModel.Annotations.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing -verbose -method System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse -parallel none\r\nxUnit.net Console Runner v2.4.1-pre.build.4059 (32-bit .NET Core 4.6.27308.0)\r\n  Discovering: System.ComponentModel.Annotations.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.ComponentModel.Annotations.Tests (found 1 of 351 test case)\r\n  Starting:    System.ComponentModel.Annotations.Tests (parallel test collections = off, max threads = 8)\r\n    System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse(type: typeof(decimal), min: \"1.0\", max: \"3.0\", value: \"9.0\") [STARTING]\r\n    System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse(type: typeof(decimal), min: \"1.0\", max: \"3.0\", value: \"9.0\") \r\n[FINISHED] Time: 1.6501653s\r\n```\r\nand\r\n```\r\narm64\r\nZ:\\_\\fx\\artifacts\\bin\\tests\\System.ComponentModel.Annotations.Tests\\netcoreapp-Windows_NT-Release-arm64>call %WORKSPACE%\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm64\\dotnet.exe xunit.console.dll System.ComponentModel.Annotations.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing -verbose -method System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse -parallel none\r\nxUnit.net Console Runner v2.4.1-pre.build.4059 (64-bit .NET Core 4.6.27308.0)\r\n  Discovering: System.ComponentModel.Annotations.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.ComponentModel.Annotations.Tests (found 1 of 351 test case)\r\n  Starting:    System.ComponentModel.Annotations.Tests (parallel test collections = off, max threads = 8)\r\n    System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse(type: typeof(decimal), min: \"1.0\", max: \"3.0\", value: \"9.0\") [STARTING]\r\n    System.ComponentModel.DataAnnotations.Tests.RangeAttributeTests.DotDecimalExtremaAndInvalidValuesInvariantParse(type: typeof(decimal), min: \"1.0\", max: \"3.0\", value: \"9.0\") \r\n[FINISHED] Time: 4.7277696s\r\n\r\n```\r\n\r\nso 1.6s against 4.7s and the result is stable (TieredCompilation=0, parallel=none, local runs were made on cobalt3)\r\n\r\nBased on JittedMethods I see that on arm64 we compile methods that we do not compile on arm32:\r\n50 of ILStubClass::IL_STUB_InstantiatingStub;\r\n18 of ILStubClass::IL_STUB_UnboxingStub;\r\n\r\nDoes this problem look familiar to anybody? @dotnet/jit-contrib @dotnet/arm64-contrib \r\n"},{"Id":"8974900198","Type":"IssuesEvent","CreatedAt":"2019-01-30T02:28:40","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22288","RelatedDescription":"Opened issue \"[arm64] Test Failed: CoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh \" (#22288) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/18/\r\n\r\n**Failed tests:**\r\nCoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh\r\nCoreMangLib_system._runtime_interopservices_maral_MaralSizeOf1_PSC_MaralSizeOf1_PSC_._runtime_interopservices_marshal_MarshalSizeOf1_PSC_MarshalSizeOf1_PSC_sh\r\nJIT_CodeGenBringUpTests._DblCall2_ro_DblCall2_ro_._DblCall2_ro_DblCall2_ro_sh\r\nJIT_CodeGenBringUpTests._DblAvg2_r_DblAvg2_r_._DblAvg2_r_DblAvg2_r_sh\r\nJIT_IL_Conformance._Old_Conformance_Base_dup4_dup4_._Old_Conformance_Base_dup4_dup4_sh\r\n\r\n**Log:**\r\n```\r\nCoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh [FAIL]\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/CoreMangLib/system/delegate/delegate/DelegateCombine1/DelegateCombine1.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/CoreMangLib.system/CoreMangLib.system.XUnitWrapper.cs(179,0): at CoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh()\r\n```"},{"Id":"8974835509","Type":"IssuesEvent","CreatedAt":"2019-01-30T02:11:41","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22287","RelatedDescription":"Opened issue \"[arm64] Test failed: JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh\" (#22287) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/22/\r\n\r\n**Failed tests:**\r\nJIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh\r\n\r\n**Log:**\r\n```\r\n      JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/JIT/IL_Conformance/Reports/JIT.IL_Conformance/Old/Base/nop/nop.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/JIT/IL_Conformance/Old/Base/nop/nop.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.IL_Conformance/JIT.IL_Conformance.XUnitWrapper.cs(3329,0): at JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh()\r\n```"},{"Id":"8974810018","Type":"IssuesEvent","CreatedAt":"2019-01-30T02:04:28","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22286","RelatedDescription":"Opened issue \"[arm64] Test failed: JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh\" (#22286) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/22/\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh\r\nJIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh\r\nJIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh\r\n\r\n**Log:**\r\n```\r\n      JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchI/AddArray/AddArray/AddArray.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchI/AddArray/AddArray/AddArray.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2909,0): at JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh()\r\n      JIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchF/NewtR/NewtR/NewtR.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchF/NewtR/NewtR/NewtR.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2209,0): at JIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh()\r\n      JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchI/AddArray2/AddArray2/AddArray2.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchI/AddArray2/AddArray2/AddArray2.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2979,0): at JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh()\r\n```"},{"Id":"8974777670","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:55:28","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22285","RelatedDescription":"Opened pull request \"[WIP] Replace multi-loaderallocator hash implementation in MethodDescBackpatchInfo\" (#22285) at dotnet/coreclr","RelatedBody":"The multi-loaderallocator table for MethodDescs as used by MethodDescBackpatchInfo is both complex on shutdown (which is very difficult to test), somewhat memory inefficient, and not generalized for use for other similar needs. This change builds a new hashtable that utilizes the GC to handle lifetime, but is still useable from the portions of our codebase which need to use this data structure (and thus can't be written in managed code) See the comment in CrossLoaderAllocatorHash.h for details on how it works. It is expected that this will be used by this, by work adding support to the typesystem to track derived types, and by upcoming profiler api work (which has driven much of the complex size saving work, as it is expected that data structure will be large)."},{"Id":"8974649506","Type":"IssuesEvent","CreatedAt":"2019-01-30T01:20:39","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/22284","RelatedDescription":"Opened issue \"[arm64\\windows]Tests failed in arm64_cross_checked_windows_nt_r2r_jitstressregs1_tst\" (#22284) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_jitstressregs1_tst/37/\r\n**Failed tests:**\r\nJIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sf1C_r_hfa_sf1C_r_._hfa_main_testC_hfa_sf1C_r_hfa_sf1C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sf0C_r_hfa_sf0C_r_._hfa_main_testC_hfa_sf0C_r_hfa_sf0C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sd0C_r_hfa_sd0C_r_._hfa_main_testC_hfa_sd0C_r_hfa_sd0C_r_cmd\r\n**Failed log:**\r\n```\r\nJIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\JIT.jit64\\hfa\\main\\testC\\hfa_sd1C_r\\hfa_sd1C_r.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_TIEREDCOMPILATION=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_JITSTRESSREGS=1 \r\n                1 file(s) copied.\r\n        \" C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root;C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r\\IL;C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r /in hfa_sd1C_r.org /out hfa_sd1C_r.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image hfa_sd1C_r.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" hfa_sd1C_r.exe \r\n        [Average HFA 01]\tPASSED\r\n        [Average HFA 02]\tPASSED\r\n        [Average HFA 03]\tPASSED\r\n        [Average HFA 05]\tPASSED\r\n        [Average HFA 08]\tPASSED\r\n        [Average HFA 11]\tPASSED\r\n        [Average HFA 19]\tPASSED\r\n        [Average3 HFA 01]\tPASSED\r\n        [Average3 HFA 02]\tPASSED\r\n        [Average3 HFA 03]\tPASSED\r\n        [Average3 HFA 05]\tPASSED\r\n        [Average3 HFA 08]\tPASSED\r\n        [Average3 HFA 11]\tPASSED\r\n        [Average3 HFA 19]\tPASSED\r\n        [Average5 HFA 01]\tPASSED\r\n        [Average5 HFA 02]\tPASSED\r\n        [Average5 HFA 03]\tPASSED\r\n        [Average5 HFA 05]\tPASSED\r\n        [Average5 HFA 08]\tPASSED\r\n        [Average5 HFA 11]\tPASSED\r\n        [Average5 HFA 19]\tPASSED\r\n        [Average8 HFA 01]\tPASSED\r\n        [Average8 HFA 02]\tPASSED\r\n        [Average8 HFA 03]\tPASSED\r\n        [Average8 HFA 05]\tPASSED\r\n        [Average8 HFA 08]\tPASSED\r\n        [Average8 HFA 11]\tPASSED\r\n        [Average8 HFA 19]\tPASSED\r\n        [Average11 HFA 01]\tPASSED\r\n        [Average11 HFA 02]\tPASSED\r\n        [Average11 HFA 03]\tPASSED\r\n        [Average11 HFA 05]\tPASSED\r\n        [Average11 HFA 08]\tPASSED\r\n        [Average11 HFA 11]\tPASSED\r\n        [Average11 HFA 19]\tPASSED\r\n        [Average19 HFA 01]\tPASSED\r\n        [Average19 HFA 02]\tPASSED\r\n        [Average19 HFA 03]\tPASSED\r\n        [Average19 HFA 05]\tPASSED\r\n        [Average19 HFA 08]\tPASSED\r\n        [Average19 HFA 11]\tPASSED\r\n        [Average19 HFA 19]\tPASSED\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r\\hfa_sd1C_r.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\JIT.jit64\\JIT.jit64.XUnitWrapper.cs(11239,0): at JIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd()\r\n```"},{"Id":"8974636997","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:17:19","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22261","RelatedDescription":"Merged pull request \"RunCrossGen in ReadyToRun tests, set TimeoutPerTest, set FailOnWorkItemFailure\" (#22261) at dotnet/coreclr","RelatedBody":"1. For ReadyToRun tests in AzDO set RunCrossGen=true during Helix test running\r\n2. Set __TestTimeout and introduce TimeoutPerTestInMinutes for test jobs\r\n3. Set FailOnWorkItemFailure - fail the AzDO step on Helix work item \"catastrophic failure\"\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8975245025","Type":"IssuesEvent","CreatedAt":"2019-01-30T04:12:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10671","RelatedDescription":"Closed issue \"`dotnet new` returns exit code of 0 when no framework is specified.\" (#10671) at dotnet/cli","RelatedBody":"This is similar to [#6569 ](https://github.com/dotnet/templating/issues/1640) but this occurs also with no framework specified, not sure if it should be the same issue.\r\n\r\n## Steps to reproduce\r\n`dotnet new && echo ok`\r\n\r\n## Expected  behavior\r\nexit value to be returned (in this test, no OK should be echoed)\r\n\r\n## Actual behavior\r\nExit code `0` is returned:\r\n```\r\n❯ dotnet new && echo ok\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n...\r\n\r\nok\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400\r\n Commit:    8642e60a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.400/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"8975107963","Type":"IssuesEvent","CreatedAt":"2019-01-30T03:28:42","Actor":"jakerenzella","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10671","RelatedDescription":"Opened issue \"`dotnet new` returns exit code of 0 when no framework is specified.\" (#10671) at dotnet/cli","RelatedBody":"This is similar to [#6569 ](https://github.com/dotnet/templating/issues/1640) but this occurs also with no framework specified, not sure if it should be the same issue.\r\n\r\n## Steps to reproduce\r\n`dotnet new && echo ok`\r\n\r\n## Expected  behavior\r\nexit value to be returned (in this test, no OK should be echoed)\r\n\r\n## Actual behavior\r\nExit code `0` is returned:\r\n```\r\n❯ dotnet new && echo ok\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n...\r\n\r\nok\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400\r\n Commit:    8642e60a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.400/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"8974354140","Type":"PullRequestEvent","CreatedAt":"2019-01-30T00:01:35","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10670","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to master\" (#10670) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8966283216","Type":"PullRequestEvent","CreatedAt":"2019-01-28T22:28:28","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Merged pull request \"Add build status badge to Repo home page\" (#1062) at dotnet/standard","RelatedBody":"CC @danmosemsft @terrajobst @safern @ViktorHofer "},{"Id":"8965842112","Type":"IssuesEvent","CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Opened issue \"Create shims for new netstandard2.1 assemblies\" (#1063) at dotnet/standard","RelatedBody":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst "},{"Id":"8965523304","Type":"PullRequestEvent","CreatedAt":"2019-01-28T20:14:56","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Opened pull request \"Add build status badge to Repo home page\" (#1062) at dotnet/standard","RelatedBody":"CC @danmosemsft @terrajobst @safern "},{"Id":"8957863647","Type":"IssuesEvent","CreatedAt":"2019-01-27T08:57:07","Actor":"ModestasK","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1061","RelatedDescription":"Opened issue \"Timer class issue on ARM (Raspbian/ubuntu stretch)\" (#1061) at dotnet/standard","RelatedBody":"Setup:\r\n\r\n**RaspberyPi 3**\r\n- Distributor ID:\tRaspbian\r\n- Description:\tRaspbian GNU/Linux 9.4 (stretch)\r\n- Release:\t9.4\r\n- Codename:\tstretch\r\n\r\n**DotNet**\r\n\r\n- Host (useful for support):\r\nVersion: 2.1.5\r\nCommit:  290303f510\r\n\r\n- .NET Core SDKs installed:\r\nNo SDKs were found.\r\n\r\n- .NET Core runtimes installed:\r\nMicrosoft.AspNetCore.All 2.1.5 [/opt/dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.5 [/opt/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.5 [/opt/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n**SourceCode**\r\n\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n      Timer runTimer = new Timer(\r\n           (object state) => { Console.WriteLine(\"Hello\"); },\r\n           null,\r\n           TimeSpan.Zero,\r\n           TimeSpan.FromMinutes(1));\r\n\r\n       while (true)\r\n       {\r\n           Thread.Sleep(5000);\r\n       }\r\n}\r\n```\r\n\r\n**Expected behaviour:** \"_Hello_\" should be printed into console every minute (which is actually the case on Ubuntu/Windows)\r\n\r\n**Actual behaviour:** prints \"_Hello_\" only once and timer is never invoked again. This is what happens on Raspberry.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8975367981","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:54:15","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/34943","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert,coreclr\" (#34943) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8975343060","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:45:33","Actor":"pakrym","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/33772","RelatedDescription":"Closed pull request \"Improve the back pressure deadlock error\" (#33772) at dotnet/corefx","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/30894\r\n\r\nI'm not a fan of the new message either. Any ideas to phrase it better?"},{"Id":"8975070594","Type":"IssuesEvent","CreatedAt":"2019-01-30T03:17:42","Actor":"Akaion","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34942","RelatedDescription":"Opened issue \"Proposal - Changes to the way Windows process modules are found\" (#34942) at dotnet/corefx","RelatedBody":"There's currently an issue with the way Windows process modules are found where If you attempt to get the modules loaded into an x86 process from an x64 program you are only presented with Ntdll.dll + the Wow64 dll's, which aren't the only modules loaded. \r\n\r\nThe current method that is being used is EnumProcessModules from psapi.dll - Whilst I don't know what this function is doing internally I'm guessing it's only querying the x64 PEB (if the process is running under Wow64) and therefore only returning the x64 dll's that are loaded in the process.\r\n\r\nSomething like this could be used to get a full list of modules (both x86 and x64) loaded in a process which you get then use the BaseAddress / ModuleHandle to get the rest of the information you need like is done in the ProcessManger.Win32 class.\r\n\r\n```csharp\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern IntPtr CreateToolhelp32Snapshot(SnapshotFlags flags, uint processId);\r\n\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern bool Module32First(IntPtr snapshotHandle, IntPtr moduleEntry);\r\n        \r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern bool Module32Next(IntPtr snapshotHandle, IntPtr moduleEntry);\r\n\r\n[Flags]\r\ninternal enum SnapshotFlags\r\n{\r\n    Module = 0x08,\r\n    Module32 = 0x010\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\ninternal struct ModuleEntry\r\n{\r\n    internal uint Size;\r\n\r\n    private readonly uint ModuleId;\r\n    private readonly uint ProcessId;\r\n\r\n    private readonly uint UnusedValue1;\r\n    private readonly uint UnusedValue2;\r\n\r\n    internal IntPtr BaseAddress;\r\n\r\n    private readonly uint BaseSize;\r\n\r\n    private readonly IntPtr ModuleHandle;\r\n            \r\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]\r\n    internal readonly string Module;\r\n            \r\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\r\n    internal readonly string ExePath;\r\n}\r\n\r\ninternal static IntPtr StructureToPointer<TStructure>(TStructure structure)\r\n{\r\n    var structureSize = Marshal.SizeOf(typeof(TStructure));\r\n\r\n    // Allocate memory to store the structure\r\n            \r\n    var pointer = Marshal.AllocHGlobal(structureSize);\r\n            \r\n    // Store the structure in the allocated memory\r\n            \r\n    Marshal.StructureToPtr(structure, pointer, true);\r\n\r\n    return pointer;\r\n}\r\n\r\ninternal static TStructure PointerToStructure<TStructure>(IntPtr address)\r\n{\r\n    // Read the structure from memory at the address\r\n            \r\n    var structure = (TStructure) Marshal.PtrToStructure(address, typeof(TStructure));\r\n\r\n    return structure;\r\n} \r\n\r\ninternal static IEnumerable<ModuleEntry> GetProcessModules(int processId)\r\n{\r\n    var processModules = new List<ModuleEntry>();\r\n            \r\n    // Create a tool help snapshot\r\n            \r\n    var snapshotHandle = Native.CreateToolhelp32Snapshot(SnapshotFlags.Module | SnapshotFlags.Module32, (uint) processId);\r\n            \r\n    // Initialize a module entry struct\r\n            \r\n    var moduleEntrySize = Marshal.SizeOf(typeof(ModuleEntry));\r\n            \r\n    var moduleEntry = new ModuleEntry { Size = (uint) moduleEntrySize};\r\n            \r\n    // Store the module entry struct in a buffer\r\n            \r\n    var moduleEntryBuffer = StructureToPointer(moduleEntry);\r\n            \r\n    // Get the first module of the process and store it in the buffer\r\n            \r\n    if (!Module32First(snapshotHandle, moduleEntryBuffer))\r\n    {\r\n        return processModules;\r\n    }\r\n            \r\n    // Get the first module entry structure from the buffer\r\n            \r\n    moduleEntry = PointerToStructure<ModuleEntry>(moduleEntryBuffer);\r\n            \r\n    processModules.Add(moduleEntry);\r\n            \r\n    // Get the rest of the modules in the process\r\n            \r\n    while (Module32Next(snapshotHandle, moduleEntryBuffer))\r\n    {\r\n        // Get the module entry structure from the buffer\r\n                \r\n        moduleEntry = PointerToStructure<ModuleEntry>(moduleEntryBuffer);\r\n                \r\n        processModules.Add(moduleEntry);\r\n    }\r\n            \r\n    return processModules;\r\n}\r\n```\r\n\r\nAnother option could be to get an instance of the PEB / PEB's (if the process is runnning under Wow64) and then loop through the LdrDataTable entries if Snapshots were not the best option."},{"Id":"8975059786","Type":"PullRequestEvent","CreatedAt":"2019-01-30T03:14:31","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34934","RelatedDescription":"Merged pull request \"add instrumentation for intermittent DNS failures\" (#34934) at dotnet/corefx","RelatedBody":"per discussion in #34187, this PR adds new exception so we can track if retry would make improvements for TryAgain error cases.  "},{"Id":"8974988515","Type":"IssuesEvent","CreatedAt":"2019-01-30T02:54:10","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34935","RelatedDescription":"Closed issue \"JsonDocument.Empty\" (#34935) at dotnet/corefx","RelatedBody":"Consider adding a readonly property/field with an empty JsonDocument, or a friendly way to create an empty document.\r\n\r\nCurrently you need to do this - `JsonDocument.Parse(string.Empty)` - https://github.com/aspnet/AspNetCore/pull/7105/files#diff-4561b022ab7f492d2dc25af071e9c74eR36\r\n\r\n@bartonjs @ahsonkhan"},{"Id":"8974839580","Type":"PullRequestEvent","CreatedAt":"2019-01-30T02:12:50","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34911","RelatedDescription":"Merged pull request \"Change helix queues for package testing to be RS4\" (#34911) at dotnet/corefx","RelatedBody":"RS2 is too old and since we only use it for package testing machines go idle really often that it slows by 20-30 mins the test execution.\r\n\r\ncc: @ericstj "},{"Id":"8974817850","Type":"PullRequestEvent","CreatedAt":"2019-01-30T02:06:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/34917","RelatedDescription":"Closed pull request \"[NO MERGE] BitOps analysis CoreFX (WIP)\" (#34917) at dotnet/corefx","RelatedBody":"Update call sites for https://github.com/dotnet/coreclr/pull/22225\r\n\r\n\r\nNote that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.\r\n\r\ncc @tannergooding "},{"Id":"8974811522","Type":"PullRequestEvent","CreatedAt":"2019-01-30T02:04:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34939","RelatedDescription":"Merged pull request \"Update area owners for System.Data.SqlClient and System.Data\" (#34939) at dotnet/corefx","RelatedBody":"Update issue-guide for area owners. \r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8975387045","Type":"PullRequestEvent","CreatedAt":"2019-01-30T05:00:45","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32943","RelatedDescription":"Opened pull request \"Small amounts of cleanup\" (#32943) at dotnet/roslyn","RelatedBody":""},{"Id":"8975325110","Type":"IssuesEvent","CreatedAt":"2019-01-30T04:39:28","Actor":"KexyBiscuit","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32942","RelatedDescription":"Opened issue \"Fix IDE0058 on lambda expression results in unexpected behavior\" (#32942) at dotnet/roslyn","RelatedBody":"**Version Used**: 3.0.19.6832 (231aeb8b)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. The following code is common in EF Core migrations.\r\n\r\n```\r\n_ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => table.PrimaryKey(\"PK_\", x => x.Id));\r\n                                      ^^^\r\n```\r\n\r\n2. Fix IDE0058 on code highlighted.\r\n\r\n**Expected Behavior**:\r\n\r\nDiscard is added at correct position.\r\n\r\n```\r\n_ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => _ = table.PrimaryKey(\"PK_\", x => x.Id));\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nDiscard is added at wrong position.\r\n\r\n```\r\n_ = _ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => table.PrimaryKey(\"PK_\", x => x.Id));\r\n```\r\n\r\nAlso, if fix other IDE0058, then select fix all, which includes the one shown above, SyntaxEdiorBasedFixAllProvider will crash.\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.GetDeclarationKind(SyntaxNode declaration)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.AsNodeLike(SyntaxNode existingNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(<Unknown Parameters>)\r\n   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```"},{"Id":"8975312201","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:34:56","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32941","RelatedDescription":"Opened pull request \"Add feature to make applicable local functions static.\" (#32941) at dotnet/roslyn","RelatedBody":"Looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/51958546-430ef180-2405-11e9-92ea-d93019ffa403.png)\r\n\r\nTodo:\r\n- [ ] Tests\r\n- [ ] User facing option in Tools|Options"},{"Id":"8975018590","Type":"IssuesEvent","CreatedAt":"2019-01-30T03:02:26","Actor":"yyjdelete","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/32940","RelatedDescription":"Opened issue \"The focus of IntelliSence is not right in  vs2019preview2\" (#32940) at dotnet/roslyn","RelatedBody":"**Version Used**: The one in vs2019 preview2\r\n\r\nThe testcase used to be crash in vs2019preview1(#31263), and works well in vs2017 15.9.5.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Type `string.Equals(\"\",\"\",StringComparison.[cursor here, and an autocompleted char ')']`\r\n2. Press arrow up/down.\r\n\r\n**Expected Behavior**:\r\nSwitch between members of `StringComparison`, like it does in vs2017 15.9.5\r\n\r\n**Actual Behavior**:\r\nSwitch between the overload of method `string.Equals`."},{"Id":"8974778788","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:55:47","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32939","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#32939) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8974778617","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:55:44","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32938","RelatedDescription":"Opened pull request \"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps\" (#32938) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps\ngit reset --hard upstream/dev16.0-preview3-vs-deps\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8974777950","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:55:32","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32937","RelatedDescription":"Opened pull request \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32937) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8975368388","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:54:23","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6915","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6915) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8975354180","Type":"PullRequestEvent","CreatedAt":"2019-01-30T04:49:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6914","RelatedDescription":"Opened pull request \"Out of memory handling fixes\" (#6914) at dotnet/corert","RelatedBody":"Fixes #6912"},{"Id":"8974936357","Type":"PullRequestEvent","CreatedAt":"2019-01-30T02:39:16","Actor":"grant-d","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6911","RelatedDescription":"Closed pull request \"[NO MERGE] BitOps analysis CoreRT (WIP)\" (#6911) at dotnet/corert","RelatedBody":"Update call sites for https://github.com/dotnet/coreclr/pull/22225\r\n\r\n\r\nNote that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.\r\n\r\ncc @tannergooding "},{"Id":"8974437620","Type":"PullRequestEvent","CreatedAt":"2019-01-30T00:23:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6902","RelatedDescription":"Merged pull request \"[Interpreter] Arguments\" (#6902) at dotnet/corert","RelatedBody":"This PR adds support for the following opcodes:\r\n\r\n* `ldarg.*`\r\n* `starg.*`\r\n\r\nwhich allows methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static int Sum(int a, int b)\r\n{\r\n    return a + b;\r\n}\r\n```\r\n\r\nIt also updates `InterpreterCallInterceptor` to ensure a non-zero `RuntimeMethodHandle` is returned for non-primitive argument and local variable types, which is needed for interpreting methods like the following:\r\n\r\n```csharp\r\npublic static DateTime ForwardDateTime(DateTime d)\r\n{\r\n    return d;\r\n}\r\n\r\npublic static Exception ForwardException(Exception e)\r\n{\r\n    return e;\r\n}\r\n```\r\n"},{"Id":"8973656472","Type":"PullRequestEvent","CreatedAt":"2019-01-29T21:38:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6913","RelatedDescription":"Merged pull request \"Recover some of the size lost with AsyncMethodBuilder/Task unification\" (#6913) at dotnet/corert","RelatedBody":"When we unified the implementations of these across all of our runtimes, we lost all size optimizations people have been doing on the Project N side over the past six years.\r\n\r\nThis restores a bit of the loss. For one sample app with lots of async usage, this removes 2.1 MB of generic instantiations.\r\n\r\nThere is more we can do, but I can't spend time on that right now. These two things jumped out on me when I was looking at it back in December and were an easy fix I wanted to do for a while."},{"Id":"8972951782","Type":"PullRequestEvent","CreatedAt":"2019-01-29T19:40:12","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6913","RelatedDescription":"Opened pull request \"Recover some of the size lost with AsyncMethodBuilder/Task unification\" (#6913) at dotnet/corert","RelatedBody":"When we unified the implementations of these across all of our runtimes, we lost all size optimizations people have been doing on the Project N side over the past six years.\r\n\r\nThis restores a bit of the loss. For one sample app with lots of async usage, this removes 2.1 MB of generic instantiations.\r\n\r\nThere is more we can do, but I can't spend time on that right now. These two things jumped out on me when I was looking at it back in December and were an easy fix I wanted to do for a while."},{"Id":"8970670942","Type":"IssuesEvent","CreatedAt":"2019-01-29T14:13:39","Actor":"avalko","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6912","RelatedDescription":"Opened issue \"Uable to allocate an array larger than 2GB\" (#6912) at dotnet/corert","RelatedBody":"Code example:\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n    int s = int.MaxValue / 4;\r\n    Console.WriteLine($\"alloc ({s*4} bytes)\");\r\n    var arr = new int[s];\r\n    var r = new Random();\r\n    for (int i = 0; i < s; i++)\r\n    {\r\n        arr[i] = r.Next();\r\n    }\r\n\r\n    Console.WriteLine(\"complete\");\r\n    Console.WriteLine(\"avg = \" + arr.Average());\r\n}\r\n```\r\n\r\nOn CoreCLR everything works (output):\r\n```\r\nalloc (2147483644 bytes)\r\ncomplete\r\navg = 1073756900,39117\r\n```\r\n\r\nOn CoreRT the program print `alloc (2147483644 bytes)` and ends without exception. Just stops all done.\r\n\r\nOS: **win10**\r\nBuild command: `dotnet publish -r win-x64 -c release`"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8974630360","Type":"PullRequestEvent","CreatedAt":"2019-01-30T01:15:32","Actor":"zamont","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2886","RelatedDescription":"Opened pull request \"Add a new task FilterManagedAssemblies into Microsoft.NET.Build.Tasks\" (#2886) at dotnet/sdk","RelatedBody":"The FilterManagedAssemblies task takes in a list of files and a switch to\r\nrestrict the managed assemblies to IL ONLY and returns those that are\r\nmanaged assemblies and conditionally are IL ONLY."},{"Id":"8974355621","Type":"PullRequestEvent","CreatedAt":"2019-01-30T00:01:56","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2885","RelatedDescription":"Opened pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#2885) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"open","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Open PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"404513488","IsPullRequest":true,"CreatedAt":"2019-01-30T04:57:24","Actor":"SwooshyCueb","Number":"22280","RawContent":null,"Title":"Add AmbiguousImplementationException","State":"closed","Body":"For dotnet/corefx#34124 (Exception to throw when interface dispatch is ambiguous)\r\n\r\nI based the new exception on `SerializationException`. I also added a constructor that takes parameters for string formatting for the proposed error string, and a default error string for use in the parameterless constructor. (I've never messed with resx files before, so hopefully I did this right.)\r\n\r\nI didn't try to compile it or anything, so someone else might want to test it before merging.","Url":"https://github.com/dotnet/coreclr/pull/22280","RelatedDescription":"Closed or merged PR \"Add AmbiguousImplementationException\" (#22280)"},{"Id":"404527893","IsPullRequest":true,"CreatedAt":"2019-01-30T04:56:33","Actor":"SwooshyCueb","Number":"22281","RawContent":null,"Title":"Do not cache error string in SerializationException","State":"closed","Body":"`System.Runtime.Serialization.SerializationException` caches its error string. As discussed [here](https://github.com/dotnet/coreclr/pull/22280#discussion_r252049592), this is an outlier and does not offer any benefit.","Url":"https://github.com/dotnet/coreclr/pull/22281","RelatedDescription":"Closed or merged PR \"Do not cache error string in SerializationException\" (#22281)"},{"Id":"404601724","IsPullRequest":true,"CreatedAt":"2019-01-30T04:54:05","Actor":"Dotnet-GitSync-Bot","Number":"22289","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"open","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/22289","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert\" (#22289)"},{"Id":"404573667","IsPullRequest":false,"CreatedAt":"2019-01-30T02:28:40","Actor":"VincentBu","Number":"22288","RawContent":null,"Title":"[arm64] Test Failed: CoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh ","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/18/\r\n\r\n**Failed tests:**\r\nCoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh\r\nCoreMangLib_system._runtime_interopservices_maral_MaralSizeOf1_PSC_MaralSizeOf1_PSC_._runtime_interopservices_marshal_MarshalSizeOf1_PSC_MarshalSizeOf1_PSC_sh\r\nJIT_CodeGenBringUpTests._DblCall2_ro_DblCall2_ro_._DblCall2_ro_DblCall2_ro_sh\r\nJIT_CodeGenBringUpTests._DblAvg2_r_DblAvg2_r_._DblAvg2_r_DblAvg2_r_sh\r\nJIT_IL_Conformance._Old_Conformance_Base_dup4_dup4_._Old_Conformance_Base_dup4_dup4_sh\r\n\r\n**Log:**\r\n```\r\nCoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh [FAIL]\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs8_tst/bin/tests/Linux.arm64.Checked/CoreMangLib/system/delegate/delegate/DelegateCombine1/DelegateCombine1.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/CoreMangLib.system/CoreMangLib.system.XUnitWrapper.cs(179,0): at CoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22288","RelatedDescription":"Open issue \"[arm64] Test Failed: CoreMangLib_system._delegate_delegate_DelegateCombine1_DelegateCombine1_._delegate_delegate_DelegateCombine1_DelegateCombine1_sh \" (#22288)"},{"Id":"404570200","IsPullRequest":false,"CreatedAt":"2019-01-30T02:11:40","Actor":"VincentBu","Number":"22287","RawContent":null,"Title":"[arm64] Test failed: JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/22/\r\n\r\n**Failed tests:**\r\nJIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh\r\n\r\n**Log:**\r\n```\r\n      JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/JIT/IL_Conformance/Reports/JIT.IL_Conformance/Old/Base/nop/nop.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress2_tst/bin/tests/Linux.arm64.Checked/JIT/IL_Conformance/Old/Base/nop/nop.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.IL_Conformance/JIT.IL_Conformance.XUnitWrapper.cs(3329,0): at JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22287","RelatedDescription":"Open issue \"[arm64] Test failed: JIT_IL_Conformance._Old_Base_nop_nop_._Old_Base_nop_nop_sh\" (#22287)"},{"Id":"404568792","IsPullRequest":false,"CreatedAt":"2019-01-30T02:04:27","Actor":"VincentBu","Number":"22286","RawContent":null,"Title":"[arm64] Test failed: JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/22/\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh\r\nJIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh\r\nJIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh\r\n\r\n**Log:**\r\n```\r\n      JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchI/AddArray/AddArray/AddArray.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchI/AddArray/AddArray/AddArray.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2909,0): at JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh()\r\n      JIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchF/NewtR/NewtR/NewtR.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchF/NewtR/NewtR/NewtR.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2209,0): at JIT_Performance._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_._CodeQuality_Benchstones_BenchF_NewtR_NewtR_NewtR_sh()\r\n      JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh [FAIL]\r\n        /n/nReturn code:      137/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/Reports/JIT.Performance/CodeQuality/Benchstones/BenchI/AddArray2/AddArray2/AddArray2.output.txt/nRaw output:/nTest Harness Exitcode is : 137\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitminopts_tst/bin/tests/Linux.arm64.Checked/JIT/Performance/CodeQuality/Benchstones/BenchI/AddArray2/AddArray2/AddArray2.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs(2979,0): at JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_._CodeQuality_Benchstones_BenchI_AddArray2_AddArray2_AddArray2_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22286","RelatedDescription":"Open issue \"[arm64] Test failed: JIT_Performance._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_._CodeQuality_Benchstones_BenchI_AddArray_AddArray_AddArray_sh\" (#22286)"},{"Id":"404566791","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:27","Actor":"davidwrighton","Number":"22285","RawContent":null,"Title":"[WIP] Replace multi-loaderallocator hash implementation in MethodDescBackpatchInfo","State":"open","Body":"The multi-loaderallocator table for MethodDescs as used by MethodDescBackpatchInfo is both complex on shutdown (which is very difficult to test), somewhat memory inefficient, and not generalized for use for other similar needs. This change builds a new hashtable that utilizes the GC to handle lifetime, but is still useable from the portions of our codebase which need to use this data structure (and thus can't be written in managed code) See the comment in CrossLoaderAllocatorHash.h for details on how it works. It is expected that this will be used by this, by work adding support to the typesystem to track derived types, and by upcoming profiler api work (which has driven much of the complex size saving work, as it is expected that data structure will be large).","Url":"https://github.com/dotnet/coreclr/pull/22285","RelatedDescription":"Open PR \"[WIP] Replace multi-loaderallocator hash implementation in MethodDescBackpatchInfo\" (#22285)"},{"Id":"404559333","IsPullRequest":false,"CreatedAt":"2019-01-30T01:20:39","Actor":"AriNuer","Number":"22284","RawContent":null,"Title":"[arm64\\windows]Tests failed in arm64_cross_checked_windows_nt_r2r_jitstressregs1_tst","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_jitstressregs1_tst/37/\r\n**Failed tests:**\r\nJIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sf1C_r_hfa_sf1C_r_._hfa_main_testC_hfa_sf1C_r_hfa_sf1C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sf0C_r_hfa_sf0C_r_._hfa_main_testC_hfa_sf0C_r_hfa_sf0C_r_cmd\r\nJIT_jit64._hfa_main_testC_hfa_sd0C_r_hfa_sd0C_r_._hfa_main_testC_hfa_sd0C_r_hfa_sd0C_r_cmd\r\n**Failed log:**\r\n```\r\nJIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\JIT.jit64\\hfa\\main\\testC\\hfa_sd1C_r\\hfa_sd1C_r.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_TIEREDCOMPILATION=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r>set COMPLUS_JITSTRESSREGS=1 \r\n                1 file(s) copied.\r\n        \" C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root;C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r\\IL;C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r /in hfa_sd1C_r.org /out hfa_sd1C_r.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image hfa_sd1C_r.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" hfa_sd1C_r.exe \r\n        [Average HFA 01]\tPASSED\r\n        [Average HFA 02]\tPASSED\r\n        [Average HFA 03]\tPASSED\r\n        [Average HFA 05]\tPASSED\r\n        [Average HFA 08]\tPASSED\r\n        [Average HFA 11]\tPASSED\r\n        [Average HFA 19]\tPASSED\r\n        [Average3 HFA 01]\tPASSED\r\n        [Average3 HFA 02]\tPASSED\r\n        [Average3 HFA 03]\tPASSED\r\n        [Average3 HFA 05]\tPASSED\r\n        [Average3 HFA 08]\tPASSED\r\n        [Average3 HFA 11]\tPASSED\r\n        [Average3 HFA 19]\tPASSED\r\n        [Average5 HFA 01]\tPASSED\r\n        [Average5 HFA 02]\tPASSED\r\n        [Average5 HFA 03]\tPASSED\r\n        [Average5 HFA 05]\tPASSED\r\n        [Average5 HFA 08]\tPASSED\r\n        [Average5 HFA 11]\tPASSED\r\n        [Average5 HFA 19]\tPASSED\r\n        [Average8 HFA 01]\tPASSED\r\n        [Average8 HFA 02]\tPASSED\r\n        [Average8 HFA 03]\tPASSED\r\n        [Average8 HFA 05]\tPASSED\r\n        [Average8 HFA 08]\tPASSED\r\n        [Average8 HFA 11]\tPASSED\r\n        [Average8 HFA 19]\tPASSED\r\n        [Average11 HFA 01]\tPASSED\r\n        [Average11 HFA 02]\tPASSED\r\n        [Average11 HFA 03]\tPASSED\r\n        [Average11 HFA 05]\tPASSED\r\n        [Average11 HFA 08]\tPASSED\r\n        [Average11 HFA 11]\tPASSED\r\n        [Average11 HFA 19]\tPASSED\r\n        [Average19 HFA 01]\tPASSED\r\n        [Average19 HFA 02]\tPASSED\r\n        [Average19 HFA 03]\tPASSED\r\n        [Average19 HFA 05]\tPASSED\r\n        [Average19 HFA 08]\tPASSED\r\n        [Average19 HFA 11]\tPASSED\r\n        [Average19 HFA 19]\tPASSED\r\n        Expected: 100\r\n        Actual: 1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---bc4cc99d\\bin\\tests\\Windows_NT.arm64.Checked\\JIT\\jit64\\hfa\\main\\testC\\hfa_sd1C_r\\hfa_sd1C_r.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\JIT.jit64\\JIT.jit64.XUnitWrapper.cs(11239,0): at JIT_jit64._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_._hfa_main_testC_hfa_sd1C_r_hfa_sd1C_r_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22284","RelatedDescription":"Open issue \"[arm64\\windows]Tests failed in arm64_cross_checked_windows_nt_r2r_jitstressregs1_tst\" (#22284)"},{"Id":"404084994","IsPullRequest":true,"CreatedAt":"2019-01-30T01:17:19","Actor":"echesakovMSFT","Number":"22261","RawContent":null,"Title":"RunCrossGen in ReadyToRun tests, set TimeoutPerTest, set FailOnWorkItemFailure","State":"closed","Body":"1. For ReadyToRun tests in AzDO set RunCrossGen=true during Helix test running\r\n2. Set __TestTimeout and introduce TimeoutPerTestInMinutes for test jobs\r\n3. Set FailOnWorkItemFailure - fail the AzDO step on Helix work item \"catastrophic failure\"\r\n","Url":"https://github.com/dotnet/coreclr/pull/22261","RelatedDescription":"Closed or merged PR \"RunCrossGen in ReadyToRun tests, set TimeoutPerTest, set FailOnWorkItemFailure\" (#22261)"},{"Id":"404553868","IsPullRequest":true,"CreatedAt":"2019-01-30T00:56:31","Actor":"jkotas","Number":"22283","RawContent":null,"Title":"Delete workaround","State":"open","Body":"Fixes #13053","Url":"https://github.com/dotnet/coreclr/pull/22283","RelatedDescription":"Open PR \"Delete workaround\" (#22283)"},{"Id":"404188848","IsPullRequest":true,"CreatedAt":"2019-01-30T00:35:09","Actor":"marek-safar","Number":"22266","RawContent":null,"Title":"Move Marshal::StringTo* methods to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22266","RelatedDescription":"Closed or merged PR \"Move Marshal::StringTo* methods to shared partition\" (#22266)"},{"Id":"404502927","IsPullRequest":true,"CreatedAt":"2019-01-29T21:51:56","Actor":"davmason","Number":"22279","RawContent":null,"Title":"remove assert for dac code when a field's type is unloaded","State":"open","Body":"Fix for ##21283. I verified that after removing this assert you can take the snapshot and inspect it in VS.","Url":"https://github.com/dotnet/coreclr/pull/22279","RelatedDescription":"Open PR \"remove assert for dac code when a field's type is unloaded\" (#22279)"},{"Id":"404502844","IsPullRequest":false,"CreatedAt":"2019-01-29T21:51:44","Actor":"davmason","Number":"22278","RawContent":null,"Title":"Incomplete information is returned by the dbi for unloaded field types","State":"open","Body":"The types for fields are loaded lazily, so if you request information about the fields through the dbi or dac then we will return partial data.\r\n\r\nSee here, where we only populate id and fieldType if LookupFieldTypeHandle returns successfully. It won't if the field has never had a non-null value.\r\nhttps://github.com/dotnet/coreclr/blob/69c8421c1177675d4df855d7bb73b0a77b19c643/src/debug/daccess/dacdbiimpl.cpp#L6897-L6972","Url":"https://github.com/dotnet/coreclr/issues/22278","RelatedDescription":"Open issue \"Incomplete information is returned by the dbi for unloaded field types\" (#22278)"},{"Id":"404501535","IsPullRequest":true,"CreatedAt":"2019-01-29T21:48:00","Actor":"cshung","Number":"22277","RawContent":null,"Title":"Improving an assert in fgInsertInlineeBlocks","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22277","RelatedDescription":"Open PR \"Improving an assert in fgInsertInlineeBlocks\" (#22277)"},{"Id":"404152635","IsPullRequest":true,"CreatedAt":"2019-01-29T21:34:02","Actor":"tannergooding","Number":"22263","RawContent":null,"Title":"Fixing several of the HWIntrinsic SoftwareFallback functions to be captureless","State":"closed","Body":"This fixes several of the `SoftwareFallback` functions for the HWIntrinsic helper methods to not capture any variables from the enclosing scope.","Url":"https://github.com/dotnet/coreclr/pull/22263","RelatedDescription":"Closed or merged PR \"Fixing several of the HWIntrinsic SoftwareFallback functions to be captureless\" (#22263)"},{"Id":"404494745","IsPullRequest":false,"CreatedAt":"2019-01-29T21:29:09","Actor":"SteveL-MSFT","Number":"22276","RawContent":null,"Title":"Cross fails with exit code 139 against PowerShell Core 6 assembly System.Management.Automation.dll","State":"open","Body":"Attempting to port PowerShell Core 6 to .Net Core 3.0 as part of https://github.com/PowerShell/PowerShell/pull/8370.  Some assemblies get crossgen'd, but crossgen fails on System.Management.Automation.dll with exit code 139.  Using `/verbose` there is no additional information indicating the non-zero error code.  Seems to be succeeding on Windows, but fails on macOS and Linux.  Using 3.0.100-preview-010184","Url":"https://github.com/dotnet/coreclr/issues/22276","RelatedDescription":"Open issue \"Cross fails with exit code 139 against PowerShell Core 6 assembly System.Management.Automation.dll\" (#22276)"},{"Id":"404492029","IsPullRequest":true,"CreatedAt":"2019-01-29T21:21:41","Actor":"erozenfeld","Number":"22275","RawContent":null,"Title":"Remove GTF_ADDR_ONSTACK and IsVarAddr.","State":"open","Body":"IsVarAddr was checking GTF_ADDR_ONSTACK  to determine if\r\nthe GT_ADDR node is an address of a local. This change removes both\r\nGTF_ADDR_ONSTACK and  IsVarAddr and uses IsLocalAdrExpr instead.\r\nIsLocalAddrExpr uses opcodes to determine if GT_ADDR node is\r\na local address.\r\n\r\nGTF_ADDR_ONSTACK flag is ancient, added before 2002 so I couldn't find\r\nthe checkin that introduced it.\r\n\r\nI changed the assert to a check and an assignment since simplifications\r\ninside fgMorphArgs between\r\nhttps://github.com/dotnet/coreclr/blob/1a1e4c4d5a8030cb8d82a2e5b06c2ab357b92534/src/jit/morph.cpp#L3709\r\n(which causes https://github.com/dotnet/coreclr/blob/1a1e4c4d5a8030cb8d82a2e5b06c2ab357b92534/src/jit/morph.cpp#L3057)\r\nand\r\nhttps://github.com/dotnet/coreclr/blob/1a1e4c4d5a8030cb8d82a2e5b06c2ab357b92534/src/jit/morph.cpp#L3790\r\nmay result in more GT_ADDR nodes recognized by IsLocalAdrExpr.\r\n\r\nx86 and x64 pmi frameworks had no code diffs and some gcinfo reductions\r\n(15 methods with gcinfo diffs in x86).\r\n\r\nFixes #22190.","Url":"https://github.com/dotnet/coreclr/pull/22275","RelatedDescription":"Open PR \"Remove GTF_ADDR_ONSTACK and IsVarAddr.\" (#22275)"},{"Id":"404491079","IsPullRequest":true,"CreatedAt":"2019-01-29T21:19:09","Actor":"janvorli","Number":"22274","RawContent":null,"Title":"Fix unmanaged images caching for unloading","State":"open","Body":"The unmanaged images are cached in a central cache in AppDomain. That\r\ncache is not pruned when unloading an AssemblyLoadContext into which a\r\ncode that used the native image was loaded. That results in the images\r\nstaying loaded after the context is unloaded. That can be a problem in\r\ncase the image needs e.g. to be deleted from disk after the unload.\r\n\r\nThe fix is to move the cache to the LoaderAllocator and add call to\r\nFreeLibrary for all of the entries at the unload time. If there are unmanaged\r\nimages that are used by pinvoke in multiple contexts (including the default one),\r\nthey will end up in multiple caches. The OS refcounts on the HMODULEs will\r\nensure that they stay loaded in the process as long as they are needed by \r\nat least one of the contexts.","Url":"https://github.com/dotnet/coreclr/pull/22274","RelatedDescription":"Open PR \"Fix unmanaged images caching for unloading\" (#22274)"},{"Id":"404489261","IsPullRequest":true,"CreatedAt":"2019-01-29T21:14:17","Actor":"sdmaclea","Number":"22273","RawContent":null,"Title":"WIP Initial implementatation of ALC enhancements","State":"open","Body":"Make constructors public\r\nAdd name constructors\r\nAdd Name property\r\nAdd Assemblies property\r\nAdd Contexts property\r\nOverride ToString\r\nName Default and Assembly.Load(...) ALCs","Url":"https://github.com/dotnet/coreclr/pull/22273","RelatedDescription":"Open PR \"WIP Initial implementatation of ALC enhancements\" (#22273)"},{"Id":"404486856","IsPullRequest":true,"CreatedAt":"2019-01-29T21:07:42","Actor":"benaadams","Number":"22272","RawContent":null,"Title":"Use C#8","State":"open","Body":"Testing","Url":"https://github.com/dotnet/coreclr/pull/22272","RelatedDescription":"Open PR \"Use C#8\" (#22272)"},{"Id":"404460878","IsPullRequest":false,"CreatedAt":"2019-01-29T19:56:23","Actor":"BlackCentipede","Number":"22271","RawContent":null,"Title":"[Linux] Inconsistent behavior/description for exepath in coreclr_initialize","State":"open","Body":"In coreclr_initialize API described here: https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/inc/coreclrhost.h\r\n\r\nThe exepath parameter is extremely misleading on linux-x64 platform, if exepath is specified to absolute path to Managed Assembly binary file (dll file), the coreclr_create_delegate API will fail to detect/find that managed assembly. If exepath is specified to directory path that contains that Managed Assembly, then the coreclr_create_delegate invocation will succeed with correct parameters.\r\n\r\nCan we add snippet to resolve exepath parameter to directory path for Unix platform?","Url":"https://github.com/dotnet/coreclr/issues/22271","RelatedDescription":"Open issue \"[Linux] Inconsistent behavior/description for exepath in coreclr_initialize\" (#22271)"},{"Id":"404392778","IsPullRequest":false,"CreatedAt":"2019-01-29T17:22:08","Actor":"cspital","Number":"22269","RawContent":null,"Title":"dotnet quit unexpectedly -- ignore","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/issues/22269","RelatedDescription":"Closed issue \"dotnet quit unexpectedly -- ignore\" (#22269)"},{"Id":"404394363","IsPullRequest":false,"CreatedAt":"2019-01-29T17:07:33","Actor":"janvorli","Number":"22270","RawContent":null,"Title":"Assembly.Load executed in collectible context loads into default one","State":"open","Body":"When Assembly.Load is executed from a code running in a collectible AssemblyLoadContext, it loads the assembly into the default context instead of the current context. However, when the Assembly.Load is executed from a code running in a **non**-collectible AssemblyLoadContext, it loads the assembly correctly into the current context.\r\n\r\n@vitek-karas and I were looking at the code of `AssemblyNative::Load` and we've immediately spotted the cause. There is a condition like this:\r\n```C++\r\n        // Shared or collectible assemblies should not be used for the parent in the\r\n        // late-bound case.\r\n        if (pRefAssembly && (!pRefAssembly->IsCollectible()))\r\n        {\r\n            pParentAssembly= pRefAssembly->GetDomainAssembly();\r\n        }\r\n```\r\n\r\nIt is possible that the `!pRefAssembly->IsCollectible()` is obsolete or that it was supposed to cover reflection emitted collectible assemblies.","Url":"https://github.com/dotnet/coreclr/issues/22270","RelatedDescription":"Open issue \"Assembly.Load executed in collectible context loads into default one\" (#22270)"},{"Id":"404372686","IsPullRequest":false,"CreatedAt":"2019-01-29T16:22:09","Actor":"redknightlois","Number":"22268","RawContent":null,"Title":"[Intrinsic] CompareEqual does not use the memory source instruction","State":"open","Body":"I was trying to optimize `SequenceCompareTo` beyond the point where @benaadams pushed it and stumbled upon various JIT issues controlling the output. \r\n\r\nFrom this code a few are showcased.\r\n```csharp\r\nAvx2.CompareEqual(LoadVector256(ref first, (IntPtr)lengthAndOffset), LoadVector256(ref second, (IntPtr)lengthAndOffset))\r\n```\r\n\r\nIt generates:\r\n```asm\r\nmovsxd      rdi,esi      \r\nvmovupd     ymm0,ymmword ptr [r11+rdi]  # allocation of usable register should prevent the previous instruction\r\nmovsxd      rdi,esi      # useless move\r\nvmovupd     ymm1,ymmword ptr [r10+rdi]  \r\nvpcmpeqb    ymm0,ymm0,ymm1   \r\n```\r\n\r\nI doubt that the `movsxd` creates a false dependency, but it could use cpu registers which will impact the loop. Probably the worst setback is that is:\r\n\r\n```asm\r\nvmovupd     ymm1,ymmword ptr [r10+rdi]  \r\nvpcmpeqb    ymm0,ymm0,ymm1   \r\n```\r\n\r\nwhich could become instead:\r\n\r\n```asm\r\nvpcmpeqb    ymm0, ymm0, ymmword ptr [r10+rdi]  \r\n```\r\nusing the memory version instead we avoid a data dependency and also using extra physical registers. \r\n\r\nRemoving the movs and the compare encoding the code should look like:\r\n\r\n```asm\r\nmovsxd      rdi,esi   # outside the loop if really necessary\r\nLoop:\r\nvmovupd     ymm0,ymmword ptr [r11+rdi]\r\nvpcmpeqb    ymm0, ymm0, ymmword ptr [r10+rdi] \r\nvpmovmskb   edi,ymm0  \r\n...\r\nadd       rdi, -32\r\njna         Loop\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22268","RelatedDescription":"Open issue \"[Intrinsic] CompareEqual does not use the memory source instruction\" (#22268)"},{"Id":"404273211","IsPullRequest":false,"CreatedAt":"2019-01-29T12:43:05","Actor":"angelcolmenares","Number":"22267","RawContent":null,"Title":"valgrind reports definitely lost bytes","State":"open","Body":"on ubuntu18.04-x64 testing a simple console app \"hello word\"  with valgrind reports definitely lost bytes.\r\nIs this something to worry about?\r\n\r\nSO : ubuntu 18-04 x64\r\nTarget Framework : netcoreapp2.1\r\nProgram.cs:\r\n\r\n``\r\nusing System;\r\nnamespace valgrind_test\r\n{\r\n   class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n\r\n``\r\ndotnet publish -c Release -r ubuntu.18.04-x64 -o ubuntu\r\ncd ubuntu\r\nG_SLICE=always-malloc G_DEBUG=gc-friendly  valgrind -v --tool=memcheck --leak-check=full --show-leak-kinds=all --num-callers=40 --log-file=valgrind.log  ./valgrind-test\r\n\r\n\r\n==11681== LEAK SUMMARY:\r\n==11681==    definitely lost: 88 bytes in 1 blocks\r\n==11681==    indirectly lost: 164 bytes in 4 blocks\r\n==11681==      possibly lost: 5,769 bytes in 25 blocks\r\n==11681==    still reachable: 1,706,372 bytes in 1,787 blocks\r\n==11681==                       of which reachable via heuristic:\r\n==11681==                         stdstring          : 19,675 bytes in 38 blocks\r\n==11681==         suppressed: 0 bytes in 0 blocks\r\n==11681== Reachable blocks (those to which a pointer was found) are not shown.\r\n\r\n[valgrind.log](https://github.com/dotnet/coreclr/files/2807683/valgrind.log)\r\n","Url":"https://github.com/dotnet/coreclr/issues/22267","RelatedDescription":"Open issue \"valgrind reports definitely lost bytes\" (#22267)"},{"Id":"404171969","IsPullRequest":false,"CreatedAt":"2019-01-29T08:21:26","Actor":"AndyAyersMS","Number":"22265","RawContent":null,"Title":"sos bpmd doesn't seem to work on prejitted code ","State":"open","Body":"On Arm64 Linux, I can't get `bpmd` to break into the debugger when executing prejitted code. Once the process exits, `bpmd -list` shows the breakpoint twice, once listed with what is likely the method code address.\r\n```\r\n$ lldb-6.0 -- ./corerun ../../JIT/Regression/CLR-x86-JIT/v2.1/DDB/b163200/b163200/b163200.exe\r\n(lldb) target create \"./corerun\"\r\nCurrent executable set to './corerun' (aarch64).\r\n(lldb) settings set -- target.run-args  \"../../JIT/Regression/CLR-x86-JIT/v2.1/DDB/b163200/b163200/b163200.exe\"\r\n(lldb) process launch -s\r\nProcess 7611 launched: './corerun' (aarch64)\r\n(lldb) breakpoint set -n LoadLibraryExW\r\nBreakpoint 1: no locations (pending).\r\nWARNING:  Unable to resolve breakpoint to any actual locations.\r\n(lldb) plugin load libsosplugin.so\r\n(lldb) continue\r\nProcess 7611 resuming\r\n1 location added to breakpoint 1\r\nProcess 7611 stopped\r\n* thread #1, name = 'corerun', stop reason = breakpoint 1.1\r\n    frame #0: 0x0000ffffb7750964 libcoreclr.so`::LoadLibraryExW(lpLibFileName=u\"/home/andya/repos/coreclr/bin/tests/Linux.arm64.Checked/Tests/Core_Root/libclrjit.so\", hFile=0x0000000000000000, dwFlags=0) at module.cpp:214\r\n(lldb) sos bpmd System.Private.CoreLib.dll System.Globalization.TimeSpanFormat+FormatLiterals.InitInvariant\r\nAdding pending breakpoints...\r\n(lldb) continue\r\nProcess 7611 resuming\r\n1 location added to breakpoint 1\r\nProcess 7611 exited with status = 100 (0x00000064)\r\n(lldb) sos bpmd -list\r\nbpmd pending breakpoint list\r\n Breakpoint index - Location, ModuleID, Method Token\r\n1 - System.Private.CoreLib.dll!System.Globalization.TimeSpanFormat+FormatLiterals.InitInvariant+0, 0x0000000000000000, 0x00000000\r\n2 - System.Private.CoreLib.dll!System.Globalization.TimeSpanFormat+FormatLiterals.InitInvariant+0, 0x0000FFFF3D566020, 0x06004663\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22265","RelatedDescription":"Open issue \"sos bpmd doesn't seem to work on prejitted code \" (#22265)"},{"Id":"404160960","IsPullRequest":false,"CreatedAt":"2019-01-29T07:44:17","Actor":"v-haren","Number":"22264","RawContent":null,"Title":"error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.","State":"open","Body":"Failed in job: https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/perf_perflab_Windows_NT_x86_min_opt_ryujit/1161/\r\n\r\nFailed log: \r\nC:\\J\\w\\perf_perflab_---ce30617b\\tests\\src\\runincontext\\runincontext.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\nC:\\J\\w\\perf_perflab_---ce30617b\\tests\\dir.traversal.targets(25,5): error : (No message specified) [C:\\J\\w\\perf_perflab_---ce30617b\\tests\\src\\dirs.proj]\r\nC:\\J\\w\\perf_perflab_---ce30617b\\tests\\dir.traversal.targets(25,5): error : (No message specified) [C:\\J\\w\\perf_perflab_---ce30617b\\tests\\build.proj]\r\n    28 Warning(s)\r\n    3 Error(s)\r\n\r\nTime Elapsed 00:04:46.71\r\nBUILDTEST: Error: build failed. Refer to the build log files for details:\r\n    C:\\J\\w\\perf_perflab_---ce30617b\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.log\r\n    C:\\J\\w\\perf_perflab_---ce30617b\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.wrn\r\n    C:\\J\\w\\perf_perflab_---ce30617b\\bin\\Logs\\Tests_Managed_Windows_NT__x86__Release.err\r\nBuild step 'Execute Windows batch command' marked build as failure\r\n[Current build status] check if current [FAILURE] is worse or equals then [FAILURE] and better or equals then [SUCCESS]\r\nRun condition [Current build status] enabling perform for step [[Archive the artifacts]]\r\nArchiving artifacts\r\n[BFA] Scanning build for known causes...\r\n[BFA] Found failure cause(s):\r\n[BFA] MSBuild Error from category Build\r\n[BFA] Done. 3s\r\n[WS-CLEANUP] Deleting project workspace...Cannot delete workspace :remote file operation failed: C:\\J\\w\\perf_perflab_---ce30617b at hudson.remoting.Channel@7acc45e9:JNLP4-connect connection from 131.107.147.193/131.107.147.193:56964: java.io.IOException: Unable to delete 'C:\\J\\w\\perf_perflab_---ce30617b\\Tools\\net46\\roslyn\\tools\\Microsoft.DiaSymReader.Native.amd64.dll'. Tried 3 times (of a maximum of 3) waiting 0.1 sec between attempts.\r\nERROR: Step �Delete workspace when build is done� failed: Cannot delete workspace: remote file operation failed: C:\\J\\w\\perf_perflab_---ce30617b at hudson.remoting.Channel@7acc45e9:JNLP4-connect connection from 131.107.147.193/131.107.147.193:56964: java.io.IOException: Unable to delete 'C:\\J\\w\\perf_perflab_---ce30617b\\Tools\\net46\\roslyn\\tools\\Microsoft.DiaSymReader.Native.amd64.dll'. Tried 3 times (of a maximum of 3) waiting 0.1 sec between attempts.\r\nFinished: FAILURE","Url":"https://github.com/dotnet/coreclr/issues/22264","RelatedDescription":"Open issue \"error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\" (#22264)"},{"Id":"404086714","IsPullRequest":false,"CreatedAt":"2019-01-29T01:52:47","Actor":"VincentBu","Number":"22262","RawContent":null,"Title":"[x64] Test failed: System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_minopts/835/\r\n\r\n**Failed tests:**\r\nSystem.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal\r\n\r\n**Log:**\r\n```\r\n      System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal(testData: [FormatDecimal [-0, scale=0],default to '0')]) [FAIL]\r\n  [m[31;1m[m[37m      Assert.Equal() Failure\r\n  [m[37m                ↓ (pos 0)\r\n  [m[37m      Expected: 0\r\n  [m[37m      Actual:   -0\r\n  [m[37m                ↑ (pos 0)\r\n  [m[30;1m      Stack Trace:\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_minopts/_/fx/src/System.Memory/tests/ParsersAndFormatters/Formatter/ValidateFormatter.cs(84,0): at System.Buffers.Text.Tests.FormatterTests.ValidateFormatterHelper[T](FormatterTestData`1 testData)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_minopts/_/fx/src/System.Memory/tests/ParsersAndFormatters/Formatter/ValidateFormatter.cs(22,0): at System.Buffers.Text.Tests.FormatterTests.ValidateFormatter[T](FormatterTestData`1 testData)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_minopts/_/fx/src/System.Memory/tests/ParsersAndFormatters/Formatter/FormatterTests.cs(79,0): at System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal(FormatterTestData`1 testData)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22262","RelatedDescription":"Open issue \"[x64] Test failed: System.Buffers.Text.Tests.FormatterTests.TestFormatterDecimal\" (#22262)"},{"Id":"404082178","IsPullRequest":false,"CreatedAt":"2019-01-29T01:31:35","Actor":"echesakovMSFT","Number":"22260","RawContent":null,"Title":"[Linux/arm] Assert failure JIT_jit64._opt_cse_hugeexpr1_hugeexpr1_","State":"open","Body":"```\r\nAssert failure(PID 6363 [0x000018db], Thread: 6363 [0x18db]): SUCCEEDED(res)\r\n    File: /__w/1/s/src/unwinder/arm/unwinder_arm.cpp Line: 1540\r\n    Image: /ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Payload/corerun\r\n\r\n/ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Work/c0193bda-105f-4884-9a9c-c630889f0e71/Exec/opt/cse/hugeexpr1/hugeexpr1.sh: line 263:  6363 Aborted                 $_DebuggerFullPath \\\"$CORE_ROOT/corerun\\\" $ExePath $CLRTestExecutionArguments\r\n/n/nReturn code:      1/nRaw output file:      /ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Work/c0193bda-105f-4884-9a9c-c630889f0e71/Exec/Reports/JIT.jit64/opt/cse/hugeexpr1/hugeexpr1.output.txt/nRaw output:/nBEGIN EXECUTION\r\n/ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Payload/corerun hugeexpr1.exe\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\n/nTo run the test:/n> set CORE_ROOT=/ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Payload/n> /ssd/dotnetbuild/work/3d0eca72-694f-4d05-9c2c-b11731fe1cd3/Work/c0193bda-105f-4884-9a9c-c630889f0e71/Exec/opt/cse/hugeexpr1/hugeexpr1.sh/n\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\nFailed since https://dev.azure.com/dnceng/public/_build/results?buildId=81471\r\n\r\n@AndyAyersMS Can this be related to #22202?","Url":"https://github.com/dotnet/coreclr/issues/22260","RelatedDescription":"Open issue \"[Linux/arm] Assert failure JIT_jit64._opt_cse_hugeexpr1_hugeexpr1_\" (#22260)"},{"Id":"404082017","IsPullRequest":false,"CreatedAt":"2019-01-29T01:30:58","Actor":"sywhang","Number":"22259","RawContent":null,"Title":"Assertion failure on eventpipe","State":"open","Body":"Trying to get events via eventpipe using the dotnet-collect tool (https://github.com/dotnet/diagnostics/tree/master/src/Tools/dotnet-collect) while running debug version of the runtime fires this assert:\r\n```\r\nAssert failure(PID 2132 [0x00000854], Thread: 2132 [0x0854]): pContainingBuffer == GetHead()\r\n```\r\n\r\nRunning the app with runtime built in release mode fixes this but it should be looked at.","Url":"https://github.com/dotnet/coreclr/issues/22259","RelatedDescription":"Open issue \"Assertion failure on eventpipe\" (#22259)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"404585712","IsPullRequest":false,"CreatedAt":"2019-01-30T04:12:13","Actor":"jakerenzella","Number":"10671","RawContent":null,"Title":"`dotnet new` returns exit code of 0 when no framework is specified.","State":"closed","Body":"This is similar to [#6569 ](https://github.com/dotnet/templating/issues/1640) but this occurs also with no framework specified, not sure if it should be the same issue.\r\n\r\n## Steps to reproduce\r\n`dotnet new && echo ok`\r\n\r\n## Expected  behavior\r\nexit value to be returned (in this test, no OK should be echoed)\r\n\r\n## Actual behavior\r\nExit code `0` is returned:\r\n```\r\n❯ dotnet new && echo ok\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n...\r\n\r\nok\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400\r\n Commit:    8642e60a0f\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.400/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10671","RelatedDescription":"Closed issue \"`dotnet new` returns exit code of 0 when no framework is specified.\" (#10671)"},{"Id":"404541452","IsPullRequest":true,"CreatedAt":"2019-01-30T00:01:34","Actor":"dotnet-bot","Number":"10670","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10670","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#10670)"},{"Id":"403377660","IsPullRequest":true,"CreatedAt":"2019-01-29T21:30:26","Actor":"dotnet-bot","Number":"10657","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10657","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10657)"},{"Id":"404402146","IsPullRequest":false,"CreatedAt":"2019-01-29T17:25:28","Actor":"Cosebdd","Number":"10669","RawContent":null,"Title":"dotnet sln remove puts all nested not empty solution folders into root folder","State":"open","Body":"## Steps to reproduce\r\n1. Create blank solution\r\n2. Create solution folders and any file like this: \\NewFolder1\\NewFolder2\\text.txt\r\n3. Create any project inside the solution\r\n4. Remove project using the \"dotnet sln remove\" command\r\n\r\n## Expected  behavior\r\nFile is located in the \\NewFolder1\\NewFolder2 folder\r\n\r\n## Actual behavior\r\nFile is located in the \\NewFolder2 folder\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n","Url":"https://github.com/dotnet/cli/issues/10669","RelatedDescription":"Open issue \"dotnet sln remove puts all nested not empty solution folders into root folder\" (#10669)"},{"Id":"404318472","IsPullRequest":false,"CreatedAt":"2019-01-29T15:59:24","Actor":"theoldscarana","Number":"10667","RawContent":null,"Title":"dotnet test too many tcp connections time_wait","State":"closed","Body":"Hi,\r\n\r\nI have a problem with \"dotnet test\" in container linux.\r\n\r\nThis is the scenario:\r\n\r\n- Nunit Test Project \r\n- Framework .Net Core 2.1\r\n- In the nunit test project, I have a single test that execute a query on sql server \r\n- I use the docker image: \"microsoft/dotnet:2.1-sdk\"\r\n- Docker Engine Setting: 4 CPU, 2GB RAM\r\n\r\nIn the container I execute these steps:\r\n\r\n1- dotnet restore ./\r\n2- dotnet build ./ --no-restore \r\n3- dotnet publish ./ --no-build \r\n4- dotnet test ./NUnitTestCore.csproj -d diagnostic.txt --verbosity normal --no-build --logger:nunit;LogFilePath=../NTestResult.xml\r\n\r\nThe execution of step 4 is very slow and sometimes it doesn't end. \r\nI found many tcp connections in TIME_WAIT to sqlserver(port 1433) with netstat and the dotnet test diagnostic file reports many rows like this: \r\n\"TpTrace Verbose: 0 : 676, 7, 2019/01/29, 13:42:29.437, 18771123468400, vstest.console.dll, TcpClientExtensions.MessageLoopAsync: NotifyDataAvailable remoteEndPoint: 127.0.0.1:45445 localEndPoint: 127.0.0.1:39065\"\r\n\r\nExample netstat output:\r\nTCP    192.168.34.101:57084   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57085   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57086   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57087   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57088   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57089   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57090   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57091   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57092   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57093   x.x.x.x:1433    TIME_WAIT       0\r\nTCP    192.168.34.101:57094   x.x.x.x:1433    TIME_WAIT       0\r\n\r\n\r\nI tried also with MSTest and Xunit project with the same result.\r\n\r\nIf I use the image in windows container I don't encounter the problem.\r\n\r\nAnyone noticed this behavior?\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10667","RelatedDescription":"Closed issue \"dotnet test too many tcp connections time_wait\" (#10667)"},{"Id":"404359877","IsPullRequest":false,"CreatedAt":"2019-01-29T15:56:08","Actor":"gdillen","Number":"10668","RawContent":null,"Title":"dotnet add local package -> error: Value cannot be null. error: Parameter name: path1","State":"open","Body":"## Steps to reproduce\r\nI'm on macOS 10.14.2\r\ndotnet version 2.2.103\r\n\r\n1. Create a C# class library project\r\n2. Add package metadata to the project file\r\n- inside the existing <PropertyGroup> tag,\r\n`<PackageId>mylib</PackageId>\r\n<Version>1.0.0</Version>\r\n<Authors>MyName</Authors>\r\n<Company>MyCompany</Company>`\r\n\r\n3. Run the pack command\r\n$ dotnet pack\r\n4 $ nuget add mylib.nupkg -source /Users/myname/nuget_repo\r\n5 $ dotnet nuget push mylib.1.0.0.nupkg -s my-nuget\r\nIn my ConsoleApp project try to add my nuget package:\r\n6 $ dotnet add package mylib -s /Users/myname/nuget-repo\r\n\r\n## Expected  behavior\r\nSuccessfully adding my Nuget package.\r\n\r\n## Actual behavior\r\nmyname:MyConsoleApp myname$ dotnet add package mylib\r\n  Writing /var/folders/cr/4pk4646d1_x5tl_tbbbbvqkw0000gn/T/tmpyagAXi.tmp\r\ninfo : Adding PackageReference for package 'mylib' into project '/Users/myname/Projects/MyConsoleApp/MyConsoleApp.csproj'.\r\nlog  : Restoring packages for /Users/myname/Projects/MyConsoleApp/MyConsoleApp.csproj...\r\ninfo : Package 'mylib' is compatible with all the specified frameworks in project '/Users/myname/Projects/MyConsoleApp/MyConsoleApp.csproj'.\r\nerror: Value cannot be null.\r\nerror: Parameter name: path1\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10668","RelatedDescription":"Open issue \"dotnet add local package -> error: Value cannot be null. error: Parameter name: path1\" (#10668)"},{"Id":"403415648","IsPullRequest":false,"CreatedAt":"2019-01-29T05:59:35","Actor":"John0King","Number":"10658","RawContent":null,"Title":"What's the equivalent of `dotnet publish -r win-x64`  in MSBuild","State":"closed","Body":"the msbuild version won't restore during publish and cause a error when I separate the `dotnet restore` and `dotnet publish`\r\nthis is what I try \r\n\r\n```\r\n1. dotnet restore -r win-x64\r\n2. msbuild /p:RuntimeIdentifier=win-x64 /p:configuration=release\r\nthen  there is a error\r\nThe project was restored using Microsoft.NETCore.App version 2.2.0, but with current settings, version 2.2.1 would be used instead\r\n```\r\n\r\nhow do I solve this problem ?\r\n","Url":"https://github.com/dotnet/cli/issues/10658","RelatedDescription":"Closed issue \"What's the equivalent of `dotnet publish -r win-x64`  in MSBuild\" (#10658)"},{"Id":"404010579","IsPullRequest":false,"CreatedAt":"2019-01-28T21:16:30","Actor":"dsplaisted","Number":"10666","RawContent":null,"Title":"Automatically reference shared frameworks from dependencies","State":"open","Body":"If a dependency of a project (either another project in the solution, or a NuGet package) depends on an optional shared framework, then the project with the dependency should also depend on that shared framework.\r\n\r\nThis depends on NuGet writing these dependencies to the assets file: https://github.com/NuGet/Home/issues/7342.  Once that is done we will raise them into framework references.\r\n\r\nWe will also need to download all targeting packs for the targeted framework in case we might need to depend on them via a transitive dependency (which we won't know about until after restore has happened).\r\n\r\nNOTE: We would also like to have a property to disable transitive framework references (which would then disable the automatic download of packages you might not need).","Url":"https://github.com/dotnet/cli/issues/10666","RelatedDescription":"Open issue \"Automatically reference shared frameworks from dependencies\" (#10666)"},{"Id":"403494079","IsPullRequest":false,"CreatedAt":"2019-01-28T18:51:14","Actor":"heaths","Number":"10660","RawContent":null,"Title":"Windows lies to dotnet.exe abouts the OS version","State":"closed","Body":"## Steps to reproduce\r\nOn Windows 10:\r\n1. `mkdir test`\r\n2. `cd test`\r\n3. `dotnet new console`\r\n4. Change Program.cs to call `Console.WriteLine(Environment.OSVersion.Version)`\r\n5. `dotnet run`\r\n\r\n## Expected  behavior\r\nSee \"10.0.17663\" (for example, on RS5)\r\n\r\n## Actual behavior\r\nSee \"6.2.9200.0\"\r\n\r\nThis is because dotnet.exe's RT_MANIFEST resource is auto-generated with only the `asInvoker` privilege level, but is lacking the `supportedOS`. Instead, you should consider authoring a manifest like the following and adding it to your dotnet.csproj as the `ApplicationManifest`:\r\n\r\n```xml\r\n<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\r\n<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>\r\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n        <security>\r\n            <requestedPrivileges>\r\n                <requestedExecutionLevel level='asInvoker' uiAccess='false' />\r\n            </requestedPrivileges>\r\n        </security>\r\n    </trustInfo>\r\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\r\n        <application>\r\n            <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\" />\r\n            <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\" />\r\n            <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\" />\r\n            <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\" />\r\n            <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\" />\r\n        </application>\r\n    </compatibility>\r\n</assembly>\r\n```\r\n\r\nThis is problematic when running `dotnet run` with a console app that needs the correct Windows OS version, such as a benchmark application using BenchmarkDotNet.\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003156 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0-preview2-006127 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25319-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n","Url":"https://github.com/dotnet/cli/issues/10660","RelatedDescription":"Closed issue \"Windows lies to dotnet.exe abouts the OS version\" (#10660)"},{"Id":"403601217","IsPullRequest":false,"CreatedAt":"2019-01-28T18:47:23","Actor":"matkoch","Number":"10665","RawContent":null,"Title":"Usability of 'dotnet new'","State":"closed","Body":"The usage experience with `dotnet new` is honestly a bit painful when working locally with custom templates. Specifically, I would like to ask for:\r\n\r\n- having the opportunity to uninstall templates by short name (I think that's unique)\r\n- being able to see a version in the list of installed templates\r\n- getting a _clear_ notification, whether a template was installed or uninstalled, instead of printing all available templates\r\n","Url":"https://github.com/dotnet/cli/issues/10665","RelatedDescription":"Closed issue \"Usability of 'dotnet new'\" (#10665)"},{"Id":"403549844","IsPullRequest":false,"CreatedAt":"2019-01-28T18:45:39","Actor":"axodox","Number":"10661","RawContent":null,"Title":"Dry run will create empty directories","State":"closed","Body":"## Steps to reproduce\r\nGo into an empty directory, then run this in cmd:\r\ndotnet new console -n ThisDirectoryShouldNotExist --dry-run\r\n\r\n## Expected  behavior\r\nno file or directory will be created when --dry-run is used\r\n\r\n## Actual behavior\r\nan empty directory named 'ThisDirectoryShouldNotExist' will be created\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]","Url":"https://github.com/dotnet/cli/issues/10661","RelatedDescription":"Closed issue \"Dry run will create empty directories\" (#10661)"},{"Id":"403469695","IsPullRequest":false,"CreatedAt":"2019-01-27T19:33:42","Actor":"ziffusion","Number":"10659","RawContent":null,"Title":"dotnet build output directory on Linux is different for root vs non-root","State":"closed","Body":"(dotnet sdk 2.2)\r\n\r\nFor root user:\r\n\r\n> ./bin/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nFor non-root user:\r\n\r\n> ./bin/**LINUX**/Debug/netcoreapp2.1/IEDSim.dll\r\n\r\nWhy is this, and is there a way to make this conistant?\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10659","RelatedDescription":"Closed issue \"dotnet build output directory on Linux is different for root vs non-root\" (#10659)"},{"Id":"403567211","IsPullRequest":false,"CreatedAt":"2019-01-27T16:12:39","Actor":"mklement0","Number":"10664","RawContent":null,"Title":"dotnet-install.sh and dotnet-install.ps1 do not work as advertised with respect to printing a repeatable command line (`-DryRun`)","State":"open","Body":"## Steps to reproduce\r\n\r\nNote: Assumes the presence presence of [`dotnet-script.ps1`](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1) (Windows) and [`dotnet-script.sh`](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.sh) (Unix) in the current dir.\r\n\r\nOn Unix:\r\n\r\n```sh\r\n./dotnet-install.sh -dryrun -runtime dotnet\r\n```\r\n\r\nOn Windows:\r\n\r\n```powershell\r\n./dotnet-install.ps1 -dryrun -runtime dotnet\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBoth platforms (except for the filename extension):\r\n\r\n```none\r\ndotnet-install: Repeatable invocation: ./dotnet-install.ps1 -Runtime dotnet -Version 2.1.7\r\n```\r\n\r\nThat is:\r\n\r\n* The implied `latest` `-Version` should be reflected in an _explicit, resolved_ `-Version` argument.\r\n\r\n* All explicitly specified parameters should appear, except for `-dryrun`, with `-Version` _resolved_, if an _abstract_ value such as `latest` or `coherent` was specified.\r\n\r\n* Aside from `-Version`, no _omitted_ parameters should appear.\r\n\r\n## Actual behavior\r\n\r\nUnix:\r\n\r\n```none\r\n# ...\r\ndotnet-install: Repeatable invocation: ./dotnet-install.sh --version 2.1.7 --channel LTS --install-dir <auto>\r\n```\r\n\r\nThat is:\r\n\r\n* the `-runtime` argument is lost.\r\n\r\n* parameters that were at their default are now needlessly hard-coded; as an side `<auto>` used _unquoted_ will break the invocation.\r\n\r\nWindows:\r\n\r\n```none\r\n#...\r\ndotnet-install: Repeatable invocation: .\\.\\dotnet-install.ps1 -dryrun -runtime dotnet\r\n```\r\n\r\nThat is:\r\n\r\n* the `.\\` is unexpectedly doubled (because the script blindly prepends `.\\`\r\n\r\n* otherwise, the input command line is blindly echoed, which means that:\r\n  * `-dryrun` is needlessly present\r\n  * no version resolution is performed.\r\n\r\n## Environment data\r\n\r\nUsing the aforementioned scripts directly from this repo's master branch, as of 27 Jan 2019.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10664","RelatedDescription":"Open issue \"dotnet-install.sh and dotnet-install.ps1 do not work as advertised with respect to printing a repeatable command line (`-DryRun`)\" (#10664)"},{"Id":"403564948","IsPullRequest":false,"CreatedAt":"2019-01-27T15:51:53","Actor":"mklement0","Number":"10663","RawContent":null,"Title":"dotnet-install.ps1: `-Runtime aspnetcore` is broken","State":"open","Body":"## Steps to reproduce\r\n\r\nOn Windows, assumes the presence of [`dotnet-script.ps1`](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1) in the current dir.:\r\n\r\n```powershell\r\n.\\dotnet-script.ps1 -DryRun -Runtime aspnetcore\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe usual `-DryRun` output, listing the resolved download links.\r\n\r\n## Actual behavior\r\n\r\nThe following error occurs:\r\n\r\n```na\r\nIndex was outside the bounds of the array.\r\n```\r\n\r\nThe reason is that the version information reported by the feed has only _1_ line  in the case of `asspnetcore` (only a version number, not preceded by  another line with the commit hash), whereas the code assumes the presence of _2_ lines.\r\n\r\n## Environment data\r\n\r\nUsing the [script directly from the repo](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1) as of 27 Jan 2019.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10663","RelatedDescription":"Open issue \"dotnet-install.ps1: `-Runtime aspnetcore` is broken\" (#10663)"},{"Id":"403553093","IsPullRequest":true,"CreatedAt":"2019-01-27T13:50:32","Actor":"mayankbansal018","Number":"10662","RawContent":null,"Title":"Vstest honor nologo","State":"open","Body":"Passing /nologo user input to VSTest task\r\n\r\nRelated: https://github.com/Microsoft/vstest/pull/1717\r\n\r\nBug: https://github.com/Microsoft/vstest/issues/1701","Url":"https://github.com/dotnet/cli/pull/10662","RelatedDescription":"Open PR \"Vstest honor nologo\" (#10662)"},{"Id":"403328798","IsPullRequest":true,"CreatedAt":"2019-01-25T23:58:42","Actor":"livarcocc","Number":"10656","RawContent":null,"Title":"Adding CliCommandLineParser and cli-migrate to the list of Dependency uptake repos for the CLI.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10656","RelatedDescription":"Closed or merged PR \"Adding CliCommandLineParser and cli-migrate to the list of Dependency uptake repos for the CLI.\" (#10656)"},{"Id":"403227817","IsPullRequest":false,"CreatedAt":"2019-01-25T20:56:15","Actor":"pepone","Number":"10655","RawContent":null,"Title":"Restore using msbuild produce different result than dotnet restore","State":"closed","Body":"I seeing some differences between `dotnet restore` and `dotnet msbuild /t:Restore`\r\nThe former generates\r\n\r\n```\r\n<Import Project=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\" \r\nCondition=\"Exists('C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />`\r\n```\r\n\r\nThe later generates\r\n\r\n```\r\n<Import Project=\"$(NuGetPackageRoot)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\"\r\nCondition=\"Exists('$(NuGetPackageRoot)netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />\r\n```\r\nUsing the later fails at build time because netstandard.library package is not in $(NuGetPackageRoot)\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10655","RelatedDescription":"Closed issue \"Restore using msbuild produce different result than dotnet restore\" (#10655)"},{"Id":"403049251","IsPullRequest":true,"CreatedAt":"2019-01-25T20:54:38","Actor":"mayankbansal018","Number":"10654","RawContent":null,"Title":"TestPlatform insertion 16.0-preview-20190124-02","State":"closed","Body":"Testplatform insertion Rel Notes: https://github.com/Microsoft/vstest-docs/blob/master/docs/releases.md#1600-preview-20190124-02","Url":"https://github.com/dotnet/cli/pull/10654","RelatedDescription":"Closed or merged PR \"TestPlatform insertion 16.0-preview-20190124-02\" (#10654)"},{"Id":"402847937","IsPullRequest":true,"CreatedAt":"2019-01-24T21:21:10","Actor":"livarcocc","Number":"10653","RawContent":null,"Title":"Disable telemetry for a test explicitly to make sure cache files are not generated","State":"closed","Body":"Disable telemetry for a test explicitly to make sure cache files are not generated when we are validating the cache folder is not created.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10653","RelatedDescription":"Closed or merged PR \"Disable telemetry for a test explicitly to make sure cache files are not generated\" (#10653)"},{"Id":"402697708","IsPullRequest":true,"CreatedAt":"2019-01-24T17:57:19","Actor":"dotnet-maestro[bot]","Number":"10652","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10652","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10652)"},{"Id":"402464408","IsPullRequest":true,"CreatedAt":"2019-01-23T22:47:46","Actor":"wli3","Number":"10651","RawContent":null,"Title":"Add --interactive to dotnet add reference","State":"open","Body":"need https://github.com/dotnet/cli/pull/10650 in first\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10651","RelatedDescription":"Open PR \"Add --interactive to dotnet add reference\" (#10651)"},{"Id":"402405638","IsPullRequest":true,"CreatedAt":"2019-01-23T19:57:56","Actor":"wli3","Number":"10650","RawContent":null,"Title":"Add --interactive to dotnet run and test","State":"open","Body":"These 2 verb have verbosity set to quiet. And we need to change it to minimal during --interface\r\nto show the nuget plugin guide\r\n\r\npart of #10529 ","Url":"https://github.com/dotnet/cli/pull/10650","RelatedDescription":"Open PR \"Add --interactive to dotnet run and test\" (#10650)"},{"Id":"402318345","IsPullRequest":false,"CreatedAt":"2019-01-23T16:48:11","Actor":"spozniak","Number":"10649","RawContent":null,"Title":"MacOS runtime pkg installer does not include AspNetCore runtime","State":"closed","Body":"## Steps to reproduce\r\nDownload and install \r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\nor\r\nhttps://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-installer\r\n\r\n## Expected  behavior\r\nShould contain two AspNetCore runtimes\r\n`Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]`\r\n`Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]`\r\n\r\n## Actual behavior\r\nNo AspNetCore shared runtimes installed. Because of that DotNetCore application fails with an error:\r\n\r\n> It was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.AspNetCore.All', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n      /usr/local/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n      https://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n\r\nAs workaround it is possible to get them from binaries https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.2.1-macos-x64-asp.net-core-runtime-binaries\r\nThis issue is similar to: https://github.com/dotnet/cli/issues/8529 but is related to runtime installer.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10649","RelatedDescription":"Closed issue \"MacOS runtime pkg installer does not include AspNetCore runtime\" (#10649)"},{"Id":"402080389","IsPullRequest":true,"CreatedAt":"2019-01-23T06:08:02","Actor":"dotnet-maestro[bot]","Number":"10648","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10648","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10648)"},{"Id":"402021447","IsPullRequest":false,"CreatedAt":"2019-01-23T00:56:16","Actor":"vijayrkn","Number":"10647","RawContent":null,"Title":"Different build behaviour for .net core web apps between local VS IDE and msbuild","State":"open","Body":"_From @fromorbonia on January 10, 2019 9:26_\n\n## Steps to reproduce\r\nPublishing a .NET Core web application with a FileSystem profile under VS2017 IDE creates a directory with an EXE (e.g. MyProject.exe)\r\nThere is a Jenkins build server running msbuild, which correctly picks up the publish profile that was used and configured locally.\r\nPlace the resulting files on a server (with IIS) and a previosuly configured Web Site, and the site should start correctly.\r\n\r\n## Expected  behavior\r\nI would expect the build server to create exactly the same set of files, as produced by the local VS2017 publish process. \r\nSpecifically, in this case, it should include MyProject.exe with a matching web.config file - so that once the files being copied to the IIS server the web site starts correctly.\r\n\r\n## Actual behavior\r\nThe publish folder contains an apphost.exe and MyProject.dll, but not an EXE. The web.config points to the EXE that does not exist:\r\n`<aspNetCore processPath=\".\\MyProject.exe\"...`\r\nThe web site doesn't not run on IIS.\r\n\r\n\r\n## Environment data\r\nAfter some rounds of changes, I've ended up with the following key values (when looking at similar other posts people have asked about so have mentioned here) in the pubxml file:\r\n```\r\n    <UseAppHost>true</UseAppHost>\r\n    <SelfContained>false</SelfContained>\r\n    <_IsPortable>true</_IsPortable>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n```\r\nI've only set UseAppHost to true, because it on the local VS IDE it creates the correct combination of web.config and files so that the web site starts correctly on deployment. I don't have a requirement to use or not use an apphost.exe file.\r\n\r\n\r\nFor the **local VS2017 IDE** this is:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nFor the **Jenkins build** server:\r\n12:53:26 .NET Core SDK (reflecting any global.json):\r\n12:53:26  Version:   2.1.502\r\n12:53:26  Commit:    c74ce8f29f\r\n12:53:26 \r\n12:53:26 Runtime Environment:\r\n12:53:26  OS Name:     Windows\r\n12:53:26  OS Version:  10.0.14393\r\n12:53:26  OS Platform: Windows\r\n12:53:26  RID:         win10-x64\r\n12:53:26  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n12:53:26 \r\n12:53:26 Host (useful for support):\r\n12:53:26   Version: 2.1.6\r\n12:53:26   Commit:  3f4f8eebd8\r\n12:53:26 \r\n12:53:26 .NET Core SDKs installed:\r\n12:53:26   2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26 \r\n12:53:26 .NET Core runtimes installed:\r\n12:53:26   Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\n\n_Copied from original issue: aspnet/websdk#470_","Url":"https://github.com/dotnet/cli/issues/10647","RelatedDescription":"Open issue \"Different build behaviour for .net core web apps between local VS IDE and msbuild\" (#10647)"},{"Id":"401994081","IsPullRequest":true,"CreatedAt":"2019-01-22T23:06:04","Actor":"mklement0","Number":"10646","RawContent":null,"Title":"WIP: Makes dotnet-install.ps1 x-platform","State":"open","Body":"Adds cross-edition and cross-platform support to the script, addresses #8278.","Url":"https://github.com/dotnet/cli/pull/10646","RelatedDescription":"Open PR \"WIP: Makes dotnet-install.ps1 x-platform\" (#10646)"},{"Id":"401981445","IsPullRequest":false,"CreatedAt":"2019-01-22T22:24:52","Actor":"danmosemsft","Number":"10645","RawContent":null,"Title":"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros","State":"open","Body":"_From @danmosemsft on January 21, 2019 6:3_\n\nRepos using Arcade bootstrap with `eng/common/tools.sh` which bootstraps dotnet using a script from `https://dot.net/v1/dotnet-install.sh`. The script will fail on ubuntu 18.10.\r\n\r\ncorefxlab has its own (out of date) copy of this file, which I already updated here\r\nhttps://github.com/dotnet/corefxlab/pull/2636\r\n\r\nA similar change needs to go into `https://dot.net/v1/dotnet-install.sh` but I do not know where that file comes from. It is referenced here:\r\n\r\n```\r\neng/common/tools.sh:  local install_script_url=\"https://dot.net/v1/dotnet-install.sh\"\r\n```\r\nbuildtools has its own\r\n```\r\nbuildtools/bootstrap/bootstrap.sh:    download \"https://raw.githubusercontent.com/dotnet/cli/$dotNetInstallBranch/scripts/obtain/dotnet-install.sh\" \"$dotnetInstallPath\"\r\n```\r\n\n\n_Copied from original issue: dotnet/arcade#1848_","Url":"https://github.com/dotnet/cli/issues/10645","RelatedDescription":"Open issue \"Update dotnet-install.sh (and https://dot.net/v1/dotnet-install.sh) to allow other distros\" (#10645)"},{"Id":"401910031","IsPullRequest":false,"CreatedAt":"2019-01-22T19:07:49","Actor":"firelizzard18","Number":"10644","RawContent":null,"Title":".NET Core 3.0 SDK preview breaks dependencies","State":"open","Body":"I have a project that has `System.Runtime.InteropServices` in its dependency graph. I can't share the \r\nproject itself. Below is part of the `csproj`.\r\n\r\nIf I build this project (on Windows) with .NET Core 2.2 SDK, everything works. If I build it with .NET Core 3.0 SDK (preview), the build artifacts are missing `System.Runtime.InteropServices.dll`, which breaks my application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Cors\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Elm\" Version=\"0.2.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.HttpSys\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Portable.BouncyCastle\" Version=\"1.8.4\" />\r\n    <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.6.0\" />\r\n    <PackageReference Include=\"System.Reflection.TypeExtensions\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- lots of <ProjectReference>s -->\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10644","RelatedDescription":"Open issue \".NET Core 3.0 SDK preview breaks dependencies\" (#10644)"},{"Id":"401902646","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:51","Actor":"CreativeHouseDotOrg","Number":"10642","RawContent":null,"Title":"dotnet command line argument to terminate remaining build processes that are finished but dont exit","State":"closed","Body":"### Is your feature request related to a problem? Please describe.\r\nI'm am trying to `build` and `publish`... but unfortunately there are hanging processes in Task Manager .NET Core Host that lead to a publish error if i try to `dotnet publish`\r\n\r\n### Describe the solution you'd like\r\nI want the Remaining Tasks to close after the build OR publish process has ended.\r\n\r\n### Describe alternatives you've considered\r\nSince now i've been terminating them by hand, it would be good to have a `dotnet <command>` to terminate all open .Net Core Hosts that remain.\r\n\r\n### Additional context\r\n\r\nHere is a Screenshot of the remaining Tasks:\r\n\r\n![1](https://user-images.githubusercontent.com/4038603/51504064-f1e87780-1dde-11e9-8ebd-1424a7654113.PNG)\r\n\r\n![unbenannt](https://user-images.githubusercontent.com/4038603/51504000-9f0ec000-1dde-11e9-8419-0216e6945290.PNG)\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10642","RelatedDescription":"Closed issue \"dotnet command line argument to terminate remaining build processes that are finished but dont exit\" (#10642)"},{"Id":"401907244","IsPullRequest":false,"CreatedAt":"2019-01-22T19:00:13","Actor":"firelizzard18","Number":"10643","RawContent":null,"Title":"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`","State":"open","Body":"## Steps to reproduce\r\n\r\n1. On Windows, install .NET Core 2.0 SDK and .NET Framework 4.7 SDK\r\n2. `dotnet new console -o test`\r\n3. `cd test`\r\n4. In `test.csproj`, replace `<TargetFramework>...` with `<TargetFrameworks>net47;netcoreapp3.0</TargetFrameworks>`\r\n5. `dotnet build -f net47`\r\n\r\n## Expected  behavior\r\n\r\nThe CLI builds and runs the project using the specified target framework. The fact that there are other valid target frameworks is ignored.\r\n\r\n## Actual behavior\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.84.34536 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.104\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets(135,5): error : The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\Source\\temp\\build-test\\build-test.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.104)\r\n\r\nProduct Information:\r\n Version:            2.1.104\r\n Commit SHA-1 hash:  48ec687460\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.104\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10643","RelatedDescription":"Open issue \"Cannot build a supported target when an unsupported target exists in `<TargetFrameworks>`\" (#10643)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"closed","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Closed issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"404601758","IsPullRequest":true,"CreatedAt":"2019-01-30T04:54:15","Actor":"Dotnet-GitSync-Bot","Number":"34943","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @MichalStrehovsky @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34943","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#34943)"},{"Id":"404583531","IsPullRequest":false,"CreatedAt":"2019-01-30T03:17:41","Actor":"Akaion","Number":"34942","RawContent":null,"Title":"Proposal - Changes to the way Windows process modules are found","State":"open","Body":"There's currently an issue with the way Windows process modules are found where If you attempt to get the modules loaded into an x86 process from an x64 program you are only presented with Ntdll.dll + the Wow64 dll's, which aren't the only modules loaded. \r\n\r\nThe current method that is being used is EnumProcessModules from psapi.dll - Whilst I don't know what this function is doing internally I'm guessing it's only querying the x64 PEB (if the process is running under Wow64) and therefore only returning the x64 dll's that are loaded in the process.\r\n\r\nSomething like this could be used to get a full list of modules (both x86 and x64) loaded in a process which you get then use the BaseAddress / ModuleHandle to get the rest of the information you need like is done in the ProcessManger.Win32 class.\r\n\r\n```csharp\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern IntPtr CreateToolhelp32Snapshot(SnapshotFlags flags, uint processId);\r\n\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern bool Module32First(IntPtr snapshotHandle, IntPtr moduleEntry);\r\n        \r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\ninternal static extern bool Module32Next(IntPtr snapshotHandle, IntPtr moduleEntry);\r\n\r\n[Flags]\r\ninternal enum SnapshotFlags\r\n{\r\n    Module = 0x08,\r\n    Module32 = 0x010\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\ninternal struct ModuleEntry\r\n{\r\n    internal uint Size;\r\n\r\n    private readonly uint ModuleId;\r\n    private readonly uint ProcessId;\r\n\r\n    private readonly uint UnusedValue1;\r\n    private readonly uint UnusedValue2;\r\n\r\n    internal IntPtr BaseAddress;\r\n\r\n    private readonly uint BaseSize;\r\n\r\n    private readonly IntPtr ModuleHandle;\r\n            \r\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]\r\n    internal readonly string Module;\r\n            \r\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\r\n    internal readonly string ExePath;\r\n}\r\n\r\ninternal static IntPtr StructureToPointer<TStructure>(TStructure structure)\r\n{\r\n    var structureSize = Marshal.SizeOf(typeof(TStructure));\r\n\r\n    // Allocate memory to store the structure\r\n            \r\n    var pointer = Marshal.AllocHGlobal(structureSize);\r\n            \r\n    // Store the structure in the allocated memory\r\n            \r\n    Marshal.StructureToPtr(structure, pointer, true);\r\n\r\n    return pointer;\r\n}\r\n\r\ninternal static TStructure PointerToStructure<TStructure>(IntPtr address)\r\n{\r\n    // Read the structure from memory at the address\r\n            \r\n    var structure = (TStructure) Marshal.PtrToStructure(address, typeof(TStructure));\r\n\r\n    return structure;\r\n} \r\n\r\ninternal static IEnumerable<ModuleEntry> GetProcessModules(int processId)\r\n{\r\n    var processModules = new List<ModuleEntry>();\r\n            \r\n    // Create a tool help snapshot\r\n            \r\n    var snapshotHandle = Native.CreateToolhelp32Snapshot(SnapshotFlags.Module | SnapshotFlags.Module32, (uint) processId);\r\n            \r\n    // Initialize a module entry struct\r\n            \r\n    var moduleEntrySize = Marshal.SizeOf(typeof(ModuleEntry));\r\n            \r\n    var moduleEntry = new ModuleEntry { Size = (uint) moduleEntrySize};\r\n            \r\n    // Store the module entry struct in a buffer\r\n            \r\n    var moduleEntryBuffer = StructureToPointer(moduleEntry);\r\n            \r\n    // Get the first module of the process and store it in the buffer\r\n            \r\n    if (!Module32First(snapshotHandle, moduleEntryBuffer))\r\n    {\r\n        return processModules;\r\n    }\r\n            \r\n    // Get the first module entry structure from the buffer\r\n            \r\n    moduleEntry = PointerToStructure<ModuleEntry>(moduleEntryBuffer);\r\n            \r\n    processModules.Add(moduleEntry);\r\n            \r\n    // Get the rest of the modules in the process\r\n            \r\n    while (Module32Next(snapshotHandle, moduleEntryBuffer))\r\n    {\r\n        // Get the module entry structure from the buffer\r\n                \r\n        moduleEntry = PointerToStructure<ModuleEntry>(moduleEntryBuffer);\r\n                \r\n        processModules.Add(moduleEntry);\r\n    }\r\n            \r\n    return processModules;\r\n}\r\n```\r\n\r\nAnother option could be to get an instance of the PEB / PEB's (if the process is runnning under Wow64) and then loop through the LdrDataTable entries if Snapshots were not the best option.","Url":"https://github.com/dotnet/corefx/issues/34942","RelatedDescription":"Open issue \"Proposal - Changes to the way Windows process modules are found\" (#34942)"},{"Id":"404462920","IsPullRequest":true,"CreatedAt":"2019-01-30T03:14:30","Actor":"wfurt","Number":"34934","RawContent":null,"Title":"add instrumentation for intermittent DNS failures","State":"closed","Body":"per discussion in #34187, this PR adds new exception so we can track if retry would make improvements for TryAgain error cases.  ","Url":"https://github.com/dotnet/corefx/pull/34934","RelatedDescription":"Closed or merged PR \"add instrumentation for intermittent DNS failures\" (#34934)"},{"Id":"404483799","IsPullRequest":false,"CreatedAt":"2019-01-30T02:54:09","Actor":"JamesNK","Number":"34935","RawContent":null,"Title":"JsonDocument.Empty","State":"closed","Body":"Consider adding a readonly property/field with an empty JsonDocument, or a friendly way to create an empty document.\r\n\r\nCurrently you need to do this - `JsonDocument.Parse(string.Empty)` - https://github.com/aspnet/AspNetCore/pull/7105/files#diff-4561b022ab7f492d2dc25af071e9c74eR36\r\n\r\n@bartonjs @ahsonkhan","Url":"https://github.com/dotnet/corefx/issues/34935","RelatedDescription":"Closed issue \"JsonDocument.Empty\" (#34935)"},{"Id":"404099576","IsPullRequest":true,"CreatedAt":"2019-01-30T02:06:43","Actor":"grant-d","Number":"34917","RawContent":null,"Title":"[NO MERGE] BitOps analysis CoreFX (WIP)","State":"closed","Body":"Update call sites for https://github.com/dotnet/coreclr/pull/22225\r\n\r\n\r\nNote that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.\r\n\r\ncc @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/34917","RelatedDescription":"Closed or merged PR \"[NO MERGE] BitOps analysis CoreFX (WIP)\" (#34917)"},{"Id":"404520069","IsPullRequest":true,"CreatedAt":"2019-01-30T02:04:51","Actor":"AfsanehR","Number":"34939","RawContent":null,"Title":"Update area owners for System.Data.SqlClient and System.Data","State":"closed","Body":"Update issue-guide for area owners. \r\n","Url":"https://github.com/dotnet/corefx/pull/34939","RelatedDescription":"Closed or merged PR \"Update area owners for System.Data.SqlClient and System.Data\" (#34939)"},{"Id":"404551592","IsPullRequest":false,"CreatedAt":"2019-01-30T00:01:29","Actor":"dangi12012","Number":"34941","RawContent":null,"Title":"Proposal: Add Range as List indexer Paramter","State":"open","Body":"Add range as accessor to list<T> ? Most business data etc is in list form and not array and selecting subsets there would be much easier with the new range type. This could be implemented in a few lines.\r\n\r\n```\r\nList<int> test = {1,2,3,4,5,6}\r\nint[] elements = test[3..5]  //4,5,6  test.skip(3).take(2)\r\nint[] fromback = test[^0..0] //6,5,4,3... test.reverse().take(test.Count)\r\n\r\n\r\n//https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Collections/Generic/List.cs\r\n//Just like that\r\npublic T[] this[Range range]\r\n{\r\n //Would have to clamp range to 0..Count as to really get last element in list with ^0\r\n  get => _items[range]; \r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/34941","RelatedDescription":"Open issue \"Proposal: Add Range as List indexer Paramter\" (#34941)"},{"Id":"404540515","IsPullRequest":true,"CreatedAt":"2019-01-29T23:58:00","Actor":"safern","Number":"34940","RawContent":null,"Title":"Enable tests for UAPAOT x86 and x64 official builds","State":"open","Body":"Depends on consuming: https://github.com/dotnet/arcade/pull/1905\r\n\r\nPending: arm and arm64 that need continuation runner. Working on those already.","Url":"https://github.com/dotnet/corefx/pull/34940","RelatedDescription":"Open PR \"Enable tests for UAPAOT x86 and x64 official builds\" (#34940)"},{"Id":"404502713","IsPullRequest":false,"CreatedAt":"2019-01-29T21:51:21","Actor":"JamesNK","Number":"34938","RawContent":null,"Title":"Helper method for comparing Utf8JsonReader value","State":"open","Body":"`Utf8JsonReader` has `ValueSpan` for when the value is within a single segment and `ValueSequence` for when it spans multiple.\r\n\r\nThis requires users to do something like:\r\n\r\n```cs\r\nvar memberName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;\r\n\r\nif (memberName.SequenceEqual(TypePropertyNameBytes))\r\n{\r\n}\r\n```\r\n\r\nIssues:\r\n1. A developer might write code that only checks `ValueSpan`, and then get random errors when JSON is parsed than is large enough that a JSON property name spans segments.\r\n2. Allocating an array from `ValueSequence` to use `SequenceEqual`.\r\n\r\nConsider adding a helper method that does this check for you, and when `ValueSequence` is provided it will run the equivalent of `SequenceEqual` but without allocating an array.\r\n\r\n@ahsonkhan ","Url":"https://github.com/dotnet/corefx/issues/34938","RelatedDescription":"Open issue \"Helper method for comparing Utf8JsonReader value\" (#34938)"},{"Id":"404495709","IsPullRequest":false,"CreatedAt":"2019-01-29T21:31:48","Actor":"wtgodbe","Number":"34937","RawContent":null,"Title":"Decide if UAP should include System.Reflection.Emit","State":"open","Body":"CoreFx will soon be moving to target `netstandard2.1`, so we need to decide whether or not UAP will include RefEmit. The other option would be to not move UAP from `netstandard2.0` to `netstandard2.1`\r\n\r\nCC @terrajobst @ericstj @karelz ","Url":"https://github.com/dotnet/corefx/issues/34937","RelatedDescription":"Open issue \"Decide if UAP should include System.Reflection.Emit\" (#34937)"},{"Id":"404493383","IsPullRequest":true,"CreatedAt":"2019-01-29T21:25:25","Actor":"dotnet-maestro-bot","Number":"34936","RawContent":null,"Title":"Update CoreFx to preview.19079.4 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34936","RelatedDescription":"Open PR \"Update CoreFx to preview.19079.4 (master)\" (#34936)"},{"Id":"404304732","IsPullRequest":false,"CreatedAt":"2019-01-29T21:11:28","Actor":"pavelovcharov","Number":"34929","RawContent":null,"Title":"Math.Max/Min methods work differently in .Net Core 3 and Net Framework","State":"closed","Body":"The Math.Max and Math.Min methods with double arguments work differently in .Net Core 3 and Net Framework:\r\n\r\n`Math.Max(double.NaN, 0d)`  returns 0 in .Net Core 3\r\n\r\n`Math.Max(double.NaN, 0d)`  returns double.NaN in Net Framework\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010124\r\n Commit:    41a73b60f2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010124\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview1-26919-02\r\n  Commit:  9ea8c26816\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009616 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10062 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.DesktopUI.App 3.0.0-alpha-26829-8 [C:\\Program Files\\dotnet\\shared\\Microsoft.DesktopUI.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview1-26919-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n","Url":"https://github.com/dotnet/corefx/issues/34929","RelatedDescription":"Closed issue \"Math.Max/Min methods work differently in .Net Core 3 and Net Framework\" (#34929)"},{"Id":"404442559","IsPullRequest":false,"CreatedAt":"2019-01-29T19:08:39","Actor":"doggy8088","Number":"34933","RawContent":null,"Title":"HttpRequestHeaders unable to add User-Agent header","State":"open","Body":"The following code snippet will produce `IndexOutOfRangeException`.  Is this a bug?\r\n\r\n```cs\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\n\r\nHttpRequestHeaders headers = new HttpClient().DefaultRequestHeaders;\r\nheaders.Add(\"User-Agent\", \"Mozilla/4.0 (compatible (compatible; MSIE 8.0; Windows NT 6.1; Trident/7.0)\");\r\n```","Url":"https://github.com/dotnet/corefx/issues/34933","RelatedDescription":"Open issue \"HttpRequestHeaders unable to add User-Agent header\" (#34933)"},{"Id":"404385354","IsPullRequest":true,"CreatedAt":"2019-01-29T19:01:44","Actor":"ViktorHofer","Number":"34930","RawContent":null,"Title":"Fix wrong sourcelink condition","State":"closed","Body":"Fixes a wrong condition introduced in https://github.com/dotnet/corefx/pull/34900.","Url":"https://github.com/dotnet/corefx/pull/34930","RelatedDescription":"Closed or merged PR \"Fix wrong sourcelink condition\" (#34930)"},{"Id":"404238278","IsPullRequest":true,"CreatedAt":"2019-01-29T19:00:26","Actor":"ViktorHofer","Number":"34923","RawContent":null,"Title":"Restore missing xunit package in aot builds","State":"closed","Body":"xunit.runner.utility wasn't restored but binplaced in aot builds. Restoring now and throwing an error if isn't present. Should have included an error from the beginning.\r\n\r\ncc @yujayee ","Url":"https://github.com/dotnet/corefx/pull/34923","RelatedDescription":"Closed or merged PR \"Restore missing xunit package in aot builds\" (#34923)"},{"Id":"404430918","IsPullRequest":false,"CreatedAt":"2019-01-29T18:38:50","Actor":"yujayee","Number":"34932","RawContent":null,"Title":"Two System.Private.Xml tests failed on UapAot","State":"open","Body":"```\r\nXmlSerializerTests.Xml_TypeWithDefaultTimeSpanProperty [FAIL]\r\n        System.NullReferenceException : Object reference not set to an instance of an object.\r\n        Stack Trace:\r\n          G:\\temp6\\corefx\\src\\System.Runtime.Serialization.Xml\\tests\\SerializationTypes.cs(891,0): at TypeWithDefaultTi\r\n  meSpanProperty.GetDefaultValue(String propertyName)\r\n          G:\\temp6\\corefx\\src\\System.Private.Xml\\tests\\XmlSerializer\\XmlSerializerTests.cs(680,0): at XmlSerializerTest\r\n  s.Xml_TypeWithDefaultTimeSpanProperty()\r\n             at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState arg\r\n  SetupState, Boolean targetIsThisCall)\r\n             at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr method\r\n  ToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)\r\n          CallDynamicInvokeMethod(15732480,0): at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr met\r\n  hodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall)\r\n```\r\n\r\n```\r\nXmlSerializerTests.Xml_DeserializeTypeWithEmptyTimeSpanProperty [FAIL]\r\n        System.InvalidOperationException : There is an error in XML document (4, 15).\r\n        ---- System.FormatException : The string '' is not a valid TimeSpan value.\r\n        Stack Trace:\r\n          G:\\temp6\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(566,0): at System.Xml.Se\r\n  rialization.XmlSerializer.Deserialize$catch$1()\r\n          G:\\temp6\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(483,0): at System.Xml.Se\r\n  rialization.XmlSerializer.Deserialize($XmlReader xmlReader, String encodingStyle)\r\n          G:\\temp6\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Serialization\\XmlSerializer.cs(468,0): at System.Xml.Se\r\n  rialization.XmlSerializer.Deserialize(TextReader textReader)\r\n          G:\\temp6\\corefx\\src\\System.Private.Xml\\tests\\XmlSerializer\\XmlSerializerTests.cs(701,0): at XmlSerializerTest\r\n  s.Xml_DeserializeTypeWithEmptyTimeSpanProperty()\r\n             at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState arg\r\n  SetupState, Boolean targetIsThisCall)\r\n             at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr method\r\n  ToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)\r\n          CallDynamicInvokeMethod(15732480,0): at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocation\r\n  Exception, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall)\r\n```","Url":"https://github.com/dotnet/corefx/issues/34932","RelatedDescription":"Open issue \"Two System.Private.Xml tests failed on UapAot\" (#34932)"},{"Id":"404423072","IsPullRequest":true,"CreatedAt":"2019-01-29T18:18:06","Actor":"safern","Number":"34931","RawContent":null,"Title":"Dummy PR to test azurepipelines comment triggers","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/34931","RelatedDescription":"Open PR \"Dummy PR to test azurepipelines comment triggers\" (#34931)"},{"Id":"404255972","IsPullRequest":false,"CreatedAt":"2019-01-29T15:07:23","Actor":"Akaion","Number":"34925","RawContent":null,"Title":"Adding more IntPtr arithmetic","State":"closed","Body":"IntPtr's can currently only be added or subtracted onto by using an int like so\r\n\r\n```csharp\r\nvar testPointer = new IntPtr(0xFFF);\r\n\r\ntestPointer = testPointer + 256;\r\n```\r\n\r\nIt would be a welcome improvement if this was expanded to include longs and other IntPtr's.\r\n\r\nCurrently, the work around for this is to cast the IntPtr(s) into a long, perform the arithmetic and then cast the new value back into an IntPtr like so\r\n\r\n```csharp\r\nvar testPointer = new IntPtr(0xFFF);\r\n\r\nvar testLong = 0xFFFFFFFFFFFL;\r\n\r\ntestPointer = (IntPtr) ((long) testPointer + testLong);\r\n```\r\n\r\nor\r\n\r\n```csharp\r\nvar testPointer1 = new IntPtr(0xFFF);\r\n\r\nvar testPointer2 = new IntPtr(0xFFFFF);\r\n\r\nvar testPointer3 = (IntPtr) ((long) testPointer1 + (long) testPointer2);\r\n```\r\n\r\nWhilst this works, it would be nice if this was integrated directly into the IntPtr operators.","Url":"https://github.com/dotnet/corefx/issues/34925","RelatedDescription":"Closed issue \"Adding more IntPtr arithmetic\" (#34925)"},{"Id":"404280572","IsPullRequest":false,"CreatedAt":"2019-01-29T14:25:08","Actor":"MarcoRossignoli","Number":"34926","RawContent":null,"Title":"[Question]Concurrent build.cmd corefx/coreclr random fail","State":"closed","Body":"I'm trying to concurrently build corefx/coreclr repo to save time, but I get strange random errors(maybe due to nuget libs share etc...).\r\nTo be sure is it expected?","Url":"https://github.com/dotnet/corefx/issues/34926","RelatedDescription":"Closed issue \"[Question]Concurrent build.cmd corefx/coreclr random fail\" (#34926)"},{"Id":"404159127","IsPullRequest":false,"CreatedAt":"2019-01-29T14:19:19","Actor":"renzoburo","Number":"34922","RawContent":null,"Title":"zxc\\ty,.\\zxc\\ty,.\\","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/issues/34922","RelatedDescription":"Closed issue \"zxc\\ty,.\\zxc\\ty,.\\\" (#34922)"},{"Id":"404159092","IsPullRequest":false,"CreatedAt":"2019-01-29T14:19:14","Actor":"renzoburo","Number":"34921","RawContent":null,"Title":"zxc\\ty,.\\","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/issues/34921","RelatedDescription":"Closed issue \"zxc\\ty,.\\\" (#34921)"},{"Id":"404097219","IsPullRequest":true,"CreatedAt":"2019-01-29T14:04:26","Actor":"dotnet-maestro-bot","Number":"34916","RawContent":null,"Title":"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview.19078.4, beta-27329-00, beta-27329-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34916","RelatedDescription":"Closed or merged PR \"Update CoreFx, ProjectNTfs, ProjectNTfsTestILC to preview.19078.4, beta-27329-00, beta-27329-00, respectively (master)\" (#34916)"},{"Id":"404303082","IsPullRequest":true,"CreatedAt":"2019-01-29T14:03:34","Actor":"couven92","Number":"34928","RawContent":null,"Title":"System.IO.Pipelines: Generic Pipe implementation","State":"closed","Body":"Implementation of the proposed API in issue #34927.","Url":"https://github.com/dotnet/corefx/pull/34928","RelatedDescription":"Closed or merged PR \"System.IO.Pipelines: Generic Pipe implementation\" (#34928)"},{"Id":"404300256","IsPullRequest":false,"CreatedAt":"2019-01-29T13:50:49","Actor":"couven92","Number":"34927","RawContent":null,"Title":"API Proposal : System.IO.Pipelines generic APIs","State":"open","Body":"# Background\r\n\r\nCurrently, the `System.IO.Pipelines` package only allows for pipelines that operate on raw bytes. With some trickery and the usage of `MemoryMarshal` et.al., the usage of Pipelines can be extended to blittable types.\r\n\r\nThe package description on [NuGet](https://www.nuget.org/packages/System.IO.Pipelines/) states:\r\n\r\n> Single producer single consumer byte buffer management.\r\n\r\nHowever, single producer single consumer scenarios are not necessarily restricted to byte operations, and the techniques described in the [Blog post](https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/) can apply in other scenarios as well.\r\n\r\nSince `MemoryPool`, `Memory`, and `ReadOnlySequence` are generic `Pipe` does not necessarily need to be restricted to bytes only.\r\n\r\nThis issue proposes to add generic variants of the existing `System.IO.Pipelines` APIs and keep `Pipe` as the default implementation for `byte`-backed operations.\r\n\r\nEven though `System.IO.TextReader.ReadLine` does allocate strings on the heap, a `Pipe<string>` could still be useful for implementing a line-by-line parser (e.g. a CSV-parser).\r\n\r\nHaving a generic Pipe could also allow for efficient chaining of Pipes whenever the raw data needs to go through several stages of transformation before it reaches its final higher-level data structure.\r\n\r\n# Proposed API\r\n\r\nIn order to support a generic `Pipe<T>` class, several of the related types in `System.IO.Pipelines` will need generic variants. Wherever possible, the existing types should augment the generic APIs.\r\n\r\nAll proposed changes purposefully avoid breaking changes. With this proposal old code should still work without changes.\r\n\r\n### `PipeOptions`\r\n\r\nMove the existing API from `PipeOptions` to a new `PipeOptions<T>` and make `PipeOptions` a derivative of that.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public partial class PipeOptions<T>\r\n    {\r\n        public PipeOptions(System.Buffers.MemoryPool<T> pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long? pauseWriterThreshold = null, long? resumeWriterThreshold = null, int? minimumSegmentSize = null, bool useSynchronizationContext = true) { }\r\n        public static System.IO.Pipelines.PipeOptions<T> Default { get { throw null; } }\r\n        public int MinimumSegmentSize { get { throw null; } }\r\n        public long PauseWriterThreshold { get { throw null; } }\r\n        public System.Buffers.MemoryPool<T> Pool { get { throw null; } }\r\n        public System.IO.Pipelines.PipeScheduler ReaderScheduler { get { throw null; } }\r\n        public long ResumeWriterThreshold { get { throw null; } }\r\n        public bool UseSynchronizationContext { get { throw null; } }\r\n        public System.IO.Pipelines.PipeScheduler WriterScheduler { get { throw null; } }\r\n    }\r\n    public partial class PipeOptions : System.IO.Pipelines.PipeOptions<byte>\r\n    {\r\n        public PipeOptions(System.Buffers.MemoryPool<byte> pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long pauseWriterThreshold = (long)32768, long resumeWriterThreshold = (long)16384, int minimumSegmentSize = 2048, bool useSynchronizationContext = true) { }\r\n        public new static System.IO.Pipelines.PipeOptions Default { get { throw null; } }\r\n    }\r\n}\r\n```\r\n\r\n**Note:** The default values for thresholds and minimum segment size will need to be calculated depending on `<T>`, e.g. by using `sizeof(T)`. Therefore, the constructor of the generic `PipeOptions<T>` takes nullable values instead of using const values. The constructor of the non-generic `PipeOptions` type remains unchanged.\r\n\r\n### `ReadResult`\r\n\r\nIn order to make the `ReadResult` struct generic, a new `ReadResult<T>` needs to be defined that contains the same members as the non-generic type, but which uses a generic `ReadOnlySequence<T>`. For simplicity an implicit conversion between `ReadResult<byte>`  and `ReadResult` is added.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public readonly partial struct ReadResult\r\n    {\r\n        public static implicit operator System.IO.Pipelines.ReadResult(System.IO.Pipelines.ReadResult<byte> byteResult) { throw null; }\r\n    }\r\n    public readonly partial struct ReadResult<T>\r\n    {\r\n        private readonly object _dummy;\r\n        public ReadResult(System.Buffers.ReadOnlySequence<T> buffer, bool isCanceled, bool isCompleted) { throw null; }\r\n        public System.Buffers.ReadOnlySequence<T> Buffer { get { throw null; } }\r\n        public bool IsCanceled { get { throw null; } }\r\n        public bool IsCompleted { get { throw null; } }\r\n    }\r\n}\r\n```\r\n\r\n### `PipeWriter`\r\n\r\nSimilar to `PipeOptions`, the APIs of the original non-generic `PipeWriter` can be moved to a new `PipeWriter<T>` type, and then `PipeWriter` can derive from `PipeWriter<byte>`.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public abstract partial class PipeWriter<T> : System.Buffers.IBufferWriter<T>\r\n    {\r\n        protected PipeWriter() { }\r\n        public abstract void Advance(int count);\r\n        public abstract void CancelPendingFlush();\r\n        public abstract void Complete(System.Exception exception = null);\r\n        public abstract System.Threading.Tasks.ValueTask<System.IO.Pipelines.FlushResult> FlushAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\r\n        public abstract System.Memory<T> GetMemory(int sizeHint = 0);\r\n        public abstract System.Span<T> GetSpan(int sizeHint = 0);\r\n        public abstract void OnReaderCompleted(System.Action<System.Exception, object> callback, object state);\r\n        public virtual System.Threading.Tasks.ValueTask<System.IO.Pipelines.FlushResult> WriteAsync(System.ReadOnlyMemory<T> source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) { throw null; }\r\n    }\r\n    public abstract partial class PipeWriter : System.IO.Pipelines.PipeWriter<byte> { }\r\n}\r\n```\r\n\r\n### `PipeReader`\r\n\r\nBecause of the use of `ReadResult` in `PipeReader`, the APIs of this type need to be duplicated into a generic variant `PipeReader<T>` which used `ReadResult<T>`. Therefore, the original non-generic `PipeReader` remains unchanged, and the following new APIs are added.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public abstract partial class PipeReader<T>\r\n    {\r\n        protected PipeReader() { }\r\n        public abstract void AdvanceTo(System.SequencePosition consumed);\r\n        public abstract void AdvanceTo(System.SequencePosition consumed, System.SequencePosition examined);\r\n        public abstract void CancelPendingRead();\r\n        public abstract void Complete(System.Exception exception = null);\r\n        public abstract void OnWriterCompleted(System.Action<System.Exception, object> callback, object state);\r\n        public abstract System.Threading.Tasks.ValueTask<System.IO.Pipelines.ReadResult<T>> ReadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\r\n        public abstract bool TryRead(out System.IO.Pipelines.ReadResult<T> result);\r\n    }\r\n}\r\n```\r\n\r\n### `Pipe`\r\n\r\nThe original non-generic `Pipe` type is a sealed class, therefore the generic `Pipe<T>` should also be sealed. This makes deriving `Pipe` from `Pipe<byte>` impossible, however, so the APIs of `Pipe` are duplicated and made generic in `Pipe<T>`.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public sealed partial class Pipe<T>\r\n    {\r\n        public Pipe() { }\r\n        public Pipe(System.IO.Pipelines.PipeOptions<T> options) { }\r\n        public System.IO.Pipelines.PipeReader<T> Reader { get { throw null; } }\r\n        public System.IO.Pipelines.PipeWriter<T> Writer { get { throw null; } }\r\n        public void Reset() { }\r\n    }\r\n}\r\n```\r\n\r\n### `IDuplexPipe`\r\n\r\nIntroduce a generic clone `IDuplexPipe<T>` to the existing `IDuplexPipe` interface.\r\n\r\n``` csharp\r\nnamespace System.IO.Pipelines\r\n{\r\n    public partial interface IDuplexPipe<T>\r\n    {\r\n        System.IO.Pipelines.PipeReader<T> Input { get; }\r\n        System.IO.Pipelines.PipeWriter<T> Output { get; }\r\n    }\r\n}\r\n```\r\n\r\n# Pull Request\r\n\r\nImplementation of the proposed API changes in Pull Request #34928","Url":"https://github.com/dotnet/corefx/issues/34927","RelatedDescription":"Open issue \"API Proposal : System.IO.Pipelines generic APIs\" (#34927)"},{"Id":"404250401","IsPullRequest":false,"CreatedAt":"2019-01-29T11:41:21","Actor":"ViktorHofer","Number":"34924","RawContent":null,"Title":"BinaryFormatter Bitmap serialization test failed","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F34871~2Fmerge/test~2Ffunctional~2Fcli~2F~2Fouterloop~2F/20190128.1/workItem/System.Runtime.Serialization.Formatters.Tests/analysis/xunit/System.Runtime.Serialization.Formatters.Tests.BinaryFormatterTests~2FValidateAgainstBlobs(obj:%20Bitmap%20%7B%20Flags%20=%2077840,%20FrameDimensionsList%20=%20%5B7462dc86-6180-4c7e-8e3f-ee7333a7a483%5D,%20Height%20=%20)\r\n\r\nAssert.Equal() Failure\r\nExpected: 77840\r\nActual:   73744\r\n\r\n   at System.Runtime.Serialization.Formatters.Tests.EqualityExtensions.IsEqual(Bitmap this, Bitmap other, Boolean isSamePlatform) in /__w/1/s/src/System.Runtime.Serialization.Formatters/tests/EqualityExtensions.cs:line 1233\r\n\r\nFailing in Outerloop. @safern can you please take a look.","Url":"https://github.com/dotnet/corefx/issues/34924","RelatedDescription":"Open issue \"BinaryFormatter Bitmap serialization test failed\" (#34924)"},{"Id":"404121436","IsPullRequest":false,"CreatedAt":"2019-01-29T09:36:55","Actor":"MkazemAkhgary","Number":"34919","RawContent":null,"Title":"Why SpinLock is not re-entrant?","State":"closed","Body":"if spin lock has enough information to detect deadlock (via thread owner tracking) and throw exception, why is it not re-entrant? (or why there is no option to make it re-entrant).","Url":"https://github.com/dotnet/corefx/issues/34919","RelatedDescription":"Closed issue \"Why SpinLock is not re-entrant?\" (#34919)"},{"Id":"404131752","IsPullRequest":false,"CreatedAt":"2019-01-29T05:45:59","Actor":"dotnet-mc-bot","Number":"34920","RawContent":null,"Title":"Test failure: System.Tests.EnvironmentProcessorCount/Unix_ProcessorCountTest","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `System.Tests.EnvironmentProcessorCount/Unix_ProcessorCountTest` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\nExpected: 46\nActual:   2\n```\n\nStack Trace:\n```\n   at System.Tests.EnvironmentProcessorCount.Unix_ProcessorCountTest() in /__w/1/s/src/System.Runtime.Extensions/tests/System/Environment.ProcessorCount.cs:line 60\n```\n\nBuild : 3.0 - 20190128.7 (Core Tests)\nFailing configurations:\n- Ubuntu.1604.Arm64-arm64\n  - Release\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190128.7/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.Tests.EnvironmentProcessorCount~2FUnix_ProcessorCountTest","Url":"https://github.com/dotnet/corefx/issues/34920","RelatedDescription":"Open issue \"Test failure: System.Tests.EnvironmentProcessorCount/Unix_ProcessorCountTest\" (#34920)"},{"Id":"404121054","IsPullRequest":false,"CreatedAt":"2019-01-29T04:47:33","Actor":"MkazemAkhgary","Number":"34918","RawContent":null,"Title":"mutable structs as readonly field should be a warning","State":"open","Body":"for beginners this behavior can be unexpected. (yes it happened to me before). especially if you are using a library and you are not sure if struct is safe to be readonly or not. for example SpinLock must not be readonly.\r\n\r\n```c#\r\nreadonly MutableStruct x; // make this a warning\r\n```\r\n\r\nIf struct is immutable (via c# 7.2 readonly keyword) its ok to have it as readonly field.","Url":"https://github.com/dotnet/corefx/issues/34918","RelatedDescription":"Open issue \"mutable structs as readonly field should be a warning\" (#34918)"},{"Id":"404079489","IsPullRequest":true,"CreatedAt":"2019-01-29T03:36:18","Actor":"Dotnet-GitSync-Bot","Number":"34915","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34915","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34915)"},{"Id":"404072392","IsPullRequest":true,"CreatedAt":"2019-01-29T02:24:56","Actor":"AustinWise","Number":"34914","RawContent":null,"Title":"Correct link to example review","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/34914","RelatedDescription":"Closed or merged PR \"Correct link to example review\" (#34914)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"404602941","IsPullRequest":true,"CreatedAt":"2019-01-30T05:00:45","Actor":"CyrusNajmabadi","Number":"32943","RawContent":null,"Title":"Small amounts of cleanup","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32943","RelatedDescription":"Open PR \"Small amounts of cleanup\" (#32943)"},{"Id":"404598991","IsPullRequest":false,"CreatedAt":"2019-01-30T04:39:27","Actor":"KexyBiscuit","Number":"32942","RawContent":null,"Title":"Fix IDE0058 on lambda expression results in unexpected behavior","State":"open","Body":"**Version Used**: 3.0.19.6832 (231aeb8b)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. The following code is common in EF Core migrations.\r\n\r\n```\r\n_ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => table.PrimaryKey(\"PK_\", x => x.Id));\r\n                                      ^^^\r\n```\r\n\r\n2. Fix IDE0058 on code highlighted.\r\n\r\n**Expected Behavior**:\r\n\r\nDiscard is added at correct position.\r\n\r\n```\r\n_ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => _ = table.PrimaryKey(\"PK_\", x => x.Id));\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nDiscard is added at wrong position.\r\n\r\n```\r\n_ = _ = migrationBuilder.CreateTable(\r\n                name: \"\",\r\n                columns: table => new {},\r\n                constraints: table => table.PrimaryKey(\"PK_\", x => x.Id));\r\n```\r\n\r\nAlso, if fix other IDE0058, then select fix all, which includes the one shown above, SyntaxEditorBasedFixAllProvider will crash.\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.Kind(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.GetDeclarationKind(SyntaxNode declaration)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.AsNodeLike(SyntaxNode existingNode,SyntaxNode newNode)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ReplaceNode(SyntaxNode root,SyntaxNode declaration,SyntaxNode newDeclaration)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.ReplaceChange.Apply(SyntaxNode root,SyntaxGenerator generator)\r\n   at Microsoft.CodeAnalysis.Editing.SyntaxEditor.GetChangedRoot()\r\n   at async Microsoft.CodeAnalysis.RemoveUnusedParametersAndValues.AbstractRemoveUnusedValuesCodeFixProvider`11.FixAllAsync[TExpressionSyntax,TStatementSyntax,TBlockSyntax,TExpressionStatementSyntax,TLocalDeclarationStatementSyntax,TVariableDeclaratorSyntax,TForEachStatementSyntax,TSwitchCaseBlockSyntax,TSwitchCaseLabelOrClauseSyntax,TCatchStatementSyntax,TCatchBlockSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.FixAllWithEditorAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.FixDocumentAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeFixes.SyntaxEditorBasedCodeFixProvider.SyntaxEditorBasedFixAllProvider.GetFixAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.FixAllGetFixesService.GetFixAllOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetOperationsCoreAsync(<Unknown Parameters>)\r\n   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass17_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/32942","RelatedDescription":"Open issue \"Fix IDE0058 on lambda expression results in unexpected behavior\" (#32942)"},{"Id":"404598163","IsPullRequest":true,"CreatedAt":"2019-01-30T04:34:52","Actor":"CyrusNajmabadi","Number":"32941","RawContent":null,"Title":"Add feature to make applicable local functions static.","State":"open","Body":"Looks like this:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/51958546-430ef180-2405-11e9-92ea-d93019ffa403.png)\r\n\r\nTodo:\r\n- [ ] Tests\r\n- [ ] User facing option in Tools|Options","Url":"https://github.com/dotnet/roslyn/pull/32941","RelatedDescription":"Open PR \"Add feature to make applicable local functions static.\" (#32941)"},{"Id":"404580439","IsPullRequest":false,"CreatedAt":"2019-01-30T03:02:25","Actor":"yyjdelete","Number":"32940","RawContent":null,"Title":"The focus of IntelliSence is not right in  vs2019preview2 when async code completion=on","State":"open","Body":"**Version Used**: The one in vs2019 preview2\r\n\r\nThe testcase used to be crash in vs2019preview1(#31263), so not sure what happened in preview1. And works well in vs2017 15.9.5.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Set Options/Environment/Preview Features/`Use asynchronous code completion in C# and Basic` to on.\r\n2. Type `string.Equals(\"\",\"\",StringComparison.[cursor here, and an autocompleted char ')']` in an .cs file\r\n3. Press arrow up/down.\r\n\r\n**Expected Behavior**:\r\nSwitch between members of `StringComparison`, like it does in vs2017 15.9.5\r\n\r\n**Actual Behavior**:\r\nSwitch between the overload of method `string.Equals`.","Url":"https://github.com/dotnet/roslyn/issues/32940","RelatedDescription":"Open issue \"The focus of IntelliSence is not right in  vs2019preview2 when async code completion=on\" (#32940)"},{"Id":"404566855","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:47","Actor":"dotnet-bot","Number":"32939","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32939","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#32939)"},{"Id":"404566849","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:43","Actor":"dotnet-bot","Number":"32938","RawContent":null,"Title":"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps\ngit reset --hard upstream/dev16.0-preview3-vs-deps\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32938","RelatedDescription":"Open PR \"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps\" (#32938)"},{"Id":"404566804","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:32","Actor":"dotnet-bot","Number":"32937","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32937","RelatedDescription":"Open PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32937)"},{"Id":"404566758","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:19","Actor":"dotnet-bot","Number":"32936","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32936","RelatedDescription":"Open PR \"Merge master to dev16.1-preview1\" (#32936)"},{"Id":"404566739","IsPullRequest":true,"CreatedAt":"2019-01-30T01:55:16","Actor":"dotnet-bot","Number":"32935","RawContent":null,"Title":"Merge dev16.0-preview3 to master","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32935","RelatedDescription":"Open PR \"Merge dev16.0-preview3 to master\" (#32935)"},{"Id":"404552280","IsPullRequest":true,"CreatedAt":"2019-01-30T01:53:11","Actor":"jasonmalinowski","Number":"32932","RawContent":null,"Title":"Revert \"Delete VisualStudioMetadataReference, which was now an empty type\"","State":"closed","Body":"This reverts commit 73f1152e961c57e68c34331040e94b60c14ead24. Right now F# is still implicitly mentioning this type. This has been fixed in https://github.com/Microsoft/visualfsharp/pull/6153 but until we can get that rolled out we'll roll back the name change.","Url":"https://github.com/dotnet/roslyn/pull/32932","RelatedDescription":"Closed or merged PR \"Revert \"Delete VisualStudioMetadataReference, which was now an empty type\"\" (#32932)"},{"Id":"404436069","IsPullRequest":true,"CreatedAt":"2019-01-30T01:36:43","Actor":"jcouv","Number":"32914","RawContent":null,"Title":"Update Language Feature Status","State":"closed","Body":"@jaredpar @agocke @RikkiGibson ","Url":"https://github.com/dotnet/roslyn/pull/32914","RelatedDescription":"Closed or merged PR \"Update Language Feature Status\" (#32914)"},{"Id":"404541102","IsPullRequest":true,"CreatedAt":"2019-01-30T01:30:18","Actor":"dotnet-bot","Number":"32925","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32925","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32925)"},{"Id":"404541173","IsPullRequest":true,"CreatedAt":"2019-01-30T01:30:13","Actor":"dotnet-bot","Number":"32926","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32926","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32926)"},{"Id":"404541230","IsPullRequest":true,"CreatedAt":"2019-01-30T01:30:09","Actor":"dotnet-bot","Number":"32927","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32927","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32927)"},{"Id":"404556427","IsPullRequest":false,"CreatedAt":"2019-01-30T01:07:35","Actor":"MrTrillian","Number":"32934","RawContent":null,"Title":"#nullable enable causes bogus cycle in struct layout error","State":"open","Body":"**Version Used**: VS2019 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new .NET core C# library project\r\n2. Change the C# language version to 8.0\r\n3. Type the following code\r\n\r\n```\r\n#nullable enable\r\nstruct Foo<T>\r\n{\r\n\tstatic Foo<T> Bar;\r\n}\r\n```\r\n\r\n**Expected Behavior**: Code compiles fine whether or not `#nullable enable` is used\r\n**Actual Behavior**: With `#nullable enable` the compiler emits this error:\r\n\r\n`Error CS0523: Struct member 'Foo<T>.Bar' of type 'Foo<T>' causes a cycle in the struct layout`","Url":"https://github.com/dotnet/roslyn/issues/32934","RelatedDescription":"Open issue \"#nullable enable causes bogus cycle in struct layout error\" (#32934)"},{"Id":"404556160","IsPullRequest":true,"CreatedAt":"2019-01-30T01:06:20","Actor":"ryzngard","Number":"32933","RawContent":null,"Title":"Ignore InvalidOperationException from GetInstalledPackages","State":"open","Body":"The NFW from these aren't meaningful, and it's expected that eventually this will work. \r\n\r\nCurrent NFW reports are [here](https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&et=FAULT&sd=2018-12-29&ed=2019-01-28&pn=vs&fn=ide/vbcs/nonfatalwatson&en=nonfatalwatson&fh=13e849c3-da74-b9b7-5ed0-817c663d2226&ex=devenv&ut=external)\r\n\r\nHelps resolve part of #20101 ","Url":"https://github.com/dotnet/roslyn/pull/32933","RelatedDescription":"Open PR \"Ignore InvalidOperationException from GetInstalledPackages\" (#32933)"},{"Id":"404549199","IsPullRequest":true,"CreatedAt":"2019-01-30T00:35:30","Actor":"genlu","Number":"32931","RawContent":null,"Title":"fix some out-of-sync file names","State":"open","Body":"Noticed this while looking at some old PRs","Url":"https://github.com/dotnet/roslyn/pull/32931","RelatedDescription":"Open PR \"fix some out-of-sync file names\" (#32931)"},{"Id":"404546870","IsPullRequest":true,"CreatedAt":"2019-01-30T00:25:30","Actor":"jasonmalinowski","Number":"32930","RawContent":null,"Title":"Ensure we refresh the project output path when the obj path changes","State":"open","Body":"For legacy projects, we would update our bin path whenever the obj\r\npath was updated as a heuristic. We lost that as a part of my rewrite\r\nas a simple oversight; this restores that back.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/32711\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nIf you switch between Debug/Release, the path in a Roslyn API isn't updated. This API is used by many things, like Live Unit Testing, which causes things to get out of sync and you may see duplicate or missing tests.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/32711\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/763897\r\n\r\n### Workarounds, if any\r\n\r\nDon't switch configurations, but there's no alternative if you need to do that.\r\n\r\n### Risk\r\n\r\nLow.\r\n\r\n### Performance impact\r\n\r\nThere's a small impact because we're querying the project system for additional information. We were doing this in Dev15 so it's not a regression from our previous major release.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nThis was broken in Dev16.0 Preview 1.\r\n\r\n### Root cause analysis\r\n\r\nWe don't have any unit tests that cover this particular area. Creating tests are particularly complicated because there's a lot of mocks that are required. We're actively looking to deprecate this legacy code in future Dev16 updates.\r\n\r\n### How was the bug found?\r\n\r\nInternal testing.\r\n</details>","Url":"https://github.com/dotnet/roslyn/pull/32930","RelatedDescription":"Open PR \"Ensure we refresh the project output path when the obj path changes\" (#32930)"},{"Id":"404545767","IsPullRequest":true,"CreatedAt":"2019-01-30T00:20:23","Actor":"mavasani","Number":"32929","RawContent":null,"Title":"Bail out on delegate creation wrapped a in tuple operation","State":"open","Body":"Another case where we need PointsTo analysis for precise flow analysis, we bail out as we currently do not perform any PointsTo analysis.\r\n\r\nFixes #32903","Url":"https://github.com/dotnet/roslyn/pull/32929","RelatedDescription":"Open PR \"Bail out on delegate creation wrapped a in tuple operation\" (#32929)"},{"Id":"404541252","IsPullRequest":true,"CreatedAt":"2019-01-30T00:00:50","Actor":"dotnet-bot","Number":"32928","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32928","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#32928)"},{"Id":"404533382","IsPullRequest":false,"CreatedAt":"2019-01-29T23:29:33","Actor":"Tragetaschen","Number":"32924","RawContent":null,"Title":"\"Remove unused parameter\" IDE0060 triggered for captured parameter","State":"open","Body":"**Version Used**: \r\n16.0.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\npublic void Test(int foo) // IDE0060 triggered for foo\r\n    => Console.CancelKeyPress += (s, e) => e.Cancel = foo != 0;\r\n```\r\n\r\n**Expected Behavior**:\r\n`foo` is used, so no warning.\r\n\r\n**Actual Behavior**:\r\nThe warning is shown, there's a code fix light bulb when hovering over the parameter, but that one disappears when being clicked.","Url":"https://github.com/dotnet/roslyn/issues/32924","RelatedDescription":"Open issue \"\"Remove unused parameter\" IDE0060 triggered for captured parameter\" (#32924)"},{"Id":"404530015","IsPullRequest":false,"CreatedAt":"2019-01-29T23:16:58","Actor":"Tragetaschen","Number":"32923","RawContent":null,"Title":"Unused variable warning IDE0059 triggered on \"discard\"","State":"open","Body":"**Version Used**: \r\n16.0.0 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nprivate void test()\r\n{\r\n    ReadOnlySequence<byte> a = default;\r\n    var count = 0;\r\n    foreach (var _ in a) // IDE0059 smudge here on _\r\n        ++count;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nVS2017 doesn't show that and using `List<byte>` instead of the `ReadOnlySequence<byte>` doesn't either, so I'm not expecting to see this.\r\n\r\n**Actual Behavior**:\r\nIDE0059 is triggered and there's a light bulb is VS. However, trying to click the light bulb that appears when hovering the `_` with the mouse just makes it disappear instead of showing possible fixes. The light bulb at the line number just offers to suppress IDE0059 and unrelated code fixes (whitespace for example).\r\n\r\nTo my knowledge, this foreach loop is the only way to count the number of `ReadOnlyMemory<byte>` that make up the `ReadOnlySequence<byte>`, the `Length` property only counts the total number of bytes in the entire sequence.","Url":"https://github.com/dotnet/roslyn/issues/32923","RelatedDescription":"Open issue \"Unused variable warning IDE0059 triggered on \"discard\"\" (#32923)"},{"Id":"404526520","IsPullRequest":false,"CreatedAt":"2019-01-29T23:09:35","Actor":"gafter","Number":"32922","RawContent":null,"Title":"Need to handle array access in VisitLvalue","State":"closed","Body":"VisitLvalue in NullableWalker need to have a special case for array access, so that oblivious is properly handled in the callers.  This will be an issue once we start tracking binary states per the specification.","Url":"https://github.com/dotnet/roslyn/issues/32922","RelatedDescription":"Closed issue \"Need to handle array access in VisitLvalue\" (#32922)"},{"Id":"404524496","IsPullRequest":false,"CreatedAt":"2019-01-29T22:57:45","Actor":"jhinder","Number":"32921","RawContent":null,"Title":"Obsoletion warning is not shown for obsolete overrides of non-obsolete base members","State":"open","Body":"**Version Used**: VS 16.0 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\nabstract class Base\r\n{\r\n    public abstract void M();\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    [Obsolete]\r\n    public override void M() => throw null;\r\n\r\n    public void M2()\r\n    {\r\n        M();\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**: The call to `M` will result in a warning about using an obsolete member.\r\n\r\n**Actual Behavior**: QuickInfo will show \"[deprecated]\" for `Derived.M()`, but no warning is emitted for the call.\r\n\r\nThis is important for `Span<T>`, which overrides `Equals` and `GetHashCode`. Both of those are guaranteed to throw, and the obsoletion attribute of these methods contains important information about using these methods (e.g. to [use `==` instead of `Equals`](https://docs.microsoft.com/en-gb/dotnet/api/system.span-1.equals?view=netcore-2.2#System_Span_1_Equals_System_Object_)).","Url":"https://github.com/dotnet/roslyn/issues/32921","RelatedDescription":"Open issue \"Obsoletion warning is not shown for obsolete overrides of non-obsolete base members\" (#32921)"},{"Id":"404522133","IsPullRequest":true,"CreatedAt":"2019-01-29T22:49:40","Actor":"genlu","Number":"32920","RawContent":null,"Title":"Fix rootnamespce property name we received from project-system","State":"open","Body":"This would light up sync namespace refactoring fro CPS projects.\r\n\r\n@dotnet/roslyn-ide @jasonmalinowski ","Url":"https://github.com/dotnet/roslyn/pull/32920","RelatedDescription":"Open PR \"Fix rootnamespce property name we received from project-system\" (#32920)"},{"Id":"404511154","IsPullRequest":true,"CreatedAt":"2019-01-29T22:15:25","Actor":"mavasani","Number":"32919","RawContent":null,"Title":"Handle ICoalesceAssignmentOperation in GetValueUsageInfo(operation) h…","State":"open","Body":"…elper\r\n\r\nFixes #32842","Url":"https://github.com/dotnet/roslyn/pull/32919","RelatedDescription":"Open PR \"Handle ICoalesceAssignmentOperation in GetValueUsageInfo(operation) h…\" (#32919)"},{"Id":"404492464","IsPullRequest":true,"CreatedAt":"2019-01-29T21:22:51","Actor":"agocke","Number":"32918","RawContent":null,"Title":"Make '^' operation nodes internal","State":"open","Body":"We plan to mark this as a non-user overridable unary operator in a later release, so this node should not be in the public API.","Url":"https://github.com/dotnet/roslyn/pull/32918","RelatedDescription":"Open PR \"Make '^' operation nodes internal\" (#32918)"},{"Id":"404452349","IsPullRequest":true,"CreatedAt":"2019-01-29T19:33:36","Actor":"jaredpar","Number":"32917","RawContent":null,"Title":"Fix verify","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32917","RelatedDescription":"Open PR \"Fix verify\" (#32917)"},{"Id":"404449028","IsPullRequest":false,"CreatedAt":"2019-01-29T19:24:54","Actor":"chsienki","Number":"32916","RawContent":null,"Title":"Remove Mono CI --no-cache flag ","State":"open","Body":"PR #32885 introduce the `--no-cache` flag to mono.sh due to a mono upgrade bug (https://github.com/dotnet/roslyn/pull/32885/files#diff-f3cb96ed939670f5061167bac0220bc8R25)\r\n\r\nWe should remove this after a sufficient time that all the machines have re-cycled the docker cache to no longer contain the bugger 5.21 install in their cache.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32916","RelatedDescription":"Open issue \"Remove Mono CI --no-cache flag \" (#32916)"},{"Id":"404436226","IsPullRequest":true,"CreatedAt":"2019-01-29T18:55:58","Actor":"agocke","Number":"32915","RawContent":null,"Title":"Update Language Feature Status.md","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32915","RelatedDescription":"Closed or merged PR \"Update Language Feature Status.md\" (#32915)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"404601800","IsPullRequest":true,"CreatedAt":"2019-01-30T04:54:22","Actor":"Dotnet-GitSync-Bot","Number":"6915","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @marek-safar","Url":"https://github.com/dotnet/corert/pull/6915","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#6915)"},{"Id":"404600862","IsPullRequest":true,"CreatedAt":"2019-01-30T04:49:27","Actor":"jkotas","Number":"6914","RawContent":null,"Title":"Out of memory handling fixes","State":"open","Body":"Fixes #6912","Url":"https://github.com/dotnet/corert/pull/6914","RelatedDescription":"Open PR \"Out of memory handling fixes\" (#6914)"},{"Id":"404095205","IsPullRequest":true,"CreatedAt":"2019-01-30T02:39:16","Actor":"grant-d","Number":"6911","RawContent":null,"Title":"[NO MERGE] BitOps analysis CoreRT (WIP)","State":"closed","Body":"Update call sites for https://github.com/dotnet/coreclr/pull/22225\r\n\r\n\r\nNote that this PR will **not build** right now - it is being used to analyze the consolidation of call sites for https://github.com/dotnet/corefx/issues/32269.\r\n\r\ncc @tannergooding ","Url":"https://github.com/dotnet/corert/pull/6911","RelatedDescription":"Closed or merged PR \"[NO MERGE] BitOps analysis CoreRT (WIP)\" (#6911)"},{"Id":"403484519","IsPullRequest":true,"CreatedAt":"2019-01-30T00:23:36","Actor":"tonerdo","Number":"6902","RawContent":null,"Title":"[Interpreter] Arguments","State":"closed","Body":"This PR adds support for the following opcodes:\r\n\r\n* `ldarg.*`\r\n* `starg.*`\r\n\r\nwhich allows methods like the following to be interpreted:\r\n\r\n```csharp\r\npublic static int Sum(int a, int b)\r\n{\r\n    return a + b;\r\n}\r\n```\r\n\r\nIt also updates `InterpreterCallInterceptor` to ensure a non-zero `RuntimeMethodHandle` is returned for non-primitive argument and local variable types, which is needed for interpreting methods like the following:\r\n\r\n```csharp\r\npublic static DateTime ForwardDateTime(DateTime d)\r\n{\r\n    return d;\r\n}\r\n\r\npublic static Exception ForwardException(Exception e)\r\n{\r\n    return e;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corert/pull/6902","RelatedDescription":"Closed or merged PR \"[Interpreter] Arguments\" (#6902)"},{"Id":"404454879","IsPullRequest":true,"CreatedAt":"2019-01-29T21:38:32","Actor":"MichalStrehovsky","Number":"6913","RawContent":null,"Title":"Recover some of the size lost with AsyncMethodBuilder/Task unification","State":"closed","Body":"When we unified the implementations of these across all of our runtimes, we lost all size optimizations people have been doing on the Project N side over the past six years.\r\n\r\nThis restores a bit of the loss. For one sample app with lots of async usage, this removes 2.1 MB of generic instantiations.\r\n\r\nThere is more we can do, but I can't spend time on that right now. These two things jumped out on me when I was looking at it back in December and were an easy fix I wanted to do for a while.","Url":"https://github.com/dotnet/corert/pull/6913","RelatedDescription":"Closed or merged PR \"Recover some of the size lost with AsyncMethodBuilder/Task unification\" (#6913)"},{"Id":"404310513","IsPullRequest":false,"CreatedAt":"2019-01-29T14:13:39","Actor":"avalko","Number":"6912","RawContent":null,"Title":"Unable to allocate an array larger than 2GB","State":"open","Body":"Code example:\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n    int s = int.MaxValue / 4;\r\n    Console.WriteLine($\"alloc ({s*4} bytes)\");\r\n    var arr = new int[s];\r\n    var r = new Random();\r\n    for (int i = 0; i < s; i++)\r\n    {\r\n        arr[i] = r.Next();\r\n    }\r\n\r\n    Console.WriteLine(\"complete\");\r\n    Console.WriteLine(\"avg = \" + arr.Average());\r\n}\r\n```\r\n\r\nOn CoreCLR everything works (output):\r\n```\r\nalloc (2147483644 bytes)\r\ncomplete\r\navg = 1073756900,39117\r\n```\r\n\r\nOn CoreRT the program print `alloc (2147483644 bytes)` and ends without exception. Just stops all done.\r\n\r\nOS: **win10**\r\nBuild command: `dotnet publish -r win-x64 -c release`","Url":"https://github.com/dotnet/corert/issues/6912","RelatedDescription":"Open issue \"Unable to allocate an array larger than 2GB\" (#6912)"},{"Id":"404079527","IsPullRequest":true,"CreatedAt":"2019-01-29T01:59:43","Actor":"Dotnet-GitSync-Bot","Number":"6910","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6910","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6910)"},{"Id":"404012101","IsPullRequest":true,"CreatedAt":"2019-01-29T00:53:33","Actor":"filipnavara","Number":"6909","RawContent":null,"Title":"Update CoreFx to preview.19078.2 (master)","State":"closed","Body":"...to get up to date System.Native.","Url":"https://github.com/dotnet/corert/pull/6909","RelatedDescription":"Closed or merged PR \"Update CoreFx to preview.19078.2 (master)\" (#6909)"},{"Id":"403636861","IsPullRequest":true,"CreatedAt":"2019-01-28T04:54:37","Actor":"Dotnet-GitSync-Bot","Number":"6908","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @TomerWeisberg @benaadams","Url":"https://github.com/dotnet/corert/pull/6908","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6908)"},{"Id":"403624969","IsPullRequest":true,"CreatedAt":"2019-01-28T03:19:29","Actor":"Dotnet-GitSync-Bot","Number":"6907","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6907","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6907)"},{"Id":"403615550","IsPullRequest":true,"CreatedAt":"2019-01-28T00:49:10","Actor":"trylek","Number":"6906","RawContent":null,"Title":"Support for LDVIRTFTN on GVM's requiring instantiating stubs","State":"open","Body":"I found out that one bucket of the remaining CoreCLR CPAOT failures\r\nis caused by missing support for instantiating stubs. We must emit\r\ninstantiating stubs whenever we hit LDVIRTFTN on a generic method,\r\notherwise JIT crashes with an assertion failure.\r\n\r\nThis case was already supposed to be taken care of by means of the\r\nDynamicHelperCell representing the instantiating stub but\r\nthe implementation was incomplete. This change properly wires up\r\nthe instantiation stub logic and fixes various transitive issues\r\nit uncovered.\r\n\r\nMost notably this involved fixing the calls to DynamicHelperCell\r\nto pass around the exact method, rooting the canonical method for\r\ncompilation when emitting an instantiating stub and fixing method\r\nfixup signature formatting to include the instantiating & unboxing\r\nstub flag, otherwise we were hitting a spurious assertion failure\r\nregarding output symbol duplicates in the CPAOT object emitter.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6906","RelatedDescription":"Open PR \"Support for LDVIRTFTN on GVM's requiring instantiating stubs\" (#6906)"},{"Id":"403584857","IsPullRequest":true,"CreatedAt":"2019-01-27T21:27:15","Actor":"Dotnet-GitSync-Bot","Number":"6905","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub","Url":"https://github.com/dotnet/corert/pull/6905","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6905)"},{"Id":"403447741","IsPullRequest":true,"CreatedAt":"2019-01-27T19:50:26","Actor":"filipnavara","Number":"6898","RawContent":null,"Title":"WIP: Move Timer to shared CoreLib partition.","State":"closed","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/22231, contributes to https://github.com/dotnet/coreclr/issues/21932.","Url":"https://github.com/dotnet/corert/pull/6898","RelatedDescription":"Closed or merged PR \"WIP: Move Timer to shared CoreLib partition.\" (#6898)"},{"Id":"403501965","IsPullRequest":true,"CreatedAt":"2019-01-27T03:36:55","Actor":"Dotnet-GitSync-Bot","Number":"6903","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6903","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6903)"},{"Id":"403462114","IsPullRequest":true,"CreatedAt":"2019-01-27T01:57:40","Actor":"jkotas","Number":"6901","RawContent":null,"Title":"Disable bad CoreCLR test","State":"closed","Body":"The test makes an assumption that objects are finalized in a specific order. It is not a safe assumption to make.","Url":"https://github.com/dotnet/corert/pull/6901","RelatedDescription":"Closed or merged PR \"Disable bad CoreCLR test\" (#6901)"},{"Id":"403461759","IsPullRequest":true,"CreatedAt":"2019-01-26T18:51:32","Actor":"Dotnet-GitSync-Bot","Number":"6900","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6900","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6900)"},{"Id":"403353370","IsPullRequest":true,"CreatedAt":"2019-01-26T18:23:30","Actor":"trylek","Number":"6895","RawContent":null,"Title":"Fix catch clauses referring to a generic method argument","State":"closed","Body":"Scrutinizing the CoreCLR Pri#1 results I found a large bucket of\r\nfailures caused by mismatched catch clauses for generic exception\r\ntypes. With tons of help from Jan Vorlicek I tracked this down to\r\na subtle difference in getMethodInfo flags. I have added one of\r\nthe previously failing Pri#1 tests to the CPAOT trivial unit test\r\nsuite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6895","RelatedDescription":"Closed or merged PR \"Fix catch clauses referring to a generic method argument\" (#6895)"},{"Id":"403410281","IsPullRequest":true,"CreatedAt":"2019-01-26T17:15:23","Actor":"Dotnet-GitSync-Bot","Number":"6896","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams @benaadams @marek-safar","Url":"https://github.com/dotnet/corert/pull/6896","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6896)"},{"Id":"403453995","IsPullRequest":true,"CreatedAt":"2019-01-26T15:52:04","Actor":"MichalStrehovsky","Number":"6899","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6899","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6899)"},{"Id":"403429944","IsPullRequest":false,"CreatedAt":"2019-01-26T10:54:34","Actor":"MichalStrehovsky","Number":"6897","RawContent":null,"Title":"Expose option to completely disable reflection","State":"open","Body":"CoreRT runtime doesn't require reflection metadata to run managed code. We should expose a compiler option that skips generation of reflection metadata and switches reflection stack over to one that operates on runtime metadata only (i.e. one can use reflection to get the base type or list of interfaces, but no names, methods, fields, are exposed).","Url":"https://github.com/dotnet/corert/issues/6897","RelatedDescription":"Open issue \"Expose option to completely disable reflection\" (#6897)"},{"Id":"403220173","IsPullRequest":true,"CreatedAt":"2019-01-26T05:51:35","Actor":"Dotnet-GitSync-Bot","Number":"6894","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6894","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6894)"},{"Id":"403168509","IsPullRequest":true,"CreatedAt":"2019-01-25T15:59:55","Actor":"Dotnet-GitSync-Bot","Number":"6892","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Quogu","Url":"https://github.com/dotnet/corert/pull/6892","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6892)"},{"Id":"403190701","IsPullRequest":false,"CreatedAt":"2019-01-25T14:56:42","Actor":"letmaik","Number":"6893","RawContent":null,"Title":"Error out on unsupported NativeCallable signatures","State":"open","Body":"I'd like to do something like:\r\n\r\n```cs\r\n        [NativeCallable(EntryPoint = \"StrToInt\", CallingConvention = CallingConvention.Cdecl)]\r\n        public static int StrToInt(string a)\r\n        {\r\n            return int.Parse(a);\r\n        }\r\n```\r\n\r\nwhich builds fine, but then it crashes when I try to invoke it. I tried adding `[MarshalAs(UnmanagedType.LPStr)]` to the argument but that didn't change anything.\r\n\r\nShould this work in principle or am I missing something?\r\n\r\nEDIT: Actually, there is an error that gets printed: \"Unhandled Exception: System.FormatException: Input string was not in a correct format.\" I'm calling the shared library from Python via ctypes:\r\n\r\n```py\r\nfrom ctypes import CDLL, c_char_p\r\nLIB_PATH = \"...dll\"\r\nlib = CDLL(LIB_PATH)\r\nlib.StrToInt.argtypes = [c_char_p]\r\nassert lib.StrToInt('42'.encode('utf-8')) == 42\r\n```","Url":"https://github.com/dotnet/corert/issues/6893","RelatedDescription":"Open issue \"Error out on unsupported NativeCallable signatures\" (#6893)"},{"Id":"402984073","IsPullRequest":true,"CreatedAt":"2019-01-25T04:03:09","Actor":"Dotnet-GitSync-Bot","Number":"6890","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6890","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6890)"},{"Id":"402986311","IsPullRequest":false,"CreatedAt":"2019-01-25T03:04:40","Actor":"xiaotie","Number":"6891","RawContent":null,"Title":"Some unexpected behavior using timer with comdlg","State":"open","Body":"There are some unexpected behavior when use system timer in corert, but it is ok in dotnet core:\r\n\r\n```\r\n        private static System.Timers.Timer timer;\r\n\r\n        public static void Test()\r\n        {\r\n            timer = new System.Timers.Timer();\r\n            timer.Interval = 1000;\r\n            timer.Start();  // It is ok in dotnet core native when comment this line \r\n\r\n            for (int i = 0; i < 100; i++)\r\n                new FileDialog().RunDialog();\r\n        }\r\n```\r\n\r\nHere is the full code:  [https://github.com/xiaotie/DotNetNativeTimerBug](https://github.com/xiaotie/DotNetNativeTimerBug)","Url":"https://github.com/dotnet/corert/issues/6891","RelatedDescription":"Open issue \"Some unexpected behavior using timer with comdlg\" (#6891)"},{"Id":"402962363","IsPullRequest":true,"CreatedAt":"2019-01-25T02:14:29","Actor":"Dotnet-GitSync-Bot","Number":"6889","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @jkotas","Url":"https://github.com/dotnet/corert/pull/6889","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6889)"},{"Id":"402941757","IsPullRequest":true,"CreatedAt":"2019-01-25T01:03:07","Actor":"Dotnet-GitSync-Bot","Number":"6888","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @tannergooding","Url":"https://github.com/dotnet/corert/pull/6888","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6888)"},{"Id":"402898840","IsPullRequest":true,"CreatedAt":"2019-01-24T22:47:05","Actor":"filipnavara","Number":"6887","RawContent":null,"Title":"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.","State":"closed","Body":"Extracted from #6880. /cc @jkotas \r\n\r\nI will submit the unit tests to CoreFX soon.","Url":"https://github.com/dotnet/corert/pull/6887","RelatedDescription":"Closed or merged PR \"Fix argument checks in ThreadPool.RegisterWaitForSingleObject.\" (#6887)"},{"Id":"402779587","IsPullRequest":false,"CreatedAt":"2019-01-24T16:33:48","Actor":"letmaik","Number":"6885","RawContent":null,"Title":"Cannot open input file 'kernel32.lib'","State":"closed","Body":"I'm using the x64 Native Tools Command Prompt for VS 2017 on Windows 10.\r\nWhen trying to build the NativeLibrary example as shared library I get the following error:\r\n```\r\n> dotnet publish /p:NativeLib=Shared -r win-x64 -c Release\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 69.69 ms for C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj.\r\n  NativeLibrary -> C:\\Users\\marieche\\git\\corert\\samples\\NativeLibrary\\bin\\x64\\Release\\netstandard2.0\\win-x64\\NativeLibrary.dll\r\n  Generating native code\r\nLINK : fatal error LNK1181: cannot open input file 'kernel32.lib' [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\nC:\\Users\\...\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27323-02\\build\\Microsoft.NETCore.Native.targets(305,5): error MSB3073: The command \"link  @\"obj\\x64\\Release\\netstandard2.0\\win-x64\\native\\link.rsp\"\" exited with code 1181. [C:\\Users\\...\\git\\corert\\samples\\NativeLibrary\\NativeLibrary.csproj]\r\n```\r\n\r\nIf it helps, here are my environment variables:\r\n```\r\nALLUSERSPROFILE=C:\\ProgramData\r\nAPPDATA=C:\\Users\\...\\AppData\\Roaming\r\nCommandPromptType=Native\r\nCommonProgramFiles=C:\\Program Files\\Common Files\r\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\r\nCommonProgramW6432=C:\\Program Files\\Common Files\r\nComSpec=C:\\WINDOWS\\system32\\cmd.exe\r\nDevEnvDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\\r\nDriverData=C:\\Windows\\System32\\Drivers\\DriverData\r\nFramework40Version=v4.0\r\nFrameworkDir=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkDir64=C:\\Windows\\Microsoft.NET\\Framework64\\\r\nFrameworkVersion=v4.0.30319\r\nFrameworkVersion64=v4.0.30319\r\nFSHARPINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\\r\nHOMEDRIVE=C:\r\nHOMEPATH=\\Users\\...\r\nINCLUDE=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\include;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\include\\um;\r\nLIB=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\lib\\um\\x64;\r\nLIBPATH=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x86\\store\\references;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;\r\nLOCALAPPDATA=C:\\Users\\...\\AppData\\Local\r\nNETFXSDKDir=C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.6.1\\\r\nNUMBER_OF_PROCESSORS=4\r\nOS=Windows_NT\r\nPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\VCPackages;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\3.1;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\Roslyn;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Performance Tools;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Common\\VSPerfCollectionTools\\;C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\\MSBuild\\15.0\\bin;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\r\nPlatform=x64\r\nPROCESSOR_ARCHITECTURE=AMD64\r\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 69 Stepping 1, GenuineIntel\r\nPROCESSOR_LEVEL=6\r\nPROCESSOR_REVISION=4501\r\nProgramData=C:\\ProgramData\r\nProgramFiles=C:\\Program Files\r\nProgramFiles(x86)=C:\\Program Files (x86)\r\nProgramW6432=C:\\Program Files\r\nPROMPT=$P$G\r\nPSModulePath=C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\r\nPUBLIC=C:\\Users\\Public\r\nSESSIONNAME=Console\r\nSystemDrive=C:\r\nSystemRoot=C:\\WINDOWS\r\nSYSTEMTYPE=slate\r\nTEMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nTMP=C:\\Users\\...\\AppData\\Local\\Temp\r\nUniversalCRTSdkDir=C:\\Program Files (x86)\\Windows Kits\\10\\\r\nUSERNAME=...\r\nUSERPROFILE=C:\\Users\\...\r\nVCIDEInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\\r\nVCINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\\r\nVCToolsInstallDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\\r\nVCToolsRedistDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Redist\\MSVC\\14.16.27012\\\r\nVCToolsVersion=14.16.27023\r\nVisualStudioVersion=15.0\r\nVS150COMNTOOLS=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\\r\nVSCMD_ARG_app_plat=Desktop\r\nVSCMD_ARG_HOST_ARCH=x64\r\nVSCMD_ARG_TGT_ARCH=x64\r\nVSCMD_VER=15.9.3\r\nVSINSTALLDIR=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\\r\nwindir=C:\\WINDOWS\r\nWindowsLibPath=References\\CommonConfiguration\\Neutral\r\nWindowsSDKLibVersion=winv6.3\\\r\nWindowsSDKVersion=\\\r\nWindowsSDK_ExecutablePath_x64=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\x64\\\r\nWindowsSDK_ExecutablePath_x86=C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.6.1 Tools\\\r\n__DOTNET_ADD_64BIT=1\r\n__DOTNET_PREFERRED_BITNESS=64\r\n__VSCMD_PREINIT_PATH=C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Docker\\Docker\\Resources\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\CMake\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Users\\...\\AppData\\Roaming\\local\\bin;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\...\\.dotnet\\tools;C:\\Program Files\\nuget;C:\\Users\\...\\AppData\\Roaming\\npm;C:\\Users\\...\\AppData\\Local\\Microsoft\\WindowsApps\r\n```\r\n(Note that I masked out my username)","Url":"https://github.com/dotnet/corert/issues/6885","RelatedDescription":"Closed issue \"Cannot open input file 'kernel32.lib'\" (#6885)"},{"Id":"402774927","IsPullRequest":false,"CreatedAt":"2019-01-24T16:00:35","Actor":"letmaik","Number":"6884","RawContent":null,"Title":"Update console build instructions","State":"closed","Body":"https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built\r\n\r\nThe extra lines in the project template are described with \"Important: A few lines at the top and at the bottom are different from the default template - don't miss updating them!\". However, this seems to be outdates as none of the samples have them. E.g. https://github.com/dotnet/corert/blob/master/samples/HelloWorld/HelloWorld.csproj","Url":"https://github.com/dotnet/corert/issues/6884","RelatedDescription":"Closed issue \"Update console build instructions\" (#6884)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"404558166","IsPullRequest":true,"CreatedAt":"2019-01-30T01:15:32","Actor":"zamont","Number":"2886","RawContent":null,"Title":"Add a new task FilterManagedAssemblies into Microsoft.NET.Build.Tasks","State":"open","Body":"The FilterManagedAssemblies task takes in a list of files and a switch to\r\nrestrict the managed assemblies to IL ONLY and returns those that are\r\nmanaged assemblies and conditionally are IL ONLY.","Url":"https://github.com/dotnet/sdk/pull/2886","RelatedDescription":"Open PR \"Add a new task FilterManagedAssemblies into Microsoft.NET.Build.Tasks\" (#2886)"},{"Id":"404541551","IsPullRequest":true,"CreatedAt":"2019-01-30T00:01:56","Actor":"dotnet-bot","Number":"2885","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2885","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2885)"},{"Id":"404541543","IsPullRequest":true,"CreatedAt":"2019-01-30T00:01:54","Actor":"dotnet-bot","Number":"2884","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2884","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2884)"},{"Id":"404060640","IsPullRequest":true,"CreatedAt":"2019-01-29T23:01:16","Actor":"wli3","Number":"2876","RawContent":null,"Title":"Fix shim apphost","State":"closed","Body":"Will squash before merge. Will hold for preview 3\r\n\r\nIt might be hard to read from direct diff. 798624c is the initial change to make it work. After that are all refactorings to separate it into 2 Targets.\r\n\r\nFix https://github.com/dotnet/sdk/issues/2867","Url":"https://github.com/dotnet/sdk/pull/2876","RelatedDescription":"Closed or merged PR \"Fix shim apphost\" (#2876)"},{"Id":"404525303","IsPullRequest":true,"CreatedAt":"2019-01-29T23:00:31","Actor":"wli3","Number":"2883","RawContent":null,"Title":"Fix shim apphost without separate target","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2883","RelatedDescription":"Open PR \"Fix shim apphost without separate target\" (#2883)"},{"Id":"404061747","IsPullRequest":true,"CreatedAt":"2019-01-29T21:14:36","Actor":"dotnet-bot","Number":"2877","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2877","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#2877)"},{"Id":"404061761","IsPullRequest":true,"CreatedAt":"2019-01-29T21:14:32","Actor":"dotnet-bot","Number":"2878","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2878","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2878)"},{"Id":"404459898","IsPullRequest":false,"CreatedAt":"2019-01-29T19:53:39","Actor":"sxmanton","Number":"2882","RawContent":null,"Title":"ProjectReference doesn't behave the same as PackageReference for contentFiles","State":"open","Body":"Hi, I have a library project which builds a Package with a config file which is placed in `contentFiles\\any\\any` with PackageCopyToOutput set to true. When installing this as a PackageReference, the config file is copied to the output directory of the consuming project as expected. However, when referencing it as a ProjectReference in a Tester app in the same solution, the config file is not copied to output. \r\n\r\nIs there some way to achieve the same behavior between the ProjectReference and PackageReference that I'm missing here? If not, this seems like a deficiency of the current system. It seems very odd to me that ProjectReference functions equivalently as PackageReference in terms of defining transitive dependencies (even supports PrivateAssets, IncludeAssets, etc.), but does not behave the same for copying contentFiles.","Url":"https://github.com/dotnet/sdk/issues/2882","RelatedDescription":"Open issue \"ProjectReference doesn't behave the same as PackageReference for contentFiles\" (#2882)"},{"Id":"404423399","IsPullRequest":true,"CreatedAt":"2019-01-29T18:19:00","Actor":"peterhuene","Number":"2881","RawContent":null,"Title":"[WIP] Ensure Microsoft.NETCore.App is an implicit dependency for publish.","State":"open","Body":"This commit ensures that we exclude files from the `Microsoft.NETCore.App`\r\nplatform library on publish when the platform library is\r\n`Microsoft.AspNetCore.App`, which doesn't have an explicit dependency on\r\n`Microsoft.NETCore.App`.\r\n\r\nWhen publishing a 2.x ASP.NET application, the `MicrosoftNETPlatformLibrary`\r\nproperty gets changed by ASP.NET to `Microsoft.AspNetCore.App`.  This causes\r\nthe task responsible for determining what files to copy locally to treat files\r\nfrom `Microsoft.NETCore.App` and its dependencies as not being part of the\r\nplatform.\r\n\r\nHowever, when publishing the application as framework-dependent, almost all the\r\nplatform files get excluded thanks to conflict resolution which has the files\r\nas part of the platform manifest and preferred packages.  Unfortunately, the\r\napphost, hostpolicy, and hostfxr files are not part of these lists and as a\r\nresult will be copied locally.\r\n\r\nThis breaks framework-dependent apphost activation because hostfxr and\r\nhostpolicy are copied locally.  Additionally, these files end up in the\r\ndeps.json file which also prevents roll-forward activation if the two files are\r\nmanually deleted.\r\n\r\nThe fix is to treat `Microsoft.NETCore.App` as an implicit dependency of\r\n`Microsoft.AspNetCore.App` where we calculate the list of excluded packages for\r\na framework-dependent publish.\r\n\r\nFixes dotnet/cli#10602.","Url":"https://github.com/dotnet/sdk/pull/2881","RelatedDescription":"Open PR \"[WIP] Ensure Microsoft.NETCore.App is an implicit dependency for publish.\" (#2881)"},{"Id":"404087126","IsPullRequest":false,"CreatedAt":"2019-01-29T01:54:52","Actor":"dsplaisted","Number":"2880","RawContent":null,"Title":"\"salt\" MSBuild handshake in test / dogfood environment","State":"open","Body":"Right now for our tests (and in the dogfood script) we override the MSBuildSDKsPath to point MSBuild to the SDK under test.  However, this doesn't seem to prevent sharing MSBuild nodes that didn't have this set, which can end up causing assembly loading or other issues.\r\n\r\nIdeally in our test environment we would add a \"salt\" to the node connection handshake, so that MSBuild would only be able to connect to nodes that come from the same test environment.\r\n\r\nThis would probably require a change in MSBuild to allow us to provide such a \"salt\".\r\n\r\n@rainersigwald, thoughts?","Url":"https://github.com/dotnet/sdk/issues/2880","RelatedDescription":"Open issue \"\"salt\" MSBuild handshake in test / dogfood environment\" (#2880)"},{"Id":"404073631","IsPullRequest":false,"CreatedAt":"2019-01-29T00:53:11","Actor":"mairaw","Number":"2879","RawContent":null,"Title":"Don't reuse the https://aka.ms/sdkimplicitrefs link to indicate version should not be indicated","State":"open","Body":"This comes from a discussion at https://github.com/dotnet/docs/issues/8691 and my proposal can be found at https://github.com/dotnet/docs/issues/8691#issuecomment-448343752\r\n\r\nCustomers are getting the following error:\r\nNETSDK1071: A PackageReference to 'Microsoft.AspNetCore.All' specified a Version of 2.2.0-preview3-35497. Specifying the version of this package is not recommended. For more information, see https://aka.ms/sdkimplicitrefs. However, this document does not cover how Microsoft.AspNetCore.All should actually be referenced in this situation.\r\n\r\nHowever, specifying the version of a package has nothing to do with implicit package references, so I don't think we should be using that same link for this error message. \r\nWe should create a new aka.ms link for that error and that link would point to a different location in the ASP.NET docs TBD.\r\n\r\n/cc @Rick-Anderson","Url":"https://github.com/dotnet/sdk/issues/2879","RelatedDescription":"Open issue \"Don't reuse the https://aka.ms/sdkimplicitrefs link to indicate version should not be indicated\" (#2879)"},{"Id":"404001119","IsPullRequest":false,"CreatedAt":"2019-01-28T20:50:09","Actor":"natemcmaster","Number":"2875","RawContent":null,"Title":"Cannot force ResolveFrameworkReference to avoid downloading targeting packs","State":"open","Body":"Feature request: for the sake of things like source-build and building your own targeting pack (e.g. https://github.com/aspnet/AspNetCore), I'd like to be able to force the SDK into an \"offline mode\" which fails instead of attempting to download targeting packs. The current code only checks for `Directory.Exists`\r\n\r\nhttps://github.com/dotnet/sdk/blob/915adb77cc3763f88aca3da622961abd54f100f2/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L126\r\n\r\n\r\n**Options I've considered:**\r\n\r\n* Add a global property, like `DisableTargetingPackAcquisition`\r\n* Add something to `KnownFrameworkReference` or `<FrameworkReference>` as metadata\r\n\r\ncc @dsplaisted @nguerrera\r\n","Url":"https://github.com/dotnet/sdk/issues/2875","RelatedDescription":"Open issue \"Cannot force ResolveFrameworkReference to avoid downloading targeting packs\" (#2875)"},{"Id":"403377692","IsPullRequest":true,"CreatedAt":"2019-01-28T17:09:42","Actor":"dotnet-bot","Number":"2873","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2873","RelatedDescription":"Closed or merged PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2873)"},{"Id":"403387485","IsPullRequest":true,"CreatedAt":"2019-01-26T03:38:39","Actor":"peterhuene","Number":"2874","RawContent":null,"Title":"Add test for ComposeStore target for netcoreapp3.0.","State":"closed","Body":"This PR adds a test to cover using the `ComposeStore` target from a\r\nproject targeting `netcoreapp3.0`.\r\n\r\nThe test is intended to replicate similar tests we have in `dotnet/cli`\r\nso that we can catch regression of the `dotnet store` command in the SDK\r\nrepo.\r\n\r\nThe test ensures `ComposeStore` will work when targeting `netcoreapp3.0`\r\nand that the underlying issue (a reference to `Microsoft.NETCore.App`\r\nbeing added without a version) is checked for.","Url":"https://github.com/dotnet/sdk/pull/2874","RelatedDescription":"Closed or merged PR \"Add test for ComposeStore target for netcoreapp3.0.\" (#2874)"},{"Id":"403036161","IsPullRequest":true,"CreatedAt":"2019-01-25T22:34:19","Actor":"wli3","Number":"2870","RawContent":null,"Title":"WIP proposed fix for missing shims","State":"closed","Body":"If this route is good. Add shim filed to ResolveFrameworkReferences.\r\n\r\nPending. remove cache from resolve package. and shim related code","Url":"https://github.com/dotnet/sdk/pull/2870","RelatedDescription":"Closed or merged PR \"WIP proposed fix for missing shims\" (#2870)"},{"Id":"402899283","IsPullRequest":true,"CreatedAt":"2019-01-25T18:32:00","Actor":"peterhuene","Number":"2860","RawContent":null,"Title":"Fix _RestoreCrossgen target dependency.","State":"closed","Body":"The `_RestoreCrossgen` target depends on a package reference to\r\n`Microsoft.NETCore.App` to be present.  However, for `netcoreapp3`\r\ntargeted applications, this requires the `ResolveFrameworkReferences`\r\ntarget to execute.\r\n\r\nThis commit adds a target dependency from `_RestoreCrossgen` to\r\n`ResolveFrameworkReferences` so that the package references are\r\npopulated when coming from a framework reference.\r\n\r\nFixes the CLI tests around `dotnet store` that invoke the crossgen\r\ntargets.","Url":"https://github.com/dotnet/sdk/pull/2860","RelatedDescription":"Closed or merged PR \"Fix _RestoreCrossgen target dependency.\" (#2860)"},{"Id":"402909653","IsPullRequest":true,"CreatedAt":"2019-01-25T17:10:27","Actor":"johnbeisner","Number":"2866","RawContent":null,"Title":"Update PerfGroovy - release/2.1.4xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2866","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.4xx\" (#2866)"},{"Id":"403237287","IsPullRequest":true,"CreatedAt":"2019-01-25T16:52:30","Actor":"mmitche","Number":"2872","RawContent":null,"Title":"Reclassify signtool dependency","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2872","RelatedDescription":"Closed or merged PR \"Reclassify signtool dependency\" (#2872)"},{"Id":"403163675","IsPullRequest":false,"CreatedAt":"2019-01-25T13:46:22","Actor":"marcelopinheiro-bpp","Number":"2871","RawContent":null,"Title":"Problems to load project because of  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets","State":"open","Body":"When loading a Project inside my solution, I  was receiving errors of files not found in the \"ImportAfter\" Directory (C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.Targets\\ImportAfter).\r\n\r\nSo I added manually the files \r\n* Microsoft.NET.Build.Extensions.targets\r\n* Microsoft.NET.DefaultPackageConflictOverrides.targets\r\n* Microsoft.NET.Build.Extensions.NETFramework.targets\r\n* Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n\r\nBecause they didn't came together the Visual Studio Community installation.\r\n\r\nAfter that, a received this error (The error is in PT-BR):\r\n```\r\nHouve uma tentativa de comparação numérica em \"$(_TargetFrameworkVersionWithoutV)\", que é avaliada como \"\" em vez de um número, na condição \"'$(ImplicitlyExpandNETStandardFacades)' == '' AND '$(_TargetFrameworkVersionWithoutV)' >= '4.6.1'\".  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets\r\n```\r\n\r\nI don't know what to modify or what to do now. Thanks for the attention\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2871","RelatedDescription":"Open issue \"Problems to load project because of  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NET.Build.Extensions.NETFramework.targets\" (#2871)"},{"Id":"403026343","IsPullRequest":false,"CreatedAt":"2019-01-25T06:44:09","Actor":"roozbehid","Number":"2869","RawContent":null,"Title":"PackageReference and local mscorlib.dll cause problem","State":"open","Body":"Following project file\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n    \r\n      <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>net461</TargetFramework>\r\n      </PropertyGroup>\r\n    \r\n      <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.Build\" Version=\"15.3.409\" />\r\n      </ItemGroup>\r\n    \r\n    </Project>\r\n\r\nin the same folder add -empty or valid - mscorlib.dll file.\r\nThen ResolveAssemblyReference would want to use it and will cause problems.\r\n\r\nI experienced with some attributes to include it but none worked, like those referenced in https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2017\r\n\r\nFor example following feels like from docs should work, but it doesnt! (same with `<Content Include`)\r\n\r\n      <ItemGroup>\r\n        <Content Update=\"mscorlib.dll\">\r\n          <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n          <IsAssembly>False</IsAssembly>\r\n          <PublishState>DataFile</PublishState>\r\n        </Content>\r\n      </ItemGroup>\r\n\r\nUsing TargetFramework of `netcoreapp2.0` will work though!\r\n\r\nError is either a crash in ResolveAssemblyReference or problem with referencing two mscorlib.dll files!","Url":"https://github.com/dotnet/sdk/issues/2869","RelatedDescription":"Open issue \"PackageReference and local mscorlib.dll cause problem\" (#2869)"},{"Id":"402963538","IsPullRequest":true,"CreatedAt":"2019-01-25T01:10:32","Actor":"cdmihai","Number":"2868","RawContent":null,"Title":"Fix transitive references","State":"open","Body":"Fixes #2855\r\n","Url":"https://github.com/dotnet/sdk/pull/2868","RelatedDescription":"Open PR \"Fix transitive references\" (#2868)"},{"Id":"402956582","IsPullRequest":false,"CreatedAt":"2019-01-25T00:37:00","Actor":"natemcmaster","Number":"2867","RawContent":null,"Title":"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065","State":"open","Body":"**Repro**\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackAsToolShimRuntimeIdentifiers>win-x64;win-x86</PackAsToolShimRuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet pack`\r\n\r\n**Result**\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\3.0.100-preview-010166\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(228,5): error NETSDK1065: Cannot find app host for win-x64. win-x64 could be an invalid runtime identifier (RID). For more information about RID, see https://aka.ms/rid-catalog. [C:\\src\\aspnet\\BuildTools\\repro\\CliTool\\CliTool.csproj]\r\n```\r\n\r\n**Details**\r\n\r\nUsing 3.0.100-preview-010166\r\n\r\ncc @nguerrera @wli3 ","Url":"https://github.com/dotnet/sdk/issues/2867","RelatedDescription":"Open issue \"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065\" (#2867)"},{"Id":"402909592","IsPullRequest":true,"CreatedAt":"2019-01-25T00:08:22","Actor":"johnbeisner","Number":"2861","RawContent":null,"Title":"Update PerfGroovy - master","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2861","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - master\" (#2861)"},{"Id":"402909604","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:29","Actor":"johnbeisner","Number":"2862","RawContent":null,"Title":"Update PerfGroovy - release/2.2.2xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2862","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.2xx\" (#2862)"},{"Id":"402909622","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:25","Actor":"johnbeisner","Number":"2863","RawContent":null,"Title":"Update PerfGroovy - release/2.2.1xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2863","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.2.1xx\" (#2863)"},{"Id":"402909629","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:21","Actor":"johnbeisner","Number":"2864","RawContent":null,"Title":"Update PerfGroovy - release/2.1.6xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2864","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.6xx\" (#2864)"},{"Id":"402909644","IsPullRequest":true,"CreatedAt":"2019-01-25T00:04:16","Actor":"johnbeisner","Number":"2865","RawContent":null,"Title":"Update PerfGroovy - release/2.1.5xx","State":"closed","Body":"For Windows: only x86 is supported at this time; archive the bin logs.\r\n\r\nThe performance machines launch a 'SysWOW64' command shell - therefore the performance tests are running against a x86 installed SDK.","Url":"https://github.com/dotnet/sdk/pull/2865","RelatedDescription":"Closed or merged PR \"Update PerfGroovy - release/2.1.5xx\" (#2865)"},{"Id":"401967744","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:51","Actor":"NikolaMilosavljevic","Number":"2857","RawContent":null,"Title":"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5","State":"closed","Body":"Update version of .NET Framework reference assemblies package, to latest.","Url":"https://github.com/dotnet/sdk/pull/2857","RelatedDescription":"Closed or merged PR \"Update .NET Framework Reference Assemblies version to 1.0.0-alpha-5\" (#2857)"},{"Id":"402697342","IsPullRequest":true,"CreatedAt":"2019-01-24T14:29:28","Actor":"dotnet-maestro[bot]","Number":"2859","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19073.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19073.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2859","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2859)"},{"Id":"402080266","IsPullRequest":true,"CreatedAt":"2019-01-23T17:24:55","Actor":"dotnet-maestro[bot]","Number":"2858","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19072.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19072.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2858","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2858)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1090316959105740800","CreatedAt":"2019-01-29T18:33:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.0 Preview 2 https://t.co/fTITKUpdtp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":85,"FavoriteCount":42,"RawContent":null},{"Id":"1090308114073571328","CreatedAt":"2019-01-29T17:58:05+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 2 https://t.co/OgRjiaV6ys","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":265,"FavoriteCount":185,"RawContent":null},{"Id":"1088888461006782465","CreatedAt":"2019-01-25T19:56:54+00:00","UserScreenname":"dotnet","Text":"Debugging .NET Apps with Time Travel Debugging (TTD) by @fujiy https://t.co/VHwBMfDCSv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":119,"FavoriteCount":68,"RawContent":null},{"Id":"1088327156449476608","CreatedAt":"2019-01-24T06:46:28+00:00","UserScreenname":"dotnet","Text":"Come work for @amandaksilver. She’s a great boss and has an amazing team with lots of influence on the dev experien… https://t.co/LW30IafmZa","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":31,"FavoriteCount":8,"RawContent":null},{"Id":"1088226836696317952","CreatedAt":"2019-01-24T00:07:50+00:00","UserScreenname":"dotnet","Text":"Join Jeff and Allison tomorrow and learn about the AWESOME new tools in @VisualStudio https://t.co/GgR00dulgQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-01-30T05:30:53.7962307Z","RunDurationInMilliseconds":20217}