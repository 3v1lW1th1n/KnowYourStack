{"Data":{"Blog":{"FeedItems":[{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null},{"Title":"Update Your Xamarin.Mac Apps for 64-bit Today!","PublishedOn":"2018-05-14T18:33:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last June, Apple announced that upcoming macOS releases would only support 32-bit applications “with compromises”. If your Mac application is not 64-bit, we strongly recommend taking action to avoid...","Href":"https://blog.xamarin.com/update-xamarinmac-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7814759790","Type":"PullRequestEvent","CreatedAt":"2018-06-12T20:08:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1809","RelatedDescription":"Merged pull request \"[build] Build the latest stable platform.\" (#1809) at xamarin/xamarin-android","RelatedBody":"Commit 01988e0 broke `ResolveSdks` because it forced\r\nthe system to build the v1.0 and v9.0 apis. v9.0 is\r\nunstable, as a result the following exception occurs\r\n\r\n\tThe \"ResolveSdks\" task failed unexpectedly.\r\n\tSystem.NullReferenceException: Object reference not set to an instance of an object\r\n\r\nThis is because there are NO stable api's available.\r\n\r\nThis commit resets the system to build the latest stable api.\r\n"},{"Id":"7811642219","Type":"IssuesEvent","CreatedAt":"2018-06-12T10:47:58","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1810","RelatedDescription":"Opened issue \"There is no way to stop build: DownloadUri build task does not handle cancellation\" (#1810) at xamarin/xamarin-android","RelatedBody":"xamarin-android build involves annoyingly slow downloads. So sometimes we try to build it by `make prepare` and it never finishes. Too slow downloads. We enter CTRL+C to stop it and try to make changes to network connection, but CTRL+C never stops it. It is due to hacky `DownloadUri` task that does not handle asynchronous cancellation.\r\n\r\nexpected results: build cancellation just works.\r\n"},{"Id":"7811368257","Type":"PullRequestEvent","CreatedAt":"2018-06-12T09:53:20","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1809","RelatedDescription":"Opened pull request \"[build] Build the latest stable platform.\" (#1809) at xamarin/xamarin-android","RelatedBody":"Commit 01988e08 broke `ResolveSdks` because it forced\r\nthe system to build the v1.0 and v9.0 apis. v9.0 is\r\nunstable, as a result the following exception occurs\r\n\r\n\t/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018: The \"ResolveSdks\" task failed unexpectedly. [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:   at Xamarin.Android.Tasks.ResolveSdks.GetMaxStableApiLevel () [0x0000b] in <aee17dcc5be0443681aca71d80347e80>:0  [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:   at Xamarin.Android.Tasks.ResolveSdks.ValidateApiLevels () [0x00051] in <aee17dcc5be0443681aca71d80347e80>:0  [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:   at Xamarin.Android.Tasks.ResolveSdks.RunTask () [0x007f7] in <aee17dcc5be0443681aca71d80347e80>:0  [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:   at Xamarin.Android.Tasks.ResolveSdks.Execute () [0x00002] in <aee17dcc5be0443681aca71d80347e80>:0  [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in <24bc6288c5b04a3da2a58b4fda160e2d>:0  [/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/TestDebug/temp/Aapt2Disabled/UnnamedProject.csproj]\r\n/Users/dean/Documents/Sandbox/Xamarin/xamarin-android/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/Xamarin.Android.Common.targets(665,2): error MSB4018:\r\n\r\nThis is because there are NO stable api's available.\r\n\r\nThis commit resets the system to build the latest stable api."},{"Id":"7811239061","Type":"IssuesEvent","CreatedAt":"2018-06-12T09:30:33","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1519","RelatedDescription":"Reopened issue \"Deploying to Android fails with zipalign error\" (#1519) at xamarin/xamarin-android","RelatedBody":"_From @johnshardman on April 4, 2018 10:25_\n\nBug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nAfter upgrading Visual Studio to 15.6, deployment of app to Android (physical devices and emulators) failed with a zipalign error.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Check the \"Generate one package (.apk) per selected ABI\" option in the Android project properties.\r\n2. Hit F5\r\n\r\n### Expected Behavior\r\n\r\nApp should build, deploy and run in debug mode.\r\n\r\n### Actual Behavior\r\n\r\nDeployment error reported:\r\n\r\nAndroidZipAlign Task\r\nAlignment: 4\r\nSource: G:\\tfs\\MyApp\\Top\\MyApp.Android\\obj\\Debug\\android\\bin\\com.MyApp.MyApp-arm64-v8a.apk\r\nDestinationDirectory: bin\\Debug\\\r\nC:\\ProgramFiles\\Android\\AndroidSDK\\build-tools\\25.0.2\\zipalign.exe 4 \"G:\\tfs\\MyApp\\Top\\MyApp.Android\\obj\\Debug\\android\\bin\\com.MyApp.MyApp-arm64-v8a.apk\" \"bin\\Debug\\com.MyApp.MyApp-arm64-v8a-Signed.apk\" \r\nOutput file 'bin\\Debug\\com.MyApp.MyApp-arm64-v8a-Signed.apk' exists\r\n\"zipalign.exe\" exited with code 1.\r\nDone executing task \"AndroidZipAlign\" -- FAILED\r\n\r\n### Basic Information\r\n\r\nVS 15.6\r\nXF 2.4.0.38779\r\n\r\nI'm not the only one seeing this. @batmaci has also reported it at https://forums.xamarin.com/discussion/comment/325764\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#2243_"},{"Id":"7809605034","Type":"PullRequestEvent","CreatedAt":"2018-06-12T01:39:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1808","RelatedDescription":"Opened pull request \"[build] Normal & Diagnostic Log Verbosity, at once!\" (#1808) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1792\r\n\r\nWe have a bit of a conundrum: when things break, the diagnostic build\r\nlogs are *essential* to tracking down *why* something broke.\r\n\r\nHowever, the sheer *verbosity* of those diagnostic logs makes it\r\ndifficult to determine *what* broke; it's very easy to get lost.\r\nAdditionally, the gigantic log files make the **Console Output**\r\nJenkins link nearly useless, as most web browsers will cease up when\r\nattempting to download ~1GB log files.\r\n\r\nSplit the difference: introduce a new `$(call MSBUILD_BINLOG)` syntax\r\nwhich creates an [MSBuild binary log][0] file, which is like\r\ndiagnostic output *but even moreso*, while *also* overriding the\r\nconsole logging to `/v:normal`.\r\n\r\n[0]: https://github.com/Microsoft/msbuild/wiki/Binary-Log\r\n\r\nThis should allow the **Console Output** link to be a bit more\r\nreasoanble, and if something goes wrong we can download the separate\r\n`*.binlog` files for further analysis.\r\n\r\nMSBuild binary log files can be read with MSBuild itself:\r\n\r\n\tmsbuild /v:diag bin/BuildDebug/msbuild-*.binlog\r\n\r\nNote: above command will actually fail; you can only print one log\r\nfile at a time with that syntax.\r\n\r\nThe created log files follow the pattern `msbuild-EPOCH-NAME`, where\r\nEPOCH is the `time_t`/Unix epoch value *at the time the command was\r\nexecuted*.  This should allow filenames to be non-colliding, and allow\r\nplausibly sane sorting behavior.  (Maybe.)"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7815782356","Type":"IssuesEvent","CreatedAt":"2018-06-13T00:23:43","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3026","RelatedDescription":"Opened issue \"[iOS] ListView throw ArgumentNullException when HasUnevenRows = true and no ItemTemplate specified\" (#3026) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nUsing a ListView with no ItemTemplate specified (i.e., defaults to a `TextCell` with `HasUnevenRows` causes a crash when attempting to cache the prototypical cell because the key it tries to store it as is null.\r\n\r\nRelated to #1143\r\n\r\n### Steps to Reproduce\r\n\r\n```csharp\r\npublic class ListPage : ContentPage\r\n\t\t{\r\n\t\t\tpublic ListPage()\r\n\t\t\t{\r\n\t\t\t\tvar listView = new ListView(ListViewCachingStrategy.RecycleElement) { AutomationId = \"ListView\", HasUnevenRows = true, ItemsSource = Enumerable.Range(0, 10).Select(i => $\"Item {i}\") };\r\n\t\t\t\tContent = listView;\r\n\t\t\t}\r\n\t\t}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nShow 10 items in a list\r\n\r\n### Actual Behavior\r\n\r\nCrashes: `ArgumentNullException: parameter name key`\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0\r\n- Last known good version: ? probably 2.4.0\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS: 11.3 <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n"},{"Id":"7815746171","Type":"PullRequestEvent","CreatedAt":"2018-06-13T00:09:51","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3025","RelatedDescription":"Opened pull request \"Make ScrollViewRenderer on Android handle double disposal\" (#3025) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe Android ScrollViewRenderer is missing a check against double disposal, and in circumstances where Dispose is called twice it throws a NullReferenceException.\r\n\r\nThis change adds a guard against double disposal, checks the Tracker and Container for null before disposing, only calls SetElement during deterministic disposal, and calls the base Dispose method in the correct order.\r\n\r\n### Issues Resolved ###\r\n\r\n- #1931 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7814832111","Type":"IssuesEvent","CreatedAt":"2018-06-12T20:22:53","Actor":"AliParLouS","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3024","RelatedDescription":"Opened issue \"Can't call WCF methods in Xamarin.Forms (Cross-Platform)\" (#3024) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHi,\r\nI just create a simple WCF project with default values (without change even a single line of code), i publish it in web, Consume it in EXE application and it work fine, Cosume it in asp.net webform and it work fine.\r\n\r\nNow i create another simple Xamarin Cross-Platform with .Net Standard 2 (UWP, iOS, Android), Used \"Microsoft WCF Web Service Reference Provider\" and i checked all 3 project in **UWP work fine** but in android and iOS can't call GetDataAsync().\r\n\r\n### Steps to Reproduce\r\n\r\nXamarin button clicked code : \r\n```\r\nService1Client client = new Service1Client(Service1Client.EndpointConfiguration.BasicHttpsBinding_IService1);\r\nstring returnString;\r\nreturnString = await client.GetDataAsync(Convert.ToInt32(entNumber.Text));\r\nlblResult.Text = returnString;\r\nawait client.CloseAsync();\r\n```\r\n\r\n### Expected Behavior\r\nIt should return an string like \"You entered : 123\" into a label\r\n\r\n### Actual Behavior\r\n### Android runtime error after clicked button :\r\n\r\n> \r\n> Unhandled Exception:\r\n> \r\n> System.ServiceModel.FaultException`1[[System.ServiceModel.ExceptionDetail, System.ServiceModel, Version=2.0.5.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]: Error in deserializing body of request message for operation 'GetData'. OperationFormatter encountered an invalid Message body. Expected to find node type 'Element' with name 'GetData' and namespace 'http://tempuri.org/'. Found node type 'Element' with name 'GetDataAsync' and namespace 'http://tempuri.org/'\r\n\r\n### iOS runtime error after clicked button :\r\n\r\n> Unhandled Exception:\r\n> \r\n> System.InvalidOperationException: MonoTouch does not support dynamic proxy code generation. Override this method or its caller to return specific client proxy instance\r\n\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:15.7.3\r\n- Platform Target Frameworks: Net Standard 2.0 <!-- All that apply -->\r\n  - iOS: 11.12.0.4 <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: 8.3.3.2<!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  Couldn't find UWP version<!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\nXamarin.Forms 3.0.0.550146\r\nXamarin.Android.Support.v7.MediaRouter 25.4.0.2\r\nXamarin.Android.Support.v7.CardView 25.4.0.2\r\nXamarin.Android.Support.v7.AppCompat 25.4.0.2\r\nXamarin.Android.Support.v4 25.4.0.2\r\nXamarin.Android.Support.Design 25.4.0.2\r\nSystem.ServiceModel.Security 4.4.0\r\nSystem.ServiceModel.NetTcp 4.4.0\r\nSystem.ServiceModel.Http 4.4.0\r\nSystem.ServiceModel.Duplex 4.4.0\r\nNETStandard.Library 2.0.1\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.1.5\r\n- Affected Devices:\r\nAndroid : Note 4, Android Emulator 7.1\r\niOS : iPhone 6 Plus Emulator\r\nUWP : Local Machine\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7814320527","Type":"IssuesEvent","CreatedAt":"2018-06-12T18:40:05","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2254","RelatedDescription":"Closed issue \"Cannot register properly custom renderer if placed into an external library\" (#2254) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nHi,\r\n\r\nI'm trying to create a library with all my custom renderers but not all of them get registered properly. I can't see some customizations after installing my **NuGet** library into my PCL project. For example, my **Android** custom ScrollView renderer has a method to show/hide scrollbars. Even if that method is called, scrollbars are always shown. The code works fine, I had it in all my Apps. The problem occurs when moving the custom renderer into an external library. Everything works just fine if I leave the custom renderer into my project as a standard class.\r\n\r\n### Steps to Reproduce\r\n\r\n**_Custom ScrollView render_**\r\n```c#\r\nnamespace MyLibrary.Forms.Renders\r\n{\r\n    [Xamarin.Forms.Internals.Preserve(AllMembers = true)]\r\n    public class ScrollView : Xamarin.Forms.ScrollView\r\n    {\r\n        #region ShowVerticalScrollBar\r\n        public static readonly BindableProperty ShowVerticalScrollBarProperty = BindableProperty.Create(nameof(ShowVerticalScrollBar), typeof(bool), typeof(Renders.ScrollView), false);\r\n        /// <summary>\r\n        /// Gets or sets a value indicating whether the Renders.ScrollView should have the vertical scrollbar.\r\n        /// </summary>\r\n        public bool ShowVerticalScrollBar\r\n        {\r\n            get => (bool)GetValue(ShowVerticalScrollBarProperty);\r\n            set => SetValue(ShowVerticalScrollBarProperty, value);\r\n        }\r\n        #endregion\r\n\r\n        #region ShowHorizontalScrollBar\r\n        public static readonly BindableProperty ShowHorizontalScrollBarProperty = BindableProperty.Create(nameof(ShowHorizontalScrollBar), typeof(bool), typeof(Renders.ScrollView), false);\r\n        /// <summary>\r\n        /// Gets or sets a value indicating whether the Renders.ScrollView should have the horizontal scrollbar.\r\n        /// </summary>\r\n        public bool ShowHorizontalScrollBar\r\n        {\r\n            get => (bool)GetValue(ShowHorizontalScrollBarProperty);\r\n            set => SetValue(ShowHorizontalScrollBarProperty, value);\r\n        }\r\n        #endregion\r\n    }\r\n}\r\n```\r\n\r\n**_Custom ScrollView renderer_**\r\n```c#\r\n[assembly: ExportRenderer(typeof(MyLibrary.Forms.Renders.ScrollView), typeof(MyLibrary.Droid.Renderers.ScrollViewRenderer))]\r\nnamespace MyLibrary.Droid.Renderers\r\n{\r\n    [Xamarin.Forms.Internals.Preserve(AllMembers = true)]\r\n    public class ScrollViewRenderer : Xamarin.Forms.Platform.Android.ScrollViewRenderer\r\n    {\r\n        Forms.Renders.ScrollView @ScrollView;\r\n\r\n        public static void Init()\r\n        {\r\n            // This method is called from the MainActivity right after the Forms.Init(...).\r\n            var ignore1 = typeof(Forms.Renders.ScrollView);\r\n            var ignore2 = typeof(CShape.Droid.Renderers.ScrollViewRenderer);\r\n            RegisterRenderer(typeof(Xamarin.Forms.ScrollView), typeof(MyLibrary.Forms.Renders.ScrollView), typeof(MyLibrary.Droid.Renderers.ScrollViewRenderer));\r\n        }\r\n\r\n        static void RegisterRenderer(Type originalRender, Type customRender, Type customRenderer)\r\n        {\r\n            Assembly assembly = originalRender.Assembly;\r\n            Type registrarType = assembly.GetType(\"Xamarin.Forms.Internals.Registrar\") ?? assembly.GetType(\"Xamarin.Forms.Registrar\");\r\n            PropertyInfo registrarProperty = registrarType.GetProperty(\"Registered\", BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);\r\n            object registrar = registrarProperty.GetValue(registrarType, null);\r\n            MethodInfo registerMethod = registrar.GetType().GetRuntimeMethod(\"Register\", new[] { typeof(Type), typeof(Type) });\r\n            registerMethod.Invoke(registrar, new[] { customRender, customRenderer });\r\n        }\r\n\r\n        public ScrollViewRenderer(Context context) : base(context) { }\r\n\r\n        protected override void OnElementChanged(VisualElementChangedEventArgs e)\r\n        {\r\n            base.OnElementChanged(e);\r\n            if (e.OldElement != null)\r\n            {\r\n                e.OldElement.PropertyChanged -= OnElementPropertyChanged;\r\n            }\r\n            if (e.NewElement != null)\r\n            {\r\n                @ScrollView = e.NewElement as Forms.Renders.ScrollView;\r\n                @ScrollView.PropertyChanged += OnElementPropertyChanged;\r\n                UpdateScrollBars();\r\n            }\r\n        }\r\n\r\n        void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e)\r\n        {\r\n            if (_(\"Content\") ||\r\n                _(Forms.Renders.ScrollView.ShowVerticalScrollBarProperty.PropertyName) ||\r\n                _(Forms.Renders.ScrollView.ShowHorizontalScrollBarProperty.PropertyName)\r\n               ) UpdateScrollBars();\r\n\r\n            bool _(string equalsTo) => e.PropertyName.Equals(equalsTo);\r\n        }\r\n\r\n        void UpdateScrollBars()\r\n        {\r\n            /*\r\n                This method is called by OnElementChanged(...) method when the custom ScrollView\r\n                is firstly initialized and also each time the value of ShowVerticalScrollBar and \r\n                ShowHorizontalScrollBar properties changes.\r\n             */\r\n            VerticalScrollBarEnabled = @ScrollView.ShowVerticalScrollBar;\r\n            HorizontalScrollBarEnabled = @ScrollView.ShowHorizontalScrollBar;\r\n            if (ChildCount > 0)\r\n            {\r\n                GetChildAt(0).VerticalScrollBarEnabled = @ScrollView.ShowVerticalScrollBar;\r\n                GetChildAt(0).HorizontalScrollBarEnabled = @ScrollView.ShowHorizontalScrollBar;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n### Expected Behavior\r\n\r\nThe ScrollBars should not be visible.\r\n\r\n### Actual Behavior\r\n\r\nThe ScrollBars are visible even if ShowVerticalScrollBar and ShowHorizontalScrollBar properties are set to false.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version: Unknown\r\n- IDE: Visual Studio Community (7.4.2 build 12)\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  1.0\r\n  - Android: 8.1 Oreo\r\n"},{"Id":"7814316055","Type":"IssuesEvent","CreatedAt":"2018-06-12T18:39:11","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2592","RelatedDescription":"Closed issue \"OnOptionsItemSelected not triggered\" (#2592) at xamarin/Xamarin.Forms","RelatedBody":"OnOptionsItemSelected not triggered never is make OnCreate method async with some delay.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Mark main activity method OnCreate async\r\n2. Add some delay before or after LoadApplication method\r\n\r\n### Expected Behavior\r\n\r\n> OnOptionsItemSelected get triggered on back press\r\n\r\n### Actual Behavior\r\n\r\n> OnOptionsItemSelected not get triggered on back press\r\n\r\n### Basic Information\r\n\r\n> Visual Studio Community 2017 for Mac\r\n> Version 7.4.2 (build 12)\r\n> Installation UUID: 4de05a84-ef41-40a3-9fbb-488f64868da8\r\n> Runtime:\r\n> \tMono 5.8.1.0 (2017-10/6bf3922f3fd) (64-bit)\r\n> \tGTK+ 2.24.23 (Raleigh theme)\r\n> \r\n> \tPackage version: 508010000\r\n> \r\n> NuGet\r\n> Version: 4.3.1.4445\r\n> \r\n> .NET Core\r\n> Runtime: /usr/local/share/dotnet/dotnet\r\n> Runtime Version: 2.0.5\r\n> SDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\n> SDK Version: 2.1.4\r\n> MSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.8.1/lib/mono/msbuild/15.0/bin/Sdks\r\n> \r\n> Xamarin.Profiler\r\n> Version: 1.6.1\r\n> Location: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n> \r\n> Apple Developer Tools\r\n> Xcode 9.2 (13772)\r\n> Build 9C40b\r\n> \r\n> Xamarin.Mac\r\n> Version: 4.2.1.28 (Visual Studio Community)\r\n> \r\n> Xamarin.iOS\r\n> Version: 11.9.1.24 (Visual Studio Community)\r\n> Hash: f62de472\r\n> Branch: xcode9.3\r\n> Build date: 2018-03-29 19:30:53-0400\r\n> \r\n> Xamarin.Android\r\n> Version: 8.2.0.16 (Visual Studio Community)\r\n> Android SDK: /Users/nickolasshpotenko/Library/Developer/Xamarin/android-sdk-macosx\r\n> \tSupported Android versions:\r\n> \t\t5.1 (API level 22)\r\n> \t\t7.1 (API level 25)\r\n> \r\n> SDK Tools Version: 26.1.1\r\n> SDK Platform Tools Version: 26.0.2\r\n> SDK Build Tools Version: 26.0.3\r\n> \r\n> Java SDK: /usr\r\n> java version \"1.8.0_131\"\r\n> Java(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\n> Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n> \r\n> Android Designer EPL code available here:\r\n> https://github.com/xamarin/AndroidDesigner.EPL\r\n> \r\n> Xamarin Inspector\r\n> Version: 1.4.0\r\n> Hash: b3f92f9\r\n> Branch: master\r\n> Build date: Fri, 19 Jan 2018 22:00:34 GMT\r\n> Client compatibility: 1\r\n> \r\n> Build Information\r\n> Release ID: 704020012\r\n> Git revision: 0d8e3f0a4d683771f17959739956fa09c7ba21e3\r\n> Build date: 2018-03-30 10:45:17-04\r\n> Xamarin addins: 958839ea56ab1e331caf7c92b6ad50fb9e6ee9d2\r\n> Build lane: monodevelop-lion-d15-6\r\n> \r\n> Operating System\r\n> Mac OS X 10.13.3\r\n> Darwin 17.4.0 Darwin Kernel Version 17.4.0\r\n>     Sun Dec 17 09:19:54 PST 2017\r\n>     root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n\r\nXamarin.Forms 2.5.0280555\r\n\r\n"},{"Id":"7814312304","Type":"IssuesEvent","CreatedAt":"2018-06-12T18:38:26","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1352","RelatedDescription":"Closed issue \"[UWP] StackLayouts / NavigationPage leaks memory\" (#1352) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nMigrated from https://bugzilla.xamarin.com/show_bug.cgi?id=61027.\r\n\r\nOn UWP with Xamarin.Forms pushing and then popping a page with `StackLayout`s on it to the navigation stack several times will cause the memory consumption grow infinitely.\r\n\r\n### Steps to Reproduce\r\nEither take the sample project attached, or create a simple one with the following setup:\r\n- The main app should have a `NavigationPage` with the main page wrapped inside\r\n- That main page should have a `ListView` of elements\r\n- Clicking on any of those elements should take the user to another page (call it details page), by pushing it to the stack\r\n- Details page should have a back button that will pop the top of the navigation stack and taking it back to the main page\r\n\r\nThis navigation back-and-forth has to be done several times to see the memory usage increase. The problem is that the memory will never be released, `GC` will not collect it, even by forcing from either code or from Visual Studio's performance profiler set to monitor memory usage.\r\n\r\nYou can take a snapshot in the profiler when the app starts and then navigate to a page and then back maybe 20, 30 times. Take another snapshot again, and then let VS analyse the difference. See attached screenshot for the results.\r\n\r\nOver longer periods of time this leads to crashes in every single UWP app with Xamarin.Forms that has this navigation capability.\r\n\r\n### Expected Behavior\r\nGoing back from a page should release the memory used by it, or at least the garbage collector should be able to clean it up at a certain point.\r\n\r\n### Actual Behavior\r\nMemory usage increases indefinitely, eventually crashing the app.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- Last known good version: I went back as far as 2.2, none of the versions I've tried worked\r\n- IDE: VS 2017 Community Edition on Windows 10\r\n- Platform Target Frameworks: \r\n  - UWP:  15063\r\n- Nuget Packages: Xamarin.Forms\r\n\r\n### Screenshots\r\nThe issue is not visual, but using visual studio's performance profiler, you can get the following proof of the memory increase:\r\n![image](https://user-images.githubusercontent.com/7962460/33757833-cf2bde72-dbf3-11e7-80d7-95e622baa2f5.png)\r\n\r\n### Reproduction Link\r\n[UWPMemoryLeakXamarinBugzilla.zip](https://github.com/xamarin/Xamarin.Forms/files/1542007/UWPMemoryLeakXamarinBugzilla.zip)"},{"Id":"7813980399","Type":"PullRequestEvent","CreatedAt":"2018-06-12T17:33:53","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3023","RelatedDescription":"Opened pull request \"[UWP] Fixed code to only call ReloadData once and to just set CVS Source to Null\" (#3023) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n* fixed code to only call reload data once\r\n\r\n\r\n* if itemsource is set to null then just null out CVS otherwise it'll cause a COM Exception\r\n* added ListView Categories to some tests to more easily run targeted tests against UWP\r\n* fixed a couple UWP tests that weren't passing\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://github.com/xamarin/Xamarin.Forms/issues/3008\r\nhttps://github.com/xamarin/Xamarin.Forms/issues/3009\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7816524602","Type":"PullRequestEvent","CreatedAt":"2018-06-13T05:18:39","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4239","RelatedDescription":"Opened pull request \"[xharness] Check the right (unpaired) device when determining whether a new watch device must be created or not. (#4222)\" (#4239) at xamarin/xamarin-macios","RelatedBody":"This fixes a NullReferenceException when there are already paired watch devices:\n\n    [0x700009ad7000:] EXCEPTION handling: System.NullReferenceException: Object reference not set to an instance of an object\n\n    \"<unnamed thread>\" tid=0x0x700009ad7000 this=0x0x10b903ad8 , thread handle : 0x7f9ad49109a0, state : not waiting\n      at xharness.Simulators/<CreateDevicePair>d__18.MoveNext () [0x001ae] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tests/xharness/Simulators.cs:169\n      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<bool>.Start<xharness.Simulators/<CreateDevicePair>d__18> (xharness.Simulators/<CreateDevicePair>d__18&) [0x0002c] in /Users/builder/jenkins/workspace/build-package-osx-mono/2018-02/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:471\n      at xharness.Simulators.CreateDevicePair (xharness.Log,xharness.SimDevice,xharness.SimDevice,string,string,bool) [0x00057] in <7c5e77efeb3146c095a26043fb517189>:0\n      at xharness.Simulators/<FindOrCreateDevicePairAsync>d__19.MoveNext () [0x000fc] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tests/xharness/Simulators.cs:206\n      at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<TResult_REF>.Start<TStateMachine_REF> (TStateMachine_REF&) [0x0002c] in <0f9df4881040473f9da7cf6c2e2cb8c3>:0\n      at xharness.Simulators.FindOrCreateDevicePairAsync (xharness.Log,System.Collections.Generic.IEnumerable`1<xharness.SimDevice>,System.Collections.Generic.IEnumerable`1<xharness.SimDevice>) [0x0003f] in <7c5e77efeb3146c095a26043fb517189>:0\n      at xharness.Simulators/<FindAsync>d__20.MoveNext () [0x00364] in /Users/builder/jenkins/workspace/xamarin-macios/xamarin-macios/tests/xharness/Simulators.cs:275"},{"Id":"7816522188","Type":"PullRequestEvent","CreatedAt":"2018-06-13T05:17:42","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4238","RelatedDescription":"Opened pull request \"[Jenkins] Publish bundle.zip and msbuild.zip as GH statuses as well.\" (#4238) at xamarin/xamarin-macios","RelatedBody":"This also requires a maccore bump, commit list for xamarin/maccore:\n\n* xamarin/maccore@443e956edc [release] Rename bundlefull.zip to bundle.zip. (#848)\n* xamarin/maccore@5020593b3e Remove jenkinsfile from d15-8, tom-swifty doesn't track normal release branches. (#849)\n\nDiff: https://github.com/xamarin/maccore/compare/a0a9c4594219a0b48b519804b52b48115b66ad01...443e956edc3c30b98b1910884beba43a31b98972"},{"Id":"7815179448","Type":"PullRequestEvent","CreatedAt":"2018-06-12T21:26:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4233","RelatedDescription":"Merged pull request \"Update ISSUE_TEMPLATE.md\" (#4233) at xamarin/xamarin-macios","RelatedBody":"Just a typo in the issue template."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":31,"FavoriteCount":15,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":15,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":22,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":21,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":157,"FavoriteCount":84,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":31,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null},{"Id":"1003716129758629888","CreatedAt":"2018-06-04T19:12:28+00:00","UserScreenname":"xamarinhq","Text":"Introducing the https://t.co/3QxhuBuvHc Firebase Job Dispatcher—background scheduling for all Android devices: https://t.co/vZlLAkI925","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":16,"RawContent":null},{"Id":"1003656628120498176","CreatedAt":"2018-06-04T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/emYMS1KIra","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":24,"RawContent":null},{"Id":"1003397917103845376","CreatedAt":"2018-06-03T22:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":21,"RawContent":null},{"Id":"1003046627240751104","CreatedAt":"2018-06-02T22:52:06+00:00","UserScreenname":"xamarinhq","Text":"Learn how you can contribute to Xamarin.iOS and Xamarin.Mac—no code necessary! Get started: https://t.co/XU5OJkcXCt https://t.co/XoB2rKP2XT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":40,"RawContent":null},{"Id":"1002614995031592963","CreatedAt":"2018-06-01T18:16:57+00:00","UserScreenname":"xamarinhq","Text":"Find #Xamarin and/or #dotNET events near you this June: https://t.co/sJpR7Xk130 https://t.co/PT5WAD4JIx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-06-13T05:30:58.3537676Z","RunDurationInMilliseconds":4301}