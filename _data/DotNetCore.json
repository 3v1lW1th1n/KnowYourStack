{"Data":{"Blog":{"FeedItems":[{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6773269681","Type":"IssuesEvent","CreatedAt":"2017-10-27T04:38:25","Actor":"Maoni0","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13112","RelatedDescription":"Reopened issue \"Server GC and NoGCRegion\" (#13112) at dotnet/coreclr","RelatedBody":"I created a simple .NET Framework 4.6.2 console app, with gcServer enabled=true and gcConcurrent enabled=true in app.config. I run on a 4-core i7 3630QM with hyperthreading. The app is straightforward:\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    var success = GC.TryStartNoGCRegion(64 * 1024 * 1024, 32 * 1024 * 1024, true);\r\n    Console.WriteLine(\"No GC: \" + (success ? \"started\" : \"failed\"));\r\n\r\n    // Sleep for 1 minute\r\n    Thread.Sleep(1000 * 60);\r\n\r\n    GC.EndNoGCRegion();\r\n}\r\n```\r\n\r\nThe no-GC region is started successfully. When the app is sleeping, the CPU usage goes to 100% on all my cores except one. I assume the GC threads are causing this. Doesn't seem right."},{"Id":"6773107713","Type":"PullRequestEvent","CreatedAt":"2017-10-27T03:23:19","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14717","RelatedDescription":"Opened pull request \"Fix FixedReg assert\" (#14717) at dotnet/coreclr","RelatedBody":"With JitStressRegs (various values) it is possible to have RefPositions that have a single candidate, even though they are not really a fixed reference to the given register.\r\n\r\nFix #14624"},{"Id":"6772736909","Type":"PullRequestEvent","CreatedAt":"2017-10-27T00:50:53","Actor":"ViktorHofer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14716","RelatedDescription":"Merged pull request \"Make EventSourcException serializable in corert scenarios\" (#14716) at dotnet/coreclr","RelatedBody":"Related: https://github.com/dotnet/corefx/issues/24424"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6772815666","Type":"PullRequestEvent","CreatedAt":"2017-10-27T01:23:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7919","RelatedDescription":"Opened pull request \".NET Core SDK Telemetry Change: Adopt Hashing\" (#7919) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/7918"},{"Id":"6772792379","Type":"IssuesEvent","CreatedAt":"2017-10-27T01:14:16","Actor":"KathleenDollard","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7918","RelatedDescription":"Opened issue \".NET Core SDK Telemetry Change: Adopt Hashing\" (#7918) at dotnet/cli","RelatedBody":"# .NET Core SDK Telemetry Change: Adopt Hashing\r\n\r\nThe .NET Core SDK provides a set of development time tools to help you build and test .NET Core applications. The SDK collects CLI usage data including .NET Core Version, Operating System and CLI verbs. We share this data with the community. Check out [what we learned from .NET Core SDK telemetry](https://blogs.msdn.microsoft.com/dotnet/2017/07/21/what-weve-learned-from-net-core-sdk-telemetry/) to see what data we collect, how we use it, and how you can access the aggregate data.\r\n\r\nThe telemetry system was designed to only collect known CLI commands. When we initially shared the CLI data with the community, we received feedback that developers were concerned there might be sensitive information in the data set. In considering this feedback, we decided we could hash usage data on the client prior to sending. This further reduces the chance that sensitive data can be accessed by Microsoft or anyone else - for example when someone types something accidentally.\r\n\r\nThe data we collect drives improvements in the products you use. We will continue to be transparent about what we collect and share our findings with you. You can see how to [opt out of telemetry](https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry) in the documentation.\r\n\r\n## Design\r\n\r\n* Use the [SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash function to hash all telemetry values that are created in the CLI/SDK. Each command, argument, and switch will be normalized to upper case before hashing to produce consistent hashes.\r\n\r\n* The names of Microsoft provided templates (names that are parameters to dotnet new) are not hashed. For Microsoft templates, the hashed target framework is also sent. Names for all other templates are hashed. Parameters to templates are not sent.\r\n\r\n* As a result of this change, most telemetry information will now be hashed. To use the data, a reverse lookup table will be precomputed based on known values like the dotnet verbs.\r\n\r\n* We will continue to provide usage data to the community. The data we release will contain the plain text values we have reversed via our lookup table and any values that remain hashed. We will also share the lookup table.\r\n\r\n## Details\r\n\r\nThe hash algorithm needs to be one way and deterministic. That means, if arbitrary text is hashed, the original text cannot be directly recovered and given the same hash algorithm with the same input, the output hash will always be the same.\r\n\r\nWe will use the SHA-256 algorithm.\r\n\r\nThe code that will hash values is:\r\n\r\n``` C#\r\npublic static string Hash(string text)\r\n{\r\n    var sha256 = SHA256.Create();\r\n    byte[] bytes = Encoding.UTF8.GetBytes(text);\r\n    byte[] hash = sha256.ComputeHash(bytes);\r\n    StringBuilder hashString = new StringBuilder();\r\n    foreach (byte x in hash)\r\n    {\r\n        hashString.AppendFormat(\"{0:x2}\", x);\r\n    }\r\n    return hashString.ToString();\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nWalking through the telemetry sent when calling two dotnet commands will illustrate the process.\r\n\r\nThe user types `dotnet new console -n consoleapp1`. The following telemetry is sent:\r\n\r\nEvent Name = dotnet/cli/sublevelparser/command\r\n\r\n| Key                  | Value                                                            |\r\n|----------------------|------------------------------------------------------------------|\r\n| OS Version           | 10.0.15063                                                       |\r\n| OS Platform          | Windows                                                          |\r\n| Runtime Id           | win10-x64                                                        |\r\n| Product Version      | 2.0.1                                                            |\r\n| Docker Container     | False                                                            |\r\n| Current Path Hash    | 437059c8b2809cb25b0edbf6aa9e474df52e8861da88e0ca66cbc05d4af799ae |\r\n| Machine ID           | ddc77f7407553edbe4f5764588ea9bce995c22258e2b35e4228dea01220e5e92 |\r\n| verb                 | a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |\r\n| argument             | 98b5b495e453d6c2cd36e7e812916bc5f3264045225cf685729065387a346897 |\r\n\r\nYou will notice that you don't see \"console\" and \"consoleapp1\" in the telemetry, but see hashed values.\r\n\r\nTo use this data we need a precomputed lookup table that maps hashes to known values. The precomputed lookup table will look similar to:\r\n\r\n| Hash                                                             |   Text  |\r\n|------------------------------------------------------------------|:-------:|\r\n| a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |   NEW   |\r\n| 565be3f826b6ada938f1ae39dcb365e8b7d8e77323ac5c081c1715a975576321 | RESTORE |\r\n| 98b5b495e453d6c2cd36e7e812916bc5f3264045225cf685729065387a346897 | CONSOLE |\r\n\r\nWe can recognize the verb `NEW` and the template name `CONSOLE` from these known values, and can replace these hashes with known text on the server.\r\n\r\nNext, the user types `dotnet new ProjectX`. The following telemetry is sent:\r\n\r\nEvent Name = dotnet/cli/sublevelparser/command\r\n\r\n| Key                  | Value                                                            |\r\n|----------------------|------------------------------------------------------------------|\r\n| OS Version           | 10.0.15063                                                       |\r\n| OS Platform          | Windows                                                          |\r\n| Runtime Id           | win10-x64                                                        |\r\n| Product Version      | 2.0.1                                                            |\r\n| Docker Container     | False                                                            |\r\n| Current Path Hash    | 437059c8b2809cb25b0edbf6aa9e474df52e8861da88e0ca66cbc05d4af799ae |\r\n| Machine ID           | ddc77f7407553edbe4f5764588ea9bce995c22258e2b35e4228dea01220e5e92 |\r\n| verb                 | a253ff09c5a8678e1fd1962b2c329245e139e45f9cc6ced4e5d7ad42c4108fc0 |\r\n| argument             | 13807dc72a30ea2ac552b7560c7c1f3d0060509f953d2d48926b338b90582f6a |\r\n\r\nYou will notice that you don't see \"ProjectX\" in the telemetry, but see a hashed value. This value is not in the lookup table, so remains a hashed value. We can count the number of times the hash `13807dc72a30ea2ac552b7560c7c1f3d0060509f953d2d48926b338b90582f6a` is used, but we can't recover the original value.\r\n\r\n## Other Changes\r\n\r\nThere has also been a change to the name of a telemetry event which is sent when MSBuild evaluates a project file. The event previously named _TargetFramework_ will now be named _targetframeworkeval_.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6772367593","Type":"IssuesEvent","CreatedAt":"2017-10-26T22:34:03","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7916","RelatedDescription":"Closed issue \"How to pass credentials/password to dotnet publish?\" (#7916) at dotnet/cli","RelatedBody":"We're using `.pubxml` files for deployments to our various environments (Azure). Instead of deploying through Visual Studio, I'm trying to use the `dotnet publish` cli to do the same on our build server. We are using basic auth (username/password).\r\n\r\nI can not find any information on credential passing in the docs. I do not want to save the password in our `.pubxml` files, but instead pass it as environment variable or cli option. **Is this possible?**\r\n\r\nWhat I am trying to do:\r\n```\r\ndotnet publish -c Release /p:PublishProfile=\"Properties\\PublishProfiles\\<profile name>.pubxml\" /p:Password=\"<password>\"\r\n```\r\n\r\nIf I do that I receive this: \r\n```\r\nMSDEPLOY : error Code: ERROR_CONNECTION_TERMINATED [<path to project>.csproj]\r\nMSDEPLOY : error : Unexpected end of file has occurred. The following elements are not closed: results. Line 1, position 550. [<path to project>.csproj]\r\nMSDEPLOY : error count: 1. [<path to project>.csproj]\r\n```\r\n\r\nNot passing a `/p:Password` obviously results in:\r\n```\r\nMSDEPLOY : error Code: ERROR_USER_UNAUTHORIZED [<path to project>.csproj]\r\nError : The remote server returned an error : (401) Unauthorized. [<path to project>.csproj]\r\nMSDEPLOY : error count: 1. [<path to project>.csproj]\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6772292891","Type":"PullRequestEvent","CreatedAt":"2017-10-26T22:11:58","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7915","RelatedDescription":"Merged pull request \"Merge dev/release/2.0 in to dev/repo-refactoring\" (#7915) at dotnet/cli","RelatedBody":"@nguerrera this was a clean merge, but please review it to be sure the patches were not messed up."},{"Id":"6771940034","Type":"PullRequestEvent","CreatedAt":"2017-10-26T20:46:56","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7910","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#7910) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171026-065944\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171026-065944 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6771525354","Type":"PullRequestEvent","CreatedAt":"2017-10-26T19:15:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7917","RelatedDescription":"Merged pull request \"Setting the System.Reflection.Metadata version to 1.4.1 for shared-build-targets-utils.\" (#7917) at dotnet/cli","RelatedBody":""},{"Id":"6771232793","Type":"PullRequestEvent","CreatedAt":"2017-10-26T18:13:41","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7911","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#7911) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171026-065946\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171026-065946 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6773294300","Type":"IssuesEvent","CreatedAt":"2017-10-27T04:50:51","Actor":"Edward-Zhou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/554","RelatedDescription":"Closed issue \"Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException : One or more compilation failures occurred\" (#554) at dotnet/standard","RelatedBody":"For this error, I have tried multiple solutions which is provided by Github. But, none of them worked. Please help to check whether this issue reopen on new environment like below.\r\nEnvironment:\r\nVS 2017 Version 15.4.1\r\nDotnet Version 2.0.2\r\n\r\nReproduce Steps:\r\n\r\n1. Create an Asp.Net Core Web Application->.NET Core and Asp.net Core 2.0-> Web Application(Model-View-Controller)\r\n2. Create an xUnit Test Project(.NET Core) \r\n3. Follow this link [Integration testing in ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/testing/integration-testing)\r\n4. Add <PreserveCompilationContext>true</PreserveCompilationContext> to Test.csproj which is pointed at above link.\r\n5. Run test method will return below error.\r\n\r\n> Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException : One or more compilation failures occurred:\r\newiqttdv.z4g(4,62): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nUpdate: \r\nAfter following [this suggestion](https://github.com/aspnet/Hosting/issues/959#issuecomment-286351703) , this error gone, but, it produce below new error.\r\n\r\n> Message: System.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.VisualStudio.Web.CodeGeneration, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\r\n\r\nWhat is the possible way to resolve \"Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException\"?\r\n\r\nAny help would be appreciated."},{"Id":"6772894105","Type":"IssuesEvent","CreatedAt":"2017-10-27T01:57:30","Actor":"santhoshkumarmksss","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/558","RelatedDescription":"Opened issue \".Net Plaform Standard implementation on .Net 4.7 has version inconsistency for System.Net.Http Be as descriptive as you can with your title.\" (#558) at dotnet/standard","RelatedBody":"I have been using WCF service with .Net 4.7 version and it has project reference of Standard library with version 1.6. If I am using reflection getting bellow error\r\n\r\nSystem.IO.FileLoadException: 'Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'\r\n\r\nCode which generates error:\r\n  Type type = (from assembly in AppDomain.CurrentDomain.GetAssemblies()\r\n                         where assembly.GetName().Name == \"TestStandard\"\r\n                         select assembly.GetType(\"MoE.ERS.DTO.ResourceRequests.PlaygroupResourceRequestDTO\")).FirstOrDefault();\r\n\r\nI have attached sample project reference for which i am getting below error. Also i tried binding redirect in Web.config and still no luck. \r\n\r\nAny quick help will be much appreciated.\r\n[WcfService1.zip](https://github.com/dotnet/standard/files/1420554/WcfService1.zip)\r\n"},{"Id":"6770627250","Type":"IssuesEvent","CreatedAt":"2017-10-26T16:07:29","Actor":"vbcodec","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/557","RelatedDescription":"Opened issue \"Set standard 2.0 on Win 10 Mobile ?\" (#557) at dotnet/standard","RelatedBody":"I have phone with installed Fall Creators Update (10.0.15254.1) and VS can't deploy app on phone, while on desktop works fine. Do Win 10 Mobile with Fall Creators Update support apps that use net standard 2.0 ?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6773306051","Type":"PullRequestEvent","CreatedAt":"2017-10-27T04:56:49","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24888","RelatedDescription":"Merged pull request \"Add Span<T> Base64 conversion APIs that support UTF-8\" (#24888) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24568 (part of https://github.com/dotnet/corefx/issues/24174).\r\n\r\n```C#\r\nnamespace System.Buffers.Text {\r\n    public static class Base64 {\r\n        public static OperationStatus DecodeFromUtf8(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int consumed, out int written, bool isFinalBlock=true);\r\n        public static OperationStatus DecodeFromUtf8InPlace(Span<byte> buffer, out int written);\r\n        public static OperationStatus EncodeToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int consumed, out int written, bool isFinalBlock=true);\r\n        public static OperationStatus EncodeToUtf8InPlace(Span<byte> buffer, int dataLength, out int written);\r\n        public static int GetMaxDecodedFromUtf8Length(int length);\r\n        public static int GetMaxEncodedToUtf8Length(int length);\r\n    }\r\n}\r\n\r\nnamespace System.Buffers {\r\n    public enum OperationStatus {\r\n        DestinationTooSmall = 1,\r\n        Done = 0,\r\n        InvalidData = 3,\r\n        NeedMoreData = 2,\r\n    }\r\n}\r\n```\r\n\r\n**Note:**\r\nOperationStatus (previously TransformationStatus) can be updated base on API review and doesn't need to block this PR (https://github.com/dotnet/corefx/issues/22412).\r\n\r\n**Code Coverage:**\r\n100% line and branch coverage\r\n![image](https://user-images.githubusercontent.com/6527137/32033468-901c1002-b9c1-11e7-90d7-c1cacb24c8cc.png)\r\n\r\n**Performance Test Results (duration):**\r\n\r\nTest   Name | AVERAGE\r\n-- | --\r\nBase64Decode(numberOfBytes: 10) | 0.019\r\nBase64Decode(numberOfBytes: 100) | 0.110\r\nBase64Decode(numberOfBytes: 1000) | 0.950\r\nBase64Decode(numberOfBytes: 1000000) | 954.361\r\nBase64DecodeBaseline(numberOfBytes: 10) | 0.072\r\nBase64DecodeBaseline(numberOfBytes: 100) | 0.420\r\nBase64DecodeBaseline(numberOfBytes: 1000) | 3.819\r\nBase64DecodeBaseline(numberOfBytes:   1000000) | 8529.559\r\nBase64DecodeDetinationTooSmall(numberOfBytes:   10) | 0.018\r\nBase64DecodeDetinationTooSmall(numberOfBytes:   100) | 0.115\r\nBase64DecodeDetinationTooSmall(numberOfBytes:   1000) | 0.948\r\nBase64DecodeDetinationTooSmall(numberOfBytes:   1000000) | 954.096\r\nBase64DecodeInPlace(numberOfBytes: 10) | 0.020\r\nBase64DecodeInPlace(numberOfBytes: 100) | 0.113\r\nBase64DecodeInPlace(numberOfBytes: 1000) | 0.981\r\nBase64DecodeInPlace(numberOfBytes:   1000000) | 1023.155\r\nBase64DecodeInPlaceOnce(numberOfBytes:   1000000) | 0.950\r\nBase64Encode(numberOfBytes: 10) | 0.020\r\nBase64Encode(numberOfBytes: 100) | 0.129\r\nBase64Encode(numberOfBytes: 1000) | 1.158\r\nBase64Encode(numberOfBytes: 1000000) | 1170.335\r\nBase64EncodeBaseline(numberOfBytes: 10) | 0.029\r\nBase64EncodeBaseline(numberOfBytes: 100) | 0.145\r\nBase64EncodeBaseline(numberOfBytes: 1000) | 1.351\r\nBase64EncodeBaseline(numberOfBytes:   1000000) | 1303.068\r\nBase64EncodeDestinationTooSmall(numberOfBytes:   10) | 0.018\r\nBase64EncodeDestinationTooSmall(numberOfBytes:   100) | 0.128\r\nBase64EncodeDestinationTooSmall(numberOfBytes:   1000) | 1.162\r\nBase64EncodeDestinationTooSmall(numberOfBytes:   1000000) | 1163.685\r\nBase64EncodeInPlace(numberOfBytes: 10) | 0.023\r\nBase64EncodeInPlace(numberOfBytes: 100) | 0.133\r\nBase64EncodeInPlace(numberOfBytes: 1000) | 1.171\r\nBase64EncodeInPlace(numberOfBytes:   1000000) | 1247.834\r\nBase64EncodeInPlaceOnce(numberOfBytes:   1000000) | 1.176\r\n\r\n<details> \r\n<summary>Out-dated performance results 1</summary>\r\n\r\nTest   Name | AVERAGE\r\n-- | --\r\nBase64Decode(numberOfBytes: 10) | 0.018\r\nBase64Decode(numberOfBytes: 100) | 0.113\r\nBase64Decode(numberOfBytes: 1000) | 1.005\r\nBase64Decode(numberOfBytes: 1000000) | 1011.903\r\nBase64DecodeBaseline(numberOfBytes: 10) | 0.083\r\nBase64DecodeBaseline(numberOfBytes: 100) | 0.452\r\nBase64DecodeBaseline(numberOfBytes: 1000) | 4.077\r\nBase64DecodeBaseline(numberOfBytes:   1000000) | 8977.842\r\nBase64DecodeInPlace(numberOfBytes: 10) | 0.022\r\nBase64DecodeInPlace(numberOfBytes: 100) | 0.114\r\nBase64DecodeInPlace(numberOfBytes: 1000) | 0.983\r\nBase64DecodeInPlace(numberOfBytes:   1000000) | 1055.159\r\nBase64DecodeInPlaceOnce(numberOfBytes:   1000000) | 0.985\r\nBase64Encode(numberOfBytes: 10) | 0.024\r\nBase64Encode(numberOfBytes: 100) | 0.171\r\nBase64Encode(numberOfBytes: 1000) | 1.631\r\nBase64Encode(numberOfBytes: 1000000) | 1659.814\r\nBase64EncodeBaseline(numberOfBytes: 10) | 0.034\r\nBase64EncodeBaseline(numberOfBytes: 100) | 0.149\r\nBase64EncodeBaseline(numberOfBytes: 1000) | 1.342\r\nBase64EncodeBaseline(numberOfBytes:   1000000) | 1340.315\r\nBase64EncodeInPlace(numberOfBytes: 10) | 0.068\r\nBase64EncodeInPlace(numberOfBytes: 100) | 0.406\r\nBase64EncodeInPlace(numberOfBytes: 1000) | 3.782\r\nBase64EncodeInPlace(numberOfBytes:   1000000) | 3983.673\r\nBase64EncodeInPlaceOnce(numberOfBytes:   1000000) | 3.854\r\n</details> \r\n\r\n<details> \r\n<summary>Out-dated performance results 2</summary>\r\n\r\nTest   Name | AVERAGE\r\n-- | --\r\nBase64Decode(numberOfBytes: 10) | 0.019\r\nBase64Decode(numberOfBytes: 100) | 0.118\r\nBase64Decode(numberOfBytes: 1000) | 1.001\r\nBase64Decode(numberOfBytes: 1000000) | 1000.071\r\nBase64DecodeBaseline(numberOfBytes: 10) | 0.075\r\nBase64DecodeBaseline(numberOfBytes: 100) | 0.428\r\nBase64DecodeBaseline(numberOfBytes: 1000) | 3.872\r\nBase64DecodeBaseline(numberOfBytes:   1000000) | 8725.017\r\nBase64DecodeInPlace(numberOfBytes: 10) | 0.022\r\nBase64DecodeInPlace(numberOfBytes: 100) | 0.117\r\nBase64DecodeInPlace(numberOfBytes: 1000) | 0.986\r\nBase64DecodeInPlace(numberOfBytes:   1000000) | 1068.851\r\nBase64DecodeInPlaceOnce(numberOfBytes:   1000000) | 0.993\r\nBase64Encode(numberOfBytes: 10) | 0.023\r\nBase64Encode(numberOfBytes: 100) | 0.159\r\nBase64Encode(numberOfBytes: 1000) | 1.437\r\nBase64Encode(numberOfBytes: 1000000) | 1473.720\r\nBase64EncodeBaseline(numberOfBytes: 10) | 0.036\r\nBase64EncodeBaseline(numberOfBytes: 100) | 0.149\r\nBase64EncodeBaseline(numberOfBytes: 1000) | 1.602\r\nBase64EncodeBaseline(numberOfBytes:   1000000) | 1357.203\r\nBase64EncodeInPlace(numberOfBytes: 10) | 0.027\r\nBase64EncodeInPlace(numberOfBytes: 100) | 0.157\r\nBase64EncodeInPlace(numberOfBytes: 1000) | 1.399\r\nBase64EncodeInPlace(numberOfBytes:   1000000) | 1466.058\r\nBase64EncodeInPlaceOnce(numberOfBytes:   1000000) | 1.402\r\n</details> \r\n\r\n<details> \r\n<summary>Out-dated performance results 3</summary>\r\n\r\nTest   Name | AVERAGE\r\n-- | --\r\nBase64Decode(numberOfBytes: 10) | 0.017\r\nBase64Decode(numberOfBytes: 100) | 0.110\r\nBase64Decode(numberOfBytes: 1000) | 0.984\r\nBase64Decode(numberOfBytes: 1000000) | 1007.293\r\nBase64DecodeBaseline(numberOfBytes: 10) | 0.069\r\nBase64DecodeBaseline(numberOfBytes: 100) | 0.410\r\nBase64DecodeBaseline(numberOfBytes: 1000) | 3.941\r\nBase64DecodeBaseline(numberOfBytes:   1000000) | 8593.280\r\nBase64DecodeInPlace(numberOfBytes: 10) | 0.021\r\nBase64DecodeInPlace(numberOfBytes: 100) | 0.116\r\nBase64DecodeInPlace(numberOfBytes: 1000) | 1.008\r\nBase64DecodeInPlace(numberOfBytes:   1000000) | 1045.012\r\nBase64DecodeInPlaceOnce(numberOfBytes:   1000000) | 0.955\r\nBase64Encode(numberOfBytes: 10) | 0.020\r\nBase64Encode(numberOfBytes: 100) | 0.132\r\nBase64Encode(numberOfBytes: 1000) | 1.585\r\nBase64Encode(numberOfBytes: 1000000) | 1169.956\r\nBase64EncodeBaseline(numberOfBytes: 10) | 0.029\r\nBase64EncodeBaseline(numberOfBytes: 100) | 0.153\r\nBase64EncodeBaseline(numberOfBytes: 1000) | 1.293\r\nBase64EncodeBaseline(numberOfBytes:   1000000) | 1316.709\r\nBase64EncodeInPlace(numberOfBytes: 10) | 0.023\r\nBase64EncodeInPlace(numberOfBytes: 100) | 0.158\r\nBase64EncodeInPlace(numberOfBytes: 1000) | 1.207\r\nBase64EncodeInPlace(numberOfBytes:   1000000) | 1252.556\r\nBase64EncodeInPlaceOnce(numberOfBytes:   1000000) | 1.166\r\n</details> \r\n\r\nEncode is about  10% faster ~20% slower~ ~10% slower (for input larger than 100 bytes)~. Decode is at least 4x faster (even when compared to the new non-allocating variant TryFromBase64Chars). ~This is probably because the Convert.FromBase64CharArray allocates (approximately n bytes, where n is input size + around 24 byte overhead).~\r\n\r\n**Edit 0:** Made encode a bit faster for the common case.\r\n**Edit 1:** Compared against TryFromBase64Chars, there is still a large perf difference.\r\n**Edit 2:** Added new performance numbers based on additional optimizations suggested by @jkotas.\r\n**Edit 3:** Added performance tests for when destination buffer is too small.\r\n\r\ncc @KrzysztofCwalina, @stephentoub, @GrabYourPitchforks, @jkotas, @dotnet/corefxlab-contrib "},{"Id":"6773306044","Type":"IssuesEvent","CreatedAt":"2017-10-27T04:56:49","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24568","RelatedDescription":"Closed issue \"Add Base64 conversion APIs that support UTF-8 for Span<T> \" (#24568) at dotnet/corefx","RelatedBody":"## Updated API Proposal\r\nDetails https://github.com/dotnet/corefx/issues/24568#issuecomment-338833370\r\n```C#\r\n// System.Memory.dll\r\nnamespace System.Buffers.Text {\r\n    public static class Base64 {\r\n        public static OperationStatus EncodeToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int consumed, out int written, bool isFinalBlock = true);\r\n        public static OperationStatus EncodeToUtf8InPlace(Span<byte> buffer, int dataLength, out int written);\r\n        public static int GetMaxEncodedToUtf8Length(int length);\r\n        public static OperationStatus DecodeFromUtf8(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int consumed, out int written, bool isFinalBlock = true);\r\n        public static OperationStatus DecodeFromUtf8InPlace(Span<byte> buffer, int dataLength, out int written);\r\n        public static int GetMaxDecodedFromUtf8Length(int length);\r\n    }\r\n}\r\n```\r\n<details> \r\n  <summary>Details and Usage from previously proposed API</summary>\r\n\r\n## Rationale\r\nThese API allow for encoding of a Span\\<byte\\> into UTF-8 Base64 encoded span (binary to text operation) and decoding of a UTF-8 Base64 encoded span to Span\\<byte\\> (text to binary operation). They will be used by SignalR (for example [here](https://github.com/SignalR/SignalR/blob/master/src/Microsoft.AspNet.SignalR.Core/Infrastructure/DefaultProtectedData.cs#L22), [here](https://github.com/SignalR/SignalR/blob/master/src/Microsoft.AspNet.SignalR.Core/Infrastructure/DataProtectionProviderProtectedData.cs#L40), and [here](https://github.com/aspnet/SignalR/blob/dev/src/Microsoft.AspNetCore.SignalR.Common/Internal/Encoders/Base64Encoder.cs)).\r\n\r\nA prototype of the API is available in corefxlab: \r\nhttps://github.com/dotnet/corefxlab/tree/master/src/System.Binary.Base64\r\n\r\nPart of https://github.com/dotnet/corefx/issues/24174\r\n\r\nPrevious review: https://github.com/dotnet/apireviews/tree/master/2017/06-16-System.Text.Buffers\r\n\r\n## Usage\r\n\r\nFor valid input data:\r\n```C#\r\nSpan<byte> input; // input buffer to be encoded containing binary data\r\nSpan<byte> encodedBytes = new byte[Base64.BytesToUtf8Length(input.Length)];\r\nOperationStatus status = Base64.BytesToUtf8(input, encodedBytes, out int consumed, out int encodedBytesCount);\r\n// status == OperationStatus.Done\r\n// encodedBytes.Length == encodedBytesCount\r\n// consumed == input.Length\r\n```\r\n```C#\r\nSpan<byte> input; // input buffer to be decoded containing textual data\r\nSpan<byte> decodedBytes = new byte[Base64.Utf8ToBytesLength(input.Length)];\r\nOperationStatus status = Base64.Utf8ToBytes(input, decodedBytes, out int consumed, out int decodedByteCount);\r\n// status == OperationStatus.Done\r\n// decodedBytes.Length >= decodedByteCount\r\n// consumed == input.Length\r\n```\r\n\r\nUsing these new APIs, we can take the following code snippet (from [here](https://github.com/aspnet/SignalR/blob/dev/src/Microsoft.AspNetCore.SignalR.Common/Internal/Encoders/Base64Encoder.cs)):\r\n```C#\r\npublic byte[] Decode(byte[] payload)\r\n{\r\n    var buffer = new ReadOnlyBuffer<byte>(payload);\r\n    LengthPrefixedTextMessageParser.TryParseMessage(ref buffer, out var message);\r\n\r\n    return Convert.FromBase64String(Encoding.UTF8.GetString(message.ToArray()));\r\n}\r\n```\r\nAnd re-write it as follows (if we want to keep the input/output as byte arrays):\r\n```C#\r\npublic byte[] Decode(byte[] payload)\r\n{\r\n    var buffer = new ReadOnlyBuffer<byte>(payload);\r\n    LengthPrefixedTextMessageParser.TryParseMessage(ref buffer, out var message);\r\n    \r\n    // assume message.Span is UTF-8 encoded (for instance, using the upcoming UTF8 encoder APIs)\r\n    Span<byte> bytes = new byte[Utf8ToBytesLength(message.Span.Length)];\r\n    Base64.Utf8ToBytes(message.Span, bytes, out int consumed, out int written);\r\n    return bytes.Slice(0, written).ToArray();\r\n}\r\n```\r\nFor potentially invalid (or incomplete) input, the user can check the returned status. For example, change the above code as follows:\r\n```C#\r\n    Span<byte> bytes = new byte[Utf8ToBytesLength(message.Span.Length)];\r\n    OperationStatus status = Base64.Utf8ToBytes(message.Span, bytes, out int consumed, out int written);\r\n    return status == OperationStatus.Done ? bytes.Slice(0, written).ToArray() : <user-defined behavior>;\r\n}\r\n```\r\n\r\n## Proposed API\r\n```C#\r\n// System.Memory.dll\r\nnamespace System.Buffers.Text {\r\n    public static class Base64 {\r\n        public static OperationStatus BytesToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int consumed, out int written, bool isFinalBlock = true);\r\n        public static OperationStatus BytesToUtf8InPlace(Span<byte> buffer, int bytesLength, out int written, bool isFinalBlock = true);\r\n        public static int BytesToUtf8Length(int bytesLength);\r\n       // public static int BytesToUtf8Length(ReadOnlySpan<byte> utf8, bool isFinalBlock);\r\n        public static OperationStatus Utf8ToBytes(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int consumed, out int written, bool isFinalBlock = true);\r\n        public static OperationStatus Utf8ToBytesInPlace(Span<byte> buffer, out int consumed, out int written, bool isFinalBlock = true);\r\n        public static int Utf8ToBytesLength(int utf8Length);\r\n        // public static int Utf8ToBytesLength(ReadOnlySpan<byte> utf8, bool isFinalBlock);\r\n    }\r\n}\r\n```\r\n**Note:** OperationStatus is the same as TransformationStatus (https://github.com/dotnet/corefx/issues/22412).\r\n\r\n## Open Questions\r\n### 1\r\nFor computing length, another approach could be to add the following overloads, which give the \"actual\", precise length:\r\n```C#\r\npublic static int BytesToUtf8Length(ReadOnlySpan<byte> utf8, bool isFinalBlock);\r\npublic static int Utf8ToBytesLength(ReadOnlySpan<byte> utf8, bool isFinalBlock);\r\n```\r\n\r\nThe behavior of the currently proposed APIs is similar to the ones listed above for when isFinalBlock is true. For example:\r\n```C#\r\n// input = ABC DEF G\r\nBytesToUtf8Length(input, false); // returns 8\r\nBytesToUtf8Length(input, true); // returns 12 == BytesToUtf8Length(input.Length)\r\n```\r\n\r\n### 2\r\nTo extend the functionality of the currently proposed APIs to include new line support (for example, for the MIME variant of Base64), we could add the following overloads that take a ParsedFormat parameter:\r\n\r\n```C#\r\npublic static OperationStatus BytesToUtf8(ReadOnlySpan<byte> bytes, Span<byte> utf8, out int consumed, out int written, ParsedFormat format, bool isFinalBlock = true);\r\npublic static OperationStatus BytesToUtf8InPlace(Span<byte> buffer, int bytesLength, out int written, ParsedFormat format, bool isFinalBlock = true);\r\npublic static OperationStatus Utf8ToBytes(ReadOnlySpan<byte> utf8, Span<byte> bytes, out int consumed, out int written, ParsedFormat format, bool isFinalBlock = true);\r\npublic static OperationStatus Utf8ToBytesInPlace(Span<byte> buffer, out int consumed, out int written, ParsedFormat format, bool isFinalBlock = true);\r\npublic static int BytesToUtf8Length(int bytesLength, ParsedFormat format);\r\npublic static int Utf8ToBytesLength(int utf8Length, ParsedFormat format);\r\n```\r\n\r\nWhich creates a dependency on ParsedFormat (https://github.com/dotnet/corefx/issues/24607)\r\n\r\nThe usage would then look like:\r\n```C#\r\nParsedFormat format = new ParsedFormat('N', 76);\r\nint requiredSize = Base64.BytesToUtf8Length(source.Length, format);\r\nSpan<byte> encodedBytes = new byte[outputSize];\r\nBase64.BytesToUtf8(source, encodedBytes, out int consumed, out int written, format);\r\n```\r\n\r\n### 3\r\nShould we rename `Utf8ToBytesLength(int utf8Length)` to `Utf8ToBytesMaxLength` to indicate it isn't the precise length (but rather could be a few bytes larger)? Same with `BytesToUtf8Length(int bytesLength)`?\r\n\r\n</details>\r\n\r\ncc @KrzysztofCwalina, @GrabYourPitchforks, @davidfowl, @terrajobst, @karelz "},{"Id":"6772951011","Type":"PullRequestEvent","CreatedAt":"2017-10-27T02:20:54","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24908","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02126-05 (master)\" (#24908) at dotnet/corefx","RelatedBody":""},{"Id":"6772936198","Type":"PullRequestEvent","CreatedAt":"2017-10-27T02:14:49","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24911","RelatedDescription":"Opened pull request \"Removing Span<byte> extension methods and using the generic ones\" (#24911) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/issues/24840#issuecomment-339074798 and related to https://github.com/dotnet/corefx/issues/24839.\r\n> We should consider removing the `Span<byte>` as we believe we can specialize the implementation without performance loss.\r\n- No longer exposing Span\\<byte\\> specific methods. Just adding a type check within the generic methods and routing to the faster implementation when `typeof(T) == typeof(byte)`.\r\n\r\n**There is no performance regression. For example, here is the comparison for StartsWith for Span\\<byte\\>:**\r\n\r\n![image](https://user-images.githubusercontent.com/6527137/32084977-4a4d0eb2-ba81-11e7-856d-e98936bbae9f.png)\r\n\r\n- Also removing the struct constraint on \\<T\\> for IndexOf, StartsWith, SequenceEqual. I am not sure why we had those constraints to begin with.\r\n\r\ncc @KrzysztofCwalina, @jkotas, @stephentoub, @eerhardt, @benaadams, @dotnet/corefxlab-contrib \r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6773002195","Type":"IssuesEvent","CreatedAt":"2017-10-27T02:41:29","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22347","RelatedDescription":"Closed issue \"Tuple name simplification botches formatting\" (#22347) at dotnet/roslyn","RelatedBody":"With language version 7.1, use the \"simplify tuple name\" feature to simplify the \"a\" member below:\r\n```C#\r\n            int a = 1;\r\n            var t = (a: a, 2);\r\n```\r\nNote that the tuple is not reformatted afterwards leading to an extra space between the open paren and \"a\":\r\n```C#\r\n            int a = 1;\r\n            var t = ( a, 2);\r\n```\r\n"},{"Id":"6772999084","Type":"PullRequestEvent","CreatedAt":"2017-10-27T02:40:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22797","RelatedDescription":"Merged pull request \"UseInferredMemberNamed codefix show treat spaces as elastic\" (#22797) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nWith language version 7.1, use the \"simplify tuple name\" feature to simplify the \"a\" member below:\r\n```C#\r\n            int a = 1;\r\n            var t = (a: a, 2); // becomes `var t = ( a, 2);` with extra space before `a`\r\n```\r\n\r\n**Bugs this fixes:**\r\nFixes https://github.com/dotnet/roslyn/issues/22347\r\n\r\n**Workarounds, if any**\r\nFormat selection or document.\r\n\r\n**Risk**\r\n**Performance impact**\r\nLow. This PR only affects this one refactoring.\r\n\r\n**Is this a regression from a previous update?**\r\nNo.\r\n\r\n**How was the bug found?**\r\nReported by customers.\r\n\r\n@sharwell @rchande @dotnet/roslyn-ide for review. Also, please advise whether this should be considered for 15.5 or moved out to 15.later. Thanks"},{"Id":"6772964762","Type":"IssuesEvent","CreatedAt":"2017-10-27T02:26:24","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22881","RelatedDescription":"Opened issue \"Quick actions create duplicate region blocks\" (#22881) at dotnet/roslyn","RelatedBody":"Applying quick action IDE0018 (Inline variable declaration) when the code is inside a region block following a previous region block, the second region block gets duplicated.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/137729/quick-actions-create-duplicate-region-blocks.html\nVSTS ticketId: 514426_\n_These are the original issue comments:_\n\nMichael Bursill on 10/24/2017, 04:57 PM (2 days ago): <p>Recording of problem</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"6772625011","Type":"PullRequestEvent","CreatedAt":"2017-10-27T00:04:53","Actor":"KevinH-MS","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22853","RelatedDescription":"Merged pull request \"Add missing IVT for Source Based Discovery...\" (#22853) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\nRequired for improvements to Test Explorer discovery experience...\r\n\r\n**Bugs this fixes:**\r\n\r\n(either VSO or GitHub links)\r\n\r\n**Workarounds, if any**\r\n\r\nNone\r\n\r\n**Risk**\r\n\r\nNone\r\n\r\n**Performance impact**\r\n\r\nNone\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo, this is enabling new functionality\r\n\r\n**Root cause analysis:**\r\n\r\nWe didn't anticipate all the IVTs we would need when initially implementing our incremental analyzer...\r\n\r\n**How was the bug found?**\r\n\r\nN/A\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6772583432","Type":"IssuesEvent","CreatedAt":"2017-10-26T23:48:45","Actor":"controlflow","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22880","RelatedDescription":"Opened issue \"Attribute ctor with 'in' parameter + implicit 'in' argument\" (#22880) at dotnet/roslyn","RelatedBody":"**Version Used**:\r\n\r\nMaster branch from 27.10.2017\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\n[A(1)]\r\nclass A : System.Attribute {\r\n  A(in int x) { }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nIt compiles :) Cecil [crashes](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4G0CCAKAjASgLoCwAUAAIBMABGhSBSVgHRowwICWwArvBQN7EUqGNgDsKomBQAeOPhQC+xeUA==) when trying to read metadata produced.\r\n\r\n**Expected Behavior**:\r\n\r\nCompiler error over `1` argument range.\r\n\r\np.s. Error message in the case of passing attribute arguments to `ref`/`out` parameters suggest to use `ref`/`out` modifiers that are not parseable in the context of attribute arguments.\r\n\r\ncc @VSadov"},{"Id":"6772556329","Type":"IssuesEvent","CreatedAt":"2017-10-26T23:38:21","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22879","RelatedDescription":"Opened issue \"Assert about multiple explicit operation nodes with same syntax in VB\" (#22879) at dotnet/roslyn","RelatedBody":"I tried to add following VB test as part of https://github.com/dotnet/roslyn/pull/22846 without doing any source changes and I see the following assert fire: `Assert.False(true, $\"Duplicate explicit node for syntax ({operation.Syntax.RawKind}): {operation.Syntax.ToString()}\");` where both IDelegateCreation and IAnonymousObjectCreation have same syntax\r\n\r\n```\r\n        <CompilerTrait(CompilerFeature.IOperation)>\r\n        <Fact>\r\n        Public Sub TestParenthesizedDelegateCreationParent()\r\n            Dim source = <![CDATA[\r\nClass P\r\n    Private Shared Function M1() As Object\r\n        Return CType((Sub() System.Console.WriteLine()), System.Action)'BIND:\"CType((Sub() System.Console.WriteLine()), System.Action)\"\r\n    End Function\r\nEnd Class]]>.Value\r\n\r\n            Dim expectedOperationTree = <![CDATA[\r\n]]>.Value\r\n\r\n            Dim expectedDiagnostics = String.Empty\r\n\r\n            VerifyOperationTreeAndDiagnosticsForTest(Of CTypeExpressionSyntax)(source, expectedOperationTree, expectedDiagnostics)\r\n        End Sub\r\n```"},{"Id":"6772536028","Type":"PullRequestEvent","CreatedAt":"2017-10-26T23:30:45","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22878","RelatedDescription":"Opened pull request \"Fix semantic model on deconstruction-foreach expression\" (#22878) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/22495\r\n\r\nThis was reported as a Rename and FindAllReferences issue, but it stems from a bug in the semantic model. When you ask the symbol of `x` in `foreach (var (y1, y2) in x) { ... }`, the semantic model returned `null`.\r\nThe root cause is that when building the node map (from syntax to bound node), some of the generated bound nodes (the placeholder nodes) interfered with finding the most useful bound node, because they shared the same syntax (`x`).\r\n\r\nHere's the corrected behavior:\r\n![image](https://user-images.githubusercontent.com/12466233/32081383-f245ffec-ba69-11e7-8a77-b4ecfc38764a.png)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6772890080","Type":"PullRequestEvent","CreatedAt":"2017-10-27T01:55:49","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4820","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4820) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6772759069","Type":"PullRequestEvent","CreatedAt":"2017-10-27T01:00:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4819","RelatedDescription":"Merged pull request \"Update how-to-build-WebAssembly.md\" (#4819) at dotnet/corert","RelatedBody":"Link to the Visual Studio Instructions in the third instruction was adding unnecessary Documentation to the link, resulting in a 404 page."},{"Id":"6772746168","Type":"PullRequestEvent","CreatedAt":"2017-10-27T00:54:56","Actor":"OguzDerin","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4819","RelatedDescription":"Opened pull request \"Update how-to-build-WebAssembly.md\" (#4819) at dotnet/corert","RelatedBody":"Link to the Visual Studio Instructions in the third instruction was adding unnecessary Documentation to the link, resulting in a 404 page."},{"Id":"6772642422","Type":"PullRequestEvent","CreatedAt":"2017-10-27T00:11:46","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4818","RelatedDescription":"Opened pull request \"Stabilize object file images\" (#4818) at dotnet/corert","RelatedBody":"This PR is organized in 4 commits for easier review: the first three contain the interesting changes. The final filling out of each node's ordering details is less interesting since there's lots of repetition of boilerplate calls to Compare."},{"Id":"6772634629","Type":"PullRequestEvent","CreatedAt":"2017-10-27T00:08:37","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/3946","RelatedDescription":"Closed pull request \"[WIP] Image Determinism\" (#3946) at dotnet/corert","RelatedBody":"Still have a few items left to clean up in this PR but I'd like to get eyes on it now since any structural changes are likely to require a lot of typing."},{"Id":"6772297650","Type":"PullRequestEvent","CreatedAt":"2017-10-26T22:13:21","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4817","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4817) at dotnet/corert","RelatedBody":""},{"Id":"6772292475","Type":"PullRequestEvent","CreatedAt":"2017-10-26T22:11:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4816","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4816) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6772288818","Type":"PullRequestEvent","CreatedAt":"2017-10-26T22:10:46","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4816","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4816) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6772246246","Type":"PullRequestEvent","CreatedAt":"2017-10-26T21:59:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4815","RelatedDescription":"Merged pull request \"Fix init-tools when launched from a different directory\" (#4815) at dotnet/corert","RelatedBody":"Official builds don't set the current directory before launching the script..."},{"Id":"6772105580","Type":"PullRequestEvent","CreatedAt":"2017-10-26T21:24:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4815","RelatedDescription":"Opened pull request \"Fix init-tools when launched from a different directory\" (#4815) at dotnet/corert","RelatedBody":"Official builds don't set the current directory before launching the script..."},{"Id":"6771726965","Type":"PullRequestEvent","CreatedAt":"2017-10-26T19:59:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4802","RelatedDescription":"Merged pull request \"Fix standalone run of init-tools.sh\" (#4802) at dotnet/corert","RelatedBody":"Running all of buildvars-setup.sh seems like an overkill, but it does the job of setting a `HostArch`, which is all we care about, really."},{"Id":"6771605304","Type":"PullRequestEvent","CreatedAt":"2017-10-26T19:32:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4814","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4814) at dotnet/corert","RelatedBody":""},{"Id":"6771328235","Type":"PullRequestEvent","CreatedAt":"2017-10-26T18:33:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4814","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4814) at dotnet/corert","RelatedBody":""},{"Id":"6771326357","Type":"PullRequestEvent","CreatedAt":"2017-10-26T18:32:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4813","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4813) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":74,"FavoriteCount":49,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":20,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":22,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":55,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":41,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":382,"FavoriteCount":345,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":79,"RawContent":null}]}},"RunOn":"2017-10-27T05:30:20.5870362Z","RunDurationInMilliseconds":6945}