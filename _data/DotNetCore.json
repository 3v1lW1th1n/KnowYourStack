{"Data":{"Blog":{"FeedItems":[{"Title":"Tiered Compilation Preview in .NET Core 2.1","PublishedOn":"2018-08-02T22:22:13+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"If you are a fan of .NET performance there has been a lot great news lately such as Performance Improvements in .NET Core 2.1 and Announcing .NET Core 2.1, but we&#8217;ve got more. Tiered compilation...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/","RawContent":null},{"Title":".NET Framework July 2018 Update","PublishedOn":"2018-07-30T23:17:45+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update: 8/03/2018 Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Today, we released the July 2018 Update that fixes an issue in .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/","RawContent":null},{"Title":"Announcing F# 4.5 Preview","PublishedOn":"2018-07-26T19:22:31+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We’re very excited to announce that we’ll be shipping a new language version of F# soon. The version will be F# 4.5. F# 4.5 has been developed entirely via an open RFC (requests for comments) process,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/26/announcing-f-4-5-preview/","RawContent":null},{"Title":"Advisory on July 2018 .NET Framework Updates","PublishedOn":"2018-07-21T00:55:00+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update as of 8/03/2018: Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Update as of 7/30/2018: A new .NET Framework July 2018 Update...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8025565746","Type":"IssuesEvent","CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Opened issue \"https://dot.net now using TLS 1.2-only\" (#77) at dotnet/announcements","RelatedBody":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689"},{"Id":"7999286881","Type":"IssuesEvent","CreatedAt":"2018-07-21T22:29:06","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Opened issue \"July 2018 .NET Updates\" (#76) at dotnet/announcements","RelatedBody":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Documents\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n"},{"Id":"7997769217","Type":"IssuesEvent","CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Opened issue \"Advisory on July 2018 .NET Framework Updates\" (#74) at dotnet/announcements","RelatedBody":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of applications that fail to start or don't run correctly after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\nDiscussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Workaround\r\n\r\nTemporarily uninstall the [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) to restore functionality until a new update has been released to correct this problem. \r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object\r\n"},{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8067161381","Type":"IssuesEvent","CreatedAt":"2018-08-05T02:37:38","Actor":"rockerinthelocker","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19292","RelatedDescription":"Opened issue \".NET Core 2.1: Non-GAC DLLs Not Found\" (#19292) at dotnet/coreclr","RelatedBody":"See https://github.com/PowerShell/PowerShell/issues/7326 and https://github.com/PowerShell/PowerShell/issues/7076 for further details. Thank you!"},{"Id":"8067019556","Type":"PullRequestEvent","CreatedAt":"2018-08-04T23:59:24","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19291","RelatedDescription":"Opened pull request \"Clean up build.cmd/build-test.cmd/runtest.cmd\" (#19291) at dotnet/coreclr","RelatedBody":"Various minor cleanups:\r\n1. Use the same naming/style for all three.\r\n2. Make the style consistent throughout each. E.g., consistent indents,\r\n   capitalization.\r\n3. Add more consistent output, including the prefix tag used everywhere.\r\n4. build.cmd: only build cross components if native build is enabled.\r\n5. Use new __Logging variable to consolidate all logging arguments,\r\n   to reduce large (unexpanded) command line lengths."},{"Id":"8066663317","Type":"PullRequestEvent","CreatedAt":"2018-08-04T18:36:34","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19290","RelatedDescription":"Opened pull request \"Add basic check that the correct number of tests is built\" (#19290) at dotnet/coreclr","RelatedBody":"Fixes #19286"},{"Id":"8066627296","Type":"IssuesEvent","CreatedAt":"2018-08-04T18:08:48","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17692","RelatedDescription":"Closed issue \"Mscordbi uses incorrect layout for MDInternalRW.\" (#17692) at dotnet/coreclr","RelatedBody":"Mscordbi uses incorrect layout for MDInternalRW when marshaling to Target_MDInternalRW, in a couple of places. Specifically for Target_RecordPool (aligned to 4 bytes on Linux rather than 8) and Target_MapSHash (don't need to skip a byte at the beginning of struct on Linux). The mismatch causes CordbModule::GetMetadataInterface to fail for dump debugging on Linux."},{"Id":"8066626222","Type":"IssuesEvent","CreatedAt":"2018-08-04T18:07:56","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14819","RelatedDescription":"Closed issue \"Debugging instructions should clearly carry information as to how acquire symbols\" (#14819) at dotnet/coreclr","RelatedBody":"[Debugging instructions](https://github.com/dotnet/coreclr/blob/master/Documentation/building/debugging-instructions.md) should carry the information on how to acquire symbols. Whether that happens through a tool, or by manual download, or both, all locations of the symbols should be clearly documented.\r\nE.g.: the debugging instruction page should carry a link to the [core-setup](https://github.com/dotnet/core-setup) and the download links page on [DLC](https://www.microsoft.com/net/download/windows).\r\n"},{"Id":"8066621552","Type":"IssuesEvent","CreatedAt":"2018-08-04T18:04:23","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18307","RelatedDescription":"Closed issue \"Alpine Linux coreclr, dac, dbi not honoring PAL symbol versions\" (#18307) at dotnet/coreclr","RelatedBody":"The loader on Alpine links the libmscordbi.so PAL references to libvsbaseservices.so (which contains VS's debug engine PAL) instead of the the PAL in libmscordaccore.so.\r\n\r\nOn Alpine Linux the export PAL APIs from the DAC need to have a module specific prefix added so the loader links to the right module/PAL."},{"Id":"8066620708","Type":"PullRequestEvent","CreatedAt":"2018-08-04T18:03:45","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18904","RelatedDescription":"Closed pull request \"Add prefix to DAC's PAL exports for alpine\" (#18904) at dotnet/coreclr","RelatedBody":"Added some cmake logic to create assembly include mapping files. One that maps the\r\nprefixed name (DAC_foo) to the actual name (foo) which is included in the DAC module\r\nand another that maps the actual name to the prefixed name that is included in the SOS,\r\nDBI and createdump modules.\r\n\r\nThe data exports like IID_IUnknown are not prefixed and don't need to be (immutable static data).\r\n\r\nThere were some C++ exports functions exported with their decorated names in\r\nthe CatchHardwareExceptionHolder and NativeExceptionHolderBase classes. Created\r\nPAL_* style export functions that implements the code.\r\n\r\nFix lldb plugin cmake file to use LLDB_H/LLDB_LIB env vars to build it."},{"Id":"8066620346","Type":"PullRequestEvent","CreatedAt":"2018-08-04T18:03:29","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19196","RelatedDescription":"Merged pull request \"Fix mscordbi metadata reader alignment bug on Linux.\" (#19196) at dotnet/coreclr","RelatedBody":"Works fine on Windows minidumps, but on Linux (via OpenVirtualProcess\r\nfor production breakpoints and future core dumps) the compiler's struct\r\nalignment rules are different. On Windows, classes/structs are aligned\r\nbased on the largest field. On Linux, they are 4 byte aligned regardless\r\nof the field sizes.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/17692"},{"Id":"8066619797","Type":"PullRequestEvent","CreatedAt":"2018-08-04T18:03:10","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19198","RelatedDescription":"Merged pull request \"Add prefix to DAC's PAL exports for alpine\" (#19198) at dotnet/coreclr","RelatedBody":"Added some cmake logic to create assembly include mapping files. One that maps the\r\nprefixed name (DAC_foo) to the actual name (foo) which is included in the DAC module\r\nand another that maps the actual name to the prefixed name that is included in the SOS,\r\nDBI and createdump modules.\r\n\r\nThe data exports like IID_IUnknown are not prefixed and don't need to be (immutable static data).\r\n\r\nThere were some C++ exports functions exported with their decorated names in\r\nthe CatchHardwareExceptionHolder and NativeExceptionHolderBase classes. Created\r\nPAL_* style export functions that implements the code.\r\n\r\nFix lldb plugin cmake file to use LLDB_H/LLDB_LIB env vars to build it."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8065808653","Type":"PullRequestEvent","CreatedAt":"2018-08-04T07:01:33","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9797","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9797) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8066470005","Type":"PullRequestEvent","CreatedAt":"2018-08-04T16:11:55","Actor":"TheBlueSky","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/848","RelatedDescription":"Opened pull request \"Update .NET Standard versions guidelines\" (#848) at dotnet/standard","RelatedBody":"* Update .NET Standard versions table to reflect latest updates.\r\n* Update the guidelines to add the multi-targeting recommendation.\r\n* Remove the obsolete note."},{"Id":"8041487850","Type":"IssuesEvent","CreatedAt":"2018-07-31T03:16:03","Actor":"DaqingshanAimi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/846","RelatedDescription":"Closed issue \"Drawing bitmap save by EncoderParameters is bad in CentOS.\" (#846) at dotnet/standard","RelatedBody":"I have a code  to compression image,when system is windows is ok,image is 300Kb.But system is Centos is Bad,image is 1.5MB。I dont know reason.\r\n```\r\n  EncoderParameters myEncoderParameters = new EncoderParameters(1);\r\n                    EncoderParameter myEncoderParameter = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, 30);\r\n                    myEncoderParameters.Param[0] = myEncoderParameter;\r\n                    bitmap.Save(ms, GetEncoder(bitmap.RawFormat), myEncoderParameters);\r\n                    myEncoderParameters.Dispose();\r\n                    myEncoderParameter.Dispose();\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8066985112","Type":"PullRequestEvent","CreatedAt":"2018-08-04T23:19:45","Actor":"filipnavara","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31600","RelatedDescription":"Opened pull request \"System.Security: Change exception behavior of AsnWriter.WriteCharacterStringCore\" (#31600) at dotnet/corefx","RelatedBody":"… to wrap EncoderFallbackException in CryptographicException. /cc @bartonjs "},{"Id":"8066960330","Type":"PullRequestEvent","CreatedAt":"2018-08-04T22:52:09","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31578","RelatedDescription":"Merged pull request \"System.Security: Consolidate IsLegalKeySize and related methods into common code.\" (#31578) at dotnet/corefx","RelatedBody":""},{"Id":"8066672825","Type":"IssuesEvent","CreatedAt":"2018-08-04T18:43:31","Actor":"mythz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31599","RelatedDescription":"Opened issue \"There's no reliable way to detect if a .NET Standard 2.0 build is running in UWP\" (#31599) at dotnet/corefx","RelatedBody":"The only available way to [detect if an App is running in UWP](https://stackoverflow.com/a/47891292/85785):\r\n\r\n```csharp\r\nconst long APPMODEL_ERROR_NO_PACKAGE = 15700L;\r\n\r\n[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\nstatic extern int GetCurrentPackageFullName(ref int packageFullNameLength, StringBuilder packageFullName);\r\n\r\npublic bool IsRunningAsUwp()\r\n{\r\n    if (IsWindows7OrLower)\r\n    {\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        int length = 0;\r\n        StringBuilder sb = new StringBuilder(0);\r\n        int result = GetCurrentPackageFullName(ref length, sb);\r\n\r\n        sb = new StringBuilder(length);\r\n        result = GetCurrentPackageFullName(ref length, sb);\r\n\r\n        return result != APPMODEL_ERROR_NO_PACKAGE;\r\n    }\r\n}\r\n\r\nprivate bool IsWindows7OrLower\r\n{\r\n    get\r\n    {\r\n        int versionMajor = Environment.OSVersion.Version.Major;\r\n        int versionMinor = Environment.OSVersion.Version.Minor;\r\n        double version = versionMajor + (double)versionMinor / 10;\r\n        return version <= 6.1;\r\n    }\r\n}\r\n```\r\n\r\nWorks in `Debug` builds, but fails in Release/.NET Native builds with a runtime `TypeLoadException` in the latest stable VS.NET 17.6 and now fails with a build time Exception with the latest VS.NET 17.8 Preview:\r\n\r\n```\r\nMicrosoft SDKs\\UWPNuGetPackages\\microsoft.net.native.compiler\\2.1.8\\tools\\Microsoft.NetNative.targets(788,5): warning : MCG : warning MCG0007: Unresolved P/Invoke method 'kernel32.dll!GetCurrentPackageFullName' for method 'System.Int32 ServiceStack.Text.Env.GetCurrentPackageFullName(System.Int32, System.Text.StringBuilder)'. Calling this method would throw exception at runtime. Please make sure the P/Invoke either points to a Windows API allowed in UWP applications, or a native DLL that is part of the package. If for some reason your P/Invoke does not satisfy those requirements, please use [DllImport(ExactSpelling=true) to indicate that you understand the implications of using non-UWP APIs.\r\n```\r\n\r\nWhat is the recommended way within a **.NET Standard 2.0** .dll to determine if an App is running in UWP that works in both Debug and Release/.NET Native builds? \r\n\r\nAs the recommendation is to use **.NET Standard 2.0** builds for creating compatible libraries across different platforms we need a reliable way to determine at runtime which platform the library is running on. Whilst this issue is for trying to detect UWP, we also need a way to detect if running on iOS/Android. "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8066900084","Type":"IssuesEvent","CreatedAt":"2018-08-04T21:52:42","Actor":"taori","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29086","RelatedDescription":"Opened issue \"Debugger asks for file paths even though nuget package contains symbols+source\" (#29086) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 15.7.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n- Download reproduction project and unzip \r\n[SourceDebuggingDoesNotWork.zip](https://github.com/dotnet/roslyn/files/2259832/SourceDebuggingDoesNotWork.zip)\r\n- run buildscript.ps1\r\n- run moveFolderToVerify.ps1 (or rename the SourceDebuggingDoesNotWork folder)\r\n- open generated project in VS\r\n- replace Program.cs with content from here.\r\n- add nuget reference using \"localNugetFeed\" (generated reference to local nuget repo)\r\n- run with debugger\r\n- follow comment and press F11. Juding by a connect demo i watched, debugging should be working, unless i did something wrong. \r\n\r\n**Program.cs**\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n\t\t{\r\n\t\t\tif(Debugger.IsAttached)\r\n\t\t\t\tDebugger.Break();\r\n\r\n\r\n\t\t\ttry\r\n\t        {\r\n\t\t\t\t// step into this with F11 - this is where it asks for the file, even though the referenced nupkg contains symbols+source\r\n\t\t        SomeFunctionality.Divide(5, 0);\r\n\t        }\r\n\t        catch (Exception e)\r\n\t        {\r\n\t\t        Console.WriteLine(e);\r\n\t        }\r\n        }\r\n    }\r\n\r\n**Expected Behavior**:\r\n\r\nDebugger should step into source code provided with nuget package, without asking for file paths\r\n\r\n**Actual Behavior**:\r\n\r\nDebugger asks for file paths."},{"Id":"8066814541","Type":"IssuesEvent","CreatedAt":"2018-08-04T20:36:33","Actor":"keith-anders","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29085","RelatedDescription":"Opened issue \"\"Getting Started C# Syntax Transformation\" walkthrough example has error and is outdated\" (#29085) at dotnet/roslyn","RelatedBody":"The wiki page at https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Syntax-Transformation has two errors in code toward the end of the file.\r\n\r\n```C#\r\n// ...\r\n            String rewriterPath = @\"..\\..\\TypeInferenceRewriter.cs\";\r\n            String rewriterText = File.ReadAllText(rewriterText);\r\n            SyntaxTree rewriterTree =\r\n                           CSharpSyntaxTree.ParseText(rewriterText)\r\n                                           .WithFilePath(rewriterPath);\r\n\r\n\r\n            SyntaxTree[] sourceTrees = { programTree, rewriterTree };\r\n\r\n            MetadataReference mscorlib =\r\n                    MetadataReference.CreateFromAssembly(typeof(object).Assembly);\r\n            MetadataReference codeAnalysis =\r\n                    MetadataReference.CreateFromAssembly(typeof(SyntaxTree).Assembly);\r\n            MetadataReference csharpCodeAnalysis =\r\n                    MetadataReference.CreateFromAssembly(typeof(CSharpSyntaxTree).Assembly);\r\n\r\n            MetadataReference[] references = { mscorlib, codeAnalysis, csharpCodeAnalysis };\r\n\r\n            return CSharpCompilation.Create(\"TransformationCS\",\r\n                                            sourceTrees,\r\n                                            references,\r\n                                            new CSharpCompilationOptions(\r\n                                                    OutputKind.ConsoleApplication));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe line reading `String rewriterText = File.ReadAllText(rewriterText);` is a compiler error (variable cannot be initialized using itself) and should be `String rewriterText = File.ReadAllText(rewriterPath);`. Also, the rest of the code block uses the obsolete `MetadataReference.CreateFromAssembly(Assembly assembly)` API and should be changed to (I presume) use the `MetadataReference.CreateFromFile(string path)` API.\r\n\r\nNote that the `CreateFromFile` method takes the path, not the `Assembly`, so a `.Location` will have to be added to each of the assembly accesses.\r\n\r\nAlso note that these errors each occur twice in the document: once in the sample code under step 19 and once as that code was copy-pasted into the \"Your Program.cs file should look like this now\" complete example under step 20.\r\n\r\nI would make a PR, but github doesn't support PRs for wiki pages."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8067041359","Type":"PullRequestEvent","CreatedAt":"2018-08-05T00:23:43","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6180","RelatedDescription":"Opened pull request \"Fix WebAssembly sealed calls\" (#6180) at dotnet/corert","RelatedBody":"Fix calling sealed virtual methods now that sealed vtables are always enabled."},{"Id":"8066156089","Type":"IssuesEvent","CreatedAt":"2018-08-04T12:10:19","Actor":"FoggyFinder","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6179","RelatedDescription":"Opened issue \"[.NET Native] error RHB0011: Internal error \"!methodDesc->IsCanonicalMethod(CanonDefinitionTypeDiscoveryPolicy::AnyCanonLookup)\"\" (#6179) at dotnet/corert","RelatedBody":"**_MCVE:_**\r\n\r\n1. Create new UWP project \r\n2. Add next line:\r\n\r\n```csharp\r\n List<(string Left, string Right)?> P2 = new List<(string Left, string Right)?> { null };\r\n```\r\n\r\nwhen I try to compile I got:\r\n\r\n> 1>...\\Microsoft.NetNative.targets(788,5): error : RHBIND : error RHB0011: Внутренняя ошибка: \"!methodDesc->IsCanonicalMethod(CanonDefinitionTypeDiscoveryPolicy::AnyCanonLookup)\" в \"f:\\dd\\ndp\\rh\\src\\tools\\rhbind\\mdilmodule.cpp:12529\"\r\n> 1>...\\Microsoft.NetNative.targets(788,5): error : ILT0005: Задача \"C:\\Users\\NF\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.1.8\\tools\\x86\\ilc\\Tools\\rhbind.exe @\"F:\\InternP\\NetNativeError-master\\NetNativeError-master\\NetNativeError.Control\\obj\\x86\\Release\\ilc\\intermediate\\rhbindargs.NetNativeError.Control.rsp\"\" вернула код завершения 11.\r\n"},{"Id":"8064790381","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:58:37","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6178","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8064622571","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:17:39","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6178","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8063778030","Type":"PullRequestEvent","CreatedAt":"2018-08-03T17:03:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6177","RelatedDescription":"Opened pull request \"Add support for reflection-invoking methods returning ByRefs\" (#6177) at dotnet/corert","RelatedBody":"This is a port of dotnet/coreclr#17732."},{"Id":"8061489536","Type":"IssuesEvent","CreatedAt":"2018-08-03T09:12:35","Actor":"bernd5","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6176","RelatedDescription":"Opened issue \"Documentation: cpp.rsp\" (#6176) at dotnet/corert","RelatedBody":"If I just do what is written in \"how-to-build-and-run-ilcompiler-in-visual-studio.md\" I get the following error:\r\n\r\nInternal.CommandLine.CommandLineException: \"No files matching F:\\Projekte\\corert\\bin\\obj\\Windows_NT.x64.Debug\\cpp.rsp\"\r\n\r\nThis is true, because there is no rsp file...\r\nShould it be generated during compilation? What is the usage of this file? Can I use a csproj file, too?\r\n\r\n\r\n"},{"Id":"8060630835","Type":"PullRequestEvent","CreatedAt":"2018-08-03T05:28:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6145","RelatedDescription":"Closed pull request \"[JustForView]Moved LocalVariableInfo to shared\" (#6145) at dotnet/corert","RelatedBody":"Related Coreclr PR https://github.com/dotnet/coreclr/pull/19184"},{"Id":"8060599754","Type":"PullRequestEvent","CreatedAt":"2018-08-03T05:15:50","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6175","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6175) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8059914163","Type":"PullRequestEvent","CreatedAt":"2018-08-03T00:37:07","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6175","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6175) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8065450447","Type":"IssuesEvent","CreatedAt":"2018-08-04T01:37:47","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2451","RelatedDescription":"Closed issue \"Multiple framework target and binding redirect problem\" (#2451) at dotnet/sdk","RelatedBody":"Please let me know if this is not the right place for this type of issue.\r\n\r\n### Description\r\n* Multiple-targeted DLL for `net472` and `netstandard2.0`\r\n* The .NET Framework version of the dll is put in the GAC. It has to be since it is called from code that I injected into other assemblies via the .NET Profiler API.\r\n* After building (either in VS or msbuild command line), there is a `System.Interactive.Async.dll` in the binaries directory (e.g., `bin\\debug\\net471`). It is the `3.0.3000.0` version.\r\n* I then go through my automated steps to install my assemblies into a folder from which I add all of them to the GAC (this is just for the `net471` , not the `netcore2.1`, target).\r\n* I reset IIS, then run a .NET Framework-based web application (it was built against .NET Framework 4.6.1)\r\n* My profiler instruments the app, and when there is a call to my assembly, an exception occurs:\r\n\r\n```\r\nException Could not load file or assembly 'System.Interactive.Async, Version=3.0.1000.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263' or one of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\n* Notice that it is *not* the same version as the one that was in my `net471` binaries folder.\r\n\r\n* I discovered that `Grpc.Core`, one of my dependent assemblies, relies on version `3.0.1000.0` of `System.Interactive.Async`. \r\n\r\n* I've tried adding a binding redirect both from `3.0.1000.0` to `3.0.3000.0` (and the other way, from `3.0.3000.0` to `3.0.1000.0`) in my assembly's `app.config`. But it doesn't seem to work. \r\n\r\n* I even tried putting the binding redirect in a file named `Grpc.Core.dll.config` in the same directory as the dlls (not in the GAC though), but that didn't help.\r\n\r\n* Finally, I have no idea why the newer version of `System.Interactive.Async.dll` is even being put in my `net471` binaries folder. I walked through all of the assemblies I include in ILSpy and none of them pull that in. \r\n\r\nAny help deciphering what is going on would be fantastic. Thanks in advance!\r\n\r\nBob"},{"Id":"8065365184","Type":"IssuesEvent","CreatedAt":"2018-08-04T00:36:17","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2454","RelatedDescription":"Opened issue \"Transitive project references missing aliases\" (#2454) at dotnet/sdk","RelatedBody":"Repro: A set of projects that have P2P references like so:\r\n\r\nD -> C \r\nC -> A (with alias = A)\r\nC -> B\r\n\r\nA and B contain class of the same name. C is ok since it only sees one definition unaliased. D ends up implicitly referencing A and B, but without any aliases. Hence D reports ambiguous reference when it tries to access the class.\r\n\r\nUnzip [Aliases.zip](https://github.com/dotnet/sdk/files/2259084/Aliases.zip) and run `dotnet build` in directory `D`.\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1025145757714640896","CreatedAt":"2018-08-02T22:26:09+00:00","UserScreenname":"dotnet","Text":"Tiered Compilation Preview in .NET Core 2.1 https://t.co/iDmpwcq86K by @noahsfalk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":230,"FavoriteCount":140,"RawContent":null},{"Id":"1022528693199990784","CreatedAt":"2018-07-26T17:06:52+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is partnering with organizers around the globe to bring you local in-person events and watch parties! J… https://t.co/jOUga16bB0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":155,"FavoriteCount":81,"RawContent":null}]}},"RunOn":"2018-08-05T05:30:27.7706335Z","RunDurationInMilliseconds":8662}