{"Data":{"GitHubIssues":{"Issues":[{"Id":"351858011","IsPullRequest":false,"CreatedAt":"2018-08-18T22:49:16","Actor":"AlanParr","Number":"1331","RawContent":null,"Title":"NullReference exception on HTTP call","State":"open","Body":"### Title\r\nNullReferenceException from DotNetDispatcher when calling Azure Functions from Blazor application.\r\n\r\n### Functional impact\r\nPage locks up.\r\n\r\n### Minimal repro steps\r\nMinimal reproduction at **https://github.com/AlanParr/bladiusrepro**\r\n * Open the repro project.\r\n * Start the Bladius.Functions project.\r\n * Start the Bladius project.\r\n\r\nIn JobService.cs, code that calls Azure Function causes the issue, returning static data instead does not, so it is related to the Azure Function call somehow.\r\n\r\n### Expected result\r\nPage calls Azure Function and displays resulting data.\r\n\r\n### Actual result\r\nNullReferenceException appears in console:\r\n\r\n```\r\nError: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1cf0590 + 0x001c4> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1cf0148 + 0x00084> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n```\r\n\r\nBrowser prompts to Stop the page, clicking results in the following appearing in the console:\r\n```\r\nError: Script terminated by timeout at:\r\nwasm-function[416]@http://localhost:62882/_framework/wasm/mono.js:172839:1\r\nwasm-function[3760]@http://localhost:62882/_framework/wasm/mono.js:999114:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:245338:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[3989]@http://localhost:62882/_framework/wasm/mono.js:1042224:1\r\nwasm-function[4918]@http://localhost:62882/_framework/wasm/mono.js:1203213:1\r\nwasm-function[1690]@http://localhost:62882/_framework/wasm/mono.js:478541:1\r\nwasm-function[487]@http://localhost:62882/_framework/wasm/mono.js:180556:1\r\nwasm-function[4484]@http://localhost:62882/_framework/wasm/mono.js:1125735:1\r\nwasm-function[4487]@http://localhost:62882/_framework/wasm/mono.js:1126890:1\r\nwasm-function[3228]@http://localhost:62882/_framework/wasm/mono.js:814407:1\r\nwasm-function[3796]@http://localhost:62882/_framework/wasm/mono.js:1006104:1\r\nModule._mono_background_exec@http://localhost:62882/_framework/wasm/mono.js:1:173240\r\npump_message@http://localhost:62882/_framework/wasm/mono.js:1:149472\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1331","RelatedDescription":"Open issue \"NullReference exception on HTTP call\" (#1331)"},{"Id":"351150636","IsPullRequest":true,"CreatedAt":"2018-08-17T16:48:35","Actor":"SteveSandersonMS","Number":"1321","RawContent":null,"Title":"Server rendering: shrink traffic","State":"closed","Body":"Fixes #1219, and if we include the RecyclableMemoryStreamManager part, also #1132\r\n\r\nThis PR is a response to #1219. The goal is to make server-rendered Blazor send less data over the wire. In #1219 we found that changing the stock FetchData page to return 500 forecasts caused it to send about 240KB over the websocket connection on its initial render, which is far more than the equivalent HTML.\r\n\r\nThis PR implements two optimisations:\r\n\r\n1. When `RenderBatchWriter` builds its string table, it now de-duplicates the strings. This reduces the 500-forecasts size from 243504 bytes to 137569 bytes (56% of original).\r\n2. The serialized render batch data is now gzip-compressed. This further reduces the 500-forecasts size from 137569 bytes to 7705 bytes (3% of original).\r\n\r\nSo in summary, **this PR reduces the bandwidth requirement in the large-table scenario by 97%**.\r\n\r\nFor smaller payloads the percentage reduction would be less but really it's the bigger payloads that need optimisation most anyway.\r\n\r\n**CR notes:** I'm a bit on the fence about whether to include the `Microsoft.IO.RecyclableMemoryStream` part. [It claims to make a big difference in eliminating large-object-heap bottlenecks](http://www.philosophicalgeek.com/2015/02/06/announcing-microsoft-io-recycablememorystream/), but I haven't got any measurements of that in our case. There's probably nothing harmful about using it, since it's been around for a while and pretty well battle-tested in some critical scenarios such as Bing. I lean towards including this unless @rynowak has concerns.","Url":"https://github.com/aspnet/Blazor/pull/1321","RelatedDescription":"Closed or merged PR \"Server rendering: shrink traffic\" (#1321)"},{"Id":"351664558","IsPullRequest":false,"CreatedAt":"2018-08-17T16:47:00","Actor":"SteveSandersonMS","Number":"1330","RawContent":null,"Title":"Make server-rendering WebSocket traffic more compact","State":"open","Body":"This follows on from #1321. After consultation with security specialists, we've decided not to rely on gzip by default. Instead we intend to shrink the traffic by using more compact but fixed representations so as to avoid any potential issues.\r\n\r\nStrategies:\r\n\r\n1. Represent numbers as LEB128 instead of 4-byte ints. Also remove padding from edit frames and render tree frames.\r\n    * This reduces the 500-item weather forecast test case from ~246500 bytes to ~135000 bytes\r\n2. Deduplicate *only* HTML element names, attribute names, and pure whitespace\r\n    * This reduces it further to ~40200 bytes\r\n3. Stop writing out lists of array indices. These simplified things for the deserializer, but we can just make the deserializer do more work.\r\n    * This reduces it further to ~34000 bytes\r\n\r\nSo in total, without relying on compression, we can reduce the traffic to about 14% of the original. This is also a good amount more compact that the equivalent HTML representation (about a third smaller).\r\n\r\nThe proposal is to do only point (2) in 0.6.0, because it's very cheap to implement. The others will go on the backlog.","Url":"https://github.com/aspnet/Blazor/issues/1330","RelatedDescription":"Open issue \"Make server-rendering WebSocket traffic more compact\" (#1330)"},{"Id":"351329932","IsPullRequest":false,"CreatedAt":"2018-08-17T15:29:53","Actor":"kevinjpetersen","Number":"1327","RawContent":null,"Title":"Server-side Sessions","State":"closed","Body":"Hello! I've been searching and searching and experimenting and I can't seem to find whether or not it's possible to Save and Retrieve Server-side sessions in Blazor Server-side projects.\r\n\r\nI know SessionStorage is a thing in the Client-side, but saving user data like ID there would be a massive security risk.\r\n\r\nIs it possible at the moment to Save and Retrieve a session on the server, just like you would normally with a HttpContext in ASP.NET Core Controllers?","Url":"https://github.com/aspnet/Blazor/issues/1327","RelatedDescription":"Closed issue \"Server-side Sessions\" (#1327)"},{"Id":"351044901","IsPullRequest":true,"CreatedAt":"2018-08-17T11:35:24","Actor":"danroth27","Number":"1320","RawContent":null,"Title":"Scan only declared methods for JS interop","State":"closed","Body":"Fixes #1295 ","Url":"https://github.com/aspnet/Blazor/pull/1320","RelatedDescription":"Closed or merged PR \"Scan only declared methods for JS interop\" (#1320)"},{"Id":"351557844","IsPullRequest":true,"CreatedAt":"2018-08-17T11:25:52","Actor":"SteveSandersonMS","Number":"1329","RawContent":null,"Title":"Eliminate temporary MemoryStream buffers used during RenderBatch serialization","State":"open","Body":"Fixes #1132, in the sense that we don't need any pool for temporary buffers any more, because there are no more temporary buffers.\r\n\r\nWhile implementing #1321, it was necessary to add even more temporary `MemoryStream` and `byte[]` arrays to support `RenderBatch` serialization. It's potentially possible to mitigate this by using some combination of `ArrayPool` and `RecyclableMemoryStream`, but that solution adds complexity and dependencies on further external libraries.\r\n\r\nFortunately it turns out we can bypass all of that, eliminate all the temporary buffers, and stream directly to the underlying MessagePack output buffer. All that's really needed is:\r\n\r\n 1. To understand [how binary blobs are represented in the MessagePack spec](https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family) (it's straightforwards: it's a length-prefixed array)\r\n 2. To encapsulate that knowledge in a `Stream` subclass so that `RenderBatchWriter` can pipe its output into it.\r\n\r\nStep 2 is equivalent to piping to a `MemoryStream`, then calling `MessagePackBinary.WriteBytes(ref buffer, offset, memoryStream.GetBuffer(), memoryStream.Length)`, but without needing the temporary storage.","Url":"https://github.com/aspnet/Blazor/pull/1329","RelatedDescription":"Open PR \"Eliminate temporary MemoryStream buffers used during RenderBatch serialization\" (#1329)"},{"Id":"351435212","IsPullRequest":false,"CreatedAt":"2018-08-17T02:27:47","Actor":"renatoprogramer","Number":"1328","RawContent":null,"Title":"Blazor with Kelstrel crashes vs","State":"open","Body":"Blazor with Kelstrel causes vs. locking.\r\nI'm facing a problem with the Kestrel every time I start for the second time the app it causes Visual Studio locking and then closing, this is happening to all friends I know is a shame.\r\n  The problem seems to be because when stopped the build it keeps running in the background when started again as already has use of the delivery and the service causes this fatal error.","Url":"https://github.com/aspnet/Blazor/issues/1328","RelatedDescription":"Open issue \"Blazor with Kelstrel crashes vs\" (#1328)"},{"Id":"351315903","IsPullRequest":false,"CreatedAt":"2018-08-16T23:19:41","Actor":"kevinjpetersen","Number":"1325","RawContent":null,"Title":"Task.Delay without 'await' makes Windows hang forever","State":"closed","Body":"**Info about the project:**\r\n- Running Blazor 0.5.1, ASP.NET Core 2.1\r\n- Blazor Server-side Project\r\n\r\n**Issue:**\r\nSo I tried to experiment with the Task.Delay aync/await, and without it. First I tried with the usual way, async Task and then await the Task.Delay. This works fine (But locks the UI thread)\r\n\r\nBut If I remove the await from Task.Delay, Windows hangs and in the end a force shutdown is required as Windows itself don't respond.\r\n\r\nHere's my OnInitAsync code where the Task is executed:\r\n\r\n```\r\nprotected override async Task OnInitAsync()\r\n    {\r\n        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\r\n        isRunning = true;\r\n\r\n        Task loopTask = Task.Run(() =>\r\n        {\r\n            Random Ran = new Random();\r\n            while (isRunning)\r\n            {\r\n                forecasts.Add(new WeatherForecast()\r\n                {\r\n                    Date = DateTime.Now,\r\n                    Summary = \"Bla bla\",\r\n                    TemperatureC = Ran.Next(1, 100),\r\n                    TemperatureF = Ran.Next(1, 100)\r\n                });\r\n                Task.Delay(1000);\r\n            }\r\n        });\r\n    }\r\n```\r\n\r\nIs the \"Hang windows until it basically crashes\" an intended feature? Shouldn't something (The Blazor ASP.NET Server) prevent this somehow?","Url":"https://github.com/aspnet/Blazor/issues/1325","RelatedDescription":"Closed issue \"Task.Delay without 'await' makes Windows hang forever\" (#1325)"},{"Id":"351320027","IsPullRequest":false,"CreatedAt":"2018-08-16T18:34:01","Actor":"MarkStega","Number":"1326","RawContent":null,"Title":"Visual Studio hangs when building a Blazor project (15.8.0)","State":"open","Body":"I tried to report a VS issue using the feedback system with\r\n\r\n\"I have a Blazor based solution with 6 DLL's built with the Blazor tooling that are all .Net Standard 2.0 and one that is ASP.Net Core 2.1\r\n\r\nUp until yesterday, this solution built properly with VS 15.7, I upgraded to VS 15.8 and now the build hangs after I make a source change and do either Ctrl-F5 or F6. I have to cancel the build and then the next build works as expected. If I make another source change again the build hangs and has to be canceled.\r\n\r\nThe environment is Win 10 X64\"\r\n\r\nThe response that I received was\r\n\r\n\"Van Kichline [MSFT] on 8/16/2018\r\nThank you for your feedback.Currently Blazor is in an experimental phase and is only accepting issue reports on the GitHub issue tracker at https://github.com/aspnet/Blazor/issues . Thanks!\"\r\n\r\nThe issue was better defined by @uwefms in #1323 as being caused by starting the build with changed files.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1326","RelatedDescription":"Open issue \"Visual Studio hangs when building a Blazor project (15.8.0)\" (#1326)"},{"Id":"351296534","IsPullRequest":false,"CreatedAt":"2018-08-16T17:21:36","Actor":"arpadbarta","Number":"1324","RawContent":null,"Title":"VS 15.8: New project from template results in empty solution","State":"open","Body":"After upgrading VS to 15.8 and .Net Core to 2.1.400 newly created project with the Blazor template results in empty solutions. Trying to add generated projects fails with incomplete project files.\r\n\r\nChanging the .Net Core version in global.json to 2.1.400 solves the problem and generated projects can be added.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1324","RelatedDescription":"Open issue \"VS 15.8: New project from template results in empty solution\" (#1324)"},{"Id":"350981266","IsPullRequest":false,"CreatedAt":"2018-08-16T15:29:26","Actor":"danroth27","Number":"1318","RawContent":null,"Title":"Make it easy to develop and debug using server-side Blazor and then switch to client-side Blazor","State":"closed","Body":"Now that we support running Blazor server-side some users are choosing to develop using server-side Blazor to take advantage of normal .NET debugging, and then switch to client-side Blazor to verify and then publish the app. Setting up an app to support this workflow is possible, but switching back and forth between the two hosting models requires a few manual steps. Could we make it as simple as setting a build property?","Url":"https://github.com/aspnet/Blazor/issues/1318","RelatedDescription":"Closed issue \"Make it easy to develop and debug using server-side Blazor and then switch to client-side Blazor\" (#1318)"},{"Id":"351031771","IsPullRequest":false,"CreatedAt":"2018-08-16T15:26:23","Actor":"renatoprogramer","Number":"1319","RawContent":null,"Title":"When will be officially released?","State":"closed","Body":"When will be officially released\r\n\r\nI saw that Microsoft is already using this wonder I want to use as fast as possible.\r\n\r\nhttps://webapp.kaiza.la //Example production Blazor","Url":"https://github.com/aspnet/Blazor/issues/1319","RelatedDescription":"Closed issue \"When will be officially released?\" (#1319)"},{"Id":"351204177","IsPullRequest":false,"CreatedAt":"2018-08-16T13:24:26","Actor":"uwefms","Number":"1323","RawContent":null,"Title":"Blazor Templates gone in VS 15.8.0","State":"open","Body":"After upgrading to VS 15.8.0 and SDK 2.1.400 all blazor templates (core 2.0 and 2.1) are gone. Creating new apps with dotnet new works as expected and the newly created projects can be edited with VS. Deinstalling and reinstalling the asp.net blazor language services did not help.\r\n\r\n   Uwe","Url":"https://github.com/aspnet/Blazor/issues/1323","RelatedDescription":"Open issue \"Blazor Templates gone in VS 15.8.0\" (#1323)"},{"Id":"351195063","IsPullRequest":false,"CreatedAt":"2018-08-16T13:00:32","Actor":"MarkStega","Number":"1322","RawContent":null,"Title":"Bind does not yet handle radio buttons","State":"open","Body":"I have the the following in my cshtml\r\n````\r\n    <td>\r\n        <input type=\"radio\" name=\"vacation\" bind=\"@northwestVacation\" /> Northwest @northwestVacation<br>\r\n        <input type=\"radio\" name=\"vacation\" bind=\"@sinaiVacation\" /> Sinai @sinaiVacation\r\n    </td>\r\n````\r\nwith corresponding properties `northwestVacation` and `sinaiVacation` in my code. During a debug session I see the `get` called numerous times for each but even with a `true` value the corresponding radio button is not in the selected state. And, as I select either button I never see the `set` called on either property.","Url":"https://github.com/aspnet/Blazor/issues/1322","RelatedDescription":"Open issue \"Bind does not yet handle radio buttons\" (#1322)"},{"Id":"350968239","IsPullRequest":false,"CreatedAt":"2018-08-15T21:09:32","Actor":"ransagy","Number":"1317","RawContent":null,"Title":"SVG element attributes get mangled after build","State":"open","Body":"In one of my components, I have a simple inline SVG with a path in it:\r\n\r\n```html\r\n<svg class=\"notif-icon\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\" />\r\n</svg>\r\n```\r\n\r\nNotice the casing on `viewBox` and `preserveAspectRatio`.\r\nAfter building and running the page containing said component, The result looks like this:\r\n\r\n```html\r\n<svg class=\"notif-icon\" viewbox=\"0 0 24 24\" preserveaspectratio=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"></path>\r\n</svg>\r\n```\r\n\r\nThe CSS on that element, if that matters:\r\n```css\r\n.notif-icon {\r\n    fill: white;\r\n    width: 36px;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n}\r\n```\r\n\r\nThe casing on the attributes got flattened to lower-case in the process. At least in Firefox 61 and Chrome 68, This produces an invalid result. Applying any edit to the element in respective browser's devtools or simply correcting the casing produces the expected result.","Url":"https://github.com/aspnet/Blazor/issues/1317","RelatedDescription":"Open issue \"SVG element attributes get mangled after build\" (#1317)"},{"Id":"350876370","IsPullRequest":false,"CreatedAt":"2018-08-15T16:28:50","Actor":"SteveSandersonMS","Number":"1316","RawContent":null,"Title":"Improved linker defaults","State":"open","Body":" * Consider Mono team's recommendations for a linker config that can strip out more\r\n * Make sure Json.NET works out of the box\r\n * Consider changing default build setup so that we only strip the BCL, not any other referenced assemblies","Url":"https://github.com/aspnet/Blazor/issues/1316","RelatedDescription":"Open issue \"Improved linker defaults\" (#1316)"},{"Id":"350875776","IsPullRequest":false,"CreatedAt":"2018-08-15T16:27:02","Actor":"SteveSandersonMS","Number":"1315","RawContent":null,"Title":"Remove the need for @addTagHelper","State":"open","Body":"Ideally also this ties in with being namespace-sensitive when recognizing components.","Url":"https://github.com/aspnet/Blazor/issues/1315","RelatedDescription":"Open issue \"Remove the need for @addTagHelper\" (#1315)"},{"Id":"350794527","IsPullRequest":true,"CreatedAt":"2018-08-15T12:55:55","Actor":"SteveSandersonMS","Number":"1314","RawContent":null,"Title":"Fix publishing following recent build changes (now that $(OutDir) is relative)","State":"closed","Body":"…we need to use `$(TargetDir)` instead, which is absolute.","Url":"https://github.com/aspnet/Blazor/pull/1314","RelatedDescription":"Closed or merged PR \"Fix publishing following recent build changes (now that $(OutDir) is relative)\" (#1314)"},{"Id":"349863851","IsPullRequest":false,"CreatedAt":"2018-08-15T08:06:31","Actor":"rpedretti","Number":"1302","RawContent":null,"Title":"[Quesion] JS Context is different when published?","State":"closed","Body":"At my machine, in Release build, the `window.AmbientLightSensor` does exists, but after publishing it to Azure the JS context is not the same as running it at localhost.\r\n\r\nIs it a bug or a special config is needed to work as expected?","Url":"https://github.com/aspnet/Blazor/issues/1302","RelatedDescription":"Closed issue \"[Quesion] JS Context is different when published?\" (#1302)"},{"Id":"350020122","IsPullRequest":false,"CreatedAt":"2018-08-15T08:05:27","Actor":"RoryChrist","Number":"1304","RawContent":null,"Title":"Rendering lists of components","State":"closed","Body":"I don't see anything mentioned in the \"Component model\" issue (#1), so I was wondering if there are plans to address rendering list of components.  For example:\r\n\r\n```\r\n    @foreach (var item in toDoListItems)\r\n    {\r\n        <ToDoItemComponent Item=\"@item\" />\r\n    }\r\n```\r\n\r\nAs it currently stands, if I insert an item at position \"i\", all the existing component instances from \"i\" to the end of the list will have their parameter set to \"i + 1\", resulting in a significant number of changes instead of just one component instance being created.  The same with removing an item from a list.\r\n\r\nAre there plans to add some sort of \"key\" functionality, so the framework can match up list items with their original component instances and process changes more efficiently?","Url":"https://github.com/aspnet/Blazor/issues/1304","RelatedDescription":"Closed issue \"Rendering lists of components\" (#1304)"},{"Id":"350645134","IsPullRequest":false,"CreatedAt":"2018-08-15T08:04:09","Actor":"danielmeza","Number":"1313","RawContent":null,"Title":"Make autogenerated class for component partial","State":"closed","Body":"The idea is to make the class generated for a .cshtml component partial in order to extend it","Url":"https://github.com/aspnet/Blazor/issues/1313","RelatedDescription":"Closed issue \"Make autogenerated class for component partial\" (#1313)"},{"Id":"350592847","IsPullRequest":false,"CreatedAt":"2018-08-15T00:01:59","Actor":"kant2002","Number":"1312","RawContent":null,"Title":"Notification about UI state change for long running tasks","State":"closed","Body":"I play with simple NLP application inside browser.\r\n I want to add loading indicator. Right now I use following approach\r\n\r\n```\r\nthis.loading = true;\r\nthis.StateHasChanged();\r\ntry {\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\");\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```\r\n\r\nMain trick is using `StateHasChanged`. My question is: Is this correct way to do that? How Blazor in general think such cases should be handled. I'm fine with calling `StateHasChanged()` but I prefer that it would be called automatically before `await`. \r\n\r\n\r\n## Example 1\r\n```\r\nthis.loading = true;\r\ntry {\r\n    // this.StateHasChanged(); called here by runtime\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\");\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```\r\n\r\n## Example 2\r\nor better, if I could control that using for example `.ConfigureAwait(false)`\r\n\r\n```\r\nthis.loading = true;\r\ntry {\r\n    // this.StateHasChanged(); called here by runtime\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\")\r\n             .ConfigureAwait(false);\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1312","RelatedDescription":"Closed issue \"Notification about UI state change for long running tasks\" (#1312)"},{"Id":"350523660","IsPullRequest":false,"CreatedAt":"2018-08-14T23:55:02","Actor":"Andrzej-W","Number":"1311","RawContent":null,"Title":"Priority for SSR (Server Side Rendering)","State":"closed","Body":"Hello Blazor Team\r\nA few days ago I wrote this answer https://github.com/aspnet/Blazor/issues/1299#issuecomment-412340860 to one of the questions. Now I'm thinking about already available Blazor features and current limitations. We all know that Blazor is not perfect yet, but in my opinion it is good enough to create first experimental projects and publish them to show to other people around the world how wonderful it is. There is one **big** missing feature - server side rendering #24. Web site which is not available for indexing by Google/Bing/Yahoo robots simply does not exists in the internet.\r\n\r\nSome features mentioned in https://github.com/aspnet/Blazor/issues/1299#issuecomment-412340860 are not implemented at all or have bugs/limitations, but in basic, experimental projects we can try to find a workaround or simply don't use something. Unfortunately there is no workaround for SSR and SEO. If possible please prioritize this task.","Url":"https://github.com/aspnet/Blazor/issues/1311","RelatedDescription":"Closed issue \"Priority for SSR (Server Side Rendering)\" (#1311)"},{"Id":"350031209","IsPullRequest":false,"CreatedAt":"2018-08-14T21:44:19","Actor":"Lupusa87","Number":"1306","RawContent":null,"Title":"<UseRazorBuildServer>false</UseRazorBuildServer> as default","State":"closed","Body":"```\r\n<PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <UseRazorBuildServer>false</UseRazorBuildServer>\r\n    <OutputType>Library</OutputType>\r\n    <IsPackable>true</IsPackable>\r\n    <BlazorLinkOnBuild>false</BlazorLinkOnBuild>\r\n    <LangVersion>7.3</LangVersion>\r\n  </PropertyGroup>\r\n```\r\n\r\nI am adding <UseRazorBuildServer>false</UseRazorBuildServer> for all my projects because it was taking long to build without this. I did some research and found this solution.\r\n\r\nFor new people it will be better to avoid this problem having this as default.\r\nIf you will not be agree then it is necessary blazor.net to advice about this when getting started with blazor.","Url":"https://github.com/aspnet/Blazor/issues/1306","RelatedDescription":"Closed issue \"<UseRazorBuildServer>false</UseRazorBuildServer> as default\" (#1306)"},{"Id":"350029048","IsPullRequest":false,"CreatedAt":"2018-08-14T15:14:04","Actor":"Lupusa87","Number":"1305","RawContent":null,"Title":"dotnet new blazorlib creates 0.4.0","State":"closed","Body":"Current:\r\n\r\n```\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.4.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.4.0\" />\r\n  </ItemGroup>\r\n\r\n```\r\nShould be:\r\n\r\n```\r\n <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.5.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.5.1\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1305","RelatedDescription":"Closed issue \"dotnet new blazorlib creates 0.4.0\" (#1305)"},{"Id":"350411432","IsPullRequest":false,"CreatedAt":"2018-08-14T13:05:31","Actor":"hokusp","Number":"1310","RawContent":null,"Title":"Load shared component dynamically","State":"closed","Body":"Is it possible to load a dll with a shared BlazorComponent from a file (or download it, or...) and then use it?\r\n\r\nthanks for hints","Url":"https://github.com/aspnet/Blazor/issues/1310","RelatedDescription":"Closed issue \"Load shared component dynamically\" (#1310)"},{"Id":"350064691","IsPullRequest":true,"CreatedAt":"2018-08-14T12:21:20","Actor":"SteveSandersonMS","Number":"1307","RawContent":null,"Title":"E2E benchmarks","State":"closed","Body":"Adds a new project, `Microsoft.AspNetCore.Blazor.E2EPerformance`. When run it displays a benchmark runner that works by launching a real Blazor app in an iframe and scripting various perf test cases.\r\n\r\nThe intent is that:\r\n\r\n(1) We can publish this app to pure static files, and hand a copy to the Mono WebAssembly team who can then try running it against newer builds of Mono WebAssembly (by replacing mono.wasm/mono.js), so as to quanity the effects of optimisations\r\n(2) We can track the figures for different versions of Blazor (which includes the effects of moving to newer versions of Mono). We intend to record \"official\" timings using the ASP.NET perf test rig so as to be comparing with consistent hardware over time.\r\n\r\nWe can add further benchmark cases over time if we want, but the simple set in `Microsoft.AspNetCore.Blazor.E2EPerformance/wwwroot/benchmarks/*.js` will suffice for now.\r\n\r\n![image](https://user-images.githubusercontent.com/1101362/44039603-5835862e-9f11-11e8-9e8a-0aeab3ce4404.png)\r\n","Url":"https://github.com/aspnet/Blazor/pull/1307","RelatedDescription":"Closed or merged PR \"E2E benchmarks\" (#1307)"},{"Id":"350177908","IsPullRequest":true,"CreatedAt":"2018-08-13T20:17:46","Actor":"rynowak","Number":"1309","RawContent":null,"Title":"Fix #1298","State":"open","Body":"This change lifts our Razor dependencies to 2.1.1. This is needed\r\nbecause by default ASP.NET Core projects will depend on 2.1.1 - which\r\nresults in a conflict trying to use the Blazor compiler. The Blazor\r\ncompiler will load the 2.1.0 msbuild tasks, which then break loading the\r\n2.1.1 tasks.\r\n\r\nSince this is happening in the MSBuild process, we can't really write\r\nany code to sort this out. We have to make sure the versions match.\r\n\r\nIn general the guidance for ASP.NET Core is that projects will **compile\r\nagainst** 2.1.1 so this won't be a problem in the future unless a user\r\nproject specifically lifts ASP.NET Core to a higher version. If that's\r\nthe case they will also have to live `Microsoft.AspNetCore.Razor.Design`\r\nto match.","Url":"https://github.com/aspnet/Blazor/pull/1309","RelatedDescription":"Open PR \"Fix #1298\" (#1309)"},{"Id":"350151893","IsPullRequest":false,"CreatedAt":"2018-08-13T18:59:54","Actor":"kant2002","Number":"1308","RawContent":null,"Title":"ILLink incorrect parameters","State":"open","Body":"I have issue which is similar to #356, but appear of different nature.\r\n\r\n```\r\n2018-08-13T17:41:23.3856861Z _LinkBlazorApplication:\r\n2018-08-13T17:41:23.3864968Z   dotnet \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/illink/illink.dll\" -l none -c link -u link -b true -t --verbose  -d \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/\" -d \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/Facades/\" -o \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\blazor/linker/\" -x \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\exceldatareader\\3.4.0\\lib\\netstandard2.0\\ExcelDataReader.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\htmlagilitypack\\1.8.5\\lib\\netstandard2.0\\HtmlAgilityPack.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.analysis.common\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.Analysis.Common.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.queries\\4.8.0-beta00005\\lib\\netstandard1.6\\Lucene.Net.Queries.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.queryparser\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.QueryParser.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.sandbox\\4.8.0-beta00005\\lib\\netstandard1.6\\Lucene.Net.Sandbox.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.csharp\\4.4.0\\lib\\netstandard2.0\\Microsoft.CSharp.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.jsinterop\\0.5.1\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.rest.clientruntime\\2.3.12\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\mono.webassembly.interop\\0.5.1\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\newtonsoft.json\\9.0.1\\lib\\netstandard1.0\\Newtonsoft.Json.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.buffers\\4.4.0\\lib\\netstandard2.0\\System.Buffers.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.collections.concurrent\\4.3.0\\lib\\netstandard1.3\\System.Collections.Concurrent.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.configuration.configurationmanager\\4.5.0\\lib\\netstandard2.0\\System.Configuration.ConfigurationManager.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.diagnostics.diagnosticsource\\4.3.0\\lib\\netstandard1.3\\System.Diagnostics.DiagnosticSource.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.dynamic.runtime\\4.0.11\\lib\\netstandard1.3\\System.Dynamic.Runtime.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.io.filesystem.primitives\\4.3.0\\lib\\netstandard1.3\\System.IO.FileSystem.Primitives.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.linq\\4.3.0\\lib\\netstandard1.6\\System.Linq.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.linq.expressions\\4.1.0\\lib\\netstandard1.6\\System.Linq.Expressions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.memory\\4.5.1\\lib\\netstandard2.0\\System.Memory.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.numerics.vectors\\4.4.0\\lib\\netstandard2.0\\System.Numerics.Vectors.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.objectmodel\\4.0.12\\lib\\netstandard1.3\\System.ObjectModel.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit.ilgeneration\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.ILGeneration.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit.lightweight\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.Lightweight.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.typeextensions\\4.1.0\\lib\\netstandard1.5\\System.Reflection.TypeExtensions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.runtime.numerics\\4.3.0\\lib\\netstandard1.3\\System.Runtime.Numerics.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.runtime.serialization.primitives\\4.1.1\\lib\\netstandard1.3\\System.Runtime.Serialization.Primitives.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\lib\\netstandard2.0\\System.Security.AccessControl.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.openssl\\4.3.0\\lib\\netstandard1.6\\System.Security.Cryptography.OpenSsl.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.primitives\\4.3.0\\lib\\netstandard1.3\\System.Security.Cryptography.Primitives.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.protecteddata\\4.5.0\\lib\\netstandard2.0\\System.Security.Cryptography.ProtectedData.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\lib\\netstandard2.0\\System.Security.Permissions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encoding.codepages\\4.5.0\\lib\\netstandard2.0\\System.Text.Encoding.CodePages.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.text.regularexpressions\\4.3.0\\lib\\netstandard1.6\\System.Text.RegularExpressions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.threading\\4.3.0\\lib\\netstandard1.3\\System.Threading.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.threading.tasks.extensions\\4.3.0\\lib\\netstandard1.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.readerwriter\\4.3.0\\lib\\netstandard1.3\\System.Xml.ReaderWriter.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xdocument\\4.0.11\\lib\\netstandard1.3\\System.Xml.XDocument.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xmldocument\\4.3.0\\lib\\netstandard1.3\\System.Xml.XmlDocument.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xpath\\4.3.0\\lib\\netstandard1.3\\System.Xml.XPath.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xpath.xmldocument\\4.3.0\\lib\\netstandard1.3\\System.Xml.XPath.XmlDocument.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Api.Client\\bin\\Release\\netstandard2.0\\MedNotes.Api.Client.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\MedNotes.Diagnostics.dll\"\r\n2018-08-13T17:41:24.0026278Z   IL Linker\r\n2018-08-13T17:41:24.0056464Z ##[error]EXEC(0,0): Error : Expecting an option, got instead: c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll\r\n2018-08-13T17:41:24.0062141Z EXEC : error : Expecting an option, got instead: c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll [c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\MedNotes.Diagnostics.csproj]\r\n2018-08-13T17:41:24.0062611Z   illink [options] -x|-a|-i file\r\n2018-08-13T17:41:24.0062850Z      --about             About the IL Linker\r\n2018-08-13T17:41:24.0063090Z      --version           Print the version number of the IL Linker\r\n2018-08-13T17:41:24.0063358Z      --skip-unresolved   Ignore unresolved types, methods, and assemblies (true or false)\r\n2018-08-13T17:41:24.0091550Z      --verbose           Log messages indicating progress and warnings\r\n2018-08-13T17:41:24.0091945Z      --dependencies-file Specify the dependencies file path, if unset the default path is used: <output directory>/linker-dependencies.xml.gz\r\n2018-08-13T17:41:24.0092441Z      --dump-dependencies Dump dependencies for the linker analyzer tool\r\n2018-08-13T17:41:24.0092728Z      --reduced-tracing   Reduces dependency output related to assemblies that will not be modified\r\n2018-08-13T17:41:24.0093128Z      --used-attrs-only   Attributes on types, methods, etc will be removed if the attribute type is not used\r\n2018-08-13T17:41:24.0093453Z      --strip-security    In linked assemblies, attributes on assemblies, types, and methods related to security will be removed\r\n2018-08-13T17:41:24.0093795Z      --strip-resources   Remove link xml resources that were processed (true or false), default to true\r\n2018-08-13T17:41:24.0094081Z      --exclude-feature   Any code which has feature-name dependency will be removed\r\n2018-08-13T17:41:24.0094349Z      -out                Specify the output directory, default to `output'\r\n2018-08-13T17:41:24.0094655Z      -c                  Action on the core assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to skip\r\n2018-08-13T17:41:24.0095003Z      -u                  Action on the user assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to link\r\n2018-08-13T17:41:24.0095290Z      -p                  Action per assembly\r\n2018-08-13T17:41:24.0095513Z      -s                  Add a new step to the pipeline.\r\n2018-08-13T17:41:24.0095771Z      -t                  Keep assemblies in which only type forwarders are referenced.\r\n2018-08-13T17:41:24.0096047Z      -d                  Add a directory where the linker will look for assemblies\r\n2018-08-13T17:41:24.0096317Z      -b                  Generate debug symbols for each linked module (true or false)\r\n2018-08-13T17:41:24.0096597Z      -g                  Generate a new unique guid for each linked module (true or false)\r\n2018-08-13T17:41:24.0096863Z      -v                  Keep members needed by debugger (true or false)\r\n2018-08-13T17:41:24.0097128Z      -l                  List of i18n assemblies to copy to the output directory\r\n2018-08-13T17:41:24.0097403Z                            separated with a comma: none,all,cjk,mideast,other,rare,west\r\n2018-08-13T17:41:24.0097650Z                            default is all\r\n2018-08-13T17:41:24.0097878Z      -x                  Link from an XML descriptor\r\n2018-08-13T17:41:24.0098106Z      -a                  Link from a list of assemblies\r\n2018-08-13T17:41:24.0098369Z      -r                  Link from a list of assemblies using roots visible outside of the assembly\r\n2018-08-13T17:41:24.0098633Z      -i                  Link from an mono-api-info descriptor\r\n2018-08-13T17:41:24.0098895Z      -z                  Include default preservations (true or false), default to true\r\n2018-08-13T17:41:24.0099109Z   \r\n\r\n```\r\n\r\nFor now looks like I could workaround that with `<BlazorLinkOnBuild>false</BlazorLinkOnBuild>`, but issue appear more inside MSBuild setup for ILLink, then inside ILLink itself.","Url":"https://github.com/aspnet/Blazor/issues/1308","RelatedDescription":"Open issue \"ILLink incorrect parameters\" (#1308)"},{"Id":"349896866","IsPullRequest":false,"CreatedAt":"2018-08-13T10:08:01","Actor":"Arshia001","Number":"1303","RawContent":null,"Title":"Create more than one SPA within the same project?","State":"closed","Body":"If I'm correct, an entire Blazor client app gets bundled into a single DLL which is then executed on the browser side in Single Page App fashion. Is there an option to split a project into many pages? Having an SPA is good, as long as the app is relatively small. In a project with hundreds or thousands of pages, having them all preload at the same time will cause inacceptable delays.","Url":"https://github.com/aspnet/Blazor/issues/1303","RelatedDescription":"Closed issue \"Create more than one SPA within the same project?\" (#1303)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-19T05:30:02.713775Z","RunDurationInMilliseconds":1281}