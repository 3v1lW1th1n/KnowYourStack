{"Data":{"Blog":{"FeedItems":[{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null},{"Title":".NET Framework August 2019 Preview of Quality Rollup","PublishedOn":"2019-08-20T17:42:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nBCL1\nAddresses a crash that occurs...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 8","PublishedOn":"2019-08-13T18:31:00+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 8. Just like with Preview 7, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and are not adding new features. If these final previews...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8","PublishedOn":"2019-08-13T18:29:25+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"The Preview 8 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nNew previews of .NET Core 3.0 and ASP.NET Core 3.0 are also available...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-8-and-entity-framework-6-3-preview-8/","RawContent":null},{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null},{"Title":"Calling all .NET desktop and mobile developers!","PublishedOn":"2019-08-07T15:00:29+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"We would love to hear about your experience with building client applications in .NET. Your feedback will greatly help us to improve the .NET tooling and ensure our roadmap focuses on your needs....","Href":"https://devblogs.microsoft.com/dotnet/calling-all-net-desktop-and-mobile-developers/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."},{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10277486502","Type":"PullRequestEvent","CreatedAt":"2019-08-25T05:12:53","Actor":"NextTurn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26357","RelatedDescription":"Opened pull request \"Optimize index/count validations\" (#26357) at dotnet/coreclr","RelatedBody":""},{"Id":"10276744199","Type":"PullRequestEvent","CreatedAt":"2019-08-24T20:16:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26356","RelatedDescription":"Opened pull request \"[release/3.0] Fix BinaryReader.ReadChars for fragmented Streams (#26324)\" (#26356) at dotnet/coreclr","RelatedBody":"BinaryReader.ReadChars incorrectly read more than necessary from the underlying Stream when multi-byte characters straddled the read chunks.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40455"},{"Id":"10276420187","Type":"PullRequestEvent","CreatedAt":"2019-08-24T17:10:02","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26324","RelatedDescription":"Merged pull request \"Fix BinaryReader.ReadChars for fragmented Streams\" (#26324) at dotnet/coreclr","RelatedBody":"BinaryReader.ReadChars incorrectly read more than necessary from the underlying Stream when multi-byte characters straddled the read chunks.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40455"},{"Id":"10276411149","Type":"IssuesEvent","CreatedAt":"2019-08-24T17:05:01","Actor":"Gnbrkm41","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26355","RelatedDescription":"Opened issue \"Question about cleaning artifact directories\" (#26355) at dotnet/coreclr","RelatedBody":"I'm trying to clean the working directory while working on stuffs. I was able to do cleanups by passing `-clean` argument to the build script when I was working on corefx; it appears that for coreclr, such argument isn't present and I have to use the `clean.cmd` or `clean.sh`.\r\n\r\nHowever, when I try to execute the script, MSBuild seem to output some error that seems to depend on some files present in a specific folder. Here's the output from `build.cmd`:\r\n```\r\nC:\\Users\\gotos\\source\\repos\\coreclr>clean\r\nInstalling dotnet using Arcade...\r\nrunning: powershell -NoProfile -ExecutionPolicy unrestricted -Command \". C:\\Users\\gotos\\source\\repos\\coreclr\\eng\\configure-toolset.ps1; . C:\\Users\\gotos\\source\\repos\\coreclr\\eng\\common\\tools.ps1; InitializeBuildTool\"\r\n\r\nName                           Value\r\n----                           -----\r\nPath                           C:\\Users\\gotos\\source\\repos\\coreclr\\.dotnet\\dotnet.exe\r\nCommand                        msbuild\r\nTool                           dotnet\r\nFramework                      netcoreapp2.1\r\n\r\n\r\nRunning: dotnet msbuild /nologo /verbosity:minimal /clp:Summary /nodeReuse:false /flp:v=normal;LogFile=clean.log /t:CleanAllProjects\r\nC:\\Users\\gotos\\source\\repos\\coreclr\\all.locproj(14,3): error MSB4019: 가져온 \"C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets\" 프로젝트를 찾을 수 없습니다. <Import> 선언에 지정한 경로가 올바른지 그리고 파일이 디스크에 있는지 확인 하세요.\r\n\r\n빌드하지 못했습니다.\r\n\r\nC:\\Users\\gotos\\source\\repos\\coreclr\\all.locproj(14,3): error MSB4019: 가져온 \"C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets\" 프로젝트를 찾을 수 없습니다. <Import> 선언에 지정한 경로가 올바른지 그리고 파일이 디스크에 있는지 확인 하세요.\r\n    경고 0개\r\n    오류 1개\r\n\r\n경과 시간: 00:00:00.10\r\n\r\n```\r\n(yes, it's in Korean... but it's the same as the one from build.sh, which is in English)\r\nand here's the one from `build.sh`, ran on WSL2 Ubuntu:\r\n```\r\nganbarukamo@DESKTOP-DH26CRU:~/source/repos/coreclr$ ./clean.sh\r\nRunning init-dotnet.sh\r\nInstalling dotnet using Arcade...\r\nRunning: /home/ganbarukamo/source/repos/coreclr/.dotnet/dotnet msbuild /nologo /verbosity:minimal /clp:Summary /flp:v=normal;LogFile=clean.log /t:CleanAllProjects\r\n/home/ganbarukamo/source/repos/coreclr/all.locproj(14,3): error MSB4019: The imported project \"/tools/devdiv/loc/Loctask/Localization.settings.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\nBuild FAILED.\r\n\r\n/home/ganbarukamo/source/repos/coreclr/all.locproj(14,3): error MSB4019: The imported project \"/tools/devdiv/loc/Loctask/Localization.settings.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.09\r\nERROR: An error occurred in /home/ganbarukamo/source/repos/coreclr/.dotnet/dotnet msbuild /nologo /verbosity:minimal /clp:Summary /flp:v=normal;LogFile=clean.log /t:CleanAllProjects. Check logs under /home/ganbarukamo/source/repos/coreclr.\r\n```\r\n\r\nWhat is that `C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets` project about? is the script  an internal tool only and not supposed to run outside? "},{"Id":"10276197309","Type":"PullRequestEvent","CreatedAt":"2019-08-24T15:13:22","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26354","RelatedDescription":"Opened pull request \"Disable all arm pr testing\" (#26354) at dotnet/coreclr","RelatedBody":"Once https://github.com/dotnet/core-eng/i…ssues/7557 is fixed, this can be re-enabled. Until then, failure to submit to helix is covering real regressions and checkins are happening that break inner-loop.\r\n\r\nSee https://github.com/dotnet/coreclr/issues/26345\r\n\r\nNote that outerloop job will still be failing until the issue is fixed."},{"Id":"10276008224","Type":"PullRequestEvent","CreatedAt":"2019-08-24T13:32:37","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26349","RelatedDescription":"Merged pull request \"Remove unused test file introduced in #25948\" (#26349) at dotnet/coreclr","RelatedBody":"See https://github.com/dotnet/coreclr/pull/25948#issuecomment-524524045\r\n\r\n/cc @jkoritzinsky "},{"Id":"10276007058","Type":"PullRequestEvent","CreatedAt":"2019-08-24T13:32:03","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26350","RelatedDescription":"Merged pull request \"Remove unnecessary !s for [DoesNotReturn]\" (#26350) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10276958299","Type":"PullRequestEvent","CreatedAt":"2019-08-24T22:34:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12339","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12339) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.5\r\n- **Date Produced**: 8/24/2019 10:02 PM\r\n- **Commit**: cb298f16e97432f2de8b5a030853aabc09693c80\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19424.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n"},{"Id":"10276911193","Type":"PullRequestEvent","CreatedAt":"2019-08-24T22:01:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12368","RelatedDescription":"Merged pull request \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12368) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 9:30 PM\r\n- **Commit**: 66de493473521e173fa15ca557f5f97601cedb23\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19424.4\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n"},{"Id":"10276894596","Type":"PullRequestEvent","CreatedAt":"2019-08-24T21:50:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12367","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12367) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190824.5\r\n- **Date Produced**: 8/24/2019 8:28 PM\r\n- **Commit**: 96eca94fc168c4e8fa637968357a964f9f1b3a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19424.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10276864992","Type":"PullRequestEvent","CreatedAt":"2019-08-24T21:31:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12368","RelatedDescription":"Opened pull request \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12368) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 9:30 PM\r\n- **Commit**: 66de493473521e173fa15ca557f5f97601cedb23\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19424.4\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n"},{"Id":"10276849068","Type":"PullRequestEvent","CreatedAt":"2019-08-24T21:20:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12367","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12367) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190824.5\r\n- **Date Produced**: 8/24/2019 8:28 PM\r\n- **Commit**: 96eca94fc168c4e8fa637968357a964f9f1b3a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19424.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10275912415","Type":"PullRequestEvent","CreatedAt":"2019-08-24T12:37:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1468) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10275895126","Type":"PullRequestEvent","CreatedAt":"2019-08-24T12:27:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1468) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10275892971","Type":"PullRequestEvent","CreatedAt":"2019-08-24T12:26:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1467","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1467) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"},{"Id":"10275869144","Type":"PullRequestEvent","CreatedAt":"2019-08-24T12:11:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1466","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1466) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10275852254","Type":"PullRequestEvent","CreatedAt":"2019-08-24T12:01:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1466","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1466) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10274134640","Type":"PullRequestEvent","CreatedAt":"2019-08-23T21:28:52","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1463","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1463) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"},{"Id":"10270816574","Type":"PullRequestEvent","CreatedAt":"2019-08-23T12:40:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1464","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1464) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190822.9\r\n- **Date Produced**: 8/23/2019 3:30 AM\r\n- **Commit**: c05355b90b55a9ff436a1ba9c6c1f5a508c2f3ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19422.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10270754028","Type":"PullRequestEvent","CreatedAt":"2019-08-23T12:30:52","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1465","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1465) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190822.11\r\n- **Date Produced**: 8/23/2019 7:55 AM\r\n- **Commit**: eb97814690b0fed6d28ca7e9e80901e7b25aacf8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19422.11\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19422.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19422.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10277079081","Type":"IssuesEvent","CreatedAt":"2019-08-25T00:10:59","Actor":"ZBAGI","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40565","RelatedDescription":"Opened issue \"NullReferenceException at LambdaCompiler\" (#40565) at dotnet/corefx","RelatedBody":"I encountered an undocumented `NullReferenceException` while working on expression builder. Here is simplified version of it:\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    Test(() => true);\r\n    Console.ReadLine();\r\n}\r\npublic static void Test(params Expression<Func<bool>>[] memberSelectors)\r\n{\r\n    var memberSelectorFunc = Expression.Parameter(typeof(Expression<Func<bool>>), \"memberSelectorFunc\");\r\n    Func<IEnumerable<Expression<Func<bool>>>, Func<Expression<Func<bool>>, bool>, bool> any = Enumerable.Any;\r\n\r\n    // memberSelectorFunc => Invoke(memberSelectorFunc)\r\n    var condition = Expression.Lambda<Func<Expression<Func<bool>>, bool>>(\r\n        Expression.Invoke(memberSelectorFunc),\r\n        memberSelectorFunc\r\n    );\r\n\r\n    // new [] { () => True }\r\n    var memberSelectorExpr = Expression.NewArrayInit(typeof(Expression<Func<bool>>), memberSelectors);\r\n\r\n    // () => memberSelectorExpr.Any(condition)\r\n    var mainExpr = Expression.Lambda<Func<bool>>(\r\n            Expression.Call(null, any.Method, memberSelectorExpr, condition)\r\n        );\r\n\r\n    //This looks fine :\r\n    // () => new [] {() => True}.Any(memberSelectorFunc => Invoke(memberSelectorFunc))\r\n    Console.WriteLine(mainExpr.ToString());\r\n    var bug = mainExpr.Compile();\r\n}\r\n```\r\nBasically i get this exception every time i trying to `Invoke` expression passed into `Test` method.\r\n\r\n## Full exception\r\n```\r\n  | Name | Value | Type\r\n-- | -- | -- | --\r\n◢ | $exception | {\"Object reference not set to an instance of an object.\"} | System.NullReferenceException\r\n  | ▶ Data | {System.Collections.ListDictionaryInternal} | System.Collections.IDictionary {System.Collections.ListDictionaryInternal}\r\n  | HResult | -2147467261 | int\r\n  | HelpLink | null | string\r\n  | ▶ InnerException | null | System.Exception\r\n  | Message | \"Object reference not set to an instance of an object.\" | string\r\n  | Source | \"System.Linq.Expressions\" | string\r\n  | StackTrace | \"   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitInvocationExpression(Expression expr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitDelegateConstruction(LambdaExpression lambda)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitArguments(MethodBase method, IArgumentProvider args, Int32 skipParameters)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody()\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\r\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\r\\n   at System.Linq.Expressions.Expression`1.Compile()\\r\\n   at ConsoleApp35.Program.Test(Expression`1[] memberSelectors) in C:\\\\Users\\\\ZBAGI\\\\source\\\\repos\\\\ConsoleApp35\\\\ConsoleApp35\\\\Program.cs:line 37\\r\\n   at ConsoleApp35.Program.Main(String[] args) in C:\\\\Users\\\\ZBAGI\\\\source\\\\repos\\\\ConsoleApp35\\\\ConsoleApp35\\\\Program.cs:line 17\" | string\r\n  | ▶ TargetSite | {Void EmitMethodCall(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.IArgumentProvider, CompilationFlags)} | System.Reflection.MethodBase {System.Reflection.RuntimeMethodInfo}\r\n  | ▶ Static members |   |  \r\n  | ▶ Non-Public members |   |  \r\n```\r\n"},{"Id":"10276883508","Type":"PullRequestEvent","CreatedAt":"2019-08-24T21:43:34","Actor":"aashikgowda","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40564","RelatedDescription":"Opened pull request \"System.Numeric.Tests tests now have unique inputs\" (#40564) at dotnet/corefx","RelatedBody":"Matrix add, subtract and multiplication tests now have unique inputs. This would prevent regression due to the values for certain tests being the same between the LHS and RHS inputs (such as the one introduced in #31779"},{"Id":"10276863747","Type":"PullRequestEvent","CreatedAt":"2019-08-24T21:30:21","Actor":"tmds","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40563","RelatedDescription":"Opened pull request \"Reconfigure terminal for Console usage even if only one of stdin/stdout was used by the child\" (#40563) at dotnet/corefx","RelatedBody":"Process: Unix: ensure we reconfigure the terminal for Console usage if only one of stdin/stdout was used by the child.\r\nConsole: Unix: Fix cache check for VTIME (read timeout).\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40557"},{"Id":"10276847756","Type":"IssuesEvent","CreatedAt":"2019-08-24T21:19:33","Actor":"ppekrol","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40562","RelatedDescription":"Opened issue \"Short date pattern from 'ky' culture produces invalid output in .NET Core 3.0\" (#40562) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nI'm trying to convert date to string and then parse it back. I'm using short date pattern for that and 'ky' culture. Unfortunately this gives me `FormatException` when doing `DateTime.ParseExact`.\r\n\r\nFrom my brief investigation it looks like the pattern, which is 'd-MMM yy' for 'ky' culture, produces additional `.` (dot) in output in .NET Core 3.0.\r\n\r\nSimple code that demonstrates the issue (works fine in .NET Core 2.2):\r\n```csharp\r\n            var cultureInfo = CultureInfo.GetCultureInfo(\"ky\");\r\n            Thread.CurrentThread.CurrentCulture = cultureInfo;\r\n            var pattern = cultureInfo.DateTimeFormat.ShortDatePattern; // d-MMM yy\r\n\r\n            Calendar calendar = new GregorianCalendar();\r\n            DateTime date1 = calendar.ToDateTime(2000, 1, 4, 0, 0, 0, 0);\r\n\r\n            // .NET Core 2.2: 4-янв 00\r\n            // .NET Core 3.0: 4-янв. 00\r\n            var dateAsString = date1.ToString(pattern);\r\n\r\n            var date2 = DateTime.ParseExact(dateAsString, pattern, cultureInfo);\r\n\r\n            if (date1 != date2)\r\n                throw new InvalidOperationException(\"Date!\");\r\n```\r\n\r\n```\r\ndotnet --version\r\n3.0.100-preview8-013656\r\n```\r\n"},{"Id":"10276773223","Type":"IssuesEvent","CreatedAt":"2019-08-24T20:33:49","Actor":"0x90d","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40561","RelatedDescription":"Opened issue \"API Proposal: System.IO.File.TryDelete(string path, int numberOfRetries, int timeout)\" (#40561) at dotnet/corefx","RelatedBody":"## Proposal:\r\n\r\n```\r\nnamespace System.IO\r\n{\r\n    public class File\r\n    {\r\n        public static bool TryDelete(string path);\r\n        public static bool TryDelete(string path, int numberOfRetries = 0, int timeout = 250);\r\n    }\r\n}\r\n```\r\n## Background\r\n\r\nA very common problem is that when trying to delete a file it's used by another process which raises an exception. A very common solution is that File.Delete is wrapped around with a try-catch, possibly wrapped around a loop retrying for a specific amount of times. As no developer knows exactly what happens outside of his code, a File.Delete is probably always wrapped with a try-catch. \r\n\r\nWith this proposal I would like to reduce the amount of lines and give this away to .NET to take care of.\r\n\r\n## Reason\r\n\r\nTryDelete tries to delete a file for a specific amount of times which reduces the amount of code developers write every day since File.Delete is likely always a \"Try to delete and do X if it fails\" in code anyway by being surrounded with a try-catch. Having the option to retry is an additional line of code saver but not explicitly necessary.\r\n\r\nIt behaves similar to Dictionary.TryGetValue for example which only purpose is is to save a few lines as well."},{"Id":"10276744379","Type":"IssuesEvent","CreatedAt":"2019-08-24T20:16:17","Actor":"0x90d","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40560","RelatedDescription":"Opened issue \"API Proposal: System.IO.File.Delete(string path, FileDeletion.RecycleBin)\" (#40560) at dotnet/corefx","RelatedBody":"## Proposal:\r\n\r\n```\r\nnamespace System.IO\r\n{\r\n    public class File\r\n    {\r\n        public static bool Delete(string path);\r\n        public static bool Delete(string path, FileDeletion mode = FileDeletion.Permanent);\r\n\r\n        public enum FileDeletion\r\n        {\r\n            ///<summary>Permanently deletes a file</summary>\r\n            Permanent,\r\n            ///<summary>Deletes a file to recycle bin if possible. Otherwise falls back to permanently deletion</summary>\r\n            RecycleBin\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n## Reason\r\n\r\nAs of now, no managed API exists to delete a file by moving it into the recycle bin. VB.NET have this option by using FileSystem.DeleteFile. C# however would require to use unmanaged API SHFileOperation in shell32 or referencing VB.NET library, in Windows at least.\r\n\r\nThis proposed API might be useful in cases where the customer decides to delete a file himself in a software. We could move it to recycle bin which give them the opportunity to restore if necessary, which is a top requested feature for any software that allows that.\r\n\r\nA recycle bin is available in Windows and MacOS, not sure about Linux although Ubuntu have a trash if I remember correctly. There must be a simply fallback to delete a file permanently if moving to recycle bin is not possible. This is also the case for deleting files from a network storage or attachable drive so it has to be documented anyway and should be clear to all developers. This makes the API available on all platforms.\r\n"},{"Id":"10276640305","Type":"PullRequestEvent","CreatedAt":"2019-08-24T19:13:50","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40536","RelatedDescription":null,"RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190823.9\r\n- **Date Produced**: 8/24/2019 1:40 AM\r\n- **Commit**: 0bbc89c7279a2655e8cfe8466eb69d85899033a8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19423.9\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n\r\n\r\n"},{"Id":"10276640200","Type":"PullRequestEvent","CreatedAt":"2019-08-24T19:13:46","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/40536","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/coreclr\" (#40536) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190823.9\r\n- **Date Produced**: 8/24/2019 1:40 AM\r\n- **Commit**: 0bbc89c7279a2655e8cfe8466eb69d85899033a8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19423.9\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n\r\n\r\n"},{"Id":"10276423543","Type":"IssuesEvent","CreatedAt":"2019-08-24T17:11:54","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40455","RelatedDescription":"Closed issue \"Data corruption in BinaryReader.ReadChars\" (#40455) at dotnet/corefx","RelatedBody":"This issue was first reported internally as a bug in .NET Framework, but it is also reproducible in .NET Core.\r\n\r\n* .NET Framework code: https://referencesource.microsoft.com/#mscorlib/system/io/binaryreader.cs,344\r\n* .NET Core 2.2 code: [dotnet/coreclr/blob/v2.2.6/src/mscorlib/src/System/IO/BinaryReader.cs#L358](https://github.com/dotnet/coreclr/blob/v2.2.6/src/mscorlib/src/System/IO/BinaryReader.cs#L358)\r\n* .NET Core 3.0 code: [dotnet/coreclr/blob/v3.0.0-preview8.19379.2/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L388](https://github.com/dotnet/coreclr/blob/v3.0.0-preview8.19379.2/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L368)\r\n* .NET Core 5.0 code: [dotnet/corefx/blob/2fac89f63c644ab81d936d62c91e6003302e718d/src/Common/src/CoreLib/System/IO/BinaryReader.cs#L362](https://github.com/dotnet/corefx/blob/2fac89f63c644ab81d936d62c91e6003302e718d/src/Common/src/CoreLib/System/IO/BinaryReader.cs#L362)\r\n\r\n### UTF-16\r\n\r\nWhen using a 2-byte encoding (i.e. UTF-16), and `_stream.Read()` returns an uneven number of bytes (e.g. a network stream), then in the next iteration of the loop, `numBytes` can be off by one, and the next read can go past the end of the encoded data in the stream. This can either cause an unexpected end of stream, and/or corruption of any subsequent data read from it.\r\n     \r\nThe repro below is supposed to print all \"True\"s, as it does when a `MemoryStream` is used. However, when using a mock `NetStream` that simulates short reads, data corruption occurs.\r\n\r\nUpdate: It seems that this issue has always been there, so it's not a new regression.\r\n\r\n```cs\r\nclass Program\r\n{\r\n    class NetStream : MemoryStream\r\n    {\r\n        public override int Read(byte[] buffer, int offset, int count)\r\n        {\r\n            return base.Read(buffer, offset, count > 10 ? count - 3 : count);\r\n        }\r\n\r\n        public override int Read(Span<byte> destination)\r\n        {\r\n            return base.Read(destination.Length > 10 ? destination.Slice(0, destination.Length - 3) : destination);\r\n        }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        char[] data1 = \"hello world\".ToCharArray();\r\n        uint data2 = 0xABCDEF01;\r\n        uint data3 = 0;\r\n\r\n        using (Stream stream = new NetStream())\r\n        {\r\n            using (BinaryWriter writer = new BinaryWriter(stream, Encoding.Unicode, leaveOpen: true))\r\n            {\r\n                writer.Write(data1);\r\n                writer.Write(data2);\r\n                writer.Write(data3);\r\n            }\r\n\r\n            Console.WriteLine(stream.Length == data1.Length * sizeof(char) + 2 * sizeof(uint));\r\n\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            using (BinaryReader reader = new BinaryReader(stream, encoding: Encoding.Unicode, leaveOpen: true))\r\n            {\r\n                char[] data1b = reader.ReadChars(data1.Length);\r\n                Console.WriteLine(data1.AsSpan().SequenceEqual(data1b));\r\n                Console.WriteLine(stream.Position == data1.Length * sizeof(char));\r\n\r\n                uint data2b = reader.ReadUInt32();\r\n                Console.WriteLine(data2 == data2b);\r\n                Console.WriteLine(stream.Position == data1.Length * sizeof(char) + sizeof(uint));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### UTF-8\r\n\r\nThe code below passes on .NET Framework and .NET Core 2.2, but fails on 3.0, so it's a new regression:\r\n\r\n```cs\r\nclass Program\r\n{\r\n    // version for UTF-8: over-reads if 2 bytes, 3 chars left\r\n    // Fails on .NET Core 3.0, passes on 2.2.\r\n    static void Main(string[] args)\r\n    {\r\n        char[] data1 = \"hello world 😃x\".ToCharArray(); // 14 code points, 15 chars in UTF-16, 17 bytes in UTF-8\r\n        uint data2 = 0xABCDEF01;\r\n        uint data3 = 0;\r\n\r\n        using (Stream stream = new MemoryStream())\r\n        {\r\n            using (BinaryWriter writer = new BinaryWriter(stream, Encoding.UTF8, leaveOpen: true))\r\n            {\r\n                writer.Write(data1);\r\n                writer.Write(data2);\r\n                writer.Write(data3);\r\n            }\r\n\r\n            Console.WriteLine(stream.Length == (data1.Length - 1) + 3 + 2 * sizeof(uint));\r\n\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            using (BinaryReader reader = new BinaryReader(stream, encoding: Encoding.UTF8, leaveOpen: true))\r\n            {\r\n                char[] data1b = reader.ReadChars(data1.Length);\r\n                Console.WriteLine(data1.AsSpan().SequenceEqual(data1b));\r\n                Console.WriteLine(stream.Position == (data1.Length - 1) + 3);\r\n\r\n                uint data2b = reader.ReadUInt32();\r\n                Console.WriteLine(data2 == data2b);\r\n                Console.WriteLine(stream.Position == (data1.Length - 1) + 3 + sizeof(uint));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Remarks\r\n\r\n* Both versions of `BinaryReader` fail the UTF-16 repro.\r\n* The UTF-8 case does not need a short read (i.e. network stream), it fails deterministically on any kind of underlying stream.\r\n* It seems that the reason why the UTF-8 code fails in 3.0 but passes in 2.2, is because the 2.2 runtime uses a version of `BinaryReader` that has a special case for handling t`his edge case for single-byte encodings:\r\n\r\nThe special case in 2.2: [dotnet/coreclr/blob/ce1d090d33b400a25620c0145046471495067cc7/src/mscorlib/src/System/IO/BinaryReader.cs#L377-L386](https://github.com/dotnet/coreclr/blob/ce1d090d33b400a25620c0145046471495067cc7/src/mscorlib/src/System/IO/BinaryReader.cs#L377-L386)\r\n\r\n```cs\r\n...\r\nnumBytes = charsRemaining;\r\n\r\n// special case for DecoderNLS subclasses when there is a hanging byte from the previous loop\r\nDecoderNLS decoder = _decoder as DecoderNLS;\r\nif (decoder != null && decoder.HasState && numBytes > 1)\r\n{\r\n    numBytes -= 1;\r\n}\r\n\r\nif (_2BytesPerChar)\r\n...\r\n```\r\nNo special case in 3.0 and 5.0: [dotnet/coreclr/blob/9642de76d4f5e563150a90f5923b304d87d7a8b1/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L387-L389](https://github.com/dotnet/coreclr/blob/9642de76d4f5e563150a90f5923b304d87d7a8b1/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L387-L389)\r\n```cs\r\n...\r\nnumBytes = charsRemaining;\r\n\r\nif (_2BytesPerChar)\r\n...\r\n```"},{"Id":"10276420741","Type":"IssuesEvent","CreatedAt":"2019-08-24T17:10:18","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40455","RelatedDescription":"Reopened issue \"Data corruption in BinaryReader.ReadChars\" (#40455) at dotnet/corefx","RelatedBody":"This issue was first reported internally as a bug in .NET Framework, but it is also reproducible in .NET Core.\r\n\r\n* .NET Framework code: https://referencesource.microsoft.com/#mscorlib/system/io/binaryreader.cs,344\r\n* .NET Core 2.2 code: [dotnet/coreclr/blob/v2.2.6/src/mscorlib/src/System/IO/BinaryReader.cs#L358](https://github.com/dotnet/coreclr/blob/v2.2.6/src/mscorlib/src/System/IO/BinaryReader.cs#L358)\r\n* .NET Core 3.0 code: [dotnet/coreclr/blob/v3.0.0-preview8.19379.2/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L388](https://github.com/dotnet/coreclr/blob/v3.0.0-preview8.19379.2/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L368)\r\n* .NET Core 5.0 code: [dotnet/corefx/blob/2fac89f63c644ab81d936d62c91e6003302e718d/src/Common/src/CoreLib/System/IO/BinaryReader.cs#L362](https://github.com/dotnet/corefx/blob/2fac89f63c644ab81d936d62c91e6003302e718d/src/Common/src/CoreLib/System/IO/BinaryReader.cs#L362)\r\n\r\n### UTF-16\r\n\r\nWhen using a 2-byte encoding (i.e. UTF-16), and `_stream.Read()` returns an uneven number of bytes (e.g. a network stream), then in the next iteration of the loop, `numBytes` can be off by one, and the next read can go past the end of the encoded data in the stream. This can either cause an unexpected end of stream, and/or corruption of any subsequent data read from it.\r\n     \r\nThe repro below is supposed to print all \"True\"s, as it does when a `MemoryStream` is used. However, when using a mock `NetStream` that simulates short reads, data corruption occurs.\r\n\r\nUpdate: It seems that this issue has always been there, so it's not a new regression.\r\n\r\n```cs\r\nclass Program\r\n{\r\n    class NetStream : MemoryStream\r\n    {\r\n        public override int Read(byte[] buffer, int offset, int count)\r\n        {\r\n            return base.Read(buffer, offset, count > 10 ? count - 3 : count);\r\n        }\r\n\r\n        public override int Read(Span<byte> destination)\r\n        {\r\n            return base.Read(destination.Length > 10 ? destination.Slice(0, destination.Length - 3) : destination);\r\n        }\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        char[] data1 = \"hello world\".ToCharArray();\r\n        uint data2 = 0xABCDEF01;\r\n        uint data3 = 0;\r\n\r\n        using (Stream stream = new NetStream())\r\n        {\r\n            using (BinaryWriter writer = new BinaryWriter(stream, Encoding.Unicode, leaveOpen: true))\r\n            {\r\n                writer.Write(data1);\r\n                writer.Write(data2);\r\n                writer.Write(data3);\r\n            }\r\n\r\n            Console.WriteLine(stream.Length == data1.Length * sizeof(char) + 2 * sizeof(uint));\r\n\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            using (BinaryReader reader = new BinaryReader(stream, encoding: Encoding.Unicode, leaveOpen: true))\r\n            {\r\n                char[] data1b = reader.ReadChars(data1.Length);\r\n                Console.WriteLine(data1.AsSpan().SequenceEqual(data1b));\r\n                Console.WriteLine(stream.Position == data1.Length * sizeof(char));\r\n\r\n                uint data2b = reader.ReadUInt32();\r\n                Console.WriteLine(data2 == data2b);\r\n                Console.WriteLine(stream.Position == data1.Length * sizeof(char) + sizeof(uint));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### UTF-8\r\n\r\nThe code below passes on .NET Framework and .NET Core 2.2, but fails on 3.0, so it's a new regression:\r\n\r\n```cs\r\nclass Program\r\n{\r\n    // version for UTF-8: over-reads if 2 bytes, 3 chars left\r\n    // Fails on .NET Core 3.0, passes on 2.2.\r\n    static void Main(string[] args)\r\n    {\r\n        char[] data1 = \"hello world 😃x\".ToCharArray(); // 14 code points, 15 chars in UTF-16, 17 bytes in UTF-8\r\n        uint data2 = 0xABCDEF01;\r\n        uint data3 = 0;\r\n\r\n        using (Stream stream = new MemoryStream())\r\n        {\r\n            using (BinaryWriter writer = new BinaryWriter(stream, Encoding.UTF8, leaveOpen: true))\r\n            {\r\n                writer.Write(data1);\r\n                writer.Write(data2);\r\n                writer.Write(data3);\r\n            }\r\n\r\n            Console.WriteLine(stream.Length == (data1.Length - 1) + 3 + 2 * sizeof(uint));\r\n\r\n            stream.Seek(0, SeekOrigin.Begin);\r\n            using (BinaryReader reader = new BinaryReader(stream, encoding: Encoding.UTF8, leaveOpen: true))\r\n            {\r\n                char[] data1b = reader.ReadChars(data1.Length);\r\n                Console.WriteLine(data1.AsSpan().SequenceEqual(data1b));\r\n                Console.WriteLine(stream.Position == (data1.Length - 1) + 3);\r\n\r\n                uint data2b = reader.ReadUInt32();\r\n                Console.WriteLine(data2 == data2b);\r\n                Console.WriteLine(stream.Position == (data1.Length - 1) + 3 + sizeof(uint));\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Remarks\r\n\r\n* Both versions of `BinaryReader` fail the UTF-16 repro.\r\n* The UTF-8 case does not need a short read (i.e. network stream), it fails deterministically on any kind of underlying stream.\r\n* It seems that the reason why the UTF-8 code fails in 3.0 but passes in 2.2, is because the 2.2 runtime uses a version of `BinaryReader` that has a special case for handling t`his edge case for single-byte encodings:\r\n\r\nThe special case in 2.2: [dotnet/coreclr/blob/ce1d090d33b400a25620c0145046471495067cc7/src/mscorlib/src/System/IO/BinaryReader.cs#L377-L386](https://github.com/dotnet/coreclr/blob/ce1d090d33b400a25620c0145046471495067cc7/src/mscorlib/src/System/IO/BinaryReader.cs#L377-L386)\r\n\r\n```cs\r\n...\r\nnumBytes = charsRemaining;\r\n\r\n// special case for DecoderNLS subclasses when there is a hanging byte from the previous loop\r\nDecoderNLS decoder = _decoder as DecoderNLS;\r\nif (decoder != null && decoder.HasState && numBytes > 1)\r\n{\r\n    numBytes -= 1;\r\n}\r\n\r\nif (_2BytesPerChar)\r\n...\r\n```\r\nNo special case in 3.0 and 5.0: [dotnet/coreclr/blob/9642de76d4f5e563150a90f5923b304d87d7a8b1/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L387-L389](https://github.com/dotnet/coreclr/blob/9642de76d4f5e563150a90f5923b304d87d7a8b1/src/System.Private.CoreLib/shared/System/IO/BinaryReader.cs#L387-L389)\r\n```cs\r\n...\r\nnumBytes = charsRemaining;\r\n\r\nif (_2BytesPerChar)\r\n...\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10273428711","Type":"IssuesEvent","CreatedAt":"2019-08-23T19:16:09","Actor":"gtbuchanan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7698","RelatedDescription":"Closed issue \"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\" (#7698) at dotnet/corert","RelatedBody":"I have a UWP app (`Ewn.Mobile.UWP`) I have been unsuccessfully trying to build in release mode with .NET Native for weeks now. Many of my issues seem to be stemming from a lack of a 64-bit version of ILC. However, I've gotten to a point where I at least don't get an `OutOfMemoryException`. As mentioned in #5905 and https://github.com/dotnet/reactive/issues/899, I've implemented the following compiler flags in my csproj:\r\n\r\n```xml\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n```\r\n\r\nHowever, I receive the following error during compilation related to one of our internal NuGet packages:\r\n\r\n### ilclog.csv\r\n```csv\r\n\"Message\",Low,\"D:\\a\\1\\s\\src\\Ewn.Extensions\\CollectionExtensions.cs(0) : fatal error N1205: 'static System.__UniversalCanon Ewn.Extensions.CollectionExtensions.AddTo<System.__UniversalCanon, System.__UniversalCanon>(System.__UniversalCanon, System.Collections.Generic.ICollection`1<System.__UniversalCanon>)' : Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\"\r\n\"Error\",,0,0,\"ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools64\\nutc_driver.exe @\"\"C:\\Users\\taylor\\Desktop\\ewn-main\\src\\Ewn.Mobile.UWP\\obj\\x86\\Dev\\ilc\\intermediate\\MDIL\\Ewn.Mobile.UWP.rsp\"\"' returned exit code 1\"\r\n\"Message\",Low,\"Done executing task \"\"GenerateMDILGlobalAnalysis\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building target \"\"GenerateMDILGlobalAnalysis\"\" in file \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building project \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Compilation failed\"\r\n```\r\n\r\n### Ewn.Extensions.CollectionExtensions.AddTo\r\n```csharp\r\npublic static T1 AddTo<T1, T2>([NotNull]this T1 @this, ICollection<T2> collection)\r\n    where T1 : T2\r\n{\r\n    collection.Add(@this);\r\n    return @this;\r\n}\r\n```\r\n\r\nI honestly have no idea what could be causing this since the method is pretty basic. Do you think this is a bug or is there something I'm missing?"},{"Id":"10272522223","Type":"IssuesEvent","CreatedAt":"2019-08-23T16:40:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7727","RelatedDescription":"Opened issue \"CPAOT code fails under GCStress\" (#7727) at dotnet/corert","RelatedBody":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Numerics;\r\n\r\nstruct MyValueType\r\n{\r\n    object o;\r\n}\r\n\r\nabstract class Test\r\n{\r\n    public abstract void M(MyValueType v);\r\n\r\n    static void Main()\r\n    {\r\n        new Concrete().M(default);\r\n    }\r\n}\r\n\r\nclass Concrete : Test\r\n{\r\n    public override void M(MyValueType v)\r\n    {\r\n        new Vector<double>().ToString();\r\n    }\r\n}\r\n```\r\n\r\n1. Compile `csc test.cs`\r\n2. Generate native code for test.exe using cpaot\r\n3. Set `set COMPlus_GCStress=1` and run it on checked CoreCLR runtime.\r\n\r\nResult:\r\n\r\nWithout `-O`:\r\n\r\n```\r\nAssert failure(PID 27868 [0x00006cdc], Thread: 34200 [0x8598]): SanityCheck()\r\n\r\nCORECLR! MethodTable::Validate + 0x3F (0x00007ff8`426f3813)\r\nCORECLR! Object::ValidateInner + 0x127 (0x00007ff8`42607c97)\r\nCORECLR! Object::Validate + 0x13A (0x00007ff8`42607a4a)\r\nCORECLR! GcInfoDecoder::ReportStackSlotToGC + 0x128 (0x00007ff8`42a233e0)\r\nCORECLR! GcInfoDecoder::ReportSlotToGC + 0x168 (0x00007ff8`42a2329c)\r\nCORECLR! GcInfoDecoder::ReportUntrackedSlots + 0x69 (0x00007ff8`42a235a5)\r\nCORECLR! GcInfoDecoder::EnumerateLiveSlots + 0xD23 (0x00007ff8`42a224a3)\r\nCORECLR! EECodeManager::EnumGcRefs + 0x39B (0x00007ff8`4268656b)\r\nCORECLR! GcStackCrawlCallBack + 0x2CD (0x00007ff8`42940a1d)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`423b0932)\r\n    File: D:\\coreclr\\src\\vm\\methodtable.cpp Line: 9902\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```\r\n\r\nWith `-O`:\r\n\r\n```\r\nAssert failure(PID 20768 [0x00005120], Thread: 32368 [0x7e70]): !th.IsNull()\r\n\r\nCORECLR! SigPointer::GetTypeHandleThrowing + 0xB8A (0x00007ff8`3e98c9f2)\r\nCORECLR! SigPointer::PeekElemTypeNormalized + 0x1FF (0x00007ff8`3e9930f3)\r\nCORECLR! ArgIteratorTemplate<ArgIteratorBase>::GetNextOffset + 0xFB (0x00007ff8`3e63ba33)\r\nCORECLR! TransitionFrame::PromoteCallerStackHelper + 0x188 (0x00007ff8`3e8e06ec)\r\nCORECLR! TransitionFrame::PromoteCallerStack + 0x17F (0x00007ff8`3e8e054b)\r\nCORECLR! GcStackCrawlCallBack + 0x37A (0x00007ff8`3eca0aca)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`3e710932)\r\nCORECLR! Thread::StackWalkFramesEx + 0x17A (0x00007ff8`3e71297e)\r\nCORECLR! Thread::StackWalkFrames + 0x184 (0x00007ff8`3e712764)\r\nCORECLR! ScanStackRoots + 0x284 (0x00007ff8`3ee30158)\r\n    File: D:\\coreclr\\src\\vm\\siginfo.cpp Line: 1111\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```"},{"Id":"10272392488","Type":"PullRequestEvent","CreatedAt":"2019-08-23T16:19:03","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7655","RelatedDescription":"Merged pull request \"One more fix for SuperILC OOM\" (#7655) at dotnet/corert","RelatedBody":"In my previous change I fixed OOM's caused by copying too long\r\nexecution log files but I forgot to apply the same fix to compilation\r\nlogs. This additional delta does just that.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10272310489","Type":"PullRequestEvent","CreatedAt":"2019-08-23T16:05:45","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7726","RelatedDescription":"Merged pull request \"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT\" (#7726) at dotnet/corert","RelatedBody":"This change fixes about 180 ILC failures in Pri#1 tests."},{"Id":"10271774784","Type":"PullRequestEvent","CreatedAt":"2019-08-23T14:51:44","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7726","RelatedDescription":"Opened pull request \"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT\" (#7726) at dotnet/corert","RelatedBody":"This change fixes about 180 ILC failures in Pri#1 tests."},{"Id":"10270884494","Type":"PullRequestEvent","CreatedAt":"2019-08-23T12:51:03","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7718","RelatedDescription":"Merged pull request \"CPAOT support for inlined PInvokes\" (#7718) at dotnet/corert","RelatedBody":"This change adds previously missing implementation of two JIT\r\ninterface methods dealing with inlined PInvokes -\r\ngetAddressOfPinvokeTarget and pInvokeMarshalingRequired.\r\n\r\nFor the MethodRequiresMarshaling check I used the same technique\r\nJanK recommended before for IsManagedSequential - I added an extra\r\ninstrumentation to Crossgen and CPAOT to capture PInvoke methods\r\nand the result of the marshaling check; with this change there are\r\n0 differences in the Pri#1 CoreCLR test suite.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10269749094","Type":"PullRequestEvent","CreatedAt":"2019-08-23T09:46:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7725","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7725) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"484891701","IsPullRequest":true,"CreatedAt":"2019-08-25T05:12:53","Actor":"NextTurn","Number":"26357","RawContent":null,"Title":"Optimize index/count validations","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26357","RelatedDescription":"Open PR \"Optimize index/count validations\" (#26357)"},{"Id":"484858342","IsPullRequest":true,"CreatedAt":"2019-08-24T20:16:11","Actor":"jkotas","Number":"26356","RawContent":null,"Title":"[release/3.0] Fix BinaryReader.ReadChars for fragmented Streams (#26324)","State":"open","Body":"Ports #26324 to 3.0\r\n\r\nFixes dotnet/corefx#40455\r\n\r\nDescription\r\n\r\nBinaryReader.ReadChars may read more bytes than required from the underlying stream if the stream contain non-ASCII characters. It corrupts the data read by any subsequent BinaryReader.Read operation. The same bug was fixed in .NET Framework in 2010. The fix was accidentally removed during unification of BCL code between .NET Core and .NET Native.\r\n\r\nCustomer Impact\r\n\r\nThe bug was customer-reported as a regression of previous BinaryReader.ReadChars behavior. This API is used by ~7% of apps according to apisof.net.\r\n\r\nRegression?\r\n\r\nYes, between .NET Core 2.2 (and earlier) and .NET Core 3.0.\r\n\r\nRisk\r\n\r\nLow. The fix is essentially adding back the previous code, with extra comments and correctness fix for UTF-16 encoding.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26356","RelatedDescription":"Open PR \"[release/3.0] Fix BinaryReader.ReadChars for fragmented Streams (#26324)\" (#26356)"},{"Id":"484842768","IsPullRequest":false,"CreatedAt":"2019-08-24T17:05:01","Actor":"Gnbrkm41","Number":"26355","RawContent":null,"Title":"Question about cleaning artifact directories","State":"open","Body":"I'm trying to clean the working directory while working on stuffs. I was able to do cleanups by passing `-clean` argument to the build script when I was working on corefx; it appears that for coreclr, such argument isn't present and I have to use the `clean.cmd` or `clean.sh`.\r\n\r\nHowever, when I try to execute the script, MSBuild seem to output some error that seems to depend on some files present in a specific folder. Here's the output from `build.cmd`:\r\n```\r\nC:\\Users\\gotos\\source\\repos\\coreclr>clean\r\nInstalling dotnet using Arcade...\r\nrunning: powershell -NoProfile -ExecutionPolicy unrestricted -Command \". C:\\Users\\gotos\\source\\repos\\coreclr\\eng\\configure-toolset.ps1; . C:\\Users\\gotos\\source\\repos\\coreclr\\eng\\common\\tools.ps1; InitializeBuildTool\"\r\n\r\nName                           Value\r\n----                           -----\r\nPath                           C:\\Users\\gotos\\source\\repos\\coreclr\\.dotnet\\dotnet.exe\r\nCommand                        msbuild\r\nTool                           dotnet\r\nFramework                      netcoreapp2.1\r\n\r\n\r\nRunning: dotnet msbuild /nologo /verbosity:minimal /clp:Summary /nodeReuse:false /flp:v=normal;LogFile=clean.log /t:CleanAllProjects\r\nC:\\Users\\gotos\\source\\repos\\coreclr\\all.locproj(14,3): error MSB4019: 가져온 \"C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets\" 프로젝트를 찾을 수 없습니다. <Import> 선언에 지정한 경로가 올바른지 그리고 파일이 디스크에 있는지 확인 하세요.\r\n\r\n빌드하지 못했습니다.\r\n\r\nC:\\Users\\gotos\\source\\repos\\coreclr\\all.locproj(14,3): error MSB4019: 가져온 \"C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets\" 프로젝트를 찾을 수 없습니다. <Import> 선언에 지정한 경로가 올바른지 그리고 파일이 디스크에 있는지 확인 하세요.\r\n    경고 0개\r\n    오류 1개\r\n\r\n경과 시간: 00:00:00.10\r\n\r\n```\r\n(yes, it's in Korean... but it's the same as the one from build.sh, which is in English)\r\nand here's the one from `build.sh`, ran on WSL2 Ubuntu:\r\n```\r\nganbarukamo@DESKTOP-DH26CRU:~/source/repos/coreclr$ ./clean.sh\r\nRunning init-dotnet.sh\r\nInstalling dotnet using Arcade...\r\nRunning: /home/ganbarukamo/source/repos/coreclr/.dotnet/dotnet msbuild /nologo /verbosity:minimal /clp:Summary /flp:v=normal;LogFile=clean.log /t:CleanAllProjects\r\n/home/ganbarukamo/source/repos/coreclr/all.locproj(14,3): error MSB4019: The imported project \"/tools/devdiv/loc/Loctask/Localization.settings.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\nBuild FAILED.\r\n\r\n/home/ganbarukamo/source/repos/coreclr/all.locproj(14,3): error MSB4019: The imported project \"/tools/devdiv/loc/Loctask/Localization.settings.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.09\r\nERROR: An error occurred in /home/ganbarukamo/source/repos/coreclr/.dotnet/dotnet msbuild /nologo /verbosity:minimal /clp:Summary /flp:v=normal;LogFile=clean.log /t:CleanAllProjects. Check logs under /home/ganbarukamo/source/repos/coreclr.\r\n```\r\n\r\nWhat is that `C:\\tools\\devdiv\\loc\\Loctask\\Localization.settings.targets` project about? is the script  an internal tool only and not supposed to run outside? ","Url":"https://github.com/dotnet/coreclr/issues/26355","RelatedDescription":"Open issue \"Question about cleaning artifact directories\" (#26355)"},{"Id":"484832821","IsPullRequest":true,"CreatedAt":"2019-08-24T15:13:21","Actor":"jashook","Number":"26354","RawContent":null,"Title":"Disable all arm pr testing","State":"open","Body":"Once https://github.com/dotnet/core-eng/issues/7557 is fixed, this can be re-enabled. Until then, failure to submit to helix is covering real regressions and checkins are happening that break inner-loop.\r\n\r\nSee https://github.com/dotnet/coreclr/issues/26345\r\n\r\nNote that outerloop job will still be failing until the issue is fixed.","Url":"https://github.com/dotnet/coreclr/pull/26354","RelatedDescription":"Open PR \"Disable all arm pr testing\" (#26354)"},{"Id":"484784547","IsPullRequest":true,"CreatedAt":"2019-08-24T13:32:36","Actor":"AaronRobinsonMSFT","Number":"26349","RawContent":null,"Title":"Remove unused test file introduced in #25948","State":"closed","Body":"See https://github.com/dotnet/coreclr/pull/25948#issuecomment-524524045\r\n\r\n/cc @jkoritzinsky ","Url":"https://github.com/dotnet/coreclr/pull/26349","RelatedDescription":"Closed or merged PR \"Remove unused test file introduced in #25948\" (#26349)"},{"Id":"484784999","IsPullRequest":true,"CreatedAt":"2019-08-24T13:32:03","Actor":"NextTurn","Number":"26350","RawContent":null,"Title":"Remove unnecessary !s for [DoesNotReturn]","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26350","RelatedDescription":"Closed or merged PR \"Remove unnecessary !s for [DoesNotReturn]\" (#26350)"},{"Id":"484811151","IsPullRequest":true,"CreatedAt":"2019-08-24T12:14:41","Actor":"dotnet-maestro[bot]","Number":"26353","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.14\r\n- **Date Produced**: 8/24/2019 4:09 AM\r\n- **Commit**: 66e183e466589cb661cec1a76991f1a5bbd7cc56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.14\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26353","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#26353)"},{"Id":"484811085","IsPullRequest":true,"CreatedAt":"2019-08-24T12:13:48","Actor":"dotnet-maestro[bot]","Number":"26352","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19423.8\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26352","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26352)"},{"Id":"484810839","IsPullRequest":true,"CreatedAt":"2019-08-24T12:11:00","Actor":"dotnet-maestro[bot]","Number":"26351","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26351","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#26351)"},{"Id":"484638270","IsPullRequest":true,"CreatedAt":"2019-08-24T00:16:29","Actor":"fadimounir","Number":"26334","RawContent":null,"Title":"Move testing jobs to a separate stage after the validation/publishing stage","State":"closed","Body":"Also testing the official build pipeline: https://dev.azure.com/dnceng/internal/_build/results?buildId=322398","Url":"https://github.com/dotnet/coreclr/pull/26334","RelatedDescription":"Closed or merged PR \"Move testing jobs to a separate stage after the validation/publishing stage\" (#26334)"},{"Id":"484712608","IsPullRequest":true,"CreatedAt":"2019-08-24T00:14:42","Actor":"adiaaida","Number":"26341","RawContent":null,"Title":"Fix passing of framework parameter in perf pipeline","State":"closed","Body":"We were incorrectly passing the framework parameter to the performance template. This change fixes that.","Url":"https://github.com/dotnet/coreclr/pull/26341","RelatedDescription":"Closed or merged PR \"Fix passing of framework parameter in perf pipeline\" (#26341)"},{"Id":"484743107","IsPullRequest":true,"CreatedAt":"2019-08-23T23:24:36","Actor":"trylek","Number":"26348","RawContent":null,"Title":"Revert \"Split test build and run into two jobs\"","State":"closed","Body":"Temporarily revert dotnet/coreclr#26191 as it breaks CoreCLR outerloop testing before I figure out the proper fix.","Url":"https://github.com/dotnet/coreclr/pull/26348","RelatedDescription":"Closed or merged PR \"Revert \"Split test build and run into two jobs\"\" (#26348)"},{"Id":"484738157","IsPullRequest":true,"CreatedAt":"2019-08-23T22:52:04","Actor":"jashook","Number":"26346","RawContent":null,"Title":"Change gh_25468 to build as an sdk project","State":"closed","Body":"Fixes #26345","Url":"https://github.com/dotnet/coreclr/pull/26346","RelatedDescription":"Closed or merged PR \"Change gh_25468 to build as an sdk project\" (#26346)"},{"Id":"484737990","IsPullRequest":false,"CreatedAt":"2019-08-23T22:52:04","Actor":"jashook","Number":"26345","RawContent":null,"Title":"New tests should be SDK style projects","State":"closed","Body":"https://github.com/dotnet/coreclr/pull/26009 uses the old project build and causes test failures because it builds a .exe in place of a dll.","Url":"https://github.com/dotnet/coreclr/issues/26345","RelatedDescription":"Closed issue \"New tests should be SDK style projects\" (#26345)"},{"Id":"484739227","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:50","Actor":"fadimounir","Number":"26347","RawContent":null,"Title":"[WIP] Make dict layout dynamic perf","State":"open","Body":"PR for perf jobs only, not for merging","Url":"https://github.com/dotnet/coreclr/pull/26347","RelatedDescription":"Open PR \"[WIP] Make dict layout dynamic perf\" (#26347)"},{"Id":"484730606","IsPullRequest":false,"CreatedAt":"2019-08-23T22:09:16","Actor":"sywhang","Number":"26344","RawContent":null,"Title":"[2.2] Potential native memory leak from EventPipe","State":"open","Body":"Our microservices were growing at a rate of 40MB per hour (each) because of this issue.  We have turned off the Prometheus.Net collectors that hook up to the event sources as a temporary workaround (https://github.com/djluck/prometheus-net.DotNetRuntime/issues/6).\r\n\r\nThis is definitely **not** using a circular buffer as I have an instance that's been running for 9 days and is now at an approximate 7GB commit size and still growing!\r\n\r\nI have confirmed .Net Core 3 - Preview 8 does not experience the same issue.  I have also confirmed that .Net Core 2.2.0 - 2.2.6 do experience the issue.  I have the same stack trace for the allocations as mentioned in the first reply above.\r\n\r\nPlease back-port the fix to .Net Core 2.2.\r\n\r\n_Originally posted by @tylerohlsen in https://github.com/dotnet/coreclr/issues/23562#issuecomment-523592951_","Url":"https://github.com/dotnet/coreclr/issues/26344","RelatedDescription":"Open issue \"[2.2] Potential native memory leak from EventPipe\" (#26344)"},{"Id":"484724346","IsPullRequest":true,"CreatedAt":"2019-08-23T21:45:59","Actor":"jkoritzinsky","Number":"26343","RawContent":null,"Title":"Fix typo in calculating path to ILDasm in Microsoft.NET.SDK.IL","State":"open","Body":"When I cleaned up the Microsoft.NET.SDK.IL implementation, I missed one typo. This causes the SDK to fail to resolve ILDasm as discovered in https://github.com/dotnet/winforms/pull/1684.","Url":"https://github.com/dotnet/coreclr/pull/26343","RelatedDescription":"Open PR \"Fix typo in calculating path to ILDasm in Microsoft.NET.SDK.IL\" (#26343)"},{"Id":"484715289","IsPullRequest":true,"CreatedAt":"2019-08-23T21:17:42","Actor":"Anipik","Number":"26342","RawContent":null,"Title":"Testing changes [donot review]","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26342","RelatedDescription":"Closed or merged PR \"Testing changes [donot review]\" (#26342)"},{"Id":"484696806","IsPullRequest":true,"CreatedAt":"2019-08-23T20:22:37","Actor":"jkoritzinsky","Number":"26340","RawContent":null,"Title":"Implement struct marshalling via IL Stubs instead of via FieldMarshalers","State":"open","Body":"Currently, our system for marshalling fields of structures between managed and native code is completely separate from our system for marshalling parameters or return values, even though most of the code in the two systems can be shared. This PR unifies the two systems by removing the field marshalers in favor of using IL stubs and a new `NativeFieldDescriptor` concept which is 9 bytes smaller then the old `FieldMarshaler`s.\r\n\r\nPerf numbers:\r\n\r\nCoreCLR.dll's size is reduced by ~30kB on Windows x64.\r\n\r\nI wrote some microbenchmarks to benchmark marshalling with various types of structs:\r\n\r\n<details>\r\n<summary>Struct Definitions</summary>\r\n\r\n```csharp\r\npublic class Common\r\n{\r\n    public const int NumArrElements = 2;\r\n}\r\n//////////////////////////////struct definition///////////////////////////\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct InnerSequential\r\n{\r\n    public int f1;\r\n    public float f2;\r\n    public string f3;\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]//struct containing one field of array type\r\npublic struct InnerArraySequential\r\n{\r\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = Common.NumArrElements)]\r\n    public InnerSequential[] arr;\r\n}\r\n\r\n\r\npublic struct HFA\r\n{\r\n    public float f1;\r\n    public float f2;\r\n    public float f3;\r\n    public float f4;\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic unsafe struct FixedBufferClassificationTest\r\n{\r\n    public fixed int arr[3];\r\n    public NonBlittableFloat f;\r\n}\r\n\r\n// A non-blittable wrapper for a float value.\r\n// Used to force a type with a float field to be non-blittable\r\n// and take a different code path.\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct NonBlittableFloat\r\n{\r\n    public NonBlittableFloat(float f)\r\n    {\r\n        arr = new []{f};\r\n    }\r\n\r\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]\r\n    private float[] arr;\r\n    \r\n    public float F => arr[0];\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct S8\r\n{\r\n    public string name;\r\n    public bool gender;\r\n    [MarshalAs(UnmanagedType.Error)]\r\n    public int i32;\r\n    [MarshalAs(UnmanagedType.Error)]\r\n    public uint ui32;\r\n    [MarshalAs(UnmanagedType.U2)]\r\n    public ushort jobNum;\r\n    [MarshalAs(UnmanagedType.I1)]\r\n    public sbyte mySByte;\r\n}\r\n```\r\n</details>\r\n\r\n\r\nThe following are the perf numbers I got on Windows x64: (CoreRun Master is a local Release build of CoreCLR on commit 402af7bcfe2a167c8cdfbe569ddb73e3def6cb0b.\r\n\r\n```\r\n|                               Method |               Toolchain |         Mean |         Error |        StdDev | Ratio | RatioSD |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------------------------------------- |------------------------ |-------------:|--------------:|--------------:|------:|--------:|-------:|------:|------:|----------:|\r\n|                            S8ByValue |          CoreRun Master |  8,664.80 ns | 1,840.4242 ns | 1,889.9801 ns |  1.00 |    0.00 |      - |     - |     - |         - |\r\n|                            S8ByValue | CoreRun Struct IL Stubs |  6,965.08 ns |    50.5223 ns |    47.2586 ns |  0.82 |    0.15 |      - |     - |     - |         - |\r\n|                                      |                         |              |               |               |       |         |        |       |       |           |\r\n|          InnerArraySequentialByValue |          CoreRun Master | 15,592.40 ns |   188.3570 ns |   166.9736 ns |  1.00 |    0.00 |      - |     - |     - |         - |\r\n|          InnerArraySequentialByValue | CoreRun Struct IL Stubs | 14,780.42 ns |    72.9342 ns |    64.6543 ns |  0.95 |    0.01 | 0.0305 |     - |     - |     176 B |\r\n|                                      |                         |              |               |               |       |         |        |       |       |           |\r\n| FixedBufferClassificationTestByValue |          CoreRun Master |    139.68 ns |     1.1048 ns |     0.9793 ns |  1.00 |    0.00 |      - |     - |     - |         - |\r\n| FixedBufferClassificationTestByValue | CoreRun Struct IL Stubs |     77.13 ns |     0.5102 ns |     0.4773 ns |  0.55 |    0.01 |      - |     - |     - |         - |\r\n```\r\n\r\nThe allocation in `InnerArraySequentialByValue` is a `System.RuntimeMethodInfoStub` allocated by the `JIT_GetRuntimeMethodStub` helper for implementing the `ldtoken` instruction that loads the token for the nested `InnerSequential` struct IL stub onto the stack in the `InnerArraySequential` struct IL stub.\r\n\r\nIn addition to normal CoreCLR testing, I've also run the WinForms integration test suite with this local build of CoreCLR to validate that it doesn't break upstream. I've also run the struct marshalling tests with GCStress modes 3 and C.","Url":"https://github.com/dotnet/coreclr/pull/26340","RelatedDescription":"Open PR \"Implement struct marshalling via IL Stubs instead of via FieldMarshalers\" (#26340)"},{"Id":"484666589","IsPullRequest":false,"CreatedAt":"2019-08-23T18:53:23","Actor":"BruceForstall","Number":"26339","RawContent":null,"Title":"Add regular schedule for ISA-specific test pipelines","State":"open","Body":"It looks like the coreclr-jitstress-isas-x86 (https://dev.azure.com/dnceng/public/_build?definitionId=505) and coreclr-jitstress-isas-arm (https://dev.azure.com/dnceng/public/_build?definitionId=506) pipelines are not scheduled to run. They should be run regularly.\r\n\r\n@jashook @echesakovMSFT @CarolEidt @tannergooding \r\n\r\nRelated: https://github.com/dotnet/coreclr/issues/26286","Url":"https://github.com/dotnet/coreclr/issues/26339","RelatedDescription":"Open issue \"Add regular schedule for ISA-specific test pipelines\" (#26339)"},{"Id":"484661212","IsPullRequest":true,"CreatedAt":"2019-08-23T18:38:15","Actor":"VSadov","Number":"26338","RawContent":null,"Title":"Do not use `AllocateUninitializedArray` in private array pools.","State":"open","Body":"User may have extra expectations for the privatly owned array pools.\r\nFor example there could be an expectation that array never contains negative numbers (since user never puts them there). Uninitialized allocations can break such expectations.\r\n\r\nFixes:https://github.com/dotnet/corefx/issues/40485","Url":"https://github.com/dotnet/coreclr/pull/26338","RelatedDescription":"Open PR \"Do not use `AllocateUninitializedArray` in private array pools.\" (#26338)"},{"Id":"484655009","IsPullRequest":false,"CreatedAt":"2019-08-23T18:21:54","Actor":"CarolEidt","Number":"26337","RawContent":null,"Title":"Enable specification of function ranges for JIT config values","State":"open","Body":"Currently there is `ifdef`ed out in several places in the JIT that take a low and high hash value to enable binary search for optimization or register allocation issues:\r\n- `minoptshashlo`/`minoptshashhi` in compiler.cpp\r\n- `JitStressRegsHashLo`/`JitStressRegsHashHi` in lsra.cpp\r\n- `structpromohashlo`/`structpromohashhi` in morph.cpp\r\n- `loopclonehashlo`/`loopclonehashhi` in optimizer.cpp\r\n- `loophoisthashlo`/`loophoisthashhi` in optimizer.cpp\r\n\r\nEach of these does their own processing.\r\n\r\nThere's also `COMPlus_JitFunctionFile` that allows the specification of a file with a list of functions.\r\nIt would be good to have a general mechanism to specify:\r\n- A range of method hash values\r\n- A range of method count (Compiler::jitTotalMethodCompiled) - useful when the JIT order is reasonably stable and there are many methods with the same hash and/or in combination with a range of hash values when multiple methods must be included to reproduce a failure. This was valuable in tracking down #25468.\r\n- A `COMPlus` value that is enabled only for the methods included in the set","Url":"https://github.com/dotnet/coreclr/issues/26337","RelatedDescription":"Open issue \"Enable specification of function ranges for JIT config values\" (#26337)"},{"Id":"484651087","IsPullRequest":true,"CreatedAt":"2019-08-23T18:11:09","Actor":"jashook","Number":"26336","RawContent":null,"Title":"Disable based on #26335","State":"open","Body":"Failing in arm32 innerloop","Url":"https://github.com/dotnet/coreclr/pull/26336","RelatedDescription":"Open PR \"Disable based on #26335\" (#26336)"},{"Id":"484649875","IsPullRequest":false,"CreatedAt":"2019-08-23T18:08:03","Actor":"jashook","Number":"26335","RawContent":null,"Title":"JIT/Regression/JitBlue/GitHub_7147/GitHub_7147/GitHub_7147.sh","State":"open","Body":"Arm32 innerloop test failure.\r\n\r\n```\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/Regression/Reports/JIT.Regression/JitBlue/GitHub_7147/GitHub_7147/GitHub_7147.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun GitHub_7147.dll ''\r\nExpected: 100\r\nActual: 108\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Regression/JitBlue/GitHub_7147/GitHub_7147/GitHub_7147.sh\r\n```\r\n\r\nThis seems to have started happening while the arm32 queue was offline earlier this week.","Url":"https://github.com/dotnet/coreclr/issues/26335","RelatedDescription":"Open issue \"JIT/Regression/JitBlue/GitHub_7147/GitHub_7147/GitHub_7147.sh\" (#26335)"},{"Id":"484619304","IsPullRequest":false,"CreatedAt":"2019-08-23T16:43:46","Actor":"Temp1ar","Number":"26333","RawContent":null,"Title":"TplEventSource TaskWaitSend event's field ContinueWithTaskID is always \"0\" since .NET Core 2.1","State":"open","Body":"We are using these events in profiler to recreate proper stacktrace for continuations and it's become impossible since .NET Core 2.1.\r\n\r\nLooks like there is no more ContinuationWrapper created for continuation action therefore AsyncMethodBuilderCore.TryGetContinuationTask(continuation) always returns null.\r\n\r\nSimple steps for reproducing:\r\n- Create .NET Core Console application targeting netcoreapp2.1\r\n- Paste this\r\n```csharp\r\ninternal class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            {   // Just to make sure AsyncCausalityTracer is On\r\n                var t = Type.GetType(\"System.Threading.Tasks.AsyncCausalityTracer\");\r\n                var loggingOnPropertyInfo = t.GetProperty(\"LoggingOn\", BindingFlags.Static | BindingFlags.NonPublic);\r\n                var value = loggingOnPropertyInfo.GetValue(t);\r\n                Console.WriteLine(\"AsyncCausalityTracer.LoggingOn: \" + value);\r\n            }\r\n\r\n            Console.WriteLine(\"Waiting for a key press\");\r\n//            Console.ReadKey();\r\n            Console.WriteLine(\"Running async method\");\r\n            Calculate().Wait();\r\n//            Console.ReadKey();\r\n        }\r\n\r\n        private static async Task Calculate()\r\n        {\r\n            Console.WriteLine(\"Start\");\r\n            await Task.Delay(5000);\r\n            Console.WriteLine(\"Finish\");\r\n        }\r\n    }\r\n```\r\n- Collect TPL events using PerfView\r\n- There are two TaskWait/Send events, both with ContinueWithTaskID=\"0\"\r\n\r\nIf you change target framework to netcoreapp2.0 then first TaskWait/Send event will have ContinueWithTaskID=\"2\"","Url":"https://github.com/dotnet/coreclr/issues/26333","RelatedDescription":"Open issue \"TplEventSource TaskWaitSend event's field ContinueWithTaskID is always \"0\" since .NET Core 2.1\" (#26333)"},{"Id":"484556726","IsPullRequest":false,"CreatedAt":"2019-08-23T15:52:12","Actor":"soroshsabz","Number":"26330","RawContent":null,"Title":"Change number font for Farsi Culture Info","State":"closed","Body":"ITNOA\r\n\r\nWhen I use below `ToString` for printing Persian date time\r\n\r\n```csharp\r\nDateTime.Now.ToString(\"f\", CultureInfo.CreateSpecificCulture(\"fa-IR\"));\r\n```\r\n\r\nI see something like \"جمعه, 1 شهریور 1398 06:38 ب.ظ\" but in another Library like [MD.PersianDateTime](https://github.com/Mds92/MD.PersianDateTime) I see something like \"جمعه، ۰۱ شهریور ۱۳۹۸ ساعت ۱۸:۴۰:۰۰\" the interesting part of this result is number in this string is Persian style and font ( for example `nine` in English is `9` but `nine` in Persian is `۹` ) instead of native dot net library.\r\n\r\nI think the correct form of number in Persian is something like [MD.PersianDateTime](https://github.com/Mds92/MD.PersianDateTime) So I want to know how to change number to Persian correct form for \"fa-IR\" culture?\r\n\r\nWhat component or class of [coreclr](https://github.com/dotnet/coreclr) is responsible for something like above?\r\n\r\nThanks a lot\r\n","Url":"https://github.com/dotnet/coreclr/issues/26330","RelatedDescription":"Closed issue \"Change number font for Farsi Culture Info\" (#26330)"},{"Id":"484596367","IsPullRequest":false,"CreatedAt":"2019-08-23T15:45:05","Actor":"Gopinath-mahadevan","Number":"26332","RawContent":null,"Title":"Using coreclr profiling api how to get the return values of functions which returns Stream","State":"open","Body":"I'm implementing a dotnet profiler which implements ICorProfilerCallback2. I'm trying to monitor return values of functions. On the function exit hook I'm able to get the return values of functions if its return type is string.\r\n\r\nOne of the methods return type is System.IO.Stream. How can I get the content from the stream which is returned by the function.","Url":"https://github.com/dotnet/coreclr/issues/26332","RelatedDescription":"Open issue \"Using coreclr profiling api how to get the return values of functions which returns Stream\" (#26332)"},{"Id":"484576836","IsPullRequest":true,"CreatedAt":"2019-08-23T15:02:40","Actor":"adiaaida","Number":"26331","RawContent":null,"Title":"[WIP] Add Perf files, test git checkout","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26331","RelatedDescription":"Open PR \"[WIP] Add Perf files, test git checkout\" (#26331)"},{"Id":"484504774","IsPullRequest":true,"CreatedAt":"2019-08-23T12:29:17","Actor":"dotnet-maestro[bot]","Number":"26329","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.11\r\n- **Date Produced**: 8/23/2019 10:56 PM\r\n- **Commit**: abecfcd748e6b8850e1111184bf34c93e9277f90\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19423-11\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26329","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26329)"},{"Id":"484500446","IsPullRequest":true,"CreatedAt":"2019-08-23T12:18:18","Actor":"dotnet-maestro[bot]","Number":"26328","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.9\r\n- **Date Produced**: 8/24/2019 2:08 AM\r\n- **Commit**: 6462578f43586a4479f8a0c2caee46df457fe4fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-rc1.19423.9\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-rc1.19423.9\r\n\r\n[marker]: <> (End:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26328","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#26328)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"484163512","IsPullRequest":true,"CreatedAt":"2019-08-24T22:34:18","Actor":"dotnet-maestro[bot]","Number":"12339","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.5\r\n- **Date Produced**: 8/24/2019 10:02 PM\r\n- **Commit**: cb298f16e97432f2de8b5a030853aabc09693c80\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19424.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12339","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12339)"},{"Id":"484864219","IsPullRequest":true,"CreatedAt":"2019-08-24T22:01:30","Actor":"dotnet-maestro[bot]","Number":"12368","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 9:30 PM\r\n- **Commit**: 66de493473521e173fa15ca557f5f97601cedb23\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19424.4\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12368","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12368)"},{"Id":"484863383","IsPullRequest":true,"CreatedAt":"2019-08-24T21:50:42","Actor":"dotnet-maestro[bot]","Number":"12367","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190824.5\r\n- **Date Produced**: 8/24/2019 8:28 PM\r\n- **Commit**: 96eca94fc168c4e8fa637968357a964f9f1b3a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19424.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19424.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12367","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12367)"},{"Id":"484847829","IsPullRequest":true,"CreatedAt":"2019-08-24T18:39:30","Actor":"dotnet-maestro[bot]","Number":"12366","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 6:03 PM\r\n- **Commit**: 4425876c89260b70c612c2943d375c72678e51ed\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19424.1\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12366","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12366)"},{"Id":"484840677","IsPullRequest":true,"CreatedAt":"2019-08-24T17:10:54","Actor":"dotnet-maestro[bot]","Number":"12365","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190824.2\r\n- **Date Produced**: 8/24/2019 3:46 PM\r\n- **Commit**: d4bbdc295d12bce09a100a9f832f94a3d5ac3ab2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19424.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19424.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19424.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19424.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19424.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12365","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12365)"},{"Id":"484829362","IsPullRequest":true,"CreatedAt":"2019-08-24T15:20:40","Actor":"dotnet-maestro[bot]","Number":"12364","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 1:57 PM\r\n- **Commit**: 61725e710d8173ac069b169b20133d0e5da513b7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19424.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19424.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19424.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19424.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19424.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12364","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12364)"},{"Id":"484810728","IsPullRequest":true,"CreatedAt":"2019-08-24T12:09:32","Actor":"dotnet-maestro[bot]","Number":"12363","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190823.1\r\n- **Date Produced**: 8/23/2019 12:42 PM\r\n- **Commit**: 6a3a640897a0aca0471849b3766214ce89400f3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19423.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12363","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12363)"},{"Id":"484810224","IsPullRequest":true,"CreatedAt":"2019-08-24T12:03:14","Actor":"dotnet-maestro[bot]","Number":"12362","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12362","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#12362)"},{"Id":"484779177","IsPullRequest":true,"CreatedAt":"2019-08-24T05:35:42","Actor":"dotnet-maestro[bot]","Number":"12361","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.14\r\n- **Date Produced**: 8/24/2019 4:09 AM\r\n- **Commit**: 66e183e466589cb661cec1a76991f1a5bbd7cc56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19423.14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12361","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12361)"},{"Id":"484776517","IsPullRequest":true,"CreatedAt":"2019-08-24T04:17:30","Actor":"dotnet-maestro[bot]","Number":"12360","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190823.14\r\n- **Date Produced**: 8/24/2019 4:17 AM\r\n- **Commit**: 90231e7290b22cd99bfba5e0970d2dd679ac4ff8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19423.14\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12360","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12360)"},{"Id":"484773535","IsPullRequest":true,"CreatedAt":"2019-08-24T04:05:41","Actor":"dotnet-maestro[bot]","Number":"12359","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.13\r\n- **Date Produced**: 8/24/2019 2:38 AM\r\n- **Commit**: 66e183e466589cb661cec1a76991f1a5bbd7cc56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19423.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19423.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19423.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19423.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12359","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12359)"},{"Id":"484768548","IsPullRequest":true,"CreatedAt":"2019-08-24T03:04:25","Actor":"dotnet-maestro[bot]","Number":"12358","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190823.12\r\n- **Date Produced**: 8/24/2019 2:33 AM\r\n- **Commit**: f0029227cf5ed4f13e2b5ce41c44cbfa763f79a5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19423.12\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12358","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12358)"},{"Id":"484759151","IsPullRequest":true,"CreatedAt":"2019-08-24T01:21:48","Actor":"dotnet-maestro[bot]","Number":"12357","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/24/2019 12:46 AM\r\n- **Commit**: 8b861ea7d717eb09673d4ca648dc96ebe36fe425\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19423.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12357","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12357)"},{"Id":"484751409","IsPullRequest":true,"CreatedAt":"2019-08-24T00:25:44","Actor":"dotnet-maestro[bot]","Number":"12356","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.11\r\n- **Date Produced**: 8/23/2019 10:56 PM\r\n- **Commit**: abecfcd748e6b8850e1111184bf34c93e9277f90\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19423-11\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12356","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12356)"},{"Id":"484749922","IsPullRequest":true,"CreatedAt":"2019-08-24T00:16:01","Actor":"dotnet-maestro[bot]","Number":"12355","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19423-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19423-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19423-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12355","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#12355)"},{"Id":"484712273","IsPullRequest":false,"CreatedAt":"2019-08-23T23:26:58","Actor":"vsfeedback","Number":"12354","RawContent":null,"Title":"-->VS 2019 nice to have version control  install","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/475347/-vs-2019-nice-to-have-version-control-install.html)._\n\n---\nIn VS 2017 when loading project if you were missing a framework the VS message box would appear notifying you of this, allowing you to download \nrequired Framework.\nwould be nice to have simular situation for SDK reports the error but doesnot allow you to select a different version or download required version\n\n--&gt;VS 2019\nError\nUnable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 3/4/2019, 02:44 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/cli/issues/12354","RelatedDescription":"Closed issue \"-->VS 2019 nice to have version control  install\" (#12354)"},{"Id":"484253300","IsPullRequest":false,"CreatedAt":"2019-08-23T23:21:15","Actor":"Lxiamail","Number":"12341","RawContent":null,"Title":"dotnet build Doesn't copy ilasm.exe to app output folder after switching from netstandard1.3 to 2.0","State":"closed","Body":"## Steps to reproduce\r\n1. consoleapp3  references to a classlib1 project.\r\n2. consoleapp3  also packagereference to Microsoft.NETCore.ILAsm (`<PackageReference Include=\"Microsoft.NETCore.ILAsm\" Version=\"2.0.5\" />`)\r\n3. classlib1's TargetFramework is netstandard1.3\r\n4. \"dotnet build  ConsoleApp3.sln\" to build the solution, ilasm.exe is copied to bin/debug output dir of consoleapp3 as expected.\r\n5. change classlib1's TargetFramework from netstandard1.3 to netstandard2.0\r\n6. build solution again, ilasm.exe is missing in bin/debug output dir of consoleapp3.\r\nrepro program is at https://github.com/Lxiamail/ilasmpackagerefrepo\r\n\r\n## Expected  behavior\r\nexpect ilasm,exe is copied to bin/debug output dir of consoleapp3.\r\n\r\n## Actual behavior\r\nilasm.exe is missing in bin/debug output dir of consoleapp3.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nC:\\Users\\alicial\\source\\repos\\ConsoleApp3>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12341","RelatedDescription":"Closed issue \"dotnet build Doesn't copy ilasm.exe to app output folder after switching from netstandard1.3 to 2.0\" (#12341)"},{"Id":"484702319","IsPullRequest":true,"CreatedAt":"2019-08-23T23:21:09","Actor":"wli3","Number":"12353","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12353","RelatedDescription":"Closed or merged PR \"Correct branding\" (#12353)"},{"Id":"484693696","IsPullRequest":true,"CreatedAt":"2019-08-23T20:49:14","Actor":"dotnet-maestro[bot]","Number":"12352","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:04575dfd-9a48-48d7-a887-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:04575dfd-9a48-48d7-a887-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12352","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#12352)"},{"Id":"484641483","IsPullRequest":true,"CreatedAt":"2019-08-23T18:21:08","Actor":"dotnet-maestro[bot]","Number":"12351","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.3\r\n- **Date Produced**: 8/23/2019 4:13 PM\r\n- **Commit**: 10bdf83b80772ddd94eb838d24edd0fb3babb5c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19423.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19423.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19423.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19423.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12351)"},{"Id":"484627087","IsPullRequest":true,"CreatedAt":"2019-08-23T17:40:44","Actor":"dotnet-maestro[bot]","Number":"12350","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.2\r\n- **Date Produced**: 8/23/2019 4:10 PM\r\n- **Commit**: 10bdf83b80772ddd94eb838d24edd0fb3babb5c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19423.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19423.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19423.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19423.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12350","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12350)"},{"Id":"484607355","IsPullRequest":true,"CreatedAt":"2019-08-23T16:47:37","Actor":"dotnet-maestro[bot]","Number":"12348","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190822.5\r\n- **Date Produced**: 8/23/2019 4:11 PM\r\n- **Commit**: cfcffd82513ebd563d99c1805e0f629ee84dbd8c\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19422.5\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12348","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12348)"},{"Id":"484620676","IsPullRequest":false,"CreatedAt":"2019-08-23T16:47:29","Actor":"andtii","Number":"12349","RawContent":null,"Title":"dotnet publish {path} dosent respect global.json","State":"open","Body":"## Steps to reproduce\r\nUsing dotnet publish pointing to another path then the current folder ignores the global.json\r\n\r\n## Expected  behavior\r\nUse the global json \r\n\r\n## Actual behavior\r\nIts not using the sdk specified in global json instead its taking the latest installed\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12349","RelatedDescription":"Open issue \"dotnet publish {path} dosent respect global.json\" (#12349)"},{"Id":"484494516","IsPullRequest":true,"CreatedAt":"2019-08-23T12:38:46","Actor":"dotnet-maestro[bot]","Number":"12347","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12347","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12347)"},{"Id":"484371554","IsPullRequest":true,"CreatedAt":"2019-08-23T08:00:44","Actor":"dotnet-maestro[bot]","Number":"12346","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190822.14\r\n- **Date Produced**: 8/23/2019 6:30 AM\r\n- **Commit**: 24da14999a8c6d711972b72812ec0c0df82be0c9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19422-14\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12346","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12346)"},{"Id":"484269272","IsPullRequest":true,"CreatedAt":"2019-08-23T00:04:42","Actor":"dotnet-bot","Number":"12345","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12345","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#12345)"},{"Id":"484269245","IsPullRequest":true,"CreatedAt":"2019-08-23T00:04:34","Actor":"dotnet-bot","Number":"12344","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12344","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#12344)"},{"Id":"484269219","IsPullRequest":true,"CreatedAt":"2019-08-23T00:04:27","Actor":"dotnet-bot","Number":"12343","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12343","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#12343)"},{"Id":"484269186","IsPullRequest":true,"CreatedAt":"2019-08-23T00:04:20","Actor":"dotnet-bot","Number":"12342","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12342","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#12342)"},{"Id":"484233477","IsPullRequest":false,"CreatedAt":"2019-08-22T21:49:51","Actor":"adaggarwal","Number":"12340","RawContent":null,"Title":"Potential Bug in the way to detect for docker environment","State":"open","Body":"## Steps to reproduce\r\nUse this Environment -> CentOS docker on RHEL7 host\r\n\r\n## Expected  behavior\r\nfor `docker run --rm centos:centos7 /bin/sh -c 'if grep -q /docker/ \"/proc/1/cgroup\"; then echo \"yes\"; fi'` to stdout `yes` but in reality it fails as there is no trailing `/` in the cgroup file for docker on rhel7. In reality it passes with `/docker-` as the check. \r\n\r\n## Actual behavior\r\nThe [logic](https://github.com/dotnet/cli/blob/master/src/dotnet/Telemetry/DockerContainerDetectorForTelemetry.cs#L44-L50) fails when host is RHEL7 for the docker \r\n\r\n## Potential fix\r\nUse `\"/docker/\" OR \"/docker-\"` instead of `\"/docker/\"`\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12340","RelatedDescription":"Open issue \"Potential Bug in the way to detect for docker environment\" (#12340)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"484812226","IsPullRequest":true,"CreatedAt":"2019-08-24T12:37:35","Actor":"dotnet-maestro[bot]","Number":"1468","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1468)"},{"Id":"484812113","IsPullRequest":true,"CreatedAt":"2019-08-24T12:26:08","Actor":"dotnet-maestro[bot]","Number":"1467","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1467","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1467)"},{"Id":"484810097","IsPullRequest":true,"CreatedAt":"2019-08-24T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1466","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1466)"},{"Id":"484504600","IsPullRequest":true,"CreatedAt":"2019-08-23T21:28:51","Actor":"dotnet-maestro[bot]","Number":"1463","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1463","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1463)"},{"Id":"484505252","IsPullRequest":true,"CreatedAt":"2019-08-23T12:40:42","Actor":"dotnet-maestro[bot]","Number":"1464","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190822.9\r\n- **Date Produced**: 8/23/2019 3:30 AM\r\n- **Commit**: c05355b90b55a9ff436a1ba9c6c1f5a508c2f3ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19422.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19422.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1464","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1464)"},{"Id":"484505352","IsPullRequest":true,"CreatedAt":"2019-08-23T12:30:51","Actor":"dotnet-maestro[bot]","Number":"1465","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.9\r\n- **Date Produced**: 8/24/2019 2:08 AM\r\n- **Commit**: 6462578f43586a4479f8a0c2caee46df457fe4fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19423.9\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19423.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19423.9\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1465","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1465)"},{"Id":"484493871","IsPullRequest":true,"CreatedAt":"2019-08-23T12:11:54","Actor":"dotnet-maestro[bot]","Number":"1462","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1462","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1462)"},{"Id":"483964395","IsPullRequest":true,"CreatedAt":"2019-08-22T13:22:06","Actor":"dotnet-maestro[bot]","Number":"1460","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.4\r\n- **Date Produced**: 8/21/2019 6:40 PM\r\n- **Commit**: 27a6926f6b1d4b36d86a236d2b05cdee3669589e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19421.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1460","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1460)"},{"Id":"483965136","IsPullRequest":true,"CreatedAt":"2019-08-22T12:40:12","Actor":"dotnet-maestro[bot]","Number":"1461","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190821.5\r\n- **Date Produced**: 8/21/2019 11:26 PM\r\n- **Commit**: 41cd99d051102be4ed83f4f9105ae9e73aa48b7c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19421.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19421.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19421.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1461","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1461)"},{"Id":"483952076","IsPullRequest":true,"CreatedAt":"2019-08-22T12:12:02","Actor":"dotnet-maestro[bot]","Number":"1459","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.4\r\n- **Date Produced**: 8/21/2019 6:40 PM\r\n- **Commit**: 27a6926f6b1d4b36d86a236d2b05cdee3669589e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19421.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19421.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1459","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1459)"},{"Id":"483602102","IsPullRequest":true,"CreatedAt":"2019-08-21T22:06:06","Actor":"terrajobst","Number":"1458","RawContent":null,"Title":"Ask Mode: Add support for typed-datasets","State":"closed","Body":"## Description\r\n\r\n.NET Core 3.0 has full support for `System.Data.DataTableExtensions` which also enables the visual `DataSet` designer in Visual Studio. However, .NET Standard 2.1 only supported a subset which makes the code that is generated by the designer not compile in .NET Standard 2.1. The fix is include the missing APIs in .NET Standard 2.1.\r\n\r\nThis requires no changes in .NET Core 3.0 but will require minimal work in platforms implementing .NET Standard 2.1, most notably Mono/Xamarin. However, they already signed off on it.\r\n\r\n## Customer Impact\r\n\r\nCustomer will be able to use the DataSet designer in .NET Standard libraries, which will become handy as people port their existing .NET Framework desktop applications to .NET Core 3.0.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. All APIs are already implemented in .NET Core 3.0.","Url":"https://github.com/dotnet/standard/pull/1458","RelatedDescription":"Closed or merged PR \"Ask Mode: Add support for typed-datasets\" (#1458)"},{"Id":"483567659","IsPullRequest":true,"CreatedAt":"2019-08-21T18:33:20","Actor":"Anipik","Number":"1457","RawContent":null,"Title":"Enabling yaml stages for preview 9","State":"closed","Body":"We require this change in order to propagate the dependecies updates for preview 9 branch.\r\nrelated 3.0 change https://github.com/dotnet/standard/pull/1453\r\n\r\ncc @mmitche ","Url":"https://github.com/dotnet/standard/pull/1457","RelatedDescription":"Closed or merged PR \"Enabling yaml stages for preview 9\" (#1457)"},{"Id":"483116364","IsPullRequest":true,"CreatedAt":"2019-08-21T17:37:37","Actor":"Anipik","Number":"1453","RawContent":null,"Title":"Adding YAML stages","State":"closed","Body":"Closes: https://github.com/dotnet/arcade/issues/3726\r\n\r\ncherrypicking #1373 #1379 ","Url":"https://github.com/dotnet/standard/pull/1453","RelatedDescription":"Closed or merged PR \"Adding YAML stages\" (#1453)"},{"Id":"482581923","IsPullRequest":true,"CreatedAt":"2019-08-21T17:18:19","Actor":"terrajobst","Number":"1446","RawContent":null,"Title":"Add support for typed-datasets","State":"closed","Body":"This completes the support for typed datasets which also enables the dataset designer in VS.\r\n\r\nSee https://github.com/dotnet/corefx/pull/36528.","Url":"https://github.com/dotnet/standard/pull/1446","RelatedDescription":"Closed or merged PR \"Add support for typed-datasets\" (#1446)"},{"Id":"481880992","IsPullRequest":true,"CreatedAt":"2019-08-21T16:03:22","Actor":"dotnet-maestro[bot]","Number":"1444","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.11\r\n- **Date Produced**: 8/21/2019 2:09 AM\r\n- **Commit**: 37f316e1de562bc31acab2496540a865189da918\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19420.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19420.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1444)"},{"Id":"483391706","IsPullRequest":true,"CreatedAt":"2019-08-21T16:03:08","Actor":"dotnet-maestro[bot]","Number":"1455","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1455","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1455)"},{"Id":"483392622","IsPullRequest":true,"CreatedAt":"2019-08-21T12:42:44","Actor":"dotnet-maestro[bot]","Number":"1456","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190820.10\r\n- **Date Produced**: 8/21/2019 12:53 AM\r\n- **Commit**: d341fd37dcb2c22e382adccdc06770cf8f160577\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19420.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19420.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1456","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1456)"},{"Id":"483378318","IsPullRequest":true,"CreatedAt":"2019-08-21T12:12:10","Actor":"dotnet-maestro[bot]","Number":"1454","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1454","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1454)"},{"Id":"483046271","IsPullRequest":false,"CreatedAt":"2019-08-20T22:30:52","Actor":"Anipik","Number":"1452","RawContent":null,"Title":"NetStandard not publishing the packages to the blob-feed","State":"closed","Body":"The dotnet standard stopped publishing packages to the dotnet core blob feed after ```2.1.0-prerelease.19414.3```\r\nAs a result the builds for repos higher in the stack is failing.\r\nThis issue is only is release\\3.0 branches.\r\neg https://github.com/dotnet/corefx/pull/40331 \r\n\r\nThis is high priority issue as these will be blocking the build process for preview 9\r\n\r\ncc @JohnTortugo @wtgodbe @mmitche @riarenas ","Url":"https://github.com/dotnet/standard/issues/1452","RelatedDescription":"Closed issue \"NetStandard not publishing the packages to the blob-feed\" (#1452)"},{"Id":"482829276","IsPullRequest":true,"CreatedAt":"2019-08-20T16:53:09","Actor":"dotnet-maestro[bot]","Number":"1450","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1450","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1450)"},{"Id":"482766376","IsPullRequest":true,"CreatedAt":"2019-08-20T14:52:34","Actor":"ahsonkhan","Number":"1447","RawContent":null,"Title":"Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml","State":"closed","Body":"This contains the doc drops for the latest .NET Standard 2.1 xml docs.\r\n\r\nThis is the version currently referenced by corefx as well for the netcoreapp 3.0 xml docs: https://github.com/dotnet/corefx/blob/cf5c1b0a7c3cf0087ae72fd0e1995a274cfefe27/eng/Versions.props#L77\r\n\r\nThis likely needs to be merged into the release/3.0 branch as well. See https://github.com/dotnet/standard/pull/1448\r\n\r\ncc @wtgodbe, @dagood, @carlossanlop, @terrajobst, @mairaw, @safern, @Anipik ","Url":"https://github.com/dotnet/standard/pull/1447","RelatedDescription":"Closed or merged PR \"Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml\" (#1447)"},{"Id":"482767576","IsPullRequest":true,"CreatedAt":"2019-08-20T14:52:28","Actor":"ahsonkhan","Number":"1448","RawContent":null,"Title":"[release/3.0] Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml","State":"closed","Body":"Port of https://github.com/dotnet/standard/pull/1447\r\n\r\nThis contains the doc drops for the latest .NET Standard 2.1 xml docs.\r\n\r\ncc @wtgodbe, @dagood, @carlossanlop, @terrajobst, @mairaw, @safern, @Anipik, @ericstj ","Url":"https://github.com/dotnet/standard/pull/1448","RelatedDescription":"Closed or merged PR \"[release/3.0] Upgrade the IntelliSense package version to 3.0 Preview 8 for netstandard xml\" (#1448)"},{"Id":"482830211","IsPullRequest":true,"CreatedAt":"2019-08-20T12:32:48","Actor":"dotnet-maestro[bot]","Number":"1451","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190819.5\r\n- **Date Produced**: 8/19/2019 9:33 PM\r\n- **Commit**: 961b953eb77922d3906506ee15a58068abfa3284\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19419.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19419.5\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1451","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1451)"},{"Id":"482818399","IsPullRequest":true,"CreatedAt":"2019-08-20T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1449","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1449","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1449)"},{"Id":"481586618","IsPullRequest":true,"CreatedAt":"2019-08-19T17:08:10","Actor":"dotnet-maestro[bot]","Number":"1440","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1440","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1440)"},{"Id":"481881019","IsPullRequest":true,"CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Number":"1445","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445)"},{"Id":"481878978","IsPullRequest":true,"CreatedAt":"2019-08-17T12:12:07","Actor":"dotnet-maestro[bot]","Number":"1443","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1443)"},{"Id":"481587331","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:55","Actor":"dotnet-maestro[bot]","Number":"1442","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.9\r\n- **Date Produced**: 8/15/2019 11:51 PM\r\n- **Commit**: 1ac825dfc8ba0485ef4cf524a241f5309c43a2da\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19415.9\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1442","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1442)"},{"Id":"481587224","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:38","Actor":"dotnet-maestro[bot]","Number":"1441","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.13\r\n- **Date Produced**: 8/16/2019 7:46 AM\r\n- **Commit**: 4d2b68c2cda66c861aa918fd91e9bf7d664ea05f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1441)"},{"Id":"481577910","IsPullRequest":true,"CreatedAt":"2019-08-16T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1439","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1439","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1439)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"484874820","IsPullRequest":false,"CreatedAt":"2019-08-25T00:10:59","Actor":"ZBAGI","Number":"40565","RawContent":null,"Title":"NullReferenceException at LambdaCompiler","State":"open","Body":"I encountered an undocumented `NullReferenceException` while working on expression builder. Here is simplified version of it:\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    Test(() => true);\r\n    Console.ReadLine();\r\n}\r\npublic static void Test(params Expression<Func<bool>>[] memberSelectors)\r\n{\r\n    var memberSelectorFunc = Expression.Parameter(typeof(Expression<Func<bool>>), \"memberSelectorFunc\");\r\n    Func<IEnumerable<Expression<Func<bool>>>, Func<Expression<Func<bool>>, bool>, bool> any = Enumerable.Any;\r\n\r\n    // memberSelectorFunc => Invoke(memberSelectorFunc)\r\n    var condition = Expression.Lambda<Func<Expression<Func<bool>>, bool>>(\r\n        Expression.Invoke(memberSelectorFunc),\r\n        memberSelectorFunc\r\n    );\r\n\r\n    // new [] { () => True }\r\n    var memberSelectorExpr = Expression.NewArrayInit(typeof(Expression<Func<bool>>), memberSelectors);\r\n\r\n    // () => memberSelectorExpr.Any(condition)\r\n    var mainExpr = Expression.Lambda<Func<bool>>(\r\n            Expression.Call(null, any.Method, memberSelectorExpr, condition)\r\n        );\r\n\r\n    //This looks fine :\r\n    // () => new [] {() => True}.Any(memberSelectorFunc => Invoke(memberSelectorFunc))\r\n    Console.WriteLine(mainExpr.ToString());\r\n    var bug = mainExpr.Compile();\r\n}\r\n```\r\nBasically i get this exception every time i trying to `Invoke` expression passed into `Test` method.\r\n\r\n## Full exception\r\n```\r\n  | Name | Value | Type\r\n-- | -- | -- | --\r\n◢ | $exception | {\"Object reference not set to an instance of an object.\"} | System.NullReferenceException\r\n  | ▶ Data | {System.Collections.ListDictionaryInternal} | System.Collections.IDictionary {System.Collections.ListDictionaryInternal}\r\n  | HResult | -2147467261 | int\r\n  | HelpLink | null | string\r\n  | ▶ InnerException | null | System.Exception\r\n  | Message | \"Object reference not set to an instance of an object.\" | string\r\n  | Source | \"System.Linq.Expressions\" | string\r\n  | StackTrace | \"   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitInvocationExpression(Expression expr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitDelegateConstruction(LambdaExpression lambda)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitArguments(MethodBase method, IArgumentProvider args, Int32 skipParameters)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(MethodInfo mi, IArgumentProvider args, Type objectType, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCall(Expression obj, MethodInfo method, IArgumentProvider methodCallExpr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitMethodCallExpression(Expression expr, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitExpression(Expression node, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody()\\r\\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\r\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\r\\n   at System.Linq.Expressions.Expression`1.Compile()\\r\\n   at ConsoleApp35.Program.Test(Expression`1[] memberSelectors) in C:\\\\Users\\\\ZBAGI\\\\source\\\\repos\\\\ConsoleApp35\\\\ConsoleApp35\\\\Program.cs:line 37\\r\\n   at ConsoleApp35.Program.Main(String[] args) in C:\\\\Users\\\\ZBAGI\\\\source\\\\repos\\\\ConsoleApp35\\\\ConsoleApp35\\\\Program.cs:line 17\" | string\r\n  | ▶ TargetSite | {Void EmitMethodCall(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.IArgumentProvider, CompilationFlags)} | System.Reflection.MethodBase {System.Reflection.RuntimeMethodInfo}\r\n  | ▶ Static members |   |  \r\n  | ▶ Non-Public members |   |  \r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40565","RelatedDescription":"Open issue \"NullReferenceException at LambdaCompiler\" (#40565)"},{"Id":"484865198","IsPullRequest":true,"CreatedAt":"2019-08-24T21:43:34","Actor":"aashikgowda","Number":"40564","RawContent":null,"Title":"System.Numeric.Tests tests now have unique inputs","State":"open","Body":"Matrix add, subtract and multiplication tests now have unique inputs. This would prevent regression due to the values for certain tests being the same between the LHS and RHS inputs (such as the one introduced in #31779).\r\n\r\nThis resolves #39890","Url":"https://github.com/dotnet/corefx/pull/40564","RelatedDescription":"Open PR \"System.Numeric.Tests tests now have unique inputs\" (#40564)"},{"Id":"484864162","IsPullRequest":true,"CreatedAt":"2019-08-24T21:30:20","Actor":"tmds","Number":"40563","RawContent":null,"Title":"Reconfigure terminal for Console usage even if only one of stdin/stdout was used by the child","State":"open","Body":"Process: Unix: ensure we reconfigure the terminal for Console usage if only one of stdin/stdout was used by the child.\r\nConsole: Unix: Fix cache check for VTIME (read timeout).\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40557","Url":"https://github.com/dotnet/corefx/pull/40563","RelatedDescription":"Open PR \"Reconfigure terminal for Console usage even if only one of stdin/stdout was used by the child\" (#40563)"},{"Id":"484863314","IsPullRequest":false,"CreatedAt":"2019-08-24T21:19:33","Actor":"ppekrol","Number":"40562","RawContent":null,"Title":"Short date pattern from 'ky' culture produces invalid output in .NET Core 3.0","State":"open","Body":"Hi,\r\n\r\nI'm trying to convert date to string and then parse it back. I'm using short date pattern for that and 'ky' culture. Unfortunately this gives me `FormatException` when doing `DateTime.ParseExact`.\r\n\r\nFrom my brief investigation it looks like the pattern, which is 'd-MMM yy' for 'ky' culture, produces additional `.` (dot) in output in .NET Core 3.0.\r\n\r\nSimple code that demonstrates the issue (works fine in .NET Core 2.2):\r\n```csharp\r\n            var cultureInfo = CultureInfo.GetCultureInfo(\"ky\");\r\n            Thread.CurrentThread.CurrentCulture = cultureInfo;\r\n            var pattern = cultureInfo.DateTimeFormat.ShortDatePattern; // d-MMM yy\r\n\r\n            Calendar calendar = new GregorianCalendar();\r\n            DateTime date1 = calendar.ToDateTime(2000, 1, 4, 0, 0, 0, 0);\r\n\r\n            // .NET Core 2.2: 4-янв 00\r\n            // .NET Core 3.0: 4-янв. 00\r\n            var dateAsString = date1.ToString(pattern);\r\n\r\n            var date2 = DateTime.ParseExact(dateAsString, pattern, cultureInfo);\r\n\r\n            if (date1 != date2)\r\n                throw new InvalidOperationException(\"Date!\");\r\n```\r\n\r\n```\r\ndotnet --version\r\n3.0.100-preview8-013656\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40562","RelatedDescription":"Open issue \"Short date pattern from 'ky' culture produces invalid output in .NET Core 3.0\" (#40562)"},{"Id":"484859748","IsPullRequest":false,"CreatedAt":"2019-08-24T20:33:49","Actor":"0x90d","Number":"40561","RawContent":null,"Title":"API Proposal: System.IO.File.TryDelete(string path, int numberOfRetries, int timeout)","State":"open","Body":"## Proposal:\r\n\r\n```\r\nnamespace System.IO\r\n{\r\n    public class File\r\n    {\r\n        public static bool TryDelete(string path);\r\n        public static bool TryDelete(string path, int numberOfRetries = 0, int timeout = 250);\r\n    }\r\n}\r\n```\r\n## Background\r\n\r\nA very common problem is that when trying to delete a file it's used by another process which raises an exception. A very common solution is that File.Delete is wrapped around with a try-catch, possibly wrapped around a loop retrying for a specific amount of times. As no developer knows exactly what happens outside of his code, a File.Delete is probably always wrapped with a try-catch. \r\n\r\nWith this proposal I would like to reduce the amount of lines and give this away to .NET to take care of.\r\n\r\n## Reason\r\n\r\nTryDelete tries to delete a file for a specific amount of times which reduces the amount of code developers write every day since File.Delete is likely always a \"Try to delete and do X if it fails\" in code anyway by being surrounded with a try-catch. Having the option to retry is an additional line of code saver but not explicitly necessary.\r\n\r\nIt behaves similar to Dictionary.TryGetValue for example which only purpose is is to save a few lines as well.","Url":"https://github.com/dotnet/corefx/issues/40561","RelatedDescription":"Open issue \"API Proposal: System.IO.File.TryDelete(string path, int numberOfRetries, int timeout)\" (#40561)"},{"Id":"484858357","IsPullRequest":false,"CreatedAt":"2019-08-24T20:16:16","Actor":"0x90d","Number":"40560","RawContent":null,"Title":"API Proposal: System.IO.File.Delete(string path, FileDeletion.RecycleBin)","State":"open","Body":"## Proposal:\r\n\r\n```\r\nnamespace System.IO\r\n{\r\n    public class File\r\n    {\r\n        public static bool Delete(string path);\r\n        public static bool Delete(string path, FileDeletion mode = FileDeletion.Permanent);\r\n\r\n        public enum FileDeletion\r\n        {\r\n            ///<summary>Permanently deletes a file</summary>\r\n            Permanent,\r\n            ///<summary>Deletes a file to recycle bin if possible. Otherwise falls back to permanently deletion</summary>\r\n            RecycleBin\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n## Reason\r\n\r\nAs of now, no managed API exists to delete a file by moving it into the recycle bin. VB.NET have this option by using FileSystem.DeleteFile. C# however would require to use unmanaged API SHFileOperation in shell32 or referencing VB.NET library, in Windows at least.\r\n\r\nThis proposed API might be useful in cases where the customer decides to delete a file himself in a software. We could move it to recycle bin which give them the opportunity to restore if necessary, which is a top requested feature for any software that allows that.\r\n\r\nA recycle bin is available in Windows and MacOS, not sure about Linux although Ubuntu have a trash if I remember correctly. There must be a simply fallback to delete a file permanently if moving to recycle bin is not possible. This is also the case for deleting files from a network storage or attachable drive so it has to be documented anyway and should be clear to all developers. This makes the API available on all platforms.\r\n","Url":"https://github.com/dotnet/corefx/issues/40560","RelatedDescription":"Open issue \"API Proposal: System.IO.File.Delete(string path, FileDeletion.RecycleBin)\" (#40560)"},{"Id":"484839573","IsPullRequest":true,"CreatedAt":"2019-08-24T16:28:07","Actor":"bbartels","Number":"40559","RawContent":null,"Title":"Fixed missing Dispose call on empty IEnumerable after Union followed by Select (#40384)","State":"open","Body":"This commit fixes an issue raised in #40384.\r\nI was not entirely sure how to go about testing whether Dispose() was actually called.\r\nWhile it is not subject to a race condition (as Dispose() is called directly in the SetEnumerator() call) it still seems a little ugly.\r\n","Url":"https://github.com/dotnet/corefx/pull/40559","RelatedDescription":"Open PR \"Fixed missing Dispose call on empty IEnumerable after Union followed by Select (#40384)\" (#40559)"},{"Id":"484837364","IsPullRequest":false,"CreatedAt":"2019-08-24T16:02:29","Actor":"vcsjones","Number":"40558","RawContent":null,"Title":"API Proposal: HashAlgorithmName.FromOid","State":"open","Body":"Proposal:\r\n\r\n```csharp\r\nnamespace System.Security.Cryptography {\r\n  public struct HashAlgorithmName {\r\n    public static HashAlgorithmName FromOid(Oid oid);\r\n    public static HashAlgorithmName FromOid(string oidValue);\r\n  }\r\n}\r\n```\r\n\r\nRationale:\r\n\r\nI write this  _a lot_.\r\n\r\n```csharp\r\nswitch (DigestAlgorithm.Value) {\r\n  case KnownOids.MD5:\r\n    return HashAlgorithmName.MD5;\r\n  case KnownOids.SHA1:\r\n    return HashAlgorithmName.SHA1;\r\n  case KnownOids.SHA256:\r\n    return HashAlgorithmName.SHA256;\r\n  case KnownOids.SHA384:\r\n    return HashAlgorithmName.SHA384;\r\n  case KnownOids.SHA512:\r\n    return HashAlgorithmName.SHA512;\r\n  default:\r\n    throw new CryptographicException();\r\n}\r\n```\r\n\r\nSuch examples would be when a `HashAlgorithmName` is needed to pass in to `Verify` or `Sign` of RSA / ECDsa, etc.\r\n\r\nThe `string` overload would be useful because in most circumstances I don't have an actual `Oid` instance. It's easy enough to construct one, but the actual implementation doesn't need one - it's going to want the string representation anyway. It felt silly require constructing an `Oid` object just to shuffle a string around. Perhaps then the `Oid` overload is not necessary.\r\n\r\nOther thoughts:\r\n\r\nShould the `string` parameter be a `ReadOnlySpan<char>` instead?\r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/issues/40558","RelatedDescription":"Open issue \"API Proposal: HashAlgorithmName.FromOid\" (#40558)"},{"Id":"484632142","IsPullRequest":true,"CreatedAt":"2019-08-24T15:38:47","Actor":"jkoritzinsky","Number":"40541","RawContent":null,"Title":"[release/3.0] Add AssemblyAttributesGoHere* and SuppressMergeCheckAttribute to S.RCS.VC with typeforwards from mscorlib ","State":"closed","Body":"Port of #40470 to release/3.0.\r\n\r\n## Description\r\n\r\nAdd `AssemblyAttributesGoHere*` and `SuppressMergeCheckAttribute` to System.Runtime.CompilerServices.VisualC as internal types with typeforwards from mscorlib. The metadata manager in the runtime expects these types to live in `mscorlib` and doesn't work if it lives somewhere else (for `SuppressMergeCheckAttribute`), or it leaves the typerefs in the assembly, which leaves them dangling (for `AssemblyAttributesGoHere*`).\r\n\r\n## Customer Impact\r\n\r\nWPF gets warnings about dangling typerefs during crossgen and the C++/CLI compiler has to reference .NET Framework's mscorlib.dll.\r\n\r\n## Regression?\r\n\r\nNo. WPF is a new addition to .NET Core 3.0, so this is not a regression.\r\n\r\n## Risk\r\n\r\nThis is a low risk change. All of the added types are internal, so there is no new public surface area. The definitions of the types were copied straight from the reference source for .NET Framework, so their definitions match the original definitions. I've also verified internally that the master version of this change works for the C++/CLI compiler and WPF.\r\n\r\ncc: @tgani-msft @vatsan-madhavan ","Url":"https://github.com/dotnet/corefx/pull/40541","RelatedDescription":"Closed or merged PR \"[release/3.0] Add AssemblyAttributesGoHere* and SuppressMergeCheckAttribute to S.RCS.VC with typeforwards from mscorlib \" (#40541)"},{"Id":"484817054","IsPullRequest":true,"CreatedAt":"2019-08-24T14:28:56","Actor":"dotnet-maestro[bot]","Number":"40555","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.14\r\n- **Date Produced**: 8/24/2019 4:09 AM\r\n- **Commit**: 66e183e466589cb661cec1a76991f1a5bbd7cc56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19423.14\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19423.14\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19423.8\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190823.2\r\n- **Date Produced**: 8/23/2019 12:57 PM\r\n- **Commit**: 14f74c543f6a1ec72f97184fa5acdacb6c814ebf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19423.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40555","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40555)"},{"Id":"484822223","IsPullRequest":false,"CreatedAt":"2019-08-24T14:22:14","Actor":"SteveL-MSFT","Number":"40557","RawContent":null,"Title":"Regression: After using `less` with PowerShell Core, cursor keys return the VT100 escape sequence to ReadKey()","State":"open","Body":"When using PowerShell 7 built on .NET Core 3.0:\r\n\r\n```powershell\r\n1 | less\r\nq # to quit\r\n```\r\n\r\nNow use the `UpArrow` key to go back in history\r\n\r\nExpected:\r\n\r\n```powershell\r\n1 | less  #since this was the last command\r\n```\r\n\r\nActual:\r\n\r\n```none\r\nnothing, as PSReadLine receives `<ESC>A` (as two key presses) which is the VT100 escape sequence for up arrow\r\n```\r\n\r\nThis repros on macOS and Linux.  If you use PowerShell Core 6.x (same version of PSReadLine is included) this doesn't repro as it's built on .NET Core 2.1.\r\n\r\nInterestingly, if you use:\r\n\r\n```powershell\r\n\"`e[2J\"\r\n```\r\n\r\nThis is the VT100 escape sequence to clear the screen, then the up arrow returns the correct key to [Console]::ReadKey() again instead of the up arrow escape sequence.\r\nThis will block the PowerShell 7 release.  https://github.com/PowerShell/PSReadLine/issues/1007\r\n","Url":"https://github.com/dotnet/corefx/issues/40557","RelatedDescription":"Open issue \"Regression: After using `less` with PowerShell Core, cursor keys return the VT100 escape sequence to ReadKey()\" (#40557)"},{"Id":"484810048","IsPullRequest":true,"CreatedAt":"2019-08-24T13:27:03","Actor":"dotnet-maestro[bot]","Number":"40553","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19423.6\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19423.6\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40553","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40553)"},{"Id":"484811124","IsPullRequest":true,"CreatedAt":"2019-08-24T12:14:15","Actor":"dotnet-maestro[bot]","Number":"40554","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:79f1e123-800e-410f-94d7-08d690bc143a)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.11\r\n- **Date Produced**: 8/23/2019 10:56 PM\r\n- **Commit**: abecfcd748e6b8850e1111184bf34c93e9277f90\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-rc1-19423-11\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-rc1-19423-11\r\n\r\n[marker]: <> (End:79f1e123-800e-410f-94d7-08d690bc143a)\r\n\r\n[marker]: <> (Begin:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19423.6\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19423.6\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40554","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/core-setup dotnet/arcade\" (#40554)"},{"Id":"484586085","IsPullRequest":false,"CreatedAt":"2019-08-24T07:22:13","Actor":"f2calv","Number":"40538","RawContent":null,"Title":".NET Core 3.0 Preview 8 \"SSL Handshake failed with OpenSSL error\" when running via linux docker container","State":"closed","Body":"# SSL Handshake failed with OpenSSL error\r\n\r\nI'm upgrading .NET Core 2.2 kubernetes-hosted apps to .NET Core 3.0 preview 8, these apps connect to external SSL-secured APIs.\r\n\r\nThe upgraded apps run as expected on Windows development machine, and the .NET Core 2.2 docker image also works fine - but the .NET Core 3.0 preview 8 docker image version fails with;\r\n\r\n> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception.\r\n>  ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n>  ---> Interop+OpenSsl+SslException: SSL Handshake failed with OpenSSL error - SSL_ERROR_SSL.\r\n>  ---> Interop+Crypto+OpenSslCryptographicException: error:141A318A:SSL routines:tls_process_ske_dhe:dh key too small\r\n>    --- End of inner exception stack trace ---\r\n>    at Interop.OpenSsl.DoSslHandshake(SafeSslHandle context, Byte[] recvBuf, Int32 recvOffset, Int32 recvCount, Byte[]& sendBuf, Int32& sendCount)\r\n>    at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, ArraySegment`1 inputBuffer, Byte[]& outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)\r\n>    --- End of inner exception stack trace ---\r\n>    at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n>    at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n>    at System.Net.Security.SslStream.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Net.Security.SslStream.ThrowIfExceptional()\r\n>    at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n>    at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n>    at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n>    at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__65_1(IAsyncResult iar)\r\n>    at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n>    --- End of inner exception stack trace ---\r\n>    at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n>    at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n>    at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n>    at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n>    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n>    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n>    at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n>    at SharedLib.Class1.TryConnect() in /src/SharedLib/Class1.cs:line 17\r\n\r\nThe above issue is similar, but not identical to #https://github.com/dotnet/corefx/issues/37927\r\n\r\n# General\r\n\r\n I have created a repo to quickly reproduce the issue, [see here](https://github.com/f2calv/NetCore3BugCheck).\r\n \r\nTest steps, open BugCheck.sln with Visual Studio 2019 16.3 Preview 2 on Windows 10;\r\n - Run ConsoleApp22 - HttpClient works as expected\r\n - Run ConsoleApp30 - HttpClient works as expected\r\n \r\nNow use Docker Desktop 2.1.0.1 for Windows 10;\r\n-  Build .NET Core 2.2 image by running ./docker-build-ConsoleApp22.bat\r\n-- Run .NET Core 2.2 container by running ./docker-run-ConsoleApp22.bat <-- HttpClient works as expected\r\n-  Build .NET Core 3.0 image by running ./docker-build-ConsoleApp30.bat\r\n-- Run .NET Core 3.0 container by running ./docker-run-ConsoleApp30.bat **_<-- HttpClient fails with the above OpenSSL error._**\r\n\r\nThe test URL I'm connecting to is [this](https://api-fxpractice.oanda.com/v3/accounts), maybe their certificate is poor quality and/or .NET Core 3 under linux requires higher levels of SSL security? Either way it would be good to know the exact cause...\r\n","Url":"https://github.com/dotnet/corefx/issues/40538","RelatedDescription":"Closed issue \".NET Core 3.0 Preview 8 \"SSL Handshake failed with OpenSSL error\" when running via linux docker container\" (#40538)"},{"Id":"484760357","IsPullRequest":true,"CreatedAt":"2019-08-24T00:57:42","Actor":"Anipik","Number":"40552","RawContent":null,"Title":"[Donot Review] Just for testing","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/40552","RelatedDescription":"Open PR \"[Donot Review] Just for testing\" (#40552)"},{"Id":"484734768","IsPullRequest":true,"CreatedAt":"2019-08-24T00:56:47","Actor":"dotnet-maestro[bot]","Number":"40551","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190823.3\r\n- **Date Produced**: 8/23/2019 9:45 PM\r\n- **Commit**: 406332b220f6f2c0ab41bcd978eee07bdc9d6b7e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19423.3\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40551","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#40551)"},{"Id":"484526727","IsPullRequest":true,"CreatedAt":"2019-08-23T22:25:52","Actor":"dotnet-maestro[bot]","Number":"40537","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190822.13\r\n- **Date Produced**: 8/23/2019 4:12 AM\r\n- **Commit**: a307f0df21061400efeaf50b267f032a09146fee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19422.13\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19422.13\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19422.13\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190822.9\r\n- **Date Produced**: 8/23/2019 3:30 AM\r\n- **Commit**: c05355b90b55a9ff436a1ba9c6c1f5a508c2f3ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19422.9\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19422.9\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190822.2\r\n- **Date Produced**: 8/22/2019 12:53 PM\r\n- **Commit**: ccfabf62f02888ceab88943deab810f3d57c9d9c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19422.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40537)"},{"Id":"484707913","IsPullRequest":true,"CreatedAt":"2019-08-23T22:07:21","Actor":"ericstj","Number":"40547","RawContent":null,"Title":"[source-build] Fix typo in netstandard.depproj","State":"closed","Body":"After validating the change to avoid clashing during restore I reintroduced it by changing the item name.  This fixes that issue. ","Url":"https://github.com/dotnet/corefx/pull/40547","RelatedDescription":"Closed or merged PR \"[source-build] Fix typo in netstandard.depproj\" (#40547)"},{"Id":"484720241","IsPullRequest":true,"CreatedAt":"2019-08-23T21:32:21","Actor":"ericstj","Number":"40550","RawContent":null,"Title":"[release/3.0] [source-build] Fix typo in netstandard.depproj","State":"open","Body":"infra-only change needed for source build","Url":"https://github.com/dotnet/corefx/pull/40550","RelatedDescription":"Open PR \"[release/3.0] [source-build] Fix typo in netstandard.depproj\" (#40550)"},{"Id":"484709115","IsPullRequest":true,"CreatedAt":"2019-08-23T20:57:24","Actor":"ViktorHofer","Number":"40549","RawContent":null,"Title":"fix syntax for the publishUsingPipelines variable (#40545)","State":"open","Body":"Port of https://github.com/dotnet/corefx/commit/20cce62d9853d9e3bf5d110a778cd1fd32772e62 into release/3.0.","Url":"https://github.com/dotnet/corefx/pull/40549","RelatedDescription":"Open PR \"fix syntax for the publishUsingPipelines variable (#40545)\" (#40549)"},{"Id":"484708997","IsPullRequest":true,"CreatedAt":"2019-08-23T20:57:04","Actor":"joperezr","Number":"40548","RawContent":null,"Title":"Calculate Harvest packages during build  instead of using checked-in source","State":"open","Body":"cc: @ViktorHofer @ericstj \r\n\r\nAs part of my ongoing work for package harvesting, @ericstj mentioned it would be nice if the harvest packages could be calculated on the fly instead of having a checked-in source like we have now that needs to be updated manually. These changes will calculate the package references on the fly and restore them correctly. I have tested this locally and produces the desired package references.","Url":"https://github.com/dotnet/corefx/pull/40548","RelatedDescription":"Open PR \"Calculate Harvest packages during build  instead of using checked-in source\" (#40548)"},{"Id":"484637571","IsPullRequest":true,"CreatedAt":"2019-08-23T20:53:43","Actor":"ViktorHofer","Number":"40542","RawContent":null,"Title":"Remove explicit parameter and use arcade default","State":"closed","Body":"for source link validation in the yml.","Url":"https://github.com/dotnet/corefx/pull/40542","RelatedDescription":"Closed or merged PR \"Remove explicit parameter and use arcade default\" (#40542)"},{"Id":"484659997","IsPullRequest":true,"CreatedAt":"2019-08-23T20:09:36","Actor":"riarenas","Number":"40545","RawContent":null,"Title":"Change variable syntax for publishUsingPipelines during publish to BAR","State":"closed","Body":"See https://github.com/dotnet/core-eng/issues/7561\r\n\r\nThe other variable syntax gets evaluated during template evaluation time, before the value for the variable was actually available. This variable not getting populated correctly causes the build to potentially flow dependencies before the packages have actually been published.\r\n\r\nChanging the syntax used now propagates the variable correctly to the jobs.yml template, and the build is now correctly registered as publishing using pipelines.\r\n\r\nTest build with the changes: https://dev.azure.com/dnceng/internal/_build/results?buildId=322332\r\n\r\nBuild metadata without this change:\r\n ```{\r\n    \"id\": 24397,\r\n    \"commit\": \"5f0a73134598165820c037c0c7ed2c3fba92a038\",\r\n    \"azureDevOpsBuildId\": 322361,\r\n    \"azureDevOpsBuildNumber\": \"20190823.4\",\r\n    \"gitHubBranch\": \"refs/heads/master\",\r\n    ...\r\n    \"publishUsingPipelines\": false,\r\n    ...\r\n  }\r\n```\r\n\r\nWith the change:\r\n```\r\n{\r\n  \"id\": 24394,\r\n  \"commit\": \"962a7d984239cb642dce88969eed908dab87e844\",\r\n  \"azureDevOpsBuildId\": 322332,\r\n  \"azureDevOpsBuildNumber\": \"20190823.3\",\r\n  \"gitHubBranch\": \"refs/heads/riarenas/try-fix-variable\",\r\n  ...\r\n  \"publishUsingPipelines\": true,\r\n   ...\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/pull/40545","RelatedDescription":"Closed or merged PR \"Change variable syntax for publishUsingPipelines during publish to BAR\" (#40545)"},{"Id":"484676818","IsPullRequest":true,"CreatedAt":"2019-08-23T19:23:05","Actor":"madmir","Number":"40546","RawContent":null,"Title":"Remove Uri.IdnScope and perform cleanup","State":"open","Body":"Contributes to #40297","Url":"https://github.com/dotnet/corefx/pull/40546","RelatedDescription":"Open PR \"Remove Uri.IdnScope and perform cleanup\" (#40546)"},{"Id":"484652328","IsPullRequest":false,"CreatedAt":"2019-08-23T18:14:37","Actor":"Anipik","Number":"40544","RawContent":null,"Title":"Bumping the version of OOB packages to match product version(5.0.0)","State":"open","Body":"We have bumped the package versions of most assemblies to match the .netcore version (5.0.0) in https://github.com/dotnet/corefx/pull/40530\r\n\r\nThere are some oob packages for which we just updated the minor version instead of lifting them to 5.0.0\r\n\r\nThe list of such projects is \r\n```\r\nMicrosoft.Bcl.AsyncInterfaces - 1.2.0\r\nMicrosoft.Bcl.HashCode - 1.2.0\r\nMicrosoft.Diagnostics.Tracing.EventSource.Redist- 2.3.0\r\nMicrosoft.XmlSerializer.Generator - 2.3.0\r\nSystem.Collections.Immutable -1.8.0\r\nSystem.Composition - 1.5.0\r\nSystem.Numerics.Tensors- 0.4.0\r\nSystem.Reflection.Metadata- 1.9.0\r\nMicrosoft.VisualBasic.Core -10.6.0\r\n```\r\n\r\nWe can bump the versions of these packages to 5.0.0 except the last one.\r\nOpening this issue to discuss whether we should do it or not\r\n\r\ncc @ericstj @ViktorHofer @safern @danmosemsft \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40544","RelatedDescription":"Open issue \"Bumping the version of OOB packages to match product version(5.0.0)\" (#40544)"},{"Id":"484645396","IsPullRequest":true,"CreatedAt":"2019-08-23T17:56:15","Actor":"wfurt","Number":"40543","RawContent":null,"Title":"improve stability of FileSystemWatcher tests","State":"open","Body":"This is attempt to stabilize FileSystemWatcher test. There were ~400 failures in last 90 days and I could primarily reproduce failure of FileSystemWatcher_File_Create_WatchOwnPath and FileSystemWatcher_File_Create_NotAffectEachOther.\r\n\r\nI originally tinker with delays and timeouts. That look like improvement but tests were still failing and I could not get past 1000 runs without failure. I could not reproduce it with running single test or while running under `strace`.\r\n\r\nAt some point I used `inotify-tools` and provided some clues:\r\n```\r\ninotifywait -r -m /tmp  -e create -e delete\r\n...\r\n...\r\nCouldn't watch new directory /tmp/FileSystemWatcherTests_r1nateep.pmj/FileSystemWatcher_CreateManyConcurrentWatches_560_112cc1f4/36947: No space left on device\r\n/tmp/FileSystemWatcherTests_r1nateep.pmj/FileSystemWatcher_CreateManyConcurrentWatches_560_112cc1f4/ CREATE,ISDIR 36948\r\n```\r\n\r\nThe \"no space\" message is confusing as it suggests tests exhausted /tmp space. However `inotify_add_watch` can fail with `ENOSPC` if user limit is reached. Our implementation treats that as special and instead of throwing it will call Error delegate. So I added one and sure enough the error would show up:\r\n```\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET Core 5.0.0)\r\n  Discovering: System.IO.FileSystem.Watcher.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.IO.FileSystem.Watcher.Tests (found 163 of 176 test cases)\r\n  Starting:    System.IO.FileSystem.Watcher.Tests (parallel test collections = on, max threads = 4)\r\nWatcher failed: System.IO.IOException: The configured user limit (65536) on the number of inotify watches has been reached, or the operating system failed to allocate a required resource. source=System.IO.FileSystemWatcher 63403007\r\nWatcher failed: System.IO.IOException: The configured user limit (65536) on the number of inotify watches has been reached, or the operating system failed to allocate a required resource. source=System.IO.FileSystemWatcher 4916187\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /home/furt/github/wfurt-corefx-h2/src/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.MultipleWatchers.cs(160,0): at System.IO.Tests.FileSystemWatcher_Multiple_Test.<FileSystemWatcher_File_Create_WatchOwnPath>b__4_0()\r\n        /home/furt/github/wfurt-corefx-h2/src/System.IO.FileSystem.Watcher/tests/Utility/FileSystemWatcherTest.cs(198,0): at System.IO.Tests.FileSystemWatcherTest.ExecuteWithRetry(Action action, Int32 maxAttempts)\r\n        /home/furt/github/wfurt-corefx-h2/src/System.IO.FileSystem.Watcher/tests/FileSystemWatcher.MultipleWatchers.cs(138,0): at System.IO.Tests.FileSystemWatcher_Multiple_Test.FileSystemWatcher_File_Create_WatchOwnPath()\r\n  Finished:    System.IO.FileSystem.Watcher.Tests\r\n\r\n```\r\n\r\nWith that I look back at the `inotifywait` failure and FileSystemWatcher_CreateManyConcurrentWatches test:\r\n```c#\r\n  [OuterLoop(\"This test has high system resource demands and may cause failures in other concurrent tests\")]\r\n  public void FileSystemWatcher_CreateManyConcurrentWatches()\r\n```\r\nThat test already claims it _can_ impact other tests and it _does_. It creates situation where user limit is exhausted and then any other test (or any other independent application) can silently fail.  Without that test I could pass 5000 outerloop runs without any failure!\r\n\r\nIt seems like this test is for interesting boundary condition but even if all tests are executed with parallelism, it can negatively impact other processes on system. So I made change to make it visible and easy for developer to run it as needed:\r\n```\r\n   Starting:    System.IO.FileSystem.Watcher.Tests (parallel test collections = on, max threads = 4)\r\n      System.IO.Tests.FileSystemWatcherTests.FileSystemWatcher_CreateManyConcurrentWatches [SKIP]\r\n        Refusing to run without COREFX_IO_RUNDANGEROUSTESTS set.\r\n    Finished:    System.IO.FileSystem.Watcher.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.IO.FileSystem.Watcher.Tests  Total: 293, Errors: 0, Failed: 0, Skipped: 1, Time: 3.378s\r\n```\r\nHopefully the hint would be enough to hint to env variable. \r\n\r\n\r\nAs part of this I was also curious why the retry did not work since this is rare condition. The answer is very simple as it excludes all XUnit exception so when we fail Assert it does nothing. Since it looks like confusing useless craft I decided to remove it from test sets I was working on. Instead I left OnError callback so we would have some visibility to failures. \r\n\r\n\r\nfixes #38815\r\nfixes #34361\r\n","Url":"https://github.com/dotnet/corefx/pull/40543","RelatedDescription":"Open PR \"improve stability of FileSystemWatcher tests\" (#40543)"},{"Id":"484499279","IsPullRequest":true,"CreatedAt":"2019-08-23T17:32:06","Actor":"dotnet-maestro[bot]","Number":"40535","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:79f1e123-800e-410f-94d7-08d690bc143a)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190822.14\r\n- **Date Produced**: 8/23/2019 6:30 AM\r\n- **Commit**: 24da14999a8c6d711972b72812ec0c0df82be0c9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-rc1-19422-14\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-rc1-19422-14\r\n\r\n[marker]: <> (End:79f1e123-800e-410f-94d7-08d690bc143a)\r\n\r\n[marker]: <> (Begin:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190822.24\r\n- **Date Produced**: 8/22/2019 11:13 PM\r\n- **Commit**: c7f03b2cf06bdfc64dad4140fd0d486127095cd8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19422.24\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19422.24\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19422.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19422.24\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19422.24\r\n\r\n[marker]: <> (End:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40535","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/core-setup dotnet/arcade\" (#40535)"},{"Id":"484609751","IsPullRequest":true,"CreatedAt":"2019-08-23T16:18:17","Actor":"shortspider","Number":"40540","RawContent":null,"Title":"Immutable list vs list contains","State":"open","Body":"Fixes #36407","Url":"https://github.com/dotnet/corefx/pull/40540","RelatedDescription":"Open PR \"Immutable list vs list contains\" (#40540)"},{"Id":"484602525","IsPullRequest":false,"CreatedAt":"2019-08-23T15:59:45","Actor":"bartonjs","Number":"40539","RawContent":null,"Title":"Use a custom PFX/PKCS12 loader/exporter on non-Windows platforms","State":"open","Body":"We have a slew of bugs related to inconsistencies between the Windows PFX loader (PFXImportCertStore), the Unix PFX loader (PKCS12_parse), and the macOS PFX loader (SecItemImport), and their paired export functions:\r\n\r\n* #2743\r\n* #2745\r\n* #2746\r\n* #11046\r\n* #16705\r\n* #24225\r\n* #24226\r\n* #26397\r\n* #30946\r\n* #31746\r\n* #37599\r\n\r\n(And probably others)\r\n\r\nNow that we have experience with manually loading PKCS#12/PFX content (the `Pkcs12Info` class) and writing it (`Pkcs12Builder`), we should just use a custom loader and unify the experience across the platforms.","Url":"https://github.com/dotnet/corefx/issues/40539","RelatedDescription":"Open issue \"Use a custom PFX/PKCS12 loader/exporter on non-Windows platforms\" (#40539)"},{"Id":"484502858","IsPullRequest":true,"CreatedAt":"2019-08-23T12:24:27","Actor":"dotnet-maestro[bot]","Number":"40536","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190823.9\r\n- **Date Produced**: 8/24/2019 1:40 AM\r\n- **Commit**: 0bbc89c7279a2655e8cfe8466eb69d85899033a8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19423.9\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19423.9\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40536","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#40536)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"484859775","IsPullRequest":true,"CreatedAt":"2019-08-24T20:34:11","Actor":"svick","Number":"38273","RawContent":null,"Title":"Improved Markdown formatting of Breaking changes documents","State":"open","Body":"Not sure if release/dev16.4-preview1 is the right target branch for a PR that doesn't change any code, but targeting that branch just in case anyway.","Url":"https://github.com/dotnet/roslyn/pull/38273","RelatedDescription":"Open PR \"Improved Markdown formatting of Breaking changes documents\" (#38273)"},{"Id":"484787584","IsPullRequest":false,"CreatedAt":"2019-08-24T07:06:11","Actor":"alrz","Number":"38272","RawContent":null,"Title":"Should the constant value propagate to ICoversionOperation?","State":"open","Body":"Consider this code:\r\n```cs\r\nvoid M(int? x) {\r\n    if (x == 1) {\r\n    }\r\n}\r\n```\r\nCurrently `IOperation.ConstantValue` returns null for the literal `1` because it's wrapped in a `IConversionOperation`.\r\n\r\nI think this behavior is unintuitive because we need to fallback to use `SemanticModel.GetConstantValue` which works as expected.","Url":"https://github.com/dotnet/roslyn/issues/38272","RelatedDescription":"Open issue \"Should the constant value propagate to ICoversionOperation?\" (#38272)"},{"Id":"484762784","IsPullRequest":true,"CreatedAt":"2019-08-24T01:20:17","Actor":"petrroll","Number":"38271","RawContent":null,"Title":"Removed difference in ordering between refactorings & fixes with/out selection.","State":"open","Body":"Previously having empty selection caused refactorings to have\r\nlow-priority in codeactions menu. It was introduced in time when only\r\nvery few refactorings accepted selection and when there were very little\r\nnon-selection based refactorings. Nowadays the distinction between some\r\ncodefixes and refactorings is blurry and as such should both be treated\r\nthe same way, regardless of selection.","Url":"https://github.com/dotnet/roslyn/pull/38271","RelatedDescription":"Open PR \"Removed difference in ordering between refactorings & fixes with/out selection.\" (#38271)"},{"Id":"484759700","IsPullRequest":false,"CreatedAt":"2019-08-24T00:51:46","Actor":"gafter","Number":"38270","RawContent":null,"Title":"Warn when `default` is converted to a primitive type, reference type, or nullable type","State":"open","Body":"There are a number of confusing situations that arise from the fact that `default` can conform to nearly any type.  https://github.com/dotnet/roslyn/issues/38226#issuecomment-524243733 was the latest comment from a user.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38270","RelatedDescription":"Open issue \"Warn when `default` is converted to a primitive type, reference type, or nullable type\" (#38270)"},{"Id":"484756131","IsPullRequest":false,"CreatedAt":"2019-08-24T00:21:48","Actor":"vsfeedback","Number":"38269","RawContent":null,"Title":"Move all types without a file to matching files","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/372284/move-all-types-without-a-file-to-matching-files.html)._\n\n---\n<p>A feature that would search an find all types without a file and move them to matching files. &quot;Move type to matching file&quot; feature is awesome but after some long and complex workflows, it is very hard to manually find each type without a file. And some go missing without being moved a file.</p>\n\n---\n### Original Comments\n\n#### Федор Вишняков on 12/17/2018, 01:40 AM: \n\n<p>And what if I want to move all types from <strong>one</strong> file to separate matching files? I think it would be really useful if VS will have this feature.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38269","RelatedDescription":"Open issue \"Move all types without a file to matching files\" (#38269)"},{"Id":"484753746","IsPullRequest":false,"CreatedAt":"2019-08-24T00:05:27","Actor":"vsfeedback","Number":"38268","RawContent":null,"Title":"Lightbulb quick refactor for moving strings to resources file","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/400372/lightbulb-quick-refactor-for-moving-strings-to-res.html)._\n\n---\n<p>It would be super convenient to have a quick refactor to move string literals to a project's resource file (e.g. Resources.resx).</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 12/6/2018, 06:15 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  You will hear from us in about a week on our next steps.</p><p><strong></strong><u></u><sub></sub><sup></sup></p>\n","Url":"https://github.com/dotnet/roslyn/issues/38268","RelatedDescription":"Open issue \"Lightbulb quick refactor for moving strings to resources file\" (#38268)"},{"Id":"484753619","IsPullRequest":false,"CreatedAt":"2019-08-24T00:04:33","Actor":"vsfeedback","Number":"38267","RawContent":null,"Title":"Right click variable context menu needs \"Find all assignments\"","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/409321/right-click-variable-context-menu-needs-find-all-a.html)._\n\n---\n<p>Currently when you right click a variable you can choose &quot;go to definition&quot; which is handy and &quot;find all references&quot; which can have hundreds of results. </p><p>It would make it much easier if you changed &quot;Find all References&quot; to only show where the variable value is accessed </p><pre>Console.WriteLine(myvariable);</pre><p>And then added a new item &quot;Find all assignments&quot; which shows where the variable is assigned </p><pre>myvariable = &quot;hello&quot;;\n</pre>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 12/16/2018, 05:52 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;You will hear from us in about a week on our next steps.</p>","Url":"https://github.com/dotnet/roslyn/issues/38267","RelatedDescription":"Open issue \"Right click variable context menu needs \"Find all assignments\"\" (#38267)"},{"Id":"484753292","IsPullRequest":false,"CreatedAt":"2019-08-24T00:02:57","Actor":"vsfeedback","Number":"38266","RawContent":null,"Title":"Strange suggestion to introduce constant for 'true'","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/idea/680962/strange-suggestion-to-introduce-constant-for-true.html)._\n\n---\nVS suggests that I &quot;Introduce constant for 'true'&quot;, when it should know that those are special values in a boolean method and just because I use it a few times, I don't need a constant for it.\n\n---\n### Original Comments\n\n#### Roi Chen [MSFT] on 8/7/2019, 05:00 AM: \n\nWe have converted this feedback item from problem to idea. This change was done to better reflect the feedback's nature. It will allow other developers to easily find it and engage on it.","Url":"https://github.com/dotnet/roslyn/issues/38266","RelatedDescription":"Open issue \"Strange suggestion to introduce constant for 'true'\" (#38266)"},{"Id":"484753200","IsPullRequest":true,"CreatedAt":"2019-08-24T00:02:23","Actor":"dotnet-bot","Number":"38265","RawContent":null,"Title":"Merge release/dev16.3 to release/dev16.3-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-release/dev16.3-vs-deps\ngit reset --hard upstream/release/dev16.3-vs-deps\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38265","RelatedDescription":"Open PR \"Merge release/dev16.3 to release/dev16.3-vs-deps\" (#38265)"},{"Id":"484753073","IsPullRequest":true,"CreatedAt":"2019-08-24T00:01:40","Actor":"dotnet-bot","Number":"38264","RawContent":null,"Title":"Merge release/dev16.4-preview1-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.4-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38264","RelatedDescription":"Open PR \"Merge release/dev16.4-preview1-vs-deps to master-vs-deps\" (#38264)"},{"Id":"484752901","IsPullRequest":true,"CreatedAt":"2019-08-24T00:00:46","Actor":"dotnet-bot","Number":"38263","RawContent":null,"Title":"Merge release/dev16.3 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38263","RelatedDescription":"Open PR \"Merge release/dev16.3 to master\" (#38263)"},{"Id":"484752447","IsPullRequest":false,"CreatedAt":"2019-08-23T23:57:26","Actor":"vsfeedback","Number":"38262","RawContent":null,"Title":"Allow the renaming of nested partial class files","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/569021/allow-the-renaming-of-partial-class-files.html)._\n\n---\n<p>Hi there. Hopefully there isn't a duplicate for this.</p> <p>Currently in VS2019 if I have a partial class in Visual Studio, I can rename its root file via the UI. What I cannot do though, is rename any of its nested files. In order to do that so far, I am opening the csproj manually(after I go to file explorer and rename the file) and edit the entry by hand. </p><p>It would be great if partial classes had a way of allowing the rename of any of nested files via the UI.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 5/16/2019, 02:09 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/38262","RelatedDescription":"Open issue \"Allow the renaming of nested partial class files\" (#38262)"},{"Id":"484751269","IsPullRequest":false,"CreatedAt":"2019-08-23T23:53:58","Actor":"sharwell","Number":"38261","RawContent":null,"Title":"Cannot implicitly convert `Task<T>` to `Task<T?>`","State":"closed","Body":"Currently it's not possible to return an instance of `Task<T>` from a method returning `Task<T?>`. For asynchronous methods, this is not problematic because the awaited result of `Task<T>` can be converted to `T?`. However, method using pass-through to avoid the state machine overhead cannot use this approach.\r\n\r\nThis situation occurs several times in #35258. It makes code review difficult because while this case is safe, it's not obvious when looking at any given use of the suppression operator whether it falls into this known safe case or is some other situation.\r\n\r\n📝 This situation would also apply to `ValueTask<T>`.\r\n\r\nPotential solutions seem to include:\r\n\r\n1. The compiler having some special knowledge of predefined types like `Task<T>` where the parameter is essentially `out T` but not marked as such due to limitations on covariant types in C#.\r\n2. The ability to mark compile-time covariant generic type parameters (might further require an annotation in the definition of `Task<T>`).\r\n3. A helper method like this:\r\n\r\n    ```csharp\r\n    public static Task<TResult?> AsNullable<TResult>(this Task<TResult> task)\r\n      where TResult : class\r\n    {\r\n      // This is a known safe conversion\r\n      return task!;\r\n    }\r\n    ```","Url":"https://github.com/dotnet/roslyn/issues/38261","RelatedDescription":"Closed issue \"Cannot implicitly convert `Task<T>` to `Task<T?>`\" (#38261)"},{"Id":"484750166","IsPullRequest":false,"CreatedAt":"2019-08-23T23:42:16","Actor":"sharwell","Number":"38260","RawContent":null,"Title":"Nullable annotations for SpecializedTasks.Default","State":"open","Body":"Currently we don't have a way to document the semantics of `SpecializedTasks.Default<T>` such that the compiler knows that the result is nullable for reference types. This issue is requesting support from the language team to understand the best pattern(s) to employ in cases like this.\r\n\r\nhttps://github.com/dotnet/roslyn/blob/98b82ec70a2d9e6953a588464bce44fa245182b3/src/Workspaces/Core/Portable/Utilities/SpecializedTasks.cs#L20-L23","Url":"https://github.com/dotnet/roslyn/issues/38260","RelatedDescription":"Open issue \"Nullable annotations for SpecializedTasks.Default\" (#38260)"},{"Id":"484744550","IsPullRequest":true,"CreatedAt":"2019-08-23T23:11:57","Actor":"riarenas","Number":"38259","RawContent":null,"Title":"Add missing properties to the build pipeline for stages-based publishing","State":"open","Body":"See https://github.com/dotnet/core-eng/issues/7561\r\n\r\nSets up a few properties that were previously not documented as part of the onboarding process, and are causing issues in the publishing process.\r\n\r\nTest build for this: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2972442&view=results\r\n\r\nYou will notice a few differences in that build:\r\n\r\n* The build stage doesn't publish anything to the dotnet-core feed, and instead publishes all artifacts to the build's containers.\r\n* I set up a default channel for my testing branch to the \".NET Tools -latest\" channel for testing purposes: `https://github.com/dotnet/roslyn @ refs/heads/dev/riarenas/add-stages-properties -> .NET Tools - Latest`. Which causes publishing to happen as part of the channel's publishing stage:\r\n![image](https://user-images.githubusercontent.com/23242101/63628210-092f5380-c5c0-11e9-866c-bcb9e8b62cac.png)\r\n\r\n\r\n**Followup**:\r\n\r\nThe `Publish Ngen Logs` step failed in my test builds, I'm not sure if it's expected due to the configuration I used to queue the test build, or if it's a legitimate failure.","Url":"https://github.com/dotnet/roslyn/pull/38259","RelatedDescription":"Open PR \"Add missing properties to the build pipeline for stages-based publishing\" (#38259)"},{"Id":"484739235","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:51","Actor":"jasonmalinowski","Number":"38258","RawContent":null,"Title":"Add null annotations to the Document API and fix various other problems","State":"open","Body":"Commit at a time is recommended.\r\n\r\n**WARNING:** there is an public API breaking change in this, but I believe it's a case where anybody would already be broken so I'm comfortable making it.","Url":"https://github.com/dotnet/roslyn/pull/38258","RelatedDescription":"Open PR \"Add null annotations to the Document API and fix various other problems\" (#38258)"},{"Id":"484738119","IsPullRequest":true,"CreatedAt":"2019-08-23T22:40:41","Actor":"333fred","Number":"38257","RawContent":null,"Title":"Generalize the map used for storing BoundCall/MethodSymbols","State":"open","Body":"Generalize the map used for storing BoundCall/MethodSymbols to allow for any boundnode and original symbol -> updated symbol pair, and update the rewriter generator to consume the map. Followup changes will capture more reinferred symbols, this change just sets up the infrastructure without breaking existing functionality. @dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/38257","RelatedDescription":"Open PR \"Generalize the map used for storing BoundCall/MethodSymbols\" (#38257)"},{"Id":"484728890","IsPullRequest":false,"CreatedAt":"2019-08-23T22:02:24","Actor":"stakx","Number":"38256","RawContent":null,"Title":"Why are interface members allowed to make use of static return / parameter types?","State":"open","Body":"I originally posted an issue over at https://github.com/dotnet/csharplang/issues/2739, reposting here because @CyrusNajmabadi suggested this might be a compiler bug.\r\n\r\n---\r\n\r\n**Version Used**:\r\n\r\n* Visual Studio Community 2019  \r\n   VisualStudio.16.Release/16.2.2+29209.62  \r\n   C# Tools   3.2.0-beta4-19380-04+5e176ad8aea2724fe6787495c6fcc9144c550de1\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following program fragment and observe any compilation errors:\r\n\r\n```csharp\r\nstatic class StaticClass { }\r\n\r\ninterface IX\r\n{\r\n    StaticClass P { get; }\r\n    StaticClass M(StaticClass p);\r\n}\r\n\r\nclass X : IX\r\n{\r\n    public StaticClass P => throw new NotImplementedException();\r\n    public StaticClass M(StaticClass p) => throw new NotImplementedException();\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI would expect the C# compiler to complain about the uses of `StaticClass` as a return type and parameter type, both in types `IX` and `X`.\r\n\r\n**Actual Behavior**:\r\n\r\nThe C# compiler only produces errors for the (invalid?) uses of `StaticClass` in `X`. There are no errors in `IX`, i.e. if I omit the definition of class `X`, the above program fragment will compile successfully. Which is obviously nonsensical, since there's no way to sensibly implement `IX.P` nor call `IX.M`.","Url":"https://github.com/dotnet/roslyn/issues/38256","RelatedDescription":"Open issue \"Why are interface members allowed to make use of static return / parameter types?\" (#38256)"},{"Id":"484662103","IsPullRequest":true,"CreatedAt":"2019-08-23T21:40:25","Actor":"cston","Number":"38249","RawContent":null,"Title":"Consider nullability when comparing IReference instances during emit","State":"closed","Body":"Fixes #38183","Url":"https://github.com/dotnet/roslyn/pull/38249","RelatedDescription":"Closed or merged PR \"Consider nullability when comparing IReference instances during emit\" (#38249)"},{"Id":"484719569","IsPullRequest":false,"CreatedAt":"2019-08-23T21:30:17","Actor":"jacbz","Number":"38255","RawContent":null,"Title":"Nested conditionals formatting","State":"open","Body":"When having lots of nested conditional statements, such as this:\r\n\r\n```\r\nvar x =\r\n    (condition)\r\n    ? (condition)\r\n        ? iftrue \r\n        : (condition)\r\n            ? iftrue \r\n            : iffalse\r\n    : (condition)\r\n        ? iftrue \r\n        : iffalse;\r\n```\r\n\r\nIt can be helpful if the code is properly indentated like that. As far as I can see, the Roslyn Formatter (`Microsoft.CodeAnalysis.Formatting`) does not provide such an option. Or am I wrong?","Url":"https://github.com/dotnet/roslyn/issues/38255","RelatedDescription":"Open issue \"Nested conditionals formatting\" (#38255)"},{"Id":"484716529","IsPullRequest":true,"CreatedAt":"2019-08-23T21:20:39","Actor":"RikkiGibson","Number":"38254","RawContent":null,"Title":"Update null state of argument to delegate creation","State":"open","Body":"Closes #38171\r\n\r\nJust a small oversight in delegate creation analysis. Passing a null argument to a delegate creation will always throw, so we should always update the null-state of the argument to not-null after the creation. This is similar to what is done in `CheckPossibleNullReceiver`.\r\n\r\nThanks @TessenR.","Url":"https://github.com/dotnet/roslyn/pull/38254","RelatedDescription":"Open PR \"Update null state of argument to delegate creation\" (#38254)"},{"Id":"484686774","IsPullRequest":false,"CreatedAt":"2019-08-23T19:53:10","Actor":"genlu","Number":"38253","RawContent":null,"Title":"Better matched unimported items not showing at the top of completion list","State":"open","Body":"From @davkean:\r\n\r\n![image](https://user-images.githubusercontent.com/788783/63619879-b98f5e80-c5a4-11e9-8866-c2a50039335e.png)\r\n> I would expect System.Threading.Tasks to be at the top, it's not, its 40 or 50 elements down\r\n\r\nThe fix I'm proposing is to sort the items first by matching score and then by sort text (maybe only when import completion is enabled? if we want to preserve current behavior for people don't use import completion)\r\n\r\nThought? @CyrusNajmabadi @ivanbasov @AmadeusW ","Url":"https://github.com/dotnet/roslyn/issues/38253","RelatedDescription":"Open issue \"Better matched unimported items not showing at the top of completion list\" (#38253)"},{"Id":"484673555","IsPullRequest":false,"CreatedAt":"2019-08-23T19:13:25","Actor":"vsfeedback","Number":"38252","RawContent":null,"Title":"Ruleset file corruption when using multi-select to set analyzer severity for first time in a project","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/408855/ruleset-file-corruption-when-using-multi-select-to.html)._\n\n---\nOn any project (at least, any CPS-based project) when there is no ruleset file yet associated with the project, VS will create one when I modify the severity of any single analyzer rule in Solution Explorer.<br><br>Solution Explorer also supports multi-selection to change severity on several rules at once. This is super-useful when I want to turn off all analyzers for a project, which is a common workaround to this bug https://github.com/NuGet/Home/issues/6279<br><br>However, the problem is that if multi-selection is used to change the severity when no .ruleset file yet exists for the project, VS creates one .ruleset for *each* selected analzyer, each .ruleset file has only one analyzer severity set. And only the last .ruleset file is actually associated with the project. See repro recording.\n\n---\n### Original Comments\n\n#### Jinu Joseph [MSFT] on 12/17/2018, 02:44 AM: \n\n<p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n#### Andrew Arnott [MSFT] on 4/17/2019, 02:03 PM: \n\nThank you for reporting this issue to us. We have changed the title to better describe the problem so others can find and engage with it\n#### Visual Studio Feedback System on 8/23/2019, 03:01 AM: \n\nI'm closing this report, because in the last 90 days there was no internal developer activity and very small number of new votes or comments. Sorry, we would like to look at this further, but we just don’t have the time right now. Our goal in closing older issues such as this one is to keep customers informed on which issues are currently being pursued by Visual Studio teams. If you still have trouble with our latest version, please report it as a new problem.\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38252","RelatedDescription":"Open issue \"Ruleset file corruption when using multi-select to set analyzer severity for first time in a project\" (#38252)"},{"Id":"484671836","IsPullRequest":true,"CreatedAt":"2019-08-23T19:08:21","Actor":"svick","Number":"38251","RawContent":null,"Title":"Allow static local functions to convert static functions to delegates","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38240.\r\n\r\nThe change in `VisitMethodGroup` means that the receiver of a method group is no longer checked automatically.\r\n\r\nThe changes in `VisitConversion` ensure that a method group is first properly checked for CS8421, and then that the receiver is checked, but only if the method selected by overload resolution has a receiver.\r\n\r\nThis PR targets the release/dev16.4-preview1 branch, because my previous PRs were sent there. If that's wrong, please tell me.","Url":"https://github.com/dotnet/roslyn/pull/38251","RelatedDescription":"Open PR \"Allow static local functions to convert static functions to delegates\" (#38251)"},{"Id":"484669397","IsPullRequest":false,"CreatedAt":"2019-08-23T19:01:15","Actor":"KirillOsenkov","Number":"38250","RawContent":null,"Title":"Completion: VSMac TypeScript completion doesn't commit with Enter","State":"open","Body":"**Version Used**: \r\n16.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a .js file in VS\r\n2. open completion\r\n3. commit with Enter\r\n\r\n**Expected Behavior**:\r\nhttps://github.com/dotnet/roslyn/blob/4b8c6a7e3eef5cfb7e049d67d5449af3c44101f9/src/EditorFeatures/Core/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs#L307 returns false because on Windows `item.DisplayText.StartsWith(textTypedSoFar, StringComparison.CurrentCultureIgnoreCase)` returns false for `a\\0`.\r\n\r\n**Actual Behavior**:\r\nThe problem on Mono is that comparison returns true for `a\\0` and so completion in VSMac in TypeScript doesn't commit\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs,6fc358925a8c4e66\r\n\r\nIn `TextTypedSoFarMatchesItem` we should explicitly account for `typedChar` being `\\0`. We're just getting lucky accidentally. On Mac we're not lucky because that StartsWith comparison is platform-specific.","Url":"https://github.com/dotnet/roslyn/issues/38250","RelatedDescription":"Open issue \"Completion: VSMac TypeScript completion doesn't commit with Enter\" (#38250)"},{"Id":"484650661","IsPullRequest":false,"CreatedAt":"2019-08-23T18:09:56","Actor":"cston","Number":"38248","RawContent":null,"Title":"Dictionary<,> and HashSet<> instances should be created with an explicit IEqualityComparer<> for Symbols","State":"open","Body":"#37247 changed `Symbol` equality to ignore nullability by default.\r\n\r\nAs a result, instances of `Dictionary<,>` and `HashSet<>` should be created with an explicit `IEqualityComparer<>` when the key type argument may be `Symbol`. That includes cases where the key type argument is a interface implemented by `Symbol` such as `Cci.IReference`.","Url":"https://github.com/dotnet/roslyn/issues/38248","RelatedDescription":"Open issue \"Dictionary<,> and HashSet<> instances should be created with an explicit IEqualityComparer<> for Symbols\" (#38248)"},{"Id":"484649500","IsPullRequest":false,"CreatedAt":"2019-08-23T18:06:59","Actor":"AlekseyTs","Number":"38247","RawContent":null,"Title":"Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test is flaky","State":"open","Body":"I have a PR https://github.com/dotnet/roslyn/pull/38230 that targets release/dev16.3 branch and the \r\nMicrosoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test fails for it (failed on rerun as well) only in Windows_Desktop_Unit_Tests release_32 build. Note, the PR doesn’t make any changes to VB.\r\nHere is a link to the build https://dev.azure.com/dnceng/public/_build/results?buildId=321462&view=logs.\r\n\r\n```\r\n    Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict [STARTING]\r\n      Assert.Equal() Failure\r\n      Expected: WhereSelectEnumerableIterator<TextSpan, Span> [[21..24), [72..75), [78..81)]\r\n      Actual:   List<Span> [[21..24), [72..75), [72..75), [78..81), [78..81)]\r\n      Stack Trace:\r\n        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(91,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(26,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(61,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb(865,0): at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_21_VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n           at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n           at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38247","RelatedDescription":"Open issue \"Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VisualBasic_FixupSpanDuringResolvableConflict_ReferenceConflict unit test is flaky\" (#38247)"},{"Id":"484638164","IsPullRequest":true,"CreatedAt":"2019-08-23T18:04:23","Actor":"agocke","Number":"38246","RawContent":null,"Title":"Re-add master-vs-deps to the publish branch list","State":"closed","Body":"master-vs-deps is the backup for all branch publishing, so it\r\nmust always be in the list.","Url":"https://github.com/dotnet/roslyn/pull/38246","RelatedDescription":"Closed or merged PR \"Re-add master-vs-deps to the publish branch list\" (#38246)"},{"Id":"484624998","IsPullRequest":false,"CreatedAt":"2019-08-23T16:59:40","Actor":"stephentoub","Number":"38245","RawContent":null,"Title":"IDE0055 indents labels incorrectly sometimes","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19415-01+f5ba9f2c61a2fe853dc4913888d40df221539147\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private static bool Repro(int input)\r\n    {\r\n        switch (input)\r\n        {\r\n            case 0: goto LabelA;\r\n            case 1: goto LabelB;\r\n            case 2: goto LabelC;\r\n            case 3: goto LabelD;\r\n        }\r\n\r\n    LabelA:\r\n        if (DateTime.Now < DateTime.Now)\r\n            goto LabelC;\r\n\r\n    LabelB:\r\n        goto LabelD;\r\n\r\n    LabelC:\r\n        return false;\r\n\r\n    LabelD:\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nIDE0055 not offered.\r\n\r\n**Actual Behavior**:\r\nIDE0055 offered and reformats this to:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private static bool Repro(int input)\r\n    {\r\n        switch (input)\r\n        {\r\n            case 0: goto LabelA;\r\n            case 1: goto LabelB;\r\n            case 2: goto LabelC;\r\n            case 3: goto LabelD;\r\n        }\r\n\r\n    LabelA:\r\n        if (DateTime.Now < DateTime.Now)\r\n            goto LabelC;\r\n\r\n        LabelB:\r\n        goto LabelD;\r\n\r\n    LabelC:\r\n        return false;\r\n\r\n    LabelD:\r\n        return true;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38245","RelatedDescription":"Open issue \"IDE0055 indents labels incorrectly sometimes\" (#38245)"},{"Id":"484624086","IsPullRequest":false,"CreatedAt":"2019-08-23T16:58:53","Actor":"vsfeedback","Number":"38244","RawContent":null,"Title":"IDE1005","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/516075/ide1005.html)._\n\n---\nI need to disable this message. I have 1.6M lines of code in 22 projects with over 15 years of development. This has become a great hindrance, I don't need my hand held, I need to control my own development environment. A way to turn off this warning is all I require. Thank you.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 4/3/2019, 10:17 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 8/22/2019, 10:59 AM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38244","RelatedDescription":"Closed issue \"IDE1005\" (#38244)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"481157926","IsPullRequest":false,"CreatedAt":"2019-08-23T19:16:08","Actor":"gtbuchanan","Number":"7698","RawContent":null,"Title":"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition","State":"closed","Body":"I have a UWP app (`Ewn.Mobile.UWP`) I have been unsuccessfully trying to build in release mode with .NET Native for weeks now. Many of my issues seem to be stemming from a lack of a 64-bit version of ILC. However, I've gotten to a point where I at least don't get an `OutOfMemoryException`. As mentioned in #5905 and https://github.com/dotnet/reactive/issues/899, I've implemented the following compiler flags in my csproj:\r\n\r\n```xml\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n```\r\n\r\nHowever, I receive the following error during compilation related to one of our internal NuGet packages:\r\n\r\n### ilclog.csv\r\n```csv\r\n\"Message\",Low,\"D:\\a\\1\\s\\src\\Ewn.Extensions\\CollectionExtensions.cs(0) : fatal error N1205: 'static System.__UniversalCanon Ewn.Extensions.CollectionExtensions.AddTo<System.__UniversalCanon, System.__UniversalCanon>(System.__UniversalCanon, System.Collections.Generic.ICollection`1<System.__UniversalCanon>)' : Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\"\r\n\"Error\",,0,0,\"ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools64\\nutc_driver.exe @\"\"C:\\Users\\taylor\\Desktop\\ewn-main\\src\\Ewn.Mobile.UWP\\obj\\x86\\Dev\\ilc\\intermediate\\MDIL\\Ewn.Mobile.UWP.rsp\"\"' returned exit code 1\"\r\n\"Message\",Low,\"Done executing task \"\"GenerateMDILGlobalAnalysis\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building target \"\"GenerateMDILGlobalAnalysis\"\" in file \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building project \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Compilation failed\"\r\n```\r\n\r\n### Ewn.Extensions.CollectionExtensions.AddTo\r\n```csharp\r\npublic static T1 AddTo<T1, T2>([NotNull]this T1 @this, ICollection<T2> collection)\r\n    where T1 : T2\r\n{\r\n    collection.Add(@this);\r\n    return @this;\r\n}\r\n```\r\n\r\nI honestly have no idea what could be causing this since the method is pretty basic. Do you think this is a bug or is there something I'm missing?","Url":"https://github.com/dotnet/corert/issues/7698","RelatedDescription":"Closed issue \"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\" (#7698)"},{"Id":"484617981","IsPullRequest":false,"CreatedAt":"2019-08-23T16:40:13","Actor":"jkotas","Number":"7727","RawContent":null,"Title":"CPAOT code fails under GCStress","State":"open","Body":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Numerics;\r\n\r\nstruct MyValueType\r\n{\r\n    object o;\r\n}\r\n\r\nabstract class Test\r\n{\r\n    public abstract void M(MyValueType v);\r\n\r\n    static void Main()\r\n    {\r\n        new Concrete().M(default);\r\n    }\r\n}\r\n\r\nclass Concrete : Test\r\n{\r\n    public override void M(MyValueType v)\r\n    {\r\n        new Vector<double>().ToString();\r\n    }\r\n}\r\n```\r\n\r\n1. Compile `csc test.cs`\r\n2. Generate native code for test.exe using cpaot\r\n3. Set `set COMPlus_GCStress=1` and run it on checked CoreCLR runtime.\r\n\r\nResult:\r\n\r\nWithout `-O`:\r\n\r\n```\r\nAssert failure(PID 27868 [0x00006cdc], Thread: 34200 [0x8598]): SanityCheck()\r\n\r\nCORECLR! MethodTable::Validate + 0x3F (0x00007ff8`426f3813)\r\nCORECLR! Object::ValidateInner + 0x127 (0x00007ff8`42607c97)\r\nCORECLR! Object::Validate + 0x13A (0x00007ff8`42607a4a)\r\nCORECLR! GcInfoDecoder::ReportStackSlotToGC + 0x128 (0x00007ff8`42a233e0)\r\nCORECLR! GcInfoDecoder::ReportSlotToGC + 0x168 (0x00007ff8`42a2329c)\r\nCORECLR! GcInfoDecoder::ReportUntrackedSlots + 0x69 (0x00007ff8`42a235a5)\r\nCORECLR! GcInfoDecoder::EnumerateLiveSlots + 0xD23 (0x00007ff8`42a224a3)\r\nCORECLR! EECodeManager::EnumGcRefs + 0x39B (0x00007ff8`4268656b)\r\nCORECLR! GcStackCrawlCallBack + 0x2CD (0x00007ff8`42940a1d)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`423b0932)\r\n    File: D:\\coreclr\\src\\vm\\methodtable.cpp Line: 9902\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```\r\n\r\nWith `-O`:\r\n\r\n```\r\nAssert failure(PID 20768 [0x00005120], Thread: 32368 [0x7e70]): !th.IsNull()\r\n\r\nCORECLR! SigPointer::GetTypeHandleThrowing + 0xB8A (0x00007ff8`3e98c9f2)\r\nCORECLR! SigPointer::PeekElemTypeNormalized + 0x1FF (0x00007ff8`3e9930f3)\r\nCORECLR! ArgIteratorTemplate<ArgIteratorBase>::GetNextOffset + 0xFB (0x00007ff8`3e63ba33)\r\nCORECLR! TransitionFrame::PromoteCallerStackHelper + 0x188 (0x00007ff8`3e8e06ec)\r\nCORECLR! TransitionFrame::PromoteCallerStack + 0x17F (0x00007ff8`3e8e054b)\r\nCORECLR! GcStackCrawlCallBack + 0x37A (0x00007ff8`3eca0aca)\r\nCORECLR! Thread::MakeStackwalkerCallback + 0x52 (0x00007ff8`3e710932)\r\nCORECLR! Thread::StackWalkFramesEx + 0x17A (0x00007ff8`3e71297e)\r\nCORECLR! Thread::StackWalkFrames + 0x184 (0x00007ff8`3e712764)\r\nCORECLR! ScanStackRoots + 0x284 (0x00007ff8`3ee30158)\r\n    File: D:\\coreclr\\src\\vm\\siginfo.cpp Line: 1111\r\n    Image: D:\\coreclr\\bin\\Product\\Windows_NT.x64.Checked\\CoreRun.exe\r\n```","Url":"https://github.com/dotnet/corert/issues/7727","RelatedDescription":"Open issue \"CPAOT code fails under GCStress\" (#7727)"},{"Id":"484571391","IsPullRequest":true,"CreatedAt":"2019-08-23T16:05:44","Actor":"trylek","Number":"7726","RawContent":null,"Title":"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT","State":"closed","Body":"This change fixes about 180 ILC failures in Pri#1 tests.","Url":"https://github.com/dotnet/corert/pull/7726","RelatedDescription":"Closed or merged PR \"CPAOT: implement CORINFO_HELP_GETREFANY by throwing RequiresRuntimeJIT\" (#7726)"},{"Id":"483603606","IsPullRequest":true,"CreatedAt":"2019-08-23T12:51:02","Actor":"trylek","Number":"7718","RawContent":null,"Title":"CPAOT support for inlined PInvokes","State":"closed","Body":"This change adds previously missing implementation of two JIT\r\ninterface methods dealing with inlined PInvokes -\r\ngetAddressOfPinvokeTarget and pInvokeMarshalingRequired.\r\n\r\nFor the MethodRequiresMarshaling check I used the same technique\r\nJanK recommended before for IsManagedSequential - I added an extra\r\ninstrumentation to Crossgen and CPAOT to capture PInvoke methods\r\nand the result of the marshaling check; with this change there are\r\n0 differences in the Pri#1 CoreCLR test suite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7718","RelatedDescription":"Closed or merged PR \"CPAOT support for inlined PInvokes\" (#7718)"},{"Id":"484394876","IsPullRequest":true,"CreatedAt":"2019-08-23T09:46:56","Actor":"Dotnet-GitSync-Bot","Number":"7725","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7725","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7725)"},{"Id":"484111703","IsPullRequest":true,"CreatedAt":"2019-08-23T08:16:22","Actor":"Dotnet-GitSync-Bot","Number":"7721","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7721","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7721)"},{"Id":"484223047","IsPullRequest":true,"CreatedAt":"2019-08-23T08:15:52","Actor":"nattress","Number":"7722","RawContent":null,"Title":"Remove CoreCLR test time estimation","State":"closed","Body":"During XUnit wrapper generation, which can take a while on a slow machine, the CoreCLR test harness shows a countdown timer which starts at 5 minutes, polling for the sub-process to quit. `proc.poll()` is unreliable and we end up always waiting 5 minutes on Windows despite the wrappers building in about 30 seconds.\r\n\r\nThis should save us about 4 minutes in our CI (the CI detection also broke after Jenkins was retired).","Url":"https://github.com/dotnet/corert/pull/7722","RelatedDescription":"Closed or merged PR \"Remove CoreCLR test time estimation\" (#7722)"},{"Id":"484253378","IsPullRequest":true,"CreatedAt":"2019-08-22T22:56:48","Actor":"cshung","Number":"7724","RawContent":null,"Title":"Emit Fixup for local method import","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7724","RelatedDescription":"Open PR \"Emit Fixup for local method import\" (#7724)"},{"Id":"484241646","IsPullRequest":true,"CreatedAt":"2019-08-22T22:15:30","Actor":"nattress","Number":"7723","RawContent":null,"Title":"[WIP] Cherry pick MSIL sections into output images","State":"open","Body":"Emit CorHeader, metadata, IL method bodies using DependencyNodes so that RVAs can be adjusted more naturally through our reloc fixup mechanism. This has two main benefits:\r\n\r\n* Removes existing R2R tables and compiled code in cases where already\r\ncrossgen'd assemblies are re-compiled with Crossgen2.\r\n\r\n* Required for composite R2R images which will contain many component\r\nassembly Cor headers, metadata, MSIL sections.\r\n\r\nI am still addressing test failures with the CoreCLR test suite but the main changes are ready to review.\r\n\r\n@trylek It looks like RVA fields are the only thing which use the `SectionStartNode` mechanism added in https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76. We shouldn't need this now but I wanted to check with you before I pull it out in case you had plans for it.\r\n","Url":"https://github.com/dotnet/corert/pull/7723","RelatedDescription":"Open PR \"[WIP] Cherry pick MSIL sections into output images\" (#7723)"},{"Id":"483723262","IsPullRequest":true,"CreatedAt":"2019-08-22T11:28:33","Actor":"Dotnet-GitSync-Bot","Number":"7719","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7719","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7719)"},{"Id":"483818734","IsPullRequest":true,"CreatedAt":"2019-08-22T07:29:05","Actor":"MichalStrehovsky","Number":"7720","RawContent":null,"Title":"Add regression test for variant casts","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7720","RelatedDescription":"Open PR \"Add regression test for variant casts\" (#7720)"},{"Id":"482938018","IsPullRequest":true,"CreatedAt":"2019-08-21T15:45:35","Actor":"MichalStrehovsky","Number":"7712","RawContent":null,"Title":"Tweaks to ContainsTypeLayout","State":"closed","Body":"Fixes a bucket of CPAOT failures related to layout mismatch between the compiler and the runtime. We were incorrectly considering reference typed fields when determining whether type layout crosses version bubble.\r\n\r\nReference types are a single pointer wide and their layout doesn't matter. Switching between type being a reference type and valuetype is an IL-breaking change and as such it's okay to break R2R too.\r\n\r\nWhile I was at this, I saw a couple other bugs I fixed:\r\n* Value types were considered always within the version bubble, no matter what module defines them.\r\n* We were not looking at `NonVersionableAttribute` (needed to get e.g. `Nullable` fields right).\r\n* Type instantiation was taken into account but it's unrelated to layout.\r\n* Deleted the recursion protection. I assume this was only added because we were recursing into reference types.\r\n* Nit: `IsLiteral` and `HasRva` was redundant with the `IsStatic` check, and so was the `IsByRefLike` with `IsValueType`","Url":"https://github.com/dotnet/corert/pull/7712","RelatedDescription":"Closed or merged PR \"Tweaks to ContainsTypeLayout\" (#7712)"},{"Id":"483449139","IsPullRequest":true,"CreatedAt":"2019-08-21T15:45:03","Actor":"MichalStrehovsky","Number":"7717","RawContent":null,"Title":"Extend token remapping","State":"closed","Body":"I missed that `resolveToken` is not the only place where we record tokens in CPAOT. We also do it in other places.\r\n\r\nI moved the logic that does token remapping for synthetic method bodies to `HandleModuleToken` to have it in a central location and made sure that I got all the places that touch `.token` this time.\r\n\r\n`constructStringLiteral` might end up needing token remapping too at some point so for now I just put an assert in place so that we don't end up chasing wild tokens if/when that happens.\r\n\r\nUnrelated, I also fixed the Interlocked intrinsics not to be per instantiation (they don't need anything special for their `T`). ","Url":"https://github.com/dotnet/corert/pull/7717","RelatedDescription":"Closed or merged PR \"Extend token remapping\" (#7717)"},{"Id":"483130000","IsPullRequest":false,"CreatedAt":"2019-08-21T07:19:48","Actor":"F-Unction","Number":"7714","RawContent":null,"Title":"Can't Use System.CodeDom NuGet Pakeage","State":"closed","Body":"The release was successful, but when I run the program, a message box \"Unknown Hard Errorr\" pops up, the program displays\r\n\"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supp\r\nOrted on this platform.\r\n    At Microsoft.CSharp.CSharpCodeGenerator.FromFileBatch(CompilerParameters, Str\r\nIng[]) + 0x24\r\n    At Microsoft.CSharp.CSharpCodeGenerator.System.CodeDom.Compiler.ICodeCompiler\r\n.CompileAssemblyFromSourceBatch(CompilerParameters, String[]) + 0x1f\r\n    At CodeDomTest.Program.run(String) + 0x1af\r\n    At CodeDomTest.Program.Main(String[]) + 0x20\r\n    At CodeDomTest!<BaseAddress>+0x204e40\"\r\n(Sorry, I don't know English, so I may have some syntax errors when I use Google Translate)","Url":"https://github.com/dotnet/corert/issues/7714","RelatedDescription":"Closed issue \"Can't Use System.CodeDom NuGet Pakeage\" (#7714)"},{"Id":"483178981","IsPullRequest":true,"CreatedAt":"2019-08-21T03:23:51","Actor":"Lucina","Number":"7716","RawContent":null,"Title":"Add .vsconfig and script","State":"open","Body":"Added a .vsconfig file with dependencies for Visual Studio 2019 Preview (Windows 10 SDK, MSBuild with its dependencies, and `MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.22)` aka `Microsoft.VisualStudio.Component.VC.Tools.x86.x64`), minimum requirement for building with `buildscripts/build.cmd`.\r\nAdded a script at `buildscripts/install-reqs-vs2019preview.cmd` that depends on Visual Studio 2019 Preview and vs_installer.exe being installed at `%ProgramFiles(x86)%\\Microsoft Visual Studio`.\r\nCloses #7417 ","Url":"https://github.com/dotnet/corert/pull/7716","RelatedDescription":"Open PR \"Add .vsconfig and script\" (#7716)"},{"Id":"483142963","IsPullRequest":false,"CreatedAt":"2019-08-21T00:33:04","Actor":"sergiy-k","Number":"7715","RawContent":null,"Title":"ReadyToRun tests do not run in CI jobs on Linux","State":"open","Body":"We do have a job that attempts to run the ReadyToRun tests on Linux and MacOS but it does not execute any test cases. The output from such a test run looks like this:\r\n\r\nGRAND TOTAL: 0          0          0           0        0.000s (2.564s)","Url":"https://github.com/dotnet/corert/issues/7715","RelatedDescription":"Open issue \"ReadyToRun tests do not run in CI jobs on Linux\" (#7715)"},{"Id":"483039261","IsPullRequest":true,"CreatedAt":"2019-08-20T20:42:43","Actor":"Dotnet-GitSync-Bot","Number":"7713","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7713","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7713)"},{"Id":"482724353","IsPullRequest":true,"CreatedAt":"2019-08-20T19:08:08","Actor":"MichalStrehovsky","Number":"7709","RawContent":null,"Title":"Bind to S.P.CoreLib by default","State":"closed","Body":"When I was doing size investigations for CPAOT/.NET 5 two weeks ago, the reflection method body scanner was crashing when IL Linker decided to trim mscorlib. I worked around by just copying mscorlib back and brushed it off as a Linker bug (that I forgot to file).\r\n\r\nNow a similar issue was reported in #7679 which prompted me to look how CoreCLR does `Type.GetType` binding when type name is not assembly-qualified. Seems like we were trying to be more compatible with desktop CLR than CoreCLR.\r\n\r\nSince CoreCLR doesn't care about types in mscorlib that don't live in S.P.CoreLib, neither needs CPAOT.","Url":"https://github.com/dotnet/corert/pull/7709","RelatedDescription":"Closed or merged PR \"Bind to S.P.CoreLib by default\" (#7709)"},{"Id":"482910472","IsPullRequest":true,"CreatedAt":"2019-08-20T14:53:29","Actor":"Dotnet-GitSync-Bot","Number":"7711","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7711","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7711)"},{"Id":"482495794","IsPullRequest":true,"CreatedAt":"2019-08-20T10:41:03","Actor":"trylek","Number":"7707","RawContent":null,"Title":"Two small improvements in SuperIlc","State":"closed","Body":"1) Add support for another CPAOT vs. Crossgen instrumentation dealing\r\nwith the check MethodRequiresMarshaling used for inlining PInvokes.\r\n\r\n2) Include output file name extension in compiler log and response\r\nfile path - there are several Pri#1 tests that include an exe and\r\ndll pair with the same name. These had previously clashing response\r\nand log file names, causing weird race conditions in parallel build.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7707","RelatedDescription":"Closed or merged PR \"Two small improvements in SuperIlc\" (#7707)"},{"Id":"482737221","IsPullRequest":true,"CreatedAt":"2019-08-20T09:07:19","Actor":"MichalStrehovsky","Number":"7710","RawContent":null,"Title":"Validate types referenced from IL","State":"open","Body":"Fixes one of the CPAOT failure buckets for some of the negative generics tests (`Loader\\classloader\\generics\\Instantiation\\Negative\\param02`).\r\n\r\nWe should not be able to generate code for a generic type that is instantiated with a wrong arity or CoreCLR will hit internal errors.","Url":"https://github.com/dotnet/corert/pull/7710","RelatedDescription":"Open PR \"Validate types referenced from IL\" (#7710)"},{"Id":"482594333","IsPullRequest":true,"CreatedAt":"2019-08-20T02:19:33","Actor":"Dotnet-GitSync-Bot","Number":"7708","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @madmir","Url":"https://github.com/dotnet/corert/pull/7708","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7708)"},{"Id":"481593799","IsPullRequest":true,"CreatedAt":"2019-08-19T15:30:16","Actor":"MichalStrehovsky","Number":"7700","RawContent":null,"Title":"Implement getILIntrinsicImplementation and friends","State":"closed","Body":"This ports a couple handcrafted IL intrinsics from CoreCLR (some of which are required for correctness and some only for perf). See code around getILIntrinsicImplementation in CoreCLR's JitInterface.\r\n\r\nThis is needed to be able to compile an actually working 3.0 R2R CoreLib.\r\n\r\nI've used CoreRT's `ILProvider` instead of handcrafting buffers with IL bytes like crossgen does. It's more comfortable on the generation side and it also lets us share the provider for `Unsafe` intrinsics with what we already wrote for full AOT. But we need to fix up tokens in the generated IL in JitInterface...\r\n\r\nThe `FindGenericMethodArgTypeSpec` also exists in crossgen (under the same name).  It's part of the token rewriting business. It's kind of gross, but it works.","Url":"https://github.com/dotnet/corert/pull/7700","RelatedDescription":"Closed or merged PR \"Implement getILIntrinsicImplementation and friends\" (#7700)"},{"Id":"482089932","IsPullRequest":false,"CreatedAt":"2019-08-19T06:40:24","Actor":"maikebing","Number":"7706","RawContent":null,"Title":"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?","State":"closed","Body":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n","Url":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Closed issue \"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?\" (#7706)"},{"Id":"481966265","IsPullRequest":true,"CreatedAt":"2019-08-18T17:14:39","Actor":"jkotas","Number":"7704","RawContent":null,"Title":"Account for .NET Core 3.0 Preview 8 SDK changes","State":"closed","Body":"Fixes #7703","Url":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Closed or merged PR \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704)"},{"Id":"481901315","IsPullRequest":false,"CreatedAt":"2019-08-18T17:14:39","Actor":"SomeAnon42","Number":"7703","RawContent":null,"Title":"dotnet publish is broken by a preview 8 SDK change","State":"closed","Body":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)","Url":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703)"},{"Id":"481966894","IsPullRequest":true,"CreatedAt":"2019-08-18T09:51:55","Actor":"Dotnet-GitSync-Bot","Number":"7705","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7705)"},{"Id":"481877106","IsPullRequest":true,"CreatedAt":"2019-08-18T08:04:03","Actor":"Dotnet-GitSync-Bot","Number":"7702","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7702)"},{"Id":"481699348","IsPullRequest":true,"CreatedAt":"2019-08-16T19:09:38","Actor":"Dotnet-GitSync-Bot","Number":"7701","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7701","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7701)"},{"Id":"481213555","IsPullRequest":false,"CreatedAt":"2019-08-15T15:44:53","Actor":"developervariety","Number":"7699","RawContent":null,"Title":"Linux: No input file","State":"open","Body":"![ubuntu_iMCjVX1XZj](https://user-images.githubusercontent.com/47051828/63106951-f5e20f80-bf51-11e9-97aa-0f1d2e677b21.png)\r\n\r\nI compiled with WSL yesterday on Ubuntu 18.04, and when it finished compiling I installed the package. I got nothing really from it, just aborted a second later.","Url":"https://github.com/dotnet/corert/issues/7699","RelatedDescription":"Open issue \"Linux: No input file\" (#7699)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"484749883","IsPullRequest":true,"CreatedAt":"2019-08-24T01:01:14","Actor":"dotnet-maestro[bot]","Number":"3576","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3576","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3576)"},{"Id":"484701489","IsPullRequest":true,"CreatedAt":"2019-08-23T23:20:56","Actor":"wli3","Number":"3572","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3572","RelatedDescription":"Closed or merged PR \"Correct branding\" (#3572)"},{"Id":"484742881","IsPullRequest":true,"CreatedAt":"2019-08-23T23:03:41","Actor":"livarcocc","Number":"3575","RawContent":null,"Title":"Skip tests in official builds. We have no reason to run them again si…","State":"open","Body":"…nce they already ran on CI. This should speed up builds out of the sdk repo.","Url":"https://github.com/dotnet/sdk/pull/3575","RelatedDescription":"Open PR \"Skip tests in official builds. We have no reason to run them again si…\" (#3575)"},{"Id":"484739215","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:47","Actor":"dsplaisted","Number":"3574","RawContent":null,"Title":"Update a test to skip running for target frameworks not supported by current OS","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3574","RelatedDescription":"Open PR \"Update a test to skip running for target frameworks not supported by current OS\" (#3574)"},{"Id":"484673467","IsPullRequest":true,"CreatedAt":"2019-08-23T22:14:39","Actor":"JohnTortugo","Number":"3570","RawContent":null,"Title":"Don't validate signature for resources files","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/7569\r\n\r\nIndependent of the outcome of the current signing issues I believe these files aren't required to be signed.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3570","RelatedDescription":"Closed or merged PR \"Don't validate signature for resources files\" (#3570)"},{"Id":"484721294","IsPullRequest":true,"CreatedAt":"2019-08-23T22:01:01","Actor":"dsplaisted","Number":"3573","RawContent":null,"Title":"Always gather logs","State":"closed","Body":"Even if build succeeded, so we can debug things like signing failures.","Url":"https://github.com/dotnet/sdk/pull/3573","RelatedDescription":"Closed or merged PR \"Always gather logs\" (#3573)"},{"Id":"484693602","IsPullRequest":true,"CreatedAt":"2019-08-23T21:54:37","Actor":"dotnet-maestro[bot]","Number":"3571","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c23412-2e21-4d69-a886-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:67c23412-2e21-4d69-a886-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3571","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#3571)"},{"Id":"484653224","IsPullRequest":true,"CreatedAt":"2019-08-23T18:16:57","Actor":"riarenas","Number":"3569","RawContent":null,"Title":"Pass PublishUsingPipelines parameter to publish-build-assets template","State":"open","Body":"**Description**\r\n\r\nhttps://github.com/dotnet/core-eng/issues/7561\r\nWithout the property, the build gets its channel assigned as soon as it publishes to BAR, and may trigger dependency updates before the packages are available in the feeds.\r\n\r\nInternal test build of the change: https://dev.azure.com/dnceng/internal/_build/results?buildId=322295&view=results\r\n\r\n\r\n**Customer Impact**\r\nInfra-structure change.\r\n\r\n**Regression?**\r\nNo.\r\n\r\n**Risk**\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3569","RelatedDescription":"Open PR \"Pass PublishUsingPipelines parameter to publish-build-assets template\" (#3569)"},{"Id":"484345588","IsPullRequest":false,"CreatedAt":"2019-08-23T17:03:32","Actor":"Sodoshi","Number":"3568","RawContent":null,"Title":"Using aspnetcore3.0 in WindowsDesktop SDK","State":"closed","Body":"Because of the changes to the HostBuilder in aspnetcore3 I want to update my embedded Kestrel, but if I switch to the WindowsDesktop SDK its not available, only aspnetcore 2.2. Is there any way to reference aspnetcore 3? (I'm using Kestrel as a TCP server in my Windows forms app)","Url":"https://github.com/dotnet/sdk/issues/3568","RelatedDescription":"Closed issue \"Using aspnetcore3.0 in WindowsDesktop SDK\" (#3568)"},{"Id":"483670137","IsPullRequest":true,"CreatedAt":"2019-08-23T03:41:57","Actor":"livarcocc","Number":"3559","RawContent":null,"Title":"Updating nuget version and adding it to Version.Details.xml for DARC updates.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3559","RelatedDescription":"Closed or merged PR \"Updating nuget version and adding it to Version.Details.xml for DARC updates.\" (#3559)"},{"Id":"484269593","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:18","Actor":"dotnet-bot","Number":"3567","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3567","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3567)"},{"Id":"484269575","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:11","Actor":"dotnet-bot","Number":"3566","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3566","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3566)"},{"Id":"484269561","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:04","Actor":"dotnet-bot","Number":"3565","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3565","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3565)"},{"Id":"484269532","IsPullRequest":true,"CreatedAt":"2019-08-23T00:05:56","Actor":"dotnet-bot","Number":"3564","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3564","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3564)"},{"Id":"484159126","IsPullRequest":false,"CreatedAt":"2019-08-22T19:00:07","Actor":"kapilepatel","Number":"3563","RawContent":null,"Title":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13","State":"open","Body":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\r\n\r\nSolved the issue by uninstalling all .NET Core versions and fresh install of .NET Core SDK Version 2.2.107\r\nFind all versions here\r\nhttps://dotnet.microsoft.com/download/dotnet-core/2.2","Url":"https://github.com/dotnet/sdk/issues/3563","RelatedDescription":"Open issue \".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\" (#3563)"},{"Id":"483996121","IsPullRequest":true,"CreatedAt":"2019-08-22T13:32:39","Actor":"mmitche","Number":"3562","RawContent":null,"Title":"[release/3.0] Rebrand to rc1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3562","RelatedDescription":"Closed or merged PR \"[release/3.0] Rebrand to rc1\" (#3562)"},{"Id":"483019108","IsPullRequest":true,"CreatedAt":"2019-08-22T13:32:32","Actor":"livarcocc","Number":"3552","RawContent":null,"Title":"Update the branding on release/3.0.1xx to rc1.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3552","RelatedDescription":"Closed or merged PR \"Update the branding on release/3.0.1xx to rc1.\" (#3552)"},{"Id":"483952292","IsPullRequest":true,"CreatedAt":"2019-08-22T12:02:24","Actor":"dotnet-maestro[bot]","Number":"3561","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3561","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3561)"},{"Id":"482825643","IsPullRequest":false,"CreatedAt":"2019-08-22T07:20:17","Actor":"largwid","Number":"3551","RawContent":null,"Title":"$(IntermediateOutputPath) and $(TargetName) evaluates blank while setting up a PropertyGroup in CSproj SDK-format","State":"closed","Body":"**Visual Studio Version**: v15.9.15\r\n\r\n**Summary**:\r\nTrying to migrate csproj's to the New SKD project-format, in a complex .NET solution with multiple target files called during the build. The targets calling $(IntermediateOutputPath) and $(TargetName) works, but after migration the macro returns empty\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In Csproj file add a PropertyGroup with the following:\r\n\r\n```\r\n <PropertyGroup>\r\n    <ProjectIntermediateOutput>$(IntermediateOutputPath)</ProjectIntermediateOutput>\r\n </PropertyGroup>\r\n\r\n<Target Name=\"MyProp\" AfterTarget=\"CoreCompile\">\r\n   <Message Text=\"Project intermediate path : $(ProjectIntermediateOutput)\" />\r\n<Target\r\n\r\n```\r\nThe run msbuild on project(solution). \r\n \r\n\r\nIn the build output I expected to see a line:\r\n`\r\nProject intermediate path : obj\\debug\\net472\r\n`\r\nbut gets:\r\n`\r\nProject intermediate path :\r\n`\r\n\r\nIf I create new projects via the \"New Project\" wizard I get the same behavior in both Old-style projects and .NET SDK projects.\r\n\r\nLooking forward to your inputs.\r\n","Url":"https://github.com/dotnet/sdk/issues/3551","RelatedDescription":"Closed issue \"$(IntermediateOutputPath) and $(TargetName) evaluates blank while setting up a PropertyGroup in CSproj SDK-format\" (#3551)"},{"Id":"483123322","IsPullRequest":true,"CreatedAt":"2019-08-22T05:23:28","Actor":"dotnet-maestro[bot]","Number":"3554","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190821.20\r\n- **Date Produced**: 8/22/2019 2:44 AM\r\n- **Commit**: 33c773a5c7602e599053fdbb3a12b7ecfda27e2e\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19421-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3554","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3554)"},{"Id":"483687538","IsPullRequest":true,"CreatedAt":"2019-08-22T02:02:13","Actor":"dsplaisted","Number":"3560","RawContent":null,"Title":"Support more test config options","State":"closed","Body":"#### Description\r\nAdd more support for specifying tests to run via test config file\r\n\r\n#### Customer Impact\r\nNo direct customer impact, this is a test infrastructure change\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nLow\r\n\r\nAdds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```","Url":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Closed or merged PR \"Support more test config options\" (#3560)"},{"Id":"483627407","IsPullRequest":true,"CreatedAt":"2019-08-21T23:40:15","Actor":"nguerrera","Number":"3558","RawContent":null,"Title":"Merge 3.0.1xx to 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3558","RelatedDescription":"Closed or merged PR \"Merge 3.0.1xx to 3.1.1xx\" (#3558)"},{"Id":"483477457","IsPullRequest":true,"CreatedAt":"2019-08-21T16:59:23","Actor":"dotnet-maestro[bot]","Number":"3557","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b934a83-c671-49a8-a874-08d7219800a1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190821.1\r\n- **Date Produced**: 8/21/2019 12:53 PM\r\n- **Commit**: 7aa107d818fe87e627154c0331d6de5d47f39a45\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19421.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19421.1\r\n\r\n[marker]: <> (End:2b934a83-c671-49a8-a874-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3557","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/arcade\" (#3557)"},{"Id":"483378528","IsPullRequest":true,"CreatedAt":"2019-08-21T14:03:53","Actor":"dotnet-maestro[bot]","Number":"3555","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190820.8\r\n- **Date Produced**: 8/21/2019 1:49 AM\r\n- **Commit**: fa168dd690798a683ef0d1e65d60ce5d6918d987\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19420.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19420.8\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3555","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3555)"},{"Id":"483394306","IsPullRequest":true,"CreatedAt":"2019-08-21T12:35:55","Actor":"dotnet-maestro[bot]","Number":"3556","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.11\r\n- **Date Produced**: 8/23/2019 10:56 PM\r\n- **Commit**: abecfcd748e6b8850e1111184bf34c93e9277f90\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19423-11\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3556","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3556)"},{"Id":"482818597","IsPullRequest":true,"CreatedAt":"2019-08-20T13:33:07","Actor":"dotnet-maestro[bot]","Number":"3550","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190819.12\r\n- **Date Produced**: 8/19/2019 5:30 PM\r\n- **Commit**: 10b2260aeed5f07582bf8d8dcd4221a447b171c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19419.12\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19419.12\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3550","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3550)"},{"Id":"483046802","IsPullRequest":false,"CreatedAt":"2019-08-20T00:50:06","Actor":"Varorbc","Number":"3553","RawContent":null,"Title":"build and generate package fail","State":"open","Body":"**Version Used**: 3.0.100-preview8-013656\r\n\r\n###  Question 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: build successful\r\n\r\n**Actual Behavior**:`C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(234,5): error NETSDK1005: 资产文件“C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\obj\\project.assets.json”没有“.NETFramework,Version=v4.7.2”的目标。确保已运行还原，且“net472”已包含在项目的 TargetFrameworks 中。 [C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj]`\r\n\r\nPS: build by Visual Studio 16.2.2 is successful\r\n\r\n###  Question 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452;net472</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: generate package successful\r\n\r\n**Actual Behavior**:build successful but no generate package\r\n\r\nPS: build and generate package  by Visual Studio 16.2.2 is successful\r\n","Url":"https://github.com/dotnet/sdk/issues/3553","RelatedDescription":"Open issue \"build and generate package fail\" (#3553)"},{"Id":"482540867","IsPullRequest":false,"CreatedAt":"2019-08-19T21:38:27","Actor":"rainersigwald","Number":"3549","RawContent":null,"Title":"End-to-end tests for resx scenarios","State":"open","Body":"There are a variety of resource scenarios that would be well-suited to having small end-to-end tests that build a resource-using project and run it to validate that the resource is handled correctly in the build and available at runtime.\r\n\r\nRelated MSBuild PRs that should be mined for test data: microsoft/msbuild#4607, microsoft/msbuild#4638, microsoft/msbuild#4588, microsoft/msbuild#4637.","Url":"https://github.com/dotnet/sdk/issues/3549","RelatedDescription":"Open issue \"End-to-end tests for resx scenarios\" (#3549)"},{"Id":"482502721","IsPullRequest":false,"CreatedAt":"2019-08-19T20:09:47","Actor":"nguerrera","Number":"3548","RawContent":null,"Title":"Linker cannot remove user non-framework, non-package references from deps file","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3548","RelatedDescription":"Open issue \"Linker cannot remove user non-framework, non-package references from deps file\" (#3548)"},{"Id":"482502349","IsPullRequest":false,"CreatedAt":"2019-08-19T20:08:56","Actor":"nguerrera","Number":"3547","RawContent":null,"Title":"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3547","RelatedDescription":"Open issue \"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime\" (#3547)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164890935089668099","CreatedAt":"2019-08-23T13:23:36+00:00","UserScreenname":"dotnet","Text":"#OnDotnet @briacht joins @runfaster2000 to talk about training models with ML .NET, AutoML, the ML .NET CLI, and mo… https://t.co/DMmb5OFxUx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":20,"RawContent":null},{"Id":"1164583310900658176","CreatedAt":"2019-08-22T17:01:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1164249816983068673","CreatedAt":"2019-08-21T18:56:01+00:00","UserScreenname":"dotnet","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft wil… https://t.co/sf9vOIaakw","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":209,"FavoriteCount":94,"RawContent":null},{"Id":"1163857322763935745","CreatedAt":"2019-08-20T16:56:23+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":6,"RawContent":null},{"Id":"1162097146985795584","CreatedAt":"2019-08-15T20:22:05+00:00","UserScreenname":"dotnet","Text":"You know .NET is open source, right? https://t.co/JLsyVeSFfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":22,"RawContent":null},{"Id":"1162046045024423936","CreatedAt":"2019-08-15T16:59:01+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null},{"Id":"1161728795260252160","CreatedAt":"2019-08-14T19:58:23+00:00","UserScreenname":"dotnet","Text":"Request for comment: Consolidating .NET GitHub repos https://t.co/funhIQtZbK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":122,"FavoriteCount":58,"RawContent":null},{"Id":"1161724718740721664","CreatedAt":"2019-08-14T19:42:11+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog https://t.co/VmcacDaK7I","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":43,"RawContent":null},{"Id":"1161408520308158464","CreatedAt":"2019-08-13T22:45:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":1,"RawContent":null},{"Id":"1161356948542935040","CreatedAt":"2019-08-13T19:20:48+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8 https://t.co/6OjVnfl9Vz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":77,"FavoriteCount":51,"RawContent":null}]}},"RunOn":"2019-08-25T05:30:34.7103079Z","RunDurationInMilliseconds":12875}