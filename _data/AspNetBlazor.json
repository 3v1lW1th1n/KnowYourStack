{"Data":{"GitHubIssues":{"Issues":[{"Id":"352718942","IsPullRequest":true,"CreatedAt":"2018-08-23T00:46:49","Actor":"rynowak","Number":"1345","RawContent":null,"Title":"Move ITagHelper to another assembly","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1345","RelatedDescription":"Closed or merged PR \"Move ITagHelper to another assembly\" (#1345)"},{"Id":"353098704","IsPullRequest":false,"CreatedAt":"2018-08-22T19:50:03","Actor":"strangesquark","Number":"1350","RawContent":null,"Title":"Adding / Removing element via cshtml prevents click event from firing","State":"open","Body":"If you have an if statement that updates a variable that is used to determine if an element should be rendered or not, and you update this variable in an onblur handler then the onclick handler of a button will not fire if the focus is on the element that has the onblur handler when you click the button.\r\n\r\nFor example, if you create a new Blazor project and put the code in the attached file in the Counter.cshtml file you can see the issue. Just click in the input, then click the submit button. The onblur event of the input fires, but the onclick event of the button does not.\r\n\r\nIf you remove the lines that render / prevents rendering (called out in the attached file) from the code, then both events fire as expected:\r\n\r\n[CodeToReplicateEventIssue.txt](https://github.com/aspnet/Blazor/files/2311808/CodeToReplicateEventIssue.txt)\r\n ","Url":"https://github.com/aspnet/Blazor/issues/1350","RelatedDescription":"Open issue \"Adding / Removing element via cshtml prevents click event from firing\" (#1350)"},{"Id":"353064742","IsPullRequest":true,"CreatedAt":"2018-08-22T18:09:21","Actor":"chris-ray","Number":"1349","RawContent":null,"Title":"fix #1200: include credentials when fetching blazor.boot.json to enable windows auth","State":"open","Body":"Included the suggested change by @radek7210 in issue #1200.\r\n - Resolves problem in both Client-side and Server-side\r\n - I could only reproduce this issue locally on an AD domain-connected computer and on an Azure App Service behind Azure AD authentication\r\n\r\nAddresses #1200","Url":"https://github.com/aspnet/Blazor/pull/1349","RelatedDescription":"Open PR \"fix #1200: include credentials when fetching blazor.boot.json to enable windows auth\" (#1349)"},{"Id":"353011889","IsPullRequest":false,"CreatedAt":"2018-08-22T15:40:19","Actor":"JacksonHamner","Number":"1348","RawContent":null,"Title":"Template fails to run unless global.json is deleted","State":"open","Body":"Following the Getting Started Guide: https://blazor.net/docs/get-started.html\r\n\r\nBlazor Language Services Version: \r\n![image](https://user-images.githubusercontent.com/17052532/44473115-76428e80-a5e4-11e8-8505-97e92630c7a0.png)\r\n\r\ndotnet version: \r\n![image](https://user-images.githubusercontent.com/17052532/44473197-9eca8880-a5e4-11e8-92e9-dab0fa2ee14b.png)\r\n\r\nCreating a new blazor project, the solution successfully builds but when run (Ctrl+F5) the ASP.NET Core Web Server outputs this error:\r\n ![image](https://user-images.githubusercontent.com/17052532/44473384-084a9700-a5e5-11e8-8cc8-1eaa9168b948.png)\r\n\r\nand the page itself shows a 502 error:\r\n![image](https://user-images.githubusercontent.com/17052532/44473448-231d0b80-a5e5-11e8-9b9c-b66483d41bef.png)\r\n\r\nSo far the only way to solve this for me was to delete the global.json file that comes with the template. Other than deleting the global.json file no other changes were made \r\n\r\nI did not see this mentioned in any of the other issues, so please let me know if this is a known issue or if i've got something configured incorrectly or if there is a better way to work around this 502 issue\r\n\r\nThanks!\r\n","Url":"https://github.com/aspnet/Blazor/issues/1348","RelatedDescription":"Open issue \"Template fails to run unless global.json is deleted\" (#1348)"},{"Id":"352684839","IsPullRequest":true,"CreatedAt":"2018-08-22T15:21:47","Actor":"rynowak","Number":"1343","RawContent":null,"Title":"Add privateassets=all to Blazor.Build usages","State":"closed","Body":"We recommend using this package with PrivateAssets=all everywhere to\r\nmake sure that the MSBuild files brought in by this package aren't\r\napplied to transitively.\r\n\r\nWhen that happens, the Blazor.Build MSBuild files will take over the\r\nRazor functionality for other projects, which breaks MVC's view\r\ncompilation functionality.\r\n\r\nThis is part of a fix for #1216.","Url":"https://github.com/aspnet/Blazor/pull/1343","RelatedDescription":"Closed or merged PR \"Add privateassets=all to Blazor.Build usages\" (#1343)"},{"Id":"352990423","IsPullRequest":false,"CreatedAt":"2018-08-22T14:52:02","Actor":"AnkitSharma-007","Number":"1347","RawContent":null,"Title":"dbContext getting updated without post while using EF Core with server-side Blazor","State":"open","Body":"I tried creating a SPA using EF Core with Server-side Blazor. I put a form in a modal pop up and implement a CRUD with it. \r\nWhen i try editing a record in the form and close the modal pop up with out posting the form (not saving the record), it updates the dbContext object also. This affects the \"fetch\" part of the app also and shows the edited record on the UI. \r\nAlthough this does not update my database as post action is not executed. But this creates a data mismatch between UI and database. \r\nIf i try to use the same code with traditional client-side Blazor app, i am not facing this issue and it work as expected.\r\n\r\nCan anyone please verify this and tell if this is an expected behavior or an issue?\r\n\r\nApplication Code: https://github.com/AnkitSharma-007/Blazor-Server-Side-SPA\r\n\r\nRelated Article link to create the DB and sample app :  http://ankitsharmablogs.com/single-page-application-using-server-side-blazor/\r\n","Url":"https://github.com/aspnet/Blazor/issues/1347","RelatedDescription":"Open issue \"dbContext getting updated without post while using EF Core with server-side Blazor\" (#1347)"},{"Id":"352606742","IsPullRequest":false,"CreatedAt":"2018-08-22T14:21:10","Actor":"PhilPJL","Number":"1342","RawContent":null,"Title":"Unable to run blazor app - get 502.5 error","State":"closed","Body":"VS 15.8.1\r\nBlazor 0.5.1\r\n\r\nCreate new blazor app.\r\nCtrl-F5 run using IIS express/Edge\r\n\r\n![image](https://user-images.githubusercontent.com/271656/44413218-b82af080-a562-11e8-8993-ebf5d5000c0f.png)\r\n\r\nI'm pretty sure I've configured IIS correctly as specified at https://go.microsoft.com/fwlink/?LinkID=808681.\r\n\r\nThe event log says\r\n\r\n> Application 'MACHINE/WEBROOT/APPHOST/WEBAPPLICATION2' with physical root 'C:\\Users\\xxxx\\source\\repos\\WebApplication2\\WebApplication2\\' failed to start process with commandline 'c:\\program files (x86)\\microsoft visual studio\\2017\\enterprise\\common7\\ide\\extensions\\microsoft\\web tools\\projectsystem\\VSIISExeLauncher.exe -argFile \"C:\\Users\\xxxx\\AppData\\Local\\Temp\\tmp2D5D.tmp\"', ErrorCode = '0x80004005 : 0.\r\n\r\nAny ideas?","Url":"https://github.com/aspnet/Blazor/issues/1342","RelatedDescription":"Closed issue \"Unable to run blazor app - get 502.5 error\" (#1342)"},{"Id":"352813946","IsPullRequest":false,"CreatedAt":"2018-08-22T14:20:52","Actor":"w8w8w8","Number":"1346","RawContent":null,"Title":"after my chrome run 1 hour, crash","State":"closed","Body":"in class , I Declare 1000 variables.\r\ncode like this:\r\n\r\n> public Flowsheet() {\r\n>             a = 1.00002d;\r\n>             b = 2.6d;\r\n>             c = 0;\r\n> \t    ......\r\n> \t    .....\r\n>         }\r\n>         public void Run()\r\n>         {\r\n>             CALL(ref a, ref b);\r\n>         }\r\n>        private double a;\r\n>        public double A { get { return a; } set { a = value; } }\r\n>        private double b;\r\n>        public double B { get { return b; } set { b = value; } }\r\n>         private double c;\r\n>         public double C { get { return c; } set { c = value; } }\r\n> \t\t.....\r\n>         public void CALL(ref double a, ref double b, .......) {\r\n>             double c = Math.Log(a / b);\r\n> \t    ......\r\n>         }\r\n\r\nthen I use  js setInterVal() Execute **Run()**, and  get 1000 variable's value, after 1 hour , my chrome crash.\r\n\r\nI have no idea!\r\n![5](https://user-images.githubusercontent.com/4744039/44448842-0a314c00-a61f-11e8-9de5-41b58b631945.png)","Url":"https://github.com/aspnet/Blazor/issues/1346","RelatedDescription":"Closed issue \"after my chrome run 1 hour, crash\" (#1346)"},{"Id":"352571885","IsPullRequest":true,"CreatedAt":"2018-08-22T14:18:24","Actor":"SteveSandersonMS","Number":"1341","RawContent":null,"Title":"Add Blazor.temporaryOnConnectionClose to fix #1339","State":"closed","Body":"This API will be removed once we implement proper connection management (reconnects, etc.)","Url":"https://github.com/aspnet/Blazor/pull/1341","RelatedDescription":"Closed or merged PR \"Add Blazor.temporaryOnConnectionClose to fix #1339\" (#1341)"},{"Id":"352557824","IsPullRequest":true,"CreatedAt":"2018-08-22T13:52:36","Actor":"SteveSandersonMS","Number":"1340","RawContent":null,"Title":"In RenderBatchWriter, deduplicate strings only when safe to do so","State":"closed","Body":"We allow deduplication of HTML element and attribute names, plus whitespace text nodes / attribute values.\r\n\r\nThis is a partial implementation of #1330. It's the only part we plan to include in 0.6.0; others will come later.","Url":"https://github.com/aspnet/Blazor/pull/1340","RelatedDescription":"Closed or merged PR \"In RenderBatchWriter, deduplicate strings only when safe to do so\" (#1340)"},{"Id":"352691433","IsPullRequest":true,"CreatedAt":"2018-08-21T22:37:06","Actor":"natemcmaster","Number":"1344","RawContent":null,"Title":"Strong name Blazor assemblies","State":"closed","Body":"It appears disabling the strong name was unintentional.","Url":"https://github.com/aspnet/Blazor/pull/1344","RelatedDescription":"Closed or merged PR \"Strong name Blazor assemblies\" (#1344)"},{"Id":"352556202","IsPullRequest":false,"CreatedAt":"2018-08-21T14:18:35","Actor":"kant2002","Number":"1338","RawContent":null,"Title":"Encoding 1252 data could not be found","State":"closed","Body":"Not sure that this is Blazor issue and not issue of Mono.\r\n```\r\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\r\nvar encoding = Encoding.GetEncoding(1252);\r\n```\r\n\r\nThis is produces \r\n```\r\nSystem.NotSupportedException: Encoding 1252 data could not be found. Make sure you have correct international codeset assembly installed and enabled.\r\n at System.Text.Encoding.GetEncoding (System.Int32 codepage)\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1338","RelatedDescription":"Closed issue \"Encoding 1252 data could not be found\" (#1338)"},{"Id":"352556958","IsPullRequest":false,"CreatedAt":"2018-08-21T14:17:25","Actor":"cores-system","Number":"1339","RawContent":null,"Title":"Subscribe to the onclose event via JS","State":"closed","Body":"Hello, I want to subscribe to the onclose event via JS. \r\n\r\n**Here is an example of what I need**: \r\nhttps://youtu.be/11I4lK00KeI\r\n\r\nHow do I do this without changing \"/_framework/blazor.server.js\" ?\r\n\r\n---\r\n**Blazor Server side**: 0.5.1\r\n/_framework/blazor.server.js","Url":"https://github.com/aspnet/Blazor/issues/1339","RelatedDescription":"Closed issue \"Subscribe to the onclose event via JS\" (#1339)"},{"Id":"352528716","IsPullRequest":false,"CreatedAt":"2018-08-21T13:18:03","Actor":"cores-system","Number":"1337","RawContent":null,"Title":"connectionState to Blazor Server side","State":"closed","Body":"Hello, how can I get the connection status?\r\n\r\n**Blazor Server side**: 0.5.1\r\n/_framework/blazor.server.js\r\n\r\n```\r\nthis.connectionState\r\nVM1614:1 Uncaught ReferenceError: connectionState is not defined\r\n    at <anonymous>:1:1\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1337","RelatedDescription":"Closed issue \"connectionState to Blazor Server side\" (#1337)"},{"Id":"352361213","IsPullRequest":false,"CreatedAt":"2018-08-21T13:16:46","Actor":"FIVIL","Number":"1336","RawContent":null,"Title":"Performance","State":"closed","Body":"Hi, \r\nFirst i should mention that blazor is preety awsome and in some aspects is much more convenient than other client side frame work i mean doing\r\n      `if(a){\r\n           <p>true</p>\r\n        }\r\n        else{\r\n              <p>false</p>\r\n       }`\r\nis simpler than *ngIf or the react way tnx to razor, and javascript intrope is really great and else\r\nBut in terms of performance it really is 'i have to say' bad\r\nIt takes 8 to 11 sec for first time loading even in published project in production mode and 3 to 5 for next reload which most of the time happens instantly in angular or react, also in terms of changing component it still experience huge performance gap, and also it consume lots of resources (cpu) but as i understand wasm should outpreforme js, so i was wondering why it is so weak in performance\r\nIs it because it still is in experimental phase and we should expect huuuuuuuuge performance gain by the time of final realese or not?\r\nTnx","Url":"https://github.com/aspnet/Blazor/issues/1336","RelatedDescription":"Closed issue \"Performance\" (#1336)"},{"Id":"351883983","IsPullRequest":false,"CreatedAt":"2018-08-21T13:13:31","Actor":"moataz1991","Number":"1332","RawContent":null,"Title":"how to run Blazor in asm.js","State":"closed","Body":"Hello\r\nhow to run Blazor App in asm.js , as the issue title  says :)\r\n\r\nwhats the main difference between  asm.js and webassembly ?","Url":"https://github.com/aspnet/Blazor/issues/1332","RelatedDescription":"Closed issue \"how to run Blazor in asm.js\" (#1332)"},{"Id":"351557844","IsPullRequest":true,"CreatedAt":"2018-08-21T13:08:40","Actor":"SteveSandersonMS","Number":"1329","RawContent":null,"Title":"Eliminate temporary MemoryStream buffers used during RenderBatch serialization","State":"closed","Body":"Fixes #1132, in the sense that we don't need any pool for temporary buffers any more, because there are no more temporary buffers.\r\n\r\nWhile implementing #1321, it was necessary to add even more temporary `MemoryStream` and `byte[]` arrays to support `RenderBatch` serialization. It's potentially possible to mitigate this by using some combination of `ArrayPool` and `RecyclableMemoryStream`, but that solution adds complexity and dependencies on further external libraries.\r\n\r\nFortunately it turns out we can bypass all of that, eliminate all the temporary buffers, and stream directly to the underlying MessagePack output buffer. All that's really needed is:\r\n\r\n 1. To understand [how binary blobs are represented in the MessagePack spec](https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family) (it's straightforwards: it's a length-prefixed array)\r\n 2. To encapsulate that knowledge in a `Stream` subclass so that `RenderBatchWriter` can pipe its output into it.\r\n\r\nStep 2 is equivalent to piping to a `MemoryStream`, then calling `MessagePackBinary.WriteBytes(ref buffer, offset, memoryStream.GetBuffer(), memoryStream.Length)`, but without needing the temporary storage.","Url":"https://github.com/aspnet/Blazor/pull/1329","RelatedDescription":"Closed or merged PR \"Eliminate temporary MemoryStream buffers used during RenderBatch serialization\" (#1329)"},{"Id":"351934689","IsPullRequest":false,"CreatedAt":"2018-08-20T20:46:46","Actor":"conficient","Number":"1333","RawContent":null,"Title":"ASP.NET Core Blazor Language Service release notes still point to 0.1","State":"closed","Body":"The **Release Notes** link (in the [manifest](https://github.com/aspnet/Blazor/blob/master/tooling/Microsoft.VisualStudio.BlazorExtension/source.extension.vsixmanifest)) points to \r\n\r\nhttps://go.microsoft.com/fwlink/?linkid=870448 \r\n\r\nwhich redirects to \r\n\r\nhttps://github.com/aspnet/blazor/releases/tag/0.1.0\r\n\r\nExpected: https://github.com/aspnet/Blazor/releases/tag/0.5.1\r\n","Url":"https://github.com/aspnet/Blazor/issues/1333","RelatedDescription":"Closed issue \"ASP.NET Core Blazor Language Service release notes still point to 0.1\" (#1333)"},{"Id":"351858011","IsPullRequest":false,"CreatedAt":"2018-08-20T18:44:45","Actor":"AlanParr","Number":"1331","RawContent":null,"Title":"NullReference exception on HTTP call","State":"closed","Body":"### Title\r\nNullReferenceException from DotNetDispatcher when calling Azure Functions from Blazor application.\r\n\r\n### Functional impact\r\nPage locks up.\r\n\r\n### Minimal repro steps\r\nMinimal reproduction at **https://github.com/AlanParr/bladiusrepro**\r\n * Open the repro project.\r\n * Start the Bladius.Functions project.\r\n * Start the Bladius project.\r\n\r\nIn JobService.cs, code that calls Azure Function causes the issue, returning static data instead does not, so it is related to the Azure Function call somehow.\r\n\r\n### Expected result\r\nPage calls Azure Function and displays resulting data.\r\n\r\n### Actual result\r\nNullReferenceException appears in console:\r\n\r\n```\r\nError: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at Microsoft.JSInterop.DotNetDispatcher.InvokeSynchronously (System.String assemblyName, System.String methodIdentifier, System.Object targetInstance, System.String argsJson) <0x1cf0590 + 0x001c4> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n  at Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (System.String callId, System.String assemblyName, System.String methodIdentifier, System.Int64 dotNetObjectId, System.String argsJson) <0x1cf0148 + 0x00084> in <ff5eb2f6181945399a105e92b16da25a>:0 \r\n```\r\n\r\nBrowser prompts to Stop the page, clicking results in the following appearing in the console:\r\n```\r\nError: Script terminated by timeout at:\r\nwasm-function[416]@http://localhost:62882/_framework/wasm/mono.js:172839:1\r\nwasm-function[3760]@http://localhost:62882/_framework/wasm/mono.js:999114:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:245338:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240702:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[739]@http://localhost:62882/_framework/wasm/mono.js:240135:1\r\nwasm-function[3989]@http://localhost:62882/_framework/wasm/mono.js:1042224:1\r\nwasm-function[4918]@http://localhost:62882/_framework/wasm/mono.js:1203213:1\r\nwasm-function[1690]@http://localhost:62882/_framework/wasm/mono.js:478541:1\r\nwasm-function[487]@http://localhost:62882/_framework/wasm/mono.js:180556:1\r\nwasm-function[4484]@http://localhost:62882/_framework/wasm/mono.js:1125735:1\r\nwasm-function[4487]@http://localhost:62882/_framework/wasm/mono.js:1126890:1\r\nwasm-function[3228]@http://localhost:62882/_framework/wasm/mono.js:814407:1\r\nwasm-function[3796]@http://localhost:62882/_framework/wasm/mono.js:1006104:1\r\nModule._mono_background_exec@http://localhost:62882/_framework/wasm/mono.js:1:173240\r\npump_message@http://localhost:62882/_framework/wasm/mono.js:1:149472\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1331","RelatedDescription":"Closed issue \"NullReference exception on HTTP call\" (#1331)"},{"Id":"352186057","IsPullRequest":false,"CreatedAt":"2018-08-20T18:18:46","Actor":"davidsdearaujo","Number":"1334","RawContent":null,"Title":"MarkupString not render component","State":"closed","Body":"**MarkupString** render all html elements, but not render a component element","Url":"https://github.com/aspnet/Blazor/issues/1334","RelatedDescription":"Closed issue \"MarkupString not render component\" (#1334)"},{"Id":"352216253","IsPullRequest":false,"CreatedAt":"2018-08-20T17:10:21","Actor":"cores-system","Number":"1335","RawContent":null,"Title":"event to \"Websocket closed\"","State":"closed","Body":"Hello, how can I subscribe to an event?\r\n`Error: Connection disconnected with error 'Error: Websocket closed with status code: 1006 ()'.`\r\n\r\nI would like to display a notification to the user during a disconnect.","Url":"https://github.com/aspnet/Blazor/issues/1335","RelatedDescription":"Closed issue \"event to \"Websocket closed\"\" (#1335)"},{"Id":"351150636","IsPullRequest":true,"CreatedAt":"2018-08-17T16:48:35","Actor":"SteveSandersonMS","Number":"1321","RawContent":null,"Title":"Server rendering: shrink traffic","State":"closed","Body":"Fixes #1219, and if we include the RecyclableMemoryStreamManager part, also #1132\r\n\r\nThis PR is a response to #1219. The goal is to make server-rendered Blazor send less data over the wire. In #1219 we found that changing the stock FetchData page to return 500 forecasts caused it to send about 240KB over the websocket connection on its initial render, which is far more than the equivalent HTML.\r\n\r\nThis PR implements two optimisations:\r\n\r\n1. When `RenderBatchWriter` builds its string table, it now de-duplicates the strings. This reduces the 500-forecasts size from 243504 bytes to 137569 bytes (56% of original).\r\n2. The serialized render batch data is now gzip-compressed. This further reduces the 500-forecasts size from 137569 bytes to 7705 bytes (3% of original).\r\n\r\nSo in summary, **this PR reduces the bandwidth requirement in the large-table scenario by 97%**.\r\n\r\nFor smaller payloads the percentage reduction would be less but really it's the bigger payloads that need optimisation most anyway.\r\n\r\n**CR notes:** I'm a bit on the fence about whether to include the `Microsoft.IO.RecyclableMemoryStream` part. [It claims to make a big difference in eliminating large-object-heap bottlenecks](http://www.philosophicalgeek.com/2015/02/06/announcing-microsoft-io-recycablememorystream/), but I haven't got any measurements of that in our case. There's probably nothing harmful about using it, since it's been around for a while and pretty well battle-tested in some critical scenarios such as Bing. I lean towards including this unless @rynowak has concerns.","Url":"https://github.com/aspnet/Blazor/pull/1321","RelatedDescription":"Closed or merged PR \"Server rendering: shrink traffic\" (#1321)"},{"Id":"351664558","IsPullRequest":false,"CreatedAt":"2018-08-17T16:47:00","Actor":"SteveSandersonMS","Number":"1330","RawContent":null,"Title":"Make server-rendering WebSocket traffic more compact","State":"open","Body":"This follows on from #1321. After consultation with security specialists, we've decided not to rely on gzip by default. Instead we intend to shrink the traffic by using more compact but fixed representations so as to avoid any potential issues.\r\n\r\nStrategies:\r\n\r\n1. Represent numbers as LEB128 instead of 4-byte ints. Also remove padding from edit frames and render tree frames.\r\n    * This reduces the 500-item weather forecast test case from ~246500 bytes to ~135000 bytes\r\n2. Deduplicate *only* HTML element names, attribute names, and pure whitespace\r\n    * This reduces it further to ~40200 bytes\r\n3. Stop writing out lists of array indices. These simplified things for the deserializer, but we can just make the deserializer do more work.\r\n    * This reduces it further to ~34000 bytes\r\n\r\nSo in total, without relying on compression, we can reduce the traffic to about 14% of the original. This is also a good amount more compact that the equivalent HTML representation (about a third smaller).\r\n\r\nThe proposal is to do only point (2) in 0.6.0, because it's very cheap to implement. The others will go on the backlog.","Url":"https://github.com/aspnet/Blazor/issues/1330","RelatedDescription":"Open issue \"Make server-rendering WebSocket traffic more compact\" (#1330)"},{"Id":"351329932","IsPullRequest":false,"CreatedAt":"2018-08-17T15:29:53","Actor":"kevinjpetersen","Number":"1327","RawContent":null,"Title":"Server-side Sessions","State":"closed","Body":"Hello! I've been searching and searching and experimenting and I can't seem to find whether or not it's possible to Save and Retrieve Server-side sessions in Blazor Server-side projects.\r\n\r\nI know SessionStorage is a thing in the Client-side, but saving user data like ID there would be a massive security risk.\r\n\r\nIs it possible at the moment to Save and Retrieve a session on the server, just like you would normally with a HttpContext in ASP.NET Core Controllers?","Url":"https://github.com/aspnet/Blazor/issues/1327","RelatedDescription":"Closed issue \"Server-side Sessions\" (#1327)"},{"Id":"351435212","IsPullRequest":false,"CreatedAt":"2018-08-17T02:27:47","Actor":"renatoprogramer","Number":"1328","RawContent":null,"Title":"Blazor with Kelstrel crashes vs","State":"open","Body":"Blazor with Kelstrel causes vs. locking.\r\nI'm facing a problem with the Kestrel every time I start for the second time the app it causes Visual Studio locking and then closing, this is happening to all friends I know is a shame.\r\n  The problem seems to be because when stopped the build it keeps running in the background when started again as already has use of the delivery and the service causes this fatal error.","Url":"https://github.com/aspnet/Blazor/issues/1328","RelatedDescription":"Open issue \"Blazor with Kelstrel crashes vs\" (#1328)"},{"Id":"351315903","IsPullRequest":false,"CreatedAt":"2018-08-16T23:19:41","Actor":"kevinjpetersen","Number":"1325","RawContent":null,"Title":"Task.Delay without 'await' makes Windows hang forever","State":"closed","Body":"**Info about the project:**\r\n- Running Blazor 0.5.1, ASP.NET Core 2.1\r\n- Blazor Server-side Project\r\n\r\n**Issue:**\r\nSo I tried to experiment with the Task.Delay aync/await, and without it. First I tried with the usual way, async Task and then await the Task.Delay. This works fine (But locks the UI thread)\r\n\r\nBut If I remove the await from Task.Delay, Windows hangs and in the end a force shutdown is required as Windows itself don't respond.\r\n\r\nHere's my OnInitAsync code where the Task is executed:\r\n\r\n```\r\nprotected override async Task OnInitAsync()\r\n    {\r\n        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\r\n        isRunning = true;\r\n\r\n        Task loopTask = Task.Run(() =>\r\n        {\r\n            Random Ran = new Random();\r\n            while (isRunning)\r\n            {\r\n                forecasts.Add(new WeatherForecast()\r\n                {\r\n                    Date = DateTime.Now,\r\n                    Summary = \"Bla bla\",\r\n                    TemperatureC = Ran.Next(1, 100),\r\n                    TemperatureF = Ran.Next(1, 100)\r\n                });\r\n                Task.Delay(1000);\r\n            }\r\n        });\r\n    }\r\n```\r\n\r\nIs the \"Hang windows until it basically crashes\" an intended feature? Shouldn't something (The Blazor ASP.NET Server) prevent this somehow?","Url":"https://github.com/aspnet/Blazor/issues/1325","RelatedDescription":"Closed issue \"Task.Delay without 'await' makes Windows hang forever\" (#1325)"},{"Id":"351320027","IsPullRequest":false,"CreatedAt":"2018-08-16T18:34:01","Actor":"MarkStega","Number":"1326","RawContent":null,"Title":"Visual Studio hangs when building a Blazor project (15.8.0)","State":"open","Body":"I tried to report a VS issue using the feedback system with\r\n\r\n\"I have a Blazor based solution with 6 DLL's built with the Blazor tooling that are all .Net Standard 2.0 and one that is ASP.Net Core 2.1\r\n\r\nUp until yesterday, this solution built properly with VS 15.7, I upgraded to VS 15.8 and now the build hangs after I make a source change and do either Ctrl-F5 or F6. I have to cancel the build and then the next build works as expected. If I make another source change again the build hangs and has to be canceled.\r\n\r\nThe environment is Win 10 X64\"\r\n\r\nThe response that I received was\r\n\r\n\"Van Kichline [MSFT] on 8/16/2018\r\nThank you for your feedback.Currently Blazor is in an experimental phase and is only accepting issue reports on the GitHub issue tracker at https://github.com/aspnet/Blazor/issues . Thanks!\"\r\n\r\nThe issue was better defined by @uwefms in #1323 as being caused by starting the build with changed files.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1326","RelatedDescription":"Open issue \"Visual Studio hangs when building a Blazor project (15.8.0)\" (#1326)"},{"Id":"351296534","IsPullRequest":false,"CreatedAt":"2018-08-16T17:21:36","Actor":"arpadbarta","Number":"1324","RawContent":null,"Title":"VS 15.8: New project from template results in empty solution","State":"open","Body":"After upgrading VS to 15.8 and .Net Core to 2.1.400 newly created project with the Blazor template results in empty solutions. Trying to add generated projects fails with incomplete project files.\r\n\r\nChanging the .Net Core version in global.json to 2.1.400 solves the problem and generated projects can be added.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1324","RelatedDescription":"Open issue \"VS 15.8: New project from template results in empty solution\" (#1324)"},{"Id":"351204177","IsPullRequest":false,"CreatedAt":"2018-08-16T13:24:26","Actor":"uwefms","Number":"1323","RawContent":null,"Title":"Blazor Templates gone in VS 15.8.0","State":"open","Body":"After upgrading to VS 15.8.0 and SDK 2.1.400 all blazor templates (core 2.0 and 2.1) are gone. Creating new apps with dotnet new works as expected and the newly created projects can be edited with VS. Deinstalling and reinstalling the asp.net blazor language services did not help.\r\n\r\n   Uwe","Url":"https://github.com/aspnet/Blazor/issues/1323","RelatedDescription":"Open issue \"Blazor Templates gone in VS 15.8.0\" (#1323)"},{"Id":"351195063","IsPullRequest":false,"CreatedAt":"2018-08-16T13:00:32","Actor":"MarkStega","Number":"1322","RawContent":null,"Title":"Bind does not yet handle radio buttons","State":"open","Body":"I have the the following in my cshtml\r\n````\r\n    <td>\r\n        <input type=\"radio\" name=\"vacation\" bind=\"@northwestVacation\" /> Northwest @northwestVacation<br>\r\n        <input type=\"radio\" name=\"vacation\" bind=\"@sinaiVacation\" /> Sinai @sinaiVacation\r\n    </td>\r\n````\r\nwith corresponding properties `northwestVacation` and `sinaiVacation` in my code. During a debug session I see the `get` called numerous times for each but even with a `true` value the corresponding radio button is not in the selected state. And, as I select either button I never see the `set` called on either property.","Url":"https://github.com/aspnet/Blazor/issues/1322","RelatedDescription":"Open issue \"Bind does not yet handle radio buttons\" (#1322)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-23T05:30:03.1918503Z","RunDurationInMilliseconds":1665}