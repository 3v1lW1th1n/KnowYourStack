{"Data":{"GitHub":{"Issues":[{"Id":"536742522","IsPullRequest":true,"CreatedAt":"2019-12-12T04:05:28","Actor":"dotnet-maestro[bot]","Number":"2311","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191211.6\r\n- **Date Produced**: 12/12/2019 3:23 AM\r\n- **Commit**: 1ae70ae8e4c452b1a57cb6bf474173ef1005d8ab\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19611.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2311","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2311)"},{"Id":"536738906","IsPullRequest":true,"CreatedAt":"2019-12-12T03:50:24","Actor":"dotnet-maestro[bot]","Number":"2310","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191211.5\r\n- **Date Produced**: 12/12/2019 3:22 AM\r\n- **Commit**: 5aba8fa85b14f1e090e109ad91d5a80ce5ad4d1c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19611.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2310","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2310)"},{"Id":"536710008","IsPullRequest":true,"CreatedAt":"2019-12-12T02:05:26","Actor":"dotnet-maestro[bot]","Number":"2309","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191211.3\r\n- **Date Produced**: 12/12/2019 1:25 AM\r\n- **Commit**: a4ae239abe4922b868c19861a53a0ff9ac253554\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19611.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2309","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2309)"},{"Id":"536669877","IsPullRequest":true,"CreatedAt":"2019-12-12T00:16:02","Actor":"dotnet-maestro[bot]","Number":"2308","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191211.1\r\n- **Date Produced**: 12/11/2019 10:40 PM\r\n- **Commit**: 5d79f3e58f6ef8359aab26ee3535c7c11a343892\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19611.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2308","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2308)"},{"Id":"536043860","IsPullRequest":false,"CreatedAt":"2019-12-12T00:07:31","Actor":"climbak","Number":"2302","RawContent":null,"Title":"TreeView scroll issue","State":"closed","Body":"I encountered a strange scrolling issue in the WPF TreeView. I can only reproduce it with a specific layout and I have created a sample app to reproduce. I tried debugging the decompiled source in PresentationFramework, but was not able to find the true source.\r\n\r\nThe basics: I have a Grid layout in which I have put in a TreeView with some items in one column, a DataGrid in another column that shows details of the selected item in the TreeView. In the row below both the DataGrid and the TreeView, I have a button (I've tested a few different controls that all reprod) and it's in the same column as the DataGrid.\r\n\r\nWhen the TreeView is scrolled down and an item is selected, the DataGrid populates with the details of the selected item and then an UpdateLayout is called on the TreeView which causes the ScrollInfo values on it's ScrollViewer to revert to a Y value of 0 and the TreeView scrolls to the top.\r\n\r\nIn my sample application, you can just run it, click the Fill button to add items then click Expand All to expand them. Scroll down a bit and select any leaf item and the TreeView will scroll back to the top.\r\n\r\nIf the button at the bottom is removed from the xaml or if the first Grid column that houses the TreeView is set to a set width or *, the errant scroll won't repro.\r\n\r\nThe sample project can be found here: https://github.com/climbak/TreeViewScrollingIssue","Url":"https://github.com/dotnet/wpf/issues/2302","RelatedDescription":"Closed issue \"TreeView scroll issue\" (#2302)"},{"Id":"536545271","IsPullRequest":true,"CreatedAt":"2019-12-11T23:09:14","Actor":"rladuca","Number":"2305","RawContent":null,"Title":"Remove dependency on .NET SDK installs for IL Tools","State":"closed","Body":"Fixes #2298\r\n\r\nUse a set of matched, private IL tools in order to inject a module constructor into `PresentationCore`.  These are copied binaries from a .NET Framework 4.7.2 installation and SDK.\r\n\r\nAlso fixing some issues with utilizing `ILAsm` outside of the installed Framework directory and some bugs that went unnoticed in our injection targets.\r\n\r\n# Pending\r\n- [x] IL comparison between `PresentationCore` from this change and current .NET 5.0 `PresentationCore`.","Url":"https://github.com/dotnet/wpf/pull/2305","RelatedDescription":"Closed or merged PR \"Remove dependency on .NET SDK installs for IL Tools\" (#2305)"},{"Id":"535439814","IsPullRequest":false,"CreatedAt":"2019-12-11T23:09:14","Actor":"SamBent","Number":"2298","RawContent":null,"Title":"Remove dependency on .NET SDK installs for IL Tools","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 5.0.100-alpha1-015914\r\n* Windows version: (`winver`) 1909 (10.0.18363)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)?  No\r\n\r\n **Problem description:** Build failure when suitable .NET SDK is not installed\r\n\r\n**Repro steps:**\r\n1. New machine with Win10 1909 (hence .NET 4.8).\r\n2. Setup machine per [WPF developer guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md).\r\n3. Fork/clone master branch of dotnet/wpf.\r\n4. Obtain fix for #2297 \r\n5. build \r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n D:\\repos\\wpf\\eng\\WpfArcadeSdk\\tools\\InjectModuleInitializer.targets(372,5): error MSB4044: The \"ILDasmTask\" task was not given a value for the required parameter \"ILDAsm\". [D:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\PresentationCore\\PresentationCore.csproj]\r\n\r\n **Expected behavior:** No failure\r\n \r\nThis failure goes away after installing .NET 4.6.1 SDK, which makes a version of ildasm.exe visible to\r\nPresentationCore.csproj.  Note that ilasm.exe is already visible (at C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\ILAsm.exe) before installing a .NET SDK\r\n","Url":"https://github.com/dotnet/wpf/issues/2298","RelatedDescription":"Closed issue \"Remove dependency on .NET SDK installs for IL Tools\" (#2298)"},{"Id":"536592835","IsPullRequest":true,"CreatedAt":"2019-12-11T20:19:30","Actor":"vatsan-madhavan","Number":"2307","RawContent":null,"Title":"Add workload component ID's needed by this repo's build to global.json ","State":"open","Body":"Adding [workload component id's](https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-enterprise) for build tools needed by this Repo to global.json as described at [ArcadeSdk.md](https://github.com/dotnet/arcade/blob/3d22e08e45bc87afd6dc5e6724dec28c78acb086/Documentation/ArcadeSdk.md). \r\n\r\n- ~The list of components is my best guess.~ The repo may need ~more or~ less than these.\r\n  - `wpf.vsconfig` has been tested on a new machine. It doesn't include even the basic CoreEditor component, yet a VS 2019 16.5 Preview 2 instillation based on this config file can successfully build the WPF repo (master branch). \r\n- This list would have to be improved (likely trimmed) over time through trial-and-error. \r\n- VS version (16.4+) is not a guess - WPF repo needs this as the min-version starting **now**. \r\n- There is a change to `eng\\common\\tools.ps1` This is a port of https://github.com/dotnet/arcade/issues/4534 . WPF repos ingestion of arcade updates seems to be broken for now - so I'm taking this change manually. When the updates resume, it will get fixed up automatically. \r\n\r\n\r\n- [x] Need to solve https://github.com/dotnet/arcade/issues/4534 first. ","Url":"https://github.com/dotnet/wpf/pull/2307","RelatedDescription":"Open PR \"Add workload component ID's needed by this repo's build to global.json \" (#2307)"},{"Id":"536566099","IsPullRequest":true,"CreatedAt":"2019-12-11T19:45:34","Actor":"dotnet-maestro[bot]","Number":"2306","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191210.4\r\n- **Date Produced**: 12/11/2019 7:58 AM\r\n- **Commit**: 1cfb75cf1b4b15309850d4003f6c683eadd9604c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-alpha1.19610.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2306","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2306)"},{"Id":"535913935","IsPullRequest":true,"CreatedAt":"2019-12-11T17:39:34","Actor":"SamBent","Number":"2301","RawContent":null,"Title":"Add .NET SDK to developer guide","State":"closed","Body":"Document dependency on .NET SDK.  \r\n\r\nThe build of PresentationCore uses IL tools.  ILdasm.exe is obtained from a .NET SDK, either 4.6.1 or 4.6.2 (but not higher).\r\n\r\nThis is a mitigation for #2298.","Url":"https://github.com/dotnet/wpf/pull/2301","RelatedDescription":"Closed or merged PR \"Add .NET SDK to developer guide\" (#2301)"},{"Id":"535906384","IsPullRequest":true,"CreatedAt":"2019-12-11T17:34:02","Actor":"SamBent","Number":"2300","RawContent":null,"Title":"Remove dependency on CorError.h","State":"closed","Body":"Copy (from .NET 4.6.1 SDK) the one HR definition used by DirectWriteForwarder.\r\n\r\nFixes #2297 \r\n","Url":"https://github.com/dotnet/wpf/pull/2300","RelatedDescription":"Closed or merged PR \"Remove dependency on CorError.h\" (#2300)"},{"Id":"535437082","IsPullRequest":false,"CreatedAt":"2019-12-11T17:34:02","Actor":"SamBent","Number":"2297","RawContent":null,"Title":"Remove dependency on .NET include file","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 5.0.0-alpha.1.19564.1\r\n* Windows version: (`winver`) 1909 (OS Build 10.0.18363.476)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? No\r\n\r\n **Problem description:**  Build failure when suitable .NET SDK is not installed.\r\n \r\n**Repro steps:**\r\n1. New machine with Win10 1909 (hence .NET 4.8).\r\n2. Setup machine per [WPF developer guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md).\r\n3. Fork/clone master branch of dotnet/wpf.\r\n4. build \r\n\r\n **Actual behavior:** \r\nD:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\DirectWriteForwarder\\CPP\\DWriteWrapper\\Common.h(15,10): fatal error C1083: Cannot open include file: 'CorError.h': No such file or directory [D:\\repos\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\DirectWriteForwarder\\DirectWriteForwarder.vcxproj]\r\n \r\n **Expected behavior:** No build failure.\r\n \r\nThis failure goes away after installing .NET 4.6.1 SDK, which makes a version of CorError.h visible to \r\nDirectWriteForwarder.vcxproj.","Url":"https://github.com/dotnet/wpf/issues/2297","RelatedDescription":"Closed issue \"Remove dependency on .NET include file\" (#2297)"},{"Id":"536358592","IsPullRequest":true,"CreatedAt":"2019-12-11T13:07:59","Actor":"dotnet-maestro[bot]","Number":"2304","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191210.8\r\n- **Date Produced**: 12/11/2019 4:52 AM\r\n- **Commit**: 7431a8e39c3a25d39d8f801a2e8b4e2b454fe233\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19610.8\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2304","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2304)"},{"Id":"536076748","IsPullRequest":true,"CreatedAt":"2019-12-11T01:12:46","Actor":"vatsan-madhavan","Number":"2303","RawContent":null,"Title":"Import Microsoft.WinFx.props only when it is present","State":"closed","Body":"Import Microsoft.WinFx.props only when it is present\r\n","Url":"https://github.com/dotnet/wpf/pull/2303","RelatedDescription":"Closed or merged PR \"Import Microsoft.WinFx.props only when it is present\" (#2303)"},{"Id":"534286362","IsPullRequest":true,"CreatedAt":"2019-12-10T21:56:49","Actor":"rladuca","Number":"2288","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"closed","Body":"Ensure that we don't include XAML files that no longer exist on disk as part of the LocalMarkupPages when we load from the compiler cache.\r\n\r\nThis allows SDK style projects to react to files deleted from the glob between two incremental builds.\r\n\r\nFixes #2287 ","Url":"https://github.com/dotnet/wpf/pull/2288","RelatedDescription":"Closed or merged PR \"Handle incremental build when XAML files are removed from the Page glob\" (#2288)"},{"Id":"534161006","IsPullRequest":false,"CreatedAt":"2019-12-10T21:56:48","Actor":"rladuca","Number":"2287","RawContent":null,"Title":"Handle incremental build when XAML files are removed from the Page glob","State":"closed","Body":"Related to https://github.com/microsoft/msbuild/issues/4963\r\n\r\nWPF needs to update its handling of incremental building in PBT (likely in [IncrementalCompileAnalyzer](https://github.com/dotnet/wpf/blob/f4e04b7a34f8c490b7d351b44d2825293462e8a5/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/MS/Internal/Tasks/IncrementalCompileAnalyzer.cs)) so that it detects invalid items in the cache and ignores them during markup compilation.\r\n\r\nOtherwise, we potentially attempt to compile files that are no longer present on disk and the build will fail.\r\n\r\nMSBuild has no mechanism to do this automatically as of yet (see https://github.com/microsoft/msbuild/issues/2470), so this must be handled at the WPF level.","Url":"https://github.com/dotnet/wpf/issues/2287","RelatedDescription":"Closed issue \"Handle incremental build when XAML files are removed from the Page glob\" (#2287)"},{"Id":"535905568","IsPullRequest":false,"CreatedAt":"2019-12-10T18:25:24","Actor":"fatihyildizhan","Number":"2299","RawContent":null,"Title":"TabControl and ComboBox look broken","State":"open","Body":"\r\n![ui](https://user-images.githubusercontent.com/602600/70565608-86003080-1ba3-11ea-84a2-1bb39f308459.jpg)\r\n* .NET Core 3.1.100\r\n* Windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No \r\n\r\n **Problem description:**\r\n\r\nI am using TabControl and ComboBox. They look perfect on the first run. When you move the Window some of the tabs and ComboBox look melted/broken. \r\n\r\n** Repro **\r\nI tested this app on 4 different computers with almost the same configuration. Looks broken on 2 computers. \r\n\r\nMove the app for a while on Desktop, change Tabs, scroll ComboBox then UI become like this.\r\n\r\nEdit note: I attached a screenshot.\r\n","Url":"https://github.com/dotnet/wpf/issues/2299","RelatedDescription":"Open issue \"TabControl and ComboBox look broken\" (#2299)"},{"Id":"534572314","IsPullRequest":true,"CreatedAt":"2019-12-10T00:38:16","Actor":"dotMorten","Number":"2292","RawContent":null,"Title":"Doc was still referring to 3.0 preview 1.","State":"closed","Body":"Updated to refer to 3.1","Url":"https://github.com/dotnet/wpf/pull/2292","RelatedDescription":"Closed or merged PR \"Doc was still referring to 3.0 preview 1.\" (#2292)"},{"Id":"535402741","IsPullRequest":false,"CreatedAt":"2019-12-09T23:40:02","Actor":"vatsan-madhavan","Number":"2296","RawContent":null,"Title":"Use Production C++ Tools in release/3.1 branch","State":"open","Body":"- Switch to use production C++ tools that are ambient to the build machine, instead of privatized C++ tools \r\n  - Dev/local builds would rely on tools from Dev16.4+ \r\n- Update tools.dotnet in global.json to 3.1.100\r\n\r\nThis change is being proposed based on a plan agreed with @tgani-msft and @jamshedd to move the LTS branch away from using private tools. \r\n\r\nThis was the plan: \r\n\r\n- Starts out with privatized tools (same as 3.0) \r\n- Switches to Dev 16.4 P1 when it becomes available (timing wise, this lines up with 3.0 RTM, roughly). \r\n- (not-critical) At 3.1 RTM, it will likely switch to using 16.4 RTM (3.1 and 16.4 schedules are lined up). \r\n- Steady State: 3.1 will use shipping tools, not private tools. ","Url":"https://github.com/dotnet/wpf/issues/2296","RelatedDescription":"Open issue \"Use Production C++ Tools in release/3.1 branch\" (#2296)"},{"Id":"534925110","IsPullRequest":true,"CreatedAt":"2019-12-09T14:03:14","Actor":"dotnet-maestro[bot]","Number":"2295","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191208.2\r\n- **Date Produced**: 12/8/2019 3:52 PM\r\n- **Commit**: c5e317b275dcc297b11f761003261d0032e176c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19608.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2295","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2295)"},{"Id":"534826405","IsPullRequest":false,"CreatedAt":"2019-12-09T10:18:11","Actor":"JosefNemec","Number":"2294","RawContent":null,"Title":"Laggy user experience when using VRR display","State":"open","Body":"* .NET Core Version 3.1\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n**Problem description:**\r\n\r\nWhen using display with variable refresh rate (I only tested it on G-Sync one, but my guess is that the issue will occur on FreeSync too due to the nature of this behavior) the general user experience is not smooth and feels very unresponsive. The issue is that WPF (being DirectX application) is picked up by the display driver and display refresh is adjusted based on framerate output of WPF. However since WPF's framerate is usually bellow 60, this has a big impact on general responsiveness of the interface because even things like moving mouse will be noticeable stuttery. More so if user has display with high refresh rate (like 144Hz), the switch to and from WPF application can be quite jarring.\r\n \r\n**Expected behavior:**\r\n \r\nWPF's framerate is not picked up by the graphics driver and refresh rate stays static when using said app. For example I didn't notice this being an issue with UWP or other desktop applications with accelerated GPU rendering.\r\n\r\nI understand that technically this is working as intended, but in my opinion it doesn't make much sense for WPF application to be VRR compatible, given the type of applications that are generally created with it. I think it would make more sense to have VRR compatibly turned off by default, but have an option to enable old behavior if possible.\r\n\r\nI think this shouldn't be taken lightly since VRR display use is on rise and it's become de facto standard in gaming related PCs (I develop gaming related app and quite a few users noticed this issue).\r\n\r\n**Minimal repro:**\r\n\r\nThis simple example can be used to reproduce the behavior. Just moving mouse over list box items will force display to render at about 30 fps.\r\n\r\n```\r\n<Window x:Class=\"WpfApp1.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        Height=\"450\" Width=\"800\">\r\n    <Grid>\r\n        <ListBox>\r\n            <ListBoxItem>test</ListBoxItem>\r\n            <ListBoxItem>test</ListBoxItem>\r\n            <ListBoxItem>test</ListBoxItem>\r\n        </ListBox>\r\n    </Grid>\r\n</Window>\r\n```","Url":"https://github.com/dotnet/wpf/issues/2294","RelatedDescription":"Open issue \"Laggy user experience when using VRR display\" (#2294)"},{"Id":"534579050","IsPullRequest":true,"CreatedAt":"2019-12-08T18:13:54","Actor":"dotMorten","Number":"2293","RawContent":null,"Title":"Updated target framework path to 3.1","State":"open","Body":"Fixed the reference path","Url":"https://github.com/dotnet/wpf/pull/2293","RelatedDescription":"Open PR \"Updated target framework path to 3.1\" (#2293)"},{"Id":"534540581","IsPullRequest":true,"CreatedAt":"2019-12-08T13:32:23","Actor":"dotnet-maestro[bot]","Number":"2291","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191207.6\r\n- **Date Produced**: 12/8/2019 1:10 AM\r\n- **Commit**: b080aa1ad0f1e26114f1f71625e84fda31f0e292\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19607.6\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2291","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2291)"},{"Id":"534486421","IsPullRequest":false,"CreatedAt":"2019-12-08T03:27:27","Actor":"lindexi","Number":"2290","RawContent":null,"Title":"How to build this project in github action","State":"open","Body":"I create a github action and call the build.cmd but build failed.\r\n\r\nThis is my action file https://github.com/dotnet-campus/wpf/pull/1/files\r\n\r\nAnd this is the build info: https://github.com/dotnet-campus/wpf/pull/1/checks?check_run_id=338492387\r\n\r\nCould you help me to build WPF project","Url":"https://github.com/dotnet/wpf/issues/2290","RelatedDescription":"Open issue \"How to build this project in github action\" (#2290)"},{"Id":"534400977","IsPullRequest":true,"CreatedAt":"2019-12-07T13:32:50","Actor":"dotnet-maestro[bot]","Number":"2289","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191206.4\r\n- **Date Produced**: 12/7/2019 1:03 AM\r\n- **Commit**: 8429f487bb3b9dcc86b211ad0b98bef9301c0c04\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19606.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2289)"},{"Id":"534066599","IsPullRequest":false,"CreatedAt":"2019-12-06T15:17:41","Actor":"Proxaaa","Number":"2286","RawContent":null,"Title":"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: Version 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nHello,\r\n\r\nPlease try the following setup:\r\n\r\n```\r\n<Window.Resources>\r\n    <ResourceDictionary>\r\n        <!--<system:String x:Key=\"DummyString\">Dummy</system:String>-->\r\n        <ResourceDictionary.MergedDictionaries>\r\n            <ResourceDictionary>\r\n                <Style TargetType=\"{x:Type TextBlock}\">\r\n                    <Setter Property=\"Text\" Value=\"Test\" />\r\n                </Style>\r\n            </ResourceDictionary>\r\n        </ResourceDictionary.MergedDictionaries>\r\n    </ResourceDictionary>\r\n</Window.Resources>\r\n\r\n<StackPanel>\r\n    <TextBlock />\r\n    <TextBlock />\r\n    <TextBlock />\r\n</StackPanel>\r\n```\r\n\r\n\r\n **Actual behavior:** \r\nThe first TextBlock there does not have its Text set to \"Test\". If I uncomment the DummyString resource it works as expected.\r\n \r\n **Expected behavior:**\r\nThe first TextBlock there has its Text set to \"Test\".\r\n \r\n **Minimal repro:**\r\nSee https://github.com/Proxaaa/MergeTest/tree/master","Url":"https://github.com/dotnet/wpf/issues/2286","RelatedDescription":"Open issue \"An implicit style located in merged resource dictionary is not applied to the first control of the target type if the main resource dictionary is empty\" (#2286)"},{"Id":"533973440","IsPullRequest":true,"CreatedAt":"2019-12-06T13:27:51","Actor":"dotnet-maestro[bot]","Number":"2285","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20191205.11\r\n- **Date Produced**: 12/6/2019 1:45 AM\r\n- **Commit**: 292cdbc0db71ef4d25a0f5d263e564b71f04ac46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-alpha.1.19605.11\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2285","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2285)"},{"Id":"533678120","IsPullRequest":true,"CreatedAt":"2019-12-06T01:23:05","Actor":"dotnet-maestro[bot]","Number":"2284","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20191205.5\r\n- **Date Produced**: 12/5/2019 10:05 PM\r\n- **Commit**: 9483a88b7764a74d71cbd449de6c56c1d5e0af21\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.1-servicing.19605.5\r\n\r\n[marker]: <> (End:fd5f4619-cca3-4e12-8f56-08d72a4ce301)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2284","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/winforms\" (#2284)"},{"Id":"533580773","IsPullRequest":true,"CreatedAt":"2019-12-05T21:36:54","Actor":"mmitche","Number":"2283","RawContent":null,"Title":"Move to 3.1.100 RTM sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/2283","RelatedDescription":"Closed or merged PR \"Move to 3.1.100 RTM sdk\" (#2283)"},{"Id":"533531729","IsPullRequest":true,"CreatedAt":"2019-12-05T18:54:17","Actor":"vatsan-madhavan","Number":"2282","RawContent":null,"Title":"Fix STATUS_ILLEGAL_INSTRUCTION crash in win-x86 on some Xeon CPU's","State":"open","Body":"Fixes #2259, #2296\r\n\r\nMatching internal PR at https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/4692?_a=overview\r\n\r\n### Description \r\n\r\n#### Part A\r\n- The C++ Tools prior VS 2019 16.4 has a bug in detecting AVX-512 support (512-bit extensions to 256-bit Advanced Vector Extensions SIMD instructions for x86 ISA). It reports support to be present incorrectly on some Xeon processors when the support is not available. \r\n- It results in a `STATUS_ILLEGAL_INSTRUCTION` crash when running x86 WPF apps on certain Xeon processors. \r\n- The fix is to simply recompile WPF using a newer 16.4 compiler tools. \r\n\r\n#### Part B\r\n\r\n- Switch to use production C++ tools that are ambient to the build machine, instead of privatized C++ tools \r\n  - Dev/local builds would rely on tools from Dev16.4+ \r\n- Update tools.dotnet in global.json to 3.1.100\r\n\r\nThis change is being proposed based on a plan to migrate to production tools that was agreed with @tgani-msft and @jamshedd to move the LTS branch away from using private tools. \r\n\r\nThis was the plan: \r\n\r\n- Starts out with privatized tools (same as 3.0) \r\n- Switches to Dev 16.4 P1 when it becomes available (timing wise, this lines up with 3.0 RTM, roughly). \r\n- (not-critical) At 3.1 RTM, it will likely switch to using 16.4 RTM (3.1 and 16.4 schedules are lined up). \r\n- Steady State: 3.1 will use shipping tools, not private tools. \r\n\r\n### Customer Impact \r\n\r\n#### Part A\r\n- Fixes a bad crash that prevents WPF from being used on a class of machines. \r\n\r\n#### Part B \r\n- Ship product built using production tools\r\n- libraries etc. could have fixes/updates (incl. security updates) that are delivered seamlessly when using ambient tools supplied by the build machines. \r\n\r\n### Regression \r\n\r\nYes - #2259 is a regression relative to .NET Framework. \r\n\r\n### Risk\r\nLow\r\n\r\n- All available WPF tests have been run on bits compiled with the new toolset, and no regressions have been found. \r\n- No functional changes are being made. \r\n- The customer who reported #2259 has verified that the new compiler correctly detects AVX-512 support\r\n  - This was verified using a test application, rather than verifying a private build of WPF directly. ","Url":"https://github.com/dotnet/wpf/pull/2282","RelatedDescription":"Open PR \"Fix STATUS_ILLEGAL_INSTRUCTION crash in win-x86 on some Xeon CPU's\" (#2282)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-12-12T05:30:55.366791Z","RunDurationInMilliseconds":664}