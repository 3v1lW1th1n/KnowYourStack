{"Data":{"GitHub":{"Issues":[{"Id":"568042070","IsPullRequest":true,"CreatedAt":"2020-02-20T04:26:41","Actor":"frank-dong-ms","Number":"4862","RawContent":null,"Title":"fix netfx test not running issue","State":"open","Body":"related to PR: https://github.com/dotnet/machinelearning/pull/4854\r\n\r\nsetting CopyLocalLockFileAssemblies to false for netfx cause test not running on CI like below:\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=528701&view=logs&j=32952595-30e7-56fa-9b86-c4579b87f5d1\r\n\r\nrestrict CopyLocalLockFileAssemblies to false only for netcore 3.0\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4862","RelatedDescription":"Open PR \"fix netfx test not running issue\" (#4862)"},{"Id":"568000518","IsPullRequest":true,"CreatedAt":"2020-02-20T01:57:11","Actor":"Lynx1820","Number":"4861","RawContent":null,"Title":"Fix for ColumnConcatenatingTransformer","State":"open","Body":"Used the Concat operator instead of FeatureVectorizer to avoid conflicting output type errors, since FeatureVectorizer outputs strictly floats, but some trainers expect double outputs. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4861","RelatedDescription":"Open PR \"Fix for ColumnConcatenatingTransformer\" (#4861)"},{"Id":"567776109","IsPullRequest":true,"CreatedAt":"2020-02-19T23:08:53","Actor":"harishsk","Number":"4857","RawContent":null,"Title":"Added slot names support for OnnxTransformer","State":"closed","Body":"This PR adds support for persisting the SlotNames annotations of a column during onnx export and reading those back in OnnxTransformer and adding the annotations back to the column when the onnx model is read from disk.\r\n\r\nOnnx natively does not have support for annotations. To work around this, we store some metadata in some unused portions of the graph. As an example, let us say we have an ML.NET model with an output column NGrams that outputs a vector of NGram counts. This column will have an Annotation in ML.NET named SlotNames. When this model is exported to onnx, we create an additional LabelEncoder node and store the SlotNames in the keys_strings attribute of the LabelEncoder.\r\n\r\nThe LabelEncoder is created with an input name of `$\"mlnet.{column.Name}.unusedInput\"`, an output name of $\"mlnet.{column.Name}.unusedOutput\" and a node name of `$\"mlnet.{column.Name}.SlotNames\"`. (All the actual output columns of the ML.NET model are suffixed with a `\".output\"` string)\r\n\r\nThen when OnnxTransformer loads the graph it goes through the list of output nodes and creates output columns for each of them in its output schema. For each column it searches the graph for a node named `$\"mlnet.{column.Name}.SlotNames\"`. If it finds it, it reads the keys_strings attributes from that node and adds those strings as SlotNames annotation to that column. \r\n\r\nThis SlotNames data should then be available as annotations on the column in both ML.NET and Nimbus.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4857","RelatedDescription":"Closed or merged PR \"Added slot names support for OnnxTransformer\" (#4857)"},{"Id":"567881761","IsPullRequest":true,"CreatedAt":"2020-02-19T22:15:35","Actor":"frank-dong-ms","Number":"4860","RawContent":null,"Title":"fix nightly-build","State":"open","Body":"related to https://github.com/dotnet/machinelearning/pull/4859.\r\n\r\ncentos is building with netcore3.0 not netcore2.1, add targetFramework parameter to distinct that\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4860","RelatedDescription":"Open PR \"fix nightly-build\" (#4860)"},{"Id":"567825309","IsPullRequest":true,"CreatedAt":"2020-02-19T21:23:33","Actor":"frank-dong-ms","Number":"4859","RawContent":null,"Title":"set library path for centos and ubuntu","State":"closed","Body":"set library path for centos as well as we are observing below error from NightlyBuild pipeline for CentOS:\r\n\r\nX Microsoft.ML.Functional.Tests.Training.ContinueTrainingSymbolicStochasticGradientDescent [121ms]\r\n  Error Message:\r\n   System.DllNotFoundException : Unable to load shared library 'SymSgdNative' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libSymSgdNative: cannot open shared object file: No such file or directory\r\n  Stack Trace:\r\n     at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(Int32 totalNumInstances, Int32* instSizes, Int32** instIndices, Single** instValues, Single* labels, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Single* weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, State* state, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Functional.Tests.Training.ContinueTrainingSymbolicStochasticGradientDescent() in /__w/1/s/test/Microsoft.ML.Functional.Tests/Training.cs:line 420\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=527464&view=logs&j=c83e03a9-ccae-58c2-be03-4a20d31c7f0e&t=c2d1124c-8b3e-5953-2f5c-b9febb7524be\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4859","RelatedDescription":"Closed or merged PR \"set library path for centos and ubuntu\" (#4859)"},{"Id":"567823330","IsPullRequest":true,"CreatedAt":"2020-02-19T20:22:56","Actor":"frank-dong-ms","Number":"4858","RawContent":null,"Title":"make all tests inherit from BaseTestClass","State":"open","Body":"RT\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4858","RelatedDescription":"Open PR \"make all tests inherit from BaseTestClass\" (#4858)"},{"Id":"567215056","IsPullRequest":true,"CreatedAt":"2020-02-19T18:58:45","Actor":"mstfbl","Number":"4853","RawContent":null,"Title":"Fix grammatical typos","State":"closed","Body":"Fix grammatical typos. Utilized [Visual Studio Spell Checker](https://marketplace.visualstudio.com/items?itemName=EWoodruff.VisualStudioSpellCheckerVS2017andLater) to quickly find and implement typo fixes.","Url":"https://github.com/dotnet/machinelearning/pull/4853","RelatedDescription":"Closed or merged PR \"Fix grammatical typos\" (#4853)"},{"Id":"566103350","IsPullRequest":true,"CreatedAt":"2020-02-19T18:11:40","Actor":"harishsk","Number":"4849","RawContent":null,"Title":"Fixed output schema of OnnxTransformer","State":"closed","Body":"This fixes a long standing issue about Onnx in ML.NET that the output variables of the onnx graph show up as columns with different names in the output schema of OnnxTransformer. After much investigation, it turns out that the output variables in the Onnx graph cannot be fixed because it is not possible to specify in onnx which particular node you want your output variable to be connected to. \r\n\r\nThis fix, adds a known \".output\" suffix to all Onnx models exported from ML.NET. And when reading a model, if the model was exported from ML.NET, it recognizes the suffix, strips it and maps it back to the input column. \r\n\r\nAs a result of fixing this PR also contains updates to the tests and baseline files. \r\n\r\nFixes #2980. Fixes #2981\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4849","RelatedDescription":"Closed or merged PR \"Fixed output schema of OnnxTransformer\" (#4849)"},{"Id":"566982604","IsPullRequest":false,"CreatedAt":"2020-02-19T09:17:14","Actor":"maximeozenne","Number":"4851","RawContent":null,"Title":"Extract MaximumEntropyModelParameters from MulticlassPredictionTransformer ITransformer model","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Enterprise\r\n- **.NET Version (eg., dotnet --info)**: .NET Framework 4.7.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI want to re-train multi-class (`LbfgsMaximumEntropyMulticlassTrainer`).\r\n- **What happened?**\r\nI train and load model, but i cannot extract `MaximumEntropyModelParameters`.\r\n- **What did you expect?**\r\nI want to extract `MaximumEntropyModelParameters` my pre-trained model.\r\nI want to retrain my model by using `LbfgsMaximumEntropyMulticlassTrainer.Fit(IDataView, MaximumEntropyModelParameters)` method.\r\n\r\nSimilar to #4099 but I'm using only one model\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n```\r\n//Create a ITransformer from my IDataView\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey()\r\n    .Append(mlContext.Transforms.Text.FeaturizeText())\r\n    .AppendCacheCheckpoint(mlContext);\r\nvar trainingPipeline = pipeline.Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy())\r\n    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\nITransformer trainedModel = trainingPipeline.Fit(splitTrainSet);\r\n\r\n//Try to retrain it by extracting the parameters\r\nvar originalModelParameters = ((MulticlassPredictionTransformer<object>)model).Model as MaximumEntropyModelParameters;\r\nmodel = mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy().Fit(transformedNewData, originalModelParameters);\r\n```\r\n\r\n### Logs\r\n\r\n> System.InvalidCastException: 'Unable to cast object of type 'Microsoft.ML.Data.TransformerChain`1[Microsoft.ML.ITransformer]' to type 'Microsoft.ML.Data.MulticlassPredictionTransformer`1[System.Object]'.'\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4851","RelatedDescription":"Closed issue \"Extract MaximumEntropyModelParameters from MulticlassPredictionTransformer ITransformer model\" (#4851)"},{"Id":"567371377","IsPullRequest":false,"CreatedAt":"2020-02-19T07:32:31","Actor":"cherrex","Number":"4856","RawContent":null,"Title":"Use ONNX model in ML.Net","State":"open","Body":"Hello,\r\nI created and trained a model in a keras.\r\nThe basis is a simple and standard task for the classification of irises. The CSV file looks like this\r\n\r\nSepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm, Species\r\n5.1,3.5,1.4,0.2, iris-setosa\r\n\r\nModel in keras\r\nmodel = Sequential ()\r\nmodel.add (Dense (128, input_dim = 4, activation = 'relu'))\r\nmodel.add (Dense (Y.shape [1], activation = 'softmax'))\r\nmodel.compile (loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['categorical_accuracy'])\r\n\r\nI understand that this problem can be solved without keras using ML.NET, but the principle of using keras models in ML.NET is important to me.\r\nNext I save the model to ONNX\r\nonnx_model = keras2onnx.convert_keras (model, model.name)\r\nonnx.save_model (onnx_model, 'model_.onnx')\r\n\r\nTell me how in the future, I can use this model in ML.NET, for predictions?\r\n\r\nThanks in advance.","Url":"https://github.com/dotnet/machinelearning/issues/4856","RelatedDescription":"Open issue \"Use ONNX model in ML.Net\" (#4856)"},{"Id":"567268035","IsPullRequest":true,"CreatedAt":"2020-02-19T04:23:18","Actor":"frank-dong-ms","Number":"4854","RawContent":null,"Title":"not copy nuget package to build output to save disk space","State":"closed","Body":"dotnet core 3.0 build use too much disk space (more than 16GB) and cause build failure on CI, this is  caused by below line of code from build tools (\\Tools\\dotnetcli\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets):\r\n\r\n\r\n<!-- Don't copy local for netstandard projects. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == '' and\r\n                                            '$(TargetFrameworkIdentifier)' == '.NETStandard'\">false</CopyLocalLockFileAssemblies>\r\n\r\n    <!-- Don't copy local for netcoreapp projects before 3.0 or non-exe and non-component projects. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == '' and\r\n                                            '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and\r\n                                            ('$(_TargetFrameworkVersionWithoutV)' &lt; '3.0' or\r\n                                             ('$(HasRuntimeOutput)' != 'true' and '$(EnableDynamicLoading)' != 'true'))\">false</CopyLocalLockFileAssemblies>\r\n\r\n    <!-- All other project types should copy local. -->\r\n    <CopyLocalLockFileAssemblies Condition=\"'$(CopyLocalLockFileAssemblies)' == ''\">true</CopyLocalLockFileAssemblies>\r\n\r\n\r\nOverride CopyLocalLockFileAssemblies setting to false to save disk space.\r\n\r\nAlso, change windows netcore 3.0 build to use hosted test agent.","Url":"https://github.com/dotnet/machinelearning/pull/4854","RelatedDescription":"Closed or merged PR \"not copy nuget package to build output to save disk space\" (#4854)"},{"Id":"567291206","IsPullRequest":true,"CreatedAt":"2020-02-19T03:26:06","Actor":"mstfbl","Number":"4855","RawContent":null,"Title":"Debugging for disabled tests","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4855","RelatedDescription":"Open PR \"Debugging for disabled tests\" (#4855)"},{"Id":"565499652","IsPullRequest":true,"CreatedAt":"2020-02-18T23:50:50","Actor":"LittleLittleCloud","Number":"4844","RawContent":null,"Title":"add reference to onnx package in model project","State":"closed","Body":"We need to have reference to onnx package in .model project in order to load/save onnx model","Url":"https://github.com/dotnet/machinelearning/pull/4844","RelatedDescription":"Closed or merged PR \"add reference to onnx package in model project\" (#4844)"},{"Id":"566695562","IsPullRequest":false,"CreatedAt":"2020-02-18T21:40:20","Actor":"mstfbl","Number":"4850","RawContent":null,"Title":"CentOS CI builds failing due to insufficient storage on agent machines/pipelines","State":"closed","Body":"As seen in the latest builds of PRs #4849 and #4846, the CentOS debug and release builds are failing due to out-of-memory issues.\r\n\r\nThe debug build on Centos_x64_NetCoreApp30 is failing due to insufficient storage during the phase of [building packages](https://dev.azure.com/dnceng/public/_build/results?buildId=525273&view=logs&j=162a17ee-8d83-5c8b-18ac-724700af9c9e&t=4fd67eef-610a-5fe5-ffee-3a77270fec0b&l=386). The release build on Centos_x64_NetCoreApp30 is also failing due to insufficient storage, but this time this happens when [benchmark data is being downloaded](https://dev.azure.com/dnceng/public/_build/results?buildId=525273&view=logs&j=180e3155-cea9-5b82-0850-5dfb7f33e22f&t=594e75e0-8e83-50e9-4d0d-362f44590401&l=41). \r\n\r\nCentOS debug build output:\r\n\r\n> 2020-02-18T05:02:16.7235083Z Build FAILED.\r\n> 2020-02-18T05:02:16.7235297Z \r\n> 2020-02-18T05:02:16.7241364Z /__w/1/s/Tools/dotnetcli/sdk/3.0.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : No space left on device [/__w/1/s/pkg/Microsoft.ML.DnnImageFeaturizer.ResNet101/Microsoft.ML.DnnImageFeaturizer.ResNet101.nupkgproj]\r\n> 2020-02-18T05:02:16.7241930Z /__w/1/s/Tools/dotnetcli/sdk/3.0.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : No space left on device [/__w/1/s/pkg/Microsoft.ML.DnnImageFeaturizer.ResNet101/Microsoft.ML.DnnImageFeaturizer.ResNet101.symbols.nupkgproj]\r\n> 2020-02-18T05:02:16.7242290Z /__w/1/s/Tools/dotnetcli/sdk/3.0.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : No space left on device [/__w/1/s/pkg/Microsoft.ML.DnnImageFeaturizer.ResNet50/Microsoft.ML.DnnImageFeaturizer.ResNet50.nupkgproj]\r\n> 2020-02-18T05:02:16.7242672Z /__w/1/s/Tools/dotnetcli/sdk/3.0.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : No space left on device [/__w/1/s/pkg/Microsoft.ML.DnnImageFeaturizer.ResNet50/Microsoft.ML.DnnImageFeaturizer.ResNet50.symbols.nupkgproj]\r\n> 2020-02-18T05:02:16.7243007Z /__w/1/s/Tools/dotnetcli/sdk/3.0.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(198,5): error : No space left on device [/__w/1/s/pkg/Microsoft.ML.Mkl.Redist/Microsoft.ML.Mkl.Redist.nupkgproj]\r\n\r\nCentOS release build output:\r\n\r\n> Downloading from \"https://aka.ms/mlnet-resources/benchmarks/digits.csv\" to \"/__w/1/s/test/data/external/digits.csv\" (264,712 bytes).\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KTest240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KTest240kRows.tsv\" (172,985,414 bytes).\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KTrain720kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KTrain720kRows.tsv\" (519,712,566 bytes).\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): warning MSB3924: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\". Beginning retry 2 in 5000ms. No space left on device\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): warning MSB3924: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\". Beginning retry 3 in 5000ms. No space left on device\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): warning MSB3924: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\". Beginning retry 4 in 5000ms. No space left on device\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): warning MSB3924: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\". Beginning retry 5 in 5000ms. No space left on device\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): warning MSB3924: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\". Beginning retry 6 in 5000ms. No space left on device\r\n>   Downloading from \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\" to \"/__w/1/s/test/data/external/MSLRWeb10KValidate240kRows.tsv\" (169,246,139 bytes).\r\n> /__w/1/s/build.proj(90,5): error : MSB3923: Failed to download file \"https://aka.ms/mlnet-resources/benchmarks/MSLRWeb10KValidate240kRows.tsv\".  No space left on device\r\n> \r\n> Build FAILED.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4850","RelatedDescription":"Closed issue \"CentOS CI builds failing due to insufficient storage on agent machines/pipelines\" (#4850)"},{"Id":"567137571","IsPullRequest":false,"CreatedAt":"2020-02-18T20:25:32","Actor":"mstfbl","Number":"4852","RawContent":null,"Title":"Varying prediction error tolerances for different builds & their notations","State":"open","Body":"In our codebase there are instances where differing error tolerance values are defined for our different builds. **It is currently difficult for us to track where we have set these differing error tolerance values.**\r\n\r\nHere is one instances where the error tolerance values are different for Windows and Linux builds (a value for MacOS is defined as well, but is currently commented out):\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L123-L146\r\n\r\nAlso in `MatrixFactorizationTests.cs`, there are 3 different cases (in addition to the example above) where varying prediction errors are asserted:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L356-L357\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L469-L470\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/3dcac4909433cb4a7c70ed1cbd216c2150bedfe0/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L609-L610\r\n\r\nIt would be a good idea to track these prediction error rates, as this way we can easily find where we've defined varying tolerances for different builds.\r\n\r\nOne way to do this is by adding an extra trait to each function that has varying tolerances, and then adding logs stating varying tolerances are occuring:\r\n\r\n```\r\n[TestCategory(\"VaryingTolerances\")]\r\npublic void MatrixFactorizationSimpleTrainAndPredict() {\r\n...\r\nConsole.WriteLine(\"Tolerance values for Windows, MacOS, and Linux builds are different.\");\r\n...\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4852","RelatedDescription":"Open issue \"Varying prediction error tolerances for different builds & their notations\" (#4852)"},{"Id":"565591104","IsPullRequest":true,"CreatedAt":"2020-02-18T17:54:19","Actor":"frank-dong-ms","Number":"4845","RawContent":null,"Title":"enable and disable some tests","State":"closed","Body":"1. re-enable SavePipeSlidingWindow related test, have a deeper look at these tests and they are also infected by the race condition issue in WatierWaiter that cause data load incomplete. Error look like below: System.InvalidOperationException : Right has more rows at position: 110\r\nhttps://github.com/dotnet/machinelearning/pull/4829\r\n\r\n2. Disable 2 tensorflow related test as we met below error: System.AccessViolationException : Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4845","RelatedDescription":"Closed or merged PR \"enable and disable some tests\" (#4845)"},{"Id":"565028450","IsPullRequest":true,"CreatedAt":"2020-02-17T20:37:54","Actor":"mstfbl","Number":"4837","RawContent":null,"Title":"[WIP, Test Stability] Running on private agent pool","State":"closed","Body":"Testing private agent pool MachineLearning Test https://dev.azure.com/dnceng/_settings/agentpools?poolId=80&view=jobs","Url":"https://github.com/dotnet/machinelearning/pull/4837","RelatedDescription":"Closed or merged PR \"[WIP, Test Stability] Running on private agent pool\" (#4837)"},{"Id":"565742168","IsPullRequest":false,"CreatedAt":"2020-02-15T12:33:39","Actor":"mad-mike","Number":"4848","RawContent":null,"Title":"Misleading error message when a column is not found","State":"open","Body":"- version 1.5.0-preview\r\n\r\nWhen I tried to create a prediction engine for one of my first models, I received an `ArgumentOutOfRangeException`. I think the error message means to tell me that the column named 'Features1' with the role 'Feature' was not found.\r\nI would have expected to see my input, 'Features1', in quotes, rather than the column role, which should only take fixed values anyway.\r\n\r\n_Feature column 'Features1' not found_ would have come more naturally to me.\r\n\r\n\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/78c406cf1f4a72751e389074e2f88574fafee8ea/src/Microsoft.ML.Core/Data/RoleMappedSchema.cs#L229\r\n\r\n```Csharp\r\nAn exception of type 'System.ArgumentOutOfRangeException' occurred in Microsoft.ML.Core.dll but was not handled in user code: 'Features1 column 'Feature' not found'\r\n   at Microsoft.ML.Data.RoleMappedSchema.MapFromNames(DataViewSchema schema, IEnumerable`1 roles, Boolean opt)\r\n   at Microsoft.ML.Data.RoleMappedSchema..ctor(DataViewSchema schema, IEnumerable`1 roles, Boolean opt)\r\n   at Microsoft.ML.Data.GenericScorer.Bindings.Create(IHostEnvironment env, ISchemaBindableMapper bindable, DataViewSchema input, IEnumerable`1 roles, String suffix, Boolean user)\r\n   at Microsoft.ML.Data.GenericScorer.Bindings.ApplyToSchema(IHostEnvironment env, DataViewSchema input)\r\n   at Microsoft.ML.Data.GenericScorer..ctor(IHostEnvironment env, GenericScorer transform, IDataView data)\r\n   at Microsoft.ML.Data.GenericScorer.ApplyToDataCore(IHostEnvironment env, IDataView newSource)\r\n   at Microsoft.ML.Data.RowToRowScorerBase.ApplyToData(IHostEnvironment env, IDataView newSource)\r\n   at Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft.ML.ITransformer.GetRowToRowMapper(DataViewSchema inputSchema)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngine`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4848","RelatedDescription":"Open issue \"Misleading error message when a column is not found\" (#4848)"},{"Id":"565635124","IsPullRequest":true,"CreatedAt":"2020-02-15T01:14:36","Actor":"frank-dong-ms","Number":"4847","RawContent":null,"Title":"Crash issue","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4847","RelatedDescription":"Open PR \"Crash issue\" (#4847)"},{"Id":"565606269","IsPullRequest":true,"CreatedAt":"2020-02-14T23:31:17","Actor":"mstfbl","Number":"4846","RawContent":null,"Title":"Re-enabling MatrixFactorizationSimpleTrainAndPredict()","State":"open","Body":"Re-enabling disabled test MatrixFactorizationSimpleTrainAndPredict(). The test was failing due to tolerance value being too small for Linux builds.","Url":"https://github.com/dotnet/machinelearning/pull/4846","RelatedDescription":"Open PR \"Re-enabling MatrixFactorizationSimpleTrainAndPredict()\" (#4846)"},{"Id":"565404883","IsPullRequest":false,"CreatedAt":"2020-02-14T15:43:17","Actor":"jeff-brooks","Number":"4843","RawContent":null,"Title":"Is this anomaly detection approach doable?","State":"open","Body":"First time creating an issue, apologies in advance if I'm doing it wrong.\r\n\r\nAnomaly detection in general seems to go against my expectations. I've looked at every example I can find for anomaly detection and they all follow the pattern of having some dataset that the anomaly detector examines to see what anomalies it can find within that data set.\r\n\r\nMy needs are different than that. I want to provide the anomaly detector a set of data that has no anomalies. This dataset should be used to train and create a model for comparison against a second data sets to see what anomalies it detects in this second data set. \r\n\r\nThus far, my attempts have ended up with an anomaly detector that finds \"anomalies\" in my first data set, which is not valid in my scenario. The first data set should be considered all valid (non-anomaly) values, no matter what seemingly spikes or change points may exist within it. The second data set should be examined for spikes or change points through the lens of was seen in the first data set.\r\n\r\nCan this be done? I've been trying to make it work on my own but it seems like either this is not how anomaly detection was intended to work, or I'm completely off base in my implementation.","Url":"https://github.com/dotnet/machinelearning/issues/4843","RelatedDescription":"Open issue \"Is this anomaly detection approach doable?\" (#4843)"},{"Id":"565231976","IsPullRequest":false,"CreatedAt":"2020-02-14T10:18:17","Actor":"pardont","Number":"4842","RawContent":null,"Title":"how to generate tensorflow inception-v1 model using ML.NET?","State":"open","Body":"Hi, I am using ML.NET to classify image, both online and offline mode.\r\nonline mode:  app send image to web server, the server classify image.\r\noffline mode: app download trained model, and classify image locally.\r\n\r\nhow to generate tensorflow inception-v1 model using ML.NET? \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4842","RelatedDescription":"Open issue \"how to generate tensorflow inception-v1 model using ML.NET?\" (#4842)"},{"Id":"565060710","IsPullRequest":true,"CreatedAt":"2020-02-14T02:14:44","Actor":"antoniovs1029","Number":"4841","RawContent":null,"Title":"[Draft] Adding KeyToValueTransformers before finishing exporting to ONNX","State":"open","Body":"In this PR I try to add a KeyToValueTransformer at the end of the `transforms` list that is used by `SaveOnnxCommand`, so that the resulting ONNX model can map values back from the keys, even when the NimbusML pipeline doesn't include the transformers to map them back.\r\n\r\nThis is a Draft PR so there are several things that will need to be added.\r\n\r\nFixes https://github.com/microsoft/NimbusML/issues/431 and https://github.com/microsoft/NimbusML/issues/426","Url":"https://github.com/dotnet/machinelearning/pull/4841","RelatedDescription":"Open PR \"[Draft] Adding KeyToValueTransformers before finishing exporting to ONNX\" (#4841)"},{"Id":"565046323","IsPullRequest":false,"CreatedAt":"2020-02-14T01:21:26","Actor":"frank-dong-ms","Number":"4840","RawContent":null,"Title":"generate test failure rate report using runfo tool","State":"open","Body":"https://github.com/jaredpar/random/blob/master/dotnet/Azure/runfo/README.md","Url":"https://github.com/dotnet/machinelearning/issues/4840","RelatedDescription":"Open issue \"generate test failure rate report using runfo tool\" (#4840)"},{"Id":"565046013","IsPullRequest":false,"CreatedAt":"2020-02-14T01:20:22","Actor":"frank-dong-ms","Number":"4839","RawContent":null,"Title":"update build to include a binlog instead of the plain text err/wrn/out files","State":"open","Body":"http://msbuildlog.com/ \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4839","RelatedDescription":"Open issue \"update build to include a binlog instead of the plain text err/wrn/out files\" (#4839)"},{"Id":"565035782","IsPullRequest":true,"CreatedAt":"2020-02-14T00:46:39","Actor":"sharwell","Number":"4838","RawContent":null,"Title":"Optimize generic MethodInfo for Func<T1, T2, TResult>","State":"open","Body":"🚧 Builds on #4836","Url":"https://github.com/dotnet/machinelearning/pull/4838","RelatedDescription":"Open PR \"Optimize generic MethodInfo for Func<T1, T2, TResult>\" (#4838)"},{"Id":"565023088","IsPullRequest":true,"CreatedAt":"2020-02-14T00:05:57","Actor":"sharwell","Number":"4836","RawContent":null,"Title":"Optimize generic MethodInfo for Func<T, TResult>","State":"open","Body":"🚧 Builds on #4588","Url":"https://github.com/dotnet/machinelearning/pull/4836","RelatedDescription":"Open PR \"Optimize generic MethodInfo for Func<T, TResult>\" (#4836)"},{"Id":"564927599","IsPullRequest":true,"CreatedAt":"2020-02-13T23:08:04","Actor":"sharwell","Number":"4835","RawContent":null,"Title":"Enable MSML_PrivateFieldName for the full solution","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4835","RelatedDescription":"Closed or merged PR \"Enable MSML_PrivateFieldName for the full solution\" (#4835)"},{"Id":"564786910","IsPullRequest":true,"CreatedAt":"2020-02-13T20:18:45","Actor":"sharwell","Number":"4833","RawContent":null,"Title":"Enable MSML_ParameterLocalVarName for the full solution","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4833","RelatedDescription":"Closed or merged PR \"Enable MSML_ParameterLocalVarName for the full solution\" (#4833)"},{"Id":"564882152","IsPullRequest":true,"CreatedAt":"2020-02-13T18:49:37","Actor":"Lynx1820","Number":"4834","RawContent":null,"Title":"WIP: Fixing TextNormalizing test issue with Linux machines","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4834","RelatedDescription":"Open PR \"WIP: Fixing TextNormalizing test issue with Linux machines\" (#4834)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-20T05:30:40.1036059Z","RunDurationInMilliseconds":689}