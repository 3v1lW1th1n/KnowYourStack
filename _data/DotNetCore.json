{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":7,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null},{"Title":"F# and .NET Core Roadmap Update","PublishedOn":"2017-08-14T00:00:00","CommentsCount":58,"FacebookCount":0,"Summary":"Now that .NET Core 2.0 has been released, we wanted to take some time to talk about F# and .NET Core. F# and .NET Core 1.0 F# has been supported on .NET Core and .NET Standard since their 1.0 releases. In the months leading up to the release of .NET Core 1.0, Enrico Sada from... <a aria-label=\"read more about F# and .NET Core Roadmap Update\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"},{"Id":"6404140964","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:08:17","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/83","RelatedDescription":"Opened issue \"Modify CSP policy to allow embedding of youtube videos\" (#83) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding the ReactiveUI video.\r\n\r\nhttps://developers.google.com/web/fundamentals/security/csp/\r\n\r\n```\r\nchild-src lists the URLs for workers and embedded frame contents. For example: child-src https://youtube.com would enable embedding videos from YouTube but not from other origins. Use this in place of the deprecated frame-src directive.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6597644851","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:09:22","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13942","RelatedDescription":"Closed issue \"[Arm64/Unix] Crossgen Microsoft.CodeAnalysis.dll segmentation fault\" (#13942) at dotnet/coreclr","RelatedBody":"On 7d6cc7c64, I am seeing segmentation fault when running \r\n```\r\n./crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $PWD Microsoft.CodeAnalysis.dll\r\n```\r\n\r\nThe problem did not exist on 18ab3567e2"},{"Id":"6597644823","Type":"PullRequestEvent","CreatedAt":"2017-09-15T21:09:22","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14016","RelatedDescription":"Merged pull request \"JIT: Fix crossgen failure in gtTryRemoveBoxUpstreamEffects\" (#14016) at dotnet/coreclr","RelatedBody":"In some R2R expansions the type handle is not an explicit operand to\r\nthe newobj helper. So we must bail out of removal attempts when the\r\ntype handle is desired and we see such an expansion.\r\n\r\nCloses #13942.\r\nAlso likely will fix #13930."},{"Id":"6597644813","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:09:22","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13930","RelatedDescription":"Closed issue \"Test failure: CoreMangLib_cti._system_convert_ConvertToByte_ConvertToByte_/_system_convert_ConvertToByte_ConvertToByte_cmd\" (#13930) at dotnet/coreclr","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `CoreMangLib_cti._system_convert_ConvertToByte_ConvertToByte_/_system_convert_ConvertToByte_ConvertToByte_cmd` has failed.\n\n/home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Work/bf1d0dfb-e3ce-4276-9e7f-d721974c5aaf/Unzip/system/convert/ConvertToByte/ConvertToByte.sh: line 154:  7819 Segmentation fault      (core dumped) $_DebuggerFullPath \"$CORE_ROOT/crossgen\" /Platform_Assemblies_Paths $CORE_ROOT:$PWD/IL:$PWD /in ConvertToByte.org /out ConvertToByte.exe\n    \n    \n    Return code:      1\n    Raw output file:      /home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Work/bf1d0dfb-e3ce-4276-9e7f-d721974c5aaf/Unzip/Reports\\CoreMangLib.cti\\system\\convert\\ConvertToByte\\ConvertToByte.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    in takeLock\n    /home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Payload/crossgen /Platform_Assemblies_Paths /home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Payload:/home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Work/bf1d0dfb-e3ce-4276-9e7f-d721974c5aaf/Unzip/system/convert/ConvertToByte/IL:/home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Work/bf1d0dfb-e3ce-4276-9e7f-d721974c5aaf/Unzip/system/convert/ConvertToByte /in ConvertToByte.org /out ConvertToByte.exe\n    Crossgen failed with exitcode: 139\n    in ReleaseLock\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Payload\n    > /home/helixbot/dotnetbuild/work/2680aeca-5c12-4919-9686-5f3f045b543b/Work/bf1d0dfb-e3ce-4276-9e7f-d721974c5aaf/Unzip/system/convert/ConvertToByte/ConvertToByte.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20170913.01 (Ready-To-Run Tests)\nFailing configurations:\n- redhat.69.amd64\n  - x64\n- ubuntu.1710.amd64\n  - x64\n- ubuntu.1604.amd64\n  - x64\n- ubuntu.1404.amd64\n  - x64\n- fedora.25.amd64\n  - x64\n- redhat.72.amd64\n  - x64\n- debian.82.amd64\n  - x64\n- osx.1012.amd64\n  - x64\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20170913.01/workItem/CoreMangLib.cti.XUnitWrapper/analysis/xunit/CoreMangLib_cti._system_convert_ConvertToByte_ConvertToByte_~2F_system_convert_ConvertToByte_ConvertToByte_cmd"},{"Id":"6597634146","Type":"IssuesEvent","CreatedAt":"2017-09-15T21:06:13","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14022","RelatedDescription":"Opened issue \"Potential CQ improvements in Dictionary<K,T>\" (#14022) at dotnet/coreclr","RelatedBody":"`Dictionary<K,T>` has some inefficient CQ in key inner loops, in part because the jit has to assume that calls to the comparer may side effect the dictionary itself. For instance in `FindEntry`'s search loop:\r\n```C#\r\nfor (int i = buckets[hashCode % buckets.Length]; i >= 0; i = entries[i].next)\r\n{\r\n   if (entries[i].hashCode == hashCode && comparer.Equals(entries[i].key, key)) return i;\r\n}\r\n```\r\nthe jit must assume that both `comparer` and `entries` are modified by the call to `comparer.Equals`. This yields native code like the following:\r\n```asm\r\nG_M51456_IG03:\r\n       mov      rcx, gword ptr [rsi+16]         // reload entries\r\n       cmp      ebp, dword ptr [rcx+8]          // entries.Length bounds check\r\n       jae      SHORT G_M51456_IG09\r\n       movsxd   rdx, ebp\r\n       lea      r14, [rdx+2*rdx]\r\n       lea      rcx, bword ptr [rcx+8*r14+16]   // & entries[i]\r\n       cmp      dword ptr [rcx+16], ebx         // entries[i].key == key?\r\n       jne      SHORT G_M51456_IG04             // nope, try next\r\n       mov      rdx, gword ptr [rsi+24]         // reload comparer\r\n       mov      r8, qword ptr [rcx+8]           // entries[i].hashCode\r\n       mov      rcx, rdx\r\n       mov      rdx, r8\r\n       mov      r8, rdi                         // key\r\n       lea      r11, [(reloc)]                  // why not CSE'd?\r\n       cmp      dword ptr [rcx], ecx            // null check on comparer (quasi redundant)\r\n       call     qword ptr [r11]System.Collections.Generic.IEqualityComparer`1[Int64][System.Int64]:Equals(long,long):bool:this\r\n       test     eax, eax\r\n       jne      SHORT G_M51456_IG07\r\nG_M51456_IG04:\r\n       mov      rax, gword ptr [rsi+16]          // reload entries\r\n       cmp      ebp, dword ptr [rax+8]           // redundant bounds check for i = entries[i].next\r\n       jae      SHORT G_M51456_IG09\r\n       mov      ebp, dword ptr [rax+8*r14+36]    // update i \r\n       test     ebp, ebp                         // continue if i >= 0\r\n       jge      SHORT G_M51456_IG03\r\n```\r\nSo at `IG04`, the jit re-fetches `entries`, then its length, and then does a redundant bounds check.\r\n\r\nThere is also some register shuffling before the call to the comparer; this is caused in part by the fact that the comparer object is  also be re-fetched from the dictionary before the call.\r\n\r\nThese issues are unlikely to go away with proposed/conceptual changes to allow default comparer dictionaries to devirtualize, since the possibility of a non-default comparer with unknown effects will still be present. One could perhaps avoid this by unswitching on the \"is default\" across the entire loop.\r\n\r\nManually caching the comparer and equals array into locals as in the following:\r\n```C#\r\n// Cache these two fields in locals so that it is clear to the jit\r\n// that they are not modified by the calls to the comparer.\r\nIEqualityComparer<TKey> lComparer = comparer;\r\nEntry[] lEntries = entries;\r\n\r\nint hashCode = lComparer.GetHashCode(key) & 0x7FFFFFFF;\r\nfor (int i = buckets[hashCode % buckets.Length]; i >= 0; i = lEntries[i].next)\r\n{\r\n    if (lEntries[i].hashCode == hashCode && lComparer.Equals(lEntries[i].key, key)) return i;\r\n}\r\n```\r\n avoids these issues and produces tighter inner loop code (statically, 6 instructions less all told)\r\n```asm\r\nG_M51456_IG03:\r\n       cmp      esi, r15d\r\n       jae      SHORT G_M51456_IG09\r\n       movsxd   rdx, esi\r\n       lea      rdx, [rdx+2*rdx]\r\n       lea      r12, bword ptr [rbp+8*rdx+16]\r\n       cmp      dword ptr [r12+16], r14d\r\n       jne      SHORT G_M51456_IG04\r\n       mov      rdx, qword ptr [r12+8]\r\n       mov      rcx, rbx\r\n       mov      r8, rdi\r\n       lea      r11, [(reloc)]\r\n       cmp      dword ptr [rcx], ecx    /// seems like this is now fully redundant\r\n       call     qword ptr [r11]System.Collections.Generic.IEqualityComparer`1[Int64][System.Int64]:Equals(long,long):bool:this\r\n       test     eax, eax\r\n       jne      SHORT G_M51456_IG07\r\nG_M51456_IG04:\r\n       mov      esi, dword ptr [r12+20]\r\n       test     esi, esi\r\n       jge      SHORT G_M51456_IG03\r\n```\r\nHowever this alters dictionary behavior in cases where the comparer side effects the dictionary. I am not sure if such behaviors are worth preserving, and it's not clear they are at all useful, but they are currently permitted.\r\n\r\nIf this sort of change seems reasonable, I'll go and apply it to the other methods that use the comparer, and do some benchmarking to see what the overall impact is on performance.\r\n\r\nStill need to look at why the null check on the comparer remains; it should now be fully redundant.\r\n\r\n@stephentoub @jkotas @benaadams @dotnet/jit-contrib thoughts?\r\n"},{"Id":"6597537540","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:39:40","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14021","RelatedDescription":"Opened pull request \"Change jit notifications so that they pass the native code address. \" (#14021) at dotnet/coreclr","RelatedBody":"This fixes !bpmd so that it will set the correct breakpoint on tiered jitted methods."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6597606996","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:58:44","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7667","RelatedDescription":"Opened issue \"Separate the logic of including extra GeneratedInstallers from Package step\" (#7667) at dotnet/cli","RelatedBody":"This step is required for Publish target, however, Publish should not depends on Package. So the logic should be separated.\r\n\r\nhttps://github.com/dotnet/cli/blob/c266e398cf55df0667b76b3afc7930b6caeeace9/build/package/Installer.MSI.targets#L47\r\n\r\n```xml\r\n      <!-- Consumed By Publish -->\r\n      <ItemGroup>\r\n        <GeneratedInstallers Include=\"$(SdkInstallerFile);$(CombinedFrameworkSdkHostInstallerFile)\" />\r\n        <GeneratedInstallers Condition=\" '$(Architecture)' == 'x86' \" Include=\"$(MSBuildExtensionsInstallerFile)\" />\r\n      </ItemGroup>\r\n```\r\n\r\nShould be separated"},{"Id":"6597598878","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:56:23","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7647","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.4.0-preview3-4475 into cli\" (#7647) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.4.0-preview3-4475 into cli release/2.0-vs branch"},{"Id":"6597566550","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:47:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7664","RelatedDescription":"Merged pull request \"Moving the runtime dependency to 1.0.7 and 1.1.4.\" (#7664) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli @leecow @eerhardt \r\n"},{"Id":"6597545382","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:41:53","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7666","RelatedDescription":"Opened pull request \"pin stage0 due to build failure\" (#7666) at dotnet/cli","RelatedBody":"Put back the dependency of package. Duplicate a publish step with package and use that one in all linux distro specific\r\n"},{"Id":"6597494759","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:28:03","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7665","RelatedDescription":"Merged pull request \"pin stage0 due to build failure\" (#7665) at dotnet/cli","RelatedBody":""},{"Id":"6597050760","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:31:11","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7665","RelatedDescription":"Opened pull request \"pin stage0 due to build failure\" (#7665) at dotnet/cli","RelatedBody":""},{"Id":"6597003157","Type":"PullRequestEvent","CreatedAt":"2017-09-15T18:19:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7664","RelatedDescription":"Opened pull request \"Moving the runtime dependency to 1.0.7 and 1.1.4.\" (#7664) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli @leecow @eerhardt \r\n"},{"Id":"6596724689","Type":"IssuesEvent","CreatedAt":"2017-09-15T17:08:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/2440","RelatedDescription":"Closed issue \"Project.json with dependency \"Microsoft.NETCore.App\" and framework \"NetStandard1.5\" should be disallowed\" (#2440) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\ndotnet new\nvi project.json\n{\n  \"version\": \"1.0.0-*\",\n  \"compilationOptions\": {\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.0-rc2-3002349\"\n    }\n  },\n  \"runtimes\" : {\n     \"osx.10.11-x64\": {}\n  },\n  \"frameworks\": {\n    \"netstandard1.5\": {}\n  }\n}\ndotnet restore\n## Expected  behavior\n\nThis should give an error message that says this combination does not make sense and offer a suggestion.  \n1) If you want a .NET Core App then use framework \"netcoreapp1.0\".  \n2) If you want a portable .NET library use dependency \"NETStandard.Library\"\n## Actual behavior\n\ndotnet-restore and dotnet-build work, but dotnet-run, dotnet-publish, dotnet-pack all return incorrect results due to the mix match of dependencies and frameworks.\n## Environment data\n\n`dotnet --info` output:\n.NET Command Line Tools (1.0.0-rc2-002349)\n\nProduct Information:\n Version:     1.0.0-rc2-002349\n Commit Sha:  ed9309b90b\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  10.11\n OS Platform: Darwin\n RID:         osx.10.11-x64\n"},{"Id":"6596712828","Type":"IssuesEvent","CreatedAt":"2017-09-15T17:05:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7661","RelatedDescription":"Closed issue \"Mac version generates files with Windows newline\" (#7661) at dotnet/cli","RelatedBody":"it will mess up while the git enables autocrlf\r\n\r\n## Steps to reproduce\r\n\r\ndotnet new sln\r\n\r\n## Expected  behavior\r\n\r\na solution file with git friendly newline\r\n\r\n## Actual behavior\r\n\r\na solution file with windows newline\r\n\r\n```diff\r\n Microsoft Visual Studio Solution File, Format Version 12.00\r\n-# Visual Studio 2012\r\n-Project(\"{f2a71f9b-5d33-465a-a702-920d77279786}\") = \"HelloService\", \"HelloService\\HelloService.fsproj\", \"{35F4CAAD-FB1C-4904-8835-5E531737311E}\"\r\n+# Visual Studio 15^M\r\n+VisualStudioVersion = 15.0.26124.0^M\r\n+MinimumVisualStudioVersion = 15.0.26124.0^M\r\n+Project(\"{6EC3EE1D-3C4E-46DD-8F32-0CC8E7565705}\") = \"HelloService\", \"HelloService\\HelloService.fsproj\", \"{B7559ADD-77E4-4914-9A35-F1ECD66A4985}\"^M\r\n EndProject\r\n Global\r\n        GlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n                Debug|Any CPU = Debug|Any CPU\r\n+               Debug|x64 = Debug|x64^M\r\n+               Debug|x86 = Debug|x86^M\r\n                Release|Any CPU = Release|Any CPU\r\n+               Release|x64 = Release|x64^M\r\n+               Release|x86 = Release|x86^M\r\n+       EndGlobalSection^M\r\n+       GlobalSection(SolutionProperties) = preSolution^M\r\n+               HideSolutionNode = FALSE^M\r\n        EndGlobalSection\r\n        GlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|Any CPU.ActiveCfg = Debug|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|Any CPU.Build.0 = Debug|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x64.ActiveCfg = Debug|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x64.Build.0 = Debug|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x86.ActiveCfg = Debug|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x86.Build.0 = Debug|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|Any CPU.ActiveCfg = Release|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|Any CPU.Build.0 = Release|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x64.ActiveCfg = Release|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x64.Build.0 = Release|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x86.ActiveCfg = Release|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x86.Build.0 = Release|x86^M\r\n        EndGlobalSection\r\n EndGlobal\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6592952439","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:00:23","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Closed issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app, but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nPlease know we also tried different combinations of including the System.Runtime package, without result.  \r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6592432642","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Closed issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nNote: This is the most expensive condition in the entire build and give it only runs for .NET Standard projects it's overhead will be higher for a solution containing only .NET Standard projects.\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6591650102","Type":"IssuesEvent","CreatedAt":"2017-09-14T16:47:02","Actor":"prakashnandshukla","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/495","RelatedDescription":"Opened issue \" Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:  Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \" (#495) at dotnet/standard","RelatedBody":"Hi \r\n\r\nI am working on MS Dynamics CRM integration project with box.com, I have added Box.V2 .dll file as a reference assemble and I am using properties these assembly to generate token using JWT authentication.\r\nWhen I am creating any record I am getting this exception/error.\r\n Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:\r\n Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \r\n\r\nThanks\r\n[Box SDK exception.txt](https://github.com/dotnet/standard/files/1303750/Box.SDK.exception.txt)\r\n"},{"Id":"6589113085","Type":"IssuesEvent","CreatedAt":"2017-09-14T07:36:24","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Opened issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6588098595","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:45:49","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Opened issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app), but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6587834164","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:58:12","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Merged pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."},{"Id":"6587833217","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:57:52","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/491","RelatedDescription":"Merged pull request \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nFixing Netstandard.Library package and reving up the package version to 2.0.1"},{"Id":"6587751094","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:29:38","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Opened pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6597597556","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:56:02","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24015","RelatedDescription":"Merged pull request \"Remove ContinueAsError in sgen test\" (#24015) at dotnet/corefx","RelatedBody":"@shmao "},{"Id":"6597591607","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:54:21","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24033","RelatedDescription":"Closed issue \"Des decrypt raised 'Offset and length were out of bounds... '\" (#24033) at dotnet/corefx","RelatedBody":"\r\nMy code like below. It works fine in .net framework4.6.1, But it raised exception in .net core 2.0.\r\n The exception raised in the line ` cs.Write(inputByteArray, 0, inputByteArray.Length);\r\n` .\r\nThe message is `System.ArgumentException:“Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.”\r\n`.\r\n\r\nAnyone help?\r\n\r\n\r\n```c#\r\nusing System;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\n\r\nnamespace ConsoleApp2\r\n{\r\n    class Program\r\n    {\r\n        public static string Md5Hash(string input)\r\n        {\r\n            MD5CryptoServiceProvider md5Hasher = new MD5CryptoServiceProvider();\r\n            byte[] data = md5Hasher.ComputeHash(Encoding.Default.GetBytes(input));\r\n            StringBuilder sBuilder = new StringBuilder();\r\n            for (int i = 0; i < data.Length; i++)\r\n            {\r\n                sBuilder.Append(data[i].ToString(\"x2\"));\r\n            }\r\n            return sBuilder.ToString().ToUpper();\r\n        }\r\n\r\n\r\n        public static string Decrypt(string Text, string sKey)\r\n        {\r\n            DESCryptoServiceProvider des = new DESCryptoServiceProvider();\r\n            int len = 0;\r\n            len = Text.Length / 2;\r\n            byte[] inputByteArray = new byte[len];\r\n            int x = 0;\r\n            int i = 0;\r\n            for (x = 0; x <= len - 1; x++)\r\n            {\r\n                i = Convert.ToInt32(Text.Substring(x * 2, 2), 16);\r\n                inputByteArray[x] = Convert.ToByte(i);\r\n            }\r\n            des.Key = ASCIIEncoding.ASCII.GetBytes(Md5Hash(sKey).Substring(0, 8));\r\n            des.IV = ASCIIEncoding.ASCII.GetBytes(Md5Hash(sKey).Substring(0, 8));\r\n            System.IO.MemoryStream ms = new System.IO.MemoryStream();\r\n            CryptoStream cs = new CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write);\r\n            cs.Write(inputByteArray, 0, inputByteArray.Length);\r\n            cs.FlushFinalBlock();\r\n            return Encoding.Default.GetString(ms.ToArray());\r\n        }\r\n\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var s = Decrypt(\"973335E697BFF06DC9F9481008526545458CCEB78D8717561617C2414464DBF451E44D4071EB03788CAA6B4560BA127493EF142A95AEF87349F4ADFDA82C5810FA2319F45E275057700474332D438849F7F26B63063EE6A3BD9D15354922C8E5965D20F075060C23FEFDF8C013A74D8640EE59D9DA687BD30CFD41B861F4DCF0294A4A4AF699738C8E6387275B742CE647EE733B572A8EDEAA099E854D11095D\", \"buyongji\");\r\n            Console.WriteLine(s);\r\n        }\r\n    }\r\n}\r\n```"},{"Id":"6597571946","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:49:07","Actor":"huanwu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24084","RelatedDescription":"Merged pull request \"Generate Microsoft.XmlSerializer.Generator.props.\" (#24084) at dotnet/corefx","RelatedBody":"Generate the props file on the fly so that the file can use the correct reference version."},{"Id":"6597400424","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:02:29","Actor":"kouvel","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24087","RelatedDescription":"Opened pull request \"Reenable Task stack guard tests\" (#24087) at dotnet/corefx","RelatedBody":"Fixed by https://github.com/dotnet/coreclr/pull/14015\r\nReenables tests in and closes https://github.com/dotnet/corefx/issues/23201"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6597589870","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:53:52","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22134","RelatedDescription":"Merged pull request \"Add regression tests for 15.3 closure conversion crashes\" (#22134) at dotnet/roslyn","RelatedBody":"Fixes #21811\r\nFixes #21645\r\nFixes #21543"},{"Id":"6597589846","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:53:52","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21543","RelatedDescription":"Closed issue \"Compiler crashes in VS15.3, analyzer throws NullReferenceException in master, when call local function from nested lambda\" (#21543) at dotnet/roslyn","RelatedBody":"I found the issue #16895 that mentioning compiler crash caused by local function and nested lambda. But  I can build that issue's code successfully in VS15.3 so I think this issue is different issue.\r\n\r\n**Version Used**: VS2017 15.3.0, master(d67a95f1c01dc7064a47caecf02326a060292649)([demo at  sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABADAAmwEYBuAWAChLsAmfABQQHsBzBCMSgb0vz/1gQYASwDGhACz4AsnBgALJigAUxOhFEimAOwCU+LvgC+lXv0Ejx2KdIjDty3Wb48K/d/nsx8ANwgAbAFc4fABefFxyNw8+WQUlZUcwgD5nD1cYmP8mUQDHKMyPa3xs3P9HNMKMwsyAYR0oJn84ADoAdQRheAAZezhlPyC4XQKamLjFFSTQ1Oix92r5zNK8kcr5ozW5mpNt903Rvl3doA===))\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Method(Action action) { }\r\n\r\n    static void Main()\r\n    {\r\n        int value = 0;\r\n        Method(() =>\r\n        {\r\n            local();\r\n            void local()\r\n            {\r\n                Console.WriteLine(value);\r\n                Method(() =>\r\n                {\r\n                    local();\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nI can build the above code without any errors and warnings.\r\n\r\n**Actual Behavior**:\r\nIf I build the above code in VS15.3, the build failed due to `\"csc.exe\" exited with code -2146232797`.\r\nI found a stack trace in `eventvwr.msc` -> `Windows Logs` -> `Application` -> `.NET Runtime`:\r\n```\r\nApplication: csc.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitLocalLoad(BoundLocal local, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(BoundExpression expression, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitDelegateCreation(BoundExpression node, BoundExpression receiver, Boolean isExtensionMethod, MethodSymbol method, TypeSymbol delegateType, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitDelegateCreationExpression(BoundDelegateCreationExpression expression, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(BoundExpression expression, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitArguments(ImmutableArray`1 arguments, ImmutableArray`1 parameters)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitCallExpression(BoundCall call, UseKind useKind)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCoreWithStackGuard(BoundExpression expression, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(BoundExpression expression, Boolean used)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions(BoundStatement statement)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement(BoundSequencePoint node)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(ImmutableArray`1 statements)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(BoundBlock block)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DiagnosticBag diagnostics, DebugDocumentProvider debugDocumentProvider, ImportChain importChainOpt, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.<>c__DisplayClass21_0.<CompileNamedTypeAsTask>b__0()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+<>c__DisplayClass21_0.<CompileNamedTypeAsTask>b__0()\r\n   at System.ThrowHelper.ThrowKeyNotFoundException()\r\n   at System.Collections.Generic.Dictionary`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].get_Item(System.__Canon)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitLocalLoad(Microsoft.CodeAnalysis.CSharp.BoundLocal, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitDelegateCreation(Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.CSharp.BoundExpression, Boolean, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitDelegateCreationExpression(Microsoft.CodeAnalysis.CSharp.BoundDelegateCreationExpression, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitArguments(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.BoundExpression>, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.Symbols.ParameterSymbol>)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitCallExpression(Microsoft.CodeAnalysis.CSharp.BoundCall, UseKind)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpressionCoreWithStackGuard(Microsoft.CodeAnalysis.CSharp.BoundExpression, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitExpression(Microsoft.CodeAnalysis.CSharp.BoundExpression, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatementAndCountInstructions(Microsoft.CodeAnalysis.CSharp.BoundStatement)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSequencePointStatement(Microsoft.CodeAnalysis.CSharp.BoundSequencePoint)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatements(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.BoundStatement>)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.GenerateImpl()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.GenerateMethodBody(Microsoft.CodeAnalysis.CSharp.Emit.PEModuleBuilder, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CSharp.BoundStatement, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CodeGen.LambdaDebugInfo>, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CodeGen.ClosureDebugInfo>, Microsoft.CodeAnalysis.CSharp.StateMachineTypeSymbol, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CodeGen.DebugDocumentProvider, Microsoft.CodeAnalysis.CSharp.ImportChain, Boolean, Boolean, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CodeGen.SourceSpan>)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+<>c__DisplayClass21_0.<CompileNamedTypeAsTask>b__0()\r\n   at Roslyn.Utilities.UICultureUtilities+<>c__DisplayClass5_0.<WithCurrentUICulture>b__0()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\nIf I build the above code in master, the build succeeded but I get the following warning(same warning occurs 5 times):\r\n```\r\nwarning AD0001: Analyzer 'Microsoft.CodeAnalysis.CSharp.ValidateFormatString.CSharpValidateFormatStringDiagnosticAnalyzer' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\r\n```"},{"Id":"6597589838","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:53:52","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21811","RelatedDescription":"Closed issue \"csc.exe crashes with exit code -2146232797\" (#21811) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nRoslyn included in VS 2017 15.3.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```c#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var history = new Queue<long>();\r\n            Enumerable.Range(0, 5)\r\n                .Select(i =>\r\n                {\r\n                    history.Enqueue(i);\r\n                    return Test(i);\r\n\r\n                    bool Test(int v)\r\n                    {\r\n                        history.Dequeue();\r\n                        return Square(v) > 5;\r\n                    }\r\n\r\n                    int Square(int w)\r\n                    {\r\n                        return w * w;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n```\r\n**Expected Behavior**:\r\n\r\nSince this is valid C# syntax the code should compile\r\n\r\n**Actual Behavior**:\r\n\r\ncsc.exe crashes with exit code -2146232797"},{"Id":"6597510724","Type":"PullRequestEvent","CreatedAt":"2017-09-15T20:32:15","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22135","RelatedDescription":"Merged pull request \"Address some minor TODO comments in features/ioperation branch\" (#22135) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/issues/21385#issue-248857857"},{"Id":"6597482094","Type":"IssuesEvent","CreatedAt":"2017-09-15T20:24:35","Actor":"TessenR","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22150","RelatedDescription":"Opened issue \"'Extract method' refactoring breaks compilation if there are local functions\" (#22150) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.3.0\r\nVisualStudio.15.Release/15.3.0+26730.3\r\nMicrosoft .NET Framework\r\nVersion 4.7.02046\r\n\r\n**Steps to Reproduce**:\r\n\r\nUse 'extract method' refactoring in the code below:\r\n```cs\r\n  public void Test()\r\n  {\r\n    int x = 0;\r\n    // extract the two lines below\r\n    void Local() { }\r\n    Console.WriteLine(x);\r\n  }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```cs\r\n  public void Test()\r\n  {\r\n    int x = 0;\r\n    NewMethod(x);\r\n  }\r\n\r\n  private static void NewMethod(int x)\r\n  {\r\n    void Local() { }\r\n    Console.WriteLine(x);\r\n  }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```cs\r\n  public void Test()\r\n  {\r\n    int x = 0;\r\n    NewMethod();\r\n  }\r\n\r\n  private static void NewMethod()\r\n  {\r\n    void Local() { }\r\n    Console.WriteLine(x);\r\n  }\r\n```\r\n\r\nThere are also other cases where the refactoring breaks code because there is no way to actually execute the refactoring without breaking it. However, it looks like Roslyn should at least warn about conflicts in such cases.\r\nThere are currently no conflicts neither in the context menu nor in the preview window.\r\n\r\n```cs\r\nclass C\r\n{\r\n  public static void Main()\r\n  {\r\n    void Local() { }\r\n    Local(); // invoke 'extract method' over this statement\r\n  }\r\n}\r\n```\r\n\r\nThanks @jnm2 for contributing to the final form of this bug report in the original discussion [here](https://github.com/dotnet/csharplang/issues/910)."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"908763937100898304","CreatedAt":"2017-09-15T18:46:21+00:00","UserScreenname":"dotnet","Text":"Sneak peak at .NET Conf 2017 with @BethMassi and @runfaster2000 https://t.co/4TjjHQrUja","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":12,"RawContent":null},{"Id":"908559275990982656","CreatedAt":"2017-09-15T05:13:06+00:00","UserScreenname":"dotnet","Text":"Announcing SignalR for https://t.co/iOiV9qNspl Core 2.0 https://t.co/quJIZyhUdB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":280,"FavoriteCount":211,"RawContent":null},{"Id":"908126010171834368","CreatedAt":"2017-09-14T00:31:27+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 https://t.co/iOiV9qNspl and Configuration features https://t.co/6LCtKp9gfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":113,"FavoriteCount":71,"RawContent":null},{"Id":"907775139210715137","CreatedAt":"2017-09-13T01:17:13+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Security and Quality Rollup https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":26,"RawContent":null},{"Id":"906146140000841728","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"dotnet","Text":"Getting Started with Windows Containers https://t.co/UnRPIRZySp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":183,"FavoriteCount":108,"RawContent":null},{"Id":"903669794150506500","CreatedAt":"2017-09-01T17:24:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf - streaming live directly to your favorite device. Don't miss out.\n\nIs it on your calendar yet?… https://t.co/SK3CUqUkrs","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":122,"FavoriteCount":100,"RawContent":null},{"Id":"902942589053108224","CreatedAt":"2017-08-30T17:14:23+00:00","UserScreenname":"dotnet","Text":"Introducing .NET IL Linker https://t.co/ji9Uhlalw2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":299,"FavoriteCount":203,"RawContent":null},{"Id":"902581598876459009","CreatedAt":"2017-08-29T17:19:56+00:00","UserScreenname":"dotnet","Text":"The Week in .NET: Let's Encrypt WebApp Renewer, CodeCamp Seattle 2017, and links!\nhttps://t.co/Mssa964piA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":42,"RawContent":null}]}},"RunOn":"2017-09-15T21:11:03.8757584Z","RunDurationInMilliseconds":6731}