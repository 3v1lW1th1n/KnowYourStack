{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6803910341","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:47:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/37","RelatedDescription":"Opened issue \"microsoft/dotnet nanoserver images now support Windows Server 1709\" (#37) at dotnet/announcements","RelatedBody":"# microsoft/dotnet nanoserver images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released in October. [microsoft/nanoserver](https://hub.docker.com/r/microsoft/nanoserver/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `nanoserver-1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/) substring.\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #330](https://github.com/dotnet/dotnet-docker/issues/330)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker #321](https://github.com/dotnet/dotnet-docker/pull/321)\r\n* [dotnet/dotnet-docker #322](https://github.com/dotnet/dotnet-docker/issues/322)\r\n* [dotnet/dotnet-docker #329](https://github.com/dotnet/dotnet-docker/pull/329)\r\n\r\n.NET Core Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\nYou can see an example of 1709-based images in the following example.\r\n\r\n![.NET Core nanoserver 1709 images](https://user-images.githubusercontent.com/2608468/32360772-61680cec-c016-11e7-851d-0d962c35fe41.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Core images with the tag substring `nanoserver-1709` and Windows Server 2016 images with the tag substring `nanoserver-sac2016`.\r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Core images will adopt [manifest lists](https://github.com/dotnet/dotnet-docker/issues/322) so that a single logical tag, like `2.0-runtime`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet:2.0-runtime` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines.\r\n\r\n[.NET Framework](https://github.com/dotnet/announcements/issues/36) Docker images are also using manifest lists for the same reason.\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be.\r\n"},{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6808038006","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:47:46","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14858","RelatedDescription":"Merged pull request \"[BuildPipeline] Turn off publishing to myget\" (#14858) at dotnet/coreclr","RelatedBody":"For Coreclr, do not publish to myget, unless 'myget' is passed in PB_PublishType."},{"Id":"6808034108","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:46:17","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14862","RelatedDescription":"Opened issue \"[RyuJIT/arm32][JitStress=1] Test runtime failures\" (#14862) at dotnet/coreclr","RelatedBody":"Windows arm32 test runtime failures with `COMPlus_JitStress=1`\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstress1_prtest/8/consoleText\r\n\r\nTests:\r\n```\r\nCoreMangLib/cti/system/convert/ConvertToString12/ConvertToString12.cmd\r\nCoreMangLib/cti/system/double/DoubleMinValue/DoubleMinValue.cmd\r\nGC/Features/BackgroundGC/foregroundgc/foregroundgc.cmd\r\nGC/Regressions/dev10bugs/536168/536168/536168.cmd\r\nJIT/CodeGenBringUpTests/DivConst/DivConst.cmd\r\nJIT/Directed/coverage/oldtests/33objref_cs_r/33objref_cs_r.cmd\r\nJIT/Generics/Parameters/instance_assignment_class01/instance_assignment_class01.cmd\r\nJIT/Methodical/Invoke/25params/25param1b_il_d/25param1b_il_d.cmd\r\nJIT/Methodical/Invoke/25params/25param1b_il_r/25param1b_il_r.cmd\r\nJIT/Methodical/Invoke/25params/25param3b_il_d/25param3b_il_d.cmd\r\nJIT/Methodical/Invoke/25params/25param3b_il_r/25param3b_il_r.cmd\r\nJIT/Methodical/Invoke/25params/25paramMixed_il_d/25paramMixed_il_d.cmd\r\nJIT/Methodical/Invoke/25params/25paramMixed_il_r/25paramMixed_il_r.cmd\r\nJIT/Performance/CodeQuality/Roslyn/CscBench/CscBench.cmd\r\nJIT/Performance/CodeQuality/Serialization/Deserialize/Deserialize.cmd\r\nJIT/Performance/CodeQuality/Serialization/Serialize/Serialize.cmd\r\nJIT/Regression/JitBlue/DevDiv_461649/DevDiv_461649/DevDiv_461649.cmd\r\nLoader/classloader/generics/Instantiation/Recursion/genrecur/genrecur.cmd\r\nmanaged/Compilation/Compilation/Compilation.cmd\r\nRegressions/coreclr/0211/genrecur/genrecur.cmd\r\n```\r\n"},{"Id":"6808021833","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:41:53","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14861","RelatedDescription":"Opened pull request \"[Arm64] SIMD genFnPrologCalleeRegArgs\" (#14861) at dotnet/coreclr","RelatedBody":"@dotnet/jit-contrib @dotnet/arm64-contrib PTAL"},{"Id":"6808018502","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:40:41","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14860","RelatedDescription":"Opened issue \"[RyuJIT/arm32][JITMinOpts=1] Test runtime failures\" (#14860) at dotnet/coreclr","RelatedBody":"The following tests fail with `COMPlus_JITMinOpts=1` on Windows arm32.\r\n\r\n```\r\nGC\\LargeMemory\\Allocation\\finalizertest\\finalizertest.cmd\r\nJIT\\IL_Conformance\\Old\\Conformance_Base\\ldc_add_ovf_u4\\ldc_add_ovf_u4.cmd\r\n```\r\n\r\nCI job:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_minopts_prtest/7/consoleText\r\n\r\nResults:\r\n```\r\nRunning: C:\\brucefo\\Windows_NT.arm.Release.2017-11-03\\GC\\LargeMemory\\Allocation\\finalizertest\\finalizertest.cmd -coreroot c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\\corerun.exe\" finalizertest.exe 2048\r\n0 2147483648\r\nallocateInFinalizerTest failed\r\nOOM\r\nLarge Memory Machine required\r\nTest failed\r\nExpected: 100\r\nActual: 0\r\nEND EXECUTION - FAILED\r\nFAILED\r\nRunning: C:\\brucefo\\Windows_NT.arm.Release.2017-11-03\\JIT\\IL_Conformance\\Old\\Conformance_Base\\ldc_add_ovf_u4\\ldc_add_ovf_u4.cmd -coreroot c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\\corerun.exe\" ldc_add_ovf_u4.exe\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n\r\nIt also looks like\r\n```\r\nGC\\Regressions\\dev10bugs\\536168\\536168\\536168.cmd \r\n```\r\nfails, because it hangs. It also hangs without `COMPlus_JITMinOpts=1`.\r\n"},{"Id":"6807957690","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:18:31","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14849","RelatedDescription":"Merged pull request \"[Arm64/Arm] genRangeCheck gtThrowKind\" (#14849) at dotnet/coreclr","RelatedBody":"@dotnet/jit-contrib @dotnet/arm64-contrib PTAL"},{"Id":"6807866763","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:48:44","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14859","RelatedDescription":"Opened pull request \"ReadOnlyMemory: Fix copy/paste mistake in doc comment\" (#14859) at dotnet/coreclr","RelatedBody":"cc: @ahsonkhan"},{"Id":"6807833032","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:38:29","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14858","RelatedDescription":"Opened pull request \"[BuildPipeline] Turn off publishing to myget\" (#14858) at dotnet/coreclr","RelatedBody":"For Coreclr, do not publish to myget, unless 'myget' is passed in PB_PublishType."},{"Id":"6807829049","Type":"IssuesEvent","CreatedAt":"2017-11-03T21:37:17","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11510","RelatedDescription":"Closed issue \"[Local GC] Undefined symbol when building standalone: IsGCThread and IsGCThreadSpecial\" (#11510) at dotnet/coreclr","RelatedBody":"```\r\n  \"IsGCThread()\", referenced from:\r\n      SVR::gc_heap::grow_brick_card_tables(unsigned char*, unsigned char*, unsigned long, SVR::heap_segment*, SVR::gc_heap*, int) in gcsvr.cpp.o\r\n      WKS::gc_heap::grow_brick_card_tables(unsigned char*, unsigned char*, unsigned long, WKS::heap_segment*, WKS::gc_heap*, int) in gcwks.cpp.o\r\n  \"IsGCSpecialThread()\", referenced from:\r\n      SVR::gc_heap::get_large_segment(unsigned long, int*) in gcsvr.cpp.o\r\n      SVR::gc_heap::gc_thread_function() in gcsvr.cpp.o\r\n      SVR::gc_heap::adjust_limit_clr(unsigned char*, unsigned long, alloc_context*, SVR::heap_segment*, int, int) in gcsvr.cpp.o\r\n      SVR::gc_heap::bgc_loh_alloc_clr(unsigned char*, unsigned long, alloc_context*, int, int, int, SVR::heap_segment*) in gcsvr.cpp.o\r\n      SVR::gc_heap::a_fit_free_list_large_p(unsigned long, alloc_context*, int) in gcsvr.cpp.o\r\n      SVR::gc_heap::wait_for_bgc_high_memory(SVR::alloc_wait_reason) in gcsvr.cpp.o\r\n      SVR::GCHeap::GarbageCollectGeneration(unsigned int, gc_reason) in gcsvr.cpp.o\r\n      ...\r\n```\r\n\r\nThese will probably need to be added to `IGCToCLR`."},{"Id":"6807813531","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:32:42","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14857","RelatedDescription":"Opened pull request \"[Arm64] SIMD12 Indirect Load/Store\" (#14857) at dotnet/coreclr","RelatedBody":"Implement limiting load & store indirect to 12 bytes for SIMD12\r\n\r\n@dotnet/jit-contrib @dotnet/arm64-contrib PTAL"},{"Id":"6807765002","Type":"IssuesEvent","CreatedAt":"2017-11-03T21:18:34","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14856","RelatedDescription":"Opened issue \"[RyuJIT/arm32][GCStress=C] Failures in GCStress run\" (#14856) at dotnet/coreclr","RelatedBody":"ARM GCStress=C test run in CI:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_gcstress0xc_prtest/2/consoleText\r\n\r\n6995 failures, 6731 with `!CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")` assert. Many others with `SanityCheck()` or `HasPerInstInfo()` assert.\r\n\r\nAll assert failures:\r\n```\r\n!\"About to FailFast. set ComPlus_AssertOnFailFast=0 if this is expected\"\r\n!CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n!CREATE_CHECK_STRING(pMT && pMT->Validate())\r\n(GetComponentSize() !  + 0x0 (0x00000000)\r\n(m_pStartFrame != NULL) || (m_flags & POPFRAMES) || (m_pRealStartFrame == m_pThread->GetFrame()) || (bRedirectedPinvoke)\r\n[BFA] Assert Failure\r\nAssertion failed '(op2 == idx) || (op2->gtEffectiveVal() == idx)' in 'System.Numerics.Vector:Narrow(struct,struct):struct' (IL size 84)\r\nHasPerInstInfo()\r\ninstrVal32 == *(DWORD*)(gcCover->savedCode + offset)\r\nSanityCheck()\r\n```\r\n\r\nSmall sample of test failures:\r\n```\r\nPath  : JIT/Methodical/fp/exgen/1000w1d_cs_d/1000w1d_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/1000w1d_cs_do/1000w1d_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/1000w1d_cs_r/1000w1d_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/1000w1d_cs_ro/1000w1d_cs_ro.cmd\r\nPath  : baseservices/exceptions/regressions/whidbeym3.3/106011/106011/106011.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w250d_cs_d/10w250d_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w250d_cs_do/10w250d_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w250d_cs_r/10w250d_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w250d_cs_ro/10w250d_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w5d_cs_d/10w5d_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/10w5d_cs_r/10w5d_cs_r.cmd\r\nPath  : baseservices/threading/regressions/13662/13662-a/13662-a.cmd\r\nPath  : baseservices/threading/regressions/13662/13662-b/13662-b.cmd\r\nPath  : baseservices/threading/regressions/13662/13662-simple/13662-simple.cmd\r\nPath  : JIT/jit64/gc/regress/vswhidbey/143837/143837.cmd\r\nPath  : JIT/jit64/gc/misc/148343/148343.cmd\r\nPath  : baseservices/exceptions/regressions/whidbeyM3.2/151232/151232.cmd\r\nPath  : baseservices/exceptions/regressions/v1.0/15266/15266.cmd\r\nPath  : JIT/jit64/opt/regress/vswhidbey/193825/193825_udo/193825_udo.cmd\r\nPath  : JIT/jit64/opt/regress/vswhidbey/193825/193825_uro/193825_uro.cmd\r\nPath  : baseservices/exceptions/regressions/v1.0/19896/19896.cmd\r\nPath  : baseservices/threading/regressions/whidbey_m3/200176/200176.cmd\r\nPath  : JIT/Methodical/fp/exgen/200w1d-01_cs_d/200w1d-01_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/200w1d-01_cs_r/200w1d-01_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/200w1d-02_cs_d/200w1d-02_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/200w1d-02_cs_r/200w1d-02_cs_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1a_cs_d/25param1a_cs_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1a_cs_r/25param1a_cs_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1b_il_d/25param1b_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1b_il_r/25param1b_il_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1c_il_d/25param1c_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param1c_il_r/25param1c_il_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2a_cs_d/25param2a_cs_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2a_cs_r/25param2a_cs_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2b_il_d/25param2b_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2b_il_r/25param2b_il_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2c_il_d/25param2c_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param2c_il_r/25param2c_il_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3a_cs_d/25param3a_cs_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3a_cs_r/25param3a_cs_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3b_il_d/25param3b_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3b_il_r/25param3b_il_r.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3c_il_d/25param3c_il_d.cmd\r\nPath  : JIT/Methodical/Invoke/25params/25param3c_il_r/25param3c_il_r.cmd\r\nPath  : GC/Coverage/271010/271010.cmd\r\nPath  : JIT/Methodical/eh/leaves/2branchesoutoftry_d/2branchesoutoftry_d.cmd\r\nPath  : JIT/Methodical/eh/leaves/2branchesoutoftry_r/2branchesoutoftry_r.cmd\r\nPath  : baseservices/threading/regressions/30032/30032/30032.cmd\r\nPath  : JIT/jit64/gc/regress/vswhidbey/339415/339415.cmd\r\nPath  : JIT/Directed/coverage/oldtests/33objref_cs_do/33objref_cs_do.cmd\r\nPath  : JIT/Directed/coverage/oldtests/33objref_cs_ro/33objref_cs_ro.cmd\r\nPath  : baseservices/exceptions/regressions/whidbeybeta2/349379/349379/349379.cmd\r\nPath  : baseservices/exceptions/regressions/whidbeybeta2/366085/366085/366085.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-01_cs_d/3w1d-01_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-01_cs_do/3w1d-01_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-01_cs_r/3w1d-01_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-01_cs_ro/3w1d-01_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-02_cs_d/3w1d-02_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-02_cs_do/3w1d-02_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-02_cs_r/3w1d-02_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/3w1d-02_cs_ro/3w1d-02_cs_ro.cmd\r\nPath  : baseservices/threading/regressions/beta2/437017/437017.cmd\r\nPath  : baseservices/threading/regressions/576463/576463/576463.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-01_cs_d/5w1d-01_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-01_cs_do/5w1d-01_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-01_cs_r/5w1d-01_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-01_cs_ro/5w1d-01_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-02_cs_d/5w1d-02_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-02_cs_do/5w1d-02_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-02_cs_r/5w1d-02_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-02_cs_ro/5w1d-02_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-03_cs_d/5w1d-03_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-03_cs_do/5w1d-03_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-03_cs_r/5w1d-03_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-03_cs_ro/5w1d-03_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-04_cs_d/5w1d-04_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-04_cs_do/5w1d-04_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-04_cs_r/5w1d-04_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-04_cs_ro/5w1d-04_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-05_cs_d/5w1d-05_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-05_cs_do/5w1d-05_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-05_cs_r/5w1d-05_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-05_cs_ro/5w1d-05_cs_ro.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-06_cs_d/5w1d-06_cs_d.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-06_cs_do/5w1d-06_cs_do.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-06_cs_r/5w1d-06_cs_r.cmd\r\nPath  : JIT/Methodical/fp/exgen/5w1d-06_cs_ro/5w1d-06_cs_ro.cmd\r\nPath  : baseservices/threading/regressions/6906/6906/6906.cmd\r\nPath  : JIT/jit64/gc/misc/9param/9param.cmd\r\nPath  : JIT/jit64/gc/misc/9_and_alloca2/9_and_alloca2.cmd\r\nPath  : Regressions/coreclr/0099/AboveStackLimit/AboveStackLimit.cmd\r\nPath  : JIT/SIMD/AbsGeneric_r/AbsGeneric_r.cmd\r\nPath  : JIT/SIMD/AbsGeneric_ro/AbsGeneric_ro.cmd\r\nPath  : JIT/SIMD/AbsSqrt_r/AbsSqrt_r.cmd\r\nPath  : JIT/SIMD/AbsSqrt_ro/AbsSqrt_ro.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract01/abstract01.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract02/abstract02.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract03/abstract03.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract04/abstract04.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract05/abstract05.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract06/abstract06.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract07/abstract07.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract08/abstract08.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract09/abstract09.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Negative/abstract10/abstract10.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase01/AbstractBase01.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase02/AbstractBase02.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase03/AbstractBase03.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase04/AbstractBase04.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase05/AbstractBase05.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase06/AbstractBase06.cmd\r\nPath  : Loader/classloader/generics/Instantiation/Positive/AbstractBase07/AbstractBase07.cmd\r\nPath  : JIT/Performance/CodeQuality/BenchI/Ackermann/Ackermann/Ackermann.cmd\r\nPath  : CoreMangLib/cti/system/action/ActionCtor/ActionCtor.cmd\r\nPath  : JIT/Performance/CodeQuality/BenchF/Adams/Adams/Adams.cmd\r\nPath  : JIT/IL_Conformance/Old/Base/add/add.cmd\r\nPath  : JIT/Directed/PREFIX/volatile/1/add/add.cmd\r\nPath  : JIT/CodeGenBringUpTests/Add1/Add1.cmd\r\nPath  : JIT/Performance/CodeQuality/BenchI/AddArray/AddArray/AddArray.cmd\r\nPath  : JIT/Performance/CodeQuality/BenchI/AddArray2/AddArray2/AddArray2.cmd\r\nPath  : JIT/SIMD/AddingSequence_ro/AddingSequence_ro.cmd\r\nPath  : JIT/CodeGenBringUpTests/addref/addref.cmd\r\nPath  : GC/API/GCHandle/AddrOfPinnedObject/AddrOfPinnedObject.cmd\r\nPath  : GC/API/GCHandle/AddrOfPinnedObject_neg/AddrOfPinnedObject_neg.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_i/add_i.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_I4/add_I4.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_i8/add_i8.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_i1/add_ovf_i1.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_i2/add_ovf_i2.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_i4/add_ovf_i4.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_i8/add_ovf_i8.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_u1/add_ovf_u1.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_u2/add_ovf_u2.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_u4/add_ovf_u4.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_ovf_u8/add_ovf_u8.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_r4/add_r4.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/add_r8/add_r8.cmd\r\nPath  : GC/API/GCHandle/Alloc/Alloc.cmd\r\nPath  : JIT/jit64/gc/misc/alloca3/alloca3.cmd\r\nPath  : GC/API/GCHandle/Alloc_neg/Alloc_neg.cmd\r\nPath  : GC/API/GCHandle/Alloc_neg2/Alloc_neg2.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am01waitallneg/am01waitallneg.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am02waitoneneg/am02waitoneneg.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am04waitany/am04waitany.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am05waitanymutex/am05waitanymutex.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am06abandonall/am06abandonall.cmd\r\nPath  : baseservices/threading/mutex/abandonedmutex/am08mixedarray/am08mixedarray.cmd\r\nPath  : Loader/classloader/InterfaceFolding/Ambiguous/Ambiguous.cmd\r\nPath  : JIT/IL_Conformance/Old/Base/and/and.cmd\r\nPath  : JIT/CodeGenBringUpTests/And1/And1.cmd\r\nPath  : JIT/CodeGenBringUpTests/AndRef/AndRef.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/and_u4/and_u4.cmd\r\nPath  : JIT/IL_Conformance/Old/Conformance_Base/and_u8/and_u8.cmd\r\nPath  : JIT/opt/Inline/tests/args1/args1.cmd\r\nPath  : JIT/opt/Inline/tests/args2/args2.cmd\r\nPath  : JIT/opt/Inline/tests/args3/args3.cmd\r\nPath  : JIT/CodeGenBringUpTests/Args4/Args4.cmd\r\nPath  : JIT/CodeGenBringUpTests/Args5/Args5.cmd\r\nPath  : CoreMangLib/cti/system/argumentoutofrangeexception/ArgumentOutOfRangeExceptionMessage/ArgumentOutOfRangeExceptionMessage.cmd\r\nPath  : JIT/Methodical/NaN/arithm32_cs_do/arithm32_cs_do.cmd\r\nPath  : JIT/Methodical/NaN/arithm32_cs_ro/arithm32_cs_ro.cmd\r\nPath  : JIT/Methodical/NaN/arithm32_d/arithm32_d.cmd\r\nPath  : JIT/Methodical/NaN/arithm32_r/arithm32_r.cmd\r\nPath  : JIT/Methodical/NaN/arithm64_cs_do/arithm64_cs_do.cmd\r\nPath  : JIT/Methodical/NaN/arithm64_cs_ro/arithm64_cs_ro.cmd\r\nPath  : JIT/Methodical/NaN/arithm64_d/arithm64_d.cmd\r\nPath  : JIT/Methodical/NaN/arithm64_r/arithm64_r.cmd\r\nPath  : CoreMangLib/cti/system/arithmeticexception/ArithmeticExceptionCtor1/ArithmeticExceptionCtor1.cmd\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6808114802","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:18:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7892","RelatedDescription":"Closed issue \"error NU1605:   Microsoft.AspNetCore.All (>= 2.0.0) -> Microsoft.EntityFrameworkCore.SqlServer (>= 2.0.0) \\r\" (#7892) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet restore`\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n` Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj...\r\n  Restoring packages for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj...\r\n  Restore completed in 110.05 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 111.51 ms for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\obj\\ClassLibrary.csproj.nuget.g.props.\r\n  Restore completed in 1.18 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\ClassLibrary\\ClassLibrary.csproj.\r\n  Restore completed in 1.89 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102: Unable to find package Microsoft.EntityFrameworkCore.SqlServer.Design with version (>= 2.0.0)\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 14 version(s) in nuget.org [ Nearest version: 2.0.0-preview1-final ]\\r\r\nC:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj : error NU1102:   - Found 1 version(s) in CliFallbackFolder [ Nearest version: 2.0.0-preview1-final ]\r\n  Generating MSBuild file C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\obj\\LibraryCore.csproj.nuget.g.props.\r\n  Restore failed in 8.64 sec for C:\\Users\\DELL\\RiderProjects\\LibraryCore\\LibraryCore\\LibraryCore.csproj.`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n`.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n`\r\n\r\n\r\n\r\n\r\n"},{"Id":"6808088196","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:06:54","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7962","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7962) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171103-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171103-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6808077662","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:02:53","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7963","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25903-02 (master)\" (#7963) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6806600729","Type":"IssuesEvent","CreatedAt":"2017-11-03T16:43:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7956","RelatedDescription":"Closed issue \"Want to migrate on dnx to cli with entity framework core #7942\" (#7956) at dotnet/cli","RelatedBody":"Hi Livar,\r\nThanks for updating my previous issue #7942  !!\r\nI am facing issue so reopen it again and I have taken  reference below url\r\nhttps://github.com/dotnet/cli/blob/master/Documentation/ProjectJsonToCSProj.md\r\n\r\nand found below issue with migrate command\r\nError :\r\nPS C:\\yoyo-center-management-system-master\\CenterManagementSystem\\DEV\\src\\CenterManagementSystem.Platform> dotnet migrate\r\nNo executable found matching command \"dotnet-migrate\"\r\n\r\nI have created separate console application with the use of below cli command\r\n\r\ndotnet new\r\ndotnet restore\r\ndotnet build\r\ndotnet run\r\n\r\nAll command working fine but unable to proceed further like What is my next step ?\r\nI am sharing you my powershall command and status as below\r\n\r\nPS C:\\test3\\myApp> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nmyApp -> C:\\test3\\myApp\\bin\\Debug\\netcoreapp2.0\\myApp.dll\r\n\r\nBuild succeeded.\r\n0 Warning(s)\r\n0 Error(s)\r\n\r\nTime Elapsed 00:00:01.02\r\nPS C:\\test3\\myApp> dotnet run\r\nHello World!\r\nPS C:\\test3\\myApp> dotnet migrate\r\nNo project.json file found in 'C:\\test3\\myApp'.\r\nMigration failed.\r\nPS C:\\test3\\myApp>\r\n\r\nPlease suggest me for same ?"},{"Id":"6805975259","Type":"PullRequestEvent","CreatedAt":"2017-11-03T14:47:18","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7960","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25902-04 (master)\" (#7960) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6804167361","Type":"PullRequestEvent","CreatedAt":"2017-11-03T07:00:38","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7962","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#7962) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171103-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171103-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6803787100","Type":"IssuesEvent","CreatedAt":"2017-11-03T03:41:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7961","RelatedDescription":"Closed issue \"\"dotnet exec --help\" should print help\" (#7961) at dotnet/cli","RelatedBody":"`>dotnet --help` says to `Run 'dotnet COMMAND --help' for more information on a command.` amongst other things.\r\n\r\nYet `>dotnet exec --help` only prints an error message: `dotnet exec needs a managed .dll or .exe extension. The application specified was '--help'`.\r\nI expect this should print usage information.\r\n\r\nI'm using  2.1.1-preview-007094 (dotnet --version)"},{"Id":"6803634648","Type":"IssuesEvent","CreatedAt":"2017-11-03T02:31:46","Actor":"jcouv","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7961","RelatedDescription":"Opened issue \"\"dotnet exec --help\" should print help\" (#7961) at dotnet/cli","RelatedBody":"`>dotnet --help` says to `Run 'dotnet COMMAND --help' for more information on a command.` amongst other things.\r\n\r\nYet `>dotnet exec --help` only prints an error message: `dotnet exec needs a managed .dll or .exe extension. The application specified was '--help'`.\r\nI expect this should print usage information.\r\n\r\nI'm using  2.1.1-preview-007094 (dotnet --version)"},{"Id":"6803432038","Type":"PullRequestEvent","CreatedAt":"2017-11-03T00:57:03","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7960","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25902-04 (master)\" (#7960) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6799906039","Type":"IssuesEvent","CreatedAt":"2017-11-02T12:07:20","Actor":"rebulanyum","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/571","RelatedDescription":"Opened issue \"System.Runtime.Serialization.Json nuget package error\" (#571) at dotnet/standard","RelatedBody":"Hello.\r\n\r\nI've started to use .NetCore version=1.0.0-preview2-003121 with Visual Studio 2015. My project.json file is below:\r\n\r\n```javascript\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n  \"frameworks\": {\r\n    \"netstandard2.0\": {\r\n      \"dependencies\": {\r\n        \"System.Runtime.Serialization.Xml\": \"4.3.0\",\r\n        \"System.Runtime.Serialization.Json\": \"4.3.0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nMy code file is below:\r\n```csharp\r\nusing System.Runtime.Serialization;\r\nusing System.Runtime.Serialization.Json;\r\n\r\nnamespace NetCoreTests\r\n{\r\n    public class Class1\r\n    {\r\n        public Class1()\r\n        {\r\n            XmlObjectSerializer ser = new DataContractJsonSerializer(typeof(int));\r\n        }\r\n    }\r\n}\r\n```\r\nAnd this is the error I get when I try to build the solution:\r\n```\r\nCS0029\tCannot implicitly convert type 'System.Runtime.Serialization.Json.DataContractJsonSerializer' to 'System.Runtime.Serialization.XmlObjectSerializer'\tNetCoreTests..NETStandard,Version=v2.0\r\n```\r\n\r\nLooks like `DataContractJsonSerializer` class in System.Runtime.Serialization.Json nuget package doesn't inherit `XmlObjectSerializer` class in System.Runtime.Serialization.Xml nuget package. I can see that in general there's no dependency between these 2 nuget packages; however, if you check 4 and later versions of .Net Framework `DataContractJsonSerializer` always inherits from `XmlObjectSerializer` because as far as I know every DataContractSerializer inherits from `XmlObjectSerializer`. Even in this repository this inheritance exists:\r\nhttps://github.com/dotnet/standard/blob/master/netstandard/ref/System.Runtime.Serialization.cs#L332\r\n\r\nCan you please fix the nuget packages?"},{"Id":"6797584525","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:43:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02201-04 (master)\" (#570) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6808099101","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:11:32","Actor":"Fedorus","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25060","RelatedDescription":"Opened issue \"Compability of GZipStream between core and framework\" (#25060) at dotnet/corefx","RelatedBody":"I`ve tried to port popular library for http requests called xNet and faced interesing issue. Library compiled for standart 2.0 works fine when it`s used in Windows Console project and falls with errow when used in Core Console Project (both test projects in my repo). \r\nProblem appiers when you try to download http content coded with gzip. Problem located to this line:\r\nhttps://github.com/Fedorus/xNetStandart/blob/master/~Http/HttpResponse.cs#L1487\r\n` int bytesRead = stream.Read(buffer, 0, bufferSize);`\r\nwhere \r\nint bufferSize = ~65k\r\nbuffer = new byte[bufferSize]\r\nand real stream content is less.\r\n\r\nOn such circumstances code will fail becouse stream will wait for data. \r\nI`ve tried fixing it but failed. Looks like there is something deeper but I haven`t located it yet.\r\n\r\nThere is original repo of xNet and my modified version with 2 test projects (windows and core console)\r\norigin: https://github.com/X-rus/xNet \r\nported: https://github.com/Fedorus/xNetStandart\r\n\r\nThanks for atention. I hope someone will point me in my mistake or helps solving this issue."},{"Id":"6808088406","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:06:59","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25059","RelatedDescription":"Opened pull request \"Reset Syndication src\\\" (#25059) at dotnet/corefx","RelatedBody":"We decided to port the complete Syndication code from full framework without further changes for better compatibility. This PR basically reset the source folder of syndication."},{"Id":"6808082295","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:04:32","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25054","RelatedDescription":"Merged pull request \"Add xunit trait to xslt tests depending on xsltc.exe\" (#25054) at dotnet/corefx","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/25053\r\nUnblocks: https://github.com/dotnet/coreclr/issues/14810"},{"Id":"6808082290","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:04:32","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25053","RelatedDescription":"Closed issue \"Add Xunit trait to Xsl tests depending on presence of Xsltc.exe\" (#25053) at dotnet/corefx","RelatedBody":"This is motivated by https://github.com/dotnet/coreclr/issues/14810 - since tests depending on presence of xsltc.exe are problematic in nature the presence of trait is useful for this issue and also for future so that disabling them is easier\r\n"},{"Id":"6808023792","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:42:38","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25058","RelatedDescription":"Opened issue \"AtomFeedPositiveTest_WsFeedIcon Failed\" (#25058) at dotnet/corefx","RelatedBody":"Test `System.ServiceModel.Syndication.Tests.BasicScenarioTests.AtomFeedPositiveTest_WsFeedIcon` failed.\r\n\r\nThe expected <icon> element is,\r\n\r\n```xml\r\n<icon>http://example.com/icon.jpg</icon>\r\n```\r\n\r\nThe actual <icon> is,\r\n\r\n```xml\r\n<icon xmlns=\"http://www.w3.org/2005/Atom\">http://example.com/icon.jpg</icon>\r\n```\r\n\r\nThe behavior, however, is the same as the full framework's."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6808110503","Type":"IssuesEvent","CreatedAt":"2017-11-03T23:16:24","Actor":"MkazemAkhgary","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23012","RelatedDescription":"Opened issue \"Add Go To Implementation option for Deconstruct calls\" (#23012) at dotnet/roslyn","RelatedBody":"Currently (without use of resharper) there is no convenient way to know which deconstruct is being resolved when you for example write this.\r\n\r\n    var (x, y) = GetResult();\r\n\r\nit would be nice if there was a easy an convenient way to navigate to deconstruct overload that is being used.\r\n"},{"Id":"6808007721","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:36:37","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21740","RelatedDescription":"Closed issue \"Handle checked conversions in VB\" (#21740) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/pull/21407#discussion_r135122873"},{"Id":"6807979948","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:26:17","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22764","RelatedDescription":"Closed pull request \"Enable concurrent GC for VBCSCompiler\" (#22764) at dotnet/roslyn","RelatedBody":""},{"Id":"6807973988","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:24:11","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22476","RelatedDescription":"Merged pull request \"Track free variables in closure conversion\" (#22476) at dotnet/roslyn","RelatedBody":"Closure conversion tracks all declared variables in scope,\r\nbut doesn't track variables created in expression trees because\r\nthose variables should be treated as free for the purpose of\r\nclosure conversion. This change tracks free variables in Debug\r\nbuilds to ensure that we're never 'dropping' a variable\r\n\r\nFixes #20871"},{"Id":"6807950701","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:15:57","Actor":"thauk-copperleaf","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23011","RelatedDescription":"Opened issue \"Microsoft.CodeAnalysis.Workspaces.Desktop.dll is missing from the netstandard1.3 version of Microsoft.CodeAnalysis.Workspaces.Common NuGet package\" (#23011) at dotnet/roslyn","RelatedBody":"But it is present in the `net46` version of that package.\r\n\r\nIs that an accident? If yes, how can it be resolved?\r\n\r\nIs that on purpose? If so, then why isn't that assembly included"},{"Id":"6807945737","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:14:11","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23010","RelatedDescription":"Opened pull request \"Use ICollection<string>.Contains to avoid Enumerator allocation in SourceMemberContainerSymbol.GetSimpleNonTypeMembers\" (#23010) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\n\r\n`GetSymbolInfo()` call results in unnecessary allocations due to a call to `GetEnumerator()` for merged type declaration.\r\n\r\n**Bugs this fixes:**\r\n\r\nItem 2 of #22908\r\n\r\n**Workarounds, if any**\r\n\r\nNone.\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nSee #22908\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**How was the bug found?**\r\n\r\n--\r\n\r\n"},{"Id":"6807917053","Type":"IssuesEvent","CreatedAt":"2017-11-03T22:04:33","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23009","RelatedDescription":"Opened issue \"The same IOperation node is used in two places in the tree for a conditional access in an error case.\" (#23009) at dotnet/roslyn","RelatedBody":"```\r\n        [Fact]\r\n        [CompilerTrait(CompilerFeature.IOperation)]\r\n        public void ConditionalElementAccess001()\r\n        {\r\n            var text = @\"\r\nclass Program\r\n{\r\n    public int P1\r\n    {\r\n        set { }\r\n    }\r\n\r\n    public void V() \r\n    { \r\n        var x6 = base?.ToString();\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        var x = 123 ?[1,2];\r\n\r\n        var p = new Program();\r\n        var x1 = p.P1 ?[1,2];\r\n        var x2 = p.V() ?[1,2];\r\n        var x3 = p.V ?[1,2];\r\n        var x4 = ()=> { return 1; } ?[1,2];\r\n\r\n        var x5 = null?.ToString();\r\n    }\r\n}\r\n\";\r\n            var compilation = CreateCompilationWithMscorlib45(text).VerifyDiagnostics(\r\n    // (11,18): error CS0175: Use of keyword 'base' is not valid in this context\r\n    //         var x6 = base?.ToString();\r\n    Diagnostic(ErrorCode.ERR_BaseIllegal, \"base\").WithLocation(11, 18),\r\n    // (16,21): error CS0023: Operator '?' cannot be applied to operand of type 'int'\r\n    //         var x = 123 ?[1,2];\r\n    Diagnostic(ErrorCode.ERR_BadUnaryOp, \"?\").WithArguments(\"?\", \"int\").WithLocation(16, 21),\r\n    // (19,18): error CS0154: The property or indexer 'Program.P1' cannot be used in this context because it lacks the get accessor\r\n    //         var x1 = p.P1 ?[1,2];\r\n    Diagnostic(ErrorCode.ERR_PropertyLacksGet, \"p.P1\").WithArguments(\"Program.P1\").WithLocation(19, 18),\r\n    // (20,24): error CS0023: Operator '?' cannot be applied to operand of type 'void'\r\n    //         var x2 = p.V() ?[1,2];\r\n    Diagnostic(ErrorCode.ERR_BadUnaryOp, \"?\").WithArguments(\"?\", \"void\").WithLocation(20, 24),\r\n    // (21,20): error CS0119: 'Program.V()' is a method, which is not valid in the given context\r\n    //         var x3 = p.V ?[1,2];\r\n    Diagnostic(ErrorCode.ERR_BadSKunknown, \"V\").WithArguments(\"Program.V()\", \"method\").WithLocation(21, 20),\r\n    // (22,18): error CS0023: Operator '?' cannot be applied to operand of type 'lambda expression'\r\n    //         var x4 = ()=> { return 1; } ?[1,2];\r\n    Diagnostic(ErrorCode.ERR_BadUnaryOp, \"()=> { return 1; } ?[1,2]\").WithArguments(\"?\", \"lambda expression\").WithLocation(22, 18),\r\n    // (24,22): error CS0023: Operator '?' cannot be applied to operand of type '<null>'\r\n    //         var x5 = null?.ToString();\r\n    Diagnostic(ErrorCode.ERR_BadUnaryOp, \"?\").WithArguments(\"?\", \"<null>\").WithLocation(24, 22)\r\n    );\r\n            var tree = compilation.SyntaxTrees.Single();\r\n            var node = tree.GetRoot().DescendantNodes().OfType<ConditionalAccessExpressionSyntax>().First();\r\n\r\n            Assert.Equal(\"base?.ToString()\", node.ToString());\r\n\r\n            compilation.VerifyOperationTree(node, expectedOperationTree:\r\n@\"\r\n\");\r\n        }\r\n```\r\n\r\nCurrent parent is ConditionalAccess and we are trying to set a Call.\r\nThe following expression is evaluated to true:\r\n```\r\n((Microsoft.CodeAnalysis.Operations.LazyConditionalAccessExpression)result).ExpressionImpl == ((Microsoft.CodeAnalysis.Operations.LazyInvocationExpression)((Microsoft.CodeAnalysis.Operations.LazyConditionalAccessExpression)result).WhenNotNullImpl).InstanceImpl\r\n```\r\n\r\nIn other words the IOperation for ```base``` expression is used as a IConditionalAccessOperation.Expression and as a IInvocationOperation.Instance. The IInvocationOperation is a IConditionalAccessOperation.WhenNotNull in that case.\r\n\r\n```\r\n>\tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(string message, string detailMessage) Line 24\tC#\tSymbols loaded.\r\n \t[External Code]\t\tAnnotated Frame\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operation.SetParentOperation(Microsoft.CodeAnalysis.IOperation parent) Line 105\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operation.SetParentOperation<Microsoft.CodeAnalysis.IOperation>(Microsoft.CodeAnalysis.IOperation operation, Microsoft.CodeAnalysis.IOperation parent) Line 121\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BaseInvocationExpression.Instance.get() Line 2782\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.VisitInvocation(Microsoft.CodeAnalysis.Operations.IInvocationOperation operation) Line 652\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BaseInvocationExpression.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 2793\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 36\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 266\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.Visit(Microsoft.CodeAnalysis.IOperation operation, string header) Line 282\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.VisitConditionalAccess(Microsoft.CodeAnalysis.Operations.IConditionalAccessOperation operation) Line 864\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.BaseConditionalAccessExpression.Accept(Microsoft.CodeAnalysis.Operations.OperationVisitor visitor) Line 1204\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationWalker.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 36\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.Visit(Microsoft.CodeAnalysis.IOperation operation) Line 266\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.OperationTreeVerifier.GetOperationTree(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.IOperation operation, int initialIndent) Line 51\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.AppendOperationTree(Microsoft.CodeAnalysis.SemanticModel model, Microsoft.CodeAnalysis.SyntaxNode node, System.Text.StringBuilder actualTextBuilder, int initialIndent) Line 231\tC#\tSymbols loaded.\r\n \tRoslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CompilationExtensions.VerifyOperationTree(Microsoft.CodeAnalysis.Compilation compilation, Microsoft.CodeAnalysis.SyntaxNode node, string expectedOperationTree) Line 163\tC#\tSymbols loaded.\r\n \tRoslyn.Compilers.CSharp.Semantic.UnitTests.dll!Microsoft.CodeAnalysis.CSharp.UnitTests.SemanticErrorTests.ConditionalElementAccess001() Line 23012\tC#\tSymbols loaded.\r\n```\r\n"},{"Id":"6807864947","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:48:13","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22946","RelatedDescription":"Merged pull request \"Add LangVersion for C# 7.3\" (#22946) at dotnet/roslyn","RelatedBody":""},{"Id":"6807860922","Type":"IssuesEvent","CreatedAt":"2017-11-03T21:46:55","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22660","RelatedDescription":"Closed issue \"Confusing error message for wildcard in [AssemblyVersion] on .Net Core\" (#22660) at dotnet/roslyn","RelatedBody":"**Version Used**: .Net Core 2.0.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create the following .Net Core 2.0 application:\r\n\r\n   csproj:\r\n\r\n   ```xml\r\n   <Project Sdk=\"Microsoft.NET.Sdk\">\r\n     <PropertyGroup>\r\n       <OutputType>Exe</OutputType>\r\n       <TargetFramework>netcoreapp2.0</TargetFramework>\r\n       <GenerateAssemblyInfo>False</GenerateAssemblyInfo>\r\n     </PropertyGroup>\r\n   </Project>\r\n   ```\r\n\r\n   Program.cs:\r\n\r\n   ```c#\r\n   using System;\r\n   using System.Reflection;\r\n\r\n   [assembly: AssemblyVersion(\"1.0.*\")]\r\n\r\n   class Program\r\n   {\r\n       static void Main()\r\n       {\r\n           Console.WriteLine(typeof(Program).Assembly.GetName().Version);\r\n       }\r\n   }\r\n   ```\r\n2. `dotnet build`\r\n\r\n**Actual Behavior**: `dotnet build` produces a confusing error message:\r\n\r\n> Program.cs(4,28): error CS7034: The specified version string does not conform to the required format - major[.minor[.build[.revision]]]\r\n\r\n**Expected Behavior**: The error clearly explains that the actual problem is that [wildcard assembly versions are not allowed for deterministic builds](https://github.com/dotnet/roslyn/blob/3bbb684a43a0af9d1261866272274a19f4de6976/src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs#L2159).\r\n\r\nAdding `<Deterministic>False</Deterministic>` to the csproj indeed makes the code compile.\r\n\r\n---\r\n\r\nThe question that prompted this issue: https://github.com/dotnet/sdk/issues/1098#issuecomment-335409662."},{"Id":"6807859724","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:46:32","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22973","RelatedDescription":"Merged pull request \"Clarify error for AssemblyVersion with wildcard when deterministic\" (#22973) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/22660"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6808079962","Type":"PullRequestEvent","CreatedAt":"2017-11-03T23:03:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4868","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4868) at dotnet/corert","RelatedBody":""},{"Id":"6807963433","Type":"PullRequestEvent","CreatedAt":"2017-11-03T22:20:31","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4870","RelatedDescription":"Opened pull request \"Support for dotnet publish\" (#4870) at dotnet/corert","RelatedBody":"Support for the dotnet publish command. Built on top of changes made by @nattress .\r\n\r\nNuGet packages that target .NETCore specifically can be published safely, but most others targeting the .NETFramework cannot. Specifically anything to do with Reflection.Emit will fail at compile-time. Is this something we can/want to support? \r\n\r\nAs an aside, I'm certain there is a more elegant switch implementation than the one below. \r\n\r\ncc @MichalStrehovsky @nattress "},{"Id":"6807712986","Type":"PullRequestEvent","CreatedAt":"2017-11-03T21:04:18","Actor":"adityamandaleeka","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4869","RelatedDescription":"Opened pull request \"Speed up locating method info on Unix\" (#4869) at dotnet/corert","RelatedBody":"`InitializeUnwindContextAndCursor` was being used from `FindProcInfo`, which gets called on some perf-critical paths (such as when scanning for GC roots). However, it does some extra work which we don't need when just trying to find the info for an IP which was causing it to be much slower than it needs to be.\r\n\r\nThis change adds a new routine to get the `unw_proc_info_t`. This is used in the case where we are just trying to find the MethodInfo for a PC. Before, we were unnecessarily allocating stack space for a full-on REGDISPLAY which was all zeroes except for the IP portion, and then (after cursor initialization) copying the zeroed registers to the unwind cursor which didn't serve any purpose since all we wanted was the proc info.\r\n\r\nI've been measuring the performance using a simple allocation benchmark to which I added 100 threads that are just waiting (but will still get scanned during GCs). The total duration to run the benchmark goes down about 16% with just this one change. The gains are obviously smaller with fewer threads, but still very significant. Profiling data revealed that the extra work removed by this change accounted for roughly a quarter of what was being done by the `GcScanRootsWorker`, so we get a sizeable perf gain there.\r\n\r\nThis is only the first change I'm making in this area. I have a few more changes and perf improvements to all of this unwind-related code that I'll be sending out.\r\n\r\n@janvorli @jkotas @sergiy-k PTAL"},{"Id":"6807649730","Type":"PullRequestEvent","CreatedAt":"2017-11-03T20:48:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4868","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4868) at dotnet/corert","RelatedBody":""},{"Id":"6807648835","Type":"PullRequestEvent","CreatedAt":"2017-11-03T20:47:49","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4865","RelatedDescription":"Merged pull request \"[armel][cross] Documentation how to use cross compilation\" (#4865) at dotnet/corert","RelatedBody":"Added documentations and fixed few typos\r\n\r\n@dotnet/arm32-corert-contrib PTAL, any suggestions and fixes are welcome"},{"Id":"6806638485","Type":"PullRequestEvent","CreatedAt":"2017-11-03T16:50:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4867","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4867) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6806621972","Type":"PullRequestEvent","CreatedAt":"2017-11-03T16:47:18","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4867","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4867) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6806557791","Type":"PullRequestEvent","CreatedAt":"2017-11-03T16:34:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4866","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4866) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6806453017","Type":"PullRequestEvent","CreatedAt":"2017-11-03T16:14:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4866","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4866) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6806245084","Type":"PullRequestEvent","CreatedAt":"2017-11-03T15:35:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4857","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4857) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6805680236","Type":"PullRequestEvent","CreatedAt":"2017-11-03T13:50:43","Actor":"alpencolt","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4865","RelatedDescription":"Opened pull request \"[armel][cross] Documentation how to use cross compilation\" (#4865) at dotnet/corert","RelatedBody":"Added documentations and fixed few typos\r\n\r\n@dotnet/arm32-corert-contrib PTAL, any suggestions and fixes are welcome"},{"Id":"6804570584","Type":"PullRequestEvent","CreatedAt":"2017-11-03T09:18:20","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4864","RelatedDescription":"Merged pull request \"Revert \"implemented newobj for WASM using malloc (#4808)\"\" (#4864) at dotnet/corert","RelatedBody":"This reverts commit 3b9a7fc3fc60fdca245f431bfa40672f087a53d5. Fixes #4863 "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6802147263","Type":"PullRequestEvent","CreatedAt":"2017-11-02T19:08:29","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1710","RelatedDescription":"Opened pull request \"Don't exclude \"packages\" folder from default globs\" (#1710) at dotnet/sdk","RelatedBody":"Fixes #1708 \r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":39,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":130,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":387,"FavoriteCount":347,"RawContent":null}]}},"RunOn":"2017-11-03T23:18:47.7518331Z","RunDurationInMilliseconds":7784}