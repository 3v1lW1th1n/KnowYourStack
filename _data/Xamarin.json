{"Data":{"Blog":{"FeedItems":[{"Title":"Create and Host tvOS TVML Apps with Azure and Xamarin","PublishedOn":"2018-02-22T20:30:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Creating amazing tvOS TVML apps doesn&#8217;t have to be hard. In this blog post, I&#8217;ll go over the many similarities tvOS has to iOS and show you how to create a sample quiz app using UIKit that...","Href":"https://blog.xamarin.com/create-tvos-tvml-apps-azure-xamarin/","RawContent":null},{"Title":"Use CoreML And Azure To Create Simple Xamarin.iOS Apps","PublishedOn":"2018-02-20T19:36:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last year Apple released a device-optimized machine learning framework called Core ML to make it as easy as possible to integrate machine learning and artificial intelligence services into your iOS...","Href":"https://blog.xamarin.com/coreml-azure-create-simple-xamarin-ios-apps/","RawContent":null},{"Title":"Extend Xamarin.Forms Controls Functionality with Behaviors","PublishedOn":"2018-02-16T18:48:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms provides a way to build 100% native, cross-platform applications with both a shared logic layer and a shared user-interface layer. Built-in Xamarin.Forms controls also provide a ton of...","Href":"https://blog.xamarin.com/extend-xamarin-forms-controls-functionality-with-behaviors/","RawContent":null},{"Title":"Xamarin.iOS and Xcode 9.3 Web Preview","PublishedOn":"2018-02-15T20:36:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The next release of Xcode, version 9.3, is currently in beta. Development of Xamarin.iOS to support the new Xcode 9.3 version is in-progress and available now as a web preview. Participating in...","Href":"https://blog.xamarin.com/xcode-9-3-web-preview-high-sierra-required/","RawContent":null},{"Title":"Add a Search Bar to Your Xamarin Apps in iOS 11","PublishedOn":"2018-02-12T20:00:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As described in the Go Large with iOS 11 post, view controllers in iOS 11 can use large titles to improve the clarity of an app&#8217;s user interface. To complement a view controller&#8217;s large...","Href":"https://blog.xamarin.com/add-search-bar-xamarin-ios-11/","RawContent":null},{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null},{"Title":"Add Languages to Your Xamarin Apps with Multilingual App Toolkit","PublishedOn":"2018-02-08T20:10:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With Xamarin, you can extend your cross-platform apps with support for native speakers, reaching markets that might otherwise be overlooked. However, managing multiple languages and keeping everything...","Href":"https://blog.xamarin.com/add-languages-to-your-apps-with-xamarin-and-multilingual-app-toolkit/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Building Your First Intelligent App with Xamarin and Microsoft Cognitive Services","PublishedOn":"2018-02-07T19:39:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today&#8217;s apps must be “intelligent” to win app users’ loyalty, whether for a consumer app or a business app. With Xamarin.Forms and Microsoft Cognitive Services, you can easily create your first...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-building-first-intelligent-app-xamarin-microsoft-cognitive-services/","RawContent":null},{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7284395795","Type":"IssuesEvent","CreatedAt":"2018-02-22T22:28:09","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1332","RelatedDescription":"Opened issue \"Properly reorder AndroidManifest.xml elements\" (#1332) at xamarin/xamarin-android","RelatedBody":"There is indeed an appropriate ordering for `AndroidManifest.xml` elements!\r\n\r\nIn particular, we have encountered an app repro + device which crashes within Skia if `AndroidManifest.xml` contains:\r\n\r\n```xml\r\n<uses-sdk android:minSdkVersion=\"19\" />\r\n<application android:label=\"CrashXamarin.Android\"></application>\r\n```\r\n\r\nbut *works* if `<application/>` comes *before* `<uses-sdk/>`!\r\n\r\n```xml\r\n<application android:label=\"CrashGPSXamarin.Android\"></application>\r\n<uses-sdk android:minSdkVersion=\"19\" />\r\n```\r\n\r\nWe need to determine what the proper ordering actually is, then update the packaging step so that we appropriate reorder elements within `AndroidManifest.xml` so we avoid such bizarre behaviors.\r\n"},{"Id":"7283217834","Type":"PullRequestEvent","CreatedAt":"2018-02-22T18:24:00","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1330","RelatedDescription":"Opened pull request \"[tests] Bump minSdkVersion to 14\" (#1330) at xamarin/xamarin-android","RelatedBody":"NDK r16 supports a minimum platform version of 14."},{"Id":"7282635268","Type":"PullRequestEvent","CreatedAt":"2018-02-22T16:36:09","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1329","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Added support for missing resource types\" (#1329) at xamarin/xamarin-android","RelatedBody":"Fixes #1262\r\n\r\nThe initial version of the ManagedResourceParser was missing\r\nsome types. Specifically `Menu`, `Animator`, `Plurals`,\r\n`Mipmap` and `Font`. This commit adds support for those\r\nmissing types. It also adds a Task unit test for the Parser\r\nso ensure that the types are added."},{"Id":"7281690546","Type":"IssuesEvent","CreatedAt":"2018-02-22T13:58:05","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1310","RelatedDescription":"Closed issue \"Encountering BCL-Test failure in MonoTests.System.Runtime.CompilerServices.RuntimeFeatureTest.NoNewFeaturesAdded (monodroid_corlib_test) when running on Android in Release config\" (#1310) at xamarin/xamarin-android","RelatedBody":"Similar to #1309, the following test case fails on Android when ran in Release configuration. Presumably the issue is linker related?\r\n\r\nhttps://github.com/mono/mono/blob/master/mcs/class/corlib/Test/System.Runtime.CompilerServices/RuntimeFeatureTest.cs#L44\r\n\r\n### Steps to Reproduce\r\n\r\n1. Copy over the relevant test source linked above into a new Android project and deploy it in release configuration.\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThe test should pass when ran in a 'Release' configuration.\r\n\r\n### Actual Behavior\r\nThe test fails when ran in a 'Release' configuration.\r\n\r\n### Version Information\r\nmono-2017-12\r\nhttps://gist.github.com/pjcollins/43e1e192125ac5db93c1af50faaffee8\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n``` \r\nMonoTests.System.Runtime.CompilerServices.RuntimeFeatureTest.NoNewFeaturesAdded (monodroid_corlib_test)\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   Expected is <System.ValueTuple`2[System.String,System.Boolean][1]>, actual is <System.ValueTuple`2[System.String,System.Boolean][0]>\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   Values differ at index [0]\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   Missing:  < (PortablePdb, True) >\r\n02-14 14:41:22.282 10712 10729 I NUnit   :\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at MonoTests.System.Runtime.CompilerServices.RuntimeFeatureTest.NoNewFeaturesAdded () [0x00088] in <51b16f8a5a3c437f97c053afcbbba491>:0\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <3e87052017124b0aa0d514e8df5eadbc>:0```"},{"Id":"7279971104","Type":"PullRequestEvent","CreatedAt":"2018-02-22T07:43:50","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1328","RelatedDescription":"Merged pull request \"Bump to xamarin-android-api-compatibility/master/2c689ef2\" (#1328) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1089\r\n\r\nWe found that xamarin-android-api-compatibility wasn't *actually*\r\nperforming the inter-API-level checks, meaning an important API\r\ncompatibility check wasn't being performed.\r\n\r\nBump to xamarin-android-api-compatibility/2c689ef2 so that\r\ninter-API-level checks are properly performed.\r\n\r\nAdditionally, set `$(HTML_OUTPUT_DIR)` so that `mono-api-html` output\r\nfiles are written into `bin/Build$(CONFIGURATION)/compatibility`.\r\nThis will (hopefully) allow us to use the Jenkins\r\n**Publish HTML reports** Post-build Action to nicely display API\r\ncompatibility breakage, without requiring that we read the actual\r\nbuild log output."},{"Id":"7279971093","Type":"IssuesEvent","CreatedAt":"2018-02-22T07:43:50","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1089","RelatedDescription":"Closed issue \"Fix inter-API-level checks\" (#1089) at xamarin/xamarin-android","RelatedBody":""},{"Id":"7279956427","Type":"IssuesEvent","CreatedAt":"2018-02-22T07:39:31","Actor":"marek-safar","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1309","RelatedDescription":"Closed issue \"Encountering BCL-Test failure in MonoTests.System.Xml.XmlReaderSettingsTests.LegacyXmlSettingsAreDisabled (monodroid_System.Xml_test)\" (#1309) at xamarin/xamarin-android","RelatedBody":"The following test case fails on Android when ran in Release configuration. Perhaps the issue is linker related?\r\n\r\nhttps://github.com/mono/mono/blob/master/mcs/class/System.XML/Test/System.Xml/XmlReaderSettingsTests.cs#L448\r\n\r\n### Steps to Reproduce\r\n\r\n1. Copy over the relevant test source linked above into a new Android project and deploy it in release configuration.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nThe test should pass when ran in a 'Release' configuration.\r\n\r\n### Actual Behavior\r\nThe test fails when ran in a 'Release' configuration.\r\n\r\n### Version Information\r\nmono-2017-12\r\nhttps://gist.github.com/pjcollins/43e1e192125ac5db93c1af50faaffee8\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n```\r\n02-14 14:41:22.282 10712 10729 I NUnit   : 1) MonoTests.System.Xml.XmlReaderSettingsTests.LegacyXmlSettingsAreDisabled (monodroid_System.Xml_test)\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   Expected: False\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   But was:  True\r\n02-14 14:41:22.282 10712 10729 I NUnit   :\r\n02-14 14:41:22.282 10712 10729 I NUnit   :\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at MonoTests.System.Xml.XmlReaderSettingsTests.LegacyXmlSettingsAreDisabled () [0x0001d] in <fa6695560f1c4a2b9bed9e563ba80ada>:0\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n02-14 14:41:22.282 10712 10729 I NUnit   :   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <3e87052017124b0aa0d514e8df5eadbc>:0\r\n```"},{"Id":"7278870346","Type":"PullRequestEvent","CreatedAt":"2018-02-22T01:03:12","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1327","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add support for Generated Resources via VSForMac\" (#1327) at xamarin/xamarin-android","RelatedBody":"Context https://bugzilla.xamarin.com/show_bug.cgi?id=5870\r\n\r\nOne of the issues with the current resource designer implementation\r\nis that it is not in the intermediate directory. As a result it is\r\nalways causing problems for Source control systems.\r\n\r\nAdditionally normal .net apps create generated files in the\r\nintermediate directory and make use of the a target and make use\r\nof \"build time code generation\" [1] by making use of the Generator\r\nmetadata in MSBuild. Visual studio already has support for this\r\nhowever VSForMac did not.\r\n\r\nThe issue with VSForMac is now being solved. With this commit\r\nwe will introduce a new target UpdateGeneratedFiles which can be\r\nused by both VS and XS to generate the Resource.Designer.xx file\r\nin the intermediate directory.\r\n\r\nAll of this is current protected by the AndroidUseIntermediateDesignerFile\r\nproperty which defaults to false.\r\n\r\n[1] https://mhut.ch/journal/2015/06/30/build_time_code_generation_msbuild"},{"Id":"7278825911","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:49:09","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1078","RelatedDescription":"Closed pull request \"Bump to xamarin-android-api-compatibility/master/9cfa6cc9\" (#1078) at xamarin/xamarin-android","RelatedBody":"We found that xamarin-android-api-compatibility wasn't *actually*\r\nperforming the inter-API-level checks, meaning an important API\r\ncompatibility check wasn't being performed.\r\n\r\nBump to xamarin-android-api-compatibility/9cfa6cc9 so that\r\ninter-API-level checks are properly performed.\r\n"},{"Id":"7278824435","Type":"PullRequestEvent","CreatedAt":"2018-02-22T00:48:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1328","RelatedDescription":"Opened pull request \"Bump to xamarin-android-api-compatibility/master/2c689ef2\" (#1328) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1089\r\n\r\nWe found that xamarin-android-api-compatibility wasn't *actually*\r\nperforming the inter-API-level checks, meaning an important API\r\ncompatibility check wasn't being performed.\r\n\r\nBump to xamarin-android-api-compatibility/2c689ef2 so that\r\ninter-API-level checks are properly performed.\r\n\r\nAdditionally, set `$(HTML_OUTPUT_DIR)` so that `mono-api-html` output\r\nfiles are written into `bin/Build$(CONFIGURATION)/compatibility`.\r\nThis will (hopefully) allow us to use the Jenkins\r\n**Publish HTML reports** Post-build Action to nicely display API\r\ncompatibility breakage, without requiring that we read the actual\r\nbuild log output."},{"Id":"7277768561","Type":"PullRequestEvent","CreatedAt":"2018-02-21T20:34:16","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1327","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Add support for Generated Resources via VSForMac\" (#1327) at xamarin/xamarin-android","RelatedBody":"Context https://bugzilla.xamarin.com/show_bug.cgi?id=5870\r\n\r\nOne of the issues with the current resource designer implementation\r\nis that it is not in the intermediate directory. As a result it is\r\nalways causing problems for Source control systems.\r\n\r\nAdditionally normal .net apps create generated files in the\r\nintermediate directory and make use of the a target and make use\r\nof \"build time code generation\" [1] by making use if the Generator\r\nmetadata in MSBuild. Visual studio already has support for this\r\nhowever VSForMac did not.\r\n\r\nThe issue with VSForMac is now being solved. With this commit\r\nwe will introduce a new target UpdateGeneratedFiles which can be\r\nused by both VS and XS to generate the Resource.Designer.xx file\r\nin the intermediate directory.\r\n\r\nAll of this is current protected by the AndroidUseIntermediateDesignerFile\r\nproperty which defaults to false.\r\n\r\n[1] https://mhut.ch/journal/2015/06/30/build_time_code_generation_msbuild"},{"Id":"7277764027","Type":"PullRequestEvent","CreatedAt":"2018-02-21T20:33:19","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1326","RelatedDescription":"Closed pull request \"[Xamarin.Android.Build.Tasks] Add support for Generated Resources via VSForMac (#643)\" (#1326) at xamarin/xamarin-android","RelatedBody":"Context https://bugzilla.xamarin.com/show_bug.cgi?id=5870\r\n\r\nOne of the issues with the current resource designer implementation\r\nis that it is not in the intermediate directory. As a result it is\r\nalways causing problems for Source control systems.\r\n\r\nAdditionally normal .net apps create generated files in the\r\nintermediate directory and make use of the a target and make use\r\nof \"build time code generation\" [1] by making use if the Generator\r\nmetadata in MSBuild. Visual studio already has support for this\r\nhowever VisualStudioForMac did not.\r\n\r\nThe issue with VisualStudioForMac is now being solved. With this commit\r\nwe will introduce a new target UpdateGeneratedFiles which can be\r\nused by both VS and XS to generate the Resource.Designer.xx file\r\nin the intermediate directory.\r\n\r\nAll of this is current protected by the AndroidUseIntermediateDesignerFile\r\nproperty which defaults to false.\r\n\r\n[1] https://mhut.ch/journal/2015/06/30/build_time_code_generation_msbuild"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7285398274","Type":"IssuesEvent","CreatedAt":"2018-02-23T03:52:49","Actor":"MelbourneDeveloper","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1966","RelatedDescription":"Opened issue \"ListView - No Indication When DataTemplate Error Occurred\" (#1966) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen XAML is rendered dynamically inside controls like ListView with a DataTemplate, there is often no visual indication that the parsing/rendering has failed. Moreover, if the element doesn't end up getting rendered, it can cause the app to crash. Also, clicking on a ListView item that did not correctly render will crash the app. This is a problem with ListView, but probably happens with several controls that implement DataTemplate based item creation.\r\n\r\n### Steps to Reproduce\r\n1. Clone this repo https://ChristianFindlay@bitbucket.org/ChristianFindlay/xamarin-forms-scratch.git\r\n2. Run the UWP sample\r\n3. Click ListView DataTemplates\r\n4. Notice that in the top left where the ListView should be, there is nothing\r\n5. Hover over the ListView in the top left. Notice that the items **ARE** highlighted as you move over them\r\n6. Click on an item -> App Crash\r\n\r\nTo Fix:\r\n1.  Open the page ListViewDataTemplateIssuePage.xaml. \r\n2.  Delete the text AbsoluteLayout.LayoutBounds=\"ASDFSDF@#$#$@#$\"\r\n3. Recompile and run test. \r\n4. Notice that the ListView now works fine.\r\n\r\n### Expected Behavior\r\nGive the user some indication that the ListView's items didn't render correctly. Perhaps making the control glow red or something. And, the app doesn't crash when you click on an item.\r\n\r\n### Actual Behavior\r\nThe area of the screen where the ListView exists goes blank, and the app crashes when you click on an item.\r\n\r\n### Basic Information\r\n- Version with issue: 2.5.0.280555\r\n- Last known good version:\r\n- IDE: VS\r\n- Platform Target Frameworks: \r\n  - UWP:  16299 \r\n  - Probably all platforms\r\n- Nuget Packages: Xamarin.Forms \r\n- Affected Devices:\r\n\r\n### Screenshots\r\n[ListView](https://www.dropbox.com/s/xi3905g18eh3k5v/ListViewIssue.png?dl=0)\r\n\r\n### Reproduction Link\r\nhttps://ChristianFindlay@bitbucket.org/ChristianFindlay/xamarin-forms-scratch.git\r\n"},{"Id":"7284786587","Type":"IssuesEvent","CreatedAt":"2018-02-23T00:14:59","Actor":"MelbourneDeveloper","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1965","RelatedDescription":"Opened issue \"HeightRequest Doesn't Change Editor Size - UWP\" (#1965) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIf an Editor (and probably other controls) is in an Auto sized row on UWP, and the HeightRequest is changed to 0, the control is not resized, but the RowDefinition's height **_is_** changed. \r\n\r\n### Steps to Reproduce\r\n1. Clone this repo https://ChristianFindlay@bitbucket.org/ChristianFindlay/xamarin-forms-scratch.git\r\n2. Open the solution and run the UWP App\r\n3. Click Auto Test Page\r\n4. Click Change Entry Size (this sets the Editor to a HeightRequest of 0)\r\n5. Notice that the Row size changes but the control remains the same.\r\n\r\n### Expected Behavior\r\nControl's Height changes to zero.\r\n\r\n### Actual Behavior\r\nControl's Height does not change.\r\n\r\n### Basic Information\r\nThis is not an issue on Android. The behaviour is different\r\n\r\n- Version with issue:\r\n- Last known good version: 2.5.0.280555\r\n- IDE: Visual Studio\r\n- Platform Target Frameworks: \r\n  - UWP:  16299 \r\n- Nuget Packages: Xamarin.Forms\r\n- Affected Devices: Windows 10\r\n\r\n### Screenshots\r\n![Full size](https://www.dropbox.com/s/equqswr8464vop0/AutoUWP1.png?dl=0)\r\n\r\n![0 size](https://www.dropbox.com/s/2a6a1yrc9tflgyz/AutoUWP2.png?dl=0)\r\n\r\n### Reproduction Link\r\nhttps://ChristianFindlay@bitbucket.org/ChristianFindlay/xamarin-forms-scratch.git\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7285479227","Type":"IssuesEvent","CreatedAt":"2018-02-23T04:28:40","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3582","RelatedDescription":"Opened issue \"[rfc] NativeObjectAttribute: The class attribute to generate INativeObjects classes\" (#3582) at xamarin/xamarin-macios","RelatedBody":"### Description\r\n\r\nCurrently we do not provide a mechanism in the generator to generate bindings for [Core Foundation objects](https://developer.apple.com/documentation/corefoundation/cftyperef?language=objc) or objects like [VTSession](https://developer.apple.com/documentation/videotoolbox/vtsession). \r\n\r\nThe idea is to teach the generator how to create the boilerplate code for this kind of objects and be used in conjunction of [`[ExternizerAttribute]`](https://github.com/xamarin/xamarin-macios/issues/3452) to simplify the binding process for this kind of objects.\r\n\r\nIntroducing `[NativeObject]`:\r\n\r\n```csharp\r\n[AttributeUsage (AttributeTargets.Interface, AllowMultiple = false)]\r\npublic class NativeObjectAttribute : Attribute {\r\n\tpublic Visibility OwnsCtorVisibility { get; set; } = Visibility.Internal;\r\n\tpublic NativeObjectAttribute () { }\r\n\tpublic NativeObjectAttribute (Visibility ownsCtorVisibility) => OwnsCtorVisibility = ownsCtorVisibility;\r\n}\r\n```\r\n\r\nThis would be used as follows:\r\n\r\n```csharp\r\n[NativeObject]\r\ninterface NFoo {\r\n}\r\n```\r\n\r\nThis will instruct the generator to create a `partial` subclass of the following new abstract class named `NSNativeObject` that would live inside `Foundation` namespace:\r\n\r\n```csharp\r\npublic abstract class NSNativeObject : INativeObject, IDisposable {\r\n\r\n\tprotected internal NSNativeObject (IntPtr handle)\r\n\t{\r\n\t\tthis.handle = handle;\r\n\t\tCFObject.CFRetain (this.handle);\r\n\t}\r\n\r\n\tIntPtr handle;\r\n\tpublic IntPtr Handle {\r\n\t\tget { return handle; }\r\n\t}\r\n\r\n\t[Preserve (Conditional = true)]\r\n\tinternal NSNativeObject (IntPtr handle, bool owns)\r\n\t{\r\n\t\tthis.handle = handle;\r\n\t\tif (!owns)\r\n\t\t\tCFObject.CFRetain (this.handle);\r\n\t}\r\n\r\n\t~NSNativeObject ()\r\n\t{\r\n\t\tDispose (false);\r\n\t}\r\n\r\n\tpublic void Dispose ()\r\n\t{\r\n\t\tDispose (true);\r\n\t\tGC.SuppressFinalize (this);\r\n\t}\r\n\r\n\tprotected virtual void Dispose (bool disposing)\r\n\t{\r\n\t\tif (handle != IntPtr.Zero){\r\n\t\t\tCFObject.CFRelease (handle);\r\n\t\t\thandle = IntPtr.Zero;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThe generated code would look like this:\r\n\r\n```csharp\r\npublic partial class NFoo : NSNativeObject {\r\n\t\r\n\tprotected internal NFoo (IntPtr handle) : base (handle)\r\n\t{\r\n\t}\r\n\r\n\t[Preserve (Conditional = true)]\r\n\tinternal NFoo (IntPtr handle, bool owns) : base (handle, owns)\r\n\t{\r\n\t}\r\n\r\n\t~NFoo ()\r\n\t{\r\n\t\tDispose (false);\r\n\t}\r\n}\r\n```\r\n\r\nMost of the time these objects have factory methods, this is the reason why the `.ctor (IntPtr,bool)` is `internal` and can be implemented either manually or by using the [`[ExternizerAttribute]`](https://github.com/xamarin/xamarin-macios/issues/3452)."},{"Id":"7284352936","Type":"PullRequestEvent","CreatedAt":"2018-02-22T22:18:23","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3572","RelatedDescription":"Merged pull request \"[modelio] MDLVoxelArray should have a base type of MDLObject (fix xtro) (#3563)\" (#3572) at xamarin/xamarin-macios","RelatedBody":"Backport of https://github.com/xamarin/xamarin-macios/pull/3563\r\n\r\nMoving the base type to `MDLObject` wasn't a breaking change on macOS.\r\nThere is no reason for the ifdef and xtro reports the issue correctly."},{"Id":"7284326008","Type":"PullRequestEvent","CreatedAt":"2018-02-22T22:12:19","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3573","RelatedDescription":"Merged pull request \"[homekit] Update to Xcode 9.3 beta 3\" (#3573) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7284318549","Type":"PullRequestEvent","CreatedAt":"2018-02-22T22:10:36","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3576","RelatedDescription":"Merged pull request \"[iad] Update to Xcode 9.3 beta 3\" (#3576) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7284166995","Type":"PullRequestEvent","CreatedAt":"2018-02-22T21:38:33","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3579","RelatedDescription":"Merged pull request \"[d15-7] Warn when building 32-bit macOS applications (#3564)\" (#3579) at xamarin/xamarin-macios","RelatedBody":"- https://github.com/xamarin/xamarin-macios/issues/3325"},{"Id":"7284162463","Type":"PullRequestEvent","CreatedAt":"2018-02-22T21:37:33","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3571","RelatedDescription":"Merged pull request \"Bump maccore & macios-binaries to fix the documentation workflow.\" (#3571) at xamarin/xamarin-macios","RelatedBody":"This should make the \"test-docs\" step on wrench pass again.\n\nCommit list for xamarin/macios-binaries:\n\n* xamarin/macios-binaries@e1e8bdf Add ios/compat version of core.dll and temp.dll from d15-5 for documentation workflow. (#7)\n* xamarin/macios-binaries@e64e7ef Merge pull request #5 from timrisi/ClassicDocs\n* xamarin/macios-binaries@3c92bb1 Remove .DS_Store files\n* xamarin/macios-binaries@587623f Add classic docs\n\nDiff: https://github.com/xamarin/macios-binaries/compare/93fb980b0e59da33d1884e93326b6c7f2e69c4d7...e1e8bdf7a8566e35182f3ac0bbbc4fc133196759\n\nCommit list for xamarin/maccore:\n\n* xamarin/maccore@1b5311781c [docs] Look for binary classic files in the right place. (#646)\n\nDiff: https://github.com/xamarin/maccore/compare/4872731c32ece5d78855b12a2cedd75f4d00ac18...1b5311781c4e5514ed00fcbde0a4b9ad6031f39d"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"966787653097181187","CreatedAt":"2018-02-22T21:31:53+00:00","UserScreenname":"xamarinhq","Text":"Create and host tvOS TVML apps with Microsoft #Azure and #Xamarin: https://t.co/ScMHDQBDvs https://t.co/sPxlVR6weS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":11,"RawContent":null},{"Id":"966716967104245760","CreatedAt":"2018-02-22T16:51:00+00:00","UserScreenname":"xamarinhq","Text":"It's almost time for our webinar with @XamarinU on building your first intelligent app with #Xamarin and Microsoft… https://t.co/nrzOWMsSV0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":11,"FavoriteCount":4,"RawContent":null},{"Id":"966354831018520577","CreatedAt":"2018-02-21T16:52:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss tomorrow's webinar with @XamarinU on building your first intelligent app with #Xamarin and M… https://t.co/XMK3ovJfTs","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":16,"RawContent":null},{"Id":"966037865846181889","CreatedAt":"2018-02-20T19:52:29+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/Qv70tw9axj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":34,"RawContent":null},{"Id":"965998738874556416","CreatedAt":"2018-02-20T17:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:… https://t.co/1lAEfhDA1g","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":16,"RawContent":null},{"Id":"965632571618062337","CreatedAt":"2018-02-19T17:02:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"965372405307904001","CreatedAt":"2018-02-18T23:48:11+00:00","UserScreenname":"xamarinhq","Text":"Start shipping better apps, faster with this curated list of #VSAppCenter resources: https://t.co/jU0cnONnM8 https://t.co/jYvtDxgwWV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null},{"Id":"965038410061754371","CreatedAt":"2018-02-18T01:41:01+00:00","UserScreenname":"xamarinhq","Text":"Minimizes the complexity of video playback across Android, iOS, and Windows environments to deliver rich media expe… https://t.co/RWk7OAQZFR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":44,"RawContent":null},{"Id":"964574735530065920","CreatedAt":"2018-02-16T18:58:32+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/7nB0W3r0xF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":23,"RawContent":null},{"Id":"964541888152920064","CreatedAt":"2018-02-16T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Adding sound to a #XamarinForms app using the SimpleAudioPlayer plugin: https://t.co/r8NSFRpl33 https://t.co/WXW0TRw6LE","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":10,"RawContent":null},{"Id":"964239391743979520","CreatedAt":"2018-02-15T20:46:00+00:00","UserScreenname":"xamarinhq","Text":"Try out the just-released Xamarin.iOS and Xcode 9.3 Web Preview: https://t.co/2zZi61OBFp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"964183272367579136","CreatedAt":"2018-02-15T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss next week's webinar with @XamarinU on building your first intelligent app with #Xamarin and Microsoft… https://t.co/Dn5JtYz3iz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":17,"RawContent":null},{"Id":"963815851416834049","CreatedAt":"2018-02-14T16:43:00+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":22,"RawContent":null},{"Id":"963459759562199040","CreatedAt":"2018-02-13T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/mH5kYVNNvT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":19,"RawContent":null},{"Id":"963145186711830528","CreatedAt":"2018-02-12T20:18:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/ZG5Y2IRf3r","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":20,"RawContent":null},{"Id":"963094603065937920","CreatedAt":"2018-02-12T16:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the open source suite of SmartHotel360 reference #XamarinForms, Xamarin.iOS, and… https://t.co/5bwxwaCxyV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":130,"FavoriteCount":46,"RawContent":null},{"Id":"962828622875815936","CreatedAt":"2018-02-11T23:20:06+00:00","UserScreenname":"xamarinhq","Text":"Our own @jamesmontemagno shows you how to leverage the #Xamarin Live Player with your iOS applications:… https://t.co/389iYhDt9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":42,"RawContent":null},{"Id":"962480803748999168","CreatedAt":"2018-02-11T00:18:00+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/eJkPovjm0G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":16,"RawContent":null},{"Id":"962049464084062208","CreatedAt":"2018-02-09T19:44:00+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast, @JamesMontemagno and @pierceboggan talk rapid UI prototyping with Ink to Code, me… https://t.co/FTH39xKI1K","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2018-02-23T05:30:41.6935522Z","RunDurationInMilliseconds":4719}