{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null},{"Title":"Try the new System.Text.Json APIs","PublishedOn":"2019-06-13T17:39:05+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"For .NET Core 3.0, we&#8217;re shipping a brand new namespace called System.Text.Json with support for a reader/writer, a document object model (DOM), and a serializer. In this blog post, I&#8217;m...","Href":"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 6","PublishedOn":"2019-06-12T17:00:14+00:00","CommentsCount":45,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 6. It includes updates for compiling assemblies for improved startup, optimizing applications for size with linker and EventPipe improvements....","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-6/","RawContent":null},{"Title":"Announcing ML.NET 1.1 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-06-11T17:16:17+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers.\nML.NET offers Model Builder Model Builder (a simple UI tool for Visual Studio) and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-1-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Migrating a Sample WPF App to .NET Core 3 (Part 2)","PublishedOn":"2019-06-10T15:23:35+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"In part 1 of this blog series, I began the process of porting a sample WPF app to .NET Core. In that post, I described the .NET Core migration process as having four steps:\nWe previously went through...","Href":"https://devblogs.microsoft.com/dotnet/migrating-a-sample-wpf-app-to-net-core-3-part-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9953472026","Type":"IssuesEvent","CreatedAt":"2019-07-05T04:49:13","Actor":"fadimounir","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24701","RelatedDescription":"Closed issue \"[Windows/arm] PMI assertions in System.Memory.dll: idxLastRegDesc > 0\" (#24701) at dotnet/coreclr","RelatedBody":"All the assertions in the same location **src\\vm\\arm\\stubs.cpp Line: 1832** https://github.com/dotnet/coreclr/blob/2b4b230cdf44d0c25df004660f18c4290e9deb72/src/vm/arm/stubs.cpp#L1817-L1834\r\n\r\n```\r\nPREPALL type# 32 method# 253 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::Slice\r\n\r\nAssert failure(PID 14092 [0x0000370c], Thread: 3664 [0x0e50]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\n```\r\nPREPALL type# 32 method# 256 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::GetPosition\r\n\r\nAssert failure(PID 13332 [0x00003414], Thread: 2020 [0x07e4]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\n```\r\nPREPALL type# 32 method# 264 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::Seek\r\n\r\nAssert failure(PID 7660 [0x00001dec], Thread: 2312 [0x0908]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nReproduces on top of eb95382ef607afb7def0656168a6a6507b45f254"},{"Id":"9953470957","Type":"PullRequestEvent","CreatedAt":"2019-07-05T04:48:49","Actor":"fadimounir","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25558","RelatedDescription":"Merged pull request \"Fix instantiation stub maker for case where no register is used by function parameters\" (#25558) at dotnet/coreclr","RelatedBody":"Fix for #24701 \r\n\r\nThe issue here is that the stub maker logic always assumed there was at least one register used to pass parameters to the function after inserting the instantiation parameter. This is incorrect in the cases where more than one register is needed to pass a single argument, and there aren't enough registers available, in which case the parameter is passed on the stack (and some registers remain unused). \r\n\r\nExample:\r\n- r0 used by this ptr\r\n- r1 used by return buffer ptr\r\n- r2 used by the inserted instantiation argument\r\n- r3 unused\r\n- stack0 + stack1 used to pass a `long` parameter\r\n"},{"Id":"9952491494","Type":"PullRequestEvent","CreatedAt":"2019-07-04T22:06:25","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25565","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#25565) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.14\r\n- **Date Produced**: 7/4/2019 6:39 AM\r\n- **Commit**: 4e18401b3b8cf2080201b1d0683f0892deba63f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-14\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"9950694863","Type":"PullRequestEvent","CreatedAt":"2019-07-04T14:29:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25563","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#25563) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n"},{"Id":"9950539614","Type":"PullRequestEvent","CreatedAt":"2019-07-04T14:07:53","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25562","RelatedDescription":"Merged pull request \"Fix dotnet-dump/createdump launch failure\" (#25562) at dotnet/coreclr","RelatedBody":"On CentOS or OpenSUSE dotnet-dump collect fails but a\r\nvalid coredump is generated. The \"prctl()\" call is failing\r\nthat gives the child createdump process permission to ptrace\r\nto the runtime process. On CentOS/OpenSUSE the PR_SET_PTRACER\r\noption isn't supported and not needed.\r\n\r\nIssue: https://github.com/dotnet/diagnostics/issues/334"},{"Id":"9950003699","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:51:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25566","RelatedDescription":"Opened pull request \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25566) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190704.1\r\n- **Date Produced**: 7/4/2019 11:29 AM\r\n- **Commit**: ac14c2abe6ef3b8b9996cd142c3075a83764171a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190704.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190704.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n"},{"Id":"9949927365","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:40:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25565","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#25565) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.14\r\n- **Date Produced**: 7/4/2019 6:39 AM\r\n- **Commit**: 4e18401b3b8cf2080201b1d0683f0892deba63f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-14\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"9949896582","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:35:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25564","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#25564) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19353.8\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9953452003","Type":"PullRequestEvent","CreatedAt":"2019-07-05T04:41:47","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11748","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11748) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.08\r\n- **Date Produced**: 7/5/2019 4:11 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-08\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9953365923","Type":"PullRequestEvent","CreatedAt":"2019-07-05T04:11:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11748","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11748) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.08\r\n- **Date Produced**: 7/5/2019 4:11 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-08\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9953264715","Type":"PullRequestEvent","CreatedAt":"2019-07-05T03:35:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11747","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11747) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.07\r\n- **Date Produced**: 7/5/2019 2:59 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9953159150","Type":"PullRequestEvent","CreatedAt":"2019-07-05T02:59:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11747","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11747) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.07\r\n- **Date Produced**: 7/5/2019 2:59 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9952854291","Type":"PullRequestEvent","CreatedAt":"2019-07-05T01:09:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11746","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11746) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190704.3\r\n- **Date Produced**: 7/5/2019 12:38 AM\r\n- **Commit**: eb4e6411daa83711d955ee9c49bb4de66b69584f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19354.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"9952790509","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:39:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11746","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11746) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190704.3\r\n- **Date Produced**: 7/5/2019 12:38 AM\r\n- **Commit**: eb4e6411daa83711d955ee9c49bb4de66b69584f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19354.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9951847287","Type":"IssuesEvent","CreatedAt":"2019-07-04T18:29:29","Actor":"PKYADAV","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1311","RelatedDescription":"Opened issue \"DataAnnotation Validation in Xamarin.Forms\" (#1311) at dotnet/standard","RelatedBody":"Hi Team, \r\n\r\nI have class library in .net Standard 2.0 with EntityFrameworkCore. I have created class with Custom DataAnnotation as below:\r\n\r\n**Model Definition**\r\n\r\npublic class UserLogin : NotificationObject\r\n    {\r\n        [DbRequired]\r\n        [Display(Name = \"USER NAME\", Prompt = \"ENTER USER NAME\")]\r\n        public string User_Name\r\n        {\r\n            get { return GetValue(() => User_Name); }\r\n            set { SetValue(() => User_Name, value); }\r\n        }\r\n\r\n        [Display(Name = \"PASSWORD\", Prompt = \"ENTER PASSWORD\")]\r\n        [DataType(DataType.Password)]\r\n        [DbRequired]\r\n        public string User_Password\r\n        {\r\n            get { return GetValue(() => User_Password); }\r\n            set { SetValue(() => User_Password, value); }\r\n        }\r\n    }\r\n\r\n**But this data annotation validation is working in Asp.Net Core and WPF. But we want to use the same in Xamarin.Forms for Android & iOS and UWP. Is it possible or any workaround? As I heard that in .net Standard you need write once and can be reuse in all other environment **"},{"Id":"9950127440","Type":"PullRequestEvent","CreatedAt":"2019-07-04T13:09:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1310","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1310) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9950057124","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:59:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1310","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1310) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9949753153","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:14:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1309","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1309) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9949690748","Type":"PullRequestEvent","CreatedAt":"2019-07-04T12:04:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1309","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1309) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9949352362","Type":"IssuesEvent","CreatedAt":"2019-07-04T11:07:50","Actor":"brad302","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1291","RelatedDescription":"Closed issue \"Error NETSDK1022: Duplicate 'EmbeddedResource' items were included.\" (#1291) at dotnet/standard","RelatedBody":"Apologies if this isn't the correct place but it seems like the most logical place to start.\r\n\r\nI used this link ... [https://montemagno.com/how-to-convert-a-pcl-library-to-net-standard-and-keep-git-history/](https://montemagno.com/how-to-convert-a-pcl-library-to-net-standard-and-keep-git-history/) (which worked for other projects) ... to convert my PCL project in Xamarin Forms to .NET Standard 2.0 and ever since, I've had the issue where XAML files appear twice and no matter what I try, they simply will not fall back into line as one with the .cs file as its dependency ...\r\n\r\n<img width=\"301\" alt=\"Screen Shot 2019-06-28 at 10 25 57 pm\" src=\"https://user-images.githubusercontent.com/14899088/60342052-c43dd500-99f3-11e9-814e-c1441bde4484.png\">\r\n\r\n... even new XAML ContentPage files display the same behaviour, however, not initially.  If I close the project and reopen, they appear as 2.  I've tried removing and adding the files back in different ways but still no luck.\r\n\r\nMy .csproj file is very light on ...\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard2.0</TargetFramework>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n        <!--<PackageReference Include=\"\" Version=\"\"/>-->\r\n        <PackageReference Include=\"CarouselView.FormsPlugin\" Version=\"5.0.0\" />\r\n        <PackageReference Include=\"Com.Airbnb.Xamarin.Forms.Lottie\" Version=\"2.5.4\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Analytics\" Version=\"2.1.1\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Crashes\" Version=\"2.1.1\" />\r\n        <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\" />\r\n        <PackageReference Include=\"Refit\" Version=\"4.5.6\" />\r\n        <PackageReference Include=\"SkiaSharp.Views.Forms\" Version=\"1.68.0\" />\r\n        <PackageReference Include=\"sqlite-net-pcl\" Version=\"1.5.231\" />\r\n        <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\r\n        <PackageReference Include=\"Xam.Plugin.Media\" Version=\"4.0.1.5\" />\r\n        <PackageReference Include=\"Xam.Plugins.Forms.ImageCircle\" Version=\"3.0.0.5\" />\r\n        <PackageReference Include=\"Xam.Plugins.Messaging\" Version=\"5.2.0\" />\r\n        <PackageReference Include=\"Xamarin.Essentials\" Version=\"1.1.0\" />\r\n        <PackageReference Include=\"Xamarin.Forms\" Version=\"4.0.0.540366\" />\r\n        <PackageReference Include=\"Xamarin.Forms.Maps\" Version=\"4.0.0.540366\" />\r\n        <PackageReference Include=\"ZXing.Net.Mobile\" Version=\"2.4.1\" />\r\n        <PackageReference Include=\"ZXing.Net.Mobile.Forms\" Version=\"2.4.1\" />\r\n        <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.5.0\" />\r\n        <PackageReference Include=\"UltimateXF\" Version=\"2.3.2\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Auth\" Version=\"2.1.1\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n... and nothing on other community sites (e.g. StackOverflow) have helped me overcome this.\r\n\r\nThis is the entire error minus ALL of the XAML files within the project listed ...\r\n\r\n`/usr/local/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.DefaultItems.targets(5,5): Error NETSDK1022: Duplicate 'EmbeddedResource' items were included. The .NET SDK includes 'EmbeddedResource' items from your project directory by default. You can either remove these items from your project file, or set the 'EnableDefaultEmbeddedResourceItems' property to 'false' if you want to explicitly include them in your project file. For more information, see https://aka.ms/sdkimplicititems. The duplicate items were: 'App.xaml'; etc … (NETSDK1022) (cPanel)`\r\n\r\nI've looked at the resource in the error message, tried a number of things as listed but none had the desired outcome.\r\n\r\nEverything was behaving until I upgraded to Xamarin Forms 4.0 and want to move forward with the latest SDK.\r\n\r\nHopefully someone can help me through this."},{"Id":"9946729090","Type":"IssuesEvent","CreatedAt":"2019-07-04T02:42:45","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/1295","RelatedDescription":"Reopened issue \"Consider adding AesGcm to .NET Standard 2.1\" (#1295) at dotnet/standard","RelatedBody":""},{"Id":"9944489070","Type":"PullRequestEvent","CreatedAt":"2019-07-03T18:23:32","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1308","RelatedDescription":"Opened pull request \"Expose new event counters\" (#1308) at dotnet/standard","RelatedBody":"As requested offline:\r\n\r\n> While the EventCounter API is a part of .NET Standard 2.1 (and was present in .NET Standard 2.0), the new variants of the EventCounter class (PollingCounter, IncrementingEventCounter, and IncrementingPollingCounter) that were introduced in https://github.com/dotnet/corefx/issues/36129 are all not a part of .NET Standard 2.1.\r\n\r\nThis PR closes that gap.\r\n\r\n/cc @JamesNK @tommcdon @noahfalk @sywhang @shirhatti @JunTaoLuo"},{"Id":"9942116736","Type":"PullRequestEvent","CreatedAt":"2019-07-03T13:14:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1307","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1307) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9942039893","Type":"PullRequestEvent","CreatedAt":"2019-07-03T13:04:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1307","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1307) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9953272084","Type":"PullRequestEvent","CreatedAt":"2019-07-05T03:37:35","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39210","RelatedDescription":"Opened pull request \"change CreateHttpClient handler to always enable HTTP2 via DefaultRequestVersion\" (#39210) at dotnet/corefx","RelatedBody":"Fixes #39178 \r\n\r\nCurrently, a lot of remote server tests that are trying to test HTTP2 actually aren't using HTTP2, because the requests they create have Version=1.1.\r\n\r\nFix this by changing HttpClientHandlerTestBase.CreateHttpClient to always set HttpClient.DefaultRequestVersion to 2.0. This means we will always attempt to do HTTP2. Whether we actually do HTTP2 or not is determined by the server (loopback or remote).\r\n\r\nNote that DefaultRequestVersion does not apply if you create the HttpRequestMessage yourself, so any tests that do this need to set Version=2.0 explicitly.\r\n\r\n"},{"Id":"9953219058","Type":"IssuesEvent","CreatedAt":"2019-07-05T03:19:54","Actor":"tarekgh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/39177","RelatedDescription":"Closed issue \"RegionInfoPropertyTests fails on non-US machines\" (#39177) at dotnet/corefx","RelatedBody":"Repro:\r\n\r\n1. Add Czech language pack in Windows language settings\r\n2. Run System.Globalization.Tests\r\n\r\nResult:\r\n\r\n```\r\n     System.Globalization.Tests.RegionInfoPropertyTests.DisplayName(name: \"en-US\", expected: \"United States\") [FAIL]\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n        Stack Trace:\r\n\r\n          Child exception:\r\n            Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n                     (pos 0)\r\n          Expected: United States\r\n          Actual:   Spojené státy\r\n                     (pos 0)\r\n          D:\\corefx\\src\\System.Globalization\\tests\\System\\Globalization\\RegionInfoTests.cs(78,0): at System.Globalization.Tests.RegionInfoPropertyTests.<>c.<DisplayName>b__5_0(String _name, String _expected)\r\n```"},{"Id":"9953209599","Type":"PullRequestEvent","CreatedAt":"2019-07-05T03:16:40","Actor":"geoffkizer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39209","RelatedDescription":"Opened pull request \"small improvements to HTTP2 testing\" (#39209) at dotnet/corefx","RelatedBody":"Two changes related to issues found in code coverage:\r\n\r\n(1) Enable existing HTTP method tests for HTTP2\r\n(2) Set the initial connection buffer size to 4 bytes, to induce the logic that grows buffers when needed\r\n\r\nFixes #39164 \r\nContributes to #34460"},{"Id":"9953130840","Type":"PullRequestEvent","CreatedAt":"2019-07-05T02:50:20","Actor":"ghuntley-testing","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39022","RelatedDescription":"Closed pull request \"[WIP] testing the cla process, please ignore - do not merge\" (#39022) at dotnet/corefx","RelatedBody":"howdy folks https://github.com/ghuntley here.\r\napologies for the PR spam, will close immediately once open."},{"Id":"9953014935","Type":"IssuesEvent","CreatedAt":"2019-07-05T02:11:24","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39208","RelatedDescription":"Opened issue \"nit: JsonCamelCaseNamePolicy -> JsonCamelCaseNamingPolicy\" (#39208) at dotnet/corefx","RelatedBody":"I noticed that the internal class for camel casing names is `JsonCamelCaseNamePolicy`. It should probably be `JsonCamelCaseNamingPolicy` since it is inheriting from `JsonNamingPolicy`."},{"Id":"9953009926","Type":"IssuesEvent","CreatedAt":"2019-07-05T02:09:42","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39207","RelatedDescription":"Opened issue \"Do not use DictionaryKeyPolicy on deserialization\" (#39207) at dotnet/corefx","RelatedBody":"re: https://github.com/dotnet/corefx/issues/38840#issuecomment-506888027\r\n\r\nDictionaryKeyPolicy is being used for deserialization as well as serialization. I'm not sure when this decision was made, but I think this has a number of problems:\r\n\r\n1. JsonNamingPolicy (and JsonNamingStrategy in Json.NET) are designed as a one way operation. There is only `ConvertName` on the type. There is no pair of `ConvertTo` and `ConvertFrom` methods. That is because you can't reliabily undo PascalCase to camelCase or underscore_case.\r\n\r\n2. It is common for people to reuse the same serializer options for both serializing and deserializing. When using the policy in both directions, calling the same JsonNamingPolicy on an incoming dictionary key will at best do nothing, or at worst double convert. For example, a naming policy that HTML encodes a string will now HTML encode it in both directions. `\"J & NK\"` -> `\"J &amp; NK\"` -> `\"J &amp;amp; NK\"`\r\n\r\n3. It is inconsistent. DictionaryKeyPolicy is called during deserialization but PropertyNamePolicy is not.\r\n\r\n4. What is the user scenario for this? Serialization conversion is useful for people who want dictionary keys to be camel cased, but what purpose is there to run the policy on deserialization? You can't undo camelcase back to pascal case so it's not that. I ask because this is a feature that has never been requested in Json.NET."},{"Id":"9952828817","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:58:04","Actor":"JustNrik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39206","RelatedDescription":"Opened pull request \"Update MatchCollection.cs\" (#39206) at dotnet/corefx","RelatedBody":"Take the following code as an example:\r\n\r\n```cs\r\nforeach (var match in Regex.Matches(\"hello, world!\", @\"[a-z]+\"))\r\n{\r\n    Console.WriteLine(match.Value);\r\n}\r\n```\r\nThe output should be:\r\n```\r\nhello\r\nworld\r\n```\r\nbut actually, it doesn't even compile. Why? Because IEnumerable<Match>.GetEnumerator is implemented explicitly while the non-generic version is not, hence, `var` infers `match` as `object` instead of `Match`. This fix would make the compiler to properly infer the type."},{"Id":"9952786716","Type":"IssuesEvent","CreatedAt":"2019-07-05T00:37:04","Actor":"eidon","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39205","RelatedDescription":"Opened issue \"SqlConnection.GetSchema() Throws Exception on UWP in release\" (#39205) at dotnet/corefx","RelatedBody":"SqlConnection.GetSchema(System.Data.SqlClient.SqlClientMetaDataCollectionNames.Tables) generate \"Value cannot be null. Parameter name: xmlStream\" exception  on Microsoft.NETCore.UniversalWindowsPlatform 6.2.8"},{"Id":"9952717198","Type":"IssuesEvent","CreatedAt":"2019-07-05T00:01:33","Actor":"cpzhang","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/39190","RelatedDescription":"Closed issue \"cannot use 'checked' as the linq select anonymous type memeber name\" (#39190) at dotnet/corefx","RelatedBody":"from x in db.table\r\n select new\r\n {\r\n  checked = 1\r\n }\r\n\r\nlike the codes above , visual sutdio 2019 will report the error\r\n\"Error CS0746\tInvalid anonymous type member declarator.\" "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9953491774","Type":"IssuesEvent","CreatedAt":"2019-07-05T04:56:32","Actor":"meziantou","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36995","RelatedDescription":"Opened issue \"Quick fix for IDE0066 produce invalid code\" (#36995) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2019 16.2.0 preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n            switch (num % 10)\r\n            {\r\n                case 1:\r\n                    return string.Format(formatProvider, \"{0}st\", num);\r\n                case 2:\r\n                    return string.Format(formatProvider, \"{0}nd\", num);\r\n                case 3:\r\n                    return string.Format(formatProvider, \"{0}rd\", num);\r\n                default:\r\n                    return string.Format(formatProvider, \"{0}th\", num);\r\n            }\r\n```\r\n\r\nthe quick fix suggests:\r\n\r\n````csharp\r\n            return num % 10 switch // Operator '%' cannot be applied to operands of type 'int' and 'string'\t\r\n            {\r\n                1 => string.Format(formatProvider, \"{0}st\", num),\r\n                2 => string.Format(formatProvider, \"{0}nd\", num),\r\n                3 => string.Format(formatProvider, \"{0}rd\", num),\r\n                _ => string.Format(formatProvider, \"{0}th\", num),\r\n            };\r\n````\r\n\r\nIt should add parentheses around the expression:\r\n\r\n````csharp\r\n            return (num % 10) switch\r\n            {\r\n                1 => string.Format(formatProvider, \"{0}st\", num),\r\n                2 => string.Format(formatProvider, \"{0}nd\", num),\r\n                3 => string.Format(formatProvider, \"{0}rd\", num),\r\n                _ => string.Format(formatProvider, \"{0}th\", num),\r\n            };\r\n````\r\n"},{"Id":"9953322429","Type":"PullRequestEvent","CreatedAt":"2019-07-05T03:55:36","Actor":"gnovack","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/36994","RelatedDescription":"Opened pull request \"Make Field Readonly - Keep leading trivia\" (#36994) at dotnet/roslyn","RelatedBody":"This addresses #36759 by keeping leading trivia when removing the original node."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9952757200","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:22:06","Actor":"mjsabby","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7589","RelatedDescription":"Opened pull request \"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment\" (#7589) at dotnet/corert","RelatedBody":"Brings https://github.com/dotnet/coreclr/pull/22776 into CoreRT."},{"Id":"9952130324","Type":"PullRequestEvent","CreatedAt":"2019-07-04T19:57:46","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7588","RelatedDescription":"Closed pull request \"Make CLRServices::GarbageCollect behave like CoreCLR's\" (#7588) at dotnet/corert","RelatedBody":"fixes #7475"},{"Id":"9952107909","Type":"PullRequestEvent","CreatedAt":"2019-07-04T19:50:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7587","RelatedDescription":"Merged pull request \"Make fields readonly properties to avoid confusion, fixes #4811\" (#7587) at dotnet/corert","RelatedBody":"fixes #4811"},{"Id":"9952107900","Type":"IssuesEvent","CreatedAt":"2019-07-04T19:50:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4811","RelatedDescription":"Closed issue \"Fix definition of RuntimeImportAttribute\" (#4811) at dotnet/corert","RelatedBody":"RuntimeImportAttribute entrypoint is both initializable via constructor and as a field. It creates ambiguity and confusing behavior.\r\n\r\nE.g. `[RuntimeImportAttribute(\"foo.dll\", EntryPoint=\"MyMethod\")]` will binds to entrypoint foo.dll today!\r\n\r\nSee https://github.com/dotnet/corert/pull/4788/files#r147155719"},{"Id":"9952099975","Type":"IssuesEvent","CreatedAt":"2019-07-04T19:48:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7475","RelatedDescription":"Closed issue \"Implementation of CLRServices::GarbageCollect  is different between coreclr and corert\" (#7475) at dotnet/corert","RelatedBody":"\r\nOne result of this is a significant behavior differences between Release and Debug in UWP apps.\r\n\r\nI think coreclr version is more intuitive. We should make corert version to match that.\r\n\r\n=== coreclr:\r\n\r\n```C#\r\nSTDMETHODIMP CLRServicesImpl::GarbageCollect(DWORD dwFlags)\r\n{\r\n    CONTRACTL\r\n    {\r\n        NOTHROW;\r\n        GC_TRIGGERS;\r\n        MODE_PREEMPTIVE;\r\n    }\r\n    CONTRACTL_END;\r\n\r\n    HRESULT hr = S_OK;\r\n    BEGIN_EXTERNAL_ENTRYPOINT(&hr)\r\n    {\r\n        GCX_COOP_THREAD_EXISTS(GET_THREAD());\r\n        if (dwFlags & GC_FOR_APPX_SUSPEND) {\r\n            GCHeapUtilities::GetGCHeap()->GarbageCollect(2, true, collection_blocking | collection_optimized);\r\n        }\r\n        else\r\n            GCHeapUtilities::GetGCHeap()->GarbageCollect();      unconditional collect\r\n    }\r\n    END_EXTERNAL_ENTRYPOINT;\r\n    return hr;\r\n}\r\n```\r\n\r\n=== corert:\r\n\r\n```C#\r\n        [NativeCallable]\r\n        static int GarbageCollect__STUB(System.IntPtr pComThis, int flags)\r\n        {\r\n            try\r\n            {\r\n                GC.Collect(2, GCCollectionMode.Optimized, /* blocking = */ true);    optimized collect\r\n\r\n                if (InteropEventProvider.IsEnabled())\r\n                    InteropEventProvider.Log.TaskJupiterGarbageCollect();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // If we set IErrorInfo/IRestrictedErrorInfo, Jupiter might leak\r\n                return ex.HResult;\r\n            }\r\n\r\n            return Interop.COM.S_OK;\r\n        }\r\n```\r\n"},{"Id":"9952074408","Type":"PullRequestEvent","CreatedAt":"2019-07-04T19:40:00","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7588","RelatedDescription":"Opened pull request \"Make CLRServices::GarbageCollect behave like CoreCLR's\" (#7588) at dotnet/corert","RelatedBody":"fixes #7475"},{"Id":"9947454428","Type":"PullRequestEvent","CreatedAt":"2019-07-04T06:14:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7573","RelatedDescription":"Merged pull request \"Implement GC.AllocateUninitializedArray\" (#7573) at dotnet/corert","RelatedBody":"fixes #5680\r\n\r\nInspired by https://github.com/dotnet/coreclr/blob/c81d3caee2cfd7a401429dea9709acc18064acdd/src/vm/gchelpers.cpp#L424-L591\r\nand https://github.com/dotnet/corert/blob/fcaa7ed872ea0befcb2a5c8bb5ba504f674f0df1/src/Native/Runtime/gcrhenv.cpp#L228-L294"},{"Id":"9947454363","Type":"IssuesEvent","CreatedAt":"2019-07-04T06:14:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5680","RelatedDescription":"Closed issue \"Implement .NET Core 3.0 GC APIs\" (#5680) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9953527183","Type":"PullRequestEvent","CreatedAt":"2019-07-05T05:08:32","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3399","RelatedDescription":"Opened pull request \"Continue design time builds if resolving package assets fails\" (#3399) at dotnet/sdk","RelatedBody":"(This is an alternative implementation of #3398.)\r\n\r\nDesign time builds are stopping if `ResolvePackageAssets` hits an error (dotnet/project-system#4992).\r\n\r\nThis PR uses the fact that design-time builds set the `ContinueOnError` property to `ErrorAndContinue`.\r\n\r\n"},{"Id":"9953074133","Type":"PullRequestEvent","CreatedAt":"2019-07-05T02:31:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3397","RelatedDescription":"Merged pull request \"Merge release/3.0.1xx to master\" (#3397) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9952777790","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:32:36","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3398","RelatedDescription":"Opened pull request \"Continue design time builds if resolving package assets fails\" (#3398) at dotnet/sdk","RelatedBody":"Design time builds are stopping if `ResolvePackageAssets` hits an error (https://github.com/dotnet/project-system/issues/4992). This PR sets `ContinueOnError` on `ResolvePackageAssets` to `ErrorAndContinue` for design time builds only.\r\n\r\nWould the property be better defined in `Microsoft.NET.Sdk.props` with a more general name for broader use?"},{"Id":"9952732140","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:09:00","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3395","RelatedDescription":"Merged pull request \"Remove double computation of settings hash\" (#3395) at dotnet/sdk","RelatedBody":""},{"Id":"9952724281","Type":"PullRequestEvent","CreatedAt":"2019-07-05T00:05:02","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3397","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to master\" (#3397) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"463984252","IsPullRequest":true,"CreatedAt":"2019-07-05T04:48:48","Actor":"fadimounir","Number":"25558","RawContent":null,"Title":"Fix instantiation stub maker for case where no register is used by function parameters","State":"closed","Body":"Fix for #24701 \r\n\r\nThe issue here is that the stub maker logic always assumed there was at least one register used to pass parameters to the function after inserting the instantiation parameter. This is incorrect in the cases where more than one register is needed to pass a single argument, and there aren't enough registers available, in which case the parameter is passed on the stack (and some registers remain unused). \r\n\r\nExample:\r\n- r0 used by this ptr\r\n- r1 used by return buffer ptr\r\n- r2 used by the inserted instantiation argument\r\n- r3 unused\r\n- stack0 + stack1 used to pass a `long` parameter\r\n","Url":"https://github.com/dotnet/coreclr/pull/25558","RelatedDescription":"Closed or merged PR \"Fix instantiation stub maker for case where no register is used by function parameters\" (#25558)"},{"Id":"464245351","IsPullRequest":true,"CreatedAt":"2019-07-04T22:06:24","Actor":"dotnet-maestro[bot]","Number":"25565","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.14\r\n- **Date Produced**: 7/4/2019 6:39 AM\r\n- **Commit**: 4e18401b3b8cf2080201b1d0683f0892deba63f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-14\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25565","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25565)"},{"Id":"464237044","IsPullRequest":true,"CreatedAt":"2019-07-04T14:29:21","Actor":"dotnet-maestro[bot]","Number":"25563","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25563","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25563)"},{"Id":"464056977","IsPullRequest":true,"CreatedAt":"2019-07-04T14:07:52","Actor":"mikem8361","Number":"25562","RawContent":null,"Title":"Fix dotnet-dump/createdump launch failure","State":"closed","Body":"On CentOS or OpenSUSE dotnet-dump collect fails but a\r\nvalid coredump is generated. The \"prctl()\" call is failing\r\nthat gives the child createdump process permission to ptrace\r\nto the runtime process. On CentOS/OpenSUSE the PR_SET_PTRACER\r\noption isn't supported and not needed.\r\n\r\nIssue: https://github.com/dotnet/diagnostics/issues/334","Url":"https://github.com/dotnet/coreclr/pull/25562","RelatedDescription":"Closed or merged PR \"Fix dotnet-dump/createdump launch failure\" (#25562)"},{"Id":"464250527","IsPullRequest":true,"CreatedAt":"2019-07-04T12:51:53","Actor":"dotnet-maestro[bot]","Number":"25566","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190704.1\r\n- **Date Produced**: 7/4/2019 11:29 AM\r\n- **Commit**: ac14c2abe6ef3b8b9996cd142c3075a83764171a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190704.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190704.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25566","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25566)"},{"Id":"464243374","IsPullRequest":true,"CreatedAt":"2019-07-04T12:35:50","Actor":"dotnet-maestro[bot]","Number":"25564","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19353.8\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25564","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#25564)"},{"Id":"464021637","IsPullRequest":true,"CreatedAt":"2019-07-04T04:38:05","Actor":"AaronRobinsonMSFT","Number":"25560","RawContent":null,"Title":"Remove legacy resource value (PrivateBuild) in binaries.","State":"closed","Body":"Fixes #25557\r\n\r\ncc @RussKeldorph @leculver @elinor-fung ","Url":"https://github.com/dotnet/coreclr/pull/25560","RelatedDescription":"Closed or merged PR \"Remove legacy resource value (PrivateBuild) in binaries.\" (#25560)"},{"Id":"463976273","IsPullRequest":false,"CreatedAt":"2019-07-04T04:38:05","Actor":"leculver","Number":"25557","RawContent":null,"Title":"coreclr.dll contains \"FX_VER_PRIVATEBUILD_STR\" as its PrivateBuild property","State":"closed","Body":"Coreclr.dll contains this in its PrivateBuild string:\r\n\r\n    0:000> lmvm coreclr\r\n            PrivateBuild:     FX_VER_PRIVATEBUILD_STR\r\n\r\nFor an official build, this should be empty.  For non-official builds it would be helpful to put something meaningful here.  On desktop CLR we used to put the user-alias of the MSFT employee who built it.  That was SUPER helpful in tracking down issues that were unique to someone building a broken coreclr and knowing who built it to go ask them...\r\n\r\nI don't know the right thing for .Net Core in the open source world, but at minimum we should probably get rid of that string for official  builds at least.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25557","RelatedDescription":"Closed issue \"coreclr.dll contains \"FX_VER_PRIVATEBUILD_STR\" as its PrivateBuild property\" (#25557)"},{"Id":"464023014","IsPullRequest":false,"CreatedAt":"2019-07-04T01:56:42","Actor":"AaronRobinsonMSFT","Number":"25561","RawContent":null,"Title":"Native projects should have a way to detect official builds","State":"open","Body":"There are instances where inserting additional resource data into a binary would be useful. See https://github.com/dotnet/coreclr/issues/25557 for an example.\r\n\r\nThere is at least one place that performs this check:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/ae3430d8ce50c9e954192e89871aff783da375e2/src/pal/prebuilt/inc/fxver.h#L99-L103","Url":"https://github.com/dotnet/coreclr/issues/25561","RelatedDescription":"Open issue \"Native projects should have a way to detect official builds\" (#25561)"},{"Id":"464014298","IsPullRequest":false,"CreatedAt":"2019-07-04T01:14:33","Actor":"VincentBu","Number":"25559","RawContent":null,"Title":"Test failed: tracing_eventcounter._incrementingeventcounter_incrementingeventcounter_._incrementingeventcounter_incrementingeventcounter_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190702.1/workItem/PayloadGroup0/analysis/xunit/tracing_eventcounter._incrementingeventcounter_incrementingeventcounter_~2F_incrementingeventcounter_incrementingeventcounter_cmd\r\n\r\n**Failed tests:**\r\ntracing_eventcounter._incrementingeventcounter_incrementingeventcounter_._incrementingeventcounter_incrementingeventcounter_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Work\\\\0abddf7b-d933-45fb-8055-1ad9001fa579\\\\Exec\\\\tracing\\\\eventcounter\\\\Reports\\\\tracing.eventcounter\\\\incrementingeventcounter\\\\incrementingeventcounter.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Payload\\\\corerun.exe\\\" incrementingeventcounter.exe \r\nTest Failed\r\nExpected to see 100 events - saw 0\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\c39279a9-20fe-412c-a2db-e1db080bffa6\\\\Work\\\\0abddf7b-d933-45fb-8055-1ad9001fa579\\\\Exec\\\\tracing\\\\eventcounter\\\\incrementingeventcounter\\\\incrementingeventcounter.cmd\r\nExpected: True\r\nActual:   False\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/25559","RelatedDescription":"Open issue \"Test failed: tracing_eventcounter._incrementingeventcounter_incrementingeventcounter_._incrementingeventcounter_incrementingeventcounter_cmd\" (#25559)"},{"Id":"463829466","IsPullRequest":true,"CreatedAt":"2019-07-03T23:23:22","Actor":"jashook","Number":"25551","RawContent":null,"Title":"Enable coredumps on unix","State":"closed","Body":"Add workaround to enable coredumps on unix.","Url":"https://github.com/dotnet/coreclr/pull/25551","RelatedDescription":"Closed or merged PR \"Enable coredumps on unix\" (#25551)"},{"Id":"463948208","IsPullRequest":true,"CreatedAt":"2019-07-03T22:50:47","Actor":"sywhang","Number":"25555","RawContent":null,"Title":"Add test for eventcounter","State":"closed","Body":"This tests the mean calculation path / new properties that got added to the EventCounter API in 3.0. Fills more checkbox for #23217 ","Url":"https://github.com/dotnet/coreclr/pull/25555","RelatedDescription":"Closed or merged PR \"Add test for eventcounter\" (#25555)"},{"Id":"463915050","IsPullRequest":false,"CreatedAt":"2019-07-03T22:13:39","Actor":"rjmholt","Number":"25554","RawContent":null,"Title":"Question: Optimise const string comparison for startup time","State":"closed","Body":"I'm working on support for a new command line switch on a .NET Core 3.0 application in https://github.com/PowerShell/PowerShell/pull/10050 and I'm trying to optimise for startup time since we're quite sensitive to it.\r\n\r\nBasically I'm taking the `string[] args` argument vector and want to compare it against some known strings like `\"login\"` and `\"command\"` doing as little loading or allocation as possible.\r\n\r\nIs there any advantage to using a `ReadOnlySpan<char>` vs just a string literal, and is it better to stack allocate the char array rather than `\"string\".AsSpan()`?\r\n\r\nThe logic looks like:\r\n\r\n```csharp\r\nconst string login = \"login\";\r\n// ReadOnlySpan<char> login = \"login\".AsSpan();\r\n// ReadOnlySpan<char> login = stackalloc char[] { 'l', 'o', 'g', 'i', 'n' };\r\n\r\nif (IsParam(arg, login))\r\n{\r\n    DoLogin();\r\n}\r\n\r\n...\r\n\r\nprivate static bool IsParam(string arg, string requiredParam)\r\n{\r\n    // iterative string comparison\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25554","RelatedDescription":"Closed issue \"Question: Optimise const string comparison for startup time\" (#25554)"},{"Id":"463971772","IsPullRequest":false,"CreatedAt":"2019-07-03T22:01:01","Actor":"lpereira","Number":"25556","RawContent":null,"Title":"SystemNative_CopyFile() should use copy_file_range() in Linux","State":"open","Body":"[`copy_file_range()`](http://man7.org/linux/man-pages/man2/copy_file_range.2.html) is a relatively new syscall in Linux (4.5+, with a userspace emulation in glibc since 2.27) that copies data between file descriptors without passing them through userland.  The kernel tries different methods depending on the filesystem (for instance, NFS supports a \"cloning\" operation that won't require data to go back and forth through the network, and that's tried first), ultimately performing a copy using [`splice()`](http://man7.org/linux/man-pages/man2/splice.2.html).\r\n\r\nOn systems where this is supported, this should be used to implement file copying.","Url":"https://github.com/dotnet/coreclr/issues/25556","RelatedDescription":"Open issue \"SystemNative_CopyFile() should use copy_file_range() in Linux\" (#25556)"},{"Id":"463727915","IsPullRequest":true,"CreatedAt":"2019-07-03T19:03:03","Actor":"dotnet-maestro[bot]","Number":"25549","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19352.11\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25549","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#25549)"},{"Id":"463210646","IsPullRequest":true,"CreatedAt":"2019-07-03T19:02:10","Actor":"dotnet-maestro[bot]","Number":"25538","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190703.1\r\n- **Date Produced**: 7/3/2019 11:08 AM\r\n- **Commit**: 64ba400f7a97ce8d6f2c52ab0d3ae27379920502\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190703.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190703.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25538","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25538)"},{"Id":"463205491","IsPullRequest":true,"CreatedAt":"2019-07-03T19:01:10","Actor":"dotnet-maestro[bot]","Number":"25537","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.01\r\n- **Date Produced**: 7/3/2019 9:54 AM\r\n- **Commit**: 74470e1b72a6c3883c88e7579d45a250265d7963\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-01\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25537)"},{"Id":"463855426","IsPullRequest":false,"CreatedAt":"2019-07-03T16:49:45","Actor":"htdag","Number":"25553","RawContent":null,"Title":"[Linux] Failed to initialize CoreCLR, HRESULT: 0x8007000E","State":"open","Body":"Just test a hello world console application on linux x64.\r\nlog.txt: https://gist.github.com/htdag/86d3974c2602d565a81805849cb2755c\r\n\r\n.NET Core 2.2","Url":"https://github.com/dotnet/coreclr/issues/25553","RelatedDescription":"Open issue \"[Linux] Failed to initialize CoreCLR, HRESULT: 0x8007000E\" (#25553)"},{"Id":"463479028","IsPullRequest":true,"CreatedAt":"2019-07-03T16:39:07","Actor":"hoyosjs","Number":"25545","RawContent":null,"Title":"Fixes publishing to dotnet/versions","State":"closed","Body":"Validation ~https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/results?buildId=2820350~\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/results?buildId=2820681","Url":"https://github.com/dotnet/coreclr/pull/25545","RelatedDescription":"Closed or merged PR \"Fixes publishing to dotnet/versions\" (#25545)"},{"Id":"463842223","IsPullRequest":false,"CreatedAt":"2019-07-03T16:18:18","Actor":"jkotas","Number":"25552","RawContent":null,"Title":"ArrayPool trimming does not respect GCHardLimit","State":"open","Body":"From https://github.com/dotnet/coreclr/pull/25437#discussion_r299797776 :\r\n\r\nLet's say I have 32GB physical memory with 16GB of free memory, set COMPlus_GCHeapHardLimit to 200MB, and start using array pool heavily. The array pool is going to see HighMemoryLoadThresholdBytes=~30GB and MemoryLoadBytes=~16GB, so it will not make any attempt to trim and it can cache way over 200MB","Url":"https://github.com/dotnet/coreclr/issues/25552","RelatedDescription":"Open issue \"ArrayPool trimming does not respect GCHardLimit\" (#25552)"},{"Id":"463538802","IsPullRequest":true,"CreatedAt":"2019-07-03T15:59:26","Actor":"jkotas","Number":"25547","RawContent":null,"Title":"Cleanup IL linker heuristic usage","State":"closed","Body":"Prep-work for using mainstream IL linker","Url":"https://github.com/dotnet/coreclr/pull/25547","RelatedDescription":"Closed or merged PR \"Cleanup IL linker heuristic usage\" (#25547)"},{"Id":"463720758","IsPullRequest":true,"CreatedAt":"2019-07-03T15:59:02","Actor":"dotnet-maestro[bot]","Number":"25548","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19352.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25548)"},{"Id":"463819887","IsPullRequest":false,"CreatedAt":"2019-07-03T15:31:17","Actor":"RobertBouillon","Number":"25550","RawContent":null,"Title":"Add CIL instructions to detect arithmetic overflows without raising an exception","State":"open","Body":"The current implementation of the CIL ISA runs counter to the design [guidelines for .NET exception handling](https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions) with respect to overflow handling. The only way to check for an overflow is to raise an exception, however overflows can occur as a normal condition; there is no way to check for an overflow without raising an exception.\r\n\r\nThe workaround is expensive arithmetic checking which involves up-casting the types or operation-specific legacy c-style checks. Both have their drawbacks and are pretty expensive, especially when you're checking for overflows in 64-bit integers. \r\n\r\nIt's pretty silly to have to jump through such elaborate hoops to determine if you've overflowed to avoid excessive exceptions when there's likely an overflow flag tripped somewhere on the hardware already to which we simply don't have access.\r\n\r\nSince there are already instructions that have to check for an overflow (e.g. `add.ovf`), I think all that really needs to be done as far as implementation is to find the best way in the IL and languages to expose an overflow flag without raising an exception. The instruction (something like `add.sovf` for **silent**) could simply push a second value to the stack indicating whether or not the operation overflowed. Language support might be a bit trickier, but the IL instruction would be a great start since we could, at very least, emit it in code. Ultimately, I'd love to see support all the way through to expressions (e.g. `Expression.AddSilentChecked`).\r\n\r\nSince this is really meant to address performance, I'd also like to make another suggestion. Typically, overflow flags are set after each operation. Checking this flag after every arithmetic operation essentially doubles the CPU work (best case) and can make for ugly (hard to maintain) code. Practically speaking, overflow checking doesn't NEED to occur after every arithmetic operation, and in my experience, rarely does. Typically, it only _needs_ to be checked after a batch or an equation involving multiple operands (Think a SUM or FMA). A latch rather than a flag would be far more useful, since it can be cleared at the start of the operation and checked at the end of it, rather than after each instruction. That's O+2 rather than O2. AFAIK the VM doesn't have any persistent flags, but I think a latch and / or a flag would be better than putting the overflow result on the stack.","Url":"https://github.com/dotnet/coreclr/issues/25550","RelatedDescription":"Open issue \"Add CIL instructions to detect arithmetic overflows without raising an exception\" (#25550)"},{"Id":"463503324","IsPullRequest":true,"CreatedAt":"2019-07-03T07:34:51","Actor":"jkotas","Number":"25546","RawContent":null,"Title":"Delete some dead code","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25546","RelatedDescription":"Closed or merged PR \"Delete some dead code\" (#25546)"},{"Id":"463463922","IsPullRequest":true,"CreatedAt":"2019-07-03T05:50:27","Actor":"brianrob","Number":"25544","RawContent":null,"Title":"Add a new CompilationVerbose ETW Keyword","State":"closed","Body":"Add a new CompilationVerbose ETW keyword and move the R2RGetEntryPoint event under this keyword.  This allows us to continue enabling Verbose events on the .NET runtime provider (which we've done for a long time) without significantly perturbing the results with this very verbose event.\r\n\r\nThe R2RGetEntryPoint event as well as other verbose compilation events, such as a tiered compilation counter hit event, can be added to this keyword in the future.\r\n\r\nFixes #25492 ","Url":"https://github.com/dotnet/coreclr/pull/25544","RelatedDescription":"Closed or merged PR \"Add a new CompilationVerbose ETW Keyword\" (#25544)"},{"Id":"463343027","IsPullRequest":true,"CreatedAt":"2019-07-02T22:13:36","Actor":"MattGal","Number":"25540","RawContent":null,"Title":"Fix all remaining Python 2 Helix Docker images","State":"closed","Body":"This should finish off updating all of CoreCLR's images to versions supporting python 3 from https://github.com/dotnet/dotnet-buildtools-prereqs-docker (also saves some time by preinstalling virtualenv stuff)","Url":"https://github.com/dotnet/coreclr/pull/25540","RelatedDescription":"Closed or merged PR \"Fix all remaining Python 2 Helix Docker images\" (#25540)"},{"Id":"463432120","IsPullRequest":true,"CreatedAt":"2019-07-02T20:56:52","Actor":"adiaaida","Number":"25543","RawContent":null,"Title":"[wip] [no merge] Perf test","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25543","RelatedDescription":"Open PR \"[wip] [no merge] Perf test\" (#25543)"},{"Id":"463424346","IsPullRequest":true,"CreatedAt":"2019-07-02T20:47:29","Actor":"hoyosjs","Number":"25541","RawContent":null,"Title":"Sign debug DLL's with tool certs","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25541","RelatedDescription":"Closed or merged PR \"Sign debug DLL's with tool certs\" (#25541)"},{"Id":"463336487","IsPullRequest":true,"CreatedAt":"2019-07-02T16:56:12","Actor":"briansull","Number":"25539","RawContent":null,"Title":"Introduce a \"PerfScore\" rating in the JIT disassembly for each method","State":"open","Body":"This rating that estimated the execution costs of each instruction and also takes into\r\naccounts for the BasicBlock weights and yields a single score that can be used to judge the\r\noverall execution throughput and code quality of the generated code.\r\n\r\nThe inlining of methods will cause a score to increase, so this can't be used to directly compare\r\noptimized vs. non-optimized code quality.  We are not modeling instruction scheduling or the\r\nexact latency of memory reads feeding into their next use.  Instead we just model a simplistic\r\nfixed read latency, with a small benefit for reads from the stack.\r\n\r\nEstimates for the x64 instruction throughput are based upon data for the Intel Skylake architecture.","Url":"https://github.com/dotnet/coreclr/pull/25539","RelatedDescription":"Open PR \"Introduce a \"PerfScore\" rating in the JIT disassembly for each method\" (#25539)"},{"Id":"463429186","IsPullRequest":false,"CreatedAt":"2019-07-02T15:52:51","Actor":"SteamUpdate","Number":"25542","RawContent":null,"Title":"Optimization of Array.FindAll","State":"open","Body":"For `Array` in `dotnet framework` LINQ method chain `Where.ToArray` running\r\nslower than `Array.Find`.\r\n\r\n<details>\r\n    <summary>Benchmark for dotnet framework</summary>\r\n\r\n### Code\r\n```csharp\r\n[ClrJob]\r\n[MedianColumn, MemoryDiagnoser]\r\npublic class Default\r\n{\r\n    private Entity[] array;\r\n\r\n    [Params(10, 100, 1000)]\r\n    public int N { get; set; }\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        array = new Entity[N];\r\n        for (var i = 0; i < N; i++)\r\n        {\r\n            var entity = new Entity\r\n            {\r\n                SomeInt = i,\r\n                SomeStr = i.ToString()\r\n            };\r\n            array[i] = entity;\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Common()\r\n    {\r\n        return array.Where(q => q.SomeInt % 2 == 0).ToArray();\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Optimized()\r\n    {\r\n        return Array.FindAll(array, q => q.SomeInt % 2 == 0);\r\n    }\r\n}\r\n```\r\n\r\n### Result\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.14393.3025 (1607/AnniversaryUpdate/Redstone1)\r\nIntel Core i5-8500 CPU 3.00GHz (Coffee Lake), 1 CPU, 6 logical and 6 physical cores\r\nFrequency=2929688 Hz, Resolution=341.3333 ns, Timer=TSC\r\n  [Host] : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3416.0\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3416.0\r\n\r\nJob=Clr  Runtime=Clr  \r\n\r\n```\r\n|    Method |    N |        Mean |      Error |     StdDev |      Median |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|---------- |----- |------------:|-----------:|-----------:|------------:|-------:|------:|------:|----------:|\r\n|    **Common** |   **10** |    **225.8 ns** |  **1.6291 ns** |  **1.4441 ns** |    **225.4 ns** | **0.0558** |     **-** |     **-** |     **264 B** |\r\n| Optimized |   10 |    106.5 ns |  0.9207 ns |  0.8612 ns |    106.7 ns | 0.0525 |     - |     - |     248 B |\r\n|    **Common** |  **100** |  **1,286.9 ns** | **10.7707 ns** | **10.0749 ns** |  **1,283.6 ns** | **0.3357** |     **-** |     **-** |    **1592 B** |\r\n| Optimized |  100 |    652.3 ns |  5.0953 ns |  4.7662 ns |    651.3 ns | 0.3338 |     - |     - |    1576 B |\r\n|    **Common** | **1000** | **10,697.2 ns** | **86.2666 ns** | **80.6938 ns** | **10,686.0 ns** | **2.6245** |     **-** |     **-** |   **12435 B** |\r\n| Optimized | 1000 |  5,155.9 ns | 47.2275 ns | 44.1766 ns |  5,142.3 ns | 2.6245 |     - |     - |   12417 B |\r\n\r\n</details>\r\n\r\nIn `dotnet core` behaviour is different. LINQ methods still running slower, but consume less memory.\r\n\r\n<details>\r\n    <summary>Benchmark for .NET Core 2.2.3</summary>\r\n\r\n### Code\r\n```csharp\r\n[CoreJob]\r\n[MedianColumn, MemoryDiagnoser]\r\npublic class WithoutOptimization\r\n{\r\n    private Entity[] array;\r\n\r\n    [Params(10, 100, 1000)]\r\n    public int N { get; set; }\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        array = new Entity[N];\r\n        for (var i = 0; i < N; i++)\r\n        {\r\n            var entity = new Entity\r\n            {\r\n                SomeInt = i,\r\n                SomeStr = i.ToString()\r\n            };\r\n            array[i] = entity;\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Common()\r\n    {\r\n        return array.Where(q => q.SomeInt % 2 == 0).ToArray();\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Optimized()\r\n    {\r\n        return Array.FindAll(array, q => q.SomeInt % 2 == 0);\r\n    }\r\n}\r\n```\r\n\r\n### Result\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.14393.3025 (1607/AnniversaryUpdate/Redstone1)\r\nIntel Core i5-8500 CPU 3.00GHz (Coffee Lake), 1 CPU, 6 logical and 6 physical cores\r\nFrequency=2929688 Hz, Resolution=341.3333 ns, Timer=TSC\r\n.NET Core SDK=2.2.105\r\n  [Host] : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n  Core   : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n\r\nJob=Core  Runtime=Core  \r\n\r\n```\r\n|    Method |    N |       Mean |      Error |     StdDev |     Median |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|---------- |----- |-----------:|-----------:|-----------:|-----------:|-------:|------:|------:|----------:|\r\n|    **Common** |   **10** |   **328.7 ns** |  **1.6330 ns** |  **1.4476 ns** |   **329.1 ns** | **0.0539** |     **-** |     **-** |     **256 B** |\r\n| Optimized |   10 |   113.8 ns |  0.3694 ns |  0.3084 ns |   113.9 ns | 0.0525 |     - |     - |     248 B |\r\n|    **Common** |  **100** | **1,103.7 ns** |  **5.8636 ns** |  **5.4848 ns** | **1,103.5 ns** | **0.2518** |     **-** |     **-** |    **1192 B** |\r\n| Optimized |  100 |   637.9 ns |  3.4570 ns |  3.2337 ns |   638.0 ns | 0.3338 |     - |     - |    1576 B |\r\n|    **Common** | **1000** | **6,251.6 ns** | **52.5366 ns** | **49.1428 ns** | **6,244.0 ns** | **1.8082** |     **-** |     **-** |    **8536 B** |\r\n| Optimized | 1000 | 4,767.0 ns | 37.9155 ns | 35.4662 ns | 4,755.5 ns | 2.6245 |     - |     - |   12416 B |\r\n\r\n</details>\r\n\r\nThis is due to the fact that the LINQ method `ToArray` uses the following structures:\r\n- [ArrayBuilder](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Collections/Generic/ArrayBuilder.cs)\r\n- [LargeArrayBuillder](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Collections/Generic/LargeArrayBuilder.SpeedOpt.cs)\r\n- [CopyPosition](https://github.com/dotnet/corefx/blob/master/src/Common/src/System/Collections/Generic/LargeArrayBuilder.cs)\r\n\r\nI copied code of those structures into my code and wrote next implementation\r\n\r\n```csharp\r\npublic static class ArrayMethods\r\n{\r\n    public static T[] FindAll<T>(T[] array, Predicate<T> match)\r\n    {\r\n        if (array == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(array));\r\n        }\r\n\r\n        if (match == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(match));\r\n        }\r\n        var builder = new LargeArrayBuilder<T>(true);\r\n        for (int index = 0; index < array.Length; ++index)\r\n        {\r\n            if (match(array[index]))\r\n                builder.Add(array[index]);\r\n        }\r\n        return builder.ToArray();\r\n    }\r\n}\r\n```\r\n\r\nNow `FindAll` consumes as much memory as LINQ `ToArray`\r\n\r\n<details>\r\n    <summary>Benchmark for .NET Core 2.2.3 with Array Optimization</summary>\r\n\r\n### Code\r\n```csharp\r\n[CoreJob]\r\n[MedianColumn, MemoryDiagnoser]\r\npublic class WithOptimization\r\n{\r\n    private Entity[] array;\r\n\r\n    [Params(10, 100, 1000)]\r\n    public int N { get; set; }\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        array = new Entity[N];\r\n        for (var i = 0; i < N; i++)\r\n        {\r\n            var entity = new Entity\r\n            {\r\n                SomeInt = i,\r\n                SomeStr = i.ToString()\r\n            };\r\n            array[i] = entity;\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Common()\r\n    {\r\n        return array.Where(q => q.SomeInt % 2 == 0).ToArray();\r\n    }\r\n\r\n    [Benchmark]\r\n    public Entity[] Optimized()\r\n    {\r\n        return ArrayMethods.FindAll(array, q => q.SomeInt % 2 == 0);\r\n    }\r\n}\r\n```\r\n\r\n### Result\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.14393.3025 (1607/AnniversaryUpdate/Redstone1)\r\nIntel Core i5-8500 CPU 3.00GHz (Coffee Lake), 1 CPU, 6 logical and 6 physical cores\r\nFrequency=2929688 Hz, Resolution=341.3333 ns, Timer=TSC\r\n.NET Core SDK=2.2.105\r\n  [Host] : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n  Core   : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n\r\nJob=Core  Runtime=Core  \r\n\r\n```\r\n|    Method |    N |       Mean |      Error |     StdDev |     Median |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|---------- |----- |-----------:|-----------:|-----------:|-----------:|-------:|------:|------:|----------:|\r\n|    **Common** |   **10** |   **336.4 ns** |  **0.5193 ns** |  **0.4858 ns** |   **336.2 ns** | **0.0539** |     **-** |     **-** |     **256 B** |\r\n| Optimized |   10 |   141.0 ns |  0.4939 ns |  0.4620 ns |   141.0 ns | 0.0439 |     - |     - |     208 B |\r\n|    **Common** |  **100** | **1,114.4 ns** |  **3.7460 ns** |  **3.5040 ns** | **1,113.1 ns** | **0.2518** |     **-** |     **-** |    **1192 B** |\r\n| Optimized |  100 |   701.0 ns |  9.9910 ns |  9.3456 ns |   704.6 ns | 0.2422 |     - |     - |    1144 B |\r\n|    **Common** | **1000** | **6,161.7 ns** | **57.5657 ns** | **51.0305 ns** | **6,153.6 ns** | **1.8082** |     **-** |     **-** |    **8536 B** |\r\n| Optimized | 1000 | 4,859.1 ns | 29.0823 ns | 27.2036 ns | 4,852.4 ns | 1.7929 |     - |     - |    8488 B |\r\n\r\n</details>\r\n\r\nCan you fix `Array.FindAll`? And maybe you will find other methods where this optimization can be used\r\n\r\nThank you in advance","Url":"https://github.com/dotnet/coreclr/issues/25542","RelatedDescription":"Open issue \"Optimization of Array.FindAll\" (#25542)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"464452972","IsPullRequest":true,"CreatedAt":"2019-07-05T04:41:47","Actor":"dotnet-maestro[bot]","Number":"11748","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.08\r\n- **Date Produced**: 7/5/2019 4:11 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-08\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11748","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11748)"},{"Id":"464441145","IsPullRequest":true,"CreatedAt":"2019-07-05T03:35:04","Actor":"dotnet-maestro[bot]","Number":"11747","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.07\r\n- **Date Produced**: 7/5/2019 2:59 AM\r\n- **Commit**: 7f3dffe602907ca336c61e6c2efa95383a9d6896\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11747","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11747)"},{"Id":"464420697","IsPullRequest":true,"CreatedAt":"2019-07-05T01:09:21","Actor":"dotnet-maestro[bot]","Number":"11746","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190704.3\r\n- **Date Produced**: 7/5/2019 12:38 AM\r\n- **Commit**: eb4e6411daa83711d955ee9c49bb4de66b69584f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19354.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11746","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11746)"},{"Id":"464054163","IsPullRequest":true,"CreatedAt":"2019-07-04T23:08:59","Actor":"dotnet-maestro[bot]","Number":"11736","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190704.2\r\n- **Date Produced**: 7/4/2019 10:34 PM\r\n- **Commit**: d8b1af39f06e4c170dae3fd01b5ca4d49e16c4a3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19354.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11736","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11736)"},{"Id":"464373812","IsPullRequest":true,"CreatedAt":"2019-07-04T22:28:21","Actor":"dotnet-maestro[bot]","Number":"11745","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.06\r\n- **Date Produced**: 7/4/2019 9:57 PM\r\n- **Commit**: 545b5d0f5a026015a8e41d676c9d98f23cf8b291\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11745","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11745)"},{"Id":"464356123","IsPullRequest":true,"CreatedAt":"2019-07-04T18:06:36","Actor":"dotnet-maestro[bot]","Number":"11744","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.04\r\n- **Date Produced**: 7/4/2019 5:35 PM\r\n- **Commit**: fa491da054ccaf4a946f5fd8ff1804b344f6153a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-04\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11744","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11744)"},{"Id":"464349195","IsPullRequest":true,"CreatedAt":"2019-07-04T17:39:04","Actor":"dotnet-maestro[bot]","Number":"11743","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190704.1\r\n- **Date Produced**: 7/4/2019 5:03 PM\r\n- **Commit**: 67b776f3ae8d393f777fb7186cf2023c6a20f93a\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19354.1\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11743","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11743)"},{"Id":"464336640","IsPullRequest":true,"CreatedAt":"2019-07-04T16:44:08","Actor":"dotnet-maestro[bot]","Number":"11742","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190704.02\r\n- **Date Produced**: 7/4/2019 4:13 PM\r\n- **Commit**: c5123142f63e0e5358554d87eed9e14e1439b1c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27904-02\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11742","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11742)"},{"Id":"464232904","IsPullRequest":true,"CreatedAt":"2019-07-04T12:46:16","Actor":"dotnet-maestro[bot]","Number":"11741","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190703.2\r\n- **Date Produced**: 7/3/2019 3:14 PM\r\n- **Commit**: 03eafc975fde2ef17f03c0bf822f238ff17e7cbd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19353.2\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11741","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11741)"},{"Id":"464230678","IsPullRequest":true,"CreatedAt":"2019-07-04T12:35:54","Actor":"dotnet-maestro[bot]","Number":"11740","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190703.1\r\n- **Date Produced**: 7/3/2019 5:18 PM\r\n- **Commit**: 681458cb41a42868ab8a12a51df72c278fbba70b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19353.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11740","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11740)"},{"Id":"464230467","IsPullRequest":true,"CreatedAt":"2019-07-04T12:05:10","Actor":"dotnet-maestro[bot]","Number":"11739","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11739","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11739)"},{"Id":"464200896","IsPullRequest":false,"CreatedAt":"2019-07-04T10:51:54","Actor":"upretyrohan","Number":"11738","RawContent":null,"Title":"dotnet test command does not generate Test Results.xml file.How to generate it","State":"open","Body":"## Steps to reproduce\r\n\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11738","RelatedDescription":"Open issue \"dotnet test command does not generate Test Results.xml file.How to generate it\" (#11738)"},{"Id":"464060105","IsPullRequest":true,"CreatedAt":"2019-07-04T07:13:40","Actor":"dotnet-maestro[bot]","Number":"11737","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.14\r\n- **Date Produced**: 7/4/2019 6:39 AM\r\n- **Commit**: 4e18401b3b8cf2080201b1d0683f0892deba63f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11737","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11737)"},{"Id":"464052905","IsPullRequest":true,"CreatedAt":"2019-07-04T04:49:01","Actor":"dotnet-maestro[bot]","Number":"11735","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.12\r\n- **Date Produced**: 7/4/2019 4:18 AM\r\n- **Commit**: 527caf6ef9dc6ba4fc22e058ffe1faf02f4951b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11735","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11735)"},{"Id":"464039064","IsPullRequest":true,"CreatedAt":"2019-07-04T03:43:10","Actor":"dotnet-maestro[bot]","Number":"11734","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.11\r\n- **Date Produced**: 7/4/2019 3:12 AM\r\n- **Commit**: 447f8ed0ac28e7e4e06bef118d6bd39533dc2b4d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11734","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11734)"},{"Id":"464028820","IsPullRequest":true,"CreatedAt":"2019-07-04T03:04:44","Actor":"dotnet-maestro[bot]","Number":"11733","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190703.13\r\n- **Date Produced**: 7/4/2019 2:23 AM\r\n- **Commit**: d598fc54144f4bbf74daf06654ec4ca1b93dc807\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19353.13\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11733","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11733)"},{"Id":"464006612","IsPullRequest":true,"CreatedAt":"2019-07-04T01:08:10","Actor":"dotnet-maestro[bot]","Number":"11732","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190703.12\r\n- **Date Produced**: 7/4/2019 12:26 AM\r\n- **Commit**: 3f73a0fdcff217d061b994f3bd6528f1cd8caf2e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19353.12\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11732","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11732)"},{"Id":"463966102","IsPullRequest":true,"CreatedAt":"2019-07-03T23:43:44","Actor":"dotnet-maestro[bot]","Number":"11731","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.09\r\n- **Date Produced**: 7/3/2019 11:13 PM\r\n- **Commit**: 6d3caf97f0c5436d687317344d1740a3da400e49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-09\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11731","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11731)"},{"Id":"463944139","IsPullRequest":true,"CreatedAt":"2019-07-03T21:47:52","Actor":"dotnet-maestro[bot]","Number":"11730","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/3/2019 8:41 PM\r\n- **Commit**: 503ef7d96a55b6699094742ed4fc5792cf4e9d85\r\n- **Branch**: refs/heads/release/3.0-preview7\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview7.19353.8\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11730","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#11730)"},{"Id":"463903703","IsPullRequest":true,"CreatedAt":"2019-07-03T20:51:14","Actor":"dotnet-maestro[bot]","Number":"11728","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.07\r\n- **Date Produced**: 7/3/2019 8:13 PM\r\n- **Commit**: 574f3af7793a341fdbaf038a3230e25b519eb537\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11728","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11728)"},{"Id":"463912627","IsPullRequest":true,"CreatedAt":"2019-07-03T19:44:53","Actor":"dotnet-maestro[bot]","Number":"11729","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190703.5\r\n- **Date Produced**: 7/3/2019 7:14 PM\r\n- **Commit**: 321db9d99f84cf7a67d453384292d9339de748d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19353.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11729","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11729)"},{"Id":"463867012","IsPullRequest":true,"CreatedAt":"2019-07-03T17:53:10","Actor":"dotnet-maestro[bot]","Number":"11727","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.05\r\n- **Date Produced**: 7/3/2019 5:17 PM\r\n- **Commit**: 93d3b2d62a850977d339e39d998ba7bb9d6e56c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-05\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11727","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11727)"},{"Id":"463849031","IsPullRequest":true,"CreatedAt":"2019-07-03T17:17:24","Actor":"dotnet-maestro[bot]","Number":"11726","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.04\r\n- **Date Produced**: 7/3/2019 4:28 PM\r\n- **Commit**: 52adff2442f631932ef71ac51f106e6d93cf5784\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-04\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11726","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11726)"},{"Id":"463833792","IsPullRequest":true,"CreatedAt":"2019-07-03T16:33:51","Actor":"dotnet-maestro[bot]","Number":"11725","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.03\r\n- **Date Produced**: 7/3/2019 3:59 PM\r\n- **Commit**: 7e48ee0e4e94a1567cf9f8a52ae2232bbfb81956\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11725","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11725)"},{"Id":"463784354","IsPullRequest":true,"CreatedAt":"2019-07-03T15:59:05","Actor":"dotnet-maestro[bot]","Number":"11724","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.02\r\n- **Date Produced**: 7/3/2019 2:25 PM\r\n- **Commit**: 8889e65f520004e79c1aa16f29b7944b6cc460d4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-02\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11724","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11724)"},{"Id":"463716220","IsPullRequest":true,"CreatedAt":"2019-07-03T12:41:18","Actor":"dotnet-maestro[bot]","Number":"11723","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190702.1\r\n- **Date Produced**: 7/2/2019 12:47 PM\r\n- **Commit**: 326850ef8cfc8ced94894da44241982dcd1c9872\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19352.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11723","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11723)"},{"Id":"463713646","IsPullRequest":true,"CreatedAt":"2019-07-03T12:35:19","Actor":"dotnet-maestro[bot]","Number":"11722","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11722","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11722)"},{"Id":"463657999","IsPullRequest":true,"CreatedAt":"2019-07-03T10:25:34","Actor":"dotnet-maestro[bot]","Number":"11721","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.01\r\n- **Date Produced**: 7/3/2019 9:54 AM\r\n- **Commit**: 74470e1b72a6c3883c88e7579d45a250265d7963\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11721","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11721)"},{"Id":"463604004","IsPullRequest":true,"CreatedAt":"2019-07-03T08:32:42","Actor":"dotnet-maestro[bot]","Number":"11720","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190702.20\r\n- **Date Produced**: 7/3/2019 8:01 AM\r\n- **Commit**: 8dc1042d97e228af81fe9156d2c5fa95a5832fb4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27902-20\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11720","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11720)"},{"Id":"463543912","IsPullRequest":true,"CreatedAt":"2019-07-03T05:23:23","Actor":"dotnet-maestro[bot]","Number":"11719","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190702.6\r\n- **Date Produced**: 7/3/2019 4:52 AM\r\n- **Commit**: 3c0fb1a3f8609aae3165d43cb61fed10d9e1bf4f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19352.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11719","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11719)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"464366313","IsPullRequest":false,"CreatedAt":"2019-07-04T18:29:29","Actor":"PKYADAV","Number":"1311","RawContent":null,"Title":"DataAnnotation Validation in Xamarin.Forms","State":"open","Body":"Hi Team, \r\n\r\nI have class library in .net Standard 2.0 with EntityFrameworkCore. I have created class with Custom DataAnnotation as below:\r\n\r\n**Model Definition**\r\n\r\npublic class UserLogin : NotificationObject\r\n    {\r\n        [DbRequired]\r\n        [Display(Name = \"USER NAME\", Prompt = \"ENTER USER NAME\")]\r\n        public string User_Name\r\n        {\r\n            get { return GetValue(() => User_Name); }\r\n            set { SetValue(() => User_Name, value); }\r\n        }\r\n\r\n        [Display(Name = \"PASSWORD\", Prompt = \"ENTER PASSWORD\")]\r\n        [DataType(DataType.Password)]\r\n        [DbRequired]\r\n        public string User_Password\r\n        {\r\n            get { return GetValue(() => User_Password); }\r\n            set { SetValue(() => User_Password, value); }\r\n        }\r\n    }\r\n\r\n**But this data annotation validation is working in Asp.Net Core and WPF. But we want to use the same in Xamarin.Forms for Android & iOS and UWP. Is it possible or any workaround? As I heard that in .net Standard you need write once and can be reuse in all other environment **","Url":"https://github.com/dotnet/standard/issues/1311","RelatedDescription":"Open issue \"DataAnnotation Validation in Xamarin.Forms\" (#1311)"},{"Id":"464253942","IsPullRequest":true,"CreatedAt":"2019-07-04T13:09:50","Actor":"dotnet-maestro[bot]","Number":"1310","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1310","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1310)"},{"Id":"464230062","IsPullRequest":true,"CreatedAt":"2019-07-04T12:14:16","Actor":"dotnet-maestro[bot]","Number":"1309","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1309","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1309)"},{"Id":"462015053","IsPullRequest":false,"CreatedAt":"2019-07-04T11:07:49","Actor":"brad302","Number":"1291","RawContent":null,"Title":"Error NETSDK1022: Duplicate 'EmbeddedResource' items were included.","State":"closed","Body":"Apologies if this isn't the correct place but it seems like the most logical place to start.\r\n\r\nI used this link ... [https://montemagno.com/how-to-convert-a-pcl-library-to-net-standard-and-keep-git-history/](https://montemagno.com/how-to-convert-a-pcl-library-to-net-standard-and-keep-git-history/) (which worked for other projects) ... to convert my PCL project in Xamarin Forms to .NET Standard 2.0 and ever since, I've had the issue where XAML files appear twice and no matter what I try, they simply will not fall back into line as one with the .cs file as its dependency ...\r\n\r\n<img width=\"301\" alt=\"Screen Shot 2019-06-28 at 10 25 57 pm\" src=\"https://user-images.githubusercontent.com/14899088/60342052-c43dd500-99f3-11e9-814e-c1441bde4484.png\">\r\n\r\n... even new XAML ContentPage files display the same behaviour, however, not initially.  If I close the project and reopen, they appear as 2.  I've tried removing and adding the files back in different ways but still no luck.\r\n\r\nMy .csproj file is very light on ...\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard2.0</TargetFramework>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n        <!--<PackageReference Include=\"\" Version=\"\"/>-->\r\n        <PackageReference Include=\"CarouselView.FormsPlugin\" Version=\"5.0.0\" />\r\n        <PackageReference Include=\"Com.Airbnb.Xamarin.Forms.Lottie\" Version=\"2.5.4\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Analytics\" Version=\"2.1.1\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Crashes\" Version=\"2.1.1\" />\r\n        <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\" />\r\n        <PackageReference Include=\"Refit\" Version=\"4.5.6\" />\r\n        <PackageReference Include=\"SkiaSharp.Views.Forms\" Version=\"1.68.0\" />\r\n        <PackageReference Include=\"sqlite-net-pcl\" Version=\"1.5.231\" />\r\n        <PackageReference Include=\"System.Net.Http\" Version=\"4.3.4\" />\r\n        <PackageReference Include=\"Xam.Plugin.Media\" Version=\"4.0.1.5\" />\r\n        <PackageReference Include=\"Xam.Plugins.Forms.ImageCircle\" Version=\"3.0.0.5\" />\r\n        <PackageReference Include=\"Xam.Plugins.Messaging\" Version=\"5.2.0\" />\r\n        <PackageReference Include=\"Xamarin.Essentials\" Version=\"1.1.0\" />\r\n        <PackageReference Include=\"Xamarin.Forms\" Version=\"4.0.0.540366\" />\r\n        <PackageReference Include=\"Xamarin.Forms.Maps\" Version=\"4.0.0.540366\" />\r\n        <PackageReference Include=\"ZXing.Net.Mobile\" Version=\"2.4.1\" />\r\n        <PackageReference Include=\"ZXing.Net.Mobile.Forms\" Version=\"2.4.1\" />\r\n        <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.5.0\" />\r\n        <PackageReference Include=\"UltimateXF\" Version=\"2.3.2\" />\r\n        <PackageReference Include=\"Microsoft.AppCenter.Auth\" Version=\"2.1.1\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n... and nothing on other community sites (e.g. StackOverflow) have helped me overcome this.\r\n\r\nThis is the entire error minus ALL of the XAML files within the project listed ...\r\n\r\n`/usr/local/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.DefaultItems.targets(5,5): Error NETSDK1022: Duplicate 'EmbeddedResource' items were included. The .NET SDK includes 'EmbeddedResource' items from your project directory by default. You can either remove these items from your project file, or set the 'EnableDefaultEmbeddedResourceItems' property to 'false' if you want to explicitly include them in your project file. For more information, see https://aka.ms/sdkimplicititems. The duplicate items were: 'App.xaml'; etc … (NETSDK1022) (cPanel)`\r\n\r\nI've looked at the resource in the error message, tried a number of things as listed but none had the desired outcome.\r\n\r\nEverything was behaving until I upgraded to Xamarin Forms 4.0 and want to move forward with the latest SDK.\r\n\r\nHopefully someone can help me through this.","Url":"https://github.com/dotnet/standard/issues/1291","RelatedDescription":"Closed issue \"Error NETSDK1022: Duplicate 'EmbeddedResource' items were included.\" (#1291)"},{"Id":"463893429","IsPullRequest":true,"CreatedAt":"2019-07-03T18:23:31","Actor":"terrajobst","Number":"1308","RawContent":null,"Title":"Expose new event counters","State":"open","Body":"As requested offline:\r\n\r\n> While the EventCounter API is a part of .NET Standard 2.1 (and was present in .NET Standard 2.0), the new variants of the EventCounter class (PollingCounter, IncrementingEventCounter, and IncrementingPollingCounter) that were introduced in https://github.com/dotnet/corefx/issues/36129 are all not a part of .NET Standard 2.1.\r\n\r\nThis PR closes that gap.\r\n\r\n/cc @JamesNK @tommcdon @noahfalk @sywhang @shirhatti @JunTaoLuo","Url":"https://github.com/dotnet/standard/pull/1308","RelatedDescription":"Open PR \"Expose new event counters\" (#1308)"},{"Id":"463741391","IsPullRequest":true,"CreatedAt":"2019-07-03T13:14:16","Actor":"dotnet-maestro[bot]","Number":"1307","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1307","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1307)"},{"Id":"463713258","IsPullRequest":true,"CreatedAt":"2019-07-03T12:14:13","Actor":"dotnet-maestro[bot]","Number":"1306","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1306","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1306)"},{"Id":"463393350","IsPullRequest":true,"CreatedAt":"2019-07-02T19:23:52","Actor":"wtgodbe","Number":"1305","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/standard/pull/1304 for preview7\r\n\r\nCC @roji @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1305","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1305)"},{"Id":"463388556","IsPullRequest":true,"CreatedAt":"2019-07-02T19:14:09","Actor":"roji","Number":"1304","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Leftover from #1283, mirrors https://github.com/dotnet/corefx/pull/39070","Url":"https://github.com/dotnet/standard/pull/1304","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1304)"},{"Id":"463385096","IsPullRequest":true,"CreatedAt":"2019-07-02T19:04:44","Actor":"wtgodbe","Number":"1303","RawContent":null,"Title":"Cherry pick changes to Standard for preview7","State":"closed","Body":"Cherry picks https://github.com/dotnet/standard/pull/1283, https://github.com/dotnet/standard/pull/1300, and https://github.com/dotnet/standard/pull/1290 for preview7. CC @terrajobst @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1303","RelatedDescription":"Closed or merged PR \"Cherry pick changes to Standard for preview7\" (#1303)"},{"Id":"462004700","IsPullRequest":true,"CreatedAt":"2019-07-02T18:49:33","Actor":"roji","Number":"1290","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*()","State":"closed","Body":"See https://github.com/dotnet/corefx/issues/31595\r\n\r\nThis is the 3rd and last in this batch of System.Data changes.\r\n\r\nNote that for the naming and namespace for the new DataReaderExtensions class, see https://github.com/dotnet/corefx/pull/36123#issuecomment-475762481 and https://github.com/dotnet/corefx/pull/36123#discussion_r267625142.","Url":"https://github.com/dotnet/standard/pull/1290","RelatedDescription":"Closed or merged PR \"Add string overloads to DbDataReader.Get*()\" (#1290)"},{"Id":"462968084","IsPullRequest":true,"CreatedAt":"2019-07-02T18:34:57","Actor":"terrajobst","Number":"1300","RawContent":null,"Title":"Reduces System.Reflection.Emit to match CoreFX","State":"closed","Body":"For .NET Standard 2.1 we planned to extend Reflection Emit match the .NET Framework API surface but we never got around adding those APIs in .NET Core 3.0. Given that these APIs are rarely used, the proposal is to remove them from the .NET Standard 2.1. Please note that this isn't a breaking change from .NET Standard 2.0 but it is a breaking change from earlier preview versions of .NET Standard 2.1.\r\n\r\nSee issue dotnet/corefx#36716 for details.","Url":"https://github.com/dotnet/standard/pull/1300","RelatedDescription":"Closed or merged PR \"Reduces System.Reflection.Emit to match CoreFX\" (#1300)"},{"Id":"461018856","IsPullRequest":true,"CreatedAt":"2019-07-02T17:45:19","Actor":"roji","Number":"1283","RawContent":null,"Title":"Add async methods in System.Data.Common, implement IAsyncDisposable","State":"closed","Body":"***DO NOT MERGE until dotnet/corefx#39070 is merged***\r\n\r\n---\r\n\r\nThis brings over https://github.com/dotnet/corefx/issues/35012 (already merged for .NET Core 3.0) to .NET Standard 2.1.\r\n\r\nOne thing I noticed, is that in the corefx implementation the types have been updated to implement IAsyncDisposable, but in the ref they have not (although `DisposeAsync()` has been added). Can someone please confirm whether the interface should get added there?","Url":"https://github.com/dotnet/standard/pull/1283","RelatedDescription":"Closed or merged PR \"Add async methods in System.Data.Common, implement IAsyncDisposable\" (#1283)"},{"Id":"463216905","IsPullRequest":true,"CreatedAt":"2019-07-02T13:07:43","Actor":"dotnet-maestro[bot]","Number":"1302","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.1\r\n- **Date Produced**: 7/2/2019 10:08 AM\r\n- **Commit**: ec138afba514ce9b53d931d66129e02e8be147a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1302","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1302)"},{"Id":"463189880","IsPullRequest":true,"CreatedAt":"2019-07-02T12:29:13","Actor":"dotnet-maestro[bot]","Number":"1301","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190701.4\r\n- **Date Produced**: 7/1/2019 9:33 PM\r\n- **Commit**: 1fb1e240c889cd7f6e10cb1eacd129efa3ddb4b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19351.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19351.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1301","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1301)"},{"Id":"462698498","IsPullRequest":true,"CreatedAt":"2019-07-01T13:04:51","Actor":"dotnet-maestro[bot]","Number":"1299","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190630.3\r\n- **Date Produced**: 6/30/2019 6:47 PM\r\n- **Commit**: da3ba7ebe34771dde769b65dfb7f78fa55a5abb6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19330.3\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19330.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19330.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1299","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1299)"},{"Id":"462676118","IsPullRequest":true,"CreatedAt":"2019-07-01T12:14:12","Actor":"dotnet-maestro[bot]","Number":"1298","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190630.1\r\n- **Date Produced**: 6/30/2019 12:52 PM\r\n- **Commit**: 89fab80685c91024c8f9e21f1c37f62580f648f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19330.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1298","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1298)"},{"Id":"462402162","IsPullRequest":true,"CreatedAt":"2019-06-30T13:03:36","Actor":"dotnet-maestro[bot]","Number":"1297","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190629.6\r\n- **Date Produced**: 6/30/2019 12:46 AM\r\n- **Commit**: 68763d3ce7d9db960aadecc0773e7c7b906cc3e5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19329.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19329.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19329.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1297","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1297)"},{"Id":"462397733","IsPullRequest":true,"CreatedAt":"2019-06-30T12:14:00","Actor":"dotnet-maestro[bot]","Number":"1296","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190629.2\r\n- **Date Produced**: 6/29/2019 1:09 PM\r\n- **Commit**: 3ebba82f29f338a3cb14f4b3e1b6da0fd69be694\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19329.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1296","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1296)"},{"Id":"462312057","IsPullRequest":false,"CreatedAt":"2019-06-29T15:21:55","Actor":"alecgn","Number":"1295","RawContent":null,"Title":"Consider adding AesGcm to .NET Standard 2.1","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1295","RelatedDescription":"Open issue \"Consider adding AesGcm to .NET Standard 2.1\" (#1295)"},{"Id":"462299907","IsPullRequest":true,"CreatedAt":"2019-06-29T13:03:28","Actor":"dotnet-maestro[bot]","Number":"1294","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190629.1\r\n- **Date Produced**: 6/29/2019 9:23 AM\r\n- **Commit**: 901a1d554a7bcb489eb363fb724c9d294ec35940\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19329.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19329.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19329.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1294","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1294)"},{"Id":"462296158","IsPullRequest":true,"CreatedAt":"2019-06-29T12:14:00","Actor":"dotnet-maestro[bot]","Number":"1293","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190628.2\r\n- **Date Produced**: 6/28/2019 7:25 PM\r\n- **Commit**: a68bcce61fa64598cbd30c00780b1f6ca8e7a9ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19328.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1293","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1293)"},{"Id":"462019019","IsPullRequest":true,"CreatedAt":"2019-06-28T12:59:17","Actor":"dotnet-maestro[bot]","Number":"1292","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190627.9\r\n- **Date Produced**: 6/28/2019 4:10 AM\r\n- **Commit**: b8761d4848d42040c81ec25c8b51fd386b97f5f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19327.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19327.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19327.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1292","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1292)"},{"Id":"462001956","IsPullRequest":true,"CreatedAt":"2019-06-28T12:14:01","Actor":"dotnet-maestro[bot]","Number":"1289","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190627.39\r\n- **Date Produced**: 6/28/2019 2:55 AM\r\n- **Commit**: 247c0290c554a68dd3e560dd88fb0da26353d9d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19327.39\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19327.39\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19327.39\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19327.39\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19327.39\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19327.39\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1289","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1289)"},{"Id":"461045281","IsPullRequest":true,"CreatedAt":"2019-06-28T11:31:25","Actor":"roji","Number":"1284","RawContent":null,"Title":"Add feature detection properties to DbProviderFactory","State":"closed","Body":"CanCreateDataAdapter, CanCreateCommandBuilder\r\n\r\nSee https://github.com/dotnet/corefx/issues/35564\r\n\r\n/cc @divega @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1284","RelatedDescription":"Closed or merged PR \"Add feature detection properties to DbProviderFactory\" (#1284)"},{"Id":"461514630","IsPullRequest":true,"CreatedAt":"2019-06-27T13:08:53","Actor":"dotnet-maestro[bot]","Number":"1288","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190626.15\r\n- **Date Produced**: 6/27/2019 8:28 AM\r\n- **Commit**: 6d723b8e5ae3129c0a94252292322fc19673478f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19326.15\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19326.15\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19326.15\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1288","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1288)"},{"Id":"461489560","IsPullRequest":true,"CreatedAt":"2019-06-27T12:14:35","Actor":"dotnet-maestro[bot]","Number":"1287","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190626.44\r\n- **Date Produced**: 6/27/2019 6:59 AM\r\n- **Commit**: d39a62deaf3aa4e03c0b7dadc320a517e0e00187\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19326.44\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19326.44\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19326.44\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19326.44\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19326.44\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19326.44\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1287","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1287)"},{"Id":"461135035","IsPullRequest":true,"CreatedAt":"2019-06-26T20:09:26","Actor":"dotnet-maestro-bot","Number":"1285","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @dotnet-maestro[bot]\n* @terrajobst\n* @wtgodbe\n* @safern\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1285","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1285)"},{"Id":"461136908","IsPullRequest":true,"CreatedAt":"2019-06-26T19:14:40","Actor":"wtgodbe","Number":"1286","RawContent":null,"Title":"Update branding to preview8 in master","State":"closed","Body":"CC @terrajobst","Url":"https://github.com/dotnet/standard/pull/1286","RelatedDescription":"Closed or merged PR \"Update branding to preview8 in master\" (#1286)"},{"Id":"460955255","IsPullRequest":true,"CreatedAt":"2019-06-26T13:07:21","Actor":"dotnet-maestro[bot]","Number":"1282","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190626.2\r\n- **Date Produced**: 6/26/2019 10:31 AM\r\n- **Commit**: 219b67118e3a2d539afc1ff3bb2c10e1bc7b03d2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19326.2\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19326.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19326.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1282","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1282)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"464447492","IsPullRequest":true,"CreatedAt":"2019-07-05T03:37:34","Actor":"geoffkizer","Number":"39210","RawContent":null,"Title":"change CreateHttpClient handler to always enable HTTP2 via DefaultRequestVersion","State":"open","Body":"Fixes #39178 \r\n\r\nCurrently, a lot of remote server tests that are trying to test HTTP2 actually aren't using HTTP2, because the requests they create have Version=1.1.\r\n\r\nFix this by changing HttpClientHandlerTestBase.CreateHttpClient to always set HttpClient.DefaultRequestVersion to 2.0. This means we will always attempt to do HTTP2. Whether we actually do HTTP2 or not is determined by the server (loopback or remote).\r\n\r\nNote that DefaultRequestVersion does not apply if you create the HttpRequestMessage yourself, so any tests that do this need to set Version=2.0 explicitly.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39210","RelatedDescription":"Open PR \"change CreateHttpClient handler to always enable HTTP2 via DefaultRequestVersion\" (#39210)"},{"Id":"464443918","IsPullRequest":true,"CreatedAt":"2019-07-05T03:16:39","Actor":"geoffkizer","Number":"39209","RawContent":null,"Title":"small improvements to HTTP2 testing","State":"open","Body":"Two changes related to issues found in code coverage:\r\n\r\n(1) Enable existing HTTP method tests for HTTP2\r\n(2) Set the initial connection buffer size to 4 bytes, to induce the logic that grows buffers when needed\r\n\r\nFixes #39164 \r\nContributes to #34460","Url":"https://github.com/dotnet/corefx/pull/39209","RelatedDescription":"Open PR \"small improvements to HTTP2 testing\" (#39209)"},{"Id":"464433089","IsPullRequest":false,"CreatedAt":"2019-07-05T02:11:24","Actor":"JamesNK","Number":"39208","RawContent":null,"Title":"nit: JsonCamelCaseNamePolicy -> JsonCamelCaseNamingPolicy","State":"open","Body":"I noticed that the internal class for camel casing names is `JsonCamelCaseNamePolicy`. It should probably be `JsonCamelCaseNamingPolicy` since it is inheriting from `JsonNamingPolicy`.","Url":"https://github.com/dotnet/corefx/issues/39208","RelatedDescription":"Open issue \"nit: JsonCamelCaseNamePolicy -> JsonCamelCaseNamingPolicy\" (#39208)"},{"Id":"464432832","IsPullRequest":false,"CreatedAt":"2019-07-05T02:09:41","Actor":"JamesNK","Number":"39207","RawContent":null,"Title":"Do not use DictionaryKeyPolicy on deserialization","State":"open","Body":"re: https://github.com/dotnet/corefx/issues/38840#issuecomment-506888027\r\n\r\nDictionaryKeyPolicy is being used for deserialization as well as serialization. I'm not sure when this decision was made, but I think this has a number of problems:\r\n\r\n1. JsonNamingPolicy (and JsonNamingStrategy in Json.NET) are designed as a one way operation. There is only `ConvertName` on the type. There is no pair of `ConvertTo` and `ConvertFrom` methods. That is because you can't reliably undo PascalCase to camelCase or underscore_case.\r\n\r\n2. It is common for people to reuse the same serializer options for both serializing and deserializing. When using the policy is used in both directions, calling the same JsonNamingPolicy on an incoming dictionary key will at best do nothing, or at worst double convert. For example, a naming policy that HTML encodes a string will now HTML encode it in both directions: `\"J & NK\"` -> `\"J &amp; NK\"` -> `\"J &amp;amp; NK\"`\r\n\r\n3. It is inconsistent. DictionaryKeyPolicy is called during deserialization but PropertyNamePolicy is not.\r\n\r\n4. What is the user scenario for this? The naming policy with serialization is useful for people who want dictionary keys to be camel cased, but what purpose is there to run the policy on deserialization? You can't undo camel case back to pascal case so it's not that. I ask because this is a feature that has never been requested in Json.NET.","Url":"https://github.com/dotnet/corefx/issues/39207","RelatedDescription":"Open issue \"Do not use DictionaryKeyPolicy on deserialization\" (#39207)"},{"Id":"464422734","IsPullRequest":true,"CreatedAt":"2019-07-05T00:58:03","Actor":"JustNrik","Number":"39206","RawContent":null,"Title":"Update MatchCollection.cs","State":"open","Body":"Take the following code as an example:\r\n\r\n```cs\r\nforeach (var match in Regex.Matches(\"hello, world!\", @\"[a-z]+\"))\r\n{\r\n    Console.WriteLine(match.Value);\r\n}\r\n```\r\nThe output should be:\r\n```\r\nhello\r\nworld\r\n```\r\nbut actually, it doesn't even compile. Why? Because `IEnumerable<Match>.GetEnumerator` is implemented explicitly while the non-generic version is not, hence, `var` infers `match` as `object` instead of `Match`. This fix would make the compiler to properly infer the type.","Url":"https://github.com/dotnet/corefx/pull/39206","RelatedDescription":"Open PR \"Update MatchCollection.cs\" (#39206)"},{"Id":"464023699","IsPullRequest":false,"CreatedAt":"2019-07-05T00:01:32","Actor":"cpzhang","Number":"39190","RawContent":null,"Title":"cannot use 'checked' as the linq select anonymous type memeber name","State":"closed","Body":"from x in db.table\r\n select new\r\n {\r\n  checked = 1\r\n }\r\n\r\nlike the codes above , visual sutdio 2019 will report the error\r\n\"Error CS0746\tInvalid anonymous type member declarator.\" ","Url":"https://github.com/dotnet/corefx/issues/39190","RelatedDescription":"Closed issue \"cannot use 'checked' as the linq select anonymous type memeber name\" (#39190)"},{"Id":"464411634","IsPullRequest":false,"CreatedAt":"2019-07-04T23:16:08","Actor":"GrabYourPitchforks","Number":"39204","RawContent":null,"Title":"BitArray race conditions may lead to memory corruption","State":"open","Body":"As of https://github.com/dotnet/corefx/pull/33781, the `BitArray` class contains unsafe code as a performance optimization. Since `BitArray` instances are not thread-safe, this opens the possibility that improper cross-thread access to a `BitArray` instance may result in global memory corruption.\r\n\r\nWe should modify the `BitArray` internal logic to be resilient against this possibility. We don't need to make the type thread-safe, but improper cross-thread access shouldn't be able to cause damage beyond corruption of the individual `BitArray` instances involved.","Url":"https://github.com/dotnet/corefx/issues/39204","RelatedDescription":"Open issue \"BitArray race conditions may lead to memory corruption\" (#39204)"},{"Id":"464411176","IsPullRequest":true,"CreatedAt":"2019-07-04T23:11:54","Actor":"Marusyk","Number":"39203","RawContent":null,"Title":"Fix inconsistent behavior in VersionConverter and UriTypeConverter with full framework","State":"open","Body":"Issue #39041\r\n\r\nPlease review.\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/39203","RelatedDescription":"Open PR \"Fix inconsistent behavior in VersionConverter and UriTypeConverter with full framework\" (#39203)"},{"Id":"464410613","IsPullRequest":true,"CreatedAt":"2019-07-04T23:06:48","Actor":"GrabYourPitchforks","Number":"39202","RawContent":null,"Title":"Change Span.Fill(0) call to Span.Clear() instead","State":"open","Body":"Just some minor cleanup in `HttpListener`.","Url":"https://github.com/dotnet/corefx/pull/39202","RelatedDescription":"Open PR \"Change Span.Fill(0) call to Span.Clear() instead\" (#39202)"},{"Id":"464407429","IsPullRequest":false,"CreatedAt":"2019-07-04T22:37:41","Actor":"Symbai","Number":"39201","RawContent":null,"Title":"API Proposal: ReadOnlySpan<T> Concat","State":"open","Body":"When using Span.Slice especially for strings it's currently a bottleneck to slice parts out of it and create a new string with these parts. It's because we have to call ToString() on each ReadOnlySpan<char> and then concat them together. The reason to use Span is to achieve performance. So the idea is that we create an API that calls ToArray() and ToString() only once which is faster and allocates less memory.\r\n\r\nI've included a poor demonstration code to show the benefit. I think there are better ways to implement this but I also wanted to give some kind of motivation to this proposal by showing some benchmark results.\r\n\r\nThe target goal is to let us concat from many different span sources but ReadOnlySpan arrays aren't allowed as arguments so I've created an example with a Range array on a single span source.\r\n\r\n\r\n### Proposal\r\n\r\n```\r\ninternal static partial class SpanHelpers\r\n{\r\n   public static string Concat(this ReadOnlySpan<char> span, Range[] ranges);\r\n   public static byte[] Concat(this ReadOnlySpan<byte> span, Range[] ranges);\r\n   //ReadOnlySpan<T>[] aren't allowed as parameter, but if it is it would allow us to concat multiple span from different sources\r\n   public static string Concat(ReadOnlySpan<char>[] spans);\r\n   public static byte[] Concat(ReadOnlySpan<byte>[] spans);\r\n}\r\n```\r\n### Demo Implementation\r\n```\r\n//This is my poor example to demonstrate the benefit. Not an actual proper implementation\r\npublic unsafe static string Concat(this ReadOnlySpan<char> span, Range[] ranges)\r\n{\r\n    int index = 0;\r\n    int length = 0;\r\n    for (int i = 0; i < ranges.Length; i++)\r\n    {\r\n        length += ranges[i].End.Value - ranges[i].Start.Value;\r\n    }\r\n    var result = new string('\\0', length);\r\n    fixed (char* spanPointer = span)\r\n    fixed (char* resultPointer = result)\r\n    {\r\n        for (int i = 0; i < ranges.Length; i++)\r\n        {\r\n            int bytesToCopy = (ranges[i].End.Value - ranges[i].Start.Value);\r\n            Unsafe.CopyBlock(resultPointer + index, spanPointer + ranges[i].Start.Value, (uint)bytesToCopy * sizeof(char));\r\n            index += bytesToCopy;\r\n        }\r\n    }\r\n            \r\n    return result;\r\n}\r\npublic unsafe static byte[] Concat(this ReadOnlySpan<byte> span, Range[] ranges)\r\n{\r\n    int index = 0;\r\n    int length = 0;\r\n    for (int i = 0; i < ranges.Length; i++)\r\n    {\r\n        length += ranges[i].End.Value - ranges[i].Start.Value;\r\n    }\r\n    var result = new byte[length];\r\n    fixed (byte* spanPointer = span)\r\n    fixed (byte* resultPointer = result)\r\n    {\r\n        for (int i = 0; i < ranges.Length; i++)\r\n        {\r\n            int bytesToCopy = (ranges[i].End.Value - ranges[i].Start.Value);\r\n            Unsafe.CopyBlock(resultPointer + index, spanPointer + ranges[i].Start.Value, (uint)bytesToCopy * sizeof(byte));\r\n            index += bytesToCopy;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\n### Sample Usage:\r\nBefore:\r\n```\r\n[Benchmark]\r\npublic string Current_String()\r\n{\r\n    string result = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n    ReadOnlySpan<char> span = result.AsSpan();\r\n    result = span.Slice(0, 2).ToString() + span.Slice(5, 2).ToString() + span.Slice(9, 2).ToString();\r\n    return result;\r\n}\r\n[Benchmark]\r\npublic byte[] Current_ByteArray()\r\n{\r\n    byte[] result = new byte[64];\r\n    ReadOnlySpan<byte> span = result.AsSpan();\r\n    var buffer1 = span.Slice(0, 2).ToArray();\r\n    var buffer2 = span.Slice(5, 2).ToArray();\r\n    var buffer3 = span.Slice(9, 2).ToArray();\r\n    byte[] newArray = new byte[buffer1.Length + buffer2.Length + buffer3.Length];\r\n    Buffer.BlockCopy(buffer1, 0, newArray, 0, buffer1.Length);\r\n    Buffer.BlockCopy(buffer2, 0, newArray, buffer1.Length, buffer2.Length);\r\n    Buffer.BlockCopy(buffer3, 0, newArray, buffer1.Length + buffer2.Length, buffer3.Length);\r\n    return newArray;\r\n}\r\n```\r\nAfter:\r\n```\r\n[Benchmark]\r\npublic string Concat_String()\r\n{\r\n    string result = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n    ReadOnlySpan<char> span = result.AsSpan();\r\n    result = span.Concat(new[] { new Range(0, 2), new Range(5, 7), new Range(9, 11) });\r\n    return result;\r\n}\r\n[Benchmark]\r\npublic byte[] Concat_ByteArray()\r\n{\r\n    byte[] result = new byte[64];\r\n    ReadOnlySpan<byte> span = result.AsSpan();\r\n    result = span.Concat(new[] { new Range(0, 2), new Range(5, 7), new Range(9, 11) });\r\n    return result;\r\n}\r\n```\r\n\r\n### Benefit:\r\n```\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n\r\nJob=Core  Runtime=Core\r\n```\r\n\r\n|            Method |     Mean |  Allocated |\r\n|------------------ |---------:|----------:|\r\n|    Current_String | 70.20 ns | 136 B |\r\n|     **Concat_String** | **39.45 ns** |      **88 B** |\r\n| Current_ByteArray | 67.46 ns |    216 B |\r\n|  **Concat_ByteArray** | **44.20 ns** |     **168 B** |","Url":"https://github.com/dotnet/corefx/issues/39201","RelatedDescription":"Open issue \"API Proposal: ReadOnlySpan<T> Concat\" (#39201)"},{"Id":"464015015","IsPullRequest":true,"CreatedAt":"2019-07-04T22:36:45","Actor":"dotnet-maestro-bot","Number":"39189","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04020-01, uwp62-27322-01, servicing-27617-02, rel-27903-00, rel-27903-00, respectively (release/uwp6.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39189","RelatedDescription":"Closed or merged PR \"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04020-01, uwp62-27322-01, servicing-27617-02, rel-27903-00, rel-27903-00, respectively (release/uwp6.2)\" (#39189)"},{"Id":"464394321","IsPullRequest":true,"CreatedAt":"2019-07-04T21:04:20","Actor":"jvandertil","Number":"39200","RawContent":null,"Title":"Improve LINQ predicate performance","State":"open","Body":"Fixes #13696 and #39148 \r\n\r\nThis PR adds type checks and code paths for List<T> and T[] to `First(predicate)`, `FirstOrDefault(predicate)`, `Single(predicate)` and `SingleOrDefault(predicate)`.\r\n\r\n`Any(predicate)` now uses the `TryGetFirst` method, I thought this might be better than doing the same type checks in there as well.\r\n\r\nThings that might need some fixing still:\r\n- TryGetSingle has a `out bool found` and `out bool foundSingle` because I didn't think that throwing an exception from a method prefixed with 'Try' would be acceptable.\r\n- Might need to separate things with a `SpeedOpt` or `SizeOpt` implementation as well\r\n\r\nBenchmarks are submitted to dotnet/performance [here](https://github.com/dotnet/performance/pull/611).\r\n","Url":"https://github.com/dotnet/corefx/pull/39200","RelatedDescription":"Open PR \"Improve LINQ predicate performance\" (#39200)"},{"Id":"464343387","IsPullRequest":false,"CreatedAt":"2019-07-04T16:38:47","Actor":"SoftCircuits","Number":"39199","RawContent":null,"Title":"Add BinaryWriter.Write(int[]) and similar","State":"open","Body":"# Feature Suggestion\r\n\r\nIf I have an int array, I can write it to a binary file using the following code.\r\n\r\n```cs\r\nusing (BinaryWriter writer = new BinaryWriter(File.Open(path, FileMode.Create)))\r\n{\r\n    for (int i = 0; i < array.Length; i++)\r\n        writer.Write(array[i]);\r\n    writer.Close();\r\n}\r\n```\r\n\r\nBut this approach does not seem optimal. An int array is stored in contiguous memory, so I don't understand why there isn't a way to write the entire array in a single call, as I could with `byte[]` or `Span<byte>` (or as I could with C or C++). There are workarounds, but I don't see why they are necessary.\r\n\r\nHow about adding overloads to `BinaryWriter.Write()` and `BinaryWriter.Read()` that accept `int[]` or `Span<int>` arguments, and perhaps other types as well. And maybe even `FileStream` could support the same?\r\n\r\nThis seems like one area where C# seems unnecessarily less efficient than, say, C or C++, and as long as the arrays are stored in contiguous memory, I don't see why this isn't a no-brainer.\r\n","Url":"https://github.com/dotnet/corefx/issues/39199","RelatedDescription":"Open issue \"Add BinaryWriter.Write(int[]) and similar\" (#39199)"},{"Id":"464251885","IsPullRequest":true,"CreatedAt":"2019-07-04T14:15:50","Actor":"dotnet-maestro[bot]","Number":"39197","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190704.1\r\n- **Date Produced**: 7/4/2019 11:29 AM\r\n- **Commit**: ac14c2abe6ef3b8b9996cd142c3075a83764171a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190704.1\r\n\r\n[marker]: <> (End:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39197","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#39197)"},{"Id":"464241129","IsPullRequest":true,"CreatedAt":"2019-07-04T13:56:08","Actor":"dotnet-maestro[bot]","Number":"39195","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview8.19353.8\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview8.19353.8\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#39195)"},{"Id":"464067694","IsPullRequest":true,"CreatedAt":"2019-07-04T13:13:47","Actor":"jkotas","Number":"39191","RawContent":null,"Title":"More cleanup for linker heuristics","State":"closed","Body":"- Deleting dead or unrechable code\r\n- Adding ILLinkTrim.xml files for types and methods accessed via reflection","Url":"https://github.com/dotnet/corefx/pull/39191","RelatedDescription":"Closed or merged PR \"More cleanup for linker heuristics\" (#39191)"},{"Id":"464257907","IsPullRequest":false,"CreatedAt":"2019-07-04T13:08:16","Actor":"aobatact","Number":"39198","RawContent":null,"Title":"Provide the way to ensure the required length before formatting from ISpanFormattable","State":"open","Body":"# Provide the way to ensure the required length before formatting from ISpanFormattable\r\n\r\n## Issue\r\nCurrent design of ISpanFormattable doesn't tell the required length, and the current usage like `StringBuilder.AppendSpanFormattable` retry to format by using `ToString`  when we fail to format in `TryFormat`. This makes a performance issue.\r\nSince the `ISpanFormattable` is not  public yet, there is a chance to change it.\r\n\r\n## Proposed Api\r\n\r\n```csharp\r\n    internal interface ISpanFormattable\r\n    {\r\n        bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider provider);\r\n\r\n        int RequiredCharsLength(ReadOnlySpan<char> format, IFormatProvider provider);\r\n    }\r\n```\r\n\r\n## Benchmark\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.17134.829 (1803/April2018Update/Redstone4)\r\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\r\n.NET Core SDK=3.0.100-preview4-011223\r\n  [Host]     : .NET Core 3.0.0-preview4-27615-11 (CoreCLR 4.6.27615.73, CoreFX 4.700.19.21213), 64bit RyuJIT\r\n  DefaultJob : .NET Core 3.0.0-preview4-27615-11 (CoreCLR 4.6.27615.73, CoreFX 4.700.19.21213), 64bit RyuJIT\r\n\r\n\r\n```\r\n|                   Method |     Mean |     Error |    StdDev |\r\n|------------------------- |---------:|----------:|----------:|\r\n|           EnoughCapacity | 31.52 ns | 0.1802 ns | 0.1686 ns |\r\n|        NotEnoughCapacity | 88.07 ns | 0.9511 ns | 0.8896 ns |\r\n|    Enough_EnsureCapacity | 35.96 ns | 0.2609 ns | 0.2312 ns |\r\n| NotEnough_EnsureCapacity | 50.22 ns | 0.2931 ns | 0.2742 ns |\r\n\r\n```csharp\r\npublic class AppendCapacity\r\n{\r\n    private int value;\r\n\r\n    [GlobalSetup]\r\n    public void SetUp()\r\n    {\r\n        value = (new Random()).Next();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void EnoughCapacity()\r\n    {\r\n        var sb = new StringBuilder();\r\n        sb.Append(value);\r\n    }\r\n    \r\n    [Benchmark]\r\n    public void NotEnoughCapacity()\r\n    {\r\n        var sb = new StringBuilder(1);\r\n        sb.Append(value);\r\n    }\r\n    [Benchmark]\r\n    public void Enough_EnsureCapacity()\r\n    {\r\n        var sb = new StringBuilder();\r\n        var c = CountDigits((uint)value);\r\n        sb.EnsureCapacity(c);\r\n        sb.Append(value);\r\n    }\r\n\r\n    [Benchmark]\r\n    public void NotEnough_EnsureCapacity()\r\n    {\r\n        var sb = new StringBuilder(1);\r\n        var c = CountDigits((uint)value);\r\n        sb.EnsureCapacity(c);\r\n        sb.Append(value);\r\n    }\r\n\r\n    //from System.Buffers.Text.FormattingHelpers.CountDigits\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static int CountDigits(uint value)\r\n    {\r\n        int digits = 1;\r\n        if (value >= 100000)\r\n        {\r\n            value = value / 100000;\r\n            digits += 5;\r\n        }\r\n\r\n        if (value < 10)\r\n        {\r\n            // no-op\r\n        }\r\n        else if (value < 100)\r\n        {\r\n            digits += 1;\r\n        }\r\n        else if (value < 1000)\r\n        {\r\n            digits += 2;\r\n        }\r\n        else if (value < 10000)\r\n        {\r\n            digits += 3;\r\n        }\r\n        else\r\n        {\r\n            Debug.Assert(value < 100000);\r\n            digits += 4;\r\n        }\r\n\r\n        return digits;\r\n    }\r\n    \r\n}\r\n```\r\n## Related\r\n#30114","Url":"https://github.com/dotnet/corefx/issues/39198","RelatedDescription":"Open issue \"Provide the way to ensure the required length before formatting from ISpanFormattable\" (#39198)"},{"Id":"464247918","IsPullRequest":true,"CreatedAt":"2019-07-04T12:46:29","Actor":"dotnet-maestro[bot]","Number":"39196","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190703.2\r\n- **Date Produced**: 7/4/2019 12:43 AM\r\n- **Commit**: 16b6f2c9c2196bfc32020dcd12cda4c4f34279df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19353.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19353.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19353.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39196","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#39196)"},{"Id":"464238793","IsPullRequest":true,"CreatedAt":"2019-07-04T12:25:02","Actor":"dotnet-maestro[bot]","Number":"39194","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190703.14\r\n- **Date Produced**: 7/4/2019 6:39 AM\r\n- **Commit**: 4e18401b3b8cf2080201b1d0683f0892deba63f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27903-14\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview8-27903-14\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview8-27903-14\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39194","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#39194)"},{"Id":"464229887","IsPullRequest":true,"CreatedAt":"2019-07-04T12:03:44","Actor":"dotnet-maestro[bot]","Number":"39193","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19353.19\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19353.19\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39193","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#39193)"},{"Id":"464013414","IsPullRequest":true,"CreatedAt":"2019-07-04T11:30:26","Actor":"stephentoub","Number":"39188","RawContent":null,"Title":"Add more options to HttpStress program","State":"closed","Body":"- \"listOps\" option, to see what numbers correspond to which client operations\r\n- New client operation for HEAD\r\n- New client operation for PUT\r\n- New client operation for POST duplex, but that dribbles a byte at a time\r\n- Fixed POST duplex to use ResponseHeadersRead\r\n- Enable HTTP logging to be started to the console during a run","Url":"https://github.com/dotnet/corefx/pull/39188","RelatedDescription":"Closed or merged PR \"Add more options to HttpStress program\" (#39188)"},{"Id":"464146159","IsPullRequest":false,"CreatedAt":"2019-07-04T08:52:12","Actor":"BratWiekszy","Number":"39192","RawContent":null,"Title":"Select in certain cases is run after enumerator disposal","State":"open","Body":"Consider following invocations on the same enumerable (enumerator):  \r\n```c#\r\n1: enumerable.Where((_, i) => i == 4).Select(x => x.Foo()).First();\r\n2: enumerable.Select(x => x.Foo()).ElementAt(4);\r\n3: enumerable.Skip(4).Select(x => x.Foo()).First();\r\n4: enumerable.Select(x => x.Foo()).Take(5).Last();\r\n5: enumerable.Take(5).Select(x => x.Foo()).Last();\r\n```\r\n\r\nAll of them should return the same element with Foo() selector applied, and it happens. Also some of them use optimisations, which limit number of calls of selector (to 1, by calling only on 5th):\r\n  \r\n - 1: limit exists and it's desired,\r\n - 2: limit does not exist, and it's weird because 5. has limit, even tho 2. is more suitable for such optimisation, but it's not a problem,\r\n - 3: limit exists and it's desired,\r\n - 4: limit does not exist but it's fine,\r\n - 5: limit exists but it's fine.\r\n\r\n In case of 3. and 5. selector function is run after a call to `Dispose()` on enumerator and it's problematic because it does not comply will exprected behavior of something disposable - it usually is usuable and its data unavailable. Also, in my case, enumerator fetches data headers in MoreNext() before returning, and in next call it decides whether to fetch full data based on call in Foo(). When no next call is made, this fetching is done in Dispose, at last point where it could be done, and then data source is closed. Even if i put full fetching code inside Foo(), it being called after Disposal completely invalidates this workaround.\r\n \r\nSince now I know about this quirk, i can fix my calls, but consumers of my code may not have even slightest idea why their data is missing. I see two possible fixes:\r\n  \r\n - Althought implementation of SelectIPartitionIterator, EnumerablePartition and respective TryGetLast() or TryGetFirst() methods of Enumerable are negligible detail, it does influence behavior of calls, and as such it should be mentioned somewhere in docs.\r\n - TryGetLast<T>(IEnumerable<T>, out bool) and TryGetFirst<T>(IEnumerable<T>, out bool) code that now looks like:\r\n ```c#\r\nif (source is IPartition<TSource> partition)\r\n{\r\n    return partition.TryGetLast(out found);\r\n}\r\n``` \r\ncould be replaced with something like this:\r\n```c#\r\nif (source is IPartition<TSource> partition)\r\n{\r\n    var result = partition.TryGetLast(out found);\r\n    Dispose();\r\n    return result;\r\n}\r\n```\r\nand IPartition<T> methods like TryGetLast() and TryGetFirst() shouldn't dispose own enumerator before their dispose is called. ","Url":"https://github.com/dotnet/corefx/issues/39192","RelatedDescription":"Open issue \"Select in certain cases is run after enumerator disposal\" (#39192)"},{"Id":"464001241","IsPullRequest":true,"CreatedAt":"2019-07-04T02:12:31","Actor":"VSadov","Number":"39183","RawContent":null,"Title":"Fix expected range of MemoryLoadBytes in GetGCMemoryInfo test","State":"closed","Body":"`MemoryLoadBytes` does not necessarily increase after allocating. \r\nSince it is an external metric, it also depends on what other processes are doing. It may sometimes go down even after allocating.\r\n\r\nFixes:#37378","Url":"https://github.com/dotnet/corefx/pull/39183","RelatedDescription":"Closed or merged PR \"Fix expected range of MemoryLoadBytes in GetGCMemoryInfo test\" (#39183)"},{"Id":"464012581","IsPullRequest":true,"CreatedAt":"2019-07-04T01:05:07","Actor":"JeremyKuhne","Number":"39187","RawContent":null,"Title":"Align date time parsing with 8601 spec","State":"open","Body":"- Clarifies what specification pieces we're adhering to\r\n- Reorganize code to expect completely valid UTF-8 sequence\r\n- Add corner cases and fix a few issues\r\n- Restructure parser to attempt to clarify state\r\n- Keep state in struct to avoid passing several parameters","Url":"https://github.com/dotnet/corefx/pull/39187","RelatedDescription":"Open PR \"Align date time parsing with 8601 spec\" (#39187)"},{"Id":"464009512","IsPullRequest":true,"CreatedAt":"2019-07-04T00:49:05","Actor":"Marusyk","Number":"39186","RawContent":null,"Title":"Refactor and clean up the SpanTestHelper helpers for asserting that a ref struct method throws","State":"open","Body":"Issue #38891\r\n\r\nPlease review.\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/39186","RelatedDescription":"Open PR \"Refactor and clean up the SpanTestHelper helpers for asserting that a ref struct method throws\" (#39186)"},{"Id":"464005040","IsPullRequest":false,"CreatedAt":"2019-07-04T00:24:32","Actor":"JeremyKuhne","Number":"39185","RawContent":null,"Title":"Need to handle leap seconds in JSON DateTime parser","State":"open","Body":"When leap seconds are valid we should allow them. Note that there isn't a direct way to validate that leap seconds are ok for given data without catching parsing errors from `DateTime`.","Url":"https://github.com/dotnet/corefx/issues/39185","RelatedDescription":"Open issue \"Need to handle leap seconds in JSON DateTime parser\" (#39185)"},{"Id":"464002948","IsPullRequest":true,"CreatedAt":"2019-07-04T00:14:38","Actor":"divega","Number":"39184","RawContent":null,"Title":"Fix for System.ComponentModel.Annotations packaging","State":"open","Body":"We currently build assemblies for multiple targets from this source code. We didn't add conditions when we added new types to the API, which resulted in the .NET Standard 2.0 assemblies containing types that are not implemented in all compliant platforms. \r\n\r\nWith this change, we are switching to harvesting assemblies from the previous stable package for older targets like .NET Standard 2.0 and .NET Framework, and just build the library for .NET Core 3.0 and .NET Standard 2.1.\r\n\r\nThis should fix #38849.","Url":"https://github.com/dotnet/corefx/pull/39184","RelatedDescription":"Open PR \"Fix for System.ComponentModel.Annotations packaging\" (#39184)"},{"Id":"463978651","IsPullRequest":true,"CreatedAt":"2019-07-03T23:53:12","Actor":"jkotas","Number":"39182","RawContent":null,"Title":"Fix EventLog tests on latest Win10","State":"closed","Body":"The Security EventLog is ACLed for admin access only. Remove it from the set we look\r\nfor to make the test work in regular prompt.","Url":"https://github.com/dotnet/corefx/pull/39182","RelatedDescription":"Closed or merged PR \"Fix EventLog tests on latest Win10\" (#39182)"},{"Id":"463969354","IsPullRequest":true,"CreatedAt":"2019-07-03T23:52:48","Actor":"VSadov","Number":"39180","RawContent":null,"Title":"Temporarily disable `MemoryLoadBytes` scenario in `GetGCMemoryInfo` test","State":"closed","Body":"related to https://github.com/dotnet/corefx/issues/37378","Url":"https://github.com/dotnet/corefx/pull/39180","RelatedDescription":"Closed or merged PR \"Temporarily disable `MemoryLoadBytes` scenario in `GetGCMemoryInfo` test\" (#39180)"},{"Id":"463975214","IsPullRequest":false,"CreatedAt":"2019-07-03T22:12:55","Actor":"geoffkizer","Number":"39181","RawContent":null,"Title":"HTTP2: Does the user need to Flush on the request stream to guarantee that request data is sent?","State":"open","Body":"For HTTP/1.1, we don't guarantee that the request body is sent until either you flush or you close the request stream. In practice, this doesn't matter because we don't support duplex.\r\n\r\nWith HTTP/2 however, we do support duplex and so it's important for the user to know exactly when their data is guaranteed to be sent to the server. \r\n\r\nCurrently, we are effectively flushing on every write to the request body. But we've discussed potentially changing this to improve performance: it's better to do fewer writes to the wire when possible, and delaying flush could allow us to coalesce this write with other outgoing frames. Since we're behaving this way, it's likely that users will assume this behavior will never change and they never have to Flush, which would lock us into the current behavior and prevent us from optimizating in the future.\r\n\r\nThis may be something we can change in a future release anyway, given that HTTP2 is only supported for GRPC in 3.0. I just want to ensure we aren't locking ourselves in to anything here.\r\n\r\n@stephentoub thoughts?","Url":"https://github.com/dotnet/corefx/issues/39181","RelatedDescription":"Open issue \"HTTP2: Does the user need to Flush on the request stream to guarantee that request data is sent?\" (#39181)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"464461207","IsPullRequest":false,"CreatedAt":"2019-07-05T04:56:32","Actor":"meziantou","Number":"36995","RawContent":null,"Title":"Quick fix for IDE0066 produce invalid code","State":"open","Body":"**Version Used**: \r\nVS2019 16.2.0 preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n            switch (num % 10)\r\n            {\r\n                case 1:\r\n                    return string.Format(formatProvider, \"{0}st\", num);\r\n                case 2:\r\n                    return string.Format(formatProvider, \"{0}nd\", num);\r\n                case 3:\r\n                    return string.Format(formatProvider, \"{0}rd\", num);\r\n                default:\r\n                    return string.Format(formatProvider, \"{0}th\", num);\r\n            }\r\n```\r\n\r\nthe quick fix suggests:\r\n\r\n````csharp\r\n            return num % 10 switch // Operator '%' cannot be applied to operands of type 'int' and 'string'\t\r\n            {\r\n                1 => string.Format(formatProvider, \"{0}st\", num),\r\n                2 => string.Format(formatProvider, \"{0}nd\", num),\r\n                3 => string.Format(formatProvider, \"{0}rd\", num),\r\n                _ => string.Format(formatProvider, \"{0}th\", num),\r\n            };\r\n````\r\n\r\nIt should add parentheses around the expression:\r\n\r\n````csharp\r\n            return (num % 10) switch\r\n            {\r\n                1 => string.Format(formatProvider, \"{0}st\", num),\r\n                2 => string.Format(formatProvider, \"{0}nd\", num),\r\n                3 => string.Format(formatProvider, \"{0}rd\", num),\r\n                _ => string.Format(formatProvider, \"{0}th\", num),\r\n            };\r\n````\r\n","Url":"https://github.com/dotnet/roslyn/issues/36995","RelatedDescription":"Open issue \"Quick fix for IDE0066 produce invalid code\" (#36995)"},{"Id":"464450411","IsPullRequest":true,"CreatedAt":"2019-07-05T03:55:35","Actor":"gnovack","Number":"36994","RawContent":null,"Title":"Make Field Readonly - Keep leading trivia","State":"open","Body":"This addresses #36759 by keeping leading trivia when removing the original node.","Url":"https://github.com/dotnet/roslyn/pull/36994","RelatedDescription":"Open PR \"Make Field Readonly - Keep leading trivia\" (#36994)"},{"Id":"464384117","IsPullRequest":true,"CreatedAt":"2019-07-04T20:08:57","Actor":"AdamSpeight2008","Number":"36993","RawContent":null,"Title":"Update VisualBasicExtensions.vb","State":"open","Body":" Instead of creating an new empty instance.","Url":"https://github.com/dotnet/roslyn/pull/36993","RelatedDescription":"Open PR \"Update VisualBasicExtensions.vb\" (#36993)"},{"Id":"464382763","IsPullRequest":false,"CreatedAt":"2019-07-04T20:01:34","Actor":"gafter","Number":"36992","RawContent":null,"Title":"Cannot evaluate expression involving enum nested in generic","State":"open","Body":"**Version Used**:  VS 2019 Int Preview 4.0 [29104.9.d16.2]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Compile the following code\r\n2. Run it to the indicated point in the debugger\r\n3. Evaluate the expression `h.Shade` in the Watch window\r\n\r\n``` c#\r\npublic class C\r\n{\r\n    public static void Main()\r\n    {\r\n        H h = new H();\r\n        ; // set breakpoint here and evaluate h.Shade\r\n    }\r\n}\r\n\r\npublic class G<T>\r\n{\r\n    public enum Color { Red, Green, Blue };\r\n    public Color Shade = Color.Green;\r\n}\r\n\r\npublic class H : G<int>\r\n{\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nDisplays `Color.Green`\r\n\r\n**Actual Behavior**:\r\nDisplays `The runtime is unable to evaluate this expression.`\r\n","Url":"https://github.com/dotnet/roslyn/issues/36992","RelatedDescription":"Open issue \"Cannot evaluate expression involving enum nested in generic\" (#36992)"},{"Id":"464323156","IsPullRequest":false,"CreatedAt":"2019-07-04T15:34:23","Actor":"sharwell","Number":"36991","RawContent":null,"Title":"ETL files captured by the feedback tool should report Find Usages operations","State":"open","Body":"We need to be able to identify out-of-process Find Usages operations in performance traces submitted by users.\r\n\r\n* Required: an event when a Find Usages operation is started\r\n* Encouraged: an event when a Find Usages operation is ended\r\n    * Status (completed or cancelled)\r\n    * Size (number of results)\r\n    * Time\r\n\r\n📝 This is related to, but not necessarily a duplicated of, https://github.com/microsoft/vs-streamjsonrpc/issues/277. If that issue provides access to the same information, it could be implemented instead of this one.","Url":"https://github.com/dotnet/roslyn/issues/36991","RelatedDescription":"Open issue \"ETL files captured by the feedback tool should report Find Usages operations\" (#36991)"},{"Id":"464309967","IsPullRequest":false,"CreatedAt":"2019-07-04T15:00:27","Actor":"pebezo","Number":"36990","RawContent":null,"Title":"Nullability analysis when the checks are made through a function call","State":"open","Body":"**Version Used**: VS2019 16.1.5 + C# Tool 3.1.1-beta4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class Something\r\n{\r\n    public void Do()\r\n    {\r\n        var foo1 = new Foo();\r\n\r\n        if (foo1.Value is null) throw new Exception();\r\n        \r\n        string notNull1 = foo1.Value; // No warnings\r\n\r\n        var foo2 = new Foo();\r\n\r\n        Check(foo2);\r\n\r\n        string notNull2 = foo2.Value; // CS8600 even though Check() made sure .Value is not null\r\n    }\r\n\r\n    public void Check(Foo foo)\r\n    {\r\n        if (foo.Value is null) throw new Exception();\r\n    }\r\n\r\n    public class Foo\r\n    {\r\n        public string? Value;\r\n    }\r\n}\r\n```\r\n\r\n1. I use the sample/repro above in a project that has the null analysis enabled and uses the latest C# version\r\n\r\n**Expected Behavior**:\r\n\r\nI'd expect the null-check being in-line (this works) or through a function call not to matter. This is a common pattern where the validation is handled by a separate function.\r\n\r\n**Actual Behavior**:\r\n\r\nNull checking works if done inline, but it does not when done through a function call.","Url":"https://github.com/dotnet/roslyn/issues/36990","RelatedDescription":"Open issue \"Nullability analysis when the checks are made through a function call\" (#36990)"},{"Id":"464229239","IsPullRequest":true,"CreatedAt":"2019-07-04T14:00:19","Actor":"dotnet-bot","Number":"36987","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36987","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#36987)"},{"Id":"464229354","IsPullRequest":true,"CreatedAt":"2019-07-04T14:00:08","Actor":"dotnet-bot","Number":"36988","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36988","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#36988)"},{"Id":"464263690","IsPullRequest":false,"CreatedAt":"2019-07-04T13:20:21","Actor":"Kunze","Number":"36989","RawContent":null,"Title":"Evaluate lamdba expressions with dynamic input","State":"open","Body":"**Version Used**: 3.1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n\r\n```\r\nvar anon = new { Name = \"my name\" };\r\nvar get = \"x => x.Name\";\r\nvar options = ScriptOptions.Default.AddReferences(\"System.Dynamic\");\r\nvar function = await CSharpScript.EvaluateAsync<Func<dynamic, object>>(get, options);\r\nvar result = function(anon);\r\n```\r\n\r\n**Expected Behavior**:\r\nresult should has the value \"my name\"\r\n\r\n**Actual Behavior**:\r\nCS1061: 'object' does not contain a definition for 'Name' and no extension method 'Name' accepting a first argument of type 'object' could be found (are you missing a using directive or an assembly reference?)","Url":"https://github.com/dotnet/roslyn/issues/36989","RelatedDescription":"Open issue \"Evaluate lamdba expressions with dynamic input\" (#36989)"},{"Id":"464160731","IsPullRequest":false,"CreatedAt":"2019-07-04T09:23:08","Actor":"JamesNK","Number":"36986","RawContent":null,"Title":"MaybeNullAttribute not working","State":"open","Body":"I'm converting Newtonsoft.Json to use nullable types and I can't get `MaybeNullAttribute` to work. My remaining warnings are related to generic types.\r\n\r\nNote that I have many old targets so I'm using internal nullable attributes (located in NullableAttributes.cs). `NotNullAttribute` and `NotNullWhenAttribute` work fine, but I can't get `MaybeNullAttribute` to work. I've tried it in `System.Runtime.CompilerServices` and `System.Diagnostics.CodeAnalysis` namespaces with no result.\r\n\r\n**Version Used**: VS2019 + Microsoft.Net.Compilers.Toolset=3.2.0-beta3-final\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. git clone https://github.com/JamesNK/Newtonsoft.Json.git\r\n2. git checkout jamesnk/nullable-types\r\n3. Go to JsonConvert.DeserializeObject<T> method (JsonConvert.cs, line 787)\r\n\r\n**Expected Behavior**:\r\n\r\nThere should not be a nullable warning because `[return: MaybeNull]` is on the return type.\r\n\r\n**Actual Behavior**:\r\n\r\nThere is a warning casting `object?` to `T`.\r\n\r\n![image](https://user-images.githubusercontent.com/303201/60654957-0c03a700-9ea1-11e9-9d14-5feda0ca0877.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/36986","RelatedDescription":"Open issue \"MaybeNullAttribute not working\" (#36986)"},{"Id":"464058878","IsPullRequest":false,"CreatedAt":"2019-07-04T04:46:53","Actor":"TessenR","Number":"36985","RawContent":null,"Title":"Roslyn does not learn from deconstruction methods' annotations when they are called implicitly","State":"open","Body":"**Version Used**: \r\n\r\n```cs\r\nBranch master (21 Jun 2019)\r\nLatest commit 898bed by Heejae Chang:\r\nadded NFW to get some data on incremental parsing bug where source si� (#36620)\r\n\r\n* added NFW to get some data on incremental parsing bug where source size and tree size is different\r\n\r\n* more comments\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\npublic class C\r\n{\r\n    public void M1(C? c)\r\n    {\r\n      var (x, y) = c;\r\n      c.ToString();\r\n    }\r\n    \r\n    public void M2(C? c)\r\n    {\r\n      Ext.Deconstruct(c, out int x, out int y);\r\n      c.ToString();\r\n    }\r\n}\r\n\r\nstatic class Ext\r\n{\r\n  public static extern void Deconstruct([NotNull] this C? c, out int x, out int y);\r\n}\r\n\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    public sealed class NotNullAttribute : Attribute\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nBoth methods have the same set of warnings because they are equivalent.\r\n\r\n**Actual Behavior**:\r\nThe first method has a warning `CS8602: Dereference of a possibly null reference.` for `c.ToString()`. The second method doesn't.\r\n\r\nIt looks like Roslyn does not learn from the `[NotNull]` annotation when deconstruct method is called implicitly.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36985","RelatedDescription":"Open issue \"Roslyn does not learn from deconstruction methods' annotations when they are called implicitly\" (#36985)"},{"Id":"464058639","IsPullRequest":false,"CreatedAt":"2019-07-04T04:45:49","Actor":"davidwengier","Number":"36984","RawContent":null,"Title":"Code Cleanup doesn't respect dotnet_separate_import_directive_groups","State":"open","Body":"**Version Used**: \r\n\r\nVisualStudio.16.IntStage/16.2.0-pre.4.0+29101.197.d16.2stg\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a .NET Core console app with the following files:\r\n\r\n.editorconfig\r\n```\r\ndotnet_separate_import_directive_groups = true\r\n```\r\n\r\nProgram.cs\r\n```\r\nusing Microsoft.CSharp.RuntimeBinder;\r\nusing System;\r\n\r\nnamespace ConsoleApp47\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            new RuntimeBinderException();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. Run Code Cleanup with a profile that includes \"Sort usings\"\r\n\r\n**Expected Behavior**:\r\n\r\nUsings should have a blank line between them.\r\n\r\n**Actual Behavior**:\r\n\r\nNo change.\r\n\r\nNote that if you use the Remove and Sort Usings, or Sort Usings commands, they do correctly separate, and if you run Code Cleanup with them separated, they do not get recombined back together (which is correct behaviour).","Url":"https://github.com/dotnet/roslyn/issues/36984","RelatedDescription":"Open issue \"Code Cleanup doesn't respect dotnet_separate_import_directive_groups\" (#36984)"},{"Id":"464020172","IsPullRequest":false,"CreatedAt":"2019-07-04T01:42:21","Actor":"jasonmalinowski","Number":"36983","RawContent":null,"Title":"Semantic model says calling an oblivious method is non-null","State":"open","Body":"![image](https://user-images.githubusercontent.com/201340/60634018-20bd3d80-9dc2-11e9-914a-e46b8693d3b7.png)\r\n\r\n**Expected:** there is no message in quick info, since the flow state would be oblivious\r\n**Actual:** we get a message, which implies that GetTypeInfo returned non-null as the flow state","Url":"https://github.com/dotnet/roslyn/issues/36983","RelatedDescription":"Open issue \"Semantic model says calling an oblivious method is non-null\" (#36983)"},{"Id":"464017745","IsPullRequest":true,"CreatedAt":"2019-07-04T01:30:31","Actor":"jasonmalinowski","Number":"36982","RawContent":null,"Title":"Fix Solution.WithDocumentFilePath not updating the file path of the tree","State":"open","Body":"DocumentState.UpdateFilePath was still passing in the old attributes when producing a new tree source -- oops!","Url":"https://github.com/dotnet/roslyn/pull/36982","RelatedDescription":"Open PR \"Fix Solution.WithDocumentFilePath not updating the file path of the tree\" (#36982)"},{"Id":"464015708","IsPullRequest":false,"CreatedAt":"2019-07-04T01:20:35","Actor":"tmat","Number":"36981","RawContent":null,"Title":"Enable compiler EnC tests on Core","State":"open","Body":"Remove\r\n`[ConditionalFact(typeof(WindowsDesktopOnly), Reason = ConditionalSkipReason.EditAndContinueRequiresDesktop)]`","Url":"https://github.com/dotnet/roslyn/issues/36981","RelatedDescription":"Open issue \"Enable compiler EnC tests on Core\" (#36981)"},{"Id":"464014351","IsPullRequest":false,"CreatedAt":"2019-07-04T01:14:44","Actor":"tmat","Number":"36980","RawContent":null,"Title":"Working on compiler code in Roslyn.sln is slow","State":"open","Body":"Repro:\r\n\r\nOpen Roslyn.sln and work in compiler code base for a bit. VS gets very slow and unresponsive after a while.","Url":"https://github.com/dotnet/roslyn/issues/36980","RelatedDescription":"Open issue \"Working on compiler code in Roslyn.sln is slow\" (#36980)"},{"Id":"464000767","IsPullRequest":true,"CreatedAt":"2019-07-04T00:03:37","Actor":"fayrose","Number":"36979","RawContent":null,"Title":"Nullchecked Iterators + Error Messages","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/36979","RelatedDescription":"Open PR \"Nullchecked Iterators + Error Messages\" (#36979)"},{"Id":"463971505","IsPullRequest":true,"CreatedAt":"2019-07-04T00:00:11","Actor":"dotnet-bot","Number":"36967","RawContent":null,"Title":"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps\ngit reset --hard upstream/release/dev16.3-preview1-vs-deps\ngit merge upstream/release/dev16.3-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36967","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps\" (#36967)"},{"Id":"463996783","IsPullRequest":false,"CreatedAt":"2019-07-03T23:43:30","Actor":"TessenR","Number":"36978","RawContent":null,"Title":"Roslyn reports incorrect warnings about mismatching nullability of tuple components","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (21 Jun 2019)\r\nLatest commit 898bed by Heejae Chang:\r\nadded NFW to get some data on incremental parsing bug where source si� (#36620)\r\n\r\n* added NFW to get some data on incremental parsing bug where source size and tree size is different\r\n\r\n* more comments\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        (D?, D?) d = (null, null);\r\n        (C, C) c = d;\r\n        c.Item1.ToString();\r\n        c.Item2.ToString();\r\n    }\r\n}\r\n\r\nclass D { public static implicit operator C(D? d) => new C(); }\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings. The code does not have any problems and runs without exceptions.\r\n\r\n**Actual Behavior**:\r\n`warning CS8619: Nullability of reference types in value of type '(D?, D?)' doesn't match target type '(C, C)'.` is reported for the assignment `(C, C) c = d;`\r\n\r\n**Notes**\r\nThe warning doesn't make any sense because the implicit conversion operator explicitly declares that it converts nullable values of `D` to non-nullable values of `C`.\r\nThe same problem exists with explicit casts.\r\nIt looks like `ConversionsBase.ClassifyImplicitTupleConversion` and `ConversionsBase.ClassifyExplicitTupleConversion` ([source.roslyn.io](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Binder/Semantics/Conversions/ConversionsBase.cs,2008)) require components' original nullability to match even though it doesn't make sense in case user-defined operators are involved as they might change the components' nullability as in the example above\r\n","Url":"https://github.com/dotnet/roslyn/issues/36978","RelatedDescription":"Open issue \"Roslyn reports incorrect warnings about mismatching nullability of tuple components\" (#36978)"},{"Id":"463995003","IsPullRequest":false,"CreatedAt":"2019-07-03T23:34:46","Actor":"cston","Number":"36977","RawContent":null,"Title":"Avoid emitting NullablePublicOnlyAttribute when no other nullable attributes are emitted","State":"open","Body":"`NullablePublicOnlyAttribute` should not be emitted if there no `NullableAttribute` or `NullableContextAttribute` emitted.","Url":"https://github.com/dotnet/roslyn/issues/36977","RelatedDescription":"Open issue \"Avoid emitting NullablePublicOnlyAttribute when no other nullable attributes are emitted\" (#36977)"},{"Id":"463971582","IsPullRequest":true,"CreatedAt":"2019-07-03T23:30:17","Actor":"dotnet-bot","Number":"36969","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36969","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#36969)"},{"Id":"463971694","IsPullRequest":true,"CreatedAt":"2019-07-03T23:30:06","Actor":"dotnet-bot","Number":"36971","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36971","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#36971)"},{"Id":"463984050","IsPullRequest":true,"CreatedAt":"2019-07-03T22:46:48","Actor":"agocke","Number":"36976","RawContent":null,"Title":"Add netstandard to the exclusion list for the AnalyzerConsistencyChecker","State":"open","Body":"Fixes #36963","Url":"https://github.com/dotnet/roslyn/pull/36976","RelatedDescription":"Open PR \"Add netstandard to the exclusion list for the AnalyzerConsistencyChecker\" (#36976)"},{"Id":"463982774","IsPullRequest":true,"CreatedAt":"2019-07-03T22:41:50","Actor":"333fred","Number":"36975","RawContent":null,"Title":"Add nullability information to GetSymbolInfo for invocations.","State":"open","Body":"This will conflict with https://github.com/dotnet/roslyn/pull/36869, so I'll wait on that to be merged.\r\n\r\nThis PR adds a very simple cache for just BoundCalls, so calls to GetSymbolInfo involving them will return information including analyzed nullability. @dotnet/roslyn-compiler @chsienki for review.\r\nThis addresses a single case of https://github.com/dotnet/roslyn/issues/35031, but there will be more required.\r\n\r\nFYI @jasonmalinowski @ryzngard.","Url":"https://github.com/dotnet/roslyn/pull/36975","RelatedDescription":"Open PR \"Add nullability information to GetSymbolInfo for invocations.\" (#36975)"},{"Id":"463977674","IsPullRequest":false,"CreatedAt":"2019-07-03T22:21:35","Actor":"JamesNK","Number":"36974","RawContent":null,"Title":"Bug with params + attribute","State":"open","Body":"I came across this issue when updating Newtonsoft.Json to use nullable reference types.\r\n\r\n**Version Used**: VS16.2 preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. git clone https://github.com/JamesNK/Newtonsoft.Json.git\r\n2. git checkout jamesnk/nullable-types-attributebug\r\n3. Run JsonConverterConstructor_OverloadsWithBaseTypes test\r\n\r\n**Expected Behavior**:\r\n\r\nTest outputs `{\"Overload\":\"IList<string>\"}\"`\r\n\r\n**Actual Behavior**:\r\n\r\nTest outputs `{\"Overload\":\"object(System.Object[])\"}`\r\n\r\nThis is the problem:\r\n```cs\r\npublic class OverloadWithBaseType\r\n{\r\n    [JsonConverter(typeof(OverloadsJsonConverterer), new object[] { new string[] { \"a\", \"b\", \"c\" } })]\r\n    public int Overload { get; set; }\r\n}\r\n```\r\n\r\nInstead of the constructor getting `new object[] { new string[] { \"a\", \"b\", \"c\" } }` it is getting `new object[] { new object[] { new string[] { \"a\", \"b\", \"c\" } } }`\r\n\r\n![image](https://user-images.githubusercontent.com/303201/60627989-fa3fe680-9e43-11e9-9abb-5cdbb182374b.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/36974","RelatedDescription":"Open issue \"Bug with params + attribute\" (#36974)"},{"Id":"463976887","IsPullRequest":true,"CreatedAt":"2019-07-03T22:18:40","Actor":"jasonmalinowski","Number":"36973","RawContent":null,"Title":"Workaround IExperimentationService having a UI thread dependency","State":"open","Body":"Right now we are seeing deadlocks where MEF is trying to create the RoslynVisualStudioWorkspace on a background thread, and that deadlocks because the IExperimentationService it tries to use has a UI thread dependency. This breaks that specific cycle by avoiding using the IExperimentationService until on the UI thread -- we know we can't be asked for document options until we have documents, and that can't happen until we get projects. Thankfully, the creation of projects are still UI affinitized so we can initialize it there.","Url":"https://github.com/dotnet/roslyn/pull/36973","RelatedDescription":"Open PR \"Workaround IExperimentationService having a UI thread dependency\" (#36973)"},{"Id":"463975294","IsPullRequest":true,"CreatedAt":"2019-07-03T22:13:09","Actor":"chsienki","Number":"36972","RawContent":null,"Title":"Add type equality comparer to public API","State":"open","Body":"- Extend ITypeSymbol to have new equals overload\r\n- Implement that overload in CS/VB type symbols which defer to comparer\r\n- Add a new interface ITypeSymbolComparable that allows internal implementation-independent symbol comparison with a type kind\r\n- Update api and add tests","Url":"https://github.com/dotnet/roslyn/pull/36972","RelatedDescription":"Open PR \"Add type equality comparer to public API\" (#36972)"},{"Id":"463971676","IsPullRequest":true,"CreatedAt":"2019-07-03T22:00:41","Actor":"CyrusNajmabadi","Number":"36970","RawContent":null,"Title":"Store sqlite writes to an in-memory DB first.  Flush that db to disk at periodic intervals.","State":"open","Body":"From a conversation in gitter.im with @ericsink he helped me with the following idea: Instead of caching sqlite writes into .net memory, just write them to an in-memory sqlite db, and then periodically flush that in-memory db to disk.\r\n\r\nThis is similar to our existing approach, but makes things much simpler in terms of implementation.\r\n\r\nBackstory:\r\nWhen we moved to sqlite an early issue I ran into was that sqlite has issues with doing tons of tiny transactions.  These transactions have some fixed cost on them, and so if you're hammering the DB with them (which we are), then you can bottleneck and cause lots of backup as things try to get through.  All our features are insulated from teh actual underlying DB, and only get a key/value read/write store.  So all of them often just keep trying to dump lots of data into the db exacerbating the system.\r\n\r\nTo alleviate this problem i introduced an in-memory write-cache where we staged a lot of the incoming writes to then write out to disk twice-a-second, under a single transaction.  This improved perf roughly 50x, but came with a complexity cost.  Specifically, we needed to write the in memory cache, and we had to make sure that 'reads' of data that were in the write cache would see the latest 'writes' (even if they hadn't made it to disk).  \r\n\r\nThis new approach is much simpler:\r\n\r\n1. sqlite has the concept of sharable, in-memory dbs.  So this is a db that can contain data, that will only be held in memory, and can be used from many sql connections.  This is a prime location for all our writes to buffer into.  \r\n2. it's extremely simple and efficient to transfer data from the temp sqlite table to the on-disk table (and it can be done in a single transaction).  This avoids the need to have the data stay in *.net* memory. \r\n3. this will allow us in the future to move to more efficent Span/ReadOnlySpan variants.  We used to have to be async with how we cached writes and flushed them across threads.  Now we always just write thigns through to the write cache synchronously, and we 'read-through' the write-layer and the actual-disk layer synchronously as well.  This allows us to actually use spans as we don't have any unintentional display-classes that would be capturing spans.  \r\n4. because the in-memory-db and the disk-db have the same format, reading/writing is extremely simple.  There's no need for one of mechanisms to read/write from the memory cache and one for the disk-db.  The same queries/sql/etc. work uniformly over both.  \r\n","Url":"https://github.com/dotnet/roslyn/pull/36970","RelatedDescription":"Open PR \"Store sqlite writes to an in-memory DB first.  Flush that db to disk at periodic intervals.\" (#36970)"},{"Id":"463971541","IsPullRequest":true,"CreatedAt":"2019-07-03T22:00:15","Actor":"dotnet-bot","Number":"36968","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36968","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#36968)"},{"Id":"463971107","IsPullRequest":true,"CreatedAt":"2019-07-03T21:58:53","Actor":"dotnet-bot","Number":"36966","RawContent":null,"Title":"Merge release/dev16.3-preview1 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1 into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36966","RelatedDescription":"Open PR \"Merge release/dev16.3-preview1 to master\" (#36966)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"464418814","IsPullRequest":true,"CreatedAt":"2019-07-05T00:22:05","Actor":"mjsabby","Number":"7589","RawContent":null,"Title":"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment","State":"open","Body":"Brings https://github.com/dotnet/coreclr/pull/22776 into CoreRT.","Url":"https://github.com/dotnet/corert/pull/7589","RelatedDescription":"Open PR \"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment\" (#7589)"},{"Id":"464379081","IsPullRequest":true,"CreatedAt":"2019-07-04T19:57:45","Actor":"Suchiman","Number":"7588","RawContent":null,"Title":"Make CLRServices::GarbageCollect behave like CoreCLR's","State":"closed","Body":"fixes #7475","Url":"https://github.com/dotnet/corert/pull/7588","RelatedDescription":"Closed or merged PR \"Make CLRServices::GarbageCollect behave like CoreCLR's\" (#7588)"},{"Id":"463949789","IsPullRequest":true,"CreatedAt":"2019-07-04T19:50:37","Actor":"Suchiman","Number":"7587","RawContent":null,"Title":"Make fields readonly properties to avoid confusion, fixes #4811","State":"closed","Body":"fixes #4811","Url":"https://github.com/dotnet/corert/pull/7587","RelatedDescription":"Closed or merged PR \"Make fields readonly properties to avoid confusion, fixes #4811\" (#7587)"},{"Id":"462848807","IsPullRequest":true,"CreatedAt":"2019-07-04T06:14:46","Actor":"Suchiman","Number":"7573","RawContent":null,"Title":"Implement GC.AllocateUninitializedArray","State":"closed","Body":"fixes #5680\r\n\r\nInspired by https://github.com/dotnet/coreclr/blob/c81d3caee2cfd7a401429dea9709acc18064acdd/src/vm/gchelpers.cpp#L424-L591\r\nand https://github.com/dotnet/corert/blob/fcaa7ed872ea0befcb2a5c8bb5ba504f674f0df1/src/Native/Runtime/gcrhenv.cpp#L228-L294","Url":"https://github.com/dotnet/corert/pull/7573","RelatedDescription":"Closed or merged PR \"Implement GC.AllocateUninitializedArray\" (#7573)"},{"Id":"463452177","IsPullRequest":true,"CreatedAt":"2019-07-04T01:11:15","Actor":"nattress","Number":"7581","RawContent":null,"Title":"SuperIlc support for compiling from Crossgen .rsps","State":"closed","Body":"Adds `compile-crossgen-rsp` command to SuperIlc which takes a response file (or a folder full of them) from a Crossgen command and transposes the arguments so that SuperIlc can re-run Crossgen / CPAOT. If the response file came from another machine (build lab, partner), the --rewrite-old-path and --rewrite-new-path parameters allow switching out the beginnings of directory names.\r\n\r\nThe intent of this command is to allow compiling more complex workloads where dependencies are not conveniently in a single folder, and each response file may have different arguments it passes to crossgen. The set of crossgen parameters we parse is not complete and was enough for the scenario I needed this tool for.\r\n\r\nRefactored the `Command` classes into a folder. Also I was seeing frequent unhandled exceptions since TaskCanceledExceptions from tasks are wrapped in AggregateException objects. Fortunately filters make it easy to tell the difference and just eat the `TaskCanceledException`.","Url":"https://github.com/dotnet/corert/pull/7581","RelatedDescription":"Closed or merged PR \"SuperIlc support for compiling from Crossgen .rsps\" (#7581)"},{"Id":"463835483","IsPullRequest":true,"CreatedAt":"2019-07-03T20:22:39","Actor":"MichalStrehovsky","Number":"7585","RawContent":null,"Title":"Run CoreCLR tests in multimodule mode","State":"closed","Body":"This leg is currently taking 80 minutes to complete and that's quite a long time.","Url":"https://github.com/dotnet/corert/pull/7585","RelatedDescription":"Closed or merged PR \"Run CoreCLR tests in multimodule mode\" (#7585)"},{"Id":"463835743","IsPullRequest":true,"CreatedAt":"2019-07-03T18:15:57","Actor":"Dotnet-GitSync-Bot","Number":"7586","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7586","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7586)"},{"Id":"463792357","IsPullRequest":true,"CreatedAt":"2019-07-03T17:37:35","Actor":"MichalStrehovsky","Number":"7584","RawContent":null,"Title":"Prevent loading byref-like types with invalid layout","State":"closed","Body":"Port of dotnet/coreclr#25200.","Url":"https://github.com/dotnet/corert/pull/7584","RelatedDescription":"Closed or merged PR \"Prevent loading byref-like types with invalid layout\" (#7584)"},{"Id":"463792056","IsPullRequest":true,"CreatedAt":"2019-07-03T16:03:38","Actor":"MichalStrehovsky","Number":"7583","RawContent":null,"Title":"Allow CORINFO_BOX_THIS for primitives and enums","State":"closed","Body":"Port dotnet/coreclr#24644.","Url":"https://github.com/dotnet/corert/pull/7583","RelatedDescription":"Closed or merged PR \"Allow CORINFO_BOX_THIS for primitives and enums\" (#7583)"},{"Id":"463593271","IsPullRequest":true,"CreatedAt":"2019-07-03T13:39:58","Actor":"Dotnet-GitSync-Bot","Number":"7582","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7582","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7582)"},{"Id":"463227946","IsPullRequest":true,"CreatedAt":"2019-07-02T19:46:55","Actor":"jkotas","Number":"7578","RawContent":null,"Title":"Port https://github.com/dotnet/coreclr/pull/25531","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7578","RelatedDescription":"Closed or merged PR \"Port https://github.com/dotnet/coreclr/pull/25531\" (#7578)"},{"Id":"463249832","IsPullRequest":true,"CreatedAt":"2019-07-02T16:14:11","Actor":"jkotas","Number":"7580","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7580","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7580)"},{"Id":"463234533","IsPullRequest":true,"CreatedAt":"2019-07-02T14:57:56","Actor":"Dotnet-GitSync-Bot","Number":"7579","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7579","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7579)"},{"Id":"463136077","IsPullRequest":false,"CreatedAt":"2019-07-02T09:59:29","Actor":"MichalStrehovsky","Number":"7577","RawContent":null,"Title":"VectorArrayInit test fails intermittently","State":"open","Body":"```\r\n       F:\\workspace\\_work\\1\\s\\tests_downloaded\\CoreCLR\\JIT\\SIMD\\VectorArrayInit_r\\\\*.dll \r\n                0 file(s) copied.\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```\r\n\r\nSeen in #7574 and in one of the iterations of #7549 (I think).\r\n\r\nI tried to get a local repro, but wasn't successful so far.","Url":"https://github.com/dotnet/corert/issues/7577","RelatedDescription":"Open issue \"VectorArrayInit test fails intermittently\" (#7577)"},{"Id":"462832822","IsPullRequest":true,"CreatedAt":"2019-07-02T09:55:07","Actor":"Dotnet-GitSync-Bot","Number":"7571","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @safern @kouvel","Url":"https://github.com/dotnet/corert/pull/7571","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7571)"},{"Id":"463039704","IsPullRequest":true,"CreatedAt":"2019-07-02T08:04:12","Actor":"jkotas","Number":"7576","RawContent":null,"Title":"Account for target renames in .NET Core 3.0 SDK","State":"closed","Body":"Fixes #7575","Url":"https://github.com/dotnet/corert/pull/7576","RelatedDescription":"Closed or merged PR \"Account for target renames in .NET Core 3.0 SDK\" (#7576)"},{"Id":"462912400","IsPullRequest":false,"CreatedAt":"2019-07-02T08:04:12","Actor":"SomeAnon42","Number":"7575","RawContent":null,"Title":"dotnet publish seems broken when using Core 3.0 Preview 6 SDK","State":"closed","Body":"The behavior of ``dotnet publish -r %RID%`` (assuming the CoreRT package is referenced) has changed after upgrading to preview 6 of the SDK.\r\nHere's what the output looks like when using previous versions of the SDK (including the latest stable 2.2 SDK):\r\n```\r\n├── netcoreappX.X/\r\n    └── %RID%/\r\n        ├── <managed output>\r\n        └── publish/\r\n            ├── native/ \r\n            ├── App.exe (native)\r\n            ├── App.pdb (native)\r\n            ├── <app content>\r\n            └── <native dependencies>\r\n```\r\n↑ The ``publish`` directory contains the native executable, along with the app's content. No managed assemblies.\r\n\r\nAnd this is what the output looks like after installing preview 6:\r\n```\r\n├── netcoreappX.X/\r\n    ├── %RID%/\r\n    │   ├── publish/\r\n    │   |   ├── <managed publish> (incl. all of .NET runtime)\r\n    │   |   └── App.pdb (native, while App.exe is a CoreCLR runtime host)\r\n    │   └── <managed publish>\r\n    └── native/\r\n        ├── App.exe\r\n        └── App.pdb\r\n```\r\n↑ The managed *publish* output ends up in both ``%RID%`` and ``%RID%/publish`` (which seems like an SDK issue to me). The native binary is only found in the ``native`` directory, and the directory itself is in the wrong location. The native pdb ends up in both ``%framework%/%RID%/publish`` and ``%framework%/native``.","Url":"https://github.com/dotnet/corert/issues/7575","RelatedDescription":"Closed issue \"dotnet publish seems broken when using Core 3.0 Preview 6 SDK\" (#7575)"},{"Id":"462851015","IsPullRequest":true,"CreatedAt":"2019-07-01T22:34:37","Actor":"MichalStrehovsky","Number":"7574","RawContent":null,"Title":"Initialize YieldProcessor critical section before finalizer thread","State":"closed","Body":"Finalizer thread was racing with the initialization.\r\n\r\nFixes #7572.","Url":"https://github.com/dotnet/corert/pull/7574","RelatedDescription":"Closed or merged PR \"Initialize YieldProcessor critical section before finalizer thread\" (#7574)"},{"Id":"462838415","IsPullRequest":false,"CreatedAt":"2019-07-01T22:34:37","Actor":"Suchiman","Number":"7572","RawContent":null,"Title":"AccessViolation in InitializeYieldProcessorNormalized","State":"closed","Body":"@MichalStrehovsky \r\n![2019-07-01_19-54-48](https://user-images.githubusercontent.com/7110884/60456731-5f27f080-9c3a-11e9-951d-c42d5d5b44a3.png)\r\n![devenv_2019-07-01_19-53-47](https://user-images.githubusercontent.com/7110884/60456734-60f1b400-9c3a-11e9-94a0-0e7d4c31d174.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7572","RelatedDescription":"Closed issue \"AccessViolation in InitializeYieldProcessorNormalized\" (#7572)"},{"Id":"462317380","IsPullRequest":true,"CreatedAt":"2019-07-01T05:16:49","Actor":"MichalStrehovsky","Number":"7567","RawContent":null,"Title":"Implement LayoutClass/LayoutClassPtr/AsAny marshalers","State":"closed","Body":"This is a couple marshallers that nobody should be using for anything, but WinForms and System.Drawing uses them for everything. Frankly, it feels like the designers of .NET 1.0 got too excited about marshalling everything with these and someone should have stopped them.\r\n\r\nThese marshallers are for marshalling abritrary reference types to native code. See the test cases in this pull request for some samples. But please don't take ideas from it.\r\n\r\nThis is enough to get basic WinForms apps running. E.g. the MatchingGame .NET Sample works with this. Serious WinForms apps will eventually hit missing COM support, but at least the basics work now and it's enough to get a read on things like startup time.","Url":"https://github.com/dotnet/corert/pull/7567","RelatedDescription":"Closed or merged PR \"Implement LayoutClass/LayoutClassPtr/AsAny marshalers\" (#7567)"},{"Id":"462343022","IsPullRequest":true,"CreatedAt":"2019-07-01T05:16:17","Actor":"MichalStrehovsky","Number":"7569","RawContent":null,"Title":"Port normalized SpinWait from CoreCLR","State":"closed","Body":"This ports yieldprocessornormalized.cpp from CoreCLR to tune spin wait loops in the post-Skylake CPU world.\r\n\r\nThe first commit is literal copy of yieldprocessornormalized.cpp from CoreCLR that was then tweaked to build for Redhawk.\r\n\r\nI then replaced uses of YieldProcessor with the Skylake-aware compat shim.","Url":"https://github.com/dotnet/corert/pull/7569","RelatedDescription":"Closed or merged PR \"Port normalized SpinWait from CoreCLR\" (#7569)"},{"Id":"462399742","IsPullRequest":true,"CreatedAt":"2019-07-01T05:15:29","Actor":"MichalStrehovsky","Number":"7570","RawContent":null,"Title":"Use AssemblyLoadContext from shared partition","State":"closed","Body":"We were missing methods that got added for 3.0. The only LoadContext that works is the default one though.","Url":"https://github.com/dotnet/corert/pull/7570","RelatedDescription":"Closed or merged PR \"Use AssemblyLoadContext from shared partition\" (#7570)"},{"Id":"462318480","IsPullRequest":true,"CreatedAt":"2019-06-29T20:24:33","Actor":"MichalStrehovsky","Number":"7568","RawContent":null,"Title":"Fix GetTypeCode of metadata-only enums","State":"closed","Body":"Found this by accident. `underlyingType.TypeHandle.EETypePtr` would box the RuntimeTypeHandle and return EEType of the RuntimeTypeHandle type.\r\n\r\nWhat this code actually wanted to do is to get the EEType of the underlying type.","Url":"https://github.com/dotnet/corert/pull/7568","RelatedDescription":"Closed or merged PR \"Fix GetTypeCode of metadata-only enums\" (#7568)"},{"Id":"462288706","IsPullRequest":true,"CreatedAt":"2019-06-29T18:29:06","Actor":"MichalStrehovsky","Number":"7566","RawContent":null,"Title":"Implement obsolete `Marshal.Write*` APIs","State":"closed","Body":"Because bad APIs come in pairs.","Url":"https://github.com/dotnet/corert/pull/7566","RelatedDescription":"Closed or merged PR \"Implement obsolete `Marshal.Write*` APIs\" (#7566)"},{"Id":"462130373","IsPullRequest":true,"CreatedAt":"2019-06-28T22:19:01","Actor":"csnewman","Number":"7565","RawContent":null,"Title":"Remove extra bracket","State":"closed","Body":"Fixes arm building","Url":"https://github.com/dotnet/corert/pull/7565","RelatedDescription":"Closed or merged PR \"Remove extra bracket\" (#7565)"},{"Id":"461738560","IsPullRequest":false,"CreatedAt":"2019-06-28T20:45:36","Actor":"csnewman","Number":"7563","RawContent":null,"Title":"arm registers do not fit into unw_context_t","State":"closed","Body":"```\r\nIn file included from /home/csnewman/corert/src/Native/Runtime/unix/UnwindHelpers.cpp:22:\r\n/home/csnewman/corert/src/Native/Runtime/../libunwind/src/Registers.hpp:2328:3: error: static_assert failed \"arm registers do not fit into unw_context_t\"\r\n  static_assert((check_fit<Registers_arm, unw_context_t>::does_fit),\r\n  ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/csnewman/corert/src/Native/Runtime/../libunwind/src/Registers.hpp:2444:32: error: out-of-line definition of 'getRegisterLocation' does not match any\r\n      declaration in 'libunwind::Registers_arm'\r\ninline uint32_t Registers_arm::getRegisterLocation(int regNum) const {\r\n                               ^~~~~~~~~~~~~~~~~~~\r\n2 errors generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/UnwindHelpers.cpp.o] Error 1\r\n\r\n```","Url":"https://github.com/dotnet/corert/issues/7563","RelatedDescription":"Closed issue \"arm registers do not fit into unw_context_t\" (#7563)"},{"Id":"461791927","IsPullRequest":true,"CreatedAt":"2019-06-28T00:27:04","Actor":"jkotas","Number":"7564","RawContent":null,"Title":"Fix ARM build break","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7564","RelatedDescription":"Closed or merged PR \"Fix ARM build break\" (#7564)"},{"Id":"461402520","IsPullRequest":true,"CreatedAt":"2019-06-27T13:24:43","Actor":"jkotas","Number":"7561","RawContent":null,"Title":"Fix ETW GCEvents","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7561","RelatedDescription":"Closed or merged PR \"Fix ETW GCEvents\" (#7561)"},{"Id":"461406438","IsPullRequest":false,"CreatedAt":"2019-06-27T09:01:30","Actor":"OmerRaviv","Number":"7562","RawContent":null,"Title":"Document a way to use ILVerify to diagnose issues in IL Rewriting with CLR Profiling API","State":"open","Body":"I find that one of the biggest challenges in working with the CLR Profiling API is attempting to mitigate the risk that a bug in my IL-rewriting logic may produce invalid IL, which would in turn produce catastrophic results at runtime (ExecutionEngineException, InvalidProgramException, etc). \r\n\r\nI think it could be extremely helpful if profiler vendors had a documented way to run ILVerify/PEVerify on assemblies after preforming IL-rewriting / ReJIT. This method could be used as part of integration testing, and also as a very useful debugging aid.\r\n\r\n[Someone asked on stackoverflow](https://stackoverflow.com/questions/55793865/creating-a-pe-file-using-imetadataemitsave-tomemory-tostream) if this could be accomplished using `IMetadataEmit::SaveToStream`, but unfortunately that method would only write out the .NET module, not a complete PE that can then be fed to ILVerify/PEVerify.\r\n\r\nIf anyone has an idea how this could be accomplished, I’d be more than happy to attempt it, and then once I succeed, to open-source/document the approach.\r\n\r\n/cc  @noahfalk @davmason @jkotas ","Url":"https://github.com/dotnet/corert/issues/7562","RelatedDescription":"Open issue \"Document a way to use ILVerify to diagnose issues in IL Rewriting with CLR Profiling API\" (#7562)"},{"Id":"461341179","IsPullRequest":true,"CreatedAt":"2019-06-27T08:54:05","Actor":"Dotnet-GitSync-Bot","Number":"7560","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @stephentoub @jkotas","Url":"https://github.com/dotnet/corert/pull/7560","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7560)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"464463291","IsPullRequest":true,"CreatedAt":"2019-07-05T05:08:31","Actor":"drewnoakes","Number":"3399","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"open","Body":"(This is an alternative implementation of #3398.)\r\n\r\nDesign time builds are stopping if `ResolvePackageAssets` hits an error (dotnet/project-system#4992).\r\n\r\nThis PR uses the fact that design-time builds set the `ContinueOnError` property to `ErrorAndContinue`.\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3399","RelatedDescription":"Open PR \"Continue design time builds if resolving package assets fails\" (#3399)"},{"Id":"464416897","IsPullRequest":true,"CreatedAt":"2019-07-05T02:31:06","Actor":"dotnet-bot","Number":"3397","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3397","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3397)"},{"Id":"464419999","IsPullRequest":true,"CreatedAt":"2019-07-05T00:32:36","Actor":"drewnoakes","Number":"3398","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"open","Body":"Design time builds are stopping if `ResolvePackageAssets` hits an error (https://github.com/dotnet/project-system/issues/4992). This PR sets `ContinueOnError` on `ResolvePackageAssets` to `ErrorAndContinue` for design time builds only.\r\n\r\nWould the property be better defined in `Microsoft.NET.Sdk.props` with a more general name for broader use?\r\n\r\nAlternatively, should this logic piggyback off the `DesignTimeBuild` property of the task itself?\r\n\r\nhttps://github.com/dotnet/sdk/blob/adf76a594158a742e2c22b49b0fb4942cb53317d/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L153","Url":"https://github.com/dotnet/sdk/pull/3398","RelatedDescription":"Open PR \"Continue design time builds if resolving package assets fails\" (#3398)"},{"Id":"464066841","IsPullRequest":true,"CreatedAt":"2019-07-05T00:08:59","Actor":"drewnoakes","Number":"3395","RawContent":null,"Title":"Remove double computation of settings hash","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3395","RelatedDescription":"Closed or merged PR \"Remove double computation of settings hash\" (#3395)"},{"Id":"463915913","IsPullRequest":true,"CreatedAt":"2019-07-04T15:16:20","Actor":"dsplaisted","Number":"3392","RawContent":null,"Title":"Don't write the same framework multiple times to RuntimeConfig.json","State":"closed","Body":"Fix dotnet/cli#11709","Url":"https://github.com/dotnet/sdk/pull/3392","RelatedDescription":"Closed or merged PR \"Don't write the same framework multiple times to RuntimeConfig.json\" (#3392)"},{"Id":"464230214","IsPullRequest":true,"CreatedAt":"2019-07-04T12:04:34","Actor":"dotnet-maestro[bot]","Number":"3396","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3396","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3396)"},{"Id":"464024281","IsPullRequest":true,"CreatedAt":"2019-07-04T02:02:22","Actor":"MSLukeWest","Number":"3394","RawContent":null,"Title":"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds","State":"open","Body":"Since this output group is meant to be used by installer projects which deal exclusively with design time builds we need ResolveRuntimePackAssets to always run when building it.\r\n\r\nAlso updating tests for this output group to set DesignTimeBuild=true to more accurately simulate this scenario.","Url":"https://github.com/dotnet/sdk/pull/3394","RelatedDescription":"Open PR \"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds\" (#3394)"},{"Id":"464018687","IsPullRequest":true,"CreatedAt":"2019-07-04T01:35:13","Actor":"peterhuene","Number":"3393","RawContent":null,"Title":"Fix unhandled exception when RuntimeList.xml contains duplicates.","State":"open","Body":"This PR fixes an unhandled exception that results when RuntimeList.xml\r\ncontains entries that have the same destination subpath when resolving the\r\nruntime pack assets.  An error is now emitted instead of the unhandled\r\nexception.\r\n\r\nAdditionally, this fixes an unhandled exception that occurs when the\r\nRuntimeList.xml file is not present in the runtime pack that is caused by\r\nthe exception message not having a NETSDK prefix.\r\n\r\nAlso removed an unnecessary override of the `Execute` method for\r\n`GenerateDepsFile` task.  This override should have been removed with a\r\nprevious cleanup PR, but was overlooked.\r\n\r\nFixes dotnet/cli#11705.","Url":"https://github.com/dotnet/sdk/pull/3393","RelatedDescription":"Open PR \"Fix unhandled exception when RuntimeList.xml contains duplicates.\" (#3393)"},{"Id":"463190002","IsPullRequest":true,"CreatedAt":"2019-07-03T22:23:54","Actor":"dotnet-maestro[bot]","Number":"3385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3385)"},{"Id":"462854507","IsPullRequest":false,"CreatedAt":"2019-07-03T20:55:59","Actor":"AlexanderTaeschner","Number":"3380","RawContent":null,"Title":"Duplicated frameworks in runtimeconfig.json","State":"closed","Body":"Using .NET core version 3.0.100-preview7-012741 some generated ProjectName.runtimeconfig.json files contain duplicated entries for the frameworks, which lead to a direct crash at application start:\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27826-20\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\nwhich seems to be linked to the following entry in the build log:\r\n```\r\n5>      Task \"GenerateRuntimeConfigurationFiles\"\r\n5>        Task Parameter:AssetsFilePath=[...]\\obj\\project.assets.json\r\n5>        Task Parameter:TargetFrameworkMoniker=.NETCoreApp,Version=v3.0\r\n5>        Task Parameter:TargetFramework=netcoreapp3.0\r\n5>        Task Parameter:RuntimeConfigPath=[...].runtimeconfig.json\r\n5>        Task Parameter:RuntimeConfigDevPath=[...].runtimeconfig.dev.json\r\n5>        Task Parameter:\r\n5>            RuntimeFrameworks=\r\n5>                Microsoft.NETCore.App\r\n5>                        FrameworkName=Microsoft.NETCore.App\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App.WPF\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>                Microsoft.WindowsDesktop.App\r\n5>                        FrameworkName=Microsoft.WindowsDesktop.App.WindowsForms\r\n5>                        Version=3.0.0-preview7-27826-20\r\n5>        Task Parameter:UserRuntimeConfig=[...]/runtimeconfig.template.json\r\n5>        Task Parameter:AdditionalProbingPaths=[...]\\.dotnet\\store\\|arch|\\|tfm|\r\n5>        Task Parameter:IsSelfContained=False\r\n5>      Done executing task \"GenerateRuntimeConfigurationFiles\".\r\n```\r\nwhere three RuntimeFrameworks with the same name, but different FrameworkName are listed.\r\nWith preview 5 this problem did not appear.","Url":"https://github.com/dotnet/sdk/issues/3380","RelatedDescription":"Closed issue \"Duplicated frameworks in runtimeconfig.json\" (#3380)"},{"Id":"463386800","IsPullRequest":false,"CreatedAt":"2019-07-03T20:55:29","Actor":"crmann1","Number":"3388","RawContent":null,"Title":"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)","State":"closed","Body":"During a build of a project that has duplicate references where the duplicate reference is also a conflict the ResolvePackageFileConflicts task crashes with a null reference exception . \r\n\r\n\r\nC:\\Program   Files\\dotnet\\sdk\\3.0.100-preview7-012601\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets\r\n\r\nThe \"ResolvePackageFileConflicts\" task failed unexpectedly.System.NullReferenceException: Object reference not set to an instance of an object.   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.<>c.<ExecuteCore>b__44_0(ITaskItem r) in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()   at System.Collections.Generic.HashSet`1.UnionWith(IEnumerable`1 other)   at System.Collections.Generic.HashSet`1..ctor(IEnumerable`1 collection, IEqualityComparer`1 comparer)   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore() in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 47   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nThe reason is that in ResolvePackageFileConflicts.cs\r\n      var result = new ITaskItem[original.Length - conflicts.Count]; \r\n\r\nThe assumption is that the length of the result array is just the original list minus the conflict list. But if the original list has duplicates then the result array will be too large and will have null entries in it. \r\n\r\nFurther down that array is processed and fails \r\n\r\nvar referenceItemSpecs = new HashSet<string>(ReferencesWithoutConflicts?.Select(r => r.ItemSpec) ?? Enumerable.Empty<string>(),\r\n                                                                     StringComparer.OrdinalIgnoreCase);\r\n\r\nr=> r.ItemSpec fails because r is null due to the ReferenceWithoutConflicts enumeration containing a null item  due to the problem above.\r\n\r\nRepro for example is to have a file with the following reference items in it\r\n\r\n```\r\n <ItemGroup>\r\n    <Reference Include=\"System.Runtime\" />\r\n    <Reference Include=\"System.Runtime\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3388","RelatedDescription":"Closed issue \"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)\" (#3388)"},{"Id":"463798216","IsPullRequest":true,"CreatedAt":"2019-07-03T14:50:59","Actor":"rynowak","Number":"3391","RawContent":null,"Title":"Add build perf test for server-side Blazor template","State":"open","Body":"Adds performance coverage for Blazor, which interacts with the compiler\r\nand SDK differently from other ASP.NET Core templates.\r\n\r\nThis is currently a draft waiting for https://github.com/aspnet/AspNetCore/pull/11550/files to be merged and inserted - that PR renames the template. ","Url":"https://github.com/dotnet/sdk/pull/3391","RelatedDescription":"Open PR \"Add build perf test for server-side Blazor template\" (#3391)"},{"Id":"463496606","IsPullRequest":true,"CreatedAt":"2019-07-03T01:03:09","Actor":"dsplaisted","Number":"3390","RawContent":null,"Title":"Support automatic Link metadata for Page and Resource items","State":"open","Body":"Fix #2697 \r\n","Url":"https://github.com/dotnet/sdk/pull/3390","RelatedDescription":"Open PR \"Support automatic Link metadata for Page and Resource items\" (#3390)"},{"Id":"463478792","IsPullRequest":true,"CreatedAt":"2019-07-02T23:32:09","Actor":"dsplaisted","Number":"3389","RawContent":null,"Title":"Fix NullReferenceException in ResolvePackageFileConflicts","State":"open","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/941481","Url":"https://github.com/dotnet/sdk/pull/3389","RelatedDescription":"Open PR \"Fix NullReferenceException in ResolvePackageFileConflicts\" (#3389)"},{"Id":"463190351","IsPullRequest":true,"CreatedAt":"2019-07-02T14:31:35","Actor":"dotnet-bot","Number":"3386","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3386","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3386)"},{"Id":"462963954","IsPullRequest":true,"CreatedAt":"2019-07-02T03:30:51","Actor":"johnbeisner","Number":"3384","RawContent":null,"Title":"Branding update to \"preview8\"; SDK","State":"closed","Body":"Branding update to \"preview8\"; SDK","Url":"https://github.com/dotnet/sdk/pull/3384","RelatedDescription":"Closed or merged PR \"Branding update to \"preview8\"; SDK\" (#3384)"},{"Id":"462957863","IsPullRequest":true,"CreatedAt":"2019-07-02T03:30:22","Actor":"johnbeisner","Number":"3382","RawContent":null,"Title":"Merge master into release 3.0.1xx for preview7 - SDK","State":"closed","Body":"Merge master to release/3.0.1xx for preview7\r\nCommonly referred to as the 'snap'","Url":"https://github.com/dotnet/sdk/pull/3382","RelatedDescription":"Closed or merged PR \"Merge master into release 3.0.1xx for preview7 - SDK\" (#3382)"},{"Id":"462962755","IsPullRequest":false,"CreatedAt":"2019-07-02T00:12:33","Actor":"bergbria","Number":"3383","RawContent":null,"Title":"'dotnet publish --no-restore --runtime X' fails when multiple RuntimeIdentifers are listed in the project file","State":"open","Body":"## Repro\r\n1. Create a .csproj with multiple ````<RuntimeIdentifiers>```` (e.g.  ````<RuntimeIdentifiers>osx-x64;win-x64</RuntimeIdentifiers>````)\r\n2. `dotnet restore`\r\n3. `dotnet publish --no-restore  --runtime win-x64`\r\n\r\nThis will fail with \r\n>error NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file. \r\n\r\n## Automated repro\r\nDownload/unzip \r\n[publish_multi_rid.zip](https://github.com/dotnet/sdk/files/3347730/publish_multi_rid.zip) and run repro.bat\r\n\r\n## Additional context\r\n* Omitting  `--no-restore` will cause different package versions to be used than would be produced the by original `dotnet restore`. While being icky in general, this also causes breaks when NuGet lock files are used (e.g. https://github.com/NuGet/Home/issues/8287)\r\n* This seems vaguely related to #2682 ","Url":"https://github.com/dotnet/sdk/issues/3383","RelatedDescription":"Open issue \"'dotnet publish --no-restore --runtime X' fails when multiple RuntimeIdentifers are listed in the project file\" (#3383)"},{"Id":"462173177","IsPullRequest":true,"CreatedAt":"2019-07-01T23:35:51","Actor":"nugetlurker","Number":"3372","RawContent":null,"Title":"Insert NuGet Build 5.2.0-rtm.6067 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-rtm.6067 into sdk release/3.0.1xx branch","Url":"https://github.com/dotnet/sdk/pull/3372","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-rtm.6067 into sdk\" (#3372)"},{"Id":"462905459","IsPullRequest":true,"CreatedAt":"2019-07-01T23:23:02","Actor":"swaroop-sridhar","Number":"3381","RawContent":null,"Title":"SingleFile: Update a test with ni-pdbs","State":"closed","Body":"The test GivenThatWeWantToPublishASingleFileApp.It_excludes_ni_pdbs_from_single_file\r\nchecks for the fact that ni.pdb files are not bundled into the single-file by default.\r\n\r\nThis test was expecting only the `<app>.ni.pdb` file to exist in the publish directory.\r\nHowever, in recent versions of the build, mscorlib.ni.pdb is also found.\r\n\r\nThis commit changes the test to accomodate additional files in the publish directory.","Url":"https://github.com/dotnet/sdk/pull/3381","RelatedDescription":"Closed or merged PR \"SingleFile: Update a test with ni-pdbs\" (#3381)"},{"Id":"462676233","IsPullRequest":true,"CreatedAt":"2019-07-01T13:50:12","Actor":"dotnet-maestro[bot]","Number":"3378","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190630.1\r\n- **Date Produced**: 6/30/2019 12:52 PM\r\n- **Commit**: 89fab80685c91024c8f9e21f1c37f62580f648f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19330.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19330.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3378","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3378)"},{"Id":"462397761","IsPullRequest":true,"CreatedAt":"2019-07-01T01:24:56","Actor":"dotnet-maestro[bot]","Number":"3377","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190629.2\r\n- **Date Produced**: 6/29/2019 1:09 PM\r\n- **Commit**: 3ebba82f29f338a3cb14f4b3e1b6da0fd69be694\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19329.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19329.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3377)"},{"Id":"462296170","IsPullRequest":true,"CreatedAt":"2019-06-30T12:03:58","Actor":"dotnet-maestro[bot]","Number":"3374","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190628.2\r\n- **Date Produced**: 6/28/2019 7:25 PM\r\n- **Commit**: a68bcce61fa64598cbd30c00780b1f6ca8e7a9ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19328.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19328.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3374","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3374)"},{"Id":"462350708","IsPullRequest":false,"CreatedAt":"2019-06-29T23:25:42","Actor":"mattleibow","Number":"3376","RawContent":null,"Title":"MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages'.","State":"open","Body":"I am trying to use Ubuntu 18.04 to test some things, and I can use any of the newer .NET Core SDKs.\r\n\r\nI just installed a fresh VM with 18.04, and [installed my usual tools](https://gist.github.com/mattleibow/7e02a32193fb9bb14069bedb7384205e). I then try and build SkiaSharp, and then the .NET Standard projects and Tizen fail to build with the same error.\r\n\r\nI can roll back to dotnet-sdk-2.1.105, and that seems to work fine. As soon as I go later, then it fails. I tried installing a different version of dotnet 2.2, but I only have one for some reason. Sure, I could install it manually and all that. But, who wants to do that - and I am not even sure it is going to work.\r\n\r\nHere is my apt-search output: https://gist.github.com/mattleibow/935de7d22b24cfcf3ae9ab0c16b1908f\r\n\r\nWhat is the reason for these failures? My code was working - as it is building just fine with 2.1.105, and then I bump up just a fraction and boom?\r\n\r\nBuild Errors:\r\n\r\n```\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.NetStandard/SkiaSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) due to: Could not resolve type with token 01000025 from typeref (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35') assembly:NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:NuGet.Packaging.Core.PackageIdentity member:(null) [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.NetStandard/SkiaSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in <a7945d89c0ac41f8a1c76203a2991e34>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.NetStandard/SkiaSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.NetStandard/SkiaSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x001f6] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.NetStandard/SkiaSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.NetStandard/HarfBuzzSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) due to: Could not resolve type with token 01000025 from typeref (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35') assembly:NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:NuGet.Packaging.Core.PackageIdentity member:(null) [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.NetStandard/HarfBuzzSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in <a7945d89c0ac41f8a1c76203a2991e34>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.NetStandard/HarfBuzzSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.NetStandard/HarfBuzzSharp.NetStandard.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x001f6] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.NetStandard/HarfBuzzSharp.NetStandard.csproj]\r\n\r\n...\r\n\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.Tizen/SkiaSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) due to: Could not resolve type with token 01000025 from typeref (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35') assembly:NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:NuGet.Packaging.Core.PackageIdentity member:(null) [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.Tizen/SkiaSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in <a7945d89c0ac41f8a1c76203a2991e34>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.Tizen/SkiaSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.Tizen/SkiaSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x001f6] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/SkiaSharp.Tizen/SkiaSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.Tizen/HarfBuzzSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018: System.TypeLoadException: Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages' (12) due to: Could not resolve type with token 01000025 from typeref (expected class 'NuGet.Packaging.Core.PackageIdentity' in assembly 'NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35') assembly:NuGet.Packaging, Version=5.1.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:NuGet.Packaging.Core.PackageIdentity member:(null) [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.Tizen/HarfBuzzSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in <a7945d89c0ac41f8a1c76203a2991e34>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.Tizen/HarfBuzzSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00029] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.Tizen/HarfBuzzSharp.Tizen.csproj]\r\n/usr/share/dotnet/sdk/2.1.700/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask (Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) [0x001f6] in <58f0218f988743a48dd7c84cbe933f4e>:0  [/media/matthew/Projects/SkiaSharp/binding/HarfBuzzSharp.Tizen/HarfBuzzSharp.Tizen.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3376","RelatedDescription":"Open issue \"MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. Could not load type of field 'Microsoft.NET.Build.Tasks.DependencyContextBuilder:_filteredPackages'.\" (#3376)"},{"Id":"462344960","IsPullRequest":true,"CreatedAt":"2019-06-29T21:48:07","Actor":"fadimounir","Number":"3375","RawContent":null,"Title":"Disable R2R compilations for non-exe projects","State":"open","Body":"Fixes #3364","Url":"https://github.com/dotnet/sdk/pull/3375","RelatedDescription":"Open PR \"Disable R2R compilations for non-exe projects\" (#3375)"},{"Id":"462173148","IsPullRequest":true,"CreatedAt":"2019-06-29T00:54:45","Actor":"nugetlurker","Number":"3370","RawContent":null,"Title":"Insert NuGet Build 5.2.0-rtm.6067 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-rtm.6067 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3370","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-rtm.6067 into sdk\" (#3370)"},{"Id":"462173165","IsPullRequest":true,"CreatedAt":"2019-06-29T00:44:54","Actor":"nugetlurker","Number":"3371","RawContent":null,"Title":"Insert NuGet Build 5.2.0-rtm.6067 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-rtm.6067 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3371","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-rtm.6067 into sdk\" (#3371)"},{"Id":"462244182","IsPullRequest":true,"CreatedAt":"2019-06-29T00:07:02","Actor":"swaroop-sridhar","Number":"3373","RawContent":null,"Title":"Always publish the AppHost","State":"open","Body":"Always copy the AppHost from intermediate to publish directory in order to ensure that the sequence\r\n    dotnet publish /p:PublishSingleFile=true\r\n    dotnet publish /p:PublishSingleFile=false\r\nplaces the correct unbundled apphost in the publish directory.\r\n\r\nFixes #3337","Url":"https://github.com/dotnet/sdk/pull/3373","RelatedDescription":"Open PR \"Always publish the AppHost\" (#3373)"},{"Id":"462787366","IsPullRequest":false,"CreatedAt":"2019-06-09T03:00:01","Actor":"DualBrain","Number":"3379","RawContent":null,"Title":"VB.NET 'End' not available and odd error message.","State":"open","Body":"Start with a .NET Core 3.0 Console app and simply modify Sub Main.\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n     End '<--- I added this.\r\n  End Sub\r\nEnd Module\r\n\r\nBy all appearance, Visual Studio thinks things are just fine (no squiggles).  When I build, the build fails with the following error:\r\n\r\n\"BC37234: Unstructured exception handling is not supported in current project type.\"\r\n\r\nHuh?  How is 'End' part of unstructured exception handling?  Also, why wouldn't 'End' be supported for a console application on .NET Core?\r\n\r\nThanks.\r\n\r\nCC: @KathleenDollard, @cston ","Url":"https://github.com/dotnet/sdk/issues/3379","RelatedDescription":"Open issue \"VB.NET 'End' not available and odd error message.\" (#3379)"},{"Id":"463343691","IsPullRequest":false,"CreatedAt":"2019-05-30T19:40:42","Actor":"DualBrain","Number":"3387","RawContent":null,"Title":"VB.NET \"My\" not working as expected?","State":"open","Body":"@cston and @KathleenDollard,\r\n\r\nHere is an isolated example running on the most recent bits as far as I can tell (at least with regards to the Microsoft.VisualBasic side of things).\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Console.WriteLine(My.Computer.Name)\r\n    Console.WriteLine((New Microsoft.VisualBasic.Devices.ServerComputer).Name)\r\n    Console.WriteLine(System.Environment.MachineName)\r\n  End Sub\r\nEnd Module\r\n\r\nThe first line doesn’t work in .NET Core 3.0; however, the second and third lines do.  Playing with the same code in the full .NET Framework, all three lines work and when you jump to the reference for My.Computer.Name, it goes to Microsoft.VisualBasic.Devices.ServerComputer.Name.  I then jumped back over to the .NET Core source tree and that property simply returns System.Environment.MachineName.  One thing I find interesting about this is it’s not a 1:1 map… how does My.Computer.Name map to a property inside of an instantiated instance of Microsoft.VisualBasic.Devices.ServerComputer?  Some “magic” black-box stuff there?\r\n\r\nSo am I just missing something as far as how to \"light up\" the My side of things when working with a .NET Core 3.0 console project?  Or is there some additional work that still has to be done beyond the work that has taken place within the Microsoft.VisualBasic namespace?\r\n\r\n(BTW, @cston great work thus far!)\r\n\r\nThanks.\r\n\r\nCory Smith","Url":"https://github.com/dotnet/sdk/issues/3387","RelatedDescription":"Open issue \"VB.NET \"My\" not working as expected?\" (#3387)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1146463009100853249","CreatedAt":"2019-07-03T16:57:36+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":4,"RawContent":null},{"Id":"1146188625828147200","CreatedAt":"2019-07-02T22:47:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":2,"RawContent":null},{"Id":"1144288349022085120","CreatedAt":"2019-06-27T16:56:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":15,"FavoriteCount":1,"RawContent":null},{"Id":"1143896700047646727","CreatedAt":"2019-06-26T15:00:00+00:00","UserScreenname":"dotnet","Text":"Run samples and tutorials using Try .NET global tool \nhttps://t.co/xxmNIK7SVd https://t.co/yhtPGPTKds","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":31,"RawContent":null},{"Id":"1143254803008458753","CreatedAt":"2019-06-24T20:29:20+00:00","UserScreenname":"dotnet","Text":"Care about AI &amp; Machine Learning? Check out this interview with @zeeshantweets, who is a developer on #MLNET. https://t.co/NuaAjE4Kod","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1143242317358178304","CreatedAt":"2019-06-24T19:39:43+00:00","UserScreenname":"dotnet","Text":"#dotnetconf Call for papers is open! Are you interested in speaking about .NET at our annual, free, virtual event?… https://t.co/q9IU7uUg4d","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":166,"FavoriteCount":106,"RawContent":null},{"Id":"1142109925474107392","CreatedAt":"2019-06-21T16:40:00+00:00","UserScreenname":"dotnet","Text":"We get an update on the Blazor programming model in .NET Core 3 and beyond from @danroth27\nin this episode of On .N… https://t.co/VqA8j8IEcC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":19,"RawContent":null},{"Id":"1142092310009638912","CreatedAt":"2019-06-21T15:30:00+00:00","UserScreenname":"dotnet","Text":"The Evolving Infrastructure of .NET Core\n\nhttps://t.co/Gbt97muw4j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":23,"RawContent":null},{"Id":"1141752346860347394","CreatedAt":"2019-06-20T16:59:06+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":6,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-07-05T05:30:35.3179768Z","RunDurationInMilliseconds":15594}