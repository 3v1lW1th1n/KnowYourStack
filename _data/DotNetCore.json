{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7388698088","Type":"IssuesEvent","CreatedAt":"2018-03-16T04:23:12","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16194","RelatedDescription":"Closed issue \"Using string.create instead of stringbuilder in normalizing path \" (#16194) at dotnet/coreclr","RelatedBody":"```\r\n            StringBuilder builder = new StringBuilder(path.Length);\r\n\r\n            if (IsDirectorySeparator(path[start]))\r\n            {\r\n                start++;\r\n                builder.Append(DirectorySeparatorChar);\r\n            }\r\n\r\n            for (int i = start; i < path.Length; i++)\r\n            {\r\n                current = path[i];\r\n\r\n                // If we have a separator\r\n                if (IsDirectorySeparator(current))\r\n                {\r\n                    // If the next is a separator, skip adding this\r\n                    if (i + 1 < path.Length && IsDirectorySeparator(path[i + 1]))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    // Ensure it is the primary separator\r\n                    current = DirectorySeparatorChar;\r\n                }\r\n\r\n                builder.Append(current);\r\n            }\r\n\r\n            return builder.ToString();\r\n```\r\n\r\nCurrent Version is using stringBuilder to normalize the path whichi is highly inefficient, I suggest to use \r\nstring.create to improve this.\r\n\r\ncc @JeremyKuhne  @danmosemsft @jkotas \r\n"},{"Id":"7388695450","Type":"IssuesEvent","CreatedAt":"2018-03-16T04:21:53","Actor":"Petermarcu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16985","RelatedDescription":"Opened issue \"missing Microsoft.NET.CoreRuntime.1.1_1.1.25305.1\" (#16985) at dotnet/coreclr","RelatedBody":"@HppZ commented on [Thu Dec 14 2017](https://github.com/dotnet/core/issues/1163)\n\nneed to get sos.dll from this package because Windbg says versions of coreclr.dll and sos.dll does not match, so I need to find that sos.dll. and sos.dll does not exist in C:\\Program Files\\WindowsApps\\Microsoft.NET.CoreRuntime.1.1_1.1.25305.1_x64__8wekyb3d8bbwe\\ .\n\n---\n\n@richlander commented on [Thu Dec 14 2017](https://github.com/dotnet/core/issues/1163#issuecomment-351922984)\n\nPTAL @lt72 \n\n---\n\n@HppZ commented on [Sun Dec 17 2017](https://github.com/dotnet/core/issues/1163#issuecomment-352305201)\n\n @lt72 I need your help, Thanks.\n\n---\n\n@lt72 commented on [Tue Dec 19 2017](https://github.com/dotnet/core/issues/1163#issuecomment-352872512)\n\n@mikem8361 PTAL\n\n"},{"Id":"7388681952","Type":"PullRequestEvent","CreatedAt":"2018-03-16T04:15:38","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16984","RelatedDescription":"Opened pull request \"Avoid allocating _IOCompletionCallback when flow is suppressed\" (#16984) at dotnet/coreclr","RelatedBody":"This delegate was showing up in a sockets allocation trace, even though execution flow is suppressed while creating the associated PreAllocatedOverlapped.\r\n\r\ncc: @kouvel, @geoffkizer "},{"Id":"7388578423","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:33:37","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16970","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview2-26315-05, preview2-26316-01, respectively (master)\" (#16970) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7388563966","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:28:06","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16983","RelatedDescription":"Opened pull request \"Change csharp_indent_labels from flush_left to one_less_than_current\" (#16983) at dotnet/coreclr","RelatedBody":"Most of the places where we use goto and labels (that I have come across) use one_less_than_current formatting pattern.\r\n\r\nRelated corefx PR https://github.com/dotnet/corefx/pull/28121\r\n\r\ncc @jkotas, @danmosemsft, @cod7alex, @karelz, @tannergooding, @stephentoub, @RussKeldorph "},{"Id":"7388510848","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:07:52","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16967","RelatedDescription":"Merged pull request \"Convert Sse2 tests to templated version - part 1\" (#16967) at dotnet/coreclr","RelatedBody":"This is first part of conversion work for Sse2 tests."},{"Id":"7388333367","Type":"IssuesEvent","CreatedAt":"2018-03-16T01:59:57","Actor":"manofstick","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16979","RelatedDescription":"Closed issue \"Span<double> significantly (3-4 times) worse than double[]\" (#16979) at dotnet/coreclr","RelatedBody":"Following some discussion [begun here](https://stackoverflow.com/questions/49308115/c-sharp-vectordouble-copyto-barely-faster-than-non-simd-version-and-bad-span), I have created a example where access to a `Span<double>` is 3 to 4 times worse than a `double[]` - unless I'm doing something stupid (which hey, is possible...)\r\n\r\n    using System;\r\n    using System.Diagnostics;\r\n    using System.Linq;\r\n\r\n    namespace ThisIsNotSoGood\r\n    {\r\n        class Program\r\n        {\r\n            public static void daxpy_naive1(double alpha, double[] x, double[] y)\r\n            {\r\n                for (var i = 0; i < x.Length; ++i)\r\n                    y[i] = y[i] + x[i] * alpha;\r\n            }\r\n\r\n            public static void daxpy_naive2(double alpha, double[] x, double[] y)\r\n            {\r\n                for (var i = 0; i < x.Length; ++i)\r\n                    y[i] += x[i] * alpha;\r\n            }\r\n\r\n            public static void daxpy_span1(double alpha, Span<double> x, Span<double> y)\r\n            {\r\n                for (var i = 0; i < x.Length; ++i)\r\n                    y[i] = y[i] + x[i] * alpha;\r\n            }\r\n\r\n            public static void daxpy_span2(double alpha, Span<double> x, Span<double> y)\r\n            {\r\n                for (var i = 0; i < x.Length; ++i)\r\n                    y[i] += x[i] * alpha;\r\n            }\r\n\r\n            static void RunSillyTest(string name, Action f, double[] b)\r\n            {\r\n                for (var ii = 0; ii < 1; ++ii)\r\n                {\r\n                    var total = 0.0;\r\n                    var sw = Stopwatch.StartNew();\r\n                    for (var i = 1; i <= 100000; ++i)\r\n                        f();\r\n                    var time = sw.ElapsedMilliseconds;\r\n                    total += b.Sum();\r\n                    Console.WriteLine($\"{name}: {time} (checksum={total})\");\r\n                }\r\n            }\r\n\r\n            static void Main(string[] args)\r\n            {\r\n                var r = new Random();\r\n                var a = Enumerable.Range(0, 10000).Select(i => r.NextDouble()).ToArray();\r\n                var b_orig = Enumerable.Range(0, a.Length).Select(i => r.NextDouble()).ToArray();\r\n\r\n                double[] b;\r\n\r\n                b = b_orig.ToArray();\r\n                RunSillyTest(\"daxpy_naive\", () => daxpy_naive1(0.001, a, b), b);\r\n\r\n                b = b_orig.ToArray();\r\n                RunSillyTest(\"daxpy_naive\", () => daxpy_naive2(0.001, a, b), b);\r\n\r\n                b = b_orig.ToArray();\r\n                RunSillyTest(\"daxpy_span1\", () => daxpy_span1(0.001, a, b), b);\r\n\r\n                b = b_orig.ToArray();\r\n                RunSillyTest(\"daxpy_span2\", () => daxpy_span2(0.001, a, b), b);\r\n            }\r\n        }\r\n    }\r\n\r\nAnd built, run with:\r\n\r\n    PS> dotnet --version\r\n    2.1.101\r\n    PS> dotnet build -c release\r\n        ...\r\n    PS> dotnet run -c release\r\n    daxpy_naive1: 728 (checksum=507359.418169168)\r\n    daxpy_naive2: 771 (checksum=507359.418169168)\r\n    daxpy_span1: 2633 (checksum=507359.418169168)\r\n    daxpy_span2: 2014 (checksum=507359.418169168)"},{"Id":"7388296744","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:45:56","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16981","RelatedDescription":"Opened pull request \"[Arm64/Ubuntu] Enable official builds\" (#16981) at dotnet/coreclr","RelatedBody":"The `ubuntu-16.04-cross-arm64-a3ae44b-20180315221921` image looks good\r\nI have built coreclr inside the container \r\n```\r\nROOTFS_DIR=/crossrootfs/arm64/ ./build.sh checked clang3.9 cross arm64\r\n```\r\n\r\nI think we can try to reenable this now.\r\n\r\n@mmitche @janvorli PTAL"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7388652606","Type":"IssuesEvent","CreatedAt":"2018-03-16T04:02:42","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8814","RelatedDescription":"Opened issue \"[Suggestion] nuget packages bring the code along, like npm\" (#8814) at dotnet/cli","RelatedBody":"@mhamri commented on [Fri Nov 10 2017](https://github.com/dotnet/core/issues/1074)\n\nthe fact that if a developer wants to do a change to a NuGet package he/she has to separately find the code in many different places like GitHub/CodePlex/google code, SourceForge, .... then do the changes, and create a new package for himself and also do a pull request, all of this is very troublesome. \r\n\r\nbecause day to day i am working with different programming languages, I see this benefit, if something doesn't work, the code is just one folder far from me (vendor folder in case of composer or node_module in case of npm, ...).  I saw many occasion that it leads to an instant pull request. on the other side, i saw .net developers if something doesn't work in a NuGet package, they try to find another package if that one also doesn't work they go and create their own code instead of fixing or contributing to that package. unfortunately, this behavior of NuGet that brings a ready to use black box, leads to have a less willing developer community to contribute. \r\n\r\nmy suggestion is to bring the code along the packages to a local nuget folder that is not hidden from the user (not like now that the packages folder is not part of the explorer window). on the first build the new package also will build along with the other code. if everything is good, then on subsequent builds those packages will be used. if not, the changed code inside the package will build along with the others code. \r\n\r\ni know it's a very hard to achieve task, but it's a game changer for the .net community. \n\n---\n\n@Petermarcu commented on [Fri Nov 10 2017](https://github.com/dotnet/core/issues/1074#issuecomment-343617491)\n\nIts a good suggestion and something that I think we'll want to do eventually. At least making source one step away where packages at least have a link to the source and there are CLI commands to easily get those packages, build them from source, and then use that build instead of the package. Its a little easier for non-compiled languages but its definitely a real scenario that would be nice.\n\n---\n\n@richlander commented on [Tue Nov 28 2017](https://github.com/dotnet/core/issues/1074#issuecomment-347775305)\n\nWould [SourceLink](https://github.com/ctaggart/SourceLink) work for you?\n\n"},{"Id":"7388453918","Type":"PullRequestEvent","CreatedAt":"2018-03-16T02:46:03","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8674","RelatedDescription":"Closed pull request \"WIP Add RestoreIgnoreFailedSource\" (#8674) at dotnet/cli","RelatedBody":"This is the fix for error in offline scenario. However, we had this opinion in \"--ignore-failed-sources\" in `dotnet restore`. Do you think we should add an opinion on dotnet install to let it pass through? @KathleenDollard \r\n\r\ni mean `dotnet install tool -g mytool --ignore-failed-sources` just like `dotnet restore --ignore-failed-sources`"},{"Id":"7388451697","Type":"PullRequestEvent","CreatedAt":"2018-03-16T02:45:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8794","RelatedDescription":"Merged pull request \"Update tool\" (#8794) at dotnet/cli","RelatedBody":"Need extra check:\r\n\r\n1. most of the parser logic is duplicated with install because we cannot reuse description\r\n2. no `--version` in update command because if version is lower than current it is just confusing.\r\n3. the way i resuse try catch logic from install and uninstall, not idea. But I believe they need to be shared since if we dup and forget to update UpdateCommand, there will be serious bug\r\n\r\nOther than string.replace \"install\" to \"update\" in most of the opinions. Here is several strings need to review.\r\n\r\nUpdate success with no version change\r\n`Tool '{0}' was successfully updated with no version change.`\r\n\r\nUpdate Succeeded\r\n`Tool '{0}' (from version '{1}' to version'{2}') was successfully updated.`\r\n\r\n@KathleenDollard "},{"Id":"7388275751","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:37:58","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8813","RelatedDescription":"Opened pull request \"Update dotnet/sdk to latest\" (#8813) at dotnet/cli","RelatedBody":"Includes fast ResolvePackageAssets\r\n"},{"Id":"7388272923","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:36:49","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8808","RelatedDescription":"Merged pull request \"Update SDK to 2.1.300-preview2-62715-07\" (#8808) at dotnet/cli","RelatedBody":"Has p2p pack fix\r\n\r\nhttps://github.com/dotnet/sdk/issues/2047"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7387185013","Type":"IssuesEvent","CreatedAt":"2018-03-15T20:30:55","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/679","RelatedDescription":"Opened issue \"Update standard build definitions to not use deprecated nuget publisher\" (#679) at dotnet/standard","RelatedBody":"The nuget publisher vsts task is deprecated and we need to use the newer one. As part of that we also need to be pulling the api-key from key vault instead of the vsts connection pool. "},{"Id":"7380383895","Type":"PullRequestEvent","CreatedAt":"2018-03-14T19:04:12","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/499","RelatedDescription":"Closed pull request \"Use target path in FileNode for trimming logic\" (#499) at dotnet/standard","RelatedBody":"This prevents problems caused by dlls with the same name but different\r\ndestination directories, such as satellite assemblies. Previously\r\nthese would cause a crash in the trimming logic by causing different\r\nfiles with the same name to be inserted into a dictionary.\r\n\r\nThe logic to compute the target path was taken from the SDK:\r\nhttps://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Common/src/ItemUtilities.cs#L117.\r\n\r\n@ericstj please review. Is there a better way to get the target path than duplicating code from the SDK?"},{"Id":"7380349165","Type":"PullRequestEvent","CreatedAt":"2018-03-14T18:57:21","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/674","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02612-03 (master)\" (#674) at dotnet/standard","RelatedBody":""},{"Id":"7380289958","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:46:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/664","RelatedDescription":"Closed issue \".Net How to get Table alias name from GetSchemaTable() Executing query \" (#664) at dotnet/standard","RelatedBody":"Hi All,\r\nI have one task to get the table alias name from the sql Query. Im tried with GetSchemaTable().\r\nstring query = \"select A.id as ParentId,B.id as ChildId from Parent A,ChildB\";\r\nsqlCnn.Open();\r\nsqlCmd = new SqlCommand(query, sqlCnn);\r\nsqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);\r\nDataTable schemaTable = sqlReader.GetSchemaTable();\r\n\r\nIt's not returning the table alias but it return the Column alias.\r\nCan you please help me how to get the table alias name from executing query .\r\nPlease give me a solution it.\r\n\r\nThanks,\r\nEzra"},{"Id":"7380282004","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:44:31","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/662","RelatedDescription":"Closed issue \"Standardizing XLIFF\" (#662) at dotnet/standard","RelatedBody":"I share @valdisiljuconoks this interest: https://github.com/Microsoft/XLIFF2-Object-Model/issues/28, and I think it's a good direction to support this standardized file format for a localization process.\r\n"},{"Id":"7380101883","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:11:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/678","RelatedDescription":"Opened issue \"Add private fields information to netstandard ref\" (#678) at dotnet/standard","RelatedBody":"See https://github.com/dotnet/corefx/issues/6185 we need to update the netstandard ref to include some information about the private fields in structs so the compiler can do its job. "},{"Id":"7380073830","Type":"PullRequestEvent","CreatedAt":"2018-03-14T18:06:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/672","RelatedDescription":"Merged pull request \"Update Xamarin platform APIs to latest Dev 15.7\" (#672) at dotnet/standard","RelatedBody":"Fixes https://github.com/mono/mono/issues/7496"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7388782064","Type":"IssuesEvent","CreatedAt":"2018-03-16T05:02:21","Actor":"joshfree","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28135","RelatedDescription":"Opened issue \"Why does HttpClient in Core allow GET requests with bodies, while Framework version does not?\" (#28135) at dotnet/corefx","RelatedBody":"_Opened on behalf of @IanKemp from https://github.com/dotnet/core/issues/1333_\r\n\r\n-------\r\n_@IanKemp writes -_ \r\nAs per the title, the `HttpClient` implementation between Core and Framework differs in this regard. Consider the following example:\r\n\r\n```csharp\r\nusing (var client = new HttpClient())\r\n{\r\n    var request = new HttpRequestMessage\r\n    {\r\n        RequestUri = new Uri(\"some url\"),\r\n        Method = HttpMethod.Get,\r\n    };\r\n\r\n    request.Content = new ByteArrayContent(Encoding.UTF8.GetBytes(\"some json\"));\r\n\r\n    request.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\r\n\r\n    var result = client.SendAsync(request).Result;\r\n    result.EnsureSuccessStatusCode();\r\n\r\n    var responseBody = await result.Content.ReadAsStringAsync().ConfigureAwait(false);\r\n}\r\n```\r\n\r\n* In .NET Core (tested with 1.0 and 2.0), the above executes successfully.\r\n* In .NET framework (tested with 4.7.1, 4.6.1, 4.5), the above throws a `ProtocolViolationException` with the message `Cannot send a content-body with this verb-type` on the `SendAsync` call.\r\n\r\nWhile I am very happy that Core allows this (technically correct, but unusual) request type, I am less happy that the Framework does not support it. Why does Core allow this why Framework does not? Is this intentional or an oversight? Is there somewhere where these differences/idiosyncrasies are documented?\r\n\r\n(For another example of differing HTTP behaviour in Core vs Framework, [see this issue](https://github.com/AngleSharp/AngleSharp/issues/607#issuecomment-345596448).)\r\n\r\n-----\r\n_@AppBeat writes -_\r\nInteresting. According to this post: https://stackoverflow.com/questions/978061/http-get-with-request-body\r\nstandard does not explicitly forbid this. GET body should be ignored by server.\r\n\r\n-----\r\n_@IanKemp writes -_\r\n@AppBeat The server is free to ignore or accept the body; that should not prevent the client from sending a request that the server may ignore. It is ultimately up to the client to determine whether the server accepts requests like this.\r\n\r\nA popular example of a product (server) that supports GET requests with bodies is Elasticsearch, [specifically their REST query API](https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html). In particular, the section on that page \"A GET Request with a Body?\" explains their rationale (but note that they do also allow POST as a fallback option for clients that do not support this).\r\n\r\n----\r\n_@AppBeat writes -_ \r\nI didn't say that this should be removed from .NET Core :) Although this is not common (bad?) practice I think .NET Core version in this case is more correct than .NET Framework implementation.\r\n\r\nI will try to test this on new managed implementation of SocketsHttpHandler which will probably be prefered HttpHandler in future for more consistent behaviour across all different platforms.\r\nhttps://github.com/dotnet/corefx/tree/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler\r\n\r\nI created new functional test for SocketsHttpHandler and it works as it should:\r\n\r\n```\r\n[Fact]\r\npublic async Task SendAsync_HttpGetWithPayload_Success()\r\n{\r\n    await LoopbackServer.CreateServerAsync(async (server, url) =>\r\n    {\r\n        string responseBody =\r\n            \"HTTP/1.1 200 OK\\r\\n\" +\r\n            $\"Date: {DateTimeOffset.UtcNow:R}\\r\\n\" +\r\n            \"Content-Length: 0\\r\\n\" +\r\n            \"Connection: close\\r\\n\" +\r\n            \"\\r\\n\";\r\n\r\n        using (HttpClient client = CreateHttpClient())\r\n        {\r\n            var request = new HttpRequestMessage\r\n            {\r\n                RequestUri = url,\r\n                Method = HttpMethod.Get,\r\n            };\r\n\r\n            request.Content = new StringContent(\"{}\", Encoding.UTF8, \"application/json\");\r\n            Task<HttpResponseMessage> getResponseTask = client.SendAsync(request);\r\n            await server.AcceptConnectionAsync(async connection =>\r\n            {\r\n                Task<List<string>> serverTask = connection.ReadRequestHeaderAndSendCustomResponseAsync(responseBody);\r\n                await TestHelper.WhenAllCompletedOrAnyFailed(getResponseTask, serverTask);\r\n            });\r\n\r\n            Assert.True(getResponseTask.IsCompletedSuccessfully);\r\n            var result = getResponseTask.Result;\r\n            Assert.True(result.IsSuccessStatusCode);\r\n        }\r\n    });\r\n}\r\n```"},{"Id":"7388777384","Type":"PullRequestEvent","CreatedAt":"2018-03-16T05:00:15","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28134","RelatedDescription":"Opened pull request \"Remove some low-hanging fruit allocations from SocketsHttpHandler connections\" (#28134) at dotnet/corefx","RelatedBody":"Most of these aren't actually in SocketsHttpHandler itself, but rather in System.Net.Security or System.Security.Cryptography.X509Certificates.  I took a memory allocation trace of creating a bunch of authenticated connections, and started eliminating some of the easier allocations. https://github.com/dotnet/coreclr/pull/16984 is part of this, as was https://github.com/dotnet/corefx/pull/28086 and https://github.com/dotnet/corefx/pull/28084, and https://github.com/dotnet/coreclr/issues/16982 is showing up as well.  There's still _a lot_ more there, but this is a start.  Reviewing commit by commit is probably easiest.\r\n\r\ncc: @geoffkizer, @bartonjs, @JeremyKuhne, @davidsh"},{"Id":"7388765634","Type":"IssuesEvent","CreatedAt":"2018-03-16T04:54:49","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28133","RelatedDescription":"Opened issue \"System.Net.Http.Functional.Tests Assertion Failed - We should only be here if cancellation was requested\" (#28133) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/pull/28080 on OSX.1013.Amd64.Open:Debug-x64\r\nhttps://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/be5aaa6aafd5a19086974af807cb66588586e825/workItem/System.Net.Http.Functional.Tests/wilogs\r\n\r\n```text\r\n2018-03-15 20:58:52,865: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.Ctor_ExpectedDefaultPropertyValues_UapPlatform [SKIP]\r\n2018-03-15 20:58:52,865: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsUap\\\"\r\n2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output: Assertion Failed\r\n2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output: We should only be here if cancellation was requested.\r\n2018-03-15 20:58:53,369: INFO: proc(54): run_and_log_output: Output: \r\n2018-03-15 20:58:53,370: INFO: proc(54): run_and_log_output: Output:    at System.Net.Http.CurlHandler.CurlResponseStream.<>c.<ReadAsync>b__30_1(Object s2) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.CurlResponseMessage.cs:line 344\r\n2018-03-15 20:58:53,370: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/147/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166\r\n2018-03-15 20:58:53,371: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440\r\n2018-03-15 20:58:53,371: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ThreadPoolWorkQueue.Dispatch() in /Users/buildagent/agent/_work/147/s/src/mscorlib/src/System/Threading/ThreadPool.cs:line 588\r\n2018-03-15 20:58:56,769: INFO: proc(54): run_and_log_output: Output: /Users/dotnet-bot/dotnetbuild/work/9bbf5ba5-b5a1-4f68-9dea-4a703567af54/Work/cb238724-1a11-4068-a19a-892967c9bc11/Unzip/RunTests.sh: line 87: 67860 Abort trap: 6           (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Net.Http.Functional.Tests.dll -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=OuterLoop -notrait category=failing\r\n2018-03-15 21:01:35,012: INFO: proc(54): run_and_log_output: Output: processing dump file /Users/dotnet-bot/dotnetbuild/work/9bbf5ba5-b5a1-4f68-9dea-4a703567af54/Work/cb238724-1a11-4068-a19a-892967c9bc11/Unzip/core.67860\r\n2018-03-15 21:01:35,013: INFO: proc(54): run_and_log_output: Output: creating dumpling dump f8701e01613c9f7a2232ed89cd62ac0334dce3fa\r\n```\r\n\r\n@davidsh, @wfurt, @stephentoub "},{"Id":"7388703628","Type":"IssuesEvent","CreatedAt":"2018-03-16T04:25:45","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28132","RelatedDescription":"Opened issue \"Get the .NET Core version number at runtime\" (#28132) at dotnet/corefx","RelatedBody":"@IvanFarkas commented on [Sat Jan 27 2018](https://github.com/dotnet/core/issues/1242)\n\nIs there a reliable way to get the **.NET Core version number** at runtime that works on **Nano Server** and **Ubuntu** **Docker** containers as well, please?\r\nI've seen some hacks deriving it from folder structure that breaks when the app is deployed onto Nano Server and Ubuntu Docker container images.\n\n"},{"Id":"7388581708","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:34:54","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28126","RelatedDescription":"Merged pull request \"Skip large arrays test on full framework\" (#28126) at dotnet/corefx","RelatedBody":"Fixes #28062."},{"Id":"7388581697","Type":"IssuesEvent","CreatedAt":"2018-03-16T03:34:54","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28062","RelatedDescription":"Closed issue \"Test failure: System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray\" (#28062) at dotnet/corefx","RelatedBody":"Opened on behalf of @danmosemsft\n\nThe test `System.MemoryTests.MemoryTests/OwnedMemoryPinLargeArray` has failed.\n\nSystem.OutOfMemoryException : Array dimensions exceeded supported range.\n\n        Stack Trace:\n\n           at System.MemoryTests.MemoryTests.OwnedMemoryPinLargeArray()\nBuild : Master - 20180314.02 (Full Framework Tests)\nFailing configurations:\n- Windows.10.Amd64-x86\n  - Release\n- Windows.10.Amd64-x64\n  - Release\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7388836223","Type":"PullRequestEvent","CreatedAt":"2018-03-16T05:25:49","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25517","RelatedDescription":"Opened pull request \"Add Regex Features to the IDE.\" (#25517) at dotnet/roslyn","RelatedBody":"This is a followup to https://github.com/dotnet/roslyn/pull/23984/   .  That PR adds the actual regex parser and corresponding tests.  This PR adds support in the IDE for features such as classification and squiggles.  It was broken out to make the PRs easier to review."},{"Id":"7388785916","Type":"PullRequestEvent","CreatedAt":"2018-03-16T05:04:04","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25484","RelatedDescription":null,"RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24956\r\nhttps://github.com/dotnet/roslyn/issues/24434\r\nhttps://github.com/dotnet/roslyn/issues/24094\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7388782876","Type":"PullRequestEvent","CreatedAt":"2018-03-16T05:02:41","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25484","RelatedDescription":"Closed pull request \"Use modern Tooltips API\" (#25484) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24956\r\nhttps://github.com/dotnet/roslyn/issues/24434\r\nhttps://github.com/dotnet/roslyn/issues/24094\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7388739687","Type":"PullRequestEvent","CreatedAt":"2018-03-16T04:42:35","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25516","RelatedDescription":"Opened pull request \"W warnings\" (#25516) at dotnet/roslyn","RelatedBody":"Note: First commit is #25411."},{"Id":"7388701904","Type":"PullRequestEvent","CreatedAt":"2018-03-16T04:24:59","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25515","RelatedDescription":"Opened pull request \"Update progress on C# 7.3\" (#25515) at dotnet/roslyn","RelatedBody":""},{"Id":"7388663874","Type":"PullRequestEvent","CreatedAt":"2018-03-16T04:07:21","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25490","RelatedDescription":"Merged pull request \"Merging feature \"tuple equality\" into dev15.7.x\" (#25490) at dotnet/roslyn","RelatedBody":"I'm planning one last commit to the `features/tuple-equality` branch (to add some tests from the feature review).\r\nI'm opening this PR early so that Aleksey can use it to check tests from the [list](https://github.com/dotnet/roslyn/issues/22937)."},{"Id":"7388631266","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:54:29","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25359","RelatedDescription":"Merged pull request \"Handle conversions in ConditionalOperator in NullableWalker\" (#25359) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7388207449","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:11:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5555","RelatedDescription":"Merged pull request \"Update main readme file\" (#5555) at dotnet/corert","RelatedBody":""},{"Id":"7388203527","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:10:27","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5555","RelatedDescription":"Opened pull request \"Update main readme file\" (#5555) at dotnet/corert","RelatedBody":""},{"Id":"7387069350","Type":"PullRequestEvent","CreatedAt":"2018-03-15T20:07:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5553","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5553) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7386426327","Type":"PullRequestEvent","CreatedAt":"2018-03-15T18:05:00","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5553","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5553) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7388669397","Type":"PullRequestEvent","CreatedAt":"2018-03-16T04:09:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2056","RelatedDescription":"Merged pull request \"Rename shim to correct filename Microsoft.NET.Sdk.FSharpTargetsShim.targets\" (#2056) at dotnet/sdk","RelatedBody":"@nguerrera , @livarcocc \r\n\r\nSorry about this, there was a typo in the filename in my last PR.\r\n\r\nThis fixes it amd addresses the issue here:  https://github.com/dotnet/cli/pull/8811"},{"Id":"7388542000","Type":"PullRequestEvent","CreatedAt":"2018-03-16T03:19:35","Actor":"KevinRansom","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2056","RelatedDescription":"Opened pull request \"Rename shim to correct filename Microsoft.NET.Sdk.FSharpTargetsShim.targets\" (#2056) at dotnet/sdk","RelatedBody":"@nguerrera , @livarcocc \r\n\r\nSorry about this, there was a typo in the filename in my last PR.\r\n\r\nThis fixes it amd addresses the issue here:  https://github.com/dotnet/cli/pull/8811"},{"Id":"7388340573","Type":"PullRequestEvent","CreatedAt":"2018-03-16T02:02:32","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2055","RelatedDescription":"Merged pull request \"Update build badge to new build definition\" (#2055) at dotnet/sdk","RelatedBody":""},{"Id":"7388269594","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:35:35","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2028","RelatedDescription":"Merged pull request \"Include SourceRevisionId in InformationalVersion\" (#2028) at dotnet/sdk","RelatedBody":"When a source control provider is available in the project append the value of SourceRevisionId set by the provider to InformationalVersion string.\r\n\r\nSee https://github.com/tmat/repository-info/blob/master/docs/Readme.md and https://github.com/Microsoft/msbuild/pull/3063 for details.\r\n\r\n"},{"Id":"7388224459","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:18:26","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2055","RelatedDescription":"Opened pull request \"Update build badge to new build definition\" (#2055) at dotnet/sdk","RelatedBody":""},{"Id":"7388204307","Type":"PullRequestEvent","CreatedAt":"2018-03-16T01:10:46","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2020","RelatedDescription":"Merged pull request \"Speed up incremental package asset resolution\" (#2020) at dotnet/sdk","RelatedBody":"Whenever project.assets.json changes (or more rarely, a setting influencing ResolvePackageAssets changes), write out a binary cache file for the next incremental build. The file has only the items that used by the build and they are written in a format that can be deserialized to MSBuild ITaskItem[] with minimal time and allocation. \r\n\r\nOn top of that, we merge ReportAssetsLogMessages into ResolvePackageAssets, which allows for project.assets.json to not be read at all if it has not changed.\r\n\r\nSome early measurement below using https://github.com/mikeharder/dotnet-cli-perf/tree/master/scenarios/web/large/core\r\n\r\nFirst observation, the total size of all assets.cache files is 5 MB vs. 37 MB for assets.json.\r\n\r\nI will send a private drop to our internal perf alias as wll.\r\n\r\n## Incremental build --no-restore /m:1\r\n```\r\nBefore \r\n      161 ms  JoinItems                                129 calls\r\n      176 ms  AssignProjectConfiguration               129 calls\r\n      264 ms  Copy                                     370 calls\r\n      318 ms  ResolvePackageFileConflicts              129 calls\r\n     1180 ms  ReportAssetsLogMessages                  129 calls\r\n     2873 ms  ResolvePackageAssets                     129 calls\r\n    23138 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:40.08\r\n    \r\nAfter\r\n      117 ms  JoinItems                                129 calls\r\n      127 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      136 ms  AssignProjectConfiguration               129 calls\r\n      150 ms  Message                                  388 calls\r\n      252 ms  ResolvePackageAssets                     129 calls\r\n      257 ms  ResolvePackageFileConflicts              129 calls\r\n      307 ms  Copy                                     370 calls\r\n    23261 ms  ResolveAssemblyReference                 129 calls\r\n\r\n    Time Elapsed 00:00:36.04\r\n```\r\n\r\nSaving 10% overall here and reducing ResolvePackageAssets+ReportAssetsLogMessage (now combined into ResolvePackageAssets) from ~4 seconds to ~250 milliseconds.\r\n\r\n## Incremental parallel build --no-restore\r\n```\r\nBefore\r\n      184 ms  Hash                                     258 calls\r\n      232 ms  JoinItems                                129 calls\r\n      240 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      299 ms  AssignProjectConfiguration               129 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      492 ms  Copy                                     370 calls\r\n     2654 ms  ReportAssetsLogMessages                  129 calls\r\n     5071 ms  ResolvePackageAssets                     129 calls\r\n    37575 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:19.72\r\n\r\nAfter\r\n      100 ms  ConvertToAbsolutePath                    129 calls\r\n      116 ms  ProduceContentAssets                     129 calls\r\n      157 ms  FindUnderPath                            645 calls\r\n      185 ms  Hash                                     258 calls\r\n      246 ms  JoinItems                                129 calls\r\n      329 ms  AssignProjectConfiguration               129 calls\r\n      447 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      502 ms  Copy                                     370 calls\r\n      612 ms  ResolvePackageAssets                     129 calls\r\n    38504 ms  ResolveAssemblyReference                 129 calls\r\n\r\n    Time Elapsed 00:00:18.54\r\n```\r\nOverall saving is less in parallel case, but time in   (ResolvePackageAssets + ReportAssetsLogMessage)  goes down from ~7.5 seconds to ~ 600 milliseconds.\r\n\r\nIt is interesting that just about every task is taking significantly more cumulative time when building in parallel. But, of course, some (most???) of the 7 seconds difference is being recuperated by parallelism.\r\n\r\n\r\n## Clean parallel build --no-restore (cleaned and restored beforehand)\r\n```\r\nBefore\r\n      168 ms  Hash                                     258 calls\r\n      270 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      301 ms  JoinItems                                129 calls\r\n      306 ms  MakeDir                                  129 calls\r\n      333 ms  AssignProjectConfiguration               129 calls\r\n      524 ms  ResolvePackageFileConflicts              129 calls\r\n      559 ms  WriteCodeFragment                        129 calls\r\n     1866 ms  WriteLinesToFile                         387 calls\r\n     3268 ms  ReportAssetsLogMessages                  129 calls\r\n     4616 ms  GenerateDepsFile                         129 calls\r\n     5577 ms  ResolvePackageAssets                     129 calls\r\n     6945 ms  Copy                                     370 calls\r\n    24787 ms  Csc                                      129 calls\r\n    41201 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:29.46\r\n    \r\nAfter\r\n      167 ms  Hash                                     258 calls\r\n      181 ms  FindUnderPath                            645 calls\r\n      234 ms  GetReferenceNearestTargetFrameworkTask   109 calls\r\n      270 ms  AssignProjectConfiguration               129 calls\r\n      294 ms  JoinItems                                129 calls\r\n      299 ms  MakeDir                                  129 calls\r\n      487 ms  ResolvePackageFileConflicts              129 calls\r\n      540 ms  WriteCodeFragment                        129 calls\r\n     1501 ms  WriteLinesToFile                         387 calls\r\n     4317 ms  GenerateDepsFile                         129 calls\r\n     6802 ms  Copy                                     370 calls\r\n     9715 ms  ResolvePackageAssets                     129 calls\r\n    26625 ms  Csc                                      129 calls\r\n    39653 ms  ResolveAssemblyReference                 129 calls\r\n    \r\n    Time Elapsed 00:00:30.44\r\n```\r\nThis case shows the *slowdown* of  (ResolvePackageAssets + ReportAssetsLogMessage)  from ~8.8 seconds to ~9.7 seconds in the first run of ResolvePackageAssets where the cache needs to be generated. I have some ideas on how to narrow this down significantly, but note that it does not impact the inner loop case where project.assets.json would not be changing between every build.\r\n\r\ncc @mikeharder @davkean @livarcocc @dsplaisted "},{"Id":"7388172999","Type":"IssuesEvent","CreatedAt":"2018-03-16T00:58:39","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2054","RelatedDescription":"Opened issue \"PreserveCompilationContext should not depend on reference assemblies installed in Program Files\" (#2054) at dotnet/sdk","RelatedBody":"We are working on making .NET Framework targeting packs available as NuGet packages, so projects targeting .NET Framework can be built on non-Windows (and so on Windows they don't necessarily need a global installation of the targeting pack).  A proposal for this is here: https://github.com/dotnet/designs/pull/33\r\n\r\nAs pointed out [here](https://github.com/dotnet/designs/pull/33#issuecomment-372760197), there is code used in `PreserveCompilationContext` scenarios (which Razor uses) which resolves the reference assemblies from the Program Files folder on Windows.  This code should be updated to work correctly if the targeting packs aren't installed there, but instead are coming from NuGet packages.  There is some discussion on #335 on how this code currently works and how it should work.\r\n\r\nFixing this will involve code in both dotnet/sdk and the [DependencyModel code](https://github.com/dotnet/core-setup/blob/3c802455b2d8d01470e064e7557bec6faccf496e/src/managed/Microsoft.Extensions.DependencyModel/Resolution/ReferenceAssemblyPathResolver.cs#L103) in dotnet/core-setup.\r\n\r\n"},{"Id":"7388165604","Type":"PullRequestEvent","CreatedAt":"2018-03-16T00:55:44","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2053","RelatedDescription":"Opened pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#2053) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"974414421245095936","CreatedAt":"2018-03-15T22:37:56+00:00","UserScreenname":"dotnet","Text":"Transport Layer Security (TLS) best practices with the .NET Framework article published https://t.co/SbAZXvK8n7 #security","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":78,"FavoriteCount":34,"RawContent":null},{"Id":"974274431127302145","CreatedAt":"2018-03-15T13:21:40+00:00","UserScreenname":"dotnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/WyBUY4oGYv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":6,"RawContent":null},{"Id":"974176533270036480","CreatedAt":"2018-03-15T06:52:39+00:00","UserScreenname":"dotnet","Text":"Exciting news! https://t.co/wgCtuUTXcr","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":67,"FavoriteCount":32,"RawContent":null}]}},"RunOn":"2018-03-16T05:30:20.2921607Z","RunDurationInMilliseconds":8233}