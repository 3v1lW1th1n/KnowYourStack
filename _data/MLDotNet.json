{"Data":{"GitHub":{"Issues":[{"Id":"385979997","IsPullRequest":true,"CreatedAt":"2018-11-30T00:01:22","Actor":"eerhardt","Number":"1786","RawContent":null,"Title":"Remove IRandom and replace with System.Random.","State":"open","Body":"Also make TauswortheHybrid internal/BestFriend.\r\n\r\nFix #1316\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1786","RelatedDescription":"Open PR \"Remove IRandom and replace with System.Random.\" (#1786)"},{"Id":"385926412","IsPullRequest":true,"CreatedAt":"2018-11-29T23:38:27","Actor":"abgoswam","Number":"1782","RawContent":null,"Title":"Add LDA example to Microsoft.ML.Samples","State":"closed","Body":"- Adding a LDA example to Microsoft.ML.Samples . This was a pending comment on #1410 ","Url":"https://github.com/dotnet/machinelearning/pull/1782","RelatedDescription":"Closed or merged PR \"Add LDA example to Microsoft.ML.Samples\" (#1782)"},{"Id":"385973073","IsPullRequest":true,"CreatedAt":"2018-11-29T23:32:51","Actor":"GalOshri","Number":"1785","RawContent":null,"Title":"Add release notes for ML.NET 0.8","State":"open","Body":"This adds release notes for ML.NET 0.8.","Url":"https://github.com/dotnet/machinelearning/pull/1785","RelatedDescription":"Open PR \"Add release notes for ML.NET 0.8\" (#1785)"},{"Id":"385952794","IsPullRequest":true,"CreatedAt":"2018-11-29T22:23:12","Actor":"artidoro","Number":"1784","RawContent":null,"Title":"Clean up of TextLoader constructor","State":"open","Body":"Fixes #1611.\r\n\r\n1. Hid the constructor of `TextLoader` that takes Arguments, and exposed `HasHeader` and `SeparatorChars` as non-advanced parameters. \r\n2. Made Create methods internal and modified the code accordingly. \r\n3. Added comments for the public facing constructor that was retained.","Url":"https://github.com/dotnet/machinelearning/pull/1784","RelatedDescription":"Open PR \"Clean up of TextLoader constructor\" (#1784)"},{"Id":"385530466","IsPullRequest":true,"CreatedAt":"2018-11-29T22:12:05","Actor":"vaeksare","Number":"1775","RawContent":null,"Title":"Add fixes to prevent potential build failures due to redist copying","State":"closed","Body":"Adds a new build script flag that allows specifying that certain RID agnostic files inside redist should not be built/executed. This is used to prevent the DNNImageFeaturizer models from being copied on each leg causing possible build failures. Instead, the copying only happens on Windows x64. Fixes #1775 ","Url":"https://github.com/dotnet/machinelearning/pull/1775","RelatedDescription":"Closed or merged PR \"Add fixes to prevent potential build failures due to redist copying\" (#1775)"},{"Id":"385940933","IsPullRequest":false,"CreatedAt":"2018-11-29T21:49:02","Actor":"sfilipi","Number":"1783","RawContent":null,"Title":"Change the <a> tags to <image> tags","State":"open","Body":"In the RankerMetrics the `<a>`  tags for images will need to get converted to `<image>` tags, so the images display. \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Evaluators/Metrics/RankerMetrics.cs#L23","Url":"https://github.com/dotnet/machinelearning/issues/1783","RelatedDescription":"Open issue \"Change the <a> tags to <image> tags\" (#1783)"},{"Id":"385549124","IsPullRequest":true,"CreatedAt":"2018-11-29T20:16:54","Actor":"Anipik","Number":"1777","RawContent":null,"Title":"Correcting Documentation, adding asserts and disabling failing ci tests","State":"closed","Body":"- Adding Some More Asserts\r\n- Correcting netcoreapp 3.0 documentation\r\n- Disabling\\correcting netcoreapp 3.0 tests \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1777","RelatedDescription":"Closed or merged PR \"Correcting Documentation, adding asserts and disabling failing ci tests\" (#1777)"},{"Id":"385900239","IsPullRequest":false,"CreatedAt":"2018-11-29T19:53:45","Actor":"daholste","Number":"1781","RawContent":null,"Title":"FastTree uses lots of memory with dropout on","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan FastTreeRegressor with DropoutRate > 0.\r\n\r\n- **What happened?**\r\nConsumed around 15 GB of memory. Memory usage increased linearly with # of trees\r\n\r\nRunning FastTreeRegressor with DropoutRate > 0 leads to much higher memory consumption than when DropoutRate = 0. It used approx 14 GB more for 200 trees, and ran into an out of memory exception for 500 trees. Perhaps there is a leak? (Turning on DropoutRate seemed to consistently cause memory footprint to rise significantly.)","Url":"https://github.com/dotnet/machinelearning/issues/1781","RelatedDescription":"Open issue \"FastTree uses lots of memory with dropout on\" (#1781)"},{"Id":"385859737","IsPullRequest":true,"CreatedAt":"2018-11-29T18:07:11","Actor":"wschin","Number":"1780","RawContent":null,"Title":"Remove auto-cache mechanism","State":"open","Body":"Fixes #1604.","Url":"https://github.com/dotnet/machinelearning/pull/1780","RelatedDescription":"Open PR \"Remove auto-cache mechanism\" (#1780)"},{"Id":"385749720","IsPullRequest":true,"CreatedAt":"2018-11-29T14:00:24","Actor":"Jungmaus","Number":"1779","RawContent":null,"Title":"Microsoft.ML.Api - Code cleaned and if else blocks improved","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1779","RelatedDescription":"Open PR \"Microsoft.ML.Api - Code cleaned and if else blocks improved\" (#1779)"},{"Id":"385558004","IsPullRequest":false,"CreatedAt":"2018-11-29T04:06:37","Actor":"markusweimer","Number":"1778","RawContent":null,"Title":"Consider adding convenience functions to load / save models from / to files","State":"closed","Body":"In order to load a model from disk, one currently has to do something like this:\r\n\r\n```cs\r\nITransformer trainedModel;\r\nusing (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n{\r\n  trainedModel = mlContext.Model.Load(stream);\r\n}\r\n```\r\n\r\n(Code taken from our sample [here](https://github.com/dotnet/machinelearning-samples/blob/ff0ae26e3bd2366c1fe55e8e8fbee17b4596cc61/samples/csharp/getting-started/BinaryClassification_SentimentAnalysis/SentimentAnalysis/SentimentAnalysisConsoleApp/Program.cs#L101)\r\n\r\nWe should consider adding convenience methods for this common case to allow for code like this:\r\n\r\n```cs\r\nITransformer trainedModel = mlContext.Model.LoadFromFile(ModelPath);\r\n```\r\n\r\nSimilarly, we could consider adding a convenience method to save to a file to allow for code like this:\r\n\r\n```cs\r\nmlContext.Model.SaveToFile(trainedModel, ModelPath);\r\n```\r\n\r\nOf course, we might also want the `*Async` variants thereof.","Url":"https://github.com/dotnet/machinelearning/issues/1778","RelatedDescription":"Closed issue \"Consider adding convenience functions to load / save models from / to files\" (#1778)"},{"Id":"385532361","IsPullRequest":false,"CreatedAt":"2018-11-29T01:48:19","Actor":"Anipik","Number":"1776","RawContent":null,"Title":"Extra Spaces in Baseline file for Netcoreapp3.0","State":"open","Body":"TestName EntryPointPipelineEnsembleGetSummary\r\n\r\nThe original baseline file contains ```\"Features.bare_nuclei\\t%Number%  \\t%Number% \\t%Number%  \\t%Number% ***\"```\r\nfile - machinelearning\\\\test\\\\BaselineOutput\\\\Common\\\\EntryPoints\\\\ensemble-summary.txt\"\r\n\r\nbaseline - \"Features.bare_nuclei\\t%Number%   \\t%Number% \\t%Number%  \\t%Number% ***\"\r\noutput -   \"Features.bare_nuclei\\t%Number%  \\t%Number% \\t%Number%  \\t%Number% ***\"\r\n\r\ncc @eerhardt @danmosemsft @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/1776","RelatedDescription":"Open issue \"Extra Spaces in Baseline file for Netcoreapp3.0\" (#1776)"},{"Id":"385529295","IsPullRequest":false,"CreatedAt":"2018-11-29T01:33:55","Actor":"Anipik","Number":"1774","RawContent":null,"Title":"Regression in Rff Code","State":"open","Body":"I ran a benchmark provided to me By @justinormont  that uses Rff Transformer.\r\nI ran it too on  master as well as on https://github.com/dotnet/machinelearning/commit/7d9660a3e3881e444f7a4212b175856aaa9bdbe0\r\nand https://github.com/dotnet/machinelearning/commit/8b19930c3413b578b1b9603633f0e9ec30cd8acd\r\n\r\nThe time taken by the benchmark for both of the last two commit was around 850 ms for both netstandard as well as netcoreapp 3.0 implementation where as it was around 1.3 sec for the master branch.\r\n\r\nI am working on adding the benchmark into the repo.\r\nThe rsp being used here is \r\n![image](https://user-images.githubusercontent.com/10516582/49246698-651ad200-f3ca-11e8-8f1e-4d4275a1aa98.png)\r\n\r\n\r\n\r\ncc @adamsitnik @eerhardt @danmosemsft @shauheen \r\n","Url":"https://github.com/dotnet/machinelearning/issues/1774","RelatedDescription":"Open issue \"Regression in Rff Code\" (#1774)"},{"Id":"385528888","IsPullRequest":false,"CreatedAt":"2018-11-29T01:31:53","Actor":"vaeksare","Number":"1773","RawContent":null,"Title":"Official build can fail due to copying of the same redist assets","State":"open","Body":"Currently, all of the files under Redist are assumed to be RID specific, and get built/executed by every leg of the official build script. This is not the case for the DNNImageFeaturizer models, which means the same models get copied over from each RID leg (MacOS, Linux, etc) into the same destination container. This can cause issues if this happens at the exact same time.","Url":"https://github.com/dotnet/machinelearning/issues/1773","RelatedDescription":"Open issue \"Official build can fail due to copying of the same redist assets\" (#1773)"},{"Id":"385523553","IsPullRequest":false,"CreatedAt":"2018-11-29T01:06:29","Actor":"yaeldekel","Number":"1772","RawContent":null,"Title":"GenericSpanSortHelper should have an overload that takes an IComparer","State":"open","Body":"This would enable sorting using a custom comparer, instead of the default CompareTo() method.","Url":"https://github.com/dotnet/machinelearning/issues/1772","RelatedDescription":"Open issue \"GenericSpanSortHelper should have an overload that takes an IComparer\" (#1772)"},{"Id":"385521137","IsPullRequest":false,"CreatedAt":"2018-11-29T00:56:06","Actor":"artidoro","Number":"1771","RawContent":null,"Title":"PFI should work for multi class classification, clustering and recommendation","State":"open","Body":"PFI currently only works for binary classification and regression. It should be extended to multi class classification, clustering and recommendation to provide explainability functionalities in other experiment categories.\r\n\r\nThe PFI approach works for all the above training scenarios, and it is natural for users that use the tool for binary classification/regression to also want to use it for other scenarios.\r\n\r\ncc: @rogancarr ","Url":"https://github.com/dotnet/machinelearning/issues/1771","RelatedDescription":"Open issue \"PFI should work for multi class classification, clustering and recommendation\" (#1771)"},{"Id":"385520391","IsPullRequest":false,"CreatedAt":"2018-11-29T00:52:24","Actor":"GalOshri","Number":"1770","RawContent":null,"Title":"MatrixFactorization cannot be found in the MLContext catalog","State":"open","Body":"`MatrixFactorization` cannot be found in the MLContext catalog. MLContext.Recommendation is currently empty. \r\n\r\nThis is with the 0.8.0-preview-27128-6 Microsoft.ML and Microsoft.ML.MatrixFactorization NuGets.","Url":"https://github.com/dotnet/machinelearning/issues/1770","RelatedDescription":"Open issue \"MatrixFactorization cannot be found in the MLContext catalog\" (#1770)"},{"Id":"385520367","IsPullRequest":false,"CreatedAt":"2018-11-29T00:52:17","Actor":"wschin","Number":"1769","RawContent":null,"Title":"Need example for one-class matrix factorization","State":"open","Body":"Currently we only have [one test](https://github.com/dotnet/machinelearning/blob/533e18647a77c31f8149ccf2618ccb2e354f8e62/test/Microsoft.ML.Tests/TrainerEstimators/MatrixFactorizationTests.cs#L376) as our example. We should add one into our sample project. Also, in that actual example, we need to tell user to install MatrixFactorization nuget. The ultimate scope of the new example is to cover everything user needs to do to run one-class matrix factorization.\r\n\r\nAlso, because of some settings in our test framework, our tests are not examples which can be run by copy-and-paste.","Url":"https://github.com/dotnet/machinelearning/issues/1769","RelatedDescription":"Open issue \"Need example for one-class matrix factorization\" (#1769)"},{"Id":"385517917","IsPullRequest":false,"CreatedAt":"2018-11-29T00:40:16","Actor":"wschin","Number":"1768","RawContent":null,"Title":"Need XML doc string for each public field","State":"open","Body":"At ML.NET doc site, there are a lot of fields with empty description, for example, see [this](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.matrixfactorizationtrainer.arguments?view=ml-dotnet). To make users' life easier, it'd be better to fill them with meaningful information.","Url":"https://github.com/dotnet/machinelearning/issues/1768","RelatedDescription":"Open issue \"Need XML doc string for each public field\" (#1768)"},{"Id":"385516350","IsPullRequest":false,"CreatedAt":"2018-11-29T00:32:48","Actor":"GalOshri","Number":"1767","RawContent":null,"Title":"Need sample/code snippet for how to read and write from IDV files ","State":"open","Body":"#1678 added the ability to save and load as binary (IDV) files. It would be useful to have a code snippet/sample to show how this can be done, with some remarks on why this is useful that show up in the docs website.","Url":"https://github.com/dotnet/machinelearning/issues/1767","RelatedDescription":"Open issue \"Need sample/code snippet for how to read and write from IDV files \" (#1767)"},{"Id":"385510457","IsPullRequest":false,"CreatedAt":"2018-11-29T00:05:37","Actor":"GalOshri","Number":"1766","RawContent":null,"Title":"Need PFI sample for binary classification","State":"open","Body":"This [PFI sample](https://github.com/dotnet/machinelearning/blob/3d33e20f33da70cdd3da2ad9e0b2b03df929bef4/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance.cs) has great detail, but it focuses on regression. Using PFI with binary classification requires a slightly different approach and it isn't immediately obvious how to do it. An additional sample explaining how to use PFI for binary classification would be quite helpful","Url":"https://github.com/dotnet/machinelearning/issues/1766","RelatedDescription":"Open issue \"Need PFI sample for binary classification\" (#1766)"},{"Id":"385510433","IsPullRequest":false,"CreatedAt":"2018-11-29T00:05:31","Actor":"rogancarr","Number":"1765","RawContent":null,"Title":"Feature Contribution Calculator Documentation is Vague","State":"open","Body":"The [documentation](https://github.com/dotnet/machinelearning/blob/533e18647a77c31f8149ccf2618ccb2e354f8e62/src/Microsoft.ML.Data/Scorers/FeatureContributionCalculationTransform.cs#L29) for the Feature Contribution Calculation Transform is rather vague. It should be updated to talk about the feature, why it is useful, and point to the corresponding example.","Url":"https://github.com/dotnet/machinelearning/issues/1765","RelatedDescription":"Open issue \"Feature Contribution Calculator Documentation is Vague\" (#1765)"},{"Id":"385508416","IsPullRequest":false,"CreatedAt":"2018-11-28T23:56:32","Actor":"rogancarr","Number":"1764","RawContent":null,"Title":"PFI BinaryClassification XML Documentation is Outdated","State":"open","Body":"The [sample documentation](https://github.com/dotnet/machinelearning/blob/533e18647a77c31f8149ccf2618ccb2e354f8e62/src/Microsoft.ML.Transforms/PermutationFeatureImportanceExtensions.cs#L86) for Binary Classification PFI is still the old text, while [regression documentation](https://github.com/dotnet/machinelearning/blob/533e18647a77c31f8149ccf2618ccb2e354f8e62/src/Microsoft.ML.Transforms/PermutationFeatureImportanceExtensions.cs#L14) is the new text. Let's update the binary classification documentation so that it's on par with the regression documentation.","Url":"https://github.com/dotnet/machinelearning/issues/1764","RelatedDescription":"Open issue \"PFI BinaryClassification XML Documentation is Outdated\" (#1764)"},{"Id":"385497612","IsPullRequest":false,"CreatedAt":"2018-11-28T23:12:43","Actor":"CESARDELATORRE","Number":"1763","RawContent":null,"Title":"Add a Filter for text-based columns","State":"open","Body":"Afaik, the new filter APIs can target just numeric-based columns, but not text-based columns.\r\nAs of v0.8 we have: \r\n1) \r\n```\r\n//FilterByColumn()\r\n\r\nIDataView trainingDataView = mlContext.Data.FilterByColumn(baseTrainingDataView, \"FareAmount\", lowerBound: 1, upperBound: 150);\r\n```\r\n\r\nThis is a very convenient filter, but for NUMERIC values. I’m currently using this for the sample code-snippet\r\n\r\n2)\r\n`FilterByKeyColumnFraction()`\r\nGood for hashed values.\r\n\r\nBut if we want to filter by text-based columns, let's say I want to remove the rows where a text based column has no value (this might be doable when transforming to numeric values, then missing value is NaN and it will get filtered, but you need an additional not straightforward step) or to **remove specific rows when categorical values are equal to \"some text\"**, I think we cannot do that, yet.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1763","RelatedDescription":"Open issue \"Add a Filter for text-based columns\" (#1763)"},{"Id":"385496527","IsPullRequest":true,"CreatedAt":"2018-11-28T23:08:38","Actor":"codemzs","Number":"1762","RawContent":null,"Title":"Sample for IID spike and changepoint detection using time series stateful prediction engine.","State":"open","Body":"Sample for IID spike and changepoint detection using time series stateful prediction engine. Fixes #978","Url":"https://github.com/dotnet/machinelearning/pull/1762","RelatedDescription":"Open PR \"Sample for IID spike and changepoint detection using time series stateful prediction engine.\" (#1762)"},{"Id":"385426882","IsPullRequest":true,"CreatedAt":"2018-11-28T23:06:12","Actor":"yaeldekel","Number":"1757","RawContent":null,"Title":"Fix bug in ApplyAt in VBufferUtils","State":"closed","Body":"When we create the editor, we lose the old values that were in the VBuffer in case it has to be resized.\r\nFixes #1756 .\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1757","RelatedDescription":"Closed or merged PR \"Fix bug in ApplyAt in VBufferUtils\" (#1757)"},{"Id":"385494229","IsPullRequest":false,"CreatedAt":"2018-11-28T23:00:33","Actor":"montebhoover","Number":"1761","RawContent":null,"Title":"Name of MakePredictionFunction is confusing (to me).","State":"open","Body":"I was following the start example in the Readme, and when I came to the line with MakePredictionFunction, I got a bit confused and had to go over it a few times before I could continue:\r\n\r\n> Now from the model we can make inferences (predictions):\r\n> \r\n> ```C#\r\n> var predictionFunc = model.MakePredictionFunction<SentimentData, SentimentPrediction>(mlContext);\r\n> var prediction = predictionFunc.Predict(new SentimentData\r\n> {\r\n>     SentimentText = \"Today is a great day!\"\r\n> });\r\n> Console.WriteLine(\"prediction: \" + prediction.Prediction);\r\n> ```\r\n\r\nI expected the return value of `MakePredictionFunction()` to a function-type thing, but instead it was an object.  This was hard for me not because of pedantic correctness, but rather from a usability standpoint as a beginner trying to keep my concepts straight (estimators, transformers, models, etc.) this took me a step back and I had to go over the section several times to make sure I hadn't missed something.\r\n\r\nIs there a better name that would be less confusing?\r\n- `MakePredictionObject()`\r\n- `MakePredictionEngine()`\r\n- `MakePredictor()`\r\n- ?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1761","RelatedDescription":"Open issue \"Name of MakePredictionFunction is confusing (to me).\" (#1761)"},{"Id":"385454643","IsPullRequest":false,"CreatedAt":"2018-11-28T21:00:05","Actor":"sfilipi","Number":"1760","RawContent":null,"Title":"The ColumnInfo structure should live in the estimators, rather than transformers","State":"open","Body":"For OneHotEncoding estimator/transformer, ColumnInfo lives in the estimator. \r\nFor most other pairs, ColumnInfo lives in the transformer. \r\n\r\nStandardize their location. \r\n\r\nI think they should live in the estimator, since they are mostly used on Estimator definition. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1760","RelatedDescription":"Open issue \"The ColumnInfo structure should live in the estimators, rather than transformers\" (#1760)"},{"Id":"385450412","IsPullRequest":true,"CreatedAt":"2018-11-28T20:48:23","Actor":"wschin","Number":"1759","RawContent":null,"Title":"Remove ISchematized interface from the codebase.","State":"open","Body":"1. Remove ISchematized\r\n2. For any class that requires a Schema, we add a Schema as its field\r\n3. Rename Schema to OutputSchema in IRowToRowMapper\r\n\r\nFixes #1502.","Url":"https://github.com/dotnet/machinelearning/pull/1759","RelatedDescription":"Open PR \"Remove ISchematized interface from the codebase.\" (#1759)"},{"Id":"385448660","IsPullRequest":false,"CreatedAt":"2018-11-28T20:43:18","Actor":"artidoro","Number":"1758","RawContent":null,"Title":"Arguments class should be made internal when possible","State":"open","Body":"For transformers like `SlotsDroppingTransformer`, and most other OneToOneTransformers, we implement a ColumnInfo object that allows to set all the transformation specific parameters. We should therefore make the Arguments class internal, as it is only used for the command line.","Url":"https://github.com/dotnet/machinelearning/issues/1758","RelatedDescription":"Open issue \"Arguments class should be made internal when possible\" (#1758)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-30T05:31:12.2440152Z","RunDurationInMilliseconds":1166}