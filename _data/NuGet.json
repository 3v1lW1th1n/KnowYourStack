{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10547305876","Type":"IssuesEvent","CreatedAt":"2019-10-03T00:30:53","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7597","RelatedDescription":"Closed issue \"Fix gallery nightly deployments\" (#7597) at NuGet/NuGetGallery","RelatedBody":"Update this: https://nuget.visualstudio.com/NuGetBuild/_git/NuGetBuild?path=%2FGalleryFunctionalConfig%2FDev.json&version=GBmaster&line=2&lineStyle=plain&lineEnd=3&lineStartColumn=1&lineEndColumn=1\r\n\r\nUsed by: https://github.com/NuGet/NuGetGallery/blob/23d3aeb8cc96f8038df5473f8392e543fb840a0b/tests/NuGetGallery.LoadTests/LoadTests.cs#L123\r\n\r\nFunctional tests will need to use the latest NuGetBuild commit\r\n\r\nFix: https://nuget.visualstudio.com/_git/NuGetBuild/pullrequest/1150?_a=overview"},{"Id":"10546869446","Type":"PullRequestEvent","CreatedAt":"2019-10-02T22:48:09","Actor":"babakontheweb","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7602","RelatedDescription":"Opened pull request \"Replacing enum StorageType with static class of constants by the same…\" (#7602) at NuGet/NuGetGallery","RelatedBody":"* Replacing enum StorageType with static class of constants by the same name.\r\n\r\nAddresses https://github.com/NuGet/NuGetGallery/issues/7601"},{"Id":"10544928883","Type":"IssuesEvent","CreatedAt":"2019-10-02T18:00:53","Actor":"babakontheweb","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7601","RelatedDescription":"Opened issue \"Extensibility: Replace StorageType enum with constants\" (#7601) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nThere are a number of open issues for users trying to deploy NuGet Gallery on AWS with S3 storage. The hardest part of keeping custom implementations up to date with primary repo is that we would need to add to enum StorageType (in this case, adding AwsS3 as a value).\r\n\r\n### Describe the solution you'd like\r\nMy proposal is to replace the enum with a static class of constants by the same name. This would allow others to define their own constant values for different storage types while keeping the primary code base intact.\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the feature request here."},{"Id":"10544517437","Type":"PullRequestEvent","CreatedAt":"2019-10-02T17:06:24","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7600","RelatedDescription":"Merged pull request \"Re-align AppInsights with dev branch\" (#7600) at NuGet/NuGetGallery","RelatedBody":"This PR reverts https://github.com/NuGet/NuGetGallery/pull/7596 and cherry picks https://github.com/NuGet/NuGetGallery/pull/7599. \r\n\r\nWhen https://github.com/NuGet/NuGetGallery/pull/7599 is merged in `dev`, this PR ensures `master` and `dev` are in sync and won't have merge conflicts."},{"Id":"10544510978","Type":"PullRequestEvent","CreatedAt":"2019-10-02T17:05:31","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7599","RelatedDescription":"Merged pull request \"Fix AppInsights request telemetry\" (#7599) at NuGet/NuGetGallery","RelatedBody":"Fixes the missing request telemetry as a result of missing configuration changes that go with the AppInsights upgrade."},{"Id":"10542925927","Type":"PullRequestEvent","CreatedAt":"2019-10-02T14:05:53","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7600","RelatedDescription":"Opened pull request \"Re-align AppInsights with dev branch\" (#7600) at NuGet/NuGetGallery","RelatedBody":"This PR reverts https://github.com/NuGet/NuGetGallery/pull/7596 and cherry picks https://github.com/NuGet/NuGetGallery/pull/7599. \r\n\r\nWhen https://github.com/NuGet/NuGetGallery/pull/7599 is merged in `dev`, this PR ensures `master` and `dev` are in sync and won't have merge conflicts."},{"Id":"10542830033","Type":"PullRequestEvent","CreatedAt":"2019-10-02T13:55:32","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7599","RelatedDescription":"Opened pull request \"Fix AppInsights request telemetry\" (#7599) at NuGet/NuGetGallery","RelatedBody":"Fixes the missing request telemetry as a result of missing configuration changes that go with the AppInsights upgrade."},{"Id":"10539495923","Type":"IssuesEvent","CreatedAt":"2019-10-02T05:24:04","Actor":"donnie-msft","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7598","RelatedDescription":"Opened issue \"Certificate error on https://nuget.smbsrc.net\" (#7598) at NuGet/NuGetGallery","RelatedBody":"@xuzhg commented on [Mon Sep 30 2019](https://github.com/NuGet/Home/issues/8647)\n\nIt's failed to upload the symbols to the symbols sever, the error message:\r\n\r\n![image](https://user-images.githubusercontent.com/9426627/65919348-e4818500-e390-11e9-87df-4ac052329dcc.png)\r\n\r\n\r\nI tried the nuget.exe 5.2.0 version. It's same error message. \r\n\r\nHow can we upload the symbols server again?\r\n\n\n---\n\n@donnie-msft commented on [Tue Oct 01 2019](https://github.com/NuGet/Home/issues/8647#issuecomment-537340606)\n\n@xuzhg thanks for letting us know, moving to NuGet Gallery\n\n"},{"Id":"10538374509","Type":"PullRequestEvent","CreatedAt":"2019-10-02T00:17:39","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7596","RelatedDescription":"Merged pull request \"Revert \"Upgrade to AppInsights v2.10 (#7499)\"\" (#7596) at NuGet/NuGetGallery","RelatedBody":"This reverts commit d199584d61d92757081f2f4be3fe39d6aa65860d."},{"Id":"10538322835","Type":"IssuesEvent","CreatedAt":"2019-10-02T00:04:22","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7597","RelatedDescription":"Opened issue \"Fix gallery nightly deployments\" (#7597) at NuGet/NuGetGallery","RelatedBody":"Update this: https://nuget.visualstudio.com/NuGetBuild/_git/NuGetBuild?path=%2FGalleryFunctionalConfig%2FDev.json&version=GBmaster&line=2&lineStyle=plain&lineEnd=3&lineStartColumn=1&lineEndColumn=1\r\n\r\nUsed by: https://github.com/NuGet/NuGetGallery/blob/23d3aeb8cc96f8038df5473f8392e543fb840a0b/tests/NuGetGallery.LoadTests/LoadTests.cs#L123\r\n\r\nFunctional tests will need to use the latest NuGetBuild commit"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10547633545","Type":"IssuesEvent","CreatedAt":"2019-10-03T02:02:12","Actor":"proudmonkey","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8658","RelatedDescription":"Opened issue \"Nuget Download Count for Template Type Not Updating when Installing via .NET CLI\" (#8658) at NuGet/Home","RelatedBody":"Hi,\r\n\r\nI apologize if this has been asked before. I tried to look for an existing issue related to this here but I can't seem to find any. I've also searched the web but to no avail.\r\n\r\nI have uploaded a new Nuget Template package 4 days ago, and when I install it via .NET CLI, the downloads isn't counting even if the template was successfully installed. I've tried it may times and tried using different machines to install and still I see 0 downloads to date. \r\n\r\n## Details about Problem\r\n\r\nNuGet product used (`dotnet.exe`):\r\n\r\nNuGet version (`5.3.0`):\r\n\r\ndotnet.exe --version (`.NET Core 3.0.100`):\r\n\r\nVS version (if appropriate): `Visual Studio Pro 2019`\r\n\r\nOS version (`Windows 10.0.17763.737`):\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run `dotnet new -i apiboilerplate.aspnetcore` This will install the latest template in your machine.\r\n2. Run `dotnet new apiboilerplate --name \"myapi\" -o samples`. This will generate the project template within the samples directory.\r\n\r\nNote that the template was installed successfully, it's just that the count wont reflect on the site. Here's my nuget template: https://www.nuget.org/packages/ApiBoilerPlate.AspNetCore\r\n\r\nPerhaps I may have just missed something here?\r\n\r\nThank you,\r\nVince\r\n\r\n"},{"Id":"10546240834","Type":"IssuesEvent","CreatedAt":"2019-10-02T20:59:38","Actor":"TheCakeIsNaOH","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8657","RelatedDescription":"Opened issue \"Nuget push ssl certificate error when running on mono\" (#8657) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: Nuget.exe on mono docker image\r\nNuGet version: 5.2.0.6090\r\nMono version: 6.4.0.198\r\nOS version: mono:6.4.0198 docker image running on Debian 10 host\r\n\r\n### What is happening-\r\nWhen trying to push a nupkg to chocolatey.org I am getting an SSL certificate error; CERTIFICATE_VERIFY_FAILED\r\n\r\nNuget on windows works.\r\n\r\n### What I expect to happen-\r\nNuget on mono successfully making an HTTPS connection without certificate errors.\r\n\r\n\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.  docker run --rm -it mono:6.4.0.198\r\n\r\n2. curl -O /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\r\n\r\n3. alias nuget=\"mono /usr/local/bin/nuget.exe\"\r\n\r\n4.  curl -O https://packages.chocolatey.org/chocolatey.0.10.15.nupkg\r\n\r\n5. nuget push chocolatey.0.10.15.nupkg -Source https://push.chocolatey.org/\r\n\r\n### Verbose Logs\r\n\r\n```\r\nNuGet Version: 5.2.0.6090\r\nWARNING: No API Key was provided and no API Key could be found for 'https://push.chocolatey.org/'. To save an API Key for a source use the 'setApiKey' command.\r\nPushing chocolatey.0.10.15.nupkg to 'https://push.chocolatey.org/'...\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nAn error was encountered when fetching 'PUT https://push.chocolatey.org/api/v2/package/'. The request will now be retried.\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nAn error was encountered when fetching 'PUT https://push.chocolatey.org/api/v2/package/'. The request will now be retried.\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  PUT https://push.chocolatey.org/api/v2/package/\r\nThe SSL connection could not be established, see inner exception.\r\n  Authentication failed, see inner exception.\r\n  Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n    at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> Mono.Btls.MonoBtlsException: Ssl error:1000007d:SSL routines:OPENSSL_internal:CERTIFICATE_VERIFY_FAILED\r\n  at /build/mono-6.4.0.198/external/boringssl/ssl/handshake_client.c:1132\r\n  at Mono.Btls.MonoBtlsContext.ProcessHandshake () [0x00048] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at Mono.Net.Security.MobileAuthenticatedStream.ProcessHandshake (Mono.Net.Security.AsyncOperationStatus status, System.Boolean renegotiate) [0x000da] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at (wrapper remoting-invoke-with-check) Mono.Net.Security.MobileAuthenticatedStream.ProcessHandshake(Mono.Net.Security.AsyncOperationStatus,bool)\r\n  at Mono.Net.Security.AsyncHandshakeRequest.Run (Mono.Net.Security.AsyncOperationStatus status) [0x00006] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at Mono.Net.Security.AsyncProtocolRequest.ProcessOperation (System.Threading.CancellationToken cancellationToken) [0x000fc] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n   --- End of inner exception stack trace ---\r\n  at Mono.Net.Security.MobileAuthenticatedStream.ProcessAuthentication (System.Boolean runSynchronously, Mono.Net.Security.MonoSslAuthenticationOptions options, System.Threading.CancellationToken cancellationToken) [0x00262] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore (System.IO.Stream stream, System.Net.Security.SslClientAuthenticationOptions sslOptions, System.Threading.CancellationToken cancellationToken) [0x000c3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n   --- End of inner exception stack trace ---\r\n  at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore (System.IO.Stream stream, System.Net.Security.SslClientAuthenticationOptions sslOptions, System.Threading.CancellationToken cancellationToken) [0x00102] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.CreateConnectionAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00322] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync (System.Threading.Tasks.ValueTask`1[TResult] creationTask) [0x000a2] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x00089] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean preAuthenticate, System.Boolean isProxyAuth, System.Boolean doRequestAuth, System.Net.Http.HttpConnectionPool pool, System.Threading.CancellationToken cancellationToken) [0x00112] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.DecompressionHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ca] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.ServerWarningLogHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00088] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.StsAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000bf] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000c4] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x000b3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T] (System.Func`2[T,TResult] getTask, System.TimeSpan timeout, System.String timeoutMessage, System.Threading.CancellationToken token) [0x001cd] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpRetryHandler.SendAsync (NuGet.Protocol.HttpRetryHandlerRequest request, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x004d5] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSource.GetThrottledResponse (System.Func`1[TResult] requestFactory, System.TimeSpan requestTimeout, System.TimeSpan downloadTimeout, System.Int32 maxTries, System.Guid sessionId, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x001e0] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.HttpSource.ProcessResponseAsync[T] (NuGet.Protocol.HttpSourceRequest request, System.Func`2[T,TResult] processAsync, NuGet.Protocol.Core.Types.SourceCacheContext cacheContext, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x000cb] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageToServer (System.String source, System.String apiKey, System.String pathToPackage, System.Int64 packageSize, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger logger, System.Threading.CancellationToken token) [0x0045a] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageCore (System.String source, System.String apiKey, System.String packageToPush, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x00189] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackage (System.String packagePath, System.String source, System.String apiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, System.TimeSpan requestTimeout, NuGet.Common.ILogger log, System.Threading.CancellationToken token, System.Boolean isSnupkgPush) [0x0012a] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Protocol.Core.Types.PackageUpdateResource.Push (System.String packagePath, System.String symbolSource, System.Int32 timeoutInSecond, System.Boolean disableBuffering, System.Func`2[T,TResult] getApiKey, System.Func`2[T,TResult] getSymbolApiKey, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Protocol.Core.Types.SymbolPackageUpdateResourceV3 symbolPackageUpdateResource, NuGet.Common.ILogger log) [0x0010d] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.Commands.PushRunner.Run (NuGet.Configuration.ISettings settings, NuGet.Configuration.IPackageSourceProvider sourceProvider, System.String packagePath, System.String source, System.String apiKey, System.String symbolSource, System.String symbolApiKey, System.Int32 timeoutSeconds, System.Boolean disableBuffering, System.Boolean noSymbols, System.Boolean noServiceEndpoint, System.Boolean skipDuplicate, NuGet.Common.ILogger logger) [0x002f9] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.PushCommand.ExecuteCommandAsync () [0x00173] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.Command.Execute () [0x000ea] in <86071b8d89ed441c8bd0686989227b79>:0\r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c1] in <86071b8d89ed441c8bd0686989227b79>:0\r\n```\r\n\r\n\r\n"},{"Id":"10545333750","Type":"IssuesEvent","CreatedAt":"2019-10-02T18:54:09","Actor":"generik0","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8656","RelatedDescription":"Closed issue \"dotnet test, azure devops. Not working on with csproj and devops artifacts\" (#8656) at NuGet/Home","RelatedBody":"Hi\r\nI have seen other issues (closed) regarding this matter. However, none of them address azure develops (cload) and build agent.\r\n\r\nThe basic issue =\r\n\r\nWhen trying to run a dotnet test on a csproj, with personal nugets on devops artifacts, even though the source is added to the build agent, the nuget fail for dotnet test.\r\n\r\nThis is even is there are adde previous tasks:\r\n- dotnet restore (with nuget.config file)\r\n- dotnet build (which needs --configfile switch)\r\n\r\n## Steps to reproduce\r\n* Have a csproj that uses a nuget from devops artifacts\r\n* Have a pipleing with tasks:\r\n- dotnet restore with a **/*test.csproj search, and nuget.config including the devop artifacts\r\n- dotnet build with a **/*test.csproj search, and  --configfile swtich to the nuget.config including the devop artifacts\r\n- dotnet test **/*test.csproj \r\n\r\n\r\n## Expected  behavior\r\n\r\nI expect it not to fail for the dotnet test\r\n\r\n## Actual behavior\r\n\r\nIt fails because of nuget packages, even though the restore and build was before\r\n![image](https://user-images.githubusercontent.com/2411563/66072598-a1bcda00-e555-11e9-9ad1-2edec0173dd0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2411563/66072612-a7b2bb00-e555-11e9-9149-f65c9332b057.png)\r\n\r\nAttached is the raw log:\r\n\r\n[rawlog.txt](https://github.com/NuGet/Home/files/3682851/rawlog.txt)\r\n\r\n\r\n\r\nPS. i bet you can replicate this issue one the desctop and command line also ;-)\r\n\r\nIt is like the dot net test cannot understand that the nugets already are installed.\r\nI have also tried with --no-restore\r\n\r\n\r\n"},{"Id":"10545302818","Type":"IssuesEvent","CreatedAt":"2019-10-02T18:50:03","Actor":"generik0","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8656","RelatedDescription":"Opened issue \"dotnet test, azure devops. Not working on with csproj and devops artifacts\" (#8656) at NuGet/Home","RelatedBody":"Hi\r\nI have seen other issues (closed) regarding this matter. However, none of them address azure develops (cload) and build agent.\r\n\r\nThe basic issue =\r\n\r\nWhen trying to run a dotnet test on a csproj, with personal nugets on devops artifacts, even though the source is added to the build agent, the nuget fail for dotnet test.\r\n\r\nThis is even is there are adde previous tasks:\r\n- dotnet restore (with nuget.config file)\r\n- dotnet build (which needs --configfile switch)\r\n\r\n## Steps to reproduce\r\n* Have a csproj that uses a nuget from devops artifacts\r\n* Have a pipleing with tasks:\r\n- dotnet restore with a **/*test.csproj search, and nuget.config including the devop artifacts\r\n- dotnet build with a **/*test.csproj search, and  --configfile swtich to the nuget.config including the devop artifacts\r\n- dotnet test **/*test.csproj \r\n\r\n\r\n## Expected  behavior\r\n\r\nI expect it not to fail for the dotnet test\r\n\r\n## Actual behavior\r\n\r\nIt fails because of nuget packages, even though the restore and build was before\r\n![image](https://user-images.githubusercontent.com/2411563/66072598-a1bcda00-e555-11e9-9ad1-2edec0173dd0.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2411563/66072612-a7b2bb00-e555-11e9-9149-f65c9332b057.png)\r\n\r\nAttached is the raw log:\r\n\r\n[rawlog.txt](https://github.com/NuGet/Home/files/3682851/rawlog.txt)\r\n\r\n\r\n\r\nPS. i bet you can replicate this issue one the desctop and command line also ;-)\r\n\r\nIt is like the dot net test cannot understand that the nugets already are installed.\r\nI have also tried with --no-restore\r\n\r\n\r\n"},{"Id":"10545252357","Type":"IssuesEvent","CreatedAt":"2019-10-02T18:43:22","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8654","RelatedDescription":"Closed issue \"Allow SDK-style Package Installs\" (#8654) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nMost of the work I do with .Net Core is in an offline environment. Currently, if I want to update the global nuget cache on my offline environment, I have to update dependencies with the `dotnet` CLI as follows:\r\n\r\n```\r\ndotnet add package <package> --package-directory <path-to-directory>\r\n```\r\n\r\nThis is because of:  \r\n\r\n![image](https://user-images.githubusercontent.com/14102723/65997274-0f3e0d00-e467-11e9-9f01-e67543bfd106.png)  \r\n> From [Installing NuGet client tools](https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#cli-tools)\r\n\r\nWhere I work, I have access to the `nuget` CLI, but cannot install .NET Core SDK on my internet-connected machine. This means that all of my dependency updates have to be done at home.\r\n\r\nBeing able to specify the platforms the `nuget` CLI commands installs for would be extremely helpful. Perhaps something similar to:\r\n\r\n```\r\nnuget install <package> -Source <source> -OutputDirectory <path-to-output> \r\n-Framework netcoreapp3.0\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-03T05:30:49.2740518Z","RunDurationInMilliseconds":2299}