{"Data":{"Blog":{"FeedItems":[{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7192576457","Type":"PullRequestEvent","CreatedAt":"2018-02-03T05:29:31","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16149","RelatedDescription":"Merged pull request \"Remove AsyncMethodBuilder from shared partition\" (#16149) at dotnet/coreclr","RelatedBody":"Bringing the two in sync (to the corert variant) didn't give the performance wins I was hoping https://github.com/dotnet/coreclr/pull/16124#issuecomment-362141625; so separating the two implementations.\r\n\r\nI'll fix up the corert version separately.\r\n\r\n/cc @jkotas @stephentoub "},{"Id":"7192514754","Type":"IssuesEvent","CreatedAt":"2018-02-03T04:36:29","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16145","RelatedDescription":"Closed issue \"Fix GetILToNativeMapping3 to return mappings for the specified code start address\" (#16145) at dotnet/coreclr","RelatedBody":""},{"Id":"7192514397","Type":"PullRequestEvent","CreatedAt":"2018-02-03T04:36:11","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16187","RelatedDescription":"Closed pull request \"Fix GetILToNativeMapping3 to return mappings for the specified code start address (#16146)\" (#16187) at dotnet/coreclr","RelatedBody":"Port of https://github.com/dotnet/coreclr/pull/16146 (7801a4f047c6e2cd68c5b10b9de232f32a6bdb26) to release/2.1.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/16145:\r\n- Previously, it was getting or creating the current entry point's corresponding DebugJitInfo and determining that the specified code address is not within the code range\r\n- Fixed to get or create a DebugJitInfo corresponding to the specified code address and return that"},{"Id":"7192451175","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:43:32","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16187","RelatedDescription":"Opened pull request \"Fix GetILToNativeMapping3 to return mappings for the specified code start address (#16146)\" (#16187) at dotnet/coreclr","RelatedBody":"Port of https://github.com/dotnet/coreclr/pull/16146 (7801a4f047c6e2cd68c5b10b9de232f32a6bdb26) to release/2.1.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/16145:\r\n- Previously, it was getting or creating the current entry point's corresponding DebugJitInfo and determining that the specified code address is not within the code range\r\n- Fixed to get or create a DebugJitInfo corresponding to the specified code address and return that"},{"Id":"7192430671","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:30:26","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16186","RelatedDescription":"Merged pull request \"Changing Span/Memory to return default on null instead of throwing.\" (#16186) at dotnet/coreclr","RelatedBody":"This keeps the behavior of implicit casts and constructor calls consistent.\r\n\r\nComplimentary PR in corefx: https://github.com/dotnet/corefx/pull/26807\r\n\r\nRelated to https://github.com/dotnet/corefx/issues/24409 which was fixed here https://github.com/dotnet/corefx/pull/25257.\r\n\r\ncc @jkotas, @KrzysztofCwalina, @VSadov, @stephentoub, @JeremyKuhne "},{"Id":"7192426790","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:27:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16180","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to preview2-02502-01, preview2-26203-01, preview2-26202-05, respectively (master)\" (#16180) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7192402836","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:08:44","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16151","RelatedDescription":"Merged pull request \"Dictionary exposes internal type comparer\" (#16151) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26033\r\n\r\nThis is my first pull on this repo(maybe i'm in the wrong place). I don't know if there is a \"guide\" to do \"cross repo\" test for core*.\r\nIf i want to add a test on corefx with this \"merge\", do i have to wait and clean/rebuild?\r\n\r\ncc: @jkotas "},{"Id":"7192388951","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:58:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15654","RelatedDescription":"Merged pull request \"Delete unused SSA_FEATURE_USEDEF ifdefs\" (#15654) at dotnet/coreclr","RelatedBody":"I don't see any point in keeping this code around. Keeping track of SSA uses could be useful but this implementation is not efficient and probably predates the `PerSsaArray` from `LclVarDsc` (we could add a vector of uses to `LclSsaVarDsc` if we need to)."},{"Id":"7192314922","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:07:44","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16186","RelatedDescription":"Opened pull request \"Changing Span/Memory to return default on null instead of throwing.\" (#16186) at dotnet/coreclr","RelatedBody":"This keeps the behavior of implicit casts and constructor calls consistent.\r\n\r\nComplimentary PR in corefx: https://github.com/dotnet/corefx/pull/26807\r\n\r\nRelated to https://github.com/dotnet/corefx/issues/24409 which was fixed here https://github.com/dotnet/corefx/pull/25257.\r\n\r\ncc @jkotas, @KrzysztofCwalina, @VSadov, @stephentoub, @JeremyKuhne "},{"Id":"7192296303","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:55:40","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16146","RelatedDescription":"Merged pull request \"Fix GetILToNativeMapping3 to return mappings for the specified code start address\" (#16146) at dotnet/coreclr","RelatedBody":"Fix for https://github.com/dotnet/coreclr/issues/16145 in master:\r\n- Previously, it was getting or creating the current entry point's corresponding DebugJitInfo and determining that the specified code address is not within the code range\r\n- Fixed to get or create a DebugJitInfo corresponding to the specified code address and return that"},{"Id":"7192234871","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:20:49","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16184","RelatedDescription":"Merged pull request \"Fix AV in crossgen when generating PDBs\" (#16184) at dotnet/coreclr","RelatedBody":"I missed updating one of the callers of `ReadyToRunInfo::GetEntryPoint`\r\nin #15801. Fix by making the last arg explicit so this kind of type\r\nconfusion error is less likely, and updating the missed call site.\r\n\r\nCloses #16177."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7192196704","Type":"IssuesEvent","CreatedAt":"2018-02-03T01:01:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8338","RelatedDescription":"Closed issue \"dotnet build -c throws exception instead of error message\" (#8338) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n` dotnet build -c`\r\n\r\n## Expected  behavior\r\n\r\nSome friendly error message\r\n\r\n## Actual behavior\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7191999120","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:37:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8486","RelatedDescription":"Merged pull request \"Add verbosity option to `install tool` command.\" (#8486) at dotnet/cli","RelatedBody":"This PR adds the `--verbosity` option to the `install tool` command.\r\n\r\nMSBuild/NuGet output is now controllable by the user and defaults to being \"quiet\".\r\n\r\nThis enables users to see warnings from NuGet that otherwise would be swallowed\r\nunless NuGet returned a non-zero exit code. As a byproduct of this change, the\r\nexception handling and error messages related to obtaining tool packages was\r\nretooled. We no longer display `install tool` command line help for installation\r\nfailures, as it should only be displayed for command line syntax errors.\r\n\r\nFixes #8465."},{"Id":"7191999112","Type":"IssuesEvent","CreatedAt":"2018-02-02T23:37:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8465","RelatedDescription":"Closed issue \"Tool installation swallows NuGet warnings.\" (#8465) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nInstall a tool that causes NuGet to output warnings, but no errors:\r\n\r\n```\r\n$ dotnet install tool $PKG_WITH_WARNINGS\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe `install tool` command displays the warnings emitted by NuGet during tool installation.\r\n\r\n## Actual behavior\r\n\r\nNo warnings are displayed.\r\n\r\n## Environment data\r\n\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007986)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007986\r\n Commit SHA-1 hash:  e447bae210\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.2.0-preview1-007986/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26116-04\r\n  Build    : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7191516537","Type":"PullRequestEvent","CreatedAt":"2018-02-02T21:21:13","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8527","RelatedDescription":"Merged pull request \"Update the branch info to be correct for 2.1\" (#8527) at dotnet/cli","RelatedBody":""},{"Id":"7190896155","Type":"PullRequestEvent","CreatedAt":"2018-02-02T18:55:35","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8517","RelatedDescription":"Merged pull request \"Update F# to match dev15.6 preview 4\" (#8517) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7190347576","Type":"PullRequestEvent","CreatedAt":"2018-02-02T16:56:27","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8527","RelatedDescription":"Opened pull request \"Update the branch info to be correct for 2.1\" (#8527) at dotnet/cli","RelatedBody":""},{"Id":"7188806897","Type":"PullRequestEvent","CreatedAt":"2018-02-02T11:31:25","Actor":"v-zbsail","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8526","RelatedDescription":"Opened pull request \"LOC CHECKIN | cli master | 20180202\" (#8526) at dotnet/cli","RelatedBody":null}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"},{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7171898026","Type":"IssuesEvent","CreatedAt":"2018-01-30T15:18:32","Actor":"ditux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/637","RelatedDescription":"Closed issue \"ProjectInSolution class is not recognised in .Net Standard 2.0\" (#637) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am writing a c# automation application that requires \"ProjectInSolution\" class which i understand is only available on the .NET Framework. I am targeting the .NET Standard 2.0 and would like to know if there is an alternative?\r\n\r\nThanks"},{"Id":"7171668708","Type":"IssuesEvent","CreatedAt":"2018-01-30T14:40:23","Actor":"ditux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/637","RelatedDescription":"Opened issue \"ProjectInSolution class is not recognised in .Net Standard 2.0\" (#637) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am writing a c# automation application that requires \"ProjectInSolution\" class which i understand is only available on the .NET Framework. I am targeting the .NET Standard 2.0 and would like to know if there is an alternative?\r\n\r\nThanks"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7192458762","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:50:07","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26033","RelatedDescription":"Closed issue \"Dictionary exposes internal type comparer\" (#26033) at dotnet/corefx","RelatedBody":"According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:\r\n\r\n```\r\nvar dict = new Dictionary<string, int>();\r\nAssert.NotSame(EqualityComparer<string>.Default, dict.Comparer);\r\n```\r\n\r\nFor more information please take a look at the following PR #24779 "},{"Id":"7192458563","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:49:57","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26812","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26812) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192445697","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:39:03","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26812","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#26812) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192403286","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:09:06","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26033","RelatedDescription":"Reopened issue \"Dictionary exposes internal type comparer\" (#26033) at dotnet/corefx","RelatedBody":"According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:\r\n\r\n```\r\nvar dict = new Dictionary<string, int>();\r\nAssert.NotSame(EqualityComparer<string>.Default, dict.Comparer);\r\n```\r\n\r\nFor more information please take a look at the following PR #24779 "},{"Id":"7192403176","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:09:01","Actor":"tarekgh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26804","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26804) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192403115","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:08:58","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26033","RelatedDescription":"Closed issue \"Dictionary exposes internal type comparer\" (#26033) at dotnet/corefx","RelatedBody":"According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:\r\n\r\n```\r\nvar dict = new Dictionary<string, int>();\r\nAssert.NotSame(EqualityComparer<string>.Default, dict.Comparer);\r\n```\r\n\r\nFor more information please take a look at the following PR #24779 "},{"Id":"7192403018","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:08:52","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26033","RelatedDescription":"Reopened issue \"Dictionary exposes internal type comparer\" (#26033) at dotnet/corefx","RelatedBody":"According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:\r\n\r\n```\r\nvar dict = new Dictionary<string, int>();\r\nAssert.NotSame(EqualityComparer<string>.Default, dict.Comparer);\r\n```\r\n\r\nFor more information please take a look at the following PR #24779 "},{"Id":"7192402832","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:08:44","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26033","RelatedDescription":"Closed issue \"Dictionary exposes internal type comparer\" (#26033) at dotnet/corefx","RelatedBody":"According to @jkotas, Dictionary is not supposed to leak the fact that it is internally using the NonRandomizedComparer as it does below:\r\n\r\n```\r\nvar dict = new Dictionary<string, int>();\r\nAssert.NotSame(EqualityComparer<string>.Default, dict.Comparer);\r\n```\r\n\r\nFor more information please take a look at the following PR #24779 "},{"Id":"7192401181","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:07:30","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26794","RelatedDescription":"Merged pull request \"Fix test PostAsync_ThrowFromContentCopy_RequestFails\" (#26794) at dotnet/corefx","RelatedBody":"Fixes #26793\r\nThis fixes the test issues mentioned in #26793"},{"Id":"7192401177","Type":"IssuesEvent","CreatedAt":"2018-02-03T03:07:30","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26793","RelatedDescription":"Closed issue \"[Test failures] System.Net.Http.Functional.Tests.ManagedHandler_HttpClientHandlerTest / PostAsync_ThrowFromContentCopy_RequestFails\" (#26793) at dotnet/corefx","RelatedBody":"It seems that the managed handler throws a different exception than the other ones. I'm looking into it. I'm going to submit a PR to deal with the test failures, but, want to confirm the desired behavior here.\r\n\r\nThe exception throw by the managed handler (HttpRequestException) seems more appropriate then the one throw by the other handlers, and it has the proper InnerException (the one throw directly by the other handlers). Anyway, let's confirm that this is the desired behavior.\r\n\r\n/cc @geoffkizer @stephentoub @karelz "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7192414289","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:17:20","Actor":"natidea","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24620","RelatedDescription":"Opened pull request \"Merge dev15.6.x to dev15.6.x-vs-deps\" (#24620) at dotnet/roslyn","RelatedBody":"This is a pull request from dev15.6.x into dev15.6.x-vs-deps.\r\n\r\n``` bash\r\ngit fetch --all\r\ngit checkout merges/dev15.6.x-to-dev15.6.x-vs-deps-20180202\r\ngit reset --hard upstream/dev15.6.x-vs-deps\r\ngit merge upstream/dev15.6.x\r\n# Fix merge conflicts\r\ngit commit\r\ngit push merges/dev15.6.x-to-dev15.6.x-vs-deps-20180202 --force\r\n```\r\n\r\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7192371875","Type":"IssuesEvent","CreatedAt":"2018-02-03T02:46:27","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24601","RelatedDescription":"Reopened issue \"Generic extension methods with `in this` and T struct not compiling\" (#24601) at dotnet/roslyn","RelatedBody":"Case: Using generic extension method with `in this T` and where T is a struct\r\n\r\n**Version Used**: \r\nC# 7.2 (VS 2017 15.5.4)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```c#\r\n    public static class TestExtension\r\n    {\r\n        public static void TestDispose<T>(in this T thisArg) where T : struct, IDisposable\r\n        {\r\n\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe extension method should compile.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nError\tCS8338\tThe first parameter of an 'in' extension method 'TestDispose' must be a value type.\r\n```\r\n"},{"Id":"7192327783","Type":"IssuesEvent","CreatedAt":"2018-02-03T02:16:01","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24618","RelatedDescription":"Closed issue \"EnC test scenario: Recursive function update\" (#24618) at dotnet/roslyn","RelatedBody":"This scenario has been broken prior Dev15.7.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        FuncTest(0);\r\n        Console.ReadLine();\r\n    }\r\n\r\n    static void FuncTest(int i)\r\n    {\r\n        Console.WriteLine($\"Enter: {i}\"); // conditional breakpoint here \r\n\r\n        if (i < 10)\r\n        {\r\n            FuncTest(i + 1);\r\n        }\r\n\r\n        Console.WriteLine($\"Exit: {i}\");\r\n    }\r\n}\r\n```\r\n\r\n1. In the above code place a conditional BP as indicated with condition `i == 5` and F5.\r\n2. Once the BP is hit update the strings `$\"Enter: {i}\"` to `$\"Enter: {i} (updated)\"` and `$\"Exit: {i}\"` to `$\"Exit: {i} (updated)\"`.\r\n3. F5\r\n\r\n**Expected Behavior**:\r\n\r\nThe output of the program is:\r\n\r\n```\r\nEnter: 0\r\nEnter: 1\r\nEnter: 2\r\nEnter: 3\r\nEnter: 4\r\nEnter: 5 (updated)\r\nEnter: 6 (updated)\r\nEnter: 7 (updated)\r\nEnter: 8 (updated)\r\nEnter: 9 (updated)\r\nEnter: 10 (updated)\r\nExit: 10 (updated)\r\nExit: 9 (updated)\r\nExit: 8 (updated)\r\nExit: 7 (updated)\r\nExit: 6 (updated)\r\nExit: 5 (updated)\r\nExit: 4 (updated)\r\nExit: 3 (updated)\r\nExit: 2 (updated)\r\nExit: 1 (updated)\r\nExit: 0 (updated)\r\n```\r\n\r\n"},{"Id":"7192325662","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:14:41","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24619","RelatedDescription":"Opened pull request \"Do not suggest var when it change static type of the variable in foreach statement\" (#24619) at dotnet/roslyn","RelatedBody":"<details><summary>Do not suggest var when it change static type of the variable in foreach statement</summary>\r\n\r\n### Customer scenario\r\nDo not suggest var when it change static type of the variable in foreach statement\r\n\r\n### Bugs this fixes\r\nhttps://github.com/dotnet/roslyn/issues/24262\r\n\r\n### Workarounds, if any\r\nNo\r\n\r\n### Risk\r\nLow risk as it only add another check in the code analytic in foreach statement.\r\n\r\n### Performance impact\r\nlow perf impact because no extra allocations/no complexity changes\r\n\r\n### Is this a regression from a previous update?\r\nnot sure\r\n\r\n### Root cause analysis\r\nnot sure\r\n\r\n### How was the bug found?\r\ncustomer reported it\r\n\r\n### Test documentation updated?\r\nUnit tests added\r\n\r\n</details>\r\n"},{"Id":"7192315878","Type":"IssuesEvent","CreatedAt":"2018-02-03T02:08:24","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24618","RelatedDescription":"Opened issue \"EnC test scenario: Recursive function update\" (#24618) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        FuncTest(0);\r\n        Console.ReadLine();\r\n    }\r\n\r\n    static void FuncTest(int i)\r\n    {\r\n        Console.WriteLine($\"Enter: {i}\"); // conditional breakpoint here \r\n\r\n        if (i < 10)\r\n        {\r\n            FuncTest(i + 1);\r\n        }\r\n\r\n        Console.WriteLine($\"Exit: {i}\");\r\n    }\r\n}\r\n```\r\n\r\n1. In the above code place a conditional BP as indicated with condition `i == 5` and F5.\r\n2. Once the BP is hit update the strings `$\"Enter: {i}\"` to `$\"Enter: {i} (updated)\"`, `$\"Enter: {i}\"` to `$\"Exit: {i} (updated)\"`.\r\n3. F5\r\n\r\n**Expected Behavior**:\r\n\r\nThe output of the program is:\r\n\r\n```\r\nEnter: 0\r\nEnter: 1\r\nEnter: 2\r\nEnter: 3\r\nEnter: 4\r\nEnter: 5 (updated)\r\nEnter: 6 (updated)\r\nEnter: 7 (updated)\r\nEnter: 8 (updated)\r\nEnter: 9 (updated)\r\nEnter: 10 (updated)\r\nExit: 10 (updated)\r\nExit: 9 (updated)\r\nExit: 8 (updated)\r\nExit: 7 (updated)\r\nExit: 6 (updated)\r\nExit: 5 (updated)\r\nExit: 4 (updated)\r\nExit: 3 (updated)\r\nExit: 2 (updated)\r\nExit: 1 (updated)\r\nExit: 0 (updated)\r\n```\r\n\r\n"},{"Id":"7192121065","Type":"PullRequestEvent","CreatedAt":"2018-02-03T00:26:34","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24616","RelatedDescription":"Opened pull request \"Update compiler test plan\" (#24616) at dotnet/roslyn","RelatedBody":"Doc-only change to add reminders to test features interacting with C# 7.2 features.\r\nFYI @dotnet/roslyn-compiler"},{"Id":"7192120546","Type":"PullRequestEvent","CreatedAt":"2018-02-03T00:26:19","Actor":"t-camaia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24593","RelatedDescription":"Merged pull request \"System.Runtime.CompilerServices.SkipLocalsInitAttribute recognized as…\" (#24593) at dotnet/roslyn","RelatedBody":"… a WellKnownType\r\n\r\nSystem_Runtime_CompilerServices_SkipLocalsInitAttribute entry was added to the WellKnownType enum, and its corresponding metadata name was added to the s_metadataNames array in WellKnownTypes class.\r\n\r\nThe implemented tests contemplate four possible scenarios:\r\n\r\n- SkipLocalsInitAttribute declared in source code: GetWellKnownType must return the requested type without further ado.\r\n\r\n- SkipLocalsInitAttribute declared in metadata: same as above.\r\n\r\n- SkipLocalsInitAttribute declared both in source code and in metadata: GetWellKnownType must return the one from source code.\r\n\r\n- SkipLocalsInitAttribute declared in metadata in two different assemblies: GetWellKnownType must return an error type symbol.\r\n\r\nThat's the expected behavior for types after C# 7."},{"Id":"7192114384","Type":"PullRequestEvent","CreatedAt":"2018-02-03T00:23:32","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24594","RelatedDescription":"Merged pull request \"Handle Do/While/Until loops in control flow graph\" (#24594) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7192560251","Type":"IssuesEvent","CreatedAt":"2018-02-03T05:15:19","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4510","RelatedDescription":"Closed issue \"Implement castclass/isinst opcodes\" (#4510) at dotnet/corert","RelatedBody":"The castclass and isinst opcodes should be implemented as calls into RhTypeCast functions. The method that handles these opcodes is https://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L507\r\n\r\nThe complete mapping based on opcode and type is in https://github.com/dotnet/corert/blob/cccbccac222c70766962412a2d485a5edd2fbf79/src/ILCompiler.Compiler/src/Compiler/JitHelper.cs#L287\r\n"},{"Id":"7192560211","Type":"PullRequestEvent","CreatedAt":"2018-02-03T05:15:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5325","RelatedDescription":"Merged pull request \"Implement castclass & isinst for WebAssembly\" (#5325) at dotnet/corert","RelatedBody":"Implement `castclass` and `isinst` opcodes in `ILToWebAssemblyImporter` by doing related function calls to methods in `System.Runtime.TypeCast`, fixing #4510.\r\n\r\nAt the same time, corresponding test is added in `HelloWasm`. This includes three types of casting:\r\n* castclass/isinst to classes.\r\n* castclass/isinst to interfaces, failing due to that in `IsInstanceOfInterface`, an cache miss will lead to an exception: null `pHandleTable` found in fetched segment pointer.\r\n* castclass/isinst to array types, failing due to always true return value by `IsInstanceOfArray`.\r\n\r\nThese two failing cases still need further investigation; however, I believe the `ImportCasting` implementation is already functioning correctly, so this PR is here."},{"Id":"7192548050","Type":"PullRequestEvent","CreatedAt":"2018-02-03T05:04:47","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5342","RelatedDescription":"Opened pull request \"Fixed ldind failure and properly zext unsigned types in WebAssembly\" (#5342) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to fix the ldind issue I noticed in testing for #5172, In making the test for this I noticed that we weren't getting the right results for comparisons between unsigned types (smaller than 32bit) when they had the high bit set."},{"Id":"7192522513","Type":"PullRequestEvent","CreatedAt":"2018-02-03T04:43:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5341","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5341) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192478947","Type":"PullRequestEvent","CreatedAt":"2018-02-03T04:06:44","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5341","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5341) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192468994","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:58:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5340","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5340) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192412959","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:16:14","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5340","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5340) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192403429","Type":"PullRequestEvent","CreatedAt":"2018-02-03T03:09:13","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5339","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5339) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7192381839","Type":"IssuesEvent","CreatedAt":"2018-02-03T02:53:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5200","RelatedDescription":"Reopened issue \"Auto-detect VS linker location\" (#5200) at dotnet/corert","RelatedBody":"From https://github.com/dotnet/corert/pull/5171#issuecomment-354557421:\r\n\r\nThe requirement to `dotnet publish` in VS command prompt is not pretty.\r\n\r\nWe may want to auto-detect the VS location if you do not have linker available on your path by calling  %ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe. Similar to how we do it in repo's build.cmd.\r\n  "},{"Id":"7192379867","Type":"PullRequestEvent","CreatedAt":"2018-02-03T02:52:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5219","RelatedDescription":"Merged pull request \"Find VC tools path using vswhere\" (#5219) at dotnet/corert","RelatedBody":"Link.exe was conflicting with GNU's link.exe due to git-posh presence in PATH on my system. Therefore, I added condition for both `CppCompiler` and `CppLinker`. The script return the base bath to VC tools directory: `%ProgramFiles(x86)%\\Microsoft Visual Studio\\2017\\<edition>\\VC\\Tools\\MSVC\\<version>\\bin\\Host<arch>\\<arch>`.\r\n\r\nFixes #5200"},{"Id":"7192379863","Type":"IssuesEvent","CreatedAt":"2018-02-03T02:52:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5200","RelatedDescription":"Closed issue \"Auto-detect VS linker location\" (#5200) at dotnet/corert","RelatedBody":"From https://github.com/dotnet/corert/pull/5171#issuecomment-354557421:\r\n\r\nThe requirement to `dotnet publish` in VS command prompt is not pretty.\r\n\r\nWe may want to auto-detect the VS location if you do not have linker available on your path by calling  %ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe. Similar to how we do it in repo's build.cmd.\r\n  "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7191955018","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:22:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Merged pull request \"NETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421\r\n\r\nTo BundledNETCorePlatformsVersion\r\nNETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\r\nnext step insert SDK along with the name change in CLI in one PR to make CLI build"},{"Id":"7191556124","Type":"PullRequestEvent","CreatedAt":"2018-02-02T21:30:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Opened pull request \"Rename to BundledNETCoreAppPackageVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421"},{"Id":"7189133425","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:34","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Closed issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7189132361","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:18","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Opened issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7188811502","Type":"PullRequestEvent","CreatedAt":"2018-02-02T11:32:34","Actor":"v-zbsail","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1925","RelatedDescription":"Opened pull request \"LOC CHECKIN | sdk master | 20180202\" (#1925) at dotnet/sdk","RelatedBody":null},{"Id":"7187904529","Type":"PullRequestEvent","CreatedAt":"2018-02-02T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1924","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1924) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180202-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180202-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7187904435","Type":"PullRequestEvent","CreatedAt":"2018-02-02T08:00:48","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1923","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1923) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180202-080047\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180202-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":108,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":53,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":144,"FavoriteCount":113,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":25,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-02-03T05:30:19.7274085Z","RunDurationInMilliseconds":7930}