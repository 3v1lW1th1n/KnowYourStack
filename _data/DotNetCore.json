{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":3,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9214022828","Type":"PullRequestEvent","CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Opened pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9208392766","Type":"IssuesEvent","CreatedAt":"2019-03-08T19:00:06","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"9208389675","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:32","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Merged pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9208386555","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Merged pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9208386542","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:59:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"9208384997","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Merged pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9208384964","Type":"IssuesEvent","CreatedAt":"2019-03-08T18:58:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"9208383052","Type":"PullRequestEvent","CreatedAt":"2019-03-08T18:58:27","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Merged pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9163318579","Type":"PullRequestEvent","CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Opened pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9223183385","Type":"PullRequestEvent","CreatedAt":"2019-03-12T02:18:15","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23094","RelatedDescription":"Merged pull request \"Fix issue 21089 (Add tests for the `EventPipe support for \"Parameters\"` feature.)\" (#23094) at dotnet/coreclr","RelatedBody":"Fixes #21089 "},{"Id":"9223183302","Type":"IssuesEvent","CreatedAt":"2019-03-12T02:18:15","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21089","RelatedDescription":"Closed issue \"Add tests for the `EventPipe support for \"Parameters\"` feature.\" (#21089) at dotnet/coreclr","RelatedBody":"Feature added with pull #20796 needs unit testing."},{"Id":"9223040914","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:38:06","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23199","RelatedDescription":"Opened issue \"[x64] Test failed: ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh \" (#23199) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_tst/111/\r\n\r\n**Failed tests:**\r\nilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh\r\n\r\n**Log:**\r\n```\r\nilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh [FAIL]\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.sh: line 252: 28561 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        /n/nReturn code:      1/nRaw output file:      /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Reports/ilasm.System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun MethodImplOptionsTests.exe ''\r\n        AggressiveOptimizationTest\r\n        Expected: 100\r\n        Actual: 139\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/Tests/Core_Root/n> /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu/bin/tests/Linux.x64.Checked/TestWrappers/ilasm.System/ilasm.System.XUnitWrapper.cs(109,0): at ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh()\r\n```"},{"Id":"9223005118","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:27:35","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23198","RelatedDescription":"Opened issue \"[x64] Test failed: System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial\" (#23198) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_baseline/864/\r\n\r\n**Failed tests:**\r\nSystem.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial\r\nSystem.Text.Tests.EncoderConvert2.EncoderUTF8ConvertUnicodeCharArrayPartial\r\nSystem.Text.Tests.EncoderConvert2.EncoderASCIIConvertMixedASCIIUnicodeCharArrayPartial\r\n"},{"Id":"9222971927","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:18:13","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23197","RelatedDescription":"Opened issue \"[x64] Assertion failed 'cls != NO_CLASS_HANDLE'\" (#23197) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_centos7.1_r2r_jitstress1_tst/178/\r\n\r\n**log:**\r\n```\r\nAssert failure(PID 68338 [0x00010af2], Thread: 68338 [0x10af2]): Assertion failed 'cls != NO_CLASS_HANDLE' in 'JIT.HardwareIntrinsics.X86.SimpleUnaryOpTest__ConvertToVector128Int16Byte:RunClsVarScenario():this' (IL size 56)\r\n```"},{"Id":"9222939588","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:08:45","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23196","RelatedDescription":"Opened issue \"[x64] Unable to produce a script file\" (#23196) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/checked_ubuntu/29850/\r\n\r\n**Log:**\r\n```\r\nFATAL: Unable to produce a script file\r\nAlso:   hudson.remoting.Channel$CallSiteStackTrace: Remote call to ubuntu1404-20180321-4f7042\r\n\t\tat hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1693)\r\n\t\tat hudson.remoting.UserResponse.retrieve(UserRequest.java:310)\r\n\t\tat hudson.remoting.Channel.call(Channel.java:908)\r\n\t\tat hudson.FilePath.act(FilePath.java:986)\r\n\t\tat hudson.FilePath.act(FilePath.java:975)\r\n\t\tat hudson.FilePath.createTextTempFile(FilePath.java:1363)\r\n\t\tat hudson.tasks.CommandInterpreter.createScriptFile(CommandInterpreter.java:162)\r\n\t\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:94)\r\n\t\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:66)\r\n\t\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\t\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\t\tat hudson.model.Build$BuildExecution.build(Build.java:206)\r\n\t\tat hudson.model.Build$BuildExecution.doRun(Build.java:163)\r\n\t\tat hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)\r\n\t\tat hudson.model.Run.execute(Run.java:1724)\r\n\t\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\t\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\t\tat hudson.model.Executor.run(Executor.java:429)\r\njava.io.IOException: No space left on device\r\n\tat java.io.FileOutputStream.writeBytes(Native Method)\r\n\tat java.io.FileOutputStream.write(FileOutputStream.java:326)\r\n\tat sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\r\n\tat sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:316)\r\n\tat sun.nio.cs.StreamEncoder.close(StreamEncoder.java:149)\r\n\tat java.io.OutputStreamWriter.close(OutputStreamWriter.java:233)\r\n\tat hudson.FilePath$17.invoke(FilePath.java:1380)\r\n\tat hudson.FilePath$17.invoke(FilePath.java:1363)\r\n\tat hudson.FilePath$FileCallableWrapper.call(FilePath.java:2760)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:207)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:53)\r\n\tat hudson.remoting.Request$2.run(Request.java:358)\r\n\tat hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused: java.io.IOException: remote file operation failed: /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu at hudson.remoting.Channel@520c816:ubuntu1404-20180321-4f7042\r\n\tat hudson.FilePath.act(FilePath.java:993)\r\n\tat hudson.FilePath.act(FilePath.java:975)\r\n\tat hudson.FilePath.createTextTempFile(FilePath.java:1363)\r\nCaused: java.io.IOException: Failed to create a temp file on /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu\r\n\tat hudson.FilePath.createTextTempFile(FilePath.java:1386)\r\n\tat hudson.tasks.CommandInterpreter.createScriptFile(CommandInterpreter.java:162)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:94)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:66)\r\n\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\tat hudson.model.Build$BuildExecution.build(Build.java:206)\r\n\tat hudson.model.Build$BuildExecution.doRun(Build.java:163)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)\r\n\tat hudson.model.Run.execute(Run.java:1724)\r\n\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\tat hudson.model.Executor.run(Executor.java:429)\r\nBuild step 'Execute shell' marked build as failure\r\n```"},{"Id":"9222759725","Type":"PullRequestEvent","CreatedAt":"2019-03-12T00:15:29","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23195","RelatedDescription":"Opened pull request \"Default Interface COM testing\" (#23195) at dotnet/coreclr","RelatedBody":"Add tests for native COM client consuming managed COM server that\r\n  implements interfaces with default implementation.\r\n\r\nMove ComSmartPtr to Servers.h so it can be shared.\r\n\r\ncc @MichalStrehovsky @jkoritzinsky @davidwrighton "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9222762699","Type":"IssuesEvent","CreatedAt":"2019-03-12T00:16:20","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9538","RelatedDescription":"Closed issue \"can't compile F# projects on microsoft/dotnet:2.1-sdk-alpine (bash dependency)\" (#9538) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\r\n```\r\n\r\n## Expected  behavior\r\nThe F# compiler runs on published SDK image. A couple of simple solutions are:\r\n- install `bash` on the Alpine SDK image\r\n- change the shell script to not be bash specific\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine sh /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\r\n/usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh: line 9: syntax error: bad substitution\r\n```\r\n\r\n## Actual behavior\r\n```\r\nenv: can't execute 'bash': No such file or directory\r\n```\r\nI can't build any F# projects without installing `bash` first. Workaround:\r\n```\r\ndocker run --rm microsoft/dotnet:2.1-sdk-alpine sh -c \"apk update; apk add bash; /usr/share/dotnet/sdk/2.1.301/FSharp/RunFsc.sh\"\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\ncc @KevinRansom \r\n\r\n\r\n\r\n"},{"Id":"9222749706","Type":"IssuesEvent","CreatedAt":"2019-03-12T00:12:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9667","RelatedDescription":"Closed issue \"Question: Support for njsproj\" (#9667) at dotnet/cli","RelatedBody":"Hey,\r\n\r\nI personally like splitting stuffs like API and frontend.\r\nWould be nice feature to have the .njsproj support, that we can create a SPA website without any C#/VB code and use one build system.\r\n\r\nRegards,\r\nTheAifam5\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9222745706","Type":"IssuesEvent","CreatedAt":"2019-03-12T00:11:34","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10310","RelatedDescription":"Closed issue \"dotnet publish failed for SCD : Unable to copy the project dlls and documentation files\" (#10310) at dotnet/cli","RelatedBody":"# Issue \r\ndotnet publish from CLI fails with error message \r\n\r\n**error MSB3030: Could not copy the file \"obj\\Release\\netcoreapp2.1\\win-x64\\Inventory.pdb\"**\r\n**error MSB3030: Could not copy the file \"obj\\Release\\netcoreapp2.1\\win-x64\\Inventory.dll**\r\n**error MSB3030: Could not copy the file \"bin\\Release\\netcoreapp2.1\\win-x64\\Inventory.xml**\r\n\r\n## Behavior from Visual studio publish\r\n*VS publish copies the application files (pdb, dlls, xml...) at one level below $(PublishDir) and the SCD publish works as expected. \r\n![image](https://user-images.githubusercontent.com/15382196/48280082-2a9bc600-e418-11e8-8ff1-5ddc263b1d34.png)\r\n\r\n## Hack for CLI publish\r\nIf I write a prepublish script and copy the dll, pdb and xml to onle level below $(PublishDir), the self contained publish will work from dotnet cli.\r\n\r\n## Additional Data\r\ndotnet --info \r\n 1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n**Step: 1**\r\ndotnet build\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\n**Step 2:**\r\nThis command ran from the the folder where the *.csproj resides\r\n**_dotnet publish -c Release -r win-x64 --self-contained -o D:\\Test\\Publish\\inventoryService_**\r\n\r\n**Error:**\r\nC:\\Program Files\\dotnet\\sdk\\2.1.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"obj\\Release\\netcoreapp2.1\\win-x64\\Inventory.pdb\" because it was not found. [<<Removedpath>>\\inventory\\Inventory.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"obj\\Release\\netcoreapp2.1\\win-x64\\Inventory.dll\" because it was not found. [<<Removedpath>>\\inventory\\Inventory.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.403\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(168,5): error MSB3030: Could not copy the file \"bin\\Release\\netcoreapp2.1\\win-x64\\Inventory.xml\" because it was not found. [<<Removedpath>>\\inventory\\Inventory.csproj]\r\n\r\n**csproj file settings (using shared assembly info) edited for clean look**\r\n\r\n-  TargetFramework- netcoreapp2.1\r\n-  AssemblyName Inventory\r\n-   RootNamespace Inventory\r\n-   GenerateAssemblyInfo>false\r\n-   GeneratePackageOnBuild>true\r\n-  GenerateAssemblyCompanyAttribute>false\r\n-   GenerateAssemblyCopyrightAttribute>false\r\n-   GenerateAssemblyFileVersionAttribute>false\r\n- GenerateAssemblyInformationalVersionAttribute>false\r\n-  GenerateAssemblyVersionAttribute>false\r\n\r\n\r\n  "},{"Id":"9222544405","Type":"IssuesEvent","CreatedAt":"2019-03-11T23:19:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10942","RelatedDescription":"Closed issue \"The 'dotnet build' command hangs when building a specific code\" (#10942) at dotnet/cli","RelatedBody":"The following code will cause the `dotnet build` command to hang:\r\n```\r\n class ListItem {\r\n            public ListItem Prev { get; set; }\r\n            public ListItem Next { get; set; }\r\n        }\r\n        void ArrangeNonOverlapping(IList<ListItem> labels) {\r\n            List<ListItem> actualLabels = new List<ListItem>(labels);\r\n            ListItem prev = null;\r\n            ListItem next = null;\r\n            for (int i = 0; i < labels.Count; i++) {\r\n                ListItem label = actualLabels[i];\r\n                label.Prev = prev;\r\n                label.Next = next;\r\n                if (prev != null)\r\n                    prev.Next = label;\r\n                if (next != null)\r\n                    next.Prev = label;\r\n            }\r\n        }\r\n```\r\nThere is no issue when this code is built within Visual Studio\r\n\r\n## Steps to reproduce\r\nI have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n\r\n1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n2) cd netcore3_dotnetbuildhangs\r\n2) dotnet build\r\n\r\n## Expected  behavior\r\nThe ```dotnet  build``` command successfully builds the project\r\n\r\n## Actual behavior\r\nThe ```dotnet  build``` command hangs\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010591\r\n Commit:    6cb32d53bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010591\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27503-9\r\n  Commit:  04c13d860a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010591 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9222444340","Type":"IssuesEvent","CreatedAt":"2019-03-11T22:55:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10966","RelatedDescription":"Closed issue \"dotnet --info shows runtimes and sdks twice\" (#10966) at dotnet/cli","RelatedBody":"Reopened issue (was: #10479)\r\n\r\n## Steps to reproduce\r\n\r\n1. Ensure that the \"Path\" environment variable contains \"c:\\program files\\dotnet\" (with the same casing)\r\n2. dotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## What I found out\r\n\r\nWhen I change the \"Path\" environment variable to use \"C:\\Program Files\\dotnet\", then everything works as expected. It seems that there is a case-sensitive `Distinct` list of SDK paths even though it should be case-insensitive on Windows.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9214126865","Type":"IssuesEvent","CreatedAt":"2019-03-10T17:28:30","Actor":"bartonjs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099) at dotnet/standard","RelatedBody":"Provide elliptic curve cryptography? "},{"Id":"9213498139","Type":"IssuesEvent","CreatedAt":"2019-03-10T12:36:28","Actor":"jinyuttt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Opened issue \"Elliptic Curve Cryptography\" (#1099) at dotnet/standard","RelatedBody":"Provide elliptic curve cryptography? "},{"Id":"9209932125","Type":"PullRequestEvent","CreatedAt":"2019-03-09T00:32:28","Actor":"stephentoub","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Merged pull request \"Add dummy field to TypedReference\" (#1098) at dotnet/standard","RelatedBody":"cc: @terrajobst "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9223730130","Type":"IssuesEvent","CreatedAt":"2019-03-12T04:59:50","Actor":"wizofaus","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35977","RelatedDescription":"Opened issue \"HttpClient doesn't always call through HttpMessageInvoker.SendAsync( )\" (#35977) at dotnet/corefx","RelatedBody":"HttpMessageInvoker defines `virtual Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`.\r\nHttpClient then overrides this, and provides some a convenience function where the cancellationToken defaults to None, but it does NOT call the virtual function `SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`. This means if you derive from HttpClient and override `SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`  (for mocking or other purposes), any code that calls `HttpClient.SendAsync(HttpRequestMessage message)` doesn't use the overridden version.  It would be a minor and surely sensible change to the latter function to call via the virtual function (in fact, surely it would be safe just to specify a default parameter value for `cancellationToken`?).   As it is currently, I have to ensure any code that uses HttpClient.SendAsync always specifies the cancellation token.\r\n"},{"Id":"9223312456","Type":"PullRequestEvent","CreatedAt":"2019-03-12T02:53:08","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35958","RelatedDescription":"Merged pull request \"Don't allocate a stack\" (#35958) at dotnet/corefx","RelatedBody":"- Avoid an extra object allocation by using a struct based stack\r\n"},{"Id":"9223283642","Type":"IssuesEvent","CreatedAt":"2019-03-12T02:44:56","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35976","RelatedDescription":"Opened issue \"Add flexible ISO 8601 support to Utf8Parser/Formatter (and beyond?)\" (#35976) at dotnet/corefx","RelatedBody":"_This proposal stems from a discussion (https://github.com/dotnet/coreclr/pull/22999) regarding adding a new format specifier “I” to the UTF8 DateTime(Offset) parser (and subsequently formatter) for ISO 8601 strings. The new format was to be used by the `Utf8JsonReader/Writer`.\r\nGiven feedback, it is clear that adding a new format specifier requires further investigation and design.\r\nThe workaround for the `Utf8JsonReader/Writer` was to implement the parsing and formatting logic internally._\r\n\r\nWe are looking to add performant UTF-8 `DateTime(Offset)` read/write support (https://github.com/dotnet/corefx/issues/34690, https://github.com/dotnet/corefx/issues/34576) to the `Utf8JsonReader/Writer` for the following ISO 8601 profile:   \r\n\r\n`YYYY-MM-DD[Thh:mm[:ss[.s]][TZD]]` \r\n\r\nwhere:   \r\n\r\n`YYYY` = four-digit year   \r\n`MM` = two-digit month (01=January, etc.)   \r\n`DD` = two-digit day of month (01 through 31)   \r\n`T` = ‘T’ or ‘ ‘   \r\n`hh` = two digits of hour (00 through 23) (am/pm NOT allowed)   \r\n`mm` = two digits of minute (00 through 59)   \r\n`ss` = two digits of second (00 through 59)   \r\n`s` = one or more digits representing a decimal fraction of a second   \r\n`TZD` = time zone designator (Z or +hh:mm or -hh:mm or +hhmm or –hhmm or +hh or -hh)   \r\n\r\n### Rationale and Usage  \r\n\r\nISO 8601 is an unambiguous and prolific date and time standard, important for interoping with different systems/languages.  \r\n\r\nAs part of 3.0 we are adding the new `Utf8JsonReader/Writer/Document` types. We have implemented `(Try)GetDateTime(Offset)` and `WriteString(Value)` methods on the Json Reader/Writer types (https://github.com/dotnet/corefx/pull/35903, https://github.com/dotnet/corefx/pull/35966) to read and write ISO 8601 `DateTime(Offset)` strings. The parsing/formatting logic  is currently internal to the types: \r\n\r\n`Utf8JsonReader`\r\nhttps://github.com/dotnet/corefx/blob/ef1b1835a8459cee50d895b1e2040bb2336eeeda/src/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.Date.cs#L43-L357 \r\n\r\n`Utf8JsonWriter`\r\nhttps://github.com/dotnet/corefx/blob/52f3ad9f5f1276833fe8f53c79b5a995c8865df9/src/System.Text.Json/src/System/Text/Json/Writer/JsonWriterHelper.Date.cs#L22-L126\r\n\r\nThe proposal for adding ISO 8601 support is to add a new custom format specifier to the Utf8Parser/Formatter for the `(Try)GetDateTime(Offset)` methods to depend on (in place of the internal logic) with the following specifications.  This will be particularly beneficial if there is a need for flexible ISO 8601 processing beyond Json.  \r\n\r\n ### API (No changes)  \r\nAPI methods for DateTime reading and writing have already been approved. \r\n\r\n```C#   \r\npublic ref partial struct Utf8JsonReader   \r\n{ \r\n    public DateTime GetDateTime(); \r\n    public DateTimeOffset GetDateTimeOffset(); \r\n    public bool TryGetDateTime(out DateTime value); \r\n    public bool TryGetDateTimeOffset(out DateTimeOffset value); \r\n}   \r\n\r\npublic ref partial struct Utf8JsonWriter   \r\n{   \r\n    public void WriteString(System.ReadOnlySpan<byte> utf8PropertyName, System.DateTime value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<byte> utf8PropertyName, System.DateTimeOffset value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<char> propertyName, System.DateTime value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<char> propertyName, System.DateTimeOffset value, bool escape = true) { } \r\n    public void WriteStringValue(System.DateTime value) { } \r\n    public void WriteStringValue(System.DateTimeOffset value) { }  \r\n}   \r\n\r\npublic readonly partial struct JsonElement   \r\n{ \r\n    public DateTime GetDateTime(); \r\n    public DateTimeOffset GetDateTimeOffset(); \r\n    public bool TryGetDateTime(out DateTime value); \r\n    public bool TryGetDateTimeOffset(out DateTimeOffset value);   \r\n}   \r\n```   \r\n\r\n  These methods are could use the already existing `Utf8Parser/Formatter` types for parsing and formatting `DateTime` data to replace the internally implemented parse/format logic:  \r\n\r\n```C#  \r\npublic static partial class Utf8Parser  \r\n{ \r\n    public static bool TryParse(System.ReadOnlySpan<byte> source, out System.DateTime value, out int bytesConsumed, char standardFormat = '\\0') { throw null; } \r\n    public static bool TryParse(System.ReadOnlySpan<byte> source, out System.DateTimeOffset value, out int bytesConsumed, char standardFormat = '\\0') { throw null; }  \r\n}  \r\n\r\npublic static partial class Utf8Formatter  \r\n{ \r\n    public static bool TryFormat(System.DateTime value, System.Span<byte> destination, out int bytesWritten, System.Buffers.StandardFormat format = default(System.Buffers.StandardFormat)) { throw null; } \r\n    public static bool TryFormat(System.DateTimeOffset value, System.Span<byte> destination, out int bytesWritten, System.Buffers.StandardFormat format = default(System.Buffers.StandardFormat)) { throw null; }  \r\n}  \r\n```  \r\n\r\n### Details  \r\nOf note are the `format` and `standardFormat` parameters of the `TryParse` and `TryFormat` methods of the Utf8Parser/Formatter. The current options for the format are “G”/standard, “O”, and “R”. Of these, only “O” implements a profile of the ISO 8601 standard, the strict Round-trip format specifier: `yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK`. Most ISO 8601 adopters do not use this profile. Thus, it is beneficial to implement a new format which is more permissive and also very performant. We can call it “I”.  \r\n\r\n### Open Questions  \r\n- Outside of Json, do we have a need for UTF-8 ISO support?  \r\n- To what extent do we wish to support ISO 8601? Is the proposed profile sufficient? There are some variants which support using commas instead of periods etc. \r\n- If we are only supporting ISO 8601 for Json, should it remain as an implementation internal to the Utf8JsonReader/Writer types rather than rolling up to the `Utf8Parser/Formatter` types? \r\n- If ISO 8601 should be implemented on the `Utf8Parser/Formatter` types, should it be as a new API (e.g. `TryParseAsISO`/`TryFormatToISO` ) rather than a new format specifier (the `format`/`standardFormat` arguments)? \r\n- If we're adding ISO 8601 support to `Utf8Parser/Formatter`, do we also need/want to roll up support to `DateTime{Offset}.{Try}Parse/Format/ToString`?  \r\n\r\n### Pull Requests \r\n- The initial PR with the proposed changes: https://github.com/dotnet/coreclr/pull/22999. \r\n- The PR adding internal ISO 8601 parsing logic to `Utf8JsonReader`: https://github.com/dotnet/corefx/pull/35903. \r\n- The PR adding internal ISO 8601 formatting logic to the `Utf8JsonWriter` type: https://github.com/dotnet/corefx/pull/35903. "},{"Id":"9223277794","Type":"IssuesEvent","CreatedAt":"2019-03-12T02:43:28","Actor":"mohanrkrishna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35975","RelatedDescription":"Opened issue \"EF Core Begin Transaction | The connection is broken and recovery is not possible\" (#35975) at dotnet/corefx","RelatedBody":"Hi - \r\nI am building .Net core app (2.2) using EF Core/SQL server. Defined repository classes for each model , each repository class has dBContext member (Of Type dBContext class) to perform dB operations.  In startup class defined DI and using options for dBContext\r\n\r\n`services.AddDbContext<AppDbContext>(options => options.UseSqlServer(Configuration));`\r\n\r\nEverything explained below works fine with out explicit transaction(like BeginTransaction) -> \r\n   Adding a row to table1& table2 and importing 100 rows to staging table , running SQL query using \r\n   ExecuteSqlCommand \r\n\r\nBut when i try to wrap all above in EF Core transaction using context.Database.BeginTransaction , getting below error. SQL server is up & running as same code works with out explicit transaction. Please assist how to troubleshoot & resolve this issue. Thanks very much!\r\n\r\n`The connection is broken and recovery is not possible.  The connection is marked by the server as unrecoverable.  No attempt was made to restore the connection.;\r\n` `at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) ` "},{"Id":"9223263744","Type":"IssuesEvent","CreatedAt":"2019-03-12T02:39:42","Actor":"bigworld12","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35974","RelatedDescription":"Opened issue \"wrong .ToString behavior for floating point types\" (#35974) at dotnet/corefx","RelatedBody":"double.ToString and float.ToString have a wrong behavior in the following cases\r\n```cs\r\nConsole.WriteLine($\"Expected 0, got : {((double)(-0.0)).ToString()}\"); //prints \"-0\"\r\nConsole.WriteLine($\"Expected 0, got : {((float)(-0.0)).ToString()}\"); //prints \"-0\"\r\nConsole.WriteLine($\"Expected 0, got : {((decimal)(-0.0)).ToString()}\"); //Correct behavior, prints \"0\"\r\n```"},{"Id":"9222991787","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:23:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/8012","RelatedDescription":"Closed issue \"[CoreRT] Behavior mismatch between CoreCLR and CoreRT Streams in async methods\" (#8012) at dotnet/corefx","RelatedBody":"**TL;DR** This will throw a `TaskCanceledException` in CoreCLR, while it will throw a `OperationCanceledException` in CoreRT:\n\n``` cs\nawait Stream.Null.FlushAsync(new CancellationToken(true));\n```\n\n---\n\nRecently noticed that several async methods in `Stream` and `MemoryStream` have differing implementations when it comes to cancellation tokens in the CoreCLR/CoreFX repos. For example, [here](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/IO/Stream.cs#L894) is the source code of `NullStream.FlushAsync` in CoreCLR, and [here](https://github.com/dotnet/corefx/blob/master/src/System.IO/src/System/IO/Stream.cs#L412) it is in CoreFX. Attempting to await the previous results in a `TaskCanceledException`, and the latter an `OperationCanceledException`.\n\nThe fix would be to remove the `ThrowIfCancellationRequested` calls (along with all of the `pragmas`) and replace them with an `IsCancellationRequested` - `Task.FromCanceled` pattern.\n\n@stephentoub, do you know of any reason why the behaviors should differ? If not then I can submit a PR (along with tests) to fix this.\n"},{"Id":"9222970465","Type":"IssuesEvent","CreatedAt":"2019-03-12T01:17:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/3995","RelatedDescription":"Closed issue \"Add tests for expression interpreter\" (#3995) at dotnet/corefx","RelatedBody":"Cross-check expression interpreter against expression compiler by using a catalog of expressions.\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9223827986","Type":"PullRequestEvent","CreatedAt":"2019-03-12T05:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33979","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#33979) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223656870","Type":"PullRequestEvent","CreatedAt":"2019-03-12T04:35:47","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34030","RelatedDescription":"Opened pull request \"publish RoslynDeployment vsix to Roslyn vsix myget feed\" (#34030) at dotnet/roslyn","RelatedBody":"publish RoslynDeployment vsix to myget feed.\r\n\r\nwe used to publish roslyn insider vsix but at some point when we changed name, it looks like we stopped publishing the actual vsix people can use to dogfood nightly roslyn.\r\n\r\n"},{"Id":"9223639474","Type":"PullRequestEvent","CreatedAt":"2019-03-12T04:30:06","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33980","RelatedDescription":"Merged pull request \"Merge master to features/readonly-members\" (#33980) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223619989","Type":"PullRequestEvent","CreatedAt":"2019-03-12T04:23:28","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33955","RelatedDescription":"Merged pull request \"Merge dev16.0-vs-deps to master-vs-deps\" (#33955) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223599997","Type":"PullRequestEvent","CreatedAt":"2019-03-12T04:16:50","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34029","RelatedDescription":"Opened pull request \"Track nullable state through implicit and explicit reference and tuple conversions\" (#34029) at dotnet/roslyn","RelatedBody":"Fixes #29977."},{"Id":"9223594203","Type":"PullRequestEvent","CreatedAt":"2019-03-12T04:14:52","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33932","RelatedDescription":"Merged pull request \"Merge dev16.0 to master\" (#33932) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223432822","Type":"PullRequestEvent","CreatedAt":"2019-03-12T03:26:24","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34028","RelatedDescription":"Opened pull request \"IDE benchmarks\" (#34028) at dotnet/roslyn","RelatedBody":"Here's the results from RegexClassifierBanchmarks:\r\n\r\n|               Method | StringLength | RepeatElement |      Mean |     Error |    StdDev |    Median | Scaled | ScaledSD |     Gen 0 |  Allocated |\r\n|--------------------- |------------- |-------------- |----------:|----------:|----------:|----------:|-------:|---------:|----------:|-----------:|\r\n|     'String literal' |            0 |             \\ |  4.615 ms | 0.1496 ms | 0.4388 ms |  4.737 ms |   1.00 |     0.00 |         - |     616 KB |\r\n| 'Regular expression' |            0 |             \\ |  7.236 ms | 0.4300 ms | 1.2680 ms |  6.437 ms |   1.58 |     0.32 | 1000.0000 |   832.1 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |            0 |             a |  4.712 ms | 0.1480 ms | 0.4248 ms |  4.765 ms |   1.00 |     0.00 |         - |     608 KB |\r\n| 'Regular expression' |            0 |             a |  7.990 ms | 0.4173 ms | 1.2304 ms |  7.274 ms |   1.71 |     0.31 | 1000.0000 |  832.54 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |         1000 |             \\ |  6.815 ms | 0.3909 ms | 1.1526 ms |  6.133 ms |   1.00 |     0.00 | 1000.0000 |  835.71 KB |\r\n| 'Regular expression' |         1000 |             \\ | 10.973 ms | 0.7669 ms | 2.2613 ms | 10.601 ms |   1.65 |     0.43 | 1000.0000 | 1139.77 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |         1000 |             a |  4.503 ms | 0.1523 ms | 0.4466 ms |  4.280 ms |   1.00 |     0.00 |         - |  668.02 KB |\r\n| 'Regular expression' |         1000 |             a |  8.417 ms | 0.5412 ms | 1.5957 ms |  7.455 ms |   1.89 |     0.40 | 1000.0000 |  988.09 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |        10000 |             \\ |  7.561 ms | 0.1443 ms | 0.1350 ms |  7.538 ms |   1.00 |     0.00 | 1000.0000 | 3165.84 KB |\r\n| 'Regular expression' |        10000 |             \\ | 30.495 ms | 1.1173 ms | 3.1330 ms | 29.072 ms |   4.03 |     0.42 | 1000.0000 | 4413.26 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |        10000 |             a |  7.767 ms | 0.3726 ms | 1.0985 ms |  7.022 ms |   1.00 |     0.00 | 1000.0000 | 1196.38 KB |\r\n| 'Regular expression' |        10000 |             a | 19.597 ms | 1.3913 ms | 4.1021 ms | 16.807 ms |   2.57 |     0.65 | 1000.0000 | 2524.56 KB |"},{"Id":"9223387798","Type":"PullRequestEvent","CreatedAt":"2019-03-12T03:13:56","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33955","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223387382","Type":"PullRequestEvent","CreatedAt":"2019-03-12T03:13:55","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33955","RelatedDescription":"Closed pull request \"Merge dev16.0-vs-deps to master-vs-deps\" (#33955) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223385132","Type":"PullRequestEvent","CreatedAt":"2019-03-12T03:13:10","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33932","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9223384575","Type":"PullRequestEvent","CreatedAt":"2019-03-12T03:12:57","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33932","RelatedDescription":"Closed pull request \"Merge dev16.0 to master\" (#33932) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9222615583","Type":"PullRequestEvent","CreatedAt":"2019-03-11T23:37:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7149","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7149) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe"},{"Id":"9221864157","Type":"PullRequestEvent","CreatedAt":"2019-03-11T21:05:36","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7149","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7149) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9221811465","Type":"PullRequestEvent","CreatedAt":"2019-03-11T20:57:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7147","RelatedDescription":"Merged pull request \"Replace Delegate.CreateDelegate\" (#7147) at dotnet/corert","RelatedBody":"Replacing this with a pattern that is easier to statically analyze. We use the GetType/GetMethod/CreateDelegate pattern in several places already."},{"Id":"9221806407","Type":"PullRequestEvent","CreatedAt":"2019-03-11T20:56:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7148","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7148) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks"},{"Id":"9220162178","Type":"IssuesEvent","CreatedAt":"2019-03-11T16:53:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/2351","RelatedDescription":"Closed issue \"Non-virtual calls to abstract but MethodImpl'd methods\" (#2351) at dotnet/corert","RelatedBody":"```\r\nLoader\\classloader\\regressions\\429802\\CMain\r\n```\r\n\r\nApparently, doing a *non-virtual* call to an abstract method that has a MethodImpl on the same type should land on the MethodImpl.\r\n\r\nThis might be related to leftover work in #366. The CoreCLR sources seem to suggest we should have the same behavior for `jmp method`."},{"Id":"9219380610","Type":"PullRequestEvent","CreatedAt":"2019-03-11T15:18:37","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7148","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7148) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9219340980","Type":"PullRequestEvent","CreatedAt":"2019-03-11T15:14:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7140","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7140) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft @EgorBo"},{"Id":"9219328015","Type":"PullRequestEvent","CreatedAt":"2019-03-11T15:12:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7147","RelatedDescription":"Opened pull request \"Replace Delegate.CreateDelegate\" (#7147) at dotnet/corert","RelatedBody":"Replacing this with a pattern that is easier to statically analyze. We use the GetType/GetMethod/CreateDelegate pattern in several places already."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9219531259","Type":"IssuesEvent","CreatedAt":"2019-03-11T15:36:05","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Closed issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014) at dotnet/sdk","RelatedBody":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n\r\nI am using Windows Server 2016 1607 with Docker basic EE\r\n\r\nThanks,\r\n\r\n"},{"Id":"9218498316","Type":"PullRequestEvent","CreatedAt":"2019-03-11T13:32:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3017","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3017) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-10T16:40:38","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Open PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"419760364","IsPullRequest":false,"CreatedAt":"2019-03-12T01:38:04","Actor":"VincentBu","Number":"23199","RawContent":null,"Title":"[x64] Test failed: ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh ","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_gcstress0xc_tst/111/\r\n\r\n**Failed tests:**\r\nilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh\r\n\r\n**Log:**\r\n```\r\nilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh [FAIL]\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.sh: line 252: 28561 Segmentation fault      (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        /n/nReturn code:      1/nRaw output file:      /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Reports/ilasm.System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun MethodImplOptionsTests.exe ''\r\n        AggressiveOptimizationTest\r\n        Expected: 100\r\n        Actual: 139\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/Tests/Core_Root/n> /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.x64.Checked/ilasm/System/Runtime/CompilerServices/MethodImplOptionsTests/MethodImplOptionsTests.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu/bin/tests/Linux.x64.Checked/TestWrappers/ilasm.System/ilasm.System.XUnitWrapper.cs(109,0): at ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23199","RelatedDescription":"Open issue \"[x64] Test failed: ilasm_System._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_._Runtime_CompilerServices_MethodImplOptionsTests_MethodImplOptionsTests_sh \" (#23199)"},{"Id":"419758291","IsPullRequest":false,"CreatedAt":"2019-03-12T01:27:35","Actor":"VincentBu","Number":"23198","RawContent":null,"Title":"[x64] Test failed: System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_baseline/864/\r\n\r\n**Failed tests:**\r\nSystem.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial\r\nSystem.Text.Tests.EncoderConvert2.EncoderUTF8ConvertUnicodeCharArrayPartial\r\nSystem.Text.Tests.EncoderConvert2.EncoderASCIIConvertMixedASCIIUnicodeCharArrayPartial\r\n\r\n**Log:**\r\n```\r\nSystem.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/System.Text.Encoding/tests/Encoder/EncoderConvert2.cs(263,0): at System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial()\r\n      System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertUnicodeCharArrayPartial [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/System.Text.Encoding/tests/Encoder/EncoderConvert2.cs(220,0): at System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertUnicodeCharArrayPartial()\r\n      System.Text.Tests.EncoderConvert2.EncoderASCIIConvertMixedASCIIUnicodeCharArrayPartial [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 1\r\n        Actual:   2\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_baseline/_/fx/src/System.Text.Encoding/tests/Encoder/EncoderConvert2.cs(241,0): at System.Text.Tests.EncoderConvert2.EncoderASCIIConvertMixedASCIIUnicodeCharArrayPartial()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/23198","RelatedDescription":"Open issue \"[x64] Test failed: System.Text.Tests.EncoderConvert2.EncoderUTF8ConvertMixedASCIIUnicodeCharArrayPartial\" (#23198)"},{"Id":"419756237","IsPullRequest":false,"CreatedAt":"2019-03-12T01:18:09","Actor":"VincentBu","Number":"23197","RawContent":null,"Title":"[x64] Assertion failed 'cls != NO_CLASS_HANDLE'","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_centos7.1_r2r_jitstress1_tst/178/\r\n\r\n**log:**\r\n```\r\nAssert failure(PID 68338 [0x00010af2], Thread: 68338 [0x10af2]): Assertion failed 'cls != NO_CLASS_HANDLE' in 'JIT.HardwareIntrinsics.X86.SimpleUnaryOpTest__ConvertToVector128Int16Byte:RunClsVarScenario():this' (IL size 56)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23197","RelatedDescription":"Open issue \"[x64] Assertion failed 'cls != NO_CLASS_HANDLE'\" (#23197)"},{"Id":"419754227","IsPullRequest":false,"CreatedAt":"2019-03-12T01:08:45","Actor":"VincentBu","Number":"23196","RawContent":null,"Title":"[x64] Unable to produce a script file","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/checked_ubuntu/29850/\r\n\r\n**Log:**\r\n```\r\nFATAL: Unable to produce a script file\r\nAlso:   hudson.remoting.Channel$CallSiteStackTrace: Remote call to ubuntu1404-20180321-4f7042\r\n\t\tat hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1693)\r\n\t\tat hudson.remoting.UserResponse.retrieve(UserRequest.java:310)\r\n\t\tat hudson.remoting.Channel.call(Channel.java:908)\r\n\t\tat hudson.FilePath.act(FilePath.java:986)\r\n\t\tat hudson.FilePath.act(FilePath.java:975)\r\n\t\tat hudson.FilePath.createTextTempFile(FilePath.java:1363)\r\n\t\tat hudson.tasks.CommandInterpreter.createScriptFile(CommandInterpreter.java:162)\r\n\t\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:94)\r\n\t\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:66)\r\n\t\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\t\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\t\tat hudson.model.Build$BuildExecution.build(Build.java:206)\r\n\t\tat hudson.model.Build$BuildExecution.doRun(Build.java:163)\r\n\t\tat hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)\r\n\t\tat hudson.model.Run.execute(Run.java:1724)\r\n\t\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\t\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\t\tat hudson.model.Executor.run(Executor.java:429)\r\njava.io.IOException: No space left on device\r\n\tat java.io.FileOutputStream.writeBytes(Native Method)\r\n\tat java.io.FileOutputStream.write(FileOutputStream.java:326)\r\n\tat sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\r\n\tat sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:316)\r\n\tat sun.nio.cs.StreamEncoder.close(StreamEncoder.java:149)\r\n\tat java.io.OutputStreamWriter.close(OutputStreamWriter.java:233)\r\n\tat hudson.FilePath$17.invoke(FilePath.java:1380)\r\n\tat hudson.FilePath$17.invoke(FilePath.java:1363)\r\n\tat hudson.FilePath$FileCallableWrapper.call(FilePath.java:2760)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:207)\r\n\tat hudson.remoting.UserRequest.perform(UserRequest.java:53)\r\n\tat hudson.remoting.Request$2.run(Request.java:358)\r\n\tat hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused: java.io.IOException: remote file operation failed: /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu at hudson.remoting.Channel@520c816:ubuntu1404-20180321-4f7042\r\n\tat hudson.FilePath.act(FilePath.java:993)\r\n\tat hudson.FilePath.act(FilePath.java:975)\r\n\tat hudson.FilePath.createTextTempFile(FilePath.java:1363)\r\nCaused: java.io.IOException: Failed to create a temp file on /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu\r\n\tat hudson.FilePath.createTextTempFile(FilePath.java:1386)\r\n\tat hudson.tasks.CommandInterpreter.createScriptFile(CommandInterpreter.java:162)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:94)\r\n\tat hudson.tasks.CommandInterpreter.perform(CommandInterpreter.java:66)\r\n\tat hudson.tasks.BuildStepMonitor$1.perform(BuildStepMonitor.java:20)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)\r\n\tat hudson.model.Build$BuildExecution.build(Build.java:206)\r\n\tat hudson.model.Build$BuildExecution.doRun(Build.java:163)\r\n\tat hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:504)\r\n\tat hudson.model.Run.execute(Run.java:1724)\r\n\tat hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)\r\n\tat hudson.model.ResourceController.execute(ResourceController.java:97)\r\n\tat hudson.model.Executor.run(Executor.java:429)\r\nBuild step 'Execute shell' marked build as failure\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23196","RelatedDescription":"Open issue \"[x64] Unable to produce a script file\" (#23196)"},{"Id":"419742776","IsPullRequest":true,"CreatedAt":"2019-03-12T00:15:28","Actor":"AaronRobinsonMSFT","Number":"23195","RawContent":null,"Title":"Default Interface COM testing project","State":"open","Body":"Add tests for native COM client consuming managed COM server that\r\n  implements interfaces with default implementation.\r\n\r\nMove ComSmartPtr to Servers.h so it can be shared.\r\n\r\ncc @MichalStrehovsky @jkoritzinsky @davidwrighton ","Url":"https://github.com/dotnet/coreclr/pull/23195","RelatedDescription":"Open PR \"Default Interface COM testing project\" (#23195)"},{"Id":"419683354","IsPullRequest":true,"CreatedAt":"2019-03-12T00:09:09","Actor":"Dotnet-GitSync-Bot","Number":"23188","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/23188","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#23188)"},{"Id":"419716543","IsPullRequest":false,"CreatedAt":"2019-03-11T22:35:14","Actor":"gfoidl","Number":"23194","RawContent":null,"Title":"Reference to static data with ROSpan not kept in register","State":"open","Body":"Repro:\r\n```c#\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static int Main()\r\n        {\r\n            ref byte map = ref MemoryMarshal.GetReference(s_map);\r\n            int sum = 0;\r\n\r\n            for (ulong i = 0; i < 3; ++i)\r\n            {\r\n                sum += Unsafe.Add(ref map, (IntPtr)i);\r\n            }\r\n\r\n            return sum;\r\n        }\r\n\r\n        private static ReadOnlySpan<byte> s_map => new byte[] { 1, 2, 3 };\r\n    }\r\n}\r\n``` \r\n\r\nResults in\r\n```asm\r\n; Assembly listing for method Program:Main():int\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Unix\r\n; optimized code\r\n; ...\r\nG_M37567_IG01:\r\n       55                   push     rbp\r\n       488BEC               mov      rbp, rsp\r\n       90                   nop      \r\n\r\nG_M37567_IG02:\r\n       33C0                 xor      eax, eax\r\n       33FF                 xor      rdi, rdi\r\n\r\nG_M37567_IG03:\r\n       48BE0FCCAA52CE7F0000 mov      rsi, 0x7FCE52AACC0F\r\n       400FB63437           movzx    rsi, byte  ptr [rdi+rsi]\r\n       03C6                 add      eax, esi\r\n       48FFC7               inc      rdi\r\n       4883FF03             cmp      rdi, 3\r\n       72E6                 jb       SHORT G_M37567_IG03\r\n\r\nG_M37567_IG04:\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\n; Total bytes of code 37, prolog size 5 for method Program:Main():int\r\n; ============================================================\r\n```\r\nSo in each iteration the static data is read.\r\n\r\nIdeally the JIT would keep the ref to the static data in a register and emit something like this:\r\n```diff\r\nG_M37567_IG01:\r\n       55                   push     rbp\r\n       488BEC               mov      rbp, rsp\r\n       90                   nop      \r\n\r\nG_M37567_IG02:\r\n       33C0                 xor      eax, eax\r\n       33FF                 xor      rdi, rdi\r\n+      48BE0FCCAA52CE7F0000 mov      rcx, 0x7FCE52AACC0F\r\n\r\nG_M37567_IG03:\r\n-      48BE0FCCAA52CE7F0000 mov      rsi, 0x7FCE52AACC0F\r\n-      400FB63437           movzx    rsi, byte  ptr [rdi+rsi]\r\n+      400FB63437           movzx    rsi, byte  ptr [rcx+rdi]\r\n       03C6                 add      eax, esi\r\n       48FFC7               inc      rdi\r\n       4883FF03             cmp      rdi, 3\r\n       72E6                 jb       SHORT G_M37567_IG03\r\n\r\nG_M37567_IG04:\r\n       5D                   pop      rbp\r\n       C3                   ret          \r\n```\r\n\r\nCf. https://github.com/dotnet/corefx/pull/34529#issuecomment-471736160","Url":"https://github.com/dotnet/coreclr/issues/23194","RelatedDescription":"Open issue \"Reference to static data with ROSpan not kept in register\" (#23194)"},{"Id":"419704446","IsPullRequest":true,"CreatedAt":"2019-03-11T22:00:51","Actor":"CarolEidt","Number":"23193","RawContent":null,"Title":"Fix SIMD handle issues","State":"open","Body":"PR #23052 was overly agressive at applying the provided class handle (which defaults to NO_CLASS_HANDLE). In addition, make a small change to `SIMDIntrinsicWiden`, as it doesn't need to go through the complexity of inferring a class handle when it already exists on the node it's duplicating.\r\n\r\nFix #23159","Url":"https://github.com/dotnet/coreclr/pull/23193","RelatedDescription":"Open PR \"Fix SIMD handle issues\" (#23193)"},{"Id":"419697654","IsPullRequest":false,"CreatedAt":"2019-03-11T21:43:18","Actor":"robertborr","Number":"23192","RawContent":null,"Title":"ToolsError build failures in 'official/dotnet/coreclr/refs/heads/release/3.0' - '20190308.710'","State":"open","Body":"@dotnet-mc-bot commented on [Sat Mar 09 2019](https://github.com/dotnet/core-eng/issues/5443)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=119432\r\n  - **Agent:** a0000JN\r\n  - **Error log:** /root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19128.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(0,0): error : Work item Interop.PInvoke in job 17f8755a-8595-4b7c-b0ff-a927c816f283 has Failed with exit code ...\r\n\r\n@robertborr\r\n\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5443#issuecomment-471614570)\n\nBuild FAILED.\r\n\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19128.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Work item Interop.PInvoke in job 17f8755a-8595-4b7c-b0ff-a927c816f283 has Failed with exit code -3 [/__w/3/s/tests/helixpublishwitharcade.proj]\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19128.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Job '17f8755a-8595-4b7c-b0ff-a927c816f283' has 1 failed work items. [/__w/3/s/tests/helixpublishwitharcade.proj]\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19128.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Work item Interop.PInvoke in job c0f2531e-c6fd-49d2-ade6-50726750b028 has Failed with exit code -3 [/__w/3/s/tests/helixpublishwitharcade.proj]\r\n/root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19128.3/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(67,5): error : Job 'c0f2531e-c6fd-49d2-ade6-50726750b028' has 1 failed work items. [/__w/3/s/tests/helixpublishwitharcade.proj]\r\n    0 Warning(s)\r\n    4 Error(s)\r\n\r\nTime Elapsed 00:17:55.10\r\nBuild failed (exit code '1').\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5443#issuecomment-471615159)\n\nnotify @jashook \n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5443#issuecomment-471742583)\n\ntest failures, class sourcecode, and move to coreclr\n\n","Url":"https://github.com/dotnet/coreclr/issues/23192","RelatedDescription":"Open issue \"ToolsError build failures in 'official/dotnet/coreclr/refs/heads/release/3.0' - '20190308.710'\" (#23192)"},{"Id":"419696953","IsPullRequest":false,"CreatedAt":"2019-03-11T21:41:25","Actor":"Symbai","Number":"23191","RawContent":null,"Title":"Unable to cast int32 to int16","State":"open","Body":"The following code raises an exception claiming it's unable to cast int32 into int16. But the value 81 (0x51) which can be casting into int16 without any problems.\r\n\r\nFails:\r\n```\r\nobject value1 = null;\r\nint val1 = (int) 0x51;\r\nvalue1 = val1;\r\nTest((short) value1); //exception\r\n\r\nstatic void Test(short val){ }\r\n```\r\n\r\nWorks:\r\n```\r\nint value1 = 0;\r\nint val1 = (int) 0x51;\r\nvalue1 = val1;\r\nTest((short) value1);\r\n\r\nstatic void Test(short val){ }\r\n```\r\n\r\nWorks as well but seems completely unnecessary to me:\r\n```\r\nobject value1 = null;\r\nint val1 = (int)0x51;\r\nvalue1 = val1;\r\nint unnecessaryVariable = (int)value1;\r\nTest((short)unnecessaryVariable);\r\n\r\nstatic void Test(short val){ }\r\n```\r\n\r\nWhen the interpreter KNOWS the object variable holds a value of type int32, why does it fails when the 2nd example where the variable is int32 holding a value of type int32 does not fail. Creating a second variable where I explicit cast the object back into an integer works as well, but is kinda messy.","Url":"https://github.com/dotnet/coreclr/issues/23191","RelatedDescription":"Open issue \"Unable to cast int32 to int16\" (#23191)"},{"Id":"419691727","IsPullRequest":false,"CreatedAt":"2019-03-11T21:27:26","Actor":"robertborr","Number":"23190","RawContent":null,"Title":"sourcecode build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190311.71'","State":"open","Body":"@dotnet-mc-bot commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=120418\r\n  - **Agent:** a0000JN\r\n  - **Error log:** /root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19159.2/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(0,0): error : Work item Interop.PInvoke in job 061e9d14-56a9-4c6f-b5ae-905c33f3029c has Failed with exit code ...\r\n\r\n@robertborr\r\n\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452#issuecomment-471735756)\n\ntest failures\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452#issuecomment-471735846)\n\nIssue moved to [dotnet/coreclr #23189](https://github.com/dotnet/coreclr/issues/23189) via [**ZenHub**](https://www.zenhub.com/)\n\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452#issuecomment-471736778)\n\nclass sourcecode and reopen in coreclr\n\n","Url":"https://github.com/dotnet/coreclr/issues/23190","RelatedDescription":"Open issue \"sourcecode build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190311.71'\" (#23190)"},{"Id":"419690595","IsPullRequest":false,"CreatedAt":"2019-03-11T21:24:21","Actor":"robertborr","Number":"23189","RawContent":null,"Title":"sourcecode build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190311.71'","State":"open","Body":"@dotnet-mc-bot commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=120418\r\n  - **Agent:** a0000JN\r\n  - **Error log:** /root/.nuget/packages/microsoft.dotnet.helix.sdk/2.0.0-beta.19159.2/tools/Microsoft.DotNet.Helix.Sdk.MultiQueue.targets(0,0): error : Work item Interop.PInvoke in job 061e9d14-56a9-4c6f-b5ae-905c33f3029c has Failed with exit code ...\r\n\r\n@robertborr\r\n\n\n---\n\n@robertborr commented on [Mon Mar 11 2019](https://github.com/dotnet/core-eng/issues/5452#issuecomment-471735756)\n\ntest failures\n\n","Url":"https://github.com/dotnet/coreclr/issues/23189","RelatedDescription":"Open issue \"sourcecode build failures in 'official/dotnet/coreclr/refs/heads/master' - '20190311.71'\" (#23189)"},{"Id":"419463572","IsPullRequest":true,"CreatedAt":"2019-03-11T20:59:14","Actor":"hughbe","Number":"23174","RawContent":null,"Title":"Fix NRE in EqualStringArrays","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/35942\r\n\r\ninstead of cloning, avoid the null ref\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/23174","RelatedDescription":"Closed or merged PR \"Fix NRE in EqualStringArrays\" (#23174)"},{"Id":"419250282","IsPullRequest":true,"CreatedAt":"2019-03-11T20:58:37","Actor":"dotnet-maestro[bot]","Number":"23170","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19160.5\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19160.5\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview4.19160.8\r\n- Microsoft.Private.CoreFx.NETCoreApp - 4.6.0-preview4.19160.8\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#23170)"},{"Id":"419446223","IsPullRequest":true,"CreatedAt":"2019-03-11T20:58:22","Actor":"MichalStrehovsky","Number":"23173","RawContent":null,"Title":"Fix bad test","State":"closed","Body":"The test was testing that a non-virtual call to an abstract method that is methodimpl on the same type will land in the methodimpl. This behavior is not specced and cannot be hit with any mainstream .NET languages. We are making non-virtual calls to abstract methods throw a BadImageFormatException instead.\r\n\r\nFixes #23096.","Url":"https://github.com/dotnet/coreclr/pull/23173","RelatedDescription":"Closed or merged PR \"Fix bad test\" (#23173)"},{"Id":"419661606","IsPullRequest":true,"CreatedAt":"2019-03-11T20:36:46","Actor":"BruceForstall","Number":"23187","RawContent":null,"Title":"Always archive corefx testresults.xml files","State":"closed","Body":"These were only being archived for successful runs, which is\r\nwhen they are the least interesting. Archive them for all test runs.","Url":"https://github.com/dotnet/coreclr/pull/23187","RelatedDescription":"Closed or merged PR \"Always archive corefx testresults.xml files\" (#23187)"},{"Id":"419642993","IsPullRequest":true,"CreatedAt":"2019-03-11T19:26:05","Actor":"wtgodbe","Number":"23186","RawContent":null,"Title":"Update dependency branch from master to release/3.0","State":"open","Body":"Corresponds to https://github.com/dotnet/versions/pull/445. \r\n\r\nCC @dagood @sbomer @jashook @hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/23186","RelatedDescription":"Open PR \"Update dependency branch from master to release/3.0\" (#23186)"},{"Id":"419642332","IsPullRequest":true,"CreatedAt":"2019-03-11T19:24:19","Actor":"cshung","Number":"23185","RawContent":null,"Title":"Fix issue 23151 (Cleanup TODO introduced by PR #23148)","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23185","RelatedDescription":"Open PR \"Fix issue 23151 (Cleanup TODO introduced by PR #23148)\" (#23185)"},{"Id":"419634504","IsPullRequest":false,"CreatedAt":"2019-03-11T19:04:14","Actor":"jashook","Number":"23184","RawContent":null,"Title":"Unable to crossgen core_root on windows x86 release","State":"open","Body":"There is not much information available other than I cannot repro it locally.","Url":"https://github.com/dotnet/coreclr/issues/23184","RelatedDescription":"Open issue \"Unable to crossgen core_root on windows x86 release\" (#23184)"},{"Id":"419634418","IsPullRequest":true,"CreatedAt":"2019-03-11T19:04:01","Actor":"hanblee","Number":"23183","RawContent":null,"Title":"Update performance-guidelines.md","State":"open","Body":"so that it uses run-xunit-perf.py command. run-xunit-perf.cmd is no longer there.","Url":"https://github.com/dotnet/coreclr/pull/23183","RelatedDescription":"Open PR \"Update performance-guidelines.md\" (#23183)"},{"Id":"419633615","IsPullRequest":true,"CreatedAt":"2019-03-11T19:01:59","Actor":"hoyosjs","Number":"23182","RawContent":null,"Title":"Remove fixed sign tool version","State":"open","Body":"Fixes #23081 \r\n\r\nTested with SignTool version `1.0.0-beta.19159.2` as test signed in https://dev.azure.com/dnceng/internal/_build/results?buildId=120800 and signing step succeeded. Manually downloaded the ARM binaries to verify that SPC is crossgened and signed with a proper Microsoft issued SHA256 cert.\r\n\r\ncc: @RussKeldorph @jashook \r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23182","RelatedDescription":"Open PR \"Remove fixed sign tool version\" (#23182)"},{"Id":"419615465","IsPullRequest":false,"CreatedAt":"2019-03-11T18:18:32","Actor":"stevenbrix","Number":"23181","RawContent":null,"Title":"Accessing auto-property performance regression","State":"open","Body":"Accessing Auto-Properties compared to using a field seems to have regressed in 3.0. \r\n\r\n[Here](https://github.com/dotnet/coreclr/files/2953667/CSharpNetCoreConsolePlayground.zip) is a repro that cross-targets netfx, netcore2.1, and netcore3.0 and shows about an 18% slowdown.","Url":"https://github.com/dotnet/coreclr/issues/23181","RelatedDescription":"Open issue \"Accessing auto-property performance regression\" (#23181)"},{"Id":"419609487","IsPullRequest":true,"CreatedAt":"2019-03-11T18:04:13","Actor":"franksinankaya","Number":"23180","RawContent":null,"Title":"Fix conversion and signedness issues in Event Tracer","State":"open","Body":"@am11 @janvorli @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/23180","RelatedDescription":"Open PR \"Fix conversion and signedness issues in Event Tracer\" (#23180)"},{"Id":"419581152","IsPullRequest":true,"CreatedAt":"2019-03-11T17:02:59","Actor":"franksinankaya","Number":"23179","RawContent":null,"Title":"Correct current script dir detection for GCC","State":"open","Body":"Current path detection was fixed in clang script but skipped in gcc. Copy and paste the solution.","Url":"https://github.com/dotnet/coreclr/pull/23179","RelatedDescription":"Open PR \"Correct current script dir detection for GCC\" (#23179)"},{"Id":"419576097","IsPullRequest":true,"CreatedAt":"2019-03-11T16:52:45","Actor":"sdmaclea","Number":"23178","RawContent":null,"Title":"Extend WindowsEventLog test for EntryPointFilter","State":"open","Body":"Verify EntryPointFilter solves logging problem with native host swallowing exceptions\r\n\r\nWindowsEventLog only look at new entries\r\nWindowsEventLog remove time check\r\n\r\nAdd mechanism to corhost to emulate host swallowing all exceptions","Url":"https://github.com/dotnet/coreclr/pull/23178","RelatedDescription":"Open PR \"Extend WindowsEventLog test for EntryPointFilter\" (#23178)"},{"Id":"419544665","IsPullRequest":true,"CreatedAt":"2019-03-11T15:50:44","Actor":"EgorBo","Number":"23177","RawContent":null,"Title":"Move Enum and MdImport to shared","State":"open","Body":"Also, I replaced half-native `CompareTo` with managed version from CoreRT, is it ok or I should attach benchmarks? (if it looks good - I'll delete the native impl for InternalCompare)\r\nCoreRT implementation uses `EETypePtr` here and there in `Enum` so it's not easy to reuse this implementation (I managed to extract ~40% of common code between CoreCLR and CoreRT and 95% between CoreCLR and Mono).\r\n\r\nNaive [Enum.Mono.cs](https://gist.github.com/EgorBo/3a014bbaea492a36e4713d20252156f7) implementation.\r\n\r\n/cc @marek-safar @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/23177","RelatedDescription":"Open PR \"Move Enum and MdImport to shared\" (#23177)"},{"Id":"419505226","IsPullRequest":false,"CreatedAt":"2019-03-11T14:40:00","Actor":"zcsizmadia","Number":"23176","RawContent":null,"Title":"ThreadPool and GetMinThreads in Linux .NET Core","State":"open","Body":"I am using using .NET Core for Linux in NUMA nodes (64+ cores). It seems the ThreadPool behaves differently under Windows and Linux if the machine has more than 24 cores. Running the code below under Windows maximizes CPU usage  and the ThreadPool grows until the CPUs are 100% utilized, however under Linux, the total CPU utilization is only ~30%.\r\n\r\nIt looks like Windows GetMinThreads(...) returns the number of cores, Linux returns (24,24) for a machine with 128GB RAM and 88 cores, and (32,32) for a machine with 64GB RAM and 96 cores. BTW the code below runs correctly if SetMinThread or COMPlus_ThreadPool_ForceMinWorkerThreads is used to force the min thread count.\r\n\r\nIs the correct workaround to tweak SetMinThreads or tweak the thread pool climbing parameters?\r\n\r\nThanks!\r\n\r\n```\r\npublic static int Main(String[] args) {  \r\n    // Create many tasks to use ALL the CPU cores for expectedTotalRunLengthMs\r\n    // Every task is using a specific CPU for a duration of taskRunLengtMs\r\n    // We expect all the tasks to be done in expectedTotalRunLengthMs if all CPUs are used all the time\r\n\r\n    int expectedTotalRunLengthMs = 10000;\r\n    int taskRunLengthMs = 10;\r\n    int numberOfTasks = (expectedTotalRunLengthMs/taskRunLengthMs) * Environment.ProcessorCount;\r\n\r\n    Console.WriteLine($\"Number of processors = {Environment.ProcessorCount}\");\r\n    Console.WriteLine($\"Task run time = {taskRunLengthMs} ms\");\r\n    Console.WriteLine($\"Total execution time = {expectedTotalRunLengthMs} ms\");\r\n    Console.WriteLine($\"Number of tasks = {numberOfTasks}\");\r\n\r\n    Task[] tasks = new Task[numberOfTasks];\r\n    Stopwatch w = Stopwatch.StartNew();\r\n            \r\n    for (int i = 0; i < tasks.Length; i++)\r\n        tasks[i] = Task.Run(() => {\r\n            // Eat CPU cycles\r\n            Stopwatch lw = Stopwatch.StartNew();\r\n            double d = 1;\r\n            while (lw.Elapsed.TotalMilliseconds < taskRunLengthMs)\r\n                d += Math.Sqrt(d);\r\n            });\r\n            \r\n    Task.WaitAll(tasks);\r\n    w.Stop();\r\n\r\n    Console.WriteLine($\"Done in {w.Elapsed.TotalMilliseconds} ms (expected {expectedTotalRunLengthMs} ms).\");\r\n\r\n    return 0;\r\n} \r\n```","Url":"https://github.com/dotnet/coreclr/issues/23176","RelatedDescription":"Open issue \"ThreadPool and GetMinThreads in Linux .NET Core\" (#23176)"},{"Id":"419502216","IsPullRequest":true,"CreatedAt":"2019-03-11T14:34:18","Actor":"hughbe","Number":"23175","RawContent":null,"Title":"Remove remaining devdocs and cleanup ComponentModel code","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23175","RelatedDescription":"Open PR \"Remove remaining devdocs and cleanup ComponentModel code\" (#23175)"},{"Id":"419260030","IsPullRequest":false,"CreatedAt":"2019-03-11T01:26:02","Actor":"VincentBu","Number":"23172","RawContent":null,"Title":"[arm] cannot download sdk","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_heapverify1_tst/47/\r\n\r\n**Log:**\r\n```\r\nCannot write to ‘/tmp/dotnet.wHZkcZeel’ (Success).\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-sdk-2.1.401-linux-arm.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-ubuntu-arm.2.1.401.tar.gz\r\n--2019-03-07 06:43:08--  https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-ubuntu-arm.2.1.401.tar.gz\r\nResolving dotnetcli.azureedge.net (dotnetcli.azureedge.net)... 72.21.81.200, 2606:2800:11f:17a5:191a:18d5:537:22f9\r\nConnecting to dotnetcli.azureedge.net (dotnetcli.azureedge.net)|72.21.81.200|:443... connected.\r\nHTTP request sent, awaiting response... 404 Not Found\r\n2019-03-07 06:43:08 ERROR 404: Not Found.\r\n\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-ubuntu-arm.2.1.401.tar.gz\r\ndotnet_install: Error: Could not find/download: `.NET Core SDK` with version = 2.1.401\r\ndotnet_install: Error: Refer to: https://aka.ms/dotnet-os-lifecycle for information on .NET Core support\r\nFailed to install dotnet SDK (exit code '1').\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23172","RelatedDescription":"Open issue \"[arm] cannot download sdk\" (#23172)"},{"Id":"419252742","IsPullRequest":false,"CreatedAt":"2019-03-11T00:23:51","Actor":"ststeiger","Number":"23171","RawContent":null,"Title":"Incorrect library-root path => problem with loading CEF-files","State":"open","Body":"I'm trying to embed ChromiumEmbedded into a .NET Core application. \r\n\r\nSo I download the appropriate CEF-build from spotify:\r\nhttp://opensource.spotify.com/cefbuilds/index.html\r\nfor example\r\nhttp://opensource.spotify.com/cefbuilds/cef_binary_3.3626.1895.g7001d56_linux64_minimal.tar.bz2\r\n\r\nThis is my application (PdfGlue)\r\nhttps://github.com/ststeiger/CefGlue_NetStandard\r\n\r\nThe problem is all the CEF-native binaries in Release and Resources. \r\nThey need to be copied to the output files. \r\n\r\nHowever, there is a bug in .NET-Core and mono on Linux ...\r\nI need to copy the files not only to the output directory, but also to /usr/share/dotnet, because the dotnet process runs there... \r\n\r\nThe same problem with mono, just that the mono-process runs in /usr/bin instead of /usr/share/dotnet. \r\nThat means i need to deploy the native binaries to /usr/share/dotnet or /usr/bin, which is not possible without admin rights. Bug. \r\n```\r\nDeleteFiles(\"/usr/bin\", allCefFiles); // /usr/bin/mono\r\nDeleteFiles(\"/usr/share/dotnet\", allCefFiles); // /usr/share/dotnet/dotnet\r\n```\r\nIf I have to publish the application in order to run it, then I can't debug in JetBrains Rider on Linux ...\r\n\r\nSeen from the developer's perspective, it's not using the right process root, because it's using the process root of mono/dotnet instead of the application, which is wrong... \r\nI can mitigate that by `export LD_LIBRARY_PATH=\"/path/to/my/application\"`, but I shouldn't have to do that in the first place. \r\n\r\nAlso, Visual Studio on Windows does not support debugging multi-process applications (CEF does not support single-process anymore). The .NET-Core application cannot be step-through debugged ! \r\nIf I take the application to .NET 2 (non-core), then I can step-through debug it... \r\n\r\nAlso, when running the self-contained PdfGlue, the dotnet tool (.NET Core 2.2) continously outputs \"incorrect command syntax\" text to the console, both on Linux and Windows. Something is very wrong there, and that has nothing to do with CEF. ","Url":"https://github.com/dotnet/coreclr/issues/23171","RelatedDescription":"Open issue \"Incorrect library-root path => problem with loading CEF-files\" (#23171)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"418212253","IsPullRequest":false,"CreatedAt":"2019-03-11T23:19:23","Actor":"pavelovcharov","Number":"10942","RawContent":null,"Title":"The 'dotnet build' command hangs when building a specific code","State":"closed","Body":"The following code will cause the `dotnet build` command to hang:\r\n```\r\n class ListItem {\r\n            public ListItem Prev { get; set; }\r\n            public ListItem Next { get; set; }\r\n        }\r\n        void ArrangeNonOverlapping(IList<ListItem> labels) {\r\n            List<ListItem> actualLabels = new List<ListItem>(labels);\r\n            ListItem prev = null;\r\n            ListItem next = null;\r\n            for (int i = 0; i < labels.Count; i++) {\r\n                ListItem label = actualLabels[i];\r\n                label.Prev = prev;\r\n                label.Next = next;\r\n                if (prev != null)\r\n                    prev.Next = label;\r\n                if (next != null)\r\n                    next.Prev = label;\r\n            }\r\n        }\r\n```\r\nThere is no issue when this code is built within Visual Studio\r\n\r\n## Steps to reproduce\r\nI have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n\r\n1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n2) cd netcore3_dotnetbuildhangs\r\n2) dotnet build\r\n\r\n## Expected  behavior\r\nThe ```dotnet  build``` command successfully builds the project\r\n\r\n## Actual behavior\r\nThe ```dotnet  build``` command hangs\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010591\r\n Commit:    6cb32d53bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010591\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27503-9\r\n  Commit:  04c13d860a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010591 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10942","RelatedDescription":"Closed issue \"The 'dotnet build' command hangs when building a specific code\" (#10942)"},{"Id":"419658240","IsPullRequest":false,"CreatedAt":"2019-03-11T22:55:43","Actor":"fubar-coder","Number":"10966","RawContent":null,"Title":"dotnet --info shows runtimes and sdks twice","State":"closed","Body":"Reopened issue (was: #10479)\r\n\r\n## Steps to reproduce\r\n\r\n1. Ensure that the \"Path\" environment variable contains \"c:\\program files\\dotnet\" (with the same casing)\r\n2. dotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## What I found out\r\n\r\nWhen I change the \"Path\" environment variable to use \"C:\\Program Files\\dotnet\", then everything works as expected. It seems that there is a case-sensitive `Distinct` list of SDK paths even though it should be case-insensitive on Windows.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10966","RelatedDescription":"Closed issue \"dotnet --info shows runtimes and sdks twice\" (#10966)"},{"Id":"418615934","IsPullRequest":true,"CreatedAt":"2019-03-11T19:54:50","Actor":"swaroop-sridhar","Number":"10951","RawContent":null,"Title":"Small updates to runtime.config documentation","State":"closed","Body":"Update some external document references, and other minor corrections.","Url":"https://github.com/dotnet/cli/pull/10951","RelatedDescription":"Closed or merged PR \"Small updates to runtime.config documentation\" (#10951)"},{"Id":"419549884","IsPullRequest":false,"CreatedAt":"2019-03-11T17:03:11","Actor":"JanEggers","Number":"10965","RawContent":null,"Title":"dotnet pack does not support RepositoryCommit","State":"closed","Body":"## Expected  behavior\r\n\r\ndotnet pack --RepositoryCommit 123 \r\n\r\nnuget seems to support it\r\n\r\nhttps://github.com/NuGet/docs.microsoft.com-nuget/pull/708\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10965","RelatedDescription":"Closed issue \"dotnet pack does not support RepositoryCommit\" (#10965)"},{"Id":"419249660","IsPullRequest":true,"CreatedAt":"2019-03-11T16:17:50","Actor":"dotnet-maestro[bot]","Number":"10959","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19160.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10959","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10959)"},{"Id":"419525464","IsPullRequest":false,"CreatedAt":"2019-03-11T15:46:03","Actor":"rjgotten","Number":"10964","RawContent":null,"Title":"dotnet pack does not support owners property","State":"closed","Body":"## Steps to reproduce\r\nTry to create a package with `dotnet pack` based on `csproj` metadata properties.\r\nTry to define owners separate from authors. E.g. where a package has a wide group of contributors but a limited set of core maintainers (or a company or other entity) that have full ownership.\r\n\r\n## Expected  behavior\r\nThere should be an `<Owners>` metadata property in the `csproj` format which maps to the `<owners>` node in the `nuspec` format.\r\n\r\n## Actual behavior\r\nThere is no way to set owners separate from authors without resorting to using an external `nuspec` file.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.504\r\n Commit:    91e160c7f0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.504\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.8\r\n  Commit:  209f8aa25c\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10964","RelatedDescription":"Closed issue \"dotnet pack does not support owners property\" (#10964)"},{"Id":"419382563","IsPullRequest":false,"CreatedAt":"2019-03-11T15:41:29","Actor":"hpbieker","Number":"10962","RawContent":null,"Title":"dotnet test does not respect LogFileName -- adds date","State":"closed","Body":"## Steps to reproduce\r\n* Install .NET Core 3.0 preview3\r\n* Create a test project\r\n* Run `dotnet test --logger 'trx;LogFileName=somename.trx'`\r\n\r\n## Expected  behavior\r\nA file named `somename.trx` should be created. In .NET Core 2.2 / Test Execution Command Line Tool Version 15.9.0 I get this behaviour.\r\n\r\n## Actual behavior\r\nA file named `somename_2019-03-11_10-38-36-764.trx` was created.\r\n\r\n```\r\n$ dotnet test --logger 'trx;LogFileName=somename.trx'\r\nTest run for C:\\Users\\nohabie\\AppData\\Local\\Temp\\test\\bin\\Debug\\netcoreapp3.0\\test.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.0.0-preview-20190124-02\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nResults File: C:\\Users\\XXX\\AppData\\Local\\Temp\\test\\TestResults\\somename_2019-03-11_10-38-36-764.trx\r\n\r\nTotal tests: 1. Passed: 1. Failed: 0. Skipped: 0.\r\nTest Run Successful.\r\nTest execution time: 1,1557 Seconds\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10962","RelatedDescription":"Closed issue \"dotnet test does not respect LogFileName -- adds date\" (#10962)"},{"Id":"419251359","IsPullRequest":false,"CreatedAt":"2019-03-11T15:39:30","Actor":"flcdrg","Number":"10960","RawContent":null,"Title":"dotnet add package ignores nuget.config <clear /> directive","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Create new project - eg. `dotnet new console`\r\n2. Add nuget.config\r\n3. Add `<clear />` directive but remove other package sources. eg.\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n <packageSources>\r\n    <clear />\r\n </packageSources>\r\n</configuration>\r\n```\r\n4. Add a new package - eg. `dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON`\r\n\r\n## Expected  behavior\r\n\r\nAdding package should fail because there are no package sources configured\r\n\r\n## Actual behavior\r\n\r\nPackage is added successfully because it appears to use other package sources. \r\n\r\nNote that this is a minimal repo - obviously you wouldn't usually just have a 'clear'! The original problem I saw was where a project was configured to just use an Azure Artifacts repository, but because of the apparent ignoring of the clear directive, packages were being resolved via these other sources rather than through the Artifacts repository (which meant that that repository wasn't using its own upstream sources as expected)\r\n\r\neg.\r\n\r\n<pre>\r\n dotnet add .\\dotnetadd-bug.csproj package NewtonSoft.JSON\r\n  Writing C:\\Users\\David\\AppData\\Local\\Temp\\tmpC8AE.tmp\r\ninfo : Adding PackageReference for package 'NewtonSoft.JSON' into project '.\\dotnetadd-bug.csproj'.\r\nlog  : Restoring packages for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj...\r\nndex.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json\r\ninfo :   GET https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.json\r\ninfo :   OK https://dotnetmyget.blob.core.windows.net/artifacts/aspnetcore-dev/nuget/v3/flatcontainer/newtonsoft.json/in\r\ninfo :   OK https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/newtonsoft.json/index.json 1486ms\r\ninfo :   NotFound https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/flatcontainer/newtonsoft.json/index.jso\r\nn 1534ms\r\ninfo : Package 'NewtonSoft.JSON' is compatible with all the specified frameworks in project '.\\dotnetadd-bug.csproj'.\r\ninfo : PackageReference for package 'NewtonSoft.JSON' version '9.0.1' added to file 'C:\\dev\\sandbox\\dotnetadd-bug\\dotnet\r\nadd-bug.csproj'.\r\ninfo : Committing restore...\r\nlog  : Generating MSBuild file C:\\dev\\sandbox\\dotnetadd-bug\\obj\\dotnetadd-bug.csproj.nuget.g.props.\r\ninfo : Writing lock file to disk. Path: C:\\dev\\sandbox\\dotnetadd-bug\\obj\\project.assets.json\r\nlog  : Restore completed in 2.89 sec for C:\\dev\\sandbox\\dotnetadd-bug\\dotnetadd-bug.csproj.\r\n</pre>\r\n\r\n## Environment data\r\n<pre>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010184\r\n Commit:    c57bde4593\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010184\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007326 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007354 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007363 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007474 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007517 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007576 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200-preview-007597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009748 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009804 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</pre>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10960","RelatedDescription":"Closed issue \"dotnet add package ignores nuget.config <clear /> directive\" (#10960)"},{"Id":"419340559","IsPullRequest":false,"CreatedAt":"2019-03-11T15:19:01","Actor":"yuki233","Number":"10961","RawContent":null,"Title":"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time","State":"closed","Body":"## Steps to reproduce\r\n1. Install SDK 3.0.100-preview4-010703\r\n\r\n## Expected  behavior\r\n1. Run below command\r\n_dotnet new webapi\r\ndotnet build_\r\n\r\n## Actual behavior\r\nDotnet build succeeded with CSC warning AD0001\r\n![image](https://user-images.githubusercontent.com/1578239/54108642-7a66ba00-4417-11e9-8545-7f2f40516ab1.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010703\r\n Commit:    4ccc726730\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010703\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27510-12\r\n  Commit:  cf9d52e1f0\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-010703 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19158-05 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27510-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27508-60 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10961","RelatedDescription":"Closed issue \"With SDK 3.0 Preview4, it will return CSC warning AD0001 when run dotnet build for webapi project at first time\" (#10961)"},{"Id":"419177727","IsPullRequest":true,"CreatedAt":"2019-03-11T12:37:04","Actor":"dotnet-maestro[bot]","Number":"10958","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10958","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10958)"},{"Id":"419394583","IsPullRequest":false,"CreatedAt":"2019-03-11T10:26:25","Actor":"baruchiro","Number":"10963","RawContent":null,"Title":"dotnet SDK 2.2.104 don't compile .NET Core 2.2","State":"open","Body":"## Steps to reproduce\r\nI have a .NET Sdk version 2.1 and lower.\r\nI installed sdk2.2 and sdk3.\r\nI removed sdk3\r\n\r\n## Expected  behavior\r\n`dotnet build` build my project.\r\n\r\n## Actual behavior\r\n`dotnet build`:\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2. [C:\\Users\\.......\\WebApi.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.17\r\n```\r\n\r\n## Environment data\r\n`dotnet --info`:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n`WebApi.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n    <NoWarn>1701;1702;CS1591</NoWarn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.Bot.Builder.Integration.AspNet.Core\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.2\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"4.0.1\" />\r\n  </ItemGroup>\r\n\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/cli/issues/10963","RelatedDescription":"Open issue \"dotnet SDK 2.2.104 don't compile .NET Core 2.2\" (#10963)"},{"Id":"419069407","IsPullRequest":true,"CreatedAt":"2019-03-10T12:29:35","Actor":"dotnet-maestro[bot]","Number":"10956","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19158.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview4.19159.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10956","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#10956)"},{"Id":"419088891","IsPullRequest":false,"CreatedAt":"2019-03-09T16:22:23","Actor":"mika-s","Number":"10957","RawContent":null,"Title":"Metadata not shown for F# dlls when using dotnet cli to build","State":"open","Body":"This is similar to [this](https://github.com/Microsoft/visualfsharp/issues/5657) issue, but for the dotnet cli tool rather than when compiling with Visual Studio 2017.\r\n\r\nVersion 2.2.104 is the latest stable version as of this date, so this issue is filed for that particular version.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a folder and make a file called global.json in it. Add the following content to it and save:\r\n\r\n```json\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.104\"\r\n  }\r\n}\r\n```\r\n\r\nThis forces dotnet to use version 2.2.104 in case the preview version (3.0) is installed. Run `dotnet --version` to verify.\r\n\r\n2. In the created folder, create a new solution with `dotnet new sln -o FSharpMetadata`.\r\n\r\n3. `cd FSharpMetadata`\r\n\r\n4. `dotnet new console -lang F# -o testproj`\r\n\r\n5. `dotnet sln add testproj`\r\n\r\n6. Open testproj.fsproj with an editor and add the following to the `PropertyGroup` element.\r\n\r\n```xml\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n```\r\n\r\n7. `dotnet build`\r\n\r\n8. `dotnet run --project testproj`\r\n\r\n9. Go to `FSharpMetadata\\testproj\\bin\\Debug\\netcoreapp2.2`, right click on testproj.dll and choose Properties. Go to the Details tab.\r\n\r\n## Expected  behavior\r\n\r\n1. *2.2.104* is shown in the console.\r\n\r\n2. FSharpMetadata folder created, with FSharpMetadata.sln in it.\r\n\r\n3. New working folder is *FSharpMetadata*.\r\n\r\n4. testproj folder created, with testproj.fsproj in it, as well as a few other files.\r\n\r\n5. testproj is added to the sln file.\r\n\r\n6. testproj.fsproj should look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <Authors>My author</Authors>\r\n    <AssemblyName>testproj</AssemblyName>\r\n    <RunPostBuildEvent>0</RunPostBuildEvent>\r\n    <Version>1.0.0</Version>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <FileVersion>1.0.0.0</FileVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Program.fs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n7. The project is build. testproj.dll is created.\r\n\r\n8.  *Hello World from F#!* is shown in the console. This is to test that building works.\r\n\r\n9. File description has content (e.g. testproj), File version has content (e.g. 1.0.0.0), Product name has content (e.g. testproj), Product version has content (1.0.0), Original filename has content (e.g. testproj.dll).\r\n\r\n## Actual behavior\r\n\r\nAs expected, except for 9). Only Type, Size and Date modified have values. It looks like the screenshots that I posted when I made VS issue. See [here](https://developercommunity.visualstudio.com/content/problem/336722/metadata-not-shown-for-f-dlls-for-net-core.html).\r\n\r\nIf you try to run the repro, but change language to C#, you will get proper metadata for the dll.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27324-5\r\n  Commit:  63a01b08e5\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010184 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19075-0444 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27324-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27325-3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## For searchability\r\n\r\nAttributeInfo","Url":"https://github.com/dotnet/cli/issues/10957","RelatedDescription":"Open issue \"Metadata not shown for F# dlls when using dotnet cli to build\" (#10957)"},{"Id":"418777854","IsPullRequest":true,"CreatedAt":"2019-03-09T13:35:49","Actor":"dotnet-maestro[bot]","Number":"10953","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10953","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10953)"},{"Id":"419064509","IsPullRequest":true,"CreatedAt":"2019-03-09T12:00:49","Actor":"dotnet-bot","Number":"10955","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10955","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10955)"},{"Id":"419064506","IsPullRequest":true,"CreatedAt":"2019-03-09T12:00:46","Actor":"dotnet-bot","Number":"10954","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10954","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10954)"},{"Id":"418077650","IsPullRequest":true,"CreatedAt":"2019-03-09T00:55:50","Actor":"livarcocc","Number":"10940","RawContent":null,"Title":"Update branding to 2.2.106","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10940","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.106\" (#10940)"},{"Id":"418077470","IsPullRequest":true,"CreatedAt":"2019-03-09T00:55:37","Actor":"livarcocc","Number":"10939","RawContent":null,"Title":"Update branding to 2.1.506","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10939","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.506\" (#10939)"},{"Id":"418601539","IsPullRequest":false,"CreatedAt":"2019-03-08T22:52:22","Actor":"NicolasDorier","Number":"10950","RawContent":null,"Title":"Compilation error \"csc.dll\" exited with code 139 on ARMv7l","State":"closed","Body":"## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10950","RelatedDescription":"Closed issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#10950)"},{"Id":"418654619","IsPullRequest":true,"CreatedAt":"2019-03-08T19:57:15","Actor":"wli3","Number":"10952","RawContent":null,"Title":"Better no executable found message","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10911\r\n\r\n```\r\n> dotnet non-exist-tool\r\nCould not run anything - file not found.\r\n        If you passed path 'non-exist-tool' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'dotnet-non-exist-tool' was not found.\r\n\r\n> dotnet c:\\non\\exist\\executable.dll\r\nCould not run anything - file not found.\r\n        If you passed path 'c:\\non\\exist\\executable.dll' it was not found.\r\n        If you intended to call a dotnet command, you may have misspelled it.\r\n        If you were calling a global tool, 'executable' was not found.\r\n```\r\n\r\n- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/10952","RelatedDescription":"Closed or merged PR \"Better no executable found message\" (#10952)"},{"Id":"418580587","IsPullRequest":true,"CreatedAt":"2019-03-08T01:40:02","Actor":"peterhuene","Number":"10949","RawContent":null,"Title":"Limit job object usage to Windows 8/2012 or later.","State":"closed","Body":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947.","Url":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Closed or merged PR \"Limit job object usage to Windows 8/2012 or later.\" (#10949)"},{"Id":"418558161","IsPullRequest":false,"CreatedAt":"2019-03-08T01:40:01","Actor":"pakrym","Number":"10947","RawContent":null,"Title":"Adding child processes to job objects prevents them from creating job objects of their own","State":"closed","Body":"We are hitting an issue while trying to test AspNetCore Module for IIS Express on Windows 7/2008R2 after taking and SDK with https://github.com/dotnet/cli/pull/10720 change.\r\n\r\nIn the test, we start IIS Express process that spawns new indstance of dotnet.exe, tries to attach it to a job object and fails because the entire process tree is already attached to the job object that CLI has created.\r\n\r\nI see couple possible solutions:\r\n1. Disable process tracking using job objects on Windows 7\r\n2. Set `JOB_OBJECT_LIMIT_BREAKAWAY_OK` flag set on the job object.\r\n\r\ncc @peterhuene @danmosemsft \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10947","RelatedDescription":"Closed issue \"Adding child processes to job objects prevents them from creating job objects of their own\" (#10947)"},{"Id":"418576994","IsPullRequest":false,"CreatedAt":"2019-03-08T00:26:44","Actor":"jaredpar","Number":"10948","RawContent":null,"Title":"SDK should use Microsoft.Net.Compilers.Toolset package","State":"open","Body":"The Roslyn team is deprecating the Microsoft.NETCore.Compilers package which contained only CoreCLR binaries and moving to Microsoft.Net.Compilers.Toolset which contains desktop and CoreCLR binaries. The SDK should switch to using this package when taking new Roslyn drops. \r\n\r\n\r\n@nguerrera is aware of this change. ","Url":"https://github.com/dotnet/cli/issues/10948","RelatedDescription":"Open issue \"SDK should use Microsoft.Net.Compilers.Toolset package\" (#10948)"},{"Id":"418540041","IsPullRequest":true,"CreatedAt":"2019-03-07T22:18:38","Actor":"dotnet-maestro[bot]","Number":"10946","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10946","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#10946)"},{"Id":"418274411","IsPullRequest":true,"CreatedAt":"2019-03-07T18:19:24","Actor":"dotnet-bot","Number":"10944","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10944","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10944)"},{"Id":"418297322","IsPullRequest":true,"CreatedAt":"2019-03-07T14:42:52","Actor":"dotnet-maestro[bot]","Number":"10945","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10945","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10945)"},{"Id":"418274389","IsPullRequest":true,"CreatedAt":"2019-03-07T12:01:46","Actor":"dotnet-bot","Number":"10943","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10943","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10943)"},{"Id":"418124071","IsPullRequest":false,"CreatedAt":"2019-03-07T04:29:55","Actor":"tonycoelho","Number":"10941","RawContent":null,"Title":"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash","State":"open","Body":"The latest 3.0 release listed in the release metadata json file located at the link below, 3.0.0-preview3-27503-5 (aka 3.0.0-preview3), is missing the hash value on every file listed in the runtime, sdk, and aspnetcore-runtime file collections.\r\n\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/releases.json\r\n\r\nThe hash property should contain the SHA256 hash for the file provided at the URL. Example of the issue below.\r\n```json\r\n{\r\n  \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n  \"rid\": \"linux-arm\",\r\n  \"url\": \"https://download.visualstudio.microsoft.com/download/pr/61afd68a-0079-45a3-917a-b8cb679fdc43/d3b8792106bbcc4b790407365fd025ac/dotnet-runtime-3.0.0-preview3-27503-5-linux-arm.tar.gz\",\r\n  \"hash\": \"\"\r\n}\r\n```\r\n\r\n@leecow ","Url":"https://github.com/dotnet/cli/issues/10941","RelatedDescription":"Open issue \"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash\" (#10941)"},{"Id":"417791945","IsPullRequest":true,"CreatedAt":"2019-03-06T23:06:57","Actor":"dotnet-maestro[bot]","Number":"10937","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10937","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10937)"},{"Id":"418048279","IsPullRequest":false,"CreatedAt":"2019-03-06T22:57:27","Actor":"ObsidianMinor","Number":"10938","RawContent":null,"Title":".NET website doesn't list .NET Core install scripts as download options","State":"open","Body":"There's two install scripts listed under `/scripts/obtain/`, and as someone that never browsed this repository often, I never knew they existed until someone showed me. I was surprised that these scripts, which are incredibly useful, are never mentioned on the website. It'd be nice if they were listed in some form or fashion so other developers can easily find them if they always use the main downloads website.","Url":"https://github.com/dotnet/cli/issues/10938","RelatedDescription":"Open issue \".NET website doesn't list .NET Core install scripts as download options\" (#10938)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"419180568","IsPullRequest":false,"CreatedAt":"2019-03-10T17:28:29","Actor":"jinyuttt","Number":"1099","RawContent":null,"Title":"Elliptic Curve Cryptography","State":"closed","Body":"Provide elliptic curve cryptography? ","Url":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099)"},{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"419802586","IsPullRequest":false,"CreatedAt":"2019-03-12T04:59:49","Actor":"wizofaus","Number":"35977","RawContent":null,"Title":"HttpClient doesn't always call through HttpMessageInvoker.SendAsync( )","State":"open","Body":"HttpMessageInvoker defines `virtual Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`.\r\nHttpClient then overrides this, and provides a convenience function where the cancellationToken defaults to None, but it does NOT call the virtual function `SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`. This means if you derive from HttpClient and override `SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)`  (for mocking or other purposes), any code that calls `HttpClient.SendAsync(HttpRequestMessage message)` doesn't use the overridden version.  It would be a minor and surely sensible change to the latter function to call via the virtual function (in fact, surely it would be safe just to specify a default parameter value for `cancellationToken`?).   As it is currently, I have to ensure any code that uses HttpClient.SendAsync always specifies the cancellation token.\r\n\r\n(BTW, yes I know the usually recommended approach is to mock or override HttpMessageHandler instead, but that's actually slightly tricky with many mocking libraries, due to SendAsync being protected)","Url":"https://github.com/dotnet/corefx/issues/35977","RelatedDescription":"Open issue \"HttpClient doesn't always call through HttpMessageInvoker.SendAsync( )\" (#35977)"},{"Id":"419612095","IsPullRequest":true,"CreatedAt":"2019-03-12T02:53:05","Actor":"davidfowl","Number":"35958","RawContent":null,"Title":"Don't allocate a stack","State":"closed","Body":"- Avoid an extra object allocation by using a struct based stack\r\n","Url":"https://github.com/dotnet/corefx/pull/35958","RelatedDescription":"Closed or merged PR \"Don't allocate a stack\" (#35958)"},{"Id":"419774953","IsPullRequest":false,"CreatedAt":"2019-03-12T02:44:54","Actor":"layomia","Number":"35976","RawContent":null,"Title":"Add flexible ISO 8601 support to Utf8Parser/Formatter (and beyond?)","State":"open","Body":"_This proposal stems from a discussion (https://github.com/dotnet/coreclr/pull/22999) regarding adding a new format specifier “I” to the UTF8 DateTime(Offset) parser (and subsequently formatter) for ISO 8601 strings. The new format was to be used by the `Utf8JsonReader/Writer`.\r\nGiven feedback, it is clear that adding a new format specifier requires further investigation and design.\r\nThe workaround for the `Utf8JsonReader/Writer` was to implement the parsing and formatting logic internally._\r\n\r\nWe are looking to add performant UTF-8 `DateTime(Offset)` read/write support (https://github.com/dotnet/corefx/issues/34690, https://github.com/dotnet/corefx/issues/34576) to the `Utf8JsonReader/Writer` for the following ISO 8601 profile:   \r\n\r\n`YYYY-MM-DD[Thh:mm[:ss[.s]][TZD]]` \r\n\r\nwhere:   \r\n\r\n`YYYY` = four-digit year   \r\n`MM` = two-digit month (01=January, etc.)   \r\n`DD` = two-digit day of month (01 through 31)   \r\n`T` = ‘T’ or ‘ ‘   \r\n`hh` = two digits of hour (00 through 23) (am/pm NOT allowed)   \r\n`mm` = two digits of minute (00 through 59)   \r\n`ss` = two digits of second (00 through 59)   \r\n`s` = one or more digits representing a decimal fraction of a second   \r\n`TZD` = time zone designator (Z or +hh:mm or -hh:mm or +hhmm or –hhmm or +hh or -hh)   \r\n\r\n### Rationale and Usage  \r\n\r\nISO 8601 is an unambiguous and prolific date and time standard, important for interoping with different systems/languages.  \r\n\r\nAs part of 3.0 we are adding the new `Utf8JsonReader/Writer/Document` types. We have implemented `(Try)GetDateTime(Offset)` and `WriteString(Value)` methods on the Json Reader/Writer types (https://github.com/dotnet/corefx/pull/35903, https://github.com/dotnet/corefx/pull/35966) to read and write ISO 8601 `DateTime(Offset)` strings. The parsing/formatting logic  is currently internal to the types: \r\n\r\n`Utf8JsonReader`\r\nhttps://github.com/dotnet/corefx/blob/ef1b1835a8459cee50d895b1e2040bb2336eeeda/src/System.Text.Json/src/System/Text/Json/Reader/JsonReaderHelper.Date.cs#L43-L357 \r\n\r\n`Utf8JsonWriter`\r\nhttps://github.com/dotnet/corefx/blob/52f3ad9f5f1276833fe8f53c79b5a995c8865df9/src/System.Text.Json/src/System/Text/Json/Writer/JsonWriterHelper.Date.cs#L22-L126\r\n\r\nThe proposal for adding ISO 8601 support is to add a new custom format specifier to the Utf8Parser/Formatter for the `(Try)GetDateTime(Offset)` methods to depend on (in place of the internal logic) with the following specifications.  This will be particularly beneficial if there is a need for flexible ISO 8601 processing beyond Json.  \r\n\r\n ### API (No changes)  \r\nAPI methods for DateTime reading and writing have already been approved. \r\n\r\n```C#   \r\npublic ref partial struct Utf8JsonReader   \r\n{ \r\n    public DateTime GetDateTime(); \r\n    public DateTimeOffset GetDateTimeOffset(); \r\n    public bool TryGetDateTime(out DateTime value); \r\n    public bool TryGetDateTimeOffset(out DateTimeOffset value); \r\n}   \r\n\r\npublic ref partial struct Utf8JsonWriter   \r\n{   \r\n    public void WriteString(System.ReadOnlySpan<byte> utf8PropertyName, System.DateTime value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<byte> utf8PropertyName, System.DateTimeOffset value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<char> propertyName, System.DateTime value, bool escape = true) { } \r\n    public void WriteString(System.ReadOnlySpan<char> propertyName, System.DateTimeOffset value, bool escape = true) { } \r\n    public void WriteStringValue(System.DateTime value) { } \r\n    public void WriteStringValue(System.DateTimeOffset value) { }  \r\n}   \r\n\r\npublic readonly partial struct JsonElement   \r\n{ \r\n    public DateTime GetDateTime(); \r\n    public DateTimeOffset GetDateTimeOffset(); \r\n    public bool TryGetDateTime(out DateTime value); \r\n    public bool TryGetDateTimeOffset(out DateTimeOffset value);   \r\n}   \r\n```   \r\n\r\n  These methods are could use the already existing `Utf8Parser/Formatter` types for parsing and formatting `DateTime` data to replace the internally implemented parse/format logic:  \r\n\r\n```C#  \r\npublic static partial class Utf8Parser  \r\n{ \r\n    public static bool TryParse(System.ReadOnlySpan<byte> source, out System.DateTime value, out int bytesConsumed, char standardFormat = '\\0') { throw null; } \r\n    public static bool TryParse(System.ReadOnlySpan<byte> source, out System.DateTimeOffset value, out int bytesConsumed, char standardFormat = '\\0') { throw null; }  \r\n}  \r\n\r\npublic static partial class Utf8Formatter  \r\n{ \r\n    public static bool TryFormat(System.DateTime value, System.Span<byte> destination, out int bytesWritten, System.Buffers.StandardFormat format = default(System.Buffers.StandardFormat)) { throw null; } \r\n    public static bool TryFormat(System.DateTimeOffset value, System.Span<byte> destination, out int bytesWritten, System.Buffers.StandardFormat format = default(System.Buffers.StandardFormat)) { throw null; }  \r\n}  \r\n```  \r\n\r\n### Details  \r\nOf note are the `format` and `standardFormat` parameters of the `TryParse` and `TryFormat` methods of the Utf8Parser/Formatter. The current options for the format are “G”/standard, “O”, and “R”. Of these, only “O” implements a profile of the ISO 8601 standard, the strict Round-trip format specifier: `yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK`. Most ISO 8601 adopters do not use this profile. Thus, it is beneficial to implement a new format which is more permissive and also very performant. We can call it “I”.  \r\n\r\n### Open Questions  \r\n- Outside of Json, do we have a need for UTF-8 ISO support?  \r\n- To what extent do we wish to support ISO 8601? Is the proposed profile sufficient? There are some variants which support using commas instead of periods etc. \r\n- If we are only supporting ISO 8601 for Json, should it remain as an implementation internal to the Utf8JsonReader/Writer types rather than rolling up to the `Utf8Parser/Formatter` types? \r\n- If ISO 8601 should be implemented on the `Utf8Parser/Formatter` types, should it be as a new API (e.g. `TryParseAsISO`/`TryFormatToISO` ) rather than a new format specifier (the `format`/`standardFormat` arguments)? \r\n- If we're adding ISO 8601 support to `Utf8Parser/Formatter`, do we also need/want to roll up support to `DateTime{Offset}.{Try}Parse/Format/ToString`?  \r\n\r\n### Pull Requests \r\n- The initial PR with the proposed changes: https://github.com/dotnet/coreclr/pull/22999. \r\n- The PR adding internal ISO 8601 parsing logic to `Utf8JsonReader`: https://github.com/dotnet/corefx/pull/35903. \r\n- The PR adding internal ISO 8601 formatting logic to the `Utf8JsonWriter` type: https://github.com/dotnet/corefx/pull/35903. ","Url":"https://github.com/dotnet/corefx/issues/35976","RelatedDescription":"Open issue \"Add flexible ISO 8601 support to Utf8Parser/Formatter (and beyond?)\" (#35976)"},{"Id":"419774570","IsPullRequest":false,"CreatedAt":"2019-03-12T02:43:24","Actor":"mohanrkrishna","Number":"35975","RawContent":null,"Title":"EF Core Begin Transaction | The connection is broken and recovery is not possible","State":"open","Body":"Hi - \r\nI am building .Net core app (2.2) using EF Core/SQL server. Defined repository classes for each model , each repository class has dBContext member (Of Type dBContext class) to perform dB operations.  In startup class defined DI and using options for dBContext\r\n\r\n`services.AddDbContext<AppDbContext>(options => options.UseSqlServer(Configuration));`\r\n\r\nEverything explained below works fine with out explicit transaction(like BeginTransaction) -> \r\n   Adding a row to table1& table2 and importing 100 rows to staging table , running SQL query using \r\n   ExecuteSqlCommand \r\n\r\nBut when i try to wrap all above in EF Core transaction using context.Database.BeginTransaction , getting below error. SQL server is up & running as same code works with out explicit transaction. Please assist how to troubleshoot & resolve this issue. Thanks very much!\r\n\r\n`The connection is broken and recovery is not possible.  The connection is marked by the server as unrecoverable.  No attempt was made to restore the connection.;\r\n` `at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) ` ","Url":"https://github.com/dotnet/corefx/issues/35975","RelatedDescription":"Open issue \"EF Core Begin Transaction | The connection is broken and recovery is not possible\" (#35975)"},{"Id":"419773695","IsPullRequest":false,"CreatedAt":"2019-03-12T02:39:41","Actor":"bigworld12","Number":"35974","RawContent":null,"Title":"wrong .ToString behavior for floating point types","State":"open","Body":"double.ToString and float.ToString have a wrong behavior in the following cases\r\n```cs\r\nConsole.WriteLine($\"Expected 0, got : {((double)(-0.0)).ToString()}\"); //prints \"-0\"\r\nConsole.WriteLine($\"Expected 0, got : {((float)(-0.0)).ToString()}\"); //prints \"-0\"\r\nConsole.WriteLine($\"Expected 0, got : {((decimal)(-0.0)).ToString()}\"); //Correct behavior, prints \"0\"\r\n\r\nConsole.WriteLine($\"Expected 0, got : {(Math.Round(-0.0)).ToString()}\"); //prints \"-0\"\r\nConsole.WriteLine($\"Expected 0, got : {((int)(-0.0)).ToString()}\"); //Correct behavior, prints \"0\"\r\nConsole.WriteLine($\"Expected 0, got : {((int)Math.Round(-0.0)).ToString()}\"); //Correct behavior, prints \"0\"\r\n\r\nConsole.WriteLine($\"Expected 0, got : {((double)(+0.0)).ToString()}\"); //Correct behavior, prints 0\r\nConsole.WriteLine($\"Expected True, got : {0.0 == -0.0}\"); //Correct behavior, prints True\r\n```\r\nthis is on .net core version 3.0.100-preview3-010431","Url":"https://github.com/dotnet/corefx/issues/35974","RelatedDescription":"Open issue \"wrong .ToString behavior for floating point types\" (#35974)"},{"Id":"419745049","IsPullRequest":false,"CreatedAt":"2019-03-12T00:25:53","Actor":"pranavkm","Number":"35973","RawContent":null,"Title":"JsonSerializer.ReadAsync OOMs if input Stream does not increase the number of bytes read when the serializer increases the buffer size","State":"open","Body":"## Steps to reproduce\r\nHere's the repro app: https://github.com/pranavkm/jsonserializer-oom/blob/master/Program.cs. Tested using shared fx v3.0.0-preview4-27506-4. When the input `Stream` does not fill up the passed in buffer, the serializer attempts to double the size. This eventually OOMs.\r\n\r\n## Background\r\n\r\nIn MVC, we are attempting to write a `Stream` implementation that converts a Stream containing non-UTF8 encoded bytes in to `UTF8` bytes for `JsonSerializer` to read. Our implementation uses a fixed size char array that we read content in to and expect the serializer to continue calling in to it until we've exhausted the input stream. The serializer however attempts to double the buffer size on each call resulting in an OOM in about 10-12 iterations. While we can change our algorithm to attempt to fill up the passed in read buffer to the full extent, this behavior is surprising and I most developers wouldn't anticipate allocating 2GB of memory to parse json. (https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.Stream.cs#L112-L113)\r\n\r\n## Environment\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010710\r\n Commit:    7a72261960\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   D:\\temp\\app2\\dotnet-sdk-latest-win-x64\\sdk\\3.0.100-preview4-010710\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27511-05\r\n  Commit:  2befa32cec\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-010710 [D:\\temp\\app2\\dotnet-sdk-latest-win-x64\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19158-05 [D:\\temp\\app2\\dotnet-sdk-latest-win-x64\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27511-05 [D:\\temp\\app2\\dotnet-sdk-latest-win-x64\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27508-60 [D:\\temp\\app2\\dotnet-sdk-latest-win-x64\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/35973","RelatedDescription":"Open issue \"JsonSerializer.ReadAsync OOMs if input Stream does not increase the number of bytes read when the serializer increases the buffer size\" (#35973)"},{"Id":"419723618","IsPullRequest":true,"CreatedAt":"2019-03-12T00:23:46","Actor":"NattyNarwhal","Number":"35971","RawContent":null,"Title":"Switch from asserts on POSIX_FADV_* to conversions","State":"closed","Body":"Of course, AIX has different values from other systems with this call. As such, use conversion instead of assertions.","Url":"https://github.com/dotnet/corefx/pull/35971","RelatedDescription":"Closed or merged PR \"Switch from asserts on POSIX_FADV_* to conversions\" (#35971)"},{"Id":"419737953","IsPullRequest":false,"CreatedAt":"2019-03-11T23:55:20","Actor":"terrajobst","Number":"35972","RawContent":null,"Title":"Revisit Index/Range API requirements","State":"open","Body":"One issue with the new `Index` and `Range` types is that in the current design library authors have to do work to provide customers with support for them, specifically they have to add overloads for methods taking indexes and ranges. That's unfortunate, especially for cases where the API in question is an interface and adding overloads isn't possible.\r\n\r\nWe should consider supporting a code-spit solution for `Index` and `Range` based APIs that avoids forcing library authors to provide overloads. For example, the compiler could lower this code:\r\n\r\n```C#\r\nIndex i = ...;\r\nvar element = collection[i];\r\n```\r\nto\r\n\r\n```C#\r\nIndex i = ...;\r\nvar element = collection[i.GetOffset(collection.Count)];\r\n```\r\n\r\nWe could use a marker interface (e.g. `ICollection<T>` or `IEnumerable`) to determine that the type is a collection and then synthesize the indexer taking `Index`. Also see this section with [related information](https://github.com/dotnet/apireviews/tree/master/2019/System.Index#convenient-use-of-high-performance-apis).\r\n\r\n/cc @stephentoub @tarekgh @jaredpar ","Url":"https://github.com/dotnet/corefx/issues/35972","RelatedDescription":"Open issue \"Revisit Index/Range API requirements\" (#35972)"},{"Id":"419683420","IsPullRequest":true,"CreatedAt":"2019-03-11T23:37:10","Actor":"Dotnet-GitSync-Bot","Number":"35968","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky @hughbe","Url":"https://github.com/dotnet/corefx/pull/35968","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#35968)"},{"Id":"419710157","IsPullRequest":true,"CreatedAt":"2019-03-11T23:36:41","Actor":"MarcoRossignoli","Number":"35970","RawContent":null,"Title":"Fix catch exception process test","State":"closed","Body":"Test fail again, but there was wrong exception caught\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F35959~2Fmerge/test~2Ffunctional~2Fcli~2F~2Fouterloop~2F/20190311.3/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FGetProcessesByName_ProcessName_ReturnsExpected\r\n\r\nI updated with correct one. `NotEmptyException` does not have message parameter constructor.\r\n\r\nOutput\r\n```\r\nPid: '3428' Name: 'MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe'\r\n        Pid: '14000' Name: 'conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n        Pid: '15736' Name: 'MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe'\r\n        Pid: '5224' Name: 'conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n        Pid: '13984' Name: 'MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe'\r\n        Pid: '15444' Name: 'conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n        Pid: '14556' Name: 'ServiceHub.IdentityHost' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\ServiceHub\\Hosts\\ServiceHub.Host.CLR.x86\\ServiceHub.IdentityHost.exe'\r\n        Pid: '16768' Name: 'Microsoft.Alm.Shared.Remoting.RemoteContainer.dll' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\PrivateAssemblies\\Microsoft.Alm.Shared.Remoting.RemoteContainer.dll'\r\n        Pid: '17140' Name: 'SearchProtocolHost' Main module: 'C:\\WINDOWS\\system32\\SearchProtocolHost.exe'\r\n        Pid: '17064' Name: 'SearchFilterHost'\r\n        Pid: '17164' Name: 'ServiceHub.SettingsHost' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\ServiceHub\\Hosts\\ServiceHub.Host.CLR.x86\\ServiceHub.SettingsHost.exe'\r\n        Pid: '15780' Name: 'SearchProtocolHost'\r\n        Pid: '16744' Name: 'VBCSCompiler' Main module: 'C:\\Users\\marco_000\\.nuget\\packages\\microsoft.net.compilers\\3.0.0-beta4-final\\tools\\VBCSCompiler.exe'\r\n        Pid: '16568' Name: 'conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n        Pid: '8096' Name: 'MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\MSBuild.exe'\r\n        Pid: '16232' Name: 'cmd' Main module: 'C:\\WINDOWS\\SysWOW64\\cmd.exe'\r\n        Pid: '1304' Name: 'conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n        Pid: '4332' Name: 'dotnet' Main module: 'D:\\git\\corefx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\dotnet.exe'\r\n        Pid: '15888' Name: 'svchost'\r\n        Current process id: 4332\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\git\\corefx\\src\\System.Diagnostics.Process\\tests\\ProcessTests.cs(1084,0): at System.Diagnostics.Tests.ProcessTests.GetProcessesByName_ProcessName_ReturnsExpected()\r\n```\r\nOld PR https://github.com/dotnet/corefx/pull/35853\r\n\r\n/cc @stephentoub @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/35970","RelatedDescription":"Closed or merged PR \"Fix catch exception process test\" (#35970)"},{"Id":"419695794","IsPullRequest":false,"CreatedAt":"2019-03-11T21:38:26","Actor":"dotnet-mc-bot","Number":"35969","RawContent":null,"Title":"Test failure: System.Net.NetworkInformation.Tests.PingTest/SendPingToExternalHostWithLowTtlTest","State":"open","Body":"Opened on behalf of @wfurt\n\nThe test `System.Net.NetworkInformation.Tests.PingTest/SendPingToExternalHostWithLowTtlTest` has failed.\n\nFailure Message:\n```\nSystem.Net.NetworkInformation.PingException : An exception occurred during a Ping request.\n---- System.InvalidOperationException : Cannot process request because the process (3857) has exited.\n```\n\nStack Trace:\n```\n   at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /__w/1/s/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 408\n   at System.Net.NetworkInformation.Tests.PingTest.SendPingToExternalHostWithLowTtlTest() in /__w/1/s/src/System.Net.Ping/tests/FunctionalTests/PingTest.cs:line 797\n--- End of stack trace from previous location where exception was thrown ---\n----- Inner Stack Trace -----\n   at System.Diagnostics.Process.ThrowIfExited(Boolean refresh) in /__w/1/s/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 321\n   at System.Diagnostics.Process.EnsureState(State state) in /__w/1/s/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 934\n   at System.Diagnostics.Process.Kill() in /__w/1/s/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 61\n   at System.Net.NetworkInformation.Ping.SendWithPingUtilityAsync(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /__w/1/s/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 334\n   at System.Net.NetworkInformation.Ping.SendPingAsyncCore(IPAddress address, Byte[] buffer, Int32 timeout, PingOptions options) in /__w/1/s/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.Unix.cs:line 48\n   at System.Net.NetworkInformation.Ping.GetAddressAndSendAsync(String hostNameOrAddress, Int32 timeout, Byte[] buffer, PingOptions options) in /__w/1/s/src/System.Net.Ping/src/System/Net/NetworkInformation/Ping.cs:line 397\n```\n\nBuild : 3.0 - 20190307.4 (Core Tests)\nFailing configurations:\n- Ubuntu.1604.Amd64-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/35969","RelatedDescription":"Open issue \"Test failure: System.Net.NetworkInformation.Tests.PingTest/SendPingToExternalHostWithLowTtlTest\" (#35969)"},{"Id":"419667508","IsPullRequest":false,"CreatedAt":"2019-03-11T20:26:29","Actor":"terrajobst","Number":"35967","RawContent":null,"Title":"Enable SIMD for JSON API","State":"open","Body":"_From @hez2010 on March 9, 2019 9:19_\n\n### Is your feature request related to a problem? Please describe.\r\nFeature request. Enable SIMD for the new Json APIs in ASP.NET Core 3.\r\n\r\n### Describe the solution you'd like\r\nSee [SimdJsonSharp](https://github.com/EgorBo/SimdJsonSharp)  \r\nWith SIMD support, SimdJsonSharp is faster than any existing Json library on .NET.  \r\nI think the new Json APIs in ASP.NET Core 3 should add SIMD support to improve its performance.\n\n_Copied from original issue: aspnet/AspNetCore#8366_","Url":"https://github.com/dotnet/corefx/issues/35967","RelatedDescription":"Open issue \"Enable SIMD for JSON API\" (#35967)"},{"Id":"419657180","IsPullRequest":true,"CreatedAt":"2019-03-11T20:01:57","Actor":"layomia","Number":"35966","RawContent":null,"Title":"Modify Utf8JsonWriter to write DateTime(Offset) values with the smallest output that roundtrips","State":"open","Body":"This addresses https://github.com/dotnet/corefx/issues/34576.\r\n\r\nWe replace calls to `Utf8Formatter.TryParse`, which formats to the roundtrippable custom format \"O\", with internal formatting logic that:\r\n- drops the fraction part of the output if the milliseconds part of the date is zero, else\r\n- writes the fraction part up to 7 decimal places with no trailing zeros.","Url":"https://github.com/dotnet/corefx/pull/35966","RelatedDescription":"Open PR \"Modify Utf8JsonWriter to write DateTime(Offset) values with the smallest output that roundtrips\" (#35966)"},{"Id":"419652114","IsPullRequest":false,"CreatedAt":"2019-03-11T19:49:21","Actor":"wfurt","Number":"35965","RawContent":null,"Title":"System.Net.Sockets.Tests.SendFileTest.SendFile_APM test failed with strange error ","State":"open","Body":"This happened to me once when running on Azure image of openSUSE 42.3, created by reprotool. \r\n\r\nI do see tests once in a while failing because they received less than expected bytes. \r\nIn this case, test received MORE than expected.\r\n\r\n```\r\n /mnt/resource/workspace/Work/68232d9a-1280-4ee4-99a6-a421449a593e/Exec /mnt/resource/workspace/Work/68232d9a-1280-4ee4-99a6-a421449a593e/Exec\r\n  Discovering: System.Net.Sockets.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.Sockets.Tests (found 969 of 1054 test cases)\r\n  Starting:    System.Net.Sockets.Tests (parallel test collections = on, max threads = 4)\r\n    System.Net.Sockets.Tests.KeepAliveTest.Socket_KeepAlive_RetryCount_Failure [SKIP]\r\n      Condition(s) not met: \"IsWindowsBelow1703\"\r\n    System.Net.Sockets.Tests.UnixDomainSocketTest.Socket_CreateUnixDomainSocket_Throws_OnWindows [SKIP]\r\n      Condition(s) not met: \"IsSubWindows10\"\r\n    System.Net.Sockets.Tests.CreateSocket.Ctor_Raw_Supported_Success [SKIP]\r\n      Condition(s) not met: \"SupportsRawSockets\"\r\n    System.Net.Sockets.Tests.SendFileTest.SendFile_APM(listenAt: 127.0.0.1, sendPreAndPostBuffers: False, bytesToSend: 12345678) [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 12345678\r\n      Actual:   12345679\r\n      Stack Trace:\r\n        /mnt/github/wfurt-corefx/src/System.Net.Sockets/tests/FunctionalTests/SendFile.cs(234,0): at System.Net.Sockets.Tests.SendFileTest.SendFile_APM(IPAddress listenAt, Boolean sendPreAndPostBuffers, Int32 bytesToSend)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n  Finished:    System.Net.Sockets.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Sockets.Tests  Total: 1434, Errors: 0, Failed: 1, Skipped: 3, Time: 42.608s\r\n```","Url":"https://github.com/dotnet/corefx/issues/35965","RelatedDescription":"Open issue \"System.Net.Sockets.Tests.SendFileTest.SendFile_APM test failed with strange error \" (#35965)"},{"Id":"419642769","IsPullRequest":true,"CreatedAt":"2019-03-11T19:25:29","Actor":"wtgodbe","Number":"35964","RawContent":null,"Title":"Update dependency branch for buildtools","State":"open","Body":"Corresponds to change in dotnet/versions here: https://github.com/dotnet/versions/pull/445\r\n\r\nCC @dagood @danmosemsft @mmitche ","Url":"https://github.com/dotnet/corefx/pull/35964","RelatedDescription":"Open PR \"Update dependency branch for buildtools\" (#35964)"},{"Id":"419636454","IsPullRequest":false,"CreatedAt":"2019-03-11T19:09:14","Actor":"DjArt","Number":"35963","RawContent":null,"Title":"Linq.Expressions.BinaryExpression and proper operator","State":"open","Body":"We have two classes(note the return type):\r\n```\r\n        class t0\r\n        {\r\n            public static bool operator ==(t0 a0, t1 a1)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            public static bool operator !=(t0 a0, t1 a1)\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        class t1\r\n        {\r\n            public static int operator ==(t0 a0, t1 a1)\r\n            {\r\n                return 0;\r\n            }\r\n\r\n            public static int operator !=(t0 a0, t1 a1)\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n```\r\nIf we try build expression with `bool` return type:\r\n```\r\nvar par1 = Expression.Parameter(typeof(t0), \"left\");\r\nvar par2 = Expression.Parameter(typeof(t1), \"right\");\r\nExpression t = Expression.MakeBinary(ExpressionType.Equal, par1, par2);\r\n _Equality = Expression.Lambda<Func<t0, t1, bool>>(t, par1, par2).Compile();\r\n```\r\nit done. But for `int` it will not work. What I want to say: CLR supports methods, that are difference only in return type. And Expressions.MakeBinary should contain method overload with explicit indication of return type.","Url":"https://github.com/dotnet/corefx/issues/35963","RelatedDescription":"Open issue \"Linq.Expressions.BinaryExpression and proper operator\" (#35963)"},{"Id":"419631528","IsPullRequest":false,"CreatedAt":"2019-03-11T18:56:42","Actor":"stephentoub","Number":"35962","RawContent":null,"Title":"MemoryExtensions.Contains(..., IEqualityComparer) overloads","State":"open","Body":"https://github.com/dotnet/corefx/issues/27526 was reviewed and API-approved to add four overloads:\r\n```C#\r\npublic static class MemoryExtensions\r\n{\r\n    bool Contains<T>(this Span<T> span, T value);\r\n    bool Contains<T>(this ReadOnlySpan<T> span, T value);\r\n    bool Contains<T>(this Span<T> span, T value, IEqualityComparer<T> comparer);\r\n    bool Contains<T>(this ReadOnlySpan<T> span, T value, IEqualityComparer<T> comparer);\r\n}\r\n```\r\nHowever, only the first two got implemented.  The latter two were flagged as being inconsistent:\r\nhttps://github.com/dotnet/corefx/issues/27526#issuecomment-422467532\r\n> The other 2 APIs are inconsistent with the rest of System.Memory public surface (none of the several hundreds other System.Memory APIs take IEqualityComparer). I assume that this was oversight during API review. We should have a new issue opened to discuss the IEqualityComparer<T> overloads. We should either add the overloads that take IEqualityComparer<T> everywhere in System.Memory (ie add ~30 new APIs), or nowhere. It does not make sense to add them to a random subset.\r\n\r\nOpening this issue to track those.\r\n\r\ncc: @GrabYourPitchforks, @ahsonkhan ","Url":"https://github.com/dotnet/corefx/issues/35962","RelatedDescription":"Open issue \"MemoryExtensions.Contains(..., IEqualityComparer) overloads\" (#35962)"},{"Id":"419620699","IsPullRequest":false,"CreatedAt":"2019-03-11T18:30:50","Actor":"StephenBonikowsky","Number":"35961","RawContent":null,"Title":"Update Windows.Compatibility package with newer WCF Core packages.","State":"open","Body":"WCF ran into dotnet/wcf#3437\r\n\r\nCould we update the Microsoft.Windows.Compatibility 2.1.0 package to reference WCF Core 4.5.0 or above packages please?\r\n\r\n@safern ","Url":"https://github.com/dotnet/corefx/issues/35961","RelatedDescription":"Open issue \"Update Windows.Compatibility package with newer WCF Core packages.\" (#35961)"},{"Id":"419613586","IsPullRequest":true,"CreatedAt":"2019-03-11T18:13:48","Actor":"stephentoub","Number":"35960","RawContent":null,"Title":"Include correct error code in WebSocket.ThrowOnInvalidState","State":"open","Body":"The exception for invalid state should include InvalidState, not the default of Success (which is weird default ;-)\r\n\r\nFixes https://github.com/dotnet/corefx/issues/30779\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/35960","RelatedDescription":"Open PR \"Include correct error code in WebSocket.ThrowOnInvalidState\" (#35960)"},{"Id":"419612985","IsPullRequest":true,"CreatedAt":"2019-03-11T18:12:23","Actor":"MarcoRossignoli","Number":"35959","RawContent":null,"Title":"Optimize recursion of System.Net.Http.HttpRuleParser.GetExpressionLength","State":"open","Body":"Fixing past bug I found a unuseful `ref` param passed to `GetQuotedStringLength` used by GetCommentLength/GetQuotedStringLength parser. \r\nI tried to remove `ref` to improve performance thank's to less dereferencing and better usage of registers.\r\nI wrote a test\r\n```cs\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Configs;\r\nusing System.Collections.Generic;\r\nusing System.Net.Http;\r\n\r\nnamespace HttpRulerParser\r\n{\r\n    [GroupBenchmarksBy(BenchmarkLogicalGroupRule.ByCategory)]\r\n    [CategoriesColumn]\r\n    public class HttpRuleParserComment\r\n    {\r\n        [Params(100)]\r\n        public int Count { get; set; }\r\n\r\n        public IEnumerable<string> Comments => new[]\r\n        {\r\n            \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/7.0)\",\r\n            \"((comment)(comment(comment)))\"\r\n        };\r\n\r\n\r\n        public IEnumerable<string> QuotedStrings => new[]\r\n        {\r\n            \"token \\\"quoted string\\\" token\",\r\n            \"\\\"a\\\\ü\\\\\\\"b\\\\\\\"c\\\\\\\"\\\\\\\"d\\\\\\\"\\\"\"\r\n        };\r\n\r\n        [BenchmarkCategory(\"Comment\"), Benchmark(Baseline = true)]\r\n        [ArgumentsSource(nameof(Comments))]\r\n        public void GetCommentLength_Old(string comment)\r\n        {\r\n            for (int i = 0; i < Count; i++)\r\n            {\r\n                HttpRuleParserOld.GetCommentLength(comment, 0, out int len);\r\n            }\r\n        }\r\n\r\n        [BenchmarkCategory(\"Comment\"), Benchmark()]\r\n        [ArgumentsSource(nameof(Comments))]\r\n        public void GetCommentLength_New(string comment)\r\n        {\r\n            for (int i = 0; i < Count; i++)\r\n            {\r\n                HttpRuleParserNew.GetCommentLength(comment, 0, out int len);\r\n            }\r\n        }\r\n\r\n        [BenchmarkCategory(\"Quoted\"), Benchmark(Baseline = true)]\r\n        [ArgumentsSource(nameof(QuotedStrings))]\r\n        public void GetQuotedStringLength_Old(string quotedString)\r\n        {\r\n            for (int i = 0; i < Count; i++)\r\n            {\r\n                HttpRuleParserOld.GetQuotedStringLength(quotedString, 0, out int len);\r\n            }\r\n        }\r\n\r\n        [BenchmarkCategory(\"Quoted\"), Benchmark()]\r\n        [ArgumentsSource(nameof(QuotedStrings))]\r\n        public void GetQuotedStringLength_New(string quotedString)\r\n        {\r\n            for (int i = 0; i < Count; i++)\r\n            {\r\n                HttpRuleParserNew.GetQuotedStringLength(quotedString, 0, out int len);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nResults\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.4, OS=Windows 10.0.17134.590 (1803/April2018Update/Redstone4)\r\nIntel Core i7 CPU 860 2.80GHz (Nehalem), 1 CPU, 8 logical and 4 physical cores\r\nFrequency=2727538 Hz, Resolution=366.6310 ns, Timer=TSC\r\n.NET Core SDK=3.0.100-preview3-010431\r\n  [Host]     : .NET Core 3.0.0-preview3-27503-5 (CoreCLR 4.6.27422.72, CoreFX 4.7.19.12807), 64bit RyuJIT\r\n  DefaultJob : .NET Core 3.0.0-preview3-27503-5 (CoreCLR 4.6.27422.72, CoreFX 4.7.19.12807), 64bit RyuJIT\r\n\r\n\r\n```\r\n|                    Method | Categories | Count |         quotedString |              comment |        Mean |      Error |     StdDev | Ratio | RatioSD |\r\n|-------------------------- |----------- |------ |--------------------- |--------------------- |------------:|-----------:|-----------:|------:|--------:|\r\n| **GetQuotedStringLength_Old** |     **Quoted** |   **100** |   **&quot;a\\ü\\&quot;b\\&quot;c\\&quot;\\&quot;d\\&quot;&quot;** |                    **?** |  **9,284.0 ns** | **179.270 ns** | **257.103 ns** |  **1.00** |    **0.00** |\r\n| GetQuotedStringLength_New |     Quoted |   100 |   &quot;a\\ü\\&quot;b\\&quot;c\\&quot;\\&quot;d\\&quot;&quot; |                    ? |  8,387.3 ns | 166.098 ns | 197.728 ns |  0.90 |    0.03 |\r\n|                           |            |       |                      |                      |             |            |            |       |         |\r\n|      **GetCommentLength_Old** |    **Comment** |   **100** |                    **?** | **((com(...)nt))) [29]** | **26,042.2 ns** | **158.638 ns** | **148.390 ns** |  **1.00** |    **0.00** |\r\n|      GetCommentLength_New |    Comment |   100 |                    ? | ((com(...)nt))) [29] | 22,839.2 ns |  84.810 ns |  70.820 ns |  0.88 |    0.01 |\r\n|                           |            |       |                      |                      |             |            |            |       |         |\r\n|      **GetCommentLength_Old** |    **Comment** |   **100** |                    **?** | **Mozil(...)/7.0) [63]** |  **1,384.1 ns** |  **24.599 ns** |  **20.541 ns** |  **1.00** |    **0.00** |\r\n|      GetCommentLength_New |    Comment |   100 |                    ? | Mozil(...)/7.0) [63] |    635.6 ns |   9.051 ns |   8.467 ns |  0.46 |    0.01 |\r\n|                           |            |       |                      |                      |             |            |            |       |         |\r\n| **GetQuotedStringLength_Old** |     **Quoted** |   **100** | **token(...)token [27]** |                    **?** |  **1,402.8 ns** |  **19.091 ns** |  **17.858 ns** |  **1.00** |    **0.00** |\r\n| GetQuotedStringLength_New |     Quoted |   100 | token(...)token [27] |                    ? |    626.6 ns |   3.480 ns |   2.906 ns |  0.45 |    0.01 |\r\n\r\n/cc @davidsh @geoffkizer @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/35959","RelatedDescription":"Open PR \"Optimize recursion of System.Net.Http.HttpRuleParser.GetExpressionLength\" (#35959)"},{"Id":"419509912","IsPullRequest":true,"CreatedAt":"2019-03-11T17:32:42","Actor":"stephentoub","Number":"35954","RawContent":null,"Title":"Use TryAddWithoutValidation in WebSocketHandle.ConnectAsyncCore","State":"closed","Body":"Don't validate the headers the developer has explicitly added to ClientWebSocketOptions.RequestHeaders; just pass them through.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35862\r\ncc: @davidsh, @rmkerr ","Url":"https://github.com/dotnet/corefx/pull/35954","RelatedDescription":"Closed or merged PR \"Use TryAddWithoutValidation in WebSocketHandle.ConnectAsyncCore\" (#35954)"},{"Id":"419502281","IsPullRequest":true,"CreatedAt":"2019-03-11T17:32:15","Actor":"stephentoub","Number":"35952","RawContent":null,"Title":"Add missing deserialization ctor to ChannelClosedException","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/35748\r\n\r\n@terrajobst, do I need to run this through API review?  Or since it's just a part of the pattern that it should have implemented from the get-go, can we give it a pass?\r\n\r\ncc: @ViktorHofer, @danmosemsft, @tarekgh ","Url":"https://github.com/dotnet/corefx/pull/35952","RelatedDescription":"Closed or merged PR \"Add missing deserialization ctor to ChannelClosedException\" (#35952)"},{"Id":"419531961","IsPullRequest":true,"CreatedAt":"2019-03-11T17:31:05","Actor":"stephentoub","Number":"35955","RawContent":null,"Title":"Fix timezone-related failures in System.Runtime.Tests","State":"closed","Body":"In time zones with a positive offset, several tests were failing due to going below the minimum supported values.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35943\r\ncc: @tarekgh, @ViktorHofer, @andrewcahill","Url":"https://github.com/dotnet/corefx/pull/35955","RelatedDescription":"Closed or merged PR \"Fix timezone-related failures in System.Runtime.Tests\" (#35955)"},{"Id":"419594003","IsPullRequest":true,"CreatedAt":"2019-03-11T17:30:36","Actor":"dotnet-maestro-bot","Number":"35957","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @omajid\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35957","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#35957)"},{"Id":"419534697","IsPullRequest":false,"CreatedAt":"2019-03-11T15:33:03","Actor":"mthalman","Number":"35956","RawContent":null,"Title":"Exit code 139 on 'dotnet new' command for Alpine 3.9","State":"open","Body":"As part of the work to add support for .NET Docker images on Alpine 3.9 (see dotnet/dotnet-docker#933), we've encountered an intermittent issue in our tests.  The issue is caused by running the `dotnet new` command in an Alpine 3.9 Docker container which results in a 139 exit code with nothing written out to standard error.\r\n\r\nThe issue is limited to .NET Core SDK 2.x running on Alpine 3.9.  It does not repro on .NET Core 3.0.  It also does not repro with Alpine 3.8.\r\n\r\nWe've encountered intermittent failures in our automated builds with these tests that _suggests_ it's this issue but we haven't yet been able to confirm definitively since they have not failed after adding exit code information to the diagnostics.  But we have been able to repro this manually albeit in a way that is not the same way that the builds execute the tests.\r\n\r\nThe repro involves running our test script which executes our test in a Linux container.  The test then creates its own Docker container for Alpine 3.9 and executes the `dotnet new` command in that.  So this is a nested Docker scenario.  However, just running the test by itself doesn't repro the issue.  You need to execute the test script twice in parallel.  That's where it differs from what our automated builds do.  It also doesn't make much sense since the `dotnet new` commands are being executed in distinct Docker containers and should not be interfering with each other.  Nevertheless, that's how I'm able to repro the issue.\r\n\r\n**Repro Steps**\r\n(Requires a machine with Docker for Windows installed.)\r\n1. Clone the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo.\r\n2. Change your working directory to the root of the repo.\r\n3. In a PowerShell window, run `./build-and-test.ps1 -VersionFilter 2.2* -OSFilter alpine3.9* -SkipTesting`\r\n4. Open the tests\\Microsoft.DotNet.Docker.Tests\\ImageTests.cs file and comment out the [Theory] attribute for all the methods except for VerifyRuntimeImage_AppScenario.\r\n5. Run `docker build -t test testrunner -f ./tests/Dockerfile.linux.testrunner .`\r\n6. Create a new Console App project with the following code:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            RunAsync().Wait();\r\n        }\r\n\r\n        static async Task RunAsync()\r\n        {\r\n            int i = 0;\r\n            while (true)\r\n            {\r\n                Console.WriteLine(\"Iteration \" + i++);\r\n\r\n                var task1 = ExecuteAsync();\r\n                var task2 = ExecuteAsync();\r\n                await Task.WhenAll(task1, task2);\r\n            }\r\n        }\r\n\r\n        static Task ExecuteAsync()\r\n        {\r\n            TaskCompletionSource<bool> tcs = new TaskCompletionSource<bool>();\r\n\r\n            Task.Run(() =>\r\n            {\r\n                var process = new Process();\r\n                process.StartInfo = new ProcessStartInfo\r\n                {\r\n                    FileName = \"docker\",\r\n                    Arguments = \"run --rm -v /var/run/docker.sock:/var/run/docker.sock -w /src testrunner pwsh -File ./tests/run-tests.ps1 -VersionFilter 2.2* -OSFilter alpine3.9* -ArchitectureFilter amd64\",\r\n                    RedirectStandardError = true,\r\n                    RedirectStandardOutput = true,\r\n                };\r\n                StringBuilder stdOutput = new StringBuilder();\r\n                process.OutputDataReceived += new DataReceivedEventHandler((sender, e) => stdOutput.AppendLine(e.Data));\r\n\r\n                StringBuilder stdError = new StringBuilder();\r\n                process.ErrorDataReceived += new DataReceivedEventHandler((sender, e) => stdError.AppendLine(e.Data));\r\n\r\n                process.EnableRaisingEvents = true;\r\n                process.Start();\r\n                process.BeginOutputReadLine();\r\n                process.BeginErrorReadLine();\r\n                process.WaitForExit();\r\n\r\n                int exitCode = process.ExitCode;\r\n\r\n                if (exitCode != 0)\r\n                {\r\n                    var stdErr = stdError.ToString();\r\n                    Debug.WriteLine(stdOutput.ToString());\r\n                    Debug.WriteLine(\"\");\r\n                    Debug.WriteLine(\"\");\r\n                    Debug.WriteLine(stdErr);\r\n                    tcs.SetException(new Exception());\r\n                }\r\n                else\r\n                {\r\n                    tcs.SetResult(true);\r\n                }\r\n            });\r\n\r\n            return tcs.Task;\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n7. Run this project in Debug mode in VS.\r\n\r\nResult:\r\nAn exception will be thrown.  The Debug window output will contain the following output.  It usually will repro on the first or second iteration but may take more.  Each iteration might take 1 and a half minutes to run.\r\n```\r\nStarting test execution, please wait...\r\nFailed   Microsoft.DotNet.Docker.Tests.ImageTests.VerifyRuntimeImage_AppScenario(imageData: Arch='Amd64', Version='2.2', VersionString='2.2', HasSdk='True', IsArm='False', OS='alpine3.9', Rid='linux-musl-x64', RuntimeDepsVersion='2.2', SdkOS='alpine3.9', SdkVersion='2.2')\r\nExit code: 139\r\nError Message:\r\n System.InvalidOperationException : Failed to execute docker run --name 2.2-create-console-131967895354341618 -w /app -p 80 mcr.microsoft.com/dotnet/core-nightly/sdk:2.2-alpine3.9 dotnet new console --framework netcoreapp2.2\r\n\r\nStack Trace:\r\n   at Microsoft.DotNet.Docker.Tests.DockerHelper.Execute(String args, Boolean ignoreErrors, Boolean autoRetry, ITestOutputHelper outputHelper) in /src/tests/Microsoft.DotNet.Docker.Tests/DockerHelper.cs:line 92\r\n   at Microsoft.DotNet.Docker.Tests.DockerHelper.ExecuteWithLogging(String args, Boolean ignoreErrors, Boolean autoRetry) in /src/tests/Microsoft.DotNet.Docker.Tests/DockerHelper.cs:line 142\r\n   at Microsoft.DotNet.Docker.Tests.DockerHelper.Run(String image, String name, String command, String workdir, String publishArgs, Boolean detach, Boolean runAsContainerAdministrator, Boolean skipAutoCleanup) in /src/tests/Microsoft.DotNet.Docker.Tests/DockerHelper.cs:line 222\r\n   at Microsoft.DotNet.Docker.Tests.ImageScenarioVerifier.CreateTestAppWithSdkImage(String appType) in /src/tests/Microsoft.DotNet.Docker.Tests/ImageScenarioVerifier.cs:line 123\r\n   at Microsoft.DotNet.Docker.Tests.ImageScenarioVerifier.Execute() in /src/tests/Microsoft.DotNet.Docker.Tests/ImageScenarioVerifier.cs:line 37\r\n   at Microsoft.DotNet.Docker.Tests.ImageTests.VerifyRuntimeImage_AppScenario(ImageData imageData) in /src/tests/Microsoft.DotNet.Docker.Tests/ImageTests.cs:line 145\r\n--- End of stack trace from previous location where exception was thrown ---\r\nStandard Output Messages:\r\n Executing: docker pull mcr.microsoft.com/dotnet/core-nightly/sdk:2.2-alpine3.9\r\n 2.2-alpine3.9: Pulling from dotnet/core-nightly/sdk\r\n Digest: sha256:18630987e8752d76988513f0b0d27535b4b51968055d41a03b53599ccd2cff4e\r\n Status: Image is up to date for mcr.microsoft.com/dotnet/core-nightly/sdk:2.2-alpine3.9\r\n Execution Elapsed Time: 00:00:00.6170324\r\n Executing: docker run --name 2.2-create-console-131967895354341618 -w /app -p 80 mcr.microsoft.com/dotnet/core-nightly/sdk:2.2-alpine3.9 dotnet new console --framework netcoreapp2.2\r\n Getting ready...\r\n The template \"Console Application\" was created successfully.\r\n \r\n Processing post-creation actions...\r\n Running 'dotnet restore' on /app/app.csproj...\r\n   Restoring packages for /app/app.csproj...\r\n   Generating MSBuild file /app/obj/app.csproj.nuget.g.props.\r\n   Generating MSBuild file /app/obj/app.csproj.nuget.g.targets.\r\n   Restore completed in 305.04 ms for /app/app.csproj.\r\n \r\n Restore succeeded.\r\n Executing: docker container rm -f 2.2-create-console-131967895354341618\r\n 2.2-create-console-131967895354341618\r\n Execution Elapsed Time: 00:00:00.1486305\r\n\r\nResults File: /src/tests/Microsoft.DotNet.Docker.Tests/TestResults/_ec417107f69b_2019-03-11_14_52_24.trx\r\n\r\nTotal tests: 1. Passed: 0. Failed: 1. Skipped: 0.\r\nTest execution time: 11.1232 Seconds\r\n\r\n[xUnit.net 00:00:09.3049272]     Microsoft.DotNet.Docker.Tests.ImageTests.VerifyRuntimeImage_AppScenario(imageData: Arch='Amd64', Version='2.2', VersionString='2.2', HasSdk='True', IsArm='False', OS='alpine3.9', Rid='linux-musl-x64', RuntimeDepsVersion='2.2', SdkOS='alpine3.9', SdkVersion='2.2') [FAIL]\r\nTest Run Failed.\r\nTests Failed\r\nAt /src/tests/run-tests.ps1:77 char:32\r\n+     if ($LASTEXITCODE -ne 0) { throw \"Tests Failed\" }\r\n+                                ~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : OperationStopped: (Tests Failed:String) [], RuntimeException\r\n+ FullyQualifiedErrorId : Tests Failed\r\n```\r\n\r\nNotice the output contains `Exit code: 139`.  This is output by the tests\\Microsoft.DotNet.Docker.Tests\\DockerHelper.cs class when it runs `dotnet new` via the `docker run` command.\r\n\r\nAs part of troubleshooting the issue, if you make any code changes to the repo, just re-run the command in step 5, and the change will be incorporated by the tests when they're executed.","Url":"https://github.com/dotnet/corefx/issues/35956","RelatedDescription":"Open issue \"Exit code 139 on 'dotnet new' command for Alpine 3.9\" (#35956)"},{"Id":"419504856","IsPullRequest":false,"CreatedAt":"2019-03-11T14:39:17","Actor":"layomia","Number":"35953","RawContent":null,"Title":"Extract Utf8Parser date helpers to static helper class","State":"open","Body":"The DateTime(Offset) parsing logic in Utf8JsonReader (https://github.com/dotnet/corefx/pull/35903) depends on copied implementations of these helpers. Extracting them would help keep them in sync.","Url":"https://github.com/dotnet/corefx/issues/35953","RelatedDescription":"Open issue \"Extract Utf8Parser date helpers to static helper class\" (#35953)"},{"Id":"419495320","IsPullRequest":false,"CreatedAt":"2019-03-11T14:21:07","Actor":"mfkl","Number":"35951","RawContent":null,"Title":"Update license for Microsoft.Bcl.Async nuget","State":"open","Body":"Hi,\r\n\r\nWould it be possible to update the license of https://www.nuget.org/packages/Microsoft.Bcl.Async/ to MIT?\r\n\r\nIts nuget.org page says `MS-.NET-Library License`, yet this commit https://github.com/Microsoft/referencesource/commit/6952d2c3923d30a4d88bf57120688b9532bbe1d8 makes it `MIT` as per https://github.com/Microsoft/referencesource#license.\r\n\r\nThanks!","Url":"https://github.com/dotnet/corefx/issues/35951","RelatedDescription":"Open issue \"Update license for Microsoft.Bcl.Async nuget\" (#35951)"},{"Id":"419493605","IsPullRequest":false,"CreatedAt":"2019-03-11T14:17:58","Actor":"mklement0","Number":"35950","RawContent":null,"Title":"System.Console unexpectedly uses a UTF-8 encoding *with BOM* on Windows","State":"open","Body":"Note: #32004 (since fixed) addressed the same issue, but for Unix-like platforms only, because at the time I didn't realize that it should be fixed on Windows also.\r\n\r\n**On Windows too the preamble (BOM) should be removed from the UTF-8 encoding that the `Console` class uses when code page `65001` (`chcp 65001`) is in effect**, given that `cmd.exe` - rightfully - has always operated _without BOM_ in that case:\r\n\r\nAfter all, **any programs relying on the _active code page_ should be able to _blindly_ assume that stdin input / stdout output  is encoded accordingly and _shouldn't have to deal with a BOM_** (neither to redundantly imply the same code page nor to potentially signal a different encoding).\r\n\r\nThe presence of a BOM, in fact, breaks PowerShell's background-jobs feature (via `Start-Job`), as detailed here:\r\n\r\n* https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/14915283-job-cmdlets-fail-with-utf-8-codepage\r\n\r\nFollow-on bugs:\r\n\r\n* https://github.com/Microsoft/azure-pipelines-tasks/issues/9766\r\n* https://github.com/ansible/ansible/issues/15770\r\n\r\nIt's fair to assume that other applications/languages/frameworks may be affected as well, which can range from outright failure, as in PowerShell's case, to mistakenly considering the BOM part of the data.\r\n\r\n---\r\n\r\nDemonstration of `cmd`'s current behavior:\r\n\r\n`cmd`'s stdout output has always created _BOM-less_ output with `chcp 65001` in effect; e.g. the following creates `t.txt` as a _BOM-less_ UTF-8 file.\r\n\r\n```powershell\r\nC:\\> chcp 65001\r\nC:\\> (echo hü)> t.txt\r\nC:\\> powershell -noprofile -c Format-Hex t.txt\r\n\r\n           Path: C:\\Users\\jdoe\\t.txt\r\n\r\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\r\n\r\n00000000   68 C3 BC 0D 0A                                   hÃ¼..\r\n\r\n```\r\n\r\nThe above shows that the file contains _no_ BOM (and that [char. `ü`](http://www.fileformat.info/info/unicode/char/fc/index.htm) was correctly encoded as UTF-8 as 2-byte sequence `0xC3 0xBC`).","Url":"https://github.com/dotnet/corefx/issues/35950","RelatedDescription":"Open issue \"System.Console unexpectedly uses a UTF-8 encoding *with BOM* on Windows\" (#35950)"},{"Id":"419457177","IsPullRequest":true,"CreatedAt":"2019-03-11T14:17:04","Actor":"stephentoub","Number":"35949","RawContent":null,"Title":"Disable TestCheckChildProcessUserAndGroupIds test","State":"closed","Body":"Sporadically failing in CI\r\n\r\ncc: @tmds, @wfurt ","Url":"https://github.com/dotnet/corefx/pull/35949","RelatedDescription":"Closed or merged PR \"Disable TestCheckChildProcessUserAndGroupIds test\" (#35949)"},{"Id":"419434940","IsPullRequest":true,"CreatedAt":"2019-03-11T13:30:58","Actor":"dotnet-maestro[bot]","Number":"35947","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27510-74\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27510-74\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27510-74\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35947","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35947)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"419798043","IsPullRequest":true,"CreatedAt":"2019-03-12T04:35:47","Actor":"heejaechang","Number":"34030","RawContent":null,"Title":"publish RoslynDeployment vsix to Roslyn vsix myget feed","State":"open","Body":"publish RoslynDeployment vsix to myget feed.\r\n\r\nwe used to publish roslyn insider vsix but at some point when we changed name, it looks like we stopped publishing the actual vsix people can use to dogfood nightly roslyn.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/34030","RelatedDescription":"Open PR \"publish RoslynDeployment vsix to Roslyn vsix myget feed\" (#34030)"},{"Id":"419794489","IsPullRequest":true,"CreatedAt":"2019-03-12T04:16:49","Actor":"cston","Number":"34029","RawContent":null,"Title":"Track nullable state through implicit and explicit reference and tuple conversions","State":"open","Body":"Fixes #29977.","Url":"https://github.com/dotnet/roslyn/pull/34029","RelatedDescription":"Open PR \"Track nullable state through implicit and explicit reference and tuple conversions\" (#34029)"},{"Id":"419784242","IsPullRequest":true,"CreatedAt":"2019-03-12T03:26:17","Actor":"sharwell","Number":"34028","RawContent":null,"Title":"IDE benchmarks","State":"open","Body":"Here's the results from RegexClassifierBanchmarks:\r\n\r\n|               Method | StringLength | RepeatElement |      Mean |     Error |    StdDev |    Median | Scaled | ScaledSD |     Gen 0 |  Allocated |\r\n|--------------------- |------------- |-------------- |----------:|----------:|----------:|----------:|-------:|---------:|----------:|-----------:|\r\n|     'String literal' |            0 |             \\ |  4.615 ms | 0.1496 ms | 0.4388 ms |  4.737 ms |   1.00 |     0.00 |         - |     616 KB |\r\n| 'Regular expression' |            0 |             \\ |  7.236 ms | 0.4300 ms | 1.2680 ms |  6.437 ms |   1.58 |     0.32 | 1000.0000 |   832.1 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |            0 |             a |  4.712 ms | 0.1480 ms | 0.4248 ms |  4.765 ms |   1.00 |     0.00 |         - |     608 KB |\r\n| 'Regular expression' |            0 |             a |  7.990 ms | 0.4173 ms | 1.2304 ms |  7.274 ms |   1.71 |     0.31 | 1000.0000 |  832.54 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |         1000 |             \\ |  6.815 ms | 0.3909 ms | 1.1526 ms |  6.133 ms |   1.00 |     0.00 | 1000.0000 |  835.71 KB |\r\n| 'Regular expression' |         1000 |             \\ | 10.973 ms | 0.7669 ms | 2.2613 ms | 10.601 ms |   1.65 |     0.43 | 1000.0000 | 1139.77 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |         1000 |             a |  4.503 ms | 0.1523 ms | 0.4466 ms |  4.280 ms |   1.00 |     0.00 |         - |  668.02 KB |\r\n| 'Regular expression' |         1000 |             a |  8.417 ms | 0.5412 ms | 1.5957 ms |  7.455 ms |   1.89 |     0.40 | 1000.0000 |  988.09 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |        10000 |             \\ |  7.561 ms | 0.1443 ms | 0.1350 ms |  7.538 ms |   1.00 |     0.00 | 1000.0000 | 3165.84 KB |\r\n| 'Regular expression' |        10000 |             \\ | 30.495 ms | 1.1173 ms | 3.1330 ms | 29.072 ms |   4.03 |     0.42 | 1000.0000 | 4413.26 KB |\r\n|                      |              |               |           |           |           |           |        |          |           |            |\r\n|     'String literal' |        10000 |             a |  7.767 ms | 0.3726 ms | 1.0985 ms |  7.022 ms |   1.00 |     0.00 | 1000.0000 | 1196.38 KB |\r\n| 'Regular expression' |        10000 |             a | 19.597 ms | 1.3913 ms | 4.1021 ms | 16.807 ms |   2.57 |     0.65 | 1000.0000 | 2524.56 KB |","Url":"https://github.com/dotnet/roslyn/pull/34028","RelatedDescription":"Open PR \"IDE benchmarks\" (#34028)"},{"Id":"419739160","IsPullRequest":true,"CreatedAt":"2019-03-12T01:30:06","Actor":"dotnet-bot","Number":"34023","RawContent":null,"Title":"Merge dev16.0 to dev16.0-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0 into dev16.0-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-to-dev16.0-vs-deps\ngit reset --hard upstream/dev16.0-vs-deps\ngit merge upstream/dev16.0\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-to-dev16.0-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34023","RelatedDescription":"Closed or merged PR \"Merge dev16.0 to dev16.0-vs-deps\" (#34023)"},{"Id":"419751286","IsPullRequest":true,"CreatedAt":"2019-03-12T00:54:27","Actor":"tmat","Number":"34027","RawContent":null,"Title":"Enc manager update","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34027","RelatedDescription":"Open PR \"Enc manager update\" (#34027)"},{"Id":"419749417","IsPullRequest":true,"CreatedAt":"2019-03-12T00:45:35","Actor":"jaredpar","Number":"34026","RawContent":null,"Title":"Fix local bootstrap build","State":"open","Body":"Have to disable quiet restore explicitly on local dev machines when\r\ndoing a bootstrap build to work around this arcade issue:\r\nhttps://github.com/dotnet/arcade/issues/2220","Url":"https://github.com/dotnet/roslyn/pull/34026","RelatedDescription":"Open PR \"Fix local bootstrap build\" (#34026)"},{"Id":"419749366","IsPullRequest":true,"CreatedAt":"2019-03-12T00:45:24","Actor":"ivanbasov","Number":"34025","RawContent":null,"Title":"Support completion for !. in C# 8.0","State":"open","Body":"Please let me know if you see more test scenarios for the change.","Url":"https://github.com/dotnet/roslyn/pull/34025","RelatedDescription":"Open PR \"Support completion for !. in C# 8.0\" (#34025)"},{"Id":"419743185","IsPullRequest":true,"CreatedAt":"2019-03-12T00:17:15","Actor":"ivanbasov","Number":"34024","RawContent":null,"Title":"VS SDK update","State":"open","Body":"New bits recommended by the Editor team. Corresponding to 16.0 RC","Url":"https://github.com/dotnet/roslyn/pull/34024","RelatedDescription":"Open PR \"VS SDK update\" (#34024)"},{"Id":"419738464","IsPullRequest":true,"CreatedAt":"2019-03-11T23:57:31","Actor":"RikkiGibson","Number":"34022","RawContent":null,"Title":"Readonly members warnings","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34022","RelatedDescription":"Open PR \"Readonly members warnings\" (#34022)"},{"Id":"419735158","IsPullRequest":true,"CreatedAt":"2019-03-11T23:43:17","Actor":"gafter","Number":"34021","RawContent":null,"Title":"The default label is considered reachable in a traditional switch statement","State":"open","Body":"This fixes a compatibility bug (the new compiler complains about unreachable code, but if you remove it the old compiler complains about a switch fall-through).\r\n\r\nFixes #33783","Url":"https://github.com/dotnet/roslyn/pull/34021","RelatedDescription":"Open PR \"The default label is considered reachable in a traditional switch statement\" (#34021)"},{"Id":"419729071","IsPullRequest":false,"CreatedAt":"2019-03-11T23:19:23","Actor":"livarcocc","Number":"34020","RawContent":null,"Title":"The 'dotnet build' command hangs when building a specific code","State":"open","Body":"@pavelovcharov commented on [Thu Mar 07 2019](https://github.com/dotnet/cli/issues/10942)\n\nThe following code will cause the `dotnet build` command to hang:\r\n```\r\n class ListItem {\r\n            public ListItem Prev { get; set; }\r\n            public ListItem Next { get; set; }\r\n        }\r\n        void ArrangeNonOverlapping(IList<ListItem> labels) {\r\n            List<ListItem> actualLabels = new List<ListItem>(labels);\r\n            ListItem prev = null;\r\n            ListItem next = null;\r\n            for (int i = 0; i < labels.Count; i++) {\r\n                ListItem label = actualLabels[i];\r\n                label.Prev = prev;\r\n                label.Next = next;\r\n                if (prev != null)\r\n                    prev.Next = label;\r\n                if (next != null)\r\n                    next.Prev = label;\r\n            }\r\n        }\r\n```\r\nThere is no issue when this code is built within Visual Studio\r\n\r\n## Steps to reproduce\r\nI have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n\r\n1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n2) cd netcore3_dotnetbuildhangs\r\n2) dotnet build\r\n\r\n## Expected  behavior\r\nThe ```dotnet  build``` command successfully builds the project\r\n\r\n## Actual behavior\r\nThe ```dotnet  build``` command hangs\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010591\r\n Commit:    6cb32d53bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010591\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27503-9\r\n  Commit:  04c13d860a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010591 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@livarcocc commented on [Mon Mar 11 2019](https://github.com/dotnet/cli/issues/10942#issuecomment-471779151)\n\nThis is actually hanging on Roslyn in the VBCSCompiler. Saw that through Process Explorer. Moving this issue there.\n\n","Url":"https://github.com/dotnet/roslyn/issues/34020","RelatedDescription":"Open issue \"The 'dotnet build' command hangs when building a specific code\" (#34020)"},{"Id":"419179085","IsPullRequest":true,"CreatedAt":"2019-03-11T23:12:24","Actor":"YairHalberstadt","Number":"34005","RawContent":null,"Title":"Parse a pointer to an array correctly.","State":"closed","Body":"See #33482","Url":"https://github.com/dotnet/roslyn/pull/34005","RelatedDescription":"Closed or merged PR \"Parse a pointer to an array correctly.\" (#34005)"},{"Id":"419714576","IsPullRequest":false,"CreatedAt":"2019-03-11T22:44:06","Actor":"mcmikecreations","Number":"34019","RawContent":null,"Title":"Ahead code execution error during debug","State":"closed","Body":"**Version Used**: VS Enterprise 2017 with March 2019 update\r\n\r\n**Steps to Reproduce**:\r\nThis is hard to explain. Here's the video with my steps: [Youtube](https://youtu.be/oEkkzwy3hX4)\r\n1. I enabled a bunch of debug breakpoints. Further down in the code I have a function that sets the \"registers\" to \"Taken\" one by one.\r\n2. I jump one step (command) at a time or more, each time the code ahead is for some reason executed, taking the \"register\".\r\n3. When I disable the breakpoints, everything works fine.\r\n\r\n**Expected Behavior**:\r\nI am able to debug my code without any issues.\r\n**Actual Behavior**:\r\nThe debugger executes code ahead, ruining my program.","Url":"https://github.com/dotnet/roslyn/issues/34019","RelatedDescription":"Closed issue \"Ahead code execution error during debug\" (#34019)"},{"Id":"419708334","IsPullRequest":false,"CreatedAt":"2019-03-11T22:11:27","Actor":"gafter","Number":"34018","RawContent":null,"Title":"Inferred nullable flow state from a finally block","State":"open","Body":"I don't think our current inference design interacts with finally blocks well:\r\n``` c#\r\nC? c = null;\r\ntry\r\n{\r\n    c = SomeNonNullComputation;\r\n}\r\nfinally\r\n{\r\n    if (c != null) c.Cleanup();\r\n}\r\nc.Operation(); // undeserved warning\r\n```\r\nWe infer from `c != null` that `c` might be null.  That inference leaks out to the enclosing construct.  The result is a warning when `c` is used after the try-finally statement.  This will be a common pain point.\r\n\r\nI don't think indirect inferences from inside a `finally` block should leak out to the enclosing context.  An inference from an actual assignment in the `finally` block should indeed leak out, though.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34018","RelatedDescription":"Open issue \"Inferred nullable flow state from a finally block\" (#34018)"},{"Id":"419691552","IsPullRequest":true,"CreatedAt":"2019-03-11T21:26:52","Actor":"333fred","Number":"34017","RawContent":null,"Title":"Nullability Rewriter Step","State":"open","Body":"This adds an initial implementation of the NullableWalker part of\r\nrewriting the bound tree with nullability information, and hooks up the\r\nrewriter to this. It additionally adds a debug verifier for the\r\nNullableWalker that will verify that we're actually visiting and\r\nrecording results for all BoundExpression nodes in the tree. Some tests\r\nare currently skipped where this does not hold true to allow the review\r\ncycle to start while work continues.\r\n\r\nAdditionally, the VerifyTypes compilation helper is hooked up to this\r\nrewritten information as a basic smoke test of the information being\r\nproduced by the rewriter.\r\n\r\nFor this PR, I'm most concerned about the general approach of getting\r\nthe information from the NullableWalker. If you have specific concerns\r\nabout some of the information from the walker being incorrect, please\r\nnote it and I'll put a prototype comment to follow up and add a test\r\nto verify the behavior, but I'm not going to correct individual\r\nscenarios in this PR.\r\n\r\nTo make this PR reviewable, I've separated the changes into 3 commits, and\r\nI suggest going commit by commit. Commit 1 is the public API rename from\r\nNullability to NullableAnnotation and NullableFlowState. Commit 2 is\r\nseparating the public version of NullableAnnotation from the private\r\nversion, as that affects what we emit in the Nullable attribute and\r\nwe don't want to have a concept of default in that code path. Commit 3\r\nadds the rewriting logic to the NullableWalker and skips some tests\r\nthat are currently not passing. There is some bleed-over of the rename\r\nin NullableReferenceTypeTests.cs as I did not reorganize the commit\r\nline-by-line in that file. I was going to clean up the locations\r\nof NullableAnnotation/NullableFlowState in this PR, but no matter what\r\nI do I'm going to have some conflicts with Neal's change so I'll fix\r\nthose up after this is merged.","Url":"https://github.com/dotnet/roslyn/pull/34017","RelatedDescription":"Open PR \"Nullability Rewriter Step\" (#34017)"},{"Id":"419689393","IsPullRequest":true,"CreatedAt":"2019-03-11T21:21:15","Actor":"jcouv","Number":"34016","RawContent":null,"Title":" Bind T? in cref as Nullable<T>","State":"open","Body":"## Customer scenario\r\nIn 16.0, the binding of `T?` in a cref such as `<see cref=\"M{T}(T?)\"/>` regressed. \r\nThis should compile without warning and bind to `M(Nullable<T>)`, but instead produces a warning \"CS1580\tInvalid type for parameter T? in XML comment cref attribute\".\r\n\r\n## Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/33782\r\n\r\n## Workarounds, if any\r\nNone\r\n\r\n## Risk, Performance impact\r\nLow. We're making sure that `T?` always binds to `Nullable<T>` in crefs.\r\n\r\n## Is this a regression from a previous update?\r\nYes.\r\n\r\n## Root cause analysis\r\nThe binding of a `T?` changed due to the nullable feature. \r\nIn common usage (outside of a cref), it can now bind to `Nullable<T>` in some cases, or to an annotated `T` in some others (producing an error for unconstrained type parameters).\r\nBut crefs don't include constraints, so this binding change caused `T?` in a cref to bind as an annotated `T` with a unconstrainted `T` (that's an error). The error presented with a specific message for crefs...\r\n\r\n\r\n## How was the bug found?\r\nReported by customer.\r\n\r\n----\r\n\r\nNote: from discussion with Chuck, this fix is correct for the long-term as well. If you want a cref to reference a method with an annotated `T`, you should just use `T`. If you want a cref to reference a method with a `Nullable<T>`, you should use `T?` (as before). We're not planning to extend cref to represent nullable reference type annotations.\r\n\r\nFilled https://devdiv.visualstudio.com/DevDiv/_workitems/edit/817666/ for ask-mode approval.","Url":"https://github.com/dotnet/roslyn/pull/34016","RelatedDescription":"Open PR \" Bind T? in cref as Nullable<T>\" (#34016)"},{"Id":"419666607","IsPullRequest":true,"CreatedAt":"2019-03-11T20:24:15","Actor":"agocke","Number":"34015","RawContent":null,"Title":"Tuple nullable suppression","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34015","RelatedDescription":"Open PR \"Tuple nullable suppression\" (#34015)"},{"Id":"419639784","IsPullRequest":false,"CreatedAt":"2019-03-11T19:28:30","Actor":"cston","Number":"34014","RawContent":null,"Title":"Nullable state is not updated for receiver if conditional access expression is a method call","State":"closed","Body":"A warning is reported for `c.F().ToString()`:\r\n```C#\r\n#nullable enable\r\n\r\nclass C\r\n{\r\n    internal object? F() => null;\r\n}\r\n\r\nclass Program\r\n{\r\n    static void F(C? c)\r\n    {\r\n        if (c?.F() != null)\r\n            c.F().ToString(); // warning: may be null\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34014","RelatedDescription":"Closed issue \"Nullable state is not updated for receiver if conditional access expression is a method call\" (#34014)"},{"Id":"419620788","IsPullRequest":false,"CreatedAt":"2019-03-11T18:31:03","Actor":"tonyhallett","Number":"34013","RawContent":null,"Title":"EditorConfig Item Template ( .NET ) generates incorrect language code style options names","State":"open","Body":"I have reported this issue through Visual Studio feedback but thought this might be something that Roslyn manages in a private repo for visual studio or corresponds with the appropriate visual studio team.  Regardless, editorconfig is Rolyn based so here it is.\r\n\r\nThe item template C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\ItemTemplates\\CSharp\\General\\EditorConfig\\Editorconfig.CS.DotNet.vstemplate points to a dll containing wizard EditorconfigTemplateWizard that generates the .editorconfig file by calling the EditorConfigFileGenerator that incorrectly writes the option names dotnet_style_prefer_inferred_tuple_names and dotnet_style_prefer_inferred_anonymous_type_member_names as dotnet_prefer_inferred_tuple_names and dotnet_prefer_inferred_anonymous_type_member_names respectively.  ( These strings are defined in the EditorConfigFileGenerator static constructor )\r\n","Url":"https://github.com/dotnet/roslyn/issues/34013","RelatedDescription":"Open issue \"EditorConfig Item Template ( .NET ) generates incorrect language code style options names\" (#34013)"},{"Id":"419605913","IsPullRequest":true,"CreatedAt":"2019-03-11T17:56:16","Actor":"AlekseyTs","Number":"34012","RawContent":null,"Title":"Support protected access for declarations in interfaces","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34012","RelatedDescription":"Open PR \"Support protected access for declarations in interfaces\" (#34012)"},{"Id":"419592450","IsPullRequest":false,"CreatedAt":"2019-03-11T17:27:20","Actor":"sharwell","Number":"34011","RawContent":null,"Title":"Consider removing IDocumentOperationsService.CanApplyChange","State":"open","Body":"> dumb question.  why do we need this guy?  it even says you should be able to ask `\"Workspace.CanApplyChange(ApplyChangesKind)\"`\r\n\r\n_Originally posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/34009#discussion_r264343085_","Url":"https://github.com/dotnet/roslyn/issues/34011","RelatedDescription":"Open issue \"Consider removing IDocumentOperationsService.CanApplyChange\" (#34011)"},{"Id":"419567681","IsPullRequest":true,"CreatedAt":"2019-03-11T16:35:10","Actor":"jaredpar","Number":"34010","RawContent":null,"Title":"Move to MSBuild 16.0","State":"open","Body":"This is a necessary pre-req to us adotping the 3.0 .NET Core SDK.","Url":"https://github.com/dotnet/roslyn/pull/34010","RelatedDescription":"Open PR \"Move to MSBuild 16.0\" (#34010)"},{"Id":"419259208","IsPullRequest":false,"CreatedAt":"2019-03-11T13:20:08","Actor":"oliverjanik","Number":"34008","RawContent":null,"Title":"Code Formatting option to enforce using directive inside a namespace","State":"closed","Body":"Apologies if I missed this. I did my best to search through issues.\r\n\r\nBoth Resharper and StyleCop had formatting rules where they could enforce using directives to be placed inside the namespace.\r\n\r\nAt the moment Visual Studio lets me place using directives inside the namespace and it works fine with them when refactoring but it does not let me *enforce* that all using directive *should* be inside a namespace.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34008","RelatedDescription":"Closed issue \"Code Formatting option to enforce using directive inside a namespace\" (#34008)"},{"Id":"419461152","IsPullRequest":true,"CreatedAt":"2019-03-11T13:11:20","Actor":"sharwell","Number":"34009","RawContent":null,"Title":"Remove IDocumentOperationService.SupportsDiagnostics","State":"open","Body":"All documents can support diagnostics; this property is unnecessary.","Url":"https://github.com/dotnet/roslyn/pull/34009","RelatedDescription":"Open PR \"Remove IDocumentOperationService.SupportsDiagnostics\" (#34009)"},{"Id":"419241079","IsPullRequest":true,"CreatedAt":"2019-03-10T22:25:32","Actor":"sharwell","Number":"34007","RawContent":null,"Title":"Expedite delayed operations when tests are waiting","State":"open","Body":"Saves about 20 minutes off our longest test legs.","Url":"https://github.com/dotnet/roslyn/pull/34007","RelatedDescription":"Open PR \"Expedite delayed operations when tests are waiting\" (#34007)"},{"Id":"419206501","IsPullRequest":false,"CreatedAt":"2019-03-10T16:48:21","Actor":"VBAndCs","Number":"34006","RawContent":null,"Title":"Add Indent to format multi-line strings","State":"open","Body":"when we right multi-line string, it looks like this:\r\n```C#\r\n            var code = @\"\r\npublic class MyClass\r\n{\r\n    public void MyMethod()\r\n    { \r\n    }\r\n}\";\r\n```\r\n\r\nwe can't add spaces in each line to format the string, because they will be added to the string itself, \r\nCan VS editor add some auto indent to multi-line strings, so it is not considered as spaces (indent in word is not a white space)?\r\nI can workaround this using something like:\r\n```C#\r\n            var code = @\"\r\n___________________public class MyClass\r\n___________________{\r\n___________________    public void MyMethod()\r\n___________________   {\r\n___________________   }\r\n___________________}\"\r\n                .Replace(\"___________________\", \"\");\r\n```\r\n\r\nbut it still looks ugly!\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34006","RelatedDescription":"Open issue \"Add Indent to format multi-line strings\" (#34006)"},{"Id":"419147475","IsPullRequest":true,"CreatedAt":"2019-03-10T05:05:37","Actor":"jcouv","Number":"34004","RawContent":null,"Title":"Warn on locking null","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/26810","Url":"https://github.com/dotnet/roslyn/pull/34004","RelatedDescription":"Open PR \"Warn on locking null\" (#34004)"},{"Id":"419136506","IsPullRequest":true,"CreatedAt":"2019-03-10T01:59:44","Actor":"tmat","Number":"34003","RawContent":null,"Title":"Use Arcade x-plat resx generator","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34003","RelatedDescription":"Open PR \"Use Arcade x-plat resx generator\" (#34003)"},{"Id":"419133861","IsPullRequest":false,"CreatedAt":"2019-03-10T01:15:33","Actor":"tmat","Number":"34002","RawContent":null,"Title":"Remove Roslyn.VisualStudio.InteractiveComponents.vsix","State":"open","Body":"We generate this VSIX only to override previously installed versions.\r\nOnce we move to newer VS drop (16.1) that doesn't have this VSIX installed we can disable generating VSIX container for this project.\r\n","Url":"https://github.com/dotnet/roslyn/issues/34002","RelatedDescription":"Open issue \"Remove Roslyn.VisualStudio.InteractiveComponents.vsix\" (#34002)"},{"Id":"419122603","IsPullRequest":true,"CreatedAt":"2019-03-09T22:31:05","Actor":"CyrusNajmabadi","Number":"34001","RawContent":null,"Title":"No blank line indentation","State":"open","Body":"Followup to https://github.com/dotnet/roslyn/pull/33989.  That PR shoudl be reviewed and merged first.\r\n\r\nThis gets rid of the separate IBlankLineIndentation concept now that we can have a single service that just does the right thing in all cases.","Url":"https://github.com/dotnet/roslyn/pull/34001","RelatedDescription":"Open PR \"No blank line indentation\" (#34001)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"419683481","IsPullRequest":true,"CreatedAt":"2019-03-11T23:37:06","Actor":"Dotnet-GitSync-Bot","Number":"7149","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7149","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7149)"},{"Id":"419523272","IsPullRequest":true,"CreatedAt":"2019-03-11T20:57:30","Actor":"MichalStrehovsky","Number":"7147","RawContent":null,"Title":"Replace Delegate.CreateDelegate","State":"closed","Body":"Replacing this with a pattern that is easier to statically analyze. We use the GetType/GetMethod/CreateDelegate pattern in several places already.","Url":"https://github.com/dotnet/corert/pull/7147","RelatedDescription":"Closed or merged PR \"Replace Delegate.CreateDelegate\" (#7147)"},{"Id":"419526684","IsPullRequest":true,"CreatedAt":"2019-03-11T20:56:43","Actor":"Dotnet-GitSync-Bot","Number":"7148","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7148","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7148)"},{"Id":"419120028","IsPullRequest":true,"CreatedAt":"2019-03-11T15:14:04","Actor":"Dotnet-GitSync-Bot","Number":"7140","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft @EgorBo","Url":"https://github.com/dotnet/corert/pull/7140","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7140)"},{"Id":"419198424","IsPullRequest":true,"CreatedAt":"2019-03-11T13:25:46","Actor":"MichalStrehovsky","Number":"7143","RawContent":null,"Title":"Add reflection IL scanner","State":"closed","Body":"Adds an option to scan IL of compiled methods for common reflection patterns so that we can compile more code needed by reflection.\r\n\r\nThe algorithm here is really primitive: we scan the IL forward in a single pass, remembering the last type/string/token we saw.\r\n\r\nWe then intrinsically recognize a couple methods that consume this information.\r\n\r\nThis has obvious problems since we don't have exact knowledge of the parameters passed (something being in front of a call doesn't mean it's a parameter to the call). But since this is a heuristic, it's okay. We want this to be as fast as possible.\r\n\r\nThe main purposes of this scanner is to make following patterns work:\r\n* `Enum.GetValues(typeof(Foo))` - this is very common and we need to make sure Foo[] is compiled.\r\n* `Type.GetType(\"Foo, Bar\").GetMethod(\"Blah\")` - framework uses this to work around layering problems.\r\n* `typeof(Foo<>).MakeGenericType(arg).GetMethod(\"Blah\")` - used in e.g. LINQ expressions implementation\r\n\r\nWith this, ASP.Net WebApi sample no longer needs RD.XML at all. The only sample that needs RD.XML (and has instructions on what it is and how it's used) is the MonoGame sample.","Url":"https://github.com/dotnet/corert/pull/7143","RelatedDescription":"Closed or merged PR \"Add reflection IL scanner\" (#7143)"},{"Id":"419275503","IsPullRequest":true,"CreatedAt":"2019-03-11T09:21:14","Actor":"jkotas","Number":"7145","RawContent":null,"Title":"Update corefx version","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7145","RelatedDescription":"Closed or merged PR \"Update corefx version\" (#7145)"},{"Id":"419285054","IsPullRequest":true,"CreatedAt":"2019-03-11T09:19:31","Actor":"jkotas","Number":"7146","RawContent":null,"Title":"Binplace ILCompiler build task into separate directory","State":"closed","Body":"This allows the build task to carry own copy of its dependencies that are not AOT compiled and work on both .NET Framework and .NET Core\r\n\r\nContributes to #6773","Url":"https://github.com/dotnet/corert/pull/7146","RelatedDescription":"Closed or merged PR \"Binplace ILCompiler build task into separate directory\" (#7146)"},{"Id":"419252307","IsPullRequest":true,"CreatedAt":"2019-03-11T00:19:47","Actor":"sergiy-k","Number":"7144","RawContent":null,"Title":"Enable running CoreFX tests and Post Checkin validation with Azure Pipelines","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7144","RelatedDescription":"Open PR \"Enable running CoreFX tests and Post Checkin validation with Azure Pipelines\" (#7144)"},{"Id":"419023654","IsPullRequest":true,"CreatedAt":"2019-03-10T07:09:09","Actor":"nattress","Number":"7135","RawContent":null,"Title":"Fix up metadata RVAs for R2R images","State":"closed","Body":"IL metadata contains RVAs (to method entry points and field initial values). If the managed .text section is shifted in the output image with respect to the input image, we cannot copy it verbatim and must update the RVAs.\r\n\r\nWhen copying the input .text section to the output image, fix up RVAs in the metadata. This is done in a targetted manner to avoid having to fully deserialize the metadata and re-encode it.\r\n\r\nThe impetus for this fix is to allow CPAOT to re-compile ready-to-run images produced by Crossgen. Crossgen switches section ordering and puts .data before .text which invalidates all the metadata RVAs.","Url":"https://github.com/dotnet/corert/pull/7135","RelatedDescription":"Closed or merged PR \"Fix up metadata RVAs for R2R images\" (#7135)"},{"Id":"419129421","IsPullRequest":true,"CreatedAt":"2019-03-10T06:03:14","Actor":"jkotas","Number":"7142","RawContent":null,"Title":"Use latest servicing patch of .NET Core 2.1","State":"closed","Body":"Fixes #7141","Url":"https://github.com/dotnet/corert/pull/7142","RelatedDescription":"Closed or merged PR \"Use latest servicing patch of .NET Core 2.1\" (#7142)"},{"Id":"419120131","IsPullRequest":false,"CreatedAt":"2019-03-10T06:03:14","Actor":"dhcgn","Number":"7141","RawContent":null,"Title":"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)","State":"closed","Body":"I installed a fresh ubuntu 19.04 in hyper-v and tried the [console sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld).\r\n\r\nBut I get the error:\r\n\r\n> No usable version of the libssl was found\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create project\r\n    1. `sudo snap install dotnet-sdk --classic`\r\n    2. `sudo snap alias dotnet-sdk.dotnet dotnet`\r\n    3. `dotnet new console -o HelloWorld`\r\n    4. `cd HelloWorld`\r\n    5. `dotnet run` **Works!**\r\n2. Add ILCompiler \r\n    6. `dotnet new nuget`\r\n    7. `nuget.config` add packageSources\r\n    8. `dotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-*`\r\n3. Install pre-requisites \r\n    9. `echo \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-3.9 main\" | sudo tee /etc/apt/sources.list.d/llvm.list`\r\n    10. `wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -`\r\n    11. `sudo apt-get update`\r\n    12. `sudo apt-get install cmake clang-3.9 uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev`\r\n13. Install libicu55\r\n    1. `sudo add-apt-repository \"deb http://security.ubuntu.com/ubuntu xenial-security main\"`\r\n    2. `sudo apt-get update`\r\n    3. `sudo apt-get install libicu55`\r\n13. `dotnet publish -r linux-x64 -c release` Error \"No usable version of the libssl was found\"\r\n\r\n**Logging:**\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /home/daniel/HelloWorld/HelloWorld.csproj...\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing Microsoft.NETCore.App 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.2.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27509-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.2.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.props.\r\n  Generating MSBuild file /home/daniel/HelloWorld/obj/HelloWorld.csproj.nuget.g.targets.\r\n  Restore completed in 1.25 min for /home/daniel/HelloWorld/HelloWorld.csproj.\r\n  HelloWorld -> /home/daniel/HelloWorld/bin/release/netcoreapp2.2/linux-x64/HelloWorld.dll\r\n  /bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\n  No usable version of the libssl was found\r\n  Aborted (core dumped)\r\n/home/daniel/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/build/Microsoft.NETCore.Native.targets(235,5): error MSB3073: The command \"\"/home/daniel/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27509-01/tools/ilc\" @\"obj/release/netcoreapp2.2/linux-x64/native/HelloWorld.ilc.rsp\"\" exited with code 134. [/home/daniel/HelloWorld/HelloWorld.csproj]\r\n```\r\n\r\n**Ubuntu**\r\n\r\n```\r\ndaniel@vm:~/HelloWorld$ uname -a\r\nLinux vm 4.19.0-13-generic #14-Ubuntu SMP Thu Feb 7 21:51:25 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\ndaniel@vm:~/HelloWorld$  lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu Disco Dingo (development branch)\r\nRelease:\t19.04\r\nCodename:\tdisco\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7141","RelatedDescription":"Closed issue \"Simple Console App fails to publish with ubuntu 19.04 (No usable version of the libssl was found)\" (#7141)"},{"Id":"419091230","IsPullRequest":true,"CreatedAt":"2019-03-09T21:54:58","Actor":"Dotnet-GitSync-Bot","Number":"7138","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7138","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7138)"},{"Id":"417111320","IsPullRequest":false,"CreatedAt":"2019-03-09T17:48:53","Actor":"trampster","Number":"7121","RawContent":null,"Title":"linux-arm not supported yet.","State":"closed","Body":"I'm building with the following command:\r\n\r\n    dotnet publish -c Release -r linux-arm --self-contained true\r\n\r\nI'm getting the follow message when trying to build for linux arm:\r\n\r\n    /.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27505-01/build/Microsoft.NETCore.Native.Publish.targets(65,5): error : linux-arm not supported yet. https://github.com/dotnet/corert/issues/4589\r\n\r\nThat issue link is about x86....\r\n\r\nThe readme says that Linux ARM is supported w/ RyuJIT codegen\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7121","RelatedDescription":"Closed issue \"linux-arm not supported yet.\" (#7121)"},{"Id":"419097286","IsPullRequest":true,"CreatedAt":"2019-03-09T17:46:10","Actor":"MichalStrehovsky","Number":"7139","RawContent":null,"Title":"Add task to dump Win32 resources","State":"open","Body":"This task extracts Win32 resources from the main managed assembly into a RES file that we subsequently pass as input to the platform linker.\r\n\r\nFixes #5095.","Url":"https://github.com/dotnet/corert/pull/7139","RelatedDescription":"Open PR \"Add task to dump Win32 resources\" (#7139)"},{"Id":"419036630","IsPullRequest":true,"CreatedAt":"2019-03-09T16:31:58","Actor":"Dotnet-GitSync-Bot","Number":"7136","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7136","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7136)"},{"Id":"419080411","IsPullRequest":true,"CreatedAt":"2019-03-09T15:02:34","Actor":"yowl","Number":"7137","RawContent":null,"Title":"WIP: WASM: Add exception handling - emit EHInfo data","State":"open","Body":"These changes include @morganbr's Exception handling work for wasm and emit the EHInfo data that will be used in the landing pads.  This follows the ideas set out at https://github.com/dotnet/corert/issues/4655#issuecomment-361201665.  The EHInfo is copied from `src\\ILCompiler.RyuJit\\src\\JitInterface\\CorInfoImpl.RyuJit.cs` and there are quite a few comments and debug code to be cleared up later.  For now a review of the throwing of the exception and the emission of the EHInfo would be useful to ensure that the direction is ok.\r\n\r\nThe LLVM output of the code so far will include (as well as the incomplete landing pads), the EHInfo written out as global blob symbols :\r\n```\r\n@HelloWasm_Program__TestDispose___EHInfo = global [2 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -1055971326) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*)]\r\n@HelloWasm_Program__TestTryCatchNoException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -267445246) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 822083583) to i32*), i32* null]\r\n@HelloWasm_Program__TestTryCatchThrowException___EHInfo = global [3 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 -737207294) to i32*), i32* bitcast (i8* getelementptr (i8, i8* null, i32 587202559) to i32*), i32* null]\r\n@HelloWasm_Program__TryFinallyInner___EHInfo = global [1 x i32*] [i32* bitcast (i8* getelementptr (i8, i8* null, i32 405931522) to i32*)]\r\n```","Url":"https://github.com/dotnet/corert/pull/7137","RelatedDescription":"Open PR \"WIP: WASM: Add exception handling - emit EHInfo data\" (#7137)"},{"Id":"419002193","IsPullRequest":true,"CreatedAt":"2019-03-09T03:02:03","Actor":"nattress","Number":"7134","RawContent":null,"Title":"Make CoreCLR R2R test switch case insensitive","State":"closed","Body":"Our CI has been running the CoreCLR R2R tests in JIT mode due to netci.groovy passing in /mode ReadyToRun and the check looking for 'readytorun'.","Url":"https://github.com/dotnet/corert/pull/7134","RelatedDescription":"Closed or merged PR \"Make CoreCLR R2R test switch case insensitive\" (#7134)"},{"Id":"418942042","IsPullRequest":true,"CreatedAt":"2019-03-08T23:04:36","Actor":"Dotnet-GitSync-Bot","Number":"7133","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling @ahoefling","Url":"https://github.com/dotnet/corert/pull/7133","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7133)"},{"Id":"418915032","IsPullRequest":true,"CreatedAt":"2019-03-08T20:15:48","Actor":"Dotnet-GitSync-Bot","Number":"7132","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7132","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7132)"},{"Id":"418666416","IsPullRequest":true,"CreatedAt":"2019-03-08T15:32:58","Actor":"Dotnet-GitSync-Bot","Number":"7131","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @davidkaya @marek-safar","Url":"https://github.com/dotnet/corert/pull/7131","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7131)"},{"Id":"418545076","IsPullRequest":true,"CreatedAt":"2019-03-08T07:27:31","Actor":"Dotnet-GitSync-Bot","Number":"7130","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7130","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7130)"},{"Id":"418103302","IsPullRequest":true,"CreatedAt":"2019-03-08T01:54:42","Actor":"sergiy-k","Number":"7127","RawContent":null,"Title":"Unify invocation of build and test scripts on all platforms","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7127","RelatedDescription":"Closed or merged PR \"Unify invocation of build and test scripts on all platforms\" (#7127)"},{"Id":"418517828","IsPullRequest":false,"CreatedAt":"2019-03-07T21:19:46","Actor":"tonerdo","Number":"7129","RawContent":null,"Title":"[Interpreter] Implement newobj opcode","State":"open","Body":"I'm working on adding support for the `newobj` opcode and I think I might need some help.\r\n\r\nHere's what I'm doing:\r\n\r\n* Retrieve the constructor and its owning type\r\n  ```csharp\r\n  MethodDesc constructor = (MethodDesc)_methodIL.GetObject(token);\r\n  TypeDesc owningType = constructor.OwningType;\r\n  ```\r\n* Create a zero-initialized object from the owning type\r\n  ```csharp\r\n  object @this = RuntimeAugments.NewObject(owningType.GetRuntimeTypeHandle());\r\n  ```\r\n* Call the dynamic invoke method to invoke the constructor\r\n  ```csharp\r\n  object obj = RuntimeAugments.CallDynamicInvokeMethod(\r\n                thisPtr: @this,\r\n                methodToCall: constructor.FunctionPointer,\r\n                thisPtrDynamicInvokeMethod: null,\r\n                dynamicInvokeHelperMethod: IntPtr.Zero,\r\n                dynamicInvokeHelperGenericDictionary: IntPtr.Zero,\r\n                defaultParametersContext: null,\r\n                parameters: arguments,\r\n                binderBundle: null,\r\n                wrapInTargetInvocationException: true,\r\n                invokeMethodHelperIsThisCall: false,\r\n                methodToCallIsThisCall: true);\r\n  ```\r\n\r\nHere are the problems I'm having:\r\n\r\n* `constructor.FunctionPointer` always returns `IntPtr.Zero` and I've not been to figure out how to get a `RuntimeMethodHandle` from `constructor`\r\n* After taking a look at the invokers in the Reflection package, I came to the conclusion that I have to pass in non-zero pointers for  `dynamicInvokeHelperMethod` and `defaultParametersContext`. However, it's not immediately clear what these methods do and where they come from.\r\n\r\ncc @MichalStrehovsky @jkotas ","Url":"https://github.com/dotnet/corert/issues/7129","RelatedDescription":"Open issue \"[Interpreter] Implement newobj opcode\" (#7129)"},{"Id":"418468163","IsPullRequest":true,"CreatedAt":"2019-03-07T20:32:04","Actor":"Dotnet-GitSync-Bot","Number":"7128","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7128","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7128)"},{"Id":"417999683","IsPullRequest":true,"CreatedAt":"2019-03-07T05:25:17","Actor":"Dotnet-GitSync-Bot","Number":"7126","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer @dotnet-maestro[bot] @shadow-cs @marek-safar @maryamariyan @stephentoub @tannergooding","Url":"https://github.com/dotnet/corert/pull/7126","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7126)"},{"Id":"417589050","IsPullRequest":true,"CreatedAt":"2019-03-07T01:53:12","Actor":"sergiy-k","Number":"7125","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for Linux","State":"closed","Body":"This adds support for building and testing Pull Requests in Ubuntu docker containers. Note that docker images have all required dependencies preinstalled.","Url":"https://github.com/dotnet/corert/pull/7125","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for Linux\" (#7125)"},{"Id":"417511356","IsPullRequest":true,"CreatedAt":"2019-03-06T01:46:30","Actor":"jkotas","Number":"7123","RawContent":null,"Title":"Bump init-tools semaphore name","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7123","RelatedDescription":"Closed or merged PR \"Bump init-tools semaphore name\" (#7123)"},{"Id":"417104642","IsPullRequest":true,"CreatedAt":"2019-03-06T01:03:15","Actor":"sergiy-k","Number":"7120","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for OSX","State":"closed","Body":"This adds support for OSX. To enable CI for Linux I still need to figure out the name of docker containers (or a machine pool) to use. \r\nThe eng/install-native-dependencies.sh file has been copied from the CoreCLR repo.","Url":"https://github.com/dotnet/corert/pull/7120","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for OSX\" (#7120)"},{"Id":"417533540","IsPullRequest":true,"CreatedAt":"2019-03-05T22:34:25","Actor":"sergiy-k","Number":"7124","RawContent":null,"Title":"[WIP] Test performance of another CI machine pool","State":"open","Body":"This is just a test","Url":"https://github.com/dotnet/corert/pull/7124","RelatedDescription":"Open PR \"[WIP] Test performance of another CI machine pool\" (#7124)"},{"Id":"417273432","IsPullRequest":true,"CreatedAt":"2019-03-05T12:26:06","Actor":"MichalStrehovsky","Number":"7122","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7122","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7122)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"419043286","IsPullRequest":false,"CreatedAt":"2019-03-11T15:36:04","Actor":"saxenark","Number":"3014","RawContent":null,"Title":"Installing JRE in microsoft/dotnet:sdk container","State":"closed","Body":"Hi,\r\n\r\nI need JRE to run dependencies for my .NET core sdk 2.2 unit tests in Visual Studio 2017. I would like to know how to install JRE into my windows docker container. Through the docker environment, I tried to run java.exe but it does not run.\r\n\r\nSo, my question is how do I install JRE on my container?\r\n\r\n```\r\nFROM microsoft/dotnet:sdk\r\n\r\nWORKDIR C:/Temp\r\nCOPY jre-8u202-windows-x64.exe ./Java.exe\r\n\r\nWORKDIR C:/P4Source\r\n\r\nI am using Windows Server 2016 1607 with Docker basic EE\r\n\r\nThanks,\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3014","RelatedDescription":"Closed issue \"Installing JRE in microsoft/dotnet:sdk container\" (#3014)"},{"Id":"419249712","IsPullRequest":true,"CreatedAt":"2019-03-11T13:32:19","Actor":"dotnet-maestro[bot]","Number":"3017","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19160.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19160.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3017","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3017)"},{"Id":"419177642","IsPullRequest":true,"CreatedAt":"2019-03-10T13:16:08","Actor":"dotnet-maestro[bot]","Number":"3016","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19159.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19159.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3016","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3016)"},{"Id":"419069291","IsPullRequest":true,"CreatedAt":"2019-03-09T14:16:04","Actor":"dotnet-maestro[bot]","Number":"3015","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19158.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19158.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3015","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3015)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-08T14:43:34","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.23\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.23\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-08T00:01:52","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-04T23:24:46","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"open","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Open issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-04T13:09:35","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"open","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Open issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"},{"Id":"416214091","IsPullRequest":true,"CreatedAt":"2019-03-01T17:55:17","Actor":"JoeRobich","Number":"3000","RawContent":null,"Title":"Update the json manifest for the Dotfuscator Vsix","State":"closed","Body":"@livarcocc This is to update the dotfuscator manifest for a new build (in dotfuscator branch, which unfortunately still exists in this repo...)","Url":"https://github.com/dotnet/sdk/pull/3000","RelatedDescription":"Closed or merged PR \"Update the json manifest for the Dotfuscator Vsix\" (#3000)"},{"Id":"416092757","IsPullRequest":true,"CreatedAt":"2019-03-01T14:21:16","Actor":"dotnet-maestro[bot]","Number":"2999","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19128.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2999","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2999)"},{"Id":"415919082","IsPullRequest":false,"CreatedAt":"2019-03-01T03:00:55","Actor":"sayedihashimi","Number":"2998","RawContent":null,"Title":"Unable to run global tools in PowerShell running on macOS","State":"open","Body":"I tried to execute a global tool from PowerShell running on macOS and the tool was not located. When I run `dotnet tool list --global` it does show up. When I exit out of PowerShell, and get back into a normal bash prompt, the global tool works fine.\r\n\r\nmacOS version = 10.14.2\r\n\r\n![global-tool](https://user-images.githubusercontent.com/1283154/53613386-f3f2e280-3ba3-11e9-90de-4669536bc35e.jpg)\r\n\r\nHere are the runtime/sdks that I have installed.\r\n![image](https://user-images.githubusercontent.com/1283154/53613512-2e5c7f80-3ba4-11e9-9073-9f4d0a32e6c1.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2998","RelatedDescription":"Open issue \"Unable to run global tools in PowerShell running on macOS\" (#2998)"},{"Id":"415882721","IsPullRequest":true,"CreatedAt":"2019-03-01T00:15:02","Actor":"fadimounir","Number":"2997","RawContent":null,"Title":"Crossgen Task","State":"open","Body":"Intitial implementation of the crossgen task, and plumbing in the SDK targets to invoke the task. The crossgen task invokes crossgen from the runtime pack.\r\n\r\n- Task triggered when <ReadyToRun> is set to true in the main app's project file (opt-in feature)\r\n- Added new condition to download runtime packs: when the ReadyToRun property is set.\r\n- Adding R2R exclusion list capability\r\n- Symbol emission is optional (opt-in, when ReadyToRunEmitSymbols is set to true)","Url":"https://github.com/dotnet/sdk/pull/2997","RelatedDescription":"Open PR \"Crossgen Task\" (#2997)"},{"Id":"415838644","IsPullRequest":false,"CreatedAt":"2019-02-28T21:47:43","Actor":"nguerrera","Number":"2996","RawContent":null,"Title":"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2994#discussion_r261372831\r\n\r\nIs this by design? ","Url":"https://github.com/dotnet/sdk/issues/2996","RelatedDescription":"Open issue \"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard\" (#2996)"},{"Id":"415612168","IsPullRequest":true,"CreatedAt":"2019-02-28T14:26:25","Actor":"dotnet-maestro[bot]","Number":"2995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19127.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2995)"},{"Id":"415365956","IsPullRequest":true,"CreatedAt":"2019-02-27T22:56:37","Actor":"etbyrd","Number":"2994","RawContent":null,"Title":"Remove opt-out of COM Reference Manager Tab","State":"open","Body":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. ","Url":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":"Open PR \"Remove opt-out of COM Reference Manager Tab\" (#2994)"},{"Id":"415112893","IsPullRequest":true,"CreatedAt":"2019-02-27T14:21:22","Actor":"dotnet-maestro[bot]","Number":"2993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19126.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2993)"},{"Id":"415027102","IsPullRequest":false,"CreatedAt":"2019-02-27T09:35:47","Actor":"Lily721","Number":"2992","RawContent":null,"Title":"issues occurred when .Net core console project reference .net framework class library","State":"closed","Body":"I got a .NET Core console project which use .NET Core 3.0 preview, and other class library with .NET Framework 4 Client Profile, and this framework class library got a reference from System.Security which using PermissionSet like following:\r\n\r\n`using System.Security;`\r\n`......................................`\r\n`new PermissionSet(PermissionState.Unrestricted).Demand();`\r\n\r\nWhen I add this class library to NetCore console project, everything is fine when build, but got an issue during debug:\r\n`System.TypeLoadException: 'Could not load type 'System.Security.PermissionSet' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.'`\r\n\r\nThen I checked the mscorlib.dll in local folder:(C:\\Users\\*****\\.nuget\\packages\\microsoft.netcore.app\\3.0.0-preview-27117-01\\ref\\netcoreapp3.0)\r\nand reflector it but without any system.Security namespace in it.\r\n\r\nSwitch to net core 2.0, got same issue.\r\n\r\nAnyone can help? thanks a lot.","Url":"https://github.com/dotnet/sdk/issues/2992","RelatedDescription":"Closed issue \"issues occurred when .Net core console project reference .net framework class library\" (#2992)"},{"Id":"414342537","IsPullRequest":true,"CreatedAt":"2019-02-27T01:24:23","Actor":"nguerrera","Number":"2990","RawContent":null,"Title":"Add hook to redirect common props, only ref m.nc.platforms when necessary","State":"closed","Body":"1. Introduce $(AlternateCommonProps) to redirect the Sdk common props import to a user-defined location. This is morally equivalent to $(LanguageTargets) being customizable on the targets side. Having full control over both of these imports makes it much easier to integrate the SDK into existing heavily-customized builds. The current use case is to get some internal builds over to netcoreapp3.0\r\n\r\n2. Getting an intermittent error about 'vs' not being found from dogfood script. Removing unnecessary setting of msbuildEngine seems to have fixed it.\r\n\r\n3. With https://github.com/dotnet/core-sdk/pull/698, microsoft.netcore.platforms becomes the only package that cannot be resolved from packs. Make it so that we only pull it in when there are other package references. Otherwise, nuget doesn't need to see it as a package reference. This is just moving the temporary solution around, but means that we can get a working offline experience before we figure out how to adress the runtime graph going into to nuget (or sdk taking over for nuget).","Url":"https://github.com/dotnet/sdk/pull/2990","RelatedDescription":"Closed or merged PR \"Add hook to redirect common props, only ref m.nc.platforms when necessary\" (#2990)"},{"Id":"414599677","IsPullRequest":true,"CreatedAt":"2019-02-26T14:21:42","Actor":"dotnet-maestro[bot]","Number":"2991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2991","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2991)"},{"Id":"414093522","IsPullRequest":true,"CreatedAt":"2019-02-25T14:21:40","Actor":"dotnet-maestro[bot]","Number":"2988","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2988)"},{"Id":"414119637","IsPullRequest":false,"CreatedAt":"2019-02-25T14:02:53","Actor":"loop-evgeny","Number":"2989","RawContent":null,"Title":"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"","State":"open","Body":"I created a new console application in VS 2017 using .NET Core 2.1. Published it as a self-contained linux-x64 app without any changes and tried to run it on an Ubuntu 18.04 VM. Got this error:\r\n\r\n```\r\n ./LinuxTest \r\nThis executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\n\r\nc3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 is apparently the SHA256 hash of \"foobar\", so whatever the real problem is, this is a very weird error message, too!\r\n\r\nLinuxTest.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace LinuxTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nResulting self-contained binary: [LinuxTest.zip](https://github.com/dotnet/sdk/files/2900841/LinuxTest.zip)\r\n\r\nIf I install dotnet-runtime-2.1 on the Linux VM and run `dotnet LinuxTest.dll` it works.","Url":"https://github.com/dotnet/sdk/issues/2989","RelatedDescription":"Open issue \"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"\" (#2989)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1105063819985014785","CreatedAt":"2019-03-11T11:12:00+00:00","UserScreenname":"dotnet","Text":"In this episode of #OnDotNet, Brady Gaster (@bradygaster) joins Cecil (@cecilphillip) to show how easy it is to add… https://t.co/qBrPW5zgnp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":17,"RawContent":null},{"Id":"1103473660508160001","CreatedAt":"2019-03-07T01:53:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 3 https://t.co/sXYAjLR9Wb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":358,"FavoriteCount":217,"RawContent":null},{"Id":"1103058093301149696","CreatedAt":"2019-03-05T22:21:57+00:00","UserScreenname":"dotnet","Text":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0 https://t.co/oYZK5AK8h6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":83,"FavoriteCount":50,"RawContent":null},{"Id":"1103021890837262337","CreatedAt":"2019-03-05T19:58:06+00:00","UserScreenname":"dotnet","Text":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container https://t.co/XH05KR4HVv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":23,"RawContent":null},{"Id":"1102725890788667394","CreatedAt":"2019-03-05T00:21:54+00:00","UserScreenname":"dotnet","Text":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019\n\nhttps://t.co/QdpE4oYqOM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"1101095169120747523","CreatedAt":"2019-02-28T12:22:00+00:00","UserScreenname":"dotnet","Text":"Subscribe to the On .NET on @ch9 to keep up with the latest episodes as we explore the world of .NET… https://t.co/1IClAyi1yE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2019-03-12T05:30:31.0261743Z","RunDurationInMilliseconds":9191}