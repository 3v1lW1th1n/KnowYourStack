{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":62,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7609952527","Type":"IssuesEvent","CreatedAt":"2018-05-01T04:27:10","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17835","RelatedDescription":"Closed issue \"[arm/corefx] System.Tests.TypedReferenceTests.NegativeMakeTypedReference fails\" (#17835) at dotnet/coreclr","RelatedBody":"[ci run](https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_baseline_tst/13/consoleText) shows:\r\n```\r\nDiscovering: System.Runtime.Tests\r\nDiscovered:  System.Runtime.Tests\r\nStarting:    System.Runtime.Tests\r\n\r\nAssert failure(PID 1708 [0x000006ac], Thread: 3612 [0x0e1c]): !\"You cannot use this function for arbitrary value types. You must preallocate a box object and copy the value in yourself.\"\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: d:\\j\\workspace\\arm_cross_che---99792267\\src\\vm\\invokeutil.cpp Line: 693\r\n    Image: C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe\r\n```\r\n\r\nlocal runs fail with:\r\n```\r\nZ:\\bin\\tests\\System.Runtime.Tests\\netcoreapp-Windows_NT-Release-arm>call Z:\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe xunit.console.netcore.exe System.Runtime.Tests.dll -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing -method System.Tests.TypedReferenceTests.NegativeMakeTypedReference\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Runtime.Tests\r\nDiscovered:  System.Runtime.Tests\r\nStarting:    System.Runtime.Tests\r\n   System.Tests.TypedReferenceTests.NegativeMakeTypedReference [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: (null)\r\n      Actual:   flds\r\n      Stack Trace:\r\n         F:\\git\\corefx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(48,0): at System.AssertExtensions.Throws[T](String paramName, Action action)\r\n         F:\\git\\corefx\\src\\System.Runtime\\tests\\System\\TypedReferenceTests.cs(60,0): at System.Tests.TypedReferenceTests.NegativeMakeTypedReference()\r\nFinished:    System.Runtime.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Runtime.Tests  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 4.239s\r\n```\r\n\r\nlink  https://github.com/dotnet/coreclr/issues/16001#issuecomment-385319873.\r\n\r\nProbably it will fix #17585."},{"Id":"7609947467","Type":"PullRequestEvent","CreatedAt":"2018-05-01T04:24:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17843","RelatedDescription":"Merged pull request \"Update DotnetCLIVersion.txt\" (#17843) at dotnet/coreclr","RelatedBody":""},{"Id":"7609889315","Type":"IssuesEvent","CreatedAt":"2018-05-01T03:54:24","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17782","RelatedDescription":"Closed issue \"XPlat C# Debugger is failing to show Async Callstack frames\" (#17782) at dotnet/coreclr","RelatedBody":"Found by @chuckries during scenario testing."},{"Id":"7609535604","Type":"PullRequestEvent","CreatedAt":"2018-05-01T01:08:18","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17848","RelatedDescription":"Opened pull request \"Reenable test for 17756\" (#17848) at dotnet/coreclr","RelatedBody":""},{"Id":"7609454055","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:35:02","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17847","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26501-01 (master)\" (#17847) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7609431840","Type":"IssuesEvent","CreatedAt":"2018-05-01T00:26:32","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17701","RelatedDescription":"Closed issue \"System.Diagnostics.StackTrace slow on .NET Core\" (#17701) at dotnet/coreclr","RelatedBody":"Consider the following program:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nstatic void Main()\r\n{\r\n    var start = DateTime.Now;\r\n\r\n    for (var i = 0; i < 5000; i++)\r\n    {\r\n        new StackTrace(0, true);\r\n    }\r\n\r\n    var timeSpent = DateTime.Now - start;\r\n    Console.WriteLine($\"Spent time: {timeSpent.TotalMilliseconds} ms\");\r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\nThis takes **4133.3539 ms** in .NET Core 2.0, while targeting .NET 4.7.1 this takes 108.1025 ms to execute. Making a full dump on this with procdump, I can see the following stack trace typically being called:\r\n\r\n```\r\nSystem.Private.CoreLib.dll!00007ffee4a6bfb9()\tUnknown\r\n[Managed to Native Transition]\t\r\nSystem.Private.CoreLib.dll!System.IO.FileStream.SeekCore(long offset, System.IO.SeekOrigin origin) Line 608\tC#\r\nSystem.Private.CoreLib.dll!System.IO.FileStream.Seek(long offset, System.IO.SeekOrigin origin) Line 542\tC#\r\nSystem.Reflection.Metadata.dll!System.Reflection.PortableExecutable.PEHeaders.PEHeaders(System.IO.Stream peStream, int size, bool isLoadedImage)\tUnknown\r\nSystem.Reflection.Metadata.dll!System.Reflection.PortableExecutable.PEReader.InitializePEHeaders()\tUnknown\r\nSystem.Reflection.Metadata.dll!System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory()\tUnknown\r\nSystem.Reflection.Metadata.dll!System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(string peImagePath, System.Func<string, System.IO.Stream> pdbFileStreamProvider, out System.Reflection.Metadata.MetadataReaderProvider pdbReaderProvider, out string pdbPath)\tUnknown\r\nSystem.Diagnostics.StackTrace.dll!System.Diagnostics.StackTraceSymbols.TryOpenReaderFromAssemblyFile(string assemblyPath, System.IntPtr loadedPeAddress, int loadedPeSize) Line 198\tC#\r\nSystem.Diagnostics.StackTrace.dll!System.Diagnostics.StackTraceSymbols.TryGetReader(string assemblyPath, System.IntPtr loadedPeAddress, int loadedPeSize, System.IntPtr inMemoryPdbAddress, int inMemoryPdbSize) Line 129\tC#\r\nSystem.Diagnostics.StackTrace.dll!System.Diagnostics.StackTraceSymbols.GetSourceLineInfo(string assemblyPath, System.IntPtr loadedPeAddress, int loadedPeSize, System.IntPtr inMemoryPdbAddress, int inMemoryPdbSize, int methodToken, int ilOffset, out string sourceFile, out int sourceLine, out int sourceColumn) Line 59\tC#\r\nSystem.Private.CoreLib.dll!System.Diagnostics.StackFrameHelper.InitializeSourceInfo(int iSkip, bool fNeedFileInfo, System.Exception exception) Line 140\tC#\r\nSystem.Private.CoreLib.dll!System.Diagnostics.StackTrace.CaptureStackTrace(int iSkip, bool fNeedFileInfo, System.Threading.Thread targetThread, System.Exception e) Line 426\tC#\r\nSystem.Private.CoreLib.dll!System.Diagnostics.StackTrace.StackTrace(int skipFrames, bool fNeedFileInfo) Line 307\tC#\r\n```\r\n"},{"Id":"7609430720","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:26:07","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17842","RelatedDescription":"Merged pull request \"Add better portable PDB caching to System.Diagnostics.StackTrace\" (#17842) at dotnet/coreclr","RelatedBody":"Issue #17701\r\n\r\nAdd portable PDB caching to StackTrace.\r\n\r\nThis is the mscorlib/System.Private.Corelib side of the change."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7609500627","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:54:04","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9178","RelatedDescription":"Opened pull request \"WIP: Add a property to disable bundling ASP.NET Core tools, templates, and runtimes\" (#9178) at dotnet/cli","RelatedBody":"Part of https://github.com/dotnet/source-build/issues/456\r\n\r\nChanges:\r\n - add a property `IncludeAspNetCoreRuntime` which can be set to `false` to disable bundling ASP.NET Core tools, templates, and runtimes\r\n - set properties that align with https://github.com/aspnet/Universe/pull/1130 to prevent shared runtime trimming against aspnet in a source-built CLI\r\n - includes some changes currently applied in source-build via https://github.com/dotnet/source-build/tree/dev/release/2.1/patches/cli (cc @dseefeld)\r\n\r\nMarking as WIP because I need to clarify if aspnet templates should be excluded or not."},{"Id":"7609490495","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:49:47","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9177","RelatedDescription":"Opened pull request \"Remove mac mark all 755\" (#9177) at dotnet/cli","RelatedBody":"This temporary fix is added in https://github.com/dotnet/cli/pull/517\r\n\r\ntoday, mark `dotnet` as executable is covered by core-setup https://github.com/dotnet/core-setup/blob/master/src/pkg/packaging/osx/hostfxr/scripts/postinstall#L11\r\n"},{"Id":"7609078399","Type":"IssuesEvent","CreatedAt":"2018-04-30T22:27:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9132","RelatedDescription":"Closed issue \"dotnet tool install --source-feed isn't relative\" (#9132) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n```console\r\nC:\\git\\PowerShell\\src\\powershell-win-core>dotnet tool install -g pwsh --version 6.1.0-preview.1 --source-feed .\\nupkg\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008530\\NuGet.targets(114,5): error : The local source 'C:\\Users\\rlander\\AppData\\Local\\Temp\\xrucfdsj.yyf\\nupkg' doesn't exist. [C:\\Users\\rlander\\AppData\\Local\\Temp\\xrucfdsj.yyf\\restore.csproj]\r\nThe tool package could not be restored.\r\nTool 'pwsh' failed to install. You may need to specify the version using\r\n\r\n   dotnet tool install -g pwsh --version <version>\r\n\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\r\nI was expecting the NuGet source to realize I wanted it to use: `C:\\git\\PowerShell\\src\\powershell-win-core\\nupkg`\r\n\r\nIt uses: `'C:\\Users\\rlander\\AppData\\Local\\Temp\\xrucfdsj.yyf\\nupkg`\r\n\r\nFully-qualified path works. I expect to be able to use relative paths.\r\n\r\n## Environment data\r\ndotnet --version\r\n2.1.300-preview2-008530\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7609077746","Type":"IssuesEvent","CreatedAt":"2018-04-30T22:26:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9162","RelatedDescription":"Closed issue \"dotnet-sdk for linux-arm is missing ASP.NET Core\" (#9162) at dotnet/cli","RelatedBody":"In RC1, we introduced a linux-arm build of ASP.NET Core, but I failed to update the CLI to bundle this. The latest RC1 builds of the CLI are missing the aspnetcore shared framework altogether. If possible, we should get this runtime bundled for RTM.\r\n\r\n\r\n\r\n\r\n"},{"Id":"7609075931","Type":"PullRequestEvent","CreatedAt":"2018-04-30T22:26:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9123","RelatedDescription":"Merged pull request \"Mark both CLI NuPkgs as \"NonShipping=true\"\" (#9123) at dotnet/cli","RelatedBody":"Both 'Microsoft.DotNet.Cli.Utils.[version].nupkg' and 'Microsoft.DotNet.MSBuildSdkResolver.[version].nupkg' should not be published to NuGet.org; mark both NuPkgs as \"NonShipping=true\" Therefore, these NuPkgs will not be signed.\r\n"},{"Id":"7608931882","Type":"IssuesEvent","CreatedAt":"2018-04-30T21:47:52","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9158","RelatedDescription":"Closed issue \"Build-server shutdown doesn't get credentials to delete Razor PID file\" (#9158) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall latest RC CLI build\r\nIn powershell or cmd prompt, run the following:\r\ndotnet new razor\r\ndotnet build\r\ndotnet build-server shutdown\r\n\r\n## Expected  behavior\r\nThe Razor build server is shutdown and the PID file is deleted\r\n\r\n## Actual behavior\r\nException is thrown:\r\n\r\nPS C:\\Users\\v-masche\\servertests\\test3> dotnet build-server shutdown\r\nShutting down MSBuild server...\r\nShutting down VB/C# compiler server...\r\nSystem.IO.IOException: The process cannot access the file 'C:\\Users\\v-masche\\.dotnet\\pids\\build\\rzc-8784' because it is being used by another process.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at System.IO.File.OpenRead(String path)\r\n   at Microsoft.Extensions.EnvironmentAbstractions.FileWrapper.OpenRead(String path)\r\n   at Microsoft.DotNet.BuildServer.RazorPidFile.Read(FilePath path, IFileSystem fileSystem)\r\n   at Microsoft.DotNet.BuildServer.BuildServerProvider.EnumerateBuildServers(ServerEnumerationFlags flags)+MoveNext()\r\n   at Microsoft.DotNet.Tools.BuildServer.Shutdown.BuildServerShutdownCommand.StartShutdown()\r\n   at Microsoft.DotNet.Tools.BuildServer.Shutdown.BuildServerShutdownCommand.Execute()\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.BuildServer.BuildServerCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nPS C:\\Users\\v-masche> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008669\r\n Commit:    4db4d9b568\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008669\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26425-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008669 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30676 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30676 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26425-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7608930568","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:47:32","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9160","RelatedDescription":"Merged pull request \"Fix Razor server shutdown on Windows.\" (#9160) at dotnet/cli","RelatedBody":"On Windows, the Razor server correctly creates the pid file with\r\n`FileAccess.Write` and `FileOptions.DeleteOnClose`.  This requires a share mode\r\nof `FileShare.Write | FileShare.Delete` to open.  However, the\r\n`dotnet build-server shutdown` command was opening the file with\r\n`FileShare.Read`.  As a result, an `IOException` was being thrown and was not\r\nhandled.\r\n\r\nThis change first opens the file with the appropriate share access and also\r\nproperly handles a failure to access or read the contents of the pid file.\r\n\r\nAdditionally, an integration test was added to test that Razor server shutdown\r\nworks as expected.\r\n\r\nFixes #9158.\r\n"},{"Id":"7608929031","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:47:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9163","RelatedDescription":"Merged pull request \"Include aspnetcore in the linux-arm build,\" (#9163) at dotnet/cli","RelatedBody":"Resolves #9162 \r\n\r\nInclude aspnetcore in linux-arm, but not linux-arm64 or windows ARM builds."},{"Id":"7608927918","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:46:51","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9137","RelatedDescription":"Merged pull request \"Fix --source-feed option for tool install and update commands.\" (#9137) at dotnet/cli","RelatedBody":"Commit 9cc2b7c regressed the `--source-feed`\r\noption so that it no longer accepted relative paths.  Because the option is now\r\nsaved to the temp project file, any relative paths specified by the\r\n`--source-feed` option were made relative to the temp project path and not from\r\nthe current working directory of where dotnet was run.\r\n\r\nThe fix is to use `Path.GetFullPath` of the `--source-feed` option, provided\r\nthe option specified was not an absolute URI.\r\n\r\nFixes #9132."},{"Id":"7608924749","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:46:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9150","RelatedDescription":"Merged pull request \"Use cp -u on linux-musl\" (#9150) at dotnet/cli","RelatedBody":"This actually applies to all busybox based OS. Fixes https://github.com/dotnet/cli/issues/8738.\r\nAlso updated readme: alpine-<ver>-targz to musl-targz. Discussion: https://github.com/dotnet/cli/commit/65d5730631ef3cae8435be66b37b6c03b49d5dbf#r28750312\r\n\r\n@weshaggard, @johnbeisner \r\n\r\nFollow-up to: https://github.com/dotnet/cli/pull/9104"},{"Id":"7608914723","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:43:37","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9175","RelatedDescription":"Merged pull request \"Update version to rtm\" (#9175) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7608452828","Type":"IssuesEvent","CreatedAt":"2018-04-30T20:01:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Closed issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601558195","Type":"IssuesEvent","CreatedAt":"2018-04-28T14:44:00","Actor":"MoamenMohamed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Opened issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601217646","Type":"IssuesEvent","CreatedAt":"2018-04-28T11:00:57","Actor":"thomasclaudiushuber","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Opened issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it is actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7601081418","Type":"IssuesEvent","CreatedAt":"2018-04-28T09:33:37","Actor":"mperdeck","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/663","RelatedDescription":"Closed issue \"When running ASP.NET Core web site targeting net47 in IIS, dotnet.exe does not appear in process list\" (#663) at dotnet/standard","RelatedBody":"I just converted a large legacy site to Net Core. Because of some old code, I have to target net47 instead of netcoreapp2.0 / netstandard2.0.\r\n\r\nProblem is that when I run the site in IIS, it starts up correctly, but then I cannot attach the debugger. The process list (Debug | Attach to process) does not show the dotnet.exe process at all.\r\n\r\nTo investigate this:\r\n* I created a new ASP.NET Core web application in Visual Studio 2017 targeting netcoreapp2.0, \r\n* published it (dotnet publish) and \r\n* pointed my IIS web site to the published directory. \r\n\r\nAfter hitting the site, I was able to attach to the dotnet.exe process ok.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe shows up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nI then retargeted it to net47 because that is what my site uses. \r\n* Because Microsoft.AspNetCore.All does not support net47, I replaced it with enough individual packages to make the site compile. \r\n* Published it (dotnet publish -f net47). \r\n* Pointed the IIS site to the new net47 published directory. \r\n\r\nI could load the site ok and navigate around. However, dotnet.exe no longer appeared in the process list.\r\n\r\n````\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  \r\n  <!-- dotnet.exe does NOT show up in process list in Visual Studio 2017 -->\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>net47</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Http.Abstractions\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.*\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.*\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\n\r\nIs there any way I can debug a site running in IIS that targets the Net Framework?\r\n\r\n"},{"Id":"7600173317","Type":"PullRequestEvent","CreatedAt":"2018-04-27T23:38:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/715","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02725-03 (master)\" (#715) at dotnet/standard","RelatedBody":""},{"Id":"7600172487","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:38:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/718","RelatedDescription":"Closed issue \"Add IItemProperties, IEditableCollectionView and associated types\" (#718) at dotnet/standard","RelatedBody":"The `IItemProperties` and `IEditableCollectionView` in System.ComponentModel namespace are really great for describing data on ICollectionViewSource to handle dynamic datasources, where you don't have a pre-defined class to encapsulate a datamodel. For instance when dealing with generic data from any database table. It also avoids the need for reflection, as the IItemProperties provides the PropertyInfo you otherwise would retrieve through reflection.\r\n\r\nThese interfaces are useful for generating UI dynamically based on dynamic data models, for use with for instance DataGrids, form entries etc. By having your data collections implement these interfaces, specific platforms can use these interfaces to generate a UI for the data.\r\n\r\n\r\nDoc references:\r\n- [IItemProperties](https://docs.microsoft.com/dotnet/api/system.componentmodel.iitemproperties?view=netframework-4.7.1)\r\n- [IEditableCollectionView](https://docs.microsoft.com/dotnet/api/system.componentmodel.ieditablecollectionview?view=netframework-4.7.1)\r\n- [ItemPropertyInfo](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.itempropertyinfo?view=netframework-4.7.1)"},{"Id":"7600144104","Type":"IssuesEvent","CreatedAt":"2018-04-27T23:25:33","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/708","RelatedDescription":"Closed issue \"Wrong reference path in NETStandard.Library.targets\" (#708) at dotnet/standard","RelatedBody":"@cannehag commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1440)\n\n# After installing NetStandard.Library 2.0.2, a lot of warning occur.\r\nNetStandard.Library.targets 2.0.2 have \r\n<Reference Include=\"$(MSBuildThisFileDirectory)\\ref\\Microsoft.Win32.Primitives.dll...\r\nAccording to documentation MSBuildThisFileDirectory will include a final slash, thus giving a path with double slash and the error message \r\nThe referenced component 'C:\\Users\\xxx\\.nuget\\packages\\netstandard.library\\2.0.2\\build\\netstandard2.0\\\\ref\\Microsoft.Win32.Primitives.dll could not be found'\r\n\r\nVersion 2.0.1 does not have this issue since the targets file is including *.dll from another path\r\n<ReferenceCopyLocalPaths Condition=\"'$(_NetStandardLibraryLibPath)' != ''\" Include=\"$(_NetStandardLibraryLibPath)*.dll\">\r\n\n\n---\n\n@elementalpete commented on [Mon Apr 16 2018](https://github.com/dotnet/core/issues/1440#issuecomment-381640157)\n\nI experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.\n\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7610045605","Type":"PullRequestEvent","CreatedAt":"2018-05-01T05:15:57","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29423","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26501-00, beta-26501-00, respectively (master)\" (#29423) at dotnet/corefx","RelatedBody":""},{"Id":"7609890706","Type":"PullRequestEvent","CreatedAt":"2018-05-01T03:55:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29299","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup to rc1-02726-01, rc1-26423-02, rc1-26423-06, rc1-26423-06, respectively (release/2.1)\" (#29299) at dotnet/corefx","RelatedBody":""},{"Id":"7609870991","Type":"PullRequestEvent","CreatedAt":"2018-05-01T03:44:37","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29422","RelatedDescription":"Opened pull request \"[release/2.1] Add more Span-based parsing tests for Int32 and friends (#29363)\" (#29422) at dotnet/corefx","RelatedBody":"Test only port of https://github.com/dotnet/corefx/pull/29363 to release/2.1"},{"Id":"7609863804","Type":"PullRequestEvent","CreatedAt":"2018-05-01T03:40:53","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29416","RelatedDescription":"Merged pull request \"Update DotnetCLIVersion.txt\" (#29416) at dotnet/corefx","RelatedBody":""},{"Id":"7609862969","Type":"PullRequestEvent","CreatedAt":"2018-05-01T03:40:27","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29420","RelatedDescription":"Merged pull request \"Increase default value of TimeoutTime to 20m in run-test.sh\" (#29420) at dotnet/corefx","RelatedBody":"Found more corefx tests that need even more time to pass on Ubuntu/arm (https://github.com/dotnet/coreclr/issues/17754#issuecomment-385574676)"},{"Id":"7609861966","Type":"PullRequestEvent","CreatedAt":"2018-05-01T03:39:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29419","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26501-01, preview3-26501-01, preview1-26430-04, respectively (master)\" (#29419) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7610037165","Type":"IssuesEvent","CreatedAt":"2018-05-01T05:11:42","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26527","RelatedDescription":"Opened issue \"\"Use auto property\" across a document/project only fixes a few instances per class\" (#26527) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n1. \r\n\r\n``` C#\r\ninternal struct StringFormat\r\n{\r\n    private readonly object _argument1; <! -- Use auto property for \"Document\"\r\n    private readonly object _argument2;\r\n    private readonly object _argument3;\r\n    private readonly object[] _arguments;\r\n\r\n    public object Argument1\r\n    {\r\n        get { return _argument1; }\r\n    }\r\n\r\n    public object Argument2\r\n    {\r\n        get { return _argument2; }\r\n    }\r\n\r\n    public object Argument3\r\n    {\r\n        get { return _argument3; }\r\n    }\r\n\r\n    public object[] Arguments\r\n    {\r\n        get { return _arguments; }\r\n    }\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\n``` C#\r\n\r\ninternal struct StringFormat\r\n{\r\n    private readonly object _argument3;\r\n\r\n    public object Argument1 { get; }\r\n\r\n    public object Argument2 { get; }\r\n\r\n    public object Argument3\r\n    {\r\n        get { return _argument3; }\r\n    }\r\n\r\n    public object[] Arguments { get; }\r\n}\r\n\r\n```\r\n\r\n**Actual Behavior**:\r\n``` C#\r\n\r\ninternal struct StringFormat\r\n{\r\n    public object Argument1 { get; }\r\n\r\n    public object Argument2 { get; }\r\n\r\n    public object Argument3 { get; }\r\n\r\n    public object[] Arguments { get; }\r\n}\r\n\r\n```\r\n\r\nIf I remove all but Argument3 & Arguments, it won't do \"Arguments\"."},{"Id":"7609972679","Type":"IssuesEvent","CreatedAt":"2018-05-01T04:37:07","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26526","RelatedDescription":"Opened issue \"\"Use local function\" introduces CS1503 when passed to an overload that takes both a delegate & value\" (#26526) at dotnet/roslyn","RelatedBody":"\r\n**Steps to Reproduce**:\r\n\r\nCouldn't break it down any further without Moq package installed:\r\n\r\n``` C#\r\nusing System;\r\nusing Moq;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Func<IProjectTree, string> getPath = tree => tree.FilePath; <!-- Use local function\r\n\r\n        var mock = new Mock<IProjectTreeProvider>();\r\n        mock.Setup(p => p.GetPath(It.IsAny<IProjectTree>()))\r\n            .Returns(getPath);\r\n\r\n    }\r\n}\r\n\r\ninternal interface IProjectTreeProvider\r\n{\r\n    string GetPath(IProjectTree projectTree);\r\n}\r\n\r\ninternal interface IProjectTree\r\n{\r\n    string FilePath { get; set; }\r\n}\r\n```\r\n**Expected Behavior**:\r\n\r\n``` C#\r\n    static void Main(string[] args)\r\n    {\r\n        string getPath(IProjectTree tree) => tree.FilePath;\r\n\r\n        var mock = new Mock<IProjectTreeProvider>();\r\n        mock.Setup(p => p.GetPath(It.IsAny<IProjectTree>()))\r\n            .Returns((Func<IProjectTree, string>)getPath);\r\n\r\n    }\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n``` C#\r\n    static void Main(string[] args)\r\n    {\r\n        string getPath(IProjectTree tree) => tree.FilePath;\r\n\r\n        var mock = new Mock<IProjectTreeProvider>();\r\n        mock.Setup(p => p.GetPath(It.IsAny<IProjectTree>()))\r\n            .Returns(getPath);\r\n\r\n    }\r\n\r\n```\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS1503\tArgument 1: cannot convert from 'method group' to 'string'\tConsoleApp299\tC:\\Users\\davkean\\Source\\Repos\\ConsoleApp299\\ConsoleApp299\\Program.cs\t12\tActive\r\n\r\n```"},{"Id":"7609931313","Type":"IssuesEvent","CreatedAt":"2018-05-01T04:15:58","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26525","RelatedDescription":"Opened issue \"Feature request: add breakpoints from Find All References Window\" (#26525) at dotnet/roslyn","RelatedBody":"This is a scenario that I do a lot, and if it is common among other developers, it would be great to have it. I often find myself trying to:\r\n* find why a certain error is reported\r\n* which code path is using some type\r\n* which code path is assigning a variable, etc\r\n\r\nI currently do it by finding all references, manually click each reference I want, go to the line it is used at, then placing a break point, then I run the program or the test that might exercise these code paths to find which break point is being hit. It would be great if I've in the context menu of Find all references the option to place a break point at these lines. It would save a lot of manual time:\r\n\r\n![image](https://user-images.githubusercontent.com/15987992/39460852-99bbf4f0-4cbb-11e8-8a80-c5f5173d3edb.png)\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7609963780","Type":"PullRequestEvent","CreatedAt":"2018-05-01T04:32:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5762","RelatedDescription":"Opened pull request \"Update DotnetCLIVersion.txt\" (#5762) at dotnet/corert","RelatedBody":""},{"Id":"7609460574","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:37:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5760","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5760) at dotnet/corert","RelatedBody":""},{"Id":"7609375625","Type":"PullRequestEvent","CreatedAt":"2018-05-01T00:05:15","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5761","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5761) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7609356887","Type":"PullRequestEvent","CreatedAt":"2018-04-30T23:58:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5761","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5761) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7609149390","Type":"PullRequestEvent","CreatedAt":"2018-04-30T22:47:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5760","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5760) at dotnet/corert","RelatedBody":""},{"Id":"7609148321","Type":"PullRequestEvent","CreatedAt":"2018-04-30T22:47:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5759","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5759) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7608852707","Type":"PullRequestEvent","CreatedAt":"2018-04-30T21:28:31","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5759","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5759) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7606315616","Type":"IssuesEvent","CreatedAt":"2018-04-30T12:56:15","Actor":"harvinders","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5758","RelatedDescription":"Opened issue \"[Question] Discover types exported from referenced assembly from UWP app (.Net Native Release Build)\" (#5758) at dotnet/corert","RelatedBody":"I have a UWP project with Unity IOC container. I would like to register all the ViewModels defined in the referenced assemblies. I am using VS 2017 15.6.7 with 16299 SDK.\r\n\r\nAs long as I know the assembly name I am able to load the types from that assembly like\r\n\r\n`var types = Assembly.Load(new AssemblyName(\"Simple\")).ExportedTypes.ToList();`\r\n\r\nHowever, if I try to dynamically load the assemblies, and then find the types, it does not work\r\n\r\n```\r\nvar files = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFilesAsync().AsTask().ConfigureAwait(false);\r\nforeach (var file in files.Where(file => file.FileType == \".dll\" ))\r\n{\r\n    try\r\n    {\r\n        types.AddRange(Assembly.Load(new AssemblyName(file.DisplayName)).ExportedTypes);\r\n    }\r\n    catch (Exception ex) {}\r\n}\r\n``` \r\n\r\nThe code above returns two files one is the `App.dll` and second is `clrcompression.dll`. It does not return the referenced assembly. Some other people have also reported this too [UWP .NET Native - Iterate Through Types and Assemblies\r\n](https://stackoverflow.com/q/46460948/1139856).  It maybe that `Unity` guys have an open issue because of this too (unitycontainer/registration-by-convention#2).\r\n \r\nIs it something to do with Default.rd.xml? However, it is not clear what to do, maybe some examples would help.\r\n\r\nSo, my question is, is it possible to dynamically discover the types to do registeration by convention. If not what are the alternatives, because, otherwise it seems that we can't submit our apps to store."},{"Id":"7604185118","Type":"IssuesEvent","CreatedAt":"2018-04-29T22:13:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5757","RelatedDescription":"Opened issue \"Implement StringToCoTaskMemUTF8 and related method\" (#5757) at dotnet/corert","RelatedBody":"Reported by @RonnChyran on gitter."},{"Id":"7604182027","Type":"PullRequestEvent","CreatedAt":"2018-04-29T22:11:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5756","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5756) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7608619663","Type":"PullRequestEvent","CreatedAt":"2018-04-30T20:37:05","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2200","RelatedDescription":"Merged pull request \"Update version to RTM\" (#2200) at dotnet/sdk","RelatedBody":""},{"Id":"7608512039","Type":"PullRequestEvent","CreatedAt":"2018-04-30T20:14:11","Actor":"noahfalk","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2201","RelatedDescription":"Opened pull request \"[release/2.1.3xx] Add a tiered compilation build variable\" (#2201) at dotnet/sdk","RelatedBody":""},{"Id":"7608165160","Type":"PullRequestEvent","CreatedAt":"2018-04-30T18:58:27","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2199","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to master\" (#2199) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":274,"FavoriteCount":210,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":152,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-05-01T05:30:22.5775036Z","RunDurationInMilliseconds":8153}