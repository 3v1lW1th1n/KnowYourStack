{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET Hardware Intrinsics API to accelerate machine learning scenarios","PublishedOn":"2018-10-10T16:00:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This week&#8217;s blog post is by Brian Lui, one of our summer interns on the .NET team, who&#8217;s been hard at work. Over to Brian: Hello everyone! This summer I interned in the .NET team, working...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/10/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 1.0 and 1.1","PublishedOn":"2018-10-09T23:19:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core October 2018 Update for 1.0 and 1.1. This update includes .NET Core 1.0.13, 1.1.10 and .NET Core SDK 1.1.11. Security CVE-2018-8292: .NET Core Information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/","RawContent":null},{"Title":".NET Framework October 2018 Security and Quality Rollup","PublishedOn":"2018-10-09T23:09:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the October 2018 Security and Quality Rollup. Security No new security fixes.  See .NET Framework September 2018 Security and Quality Rollup for the latest security update. Quality...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-framework-october-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.6 (Machine Learning .NET)","PublishedOn":"2018-10-09T00:35:09+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today we’re announcing our latest monthly release: ML.NET 0.6! ML.NET is a cross-platform, open source machine learning framework for .NET developers. We want to enable every .NET developer to train...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/08/announcing-ml-net-0-6-machine-learning-net/","RawContent":null},{"Title":"Update on .NET Core 3.0 and .NET Framework 4.8","PublishedOn":"2018-10-04T16:29:57+00:00","CommentsCount":104,"FacebookCount":0,"Summary":"In May, we announced .NET Core 3.0, the next major version of .NET Core that adds support for building desktop applications using WinForms, WPF, and Entity Framework 6. We also announced some exciting...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/04/update-on-net-core-3-0-and-net-framework-4-8/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 2.1.5 & SDK 2.1.403","PublishedOn":"2018-10-02T15:31:06+00:00","CommentsCount":10,"FacebookCount":0,"Summary":".NET Core October 2018 Update Today, we are releasing the .NET Core October 2018 Update. This update includes .NET Core 2.1.5 and .NET Core SDK 2.1.403 and contains important reliability fixes....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/02/net-core-october-2018-update/","RawContent":null},{"Title":".NET Framework September 2018 Preview of Quality Rollup","PublishedOn":"2018-09-25T19:36:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Late last week we released the September 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Updated code to prevent...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/25/net-framework-september-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing Cumulative Updates for .NET Framework for Windows 10 October 2018 Update","PublishedOn":"2018-09-19T22:30:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We deliver .NET Framework updates nearly every month, through Windows Update and other distribution channels. We are making changes to the way that we deliver those updates. We’ll soon start...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/19/announcing-cumulative-updates-for-net-framework-for-windows-10-october-2018-update/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3646","PublishedOn":"2018-09-18T02:38:06+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/17/announcing-net-framework-4-8-early-access-build-3646/","RawContent":null},{"Title":"Announcing .NET Core 2.2 Preview 2","PublishedOn":"2018-09-12T19:26:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 2. We have great improvements that we want to share and that we would love to get your feedback on, either in the comments or at dotnet/core #1938....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/12/announcing-net-core-2-2-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8159331036","Type":"PullRequestEvent","CreatedAt":"2018-08-23T20:13:18","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Opened pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8147233541","Type":"PullRequestEvent","CreatedAt":"2018-08-21T22:39:06","Actor":"anthonychu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Opened pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8131503388","Type":"PullRequestEvent","CreatedAt":"2018-08-17T23:19:54","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Merged pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8394268768","Type":"IssuesEvent","CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Opened issue \"October 2018 .NET Updates\" (#89) at dotnet/announcements","RelatedBody":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"},{"Id":"8394092294","Type":"IssuesEvent","CreatedAt":"2018-10-09T22:51:19","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/> **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n"},{"Id":"8377166566","Type":"IssuesEvent","CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Opened issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87) at dotnet/announcements","RelatedBody":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```"},{"Id":"8362210504","Type":"IssuesEvent","CreatedAt":"2018-10-03T16:11:10","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Opened issue \".NET Core 2.0 has reached end of life\" (#86) at dotnet/announcements","RelatedBody":"On October 1, 2018 .NET Core 2.0 reached end of life. This means the version channel is no longer supported and updates will no longer be provided. We recommend moving to a supported release. See our [support policy](https://www.microsoft.com/net/platform/support-policy) for more details.\r\n\r\nWe understand there will be needs to access end of life versions so downloads and Docker images will remain available. \r\n\r\n* 2.0 downloads will still be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). You will see notifications on the site indicating the end of life status. \r\n* 2.0 links have been removed from the [microsoft/donet Docker page](https://hub.docker.com/r/microsoft/dotnet/) though images will remain on the system.\r\n\r\n"},{"Id":"8279098039","Type":"IssuesEvent","CreatedAt":"2018-09-18T01:10:24","Actor":"spshant","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Opened issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85) at dotnet/announcements","RelatedBody":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n"},{"Id":"8247970519","Type":"IssuesEvent","CreatedAt":"2018-09-11T17:00:56","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](***TDB***).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n"},{"Id":"8220412616","Type":"IssuesEvent","CreatedAt":"2018-09-05T20:56:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Opened issue \".NET Core Runtime ARM64 Status\" (#82) at dotnet/announcements","RelatedBody":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\n## Current Status\r\n\r\nARM64 is currently broken in .NET Core 3.0 builds. See:\r\n\r\n* [dotnet/coreclr #19805](https://github.com/dotnet/coreclr/issues/19805)\r\n* [dotnet/coreclr #19822](https://github.com/dotnet/coreclr/issues/19822)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8409008214","Type":"IssuesEvent","CreatedAt":"2018-10-12T05:11:03","Actor":"marler8997","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20261","RelatedDescription":"Closed issue \"Infinite Loop in DBG_printf_gcc and DBG_printf_c99\" (#20261) at dotnet/coreclr","RelatedBody":"In `DBG_printf_gcc` and `DBG_printf_c99` there is an infinite recursive loop that occurs if the thread calling it is not a PAL thread.  They both call `InternalGetCurrentThread` which in turn will create the thread data structures if it's not already a PAL thread, which in turn can print more debug, which will then call `InternalGetCurrentThread` again which in turn will print more debug and so on."},{"Id":"8408866491","Type":"PullRequestEvent","CreatedAt":"2018-10-12T04:13:07","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20306","RelatedDescription":"Merged pull request \"Implement LeadingSignCount and LeadingZeroCount ARM64 Base Intrinsics\" (#20306) at dotnet/coreclr","RelatedBody":"This enables `LeadingSignCount` and `LeadingZeroCount` ARM64 Base (scalar) Intrinsics.\r\n\r\n**JitDisasm for LeadingSignCount:**\r\n```\r\n; Assembly listing for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingSignCount(int):int\r\n; Emitting BLENDED_CODE for\r\n; optimized code\r\n; fp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )     int  ->   x0\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [sp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M27166_IG01:\r\n        A9BF7BFD          stp     fp, lr, [sp,#-16]!\r\n        910003FD          mov     fp, sp\r\n\r\nG_M27166_IG02:\r\n        5AC01400          cls     w0, w0\r\n\r\nG_M27166_IG03:\r\n        A8C17BFD          ldp     fp, lr, [sp],#16\r\n        D65F03C0          ret     lr\r\n\r\n; Total bytes of code 20, prolog size 8 for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingSignCount(int):int\r\n; ============================================================\r\n```\r\n```\r\n; Assembly listing for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingSignCount(long):int\r\n; Emitting BLENDED_CODE for\r\n; optimized code\r\n; fp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )    long  ->   x0\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [sp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M27166_IG01:\r\n        A9BF7BFD          stp     fp, lr, [sp,#-16]!\r\n        910003FD          mov     fp, sp\r\n\r\nG_M27166_IG02:\r\n        DAC01400          cls     x0, x0\r\n\r\nG_M27166_IG03:\r\n        A8C17BFD          ldp     fp, lr, [sp],#16\r\n        D65F03C0          ret     lr\r\n\r\n; Total bytes of code 20, prolog size 8 for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingSignCount(long):int\r\n; ============================================================\r\n```\r\n\r\n**JitDisasm for LeadingZeroCount:**\r\n```\r\n; Assembly listing for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(int):int\r\n; Emitting BLENDED_CODE for\r\n; optimized code\r\n; fp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )     int  ->   x0\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [sp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M35375_IG01:\r\n        A9BF7BFD          stp     fp, lr, [sp,#-16]!\r\n        910003FD          mov     fp, sp\r\n\r\nG_M35375_IG02:\r\n        5AC01000          clz     w0, w0\r\n\r\nG_M35375_IG03:\r\n        A8C17BFD          ldp     fp, lr, [sp],#16\r\n        D65F03C0          ret     lr\r\n\r\n; Total bytes of code 20, prolog size 8 for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(int):int\r\n; ============================================================\r\n```\r\n```\r\n; Assembly listing for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(int):int\r\n; Emitting BLENDED_CODE for\r\n; optimized code\r\n; fp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )     int  ->   x0\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [sp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M35375_IG01:\r\n        A9BF7BFD          stp     fp, lr, [sp,#-16]!\r\n        910003FD          mov     fp, sp\r\n\r\nG_M35375_IG02:\r\n        5AC01000          clz     w0, w0\r\n\r\nG_M35375_IG03:\r\n        A8C17BFD          ldp     fp, lr, [sp],#16\r\n        D65F03C0          ret     lr\r\n\r\n; Total bytes of code 20, prolog size 8 for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(int):int\r\n; ============================================================\r\n```\r\n```\r\n; Assembly listing for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(long):int\r\n; Emitting BLENDED_CODE for\r\n; optimized code\r\n; fp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )    long  ->   x0\r\n;# V01 OutArgs      [V01    ] (  1,  1   )  lclBlk ( 0) [sp+0x00]\r\n;\r\n; Lcl frame size = 0\r\n\r\nG_M35375_IG01:\r\n        A9BF7BFD          stp     fp, lr, [sp,#-16]!\r\n        910003FD          mov     fp, sp\r\n\r\nG_M35375_IG02:\r\n        DAC01000          clz     x0, x0\r\n\r\nG_M35375_IG03:\r\n        A8C17BFD          ldp     fp, lr, [sp],#16\r\n        D65F03C0          ret     lr\r\n\r\n; Total bytes of code 20, prolog size 8 for method System.Runtime.Intrinsics.Arm.Arm64.Base:LeadingZeroCount(long):int\r\n; ============================================================\r\n```"},{"Id":"8408756509","Type":"IssuesEvent","CreatedAt":"2018-10-12T03:30:55","Actor":"CodingDinosaur","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20388","RelatedDescription":"Opened issue \"Cultures aliased by ICU cannot be used for resource localization on non-Windows environments\" (#20388) at dotnet/coreclr","RelatedBody":"When building or running under .NET Core on a Unix-based environment, certain cultures cannot be utilized for resource localization, such as getting localized strings. This impacts both the build process (e.g., identifying and processing resource files) and the lookup of resources at runtime. These cultures can be used as expected when building or running under Windows.\r\n\r\nThe affected cultures are those which are aliased by ICU -- that is, to save on DB space for certain cases, ICU defines some locales as an \"alias\" of another. There are 42 locale aliases in ICU 57, of those two of the most common are zh-TW and zh-CN. For a full list of affected locales, see:  [ICU Aliased Locale List - CultureIssueDemonstration Readme](https://github.com/CodingDinosaur/CultureIssueDemonstration#icu-locale-alias-list).\r\n\r\nThis platform-inconsistent behavior when trying to localize certain resources, necessitates using special code and workarounds both at build and deploy time when developing cross-platform applications.\r\n\r\n**See a demo of this issue in [CodingDinosaur/CultureIssueDemonstration](https://github.com/CodingDinosaur/CultureIssueDemonstration)**\r\n\r\n# Symptoms\r\n- Resource files for the affected locales will not be generated into resource assemblies if building in a Unix-based environment.\r\n  - For example: *MyStrings.zh-TW.resx* will not have a resource assembly created if the build occurs on a Unix-based environment, but will if built under Windows\r\n- Resources for the affected locales will not be utilized even if the resource files are present, falling back to the default resources.\r\n  - For example: Consider *MyStrings.resx* and *MyStrings.zh-TW.resx*. If a custom build step is used to generate a copy the resource assembly for *MyStrings.zh-TW.resx* to workaround the first issue, requesting a resource utilizing culture zh-TW will still return the resource from the default *MyStrings.resx* resources.\r\n- Affected cultures are missing when running under Unix-based environments and calling *CultureInfo.GetCultures*\r\n- Some culture data for affected cultures is platform inconsistent, notably the parent locale\r\n\r\n# Expected behavior\r\n- Primarily, that whatever the \"correct\" behaviors for these locales are (as it relates to resources and CultureInfo) they be consistent between Windows and Unix-like environments.\r\n- Secondarily, that aliased locales would \"just work\" in .NET Core for resource localization - e.g., that we could have resources defined as *zh-TW*, just as we can on Windows today, and properly retrieve the expected resources.\r\n\r\n# Brief Analysis\r\nMost of the above symptoms boil down to *uloc_getAvailable* in ICU's C API.\r\n\r\nFor example, the zh-TW resource files do not get copied during build, because during the task *SplitResourcesByCulture*, the culture is validated against a cache based ultimately on *CultureInfo.GetCultures*, which in turn, on Unix, ultimately relies on ICU.  A diagnostic MSBuild log shows why the file is missing:\r\n\r\n```\r\nRemoved Item(s): \r\n  _MixedResourceWithNoCulture=\r\n    Resources/MyNetCoreProject.MyResources.zh-TW.resx\r\n        OriginalItemSpec=Resources/MyNetCoreProject.MyResources.zh-TW.resx\r\n        TargetPath=Resources/MyNetCoreProject.MyResources.zh-TW.resx\r\n        WithCulture=false\r\n```\r\n\r\nFrom which we can follow back to the offending path:\r\n\r\n[Microsoft/msbuild/src/Tasks/Microsoft.Common.CurrentVersion.targets - SplitResourceByCulture](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2891) ->\r\n[Microsoft.Build.Tasks.AssignCulture.Execute](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/AssignCulture.cs#L115) ->\r\n[Microsoft.Build.Tasks.Culture.GetItemCultureInfo](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Culture.cs#L29) ->\r\n[Microsoft.Build.Tasks.CultureInfoCache.IsValidCultureString](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/CultureInfoCache.cs#L45-L48) ->\r\n[Microsoft.Build.Shared.AssemblyUtilities.GetAllCultures](https://github.com/Microsoft/msbuild/blob/master/src/Shared/AssemblyUtilities.cs#L105-L119) ->\r\n[CultureInfo.GetCultures](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Globalization/CultureInfo.cs#L536-L545) ->\r\n[CultureData.GetCultures](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Globalization/CultureData.cs#L407-L440) ->\r\n[CultureData(Unix).EnumCultures](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Globalization/CultureData.Unix.cs#L359-L408) ->\r\n[System.Globalization.Native/locale.cpp:GlobalizationNative_GetLocales](https://github.com/dotnet/coreclr/blob/master/src/corefx/System.Globalization.Native/locale.cpp#L158-L199)\r\nhttps://github.com/dotnet/coreclr/blob/8ba838fb54d6c07271d026b2d77bedcb9e2a786a/src/corefx/System.Globalization.Native/locale.cpp#L162-L171\r\n\r\nICU does not return aliases when getting a list of locales -- whether with *uloc_getAvailable* or *Locale::getAvailableLocales* (and *uloc_countAvailable* does not include them in its count).\r\n\r\nThat ICU does not return the aliases in this manner **appears to be intentional**, both based on the numerous references to [a lack of alias mapping in the uloc documentation](http://www.icu-project.org/apiref/icu4c/uloc_8h.html), and the following bug:  \r\n\r\nhttps://unicode-org.atlassian.net/browse/ICU-4309\r\n> uloc_getAvailable returns sr_YU, even though it is an %%ALIAS locale. None of the other %%ALIAS locales are returned.\r\n\r\n> TracBot made changes - 01/Jul/18 1:59 PM<br/>Resolution\t\tFixed [ 10004 ]<br/>Status\tDone [ 10002 ]\tDone [ 10002 ]\r\n\r\n[ICU-4309](https://unicode-org.atlassian.net/browse/ICU-4309) was fixed via: https://github.com/unicode-org/icu/commit/ab68bb319601bc467784dcbdcc6d52131a2863d2\r\nWhich seems to further indicate that ICU not returning aliases when calling *uloc_getAvailable* is intentional.\r\n\r\n# In-Depth Analysis\r\nA full analysis can be seen in the test repo README: [CodingDinosaur/CultureIssueDemonstration](https://github.com/CodingDinosaur/CultureIssueDemonstration)\r\n\r\n# Test Repos\r\nI have two test repos that help demonstrate this issue:\r\n\r\n## CultureIssueDemonstration\r\n- https://github.com/CodingDinosaur/CultureIssueDemonstration\r\n- Demonstrates the symptoms described at both build-time and run-time\r\n- Running the provided test scripts will allow for running the test code under your current platform, or on Linux via Docker. Thus is is recommended to run under Windows with Docker installed to compare the results under both Windows and Linux.\r\n- Contains a README file that goes into more detail on the issue and the apparent cause\r\n\r\n## CultureIcuTest\r\n- https://github.com/CodingDinosaur/CultureIcuTest\r\n- Demonstrates the results of using the method utilized in mscorlib to get all locales along with similar methods in ICU directly"},{"Id":"8408563070","Type":"PullRequestEvent","CreatedAt":"2018-10-12T02:23:16","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20387","RelatedDescription":"Opened pull request \"Add public IThreadPoolWorkItem\" (#20387) at dotnet/coreclr","RelatedBody":"- Changes the internal IThreadPoolWorkItem to be public, removing the legacy ThreadAbortException from it (which was specific to Task, anyway).\r\n- Removes the IThreadPoolWorkItem implementation from Task, so that devs can't write code like `ThreadPool.UnsafeQueueUserWorkItem(task);` or `((IThreadPoolWorkItem)task).Execute();`, both of which could end up doing a variety of bad things that could show up in a variety of ways, some discoverable, some less so.\r\n- Adds an internal UnsafeQueueUserWorkItemInternal that takes object so that it can be passed either an IThreadPoolUserWorkItem or a Task,\r\n- Changes the ThreadPool's queues to be in terms of object instead of IThreadPoolWorkItem\r\n- Changes the dispatch loop to type check for IThreadPoolWorkItem or Task so that both remain supported.\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/32485\r\n\r\ncc: @kouvel, @benaadams "},{"Id":"8408465839","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:48:19","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20378","RelatedDescription":null,"RelatedBody":"**NO MERGE**"},{"Id":"8408465703","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:48:16","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20378","RelatedDescription":"Closed pull request \"[dev/unix_test_workflow] Test against \"Use build-test.sh script on Linux\"\" (#20378) at dotnet/coreclr","RelatedBody":"**NO MERGE**"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8408663257","Type":"PullRequestEvent","CreatedAt":"2018-10-12T02:58:17","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10164","RelatedDescription":"Opened pull request \"Change UI on tool and use reviewed strings\" (#10164) at dotnet/cli","RelatedBody":"- Change where manifest path is put and remove stack trace\r\n\r\n- Remove unused targetframework\r\n\r\n- Add Json parsing error\r\n\r\n- Add aka.ms link for missing command\r\n\r\n- Remove not used resources and use reviewed strings\r\n\r\n- Change success message order and color"},{"Id":"8407864470","Type":"IssuesEvent","CreatedAt":"2018-10-11T22:29:57","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10163","RelatedDescription":"Opened issue \"Remove MicrosoftNETCoreAppPackageVersion in toolset repo\" (#10163) at dotnet/cli","RelatedBody":"it is not used and misleading"},{"Id":"8407751000","Type":"IssuesEvent","CreatedAt":"2018-10-11T22:02:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10162","RelatedDescription":"Opened issue \"Doc for missing dotnet command\" (#10162) at dotnet/cli","RelatedBody":"The following is the experience when cannot find command. Due to the added complicity of local tools, we need a link for more detail. The second session is proposed the message. And the aka.ms need a doc with detailed information.\r\n\r\n```shell\r\ndotnet noexists\r\nNo executable found matching command \"dotnet-noexists\"\r\n```\r\n\r\n```\r\nNo executable found matching command \"dotnet-noexists\". See https://aka.ms/missing-command for more information.\r\n```"},{"Id":"8407500927","Type":"IssuesEvent","CreatedAt":"2018-10-11T21:08:50","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8561","RelatedDescription":"Closed issue \"Change --source to additional instead of exclusive\" (#8561) at dotnet/cli","RelatedBody":"So if Microsoft.NETCore.Platforms is not in the source folder. CLI can still find it in nugetfallbackfolder\r\n\r\nNeed to reconsider the opinion name"},{"Id":"8406654738","Type":"IssuesEvent","CreatedAt":"2018-10-11T18:33:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8819","RelatedDescription":"Closed issue \"dotnet restore does not populate targets in project.assets.json on RHEL7.2\" (#8819) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n./dotnet-install.sh -sharedruntime -runtimeid linux-x64 -installdir .dotnet -channel master -architecture x64\r\nsource ./dotnet-install.sh -installdir .dotnet -channel master -architecture x64\r\ndotnet new console\r\n\r\nThis happens on RHEL7.2\r\n\r\n## Expected  behavior\r\nCreates console hello world app, successfully restores, and is able to successfully build.\r\n\r\n## Actual behavior\r\n\r\nBuild returns:\r\n```\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(4,20): error CS0400: The type or namespace name 'System' could not be found in the global namespace (are you missing an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(10,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(11,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(12,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(13,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(14,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(15,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(16,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(4,71): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(4,99): error CS0246: The type or namespace name 'FrameworkDisplayName' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(4,122): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(10,55): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(11,61): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(12,59): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(13,68): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(14,55): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(15,53): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(16,55): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nProgram.cs(1,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(2,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\n/tmp/.NETCoreApp,Version=v2.1.AssemblyAttributes.cs(3,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(7,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nobj/Debug/netcoreapp2.1/hello.AssemblyInfo.cs(8,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [/home/dotnet-bot/hello/hello.csproj]\r\nProgram.cs(5,11): error CS0518: Predefined type 'System.Object' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nProgram.cs(7,26): error CS0518: Predefined type 'System.String' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\nProgram.cs(7,16): error CS0518: Predefined type 'System.Void' is not defined or imported [/home/dotnet-bot/hello/hello.csproj]\r\n```\r\n\r\nWhen inspected, project.assets.json has no content under 'targets':\r\n```\r\n{\r\n  \"version\": 3,\r\n  \"targets\": {\r\n    \".NETCoreApp,Version=v2.0\": {}\r\n  },\r\n  \"libraries\": {},\r\n  \"projectFileDependencyGroups\": {\r\n    \".NETCoreApp,Version=v2.0\": [\r\n      \"Microsoft.NETCore.App >= 2.0.0\"\r\n    ]\r\n  }\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008368\r\n Commit:    3f09a889d9\r\n\r\nRuntime Environment:\r\n OS Name:     rhel\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         rhel.7-x64\r\n Base Path:   /mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/sdk/2.1.300-preview2-008368/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26314-02\r\n  Commit:  8ac5f4fa22\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008368 [/mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30331 [/mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30331 [/mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26313-01 [/mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26314-02 [/mnt/resource/j/w/Private/dotnet_optimization/master/CLRx64LINmasPGO/output/CLRx64LINmas/PGO/cli/x64/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download"},{"Id":"8406402292","Type":"IssuesEvent","CreatedAt":"2018-10-11T17:50:34","Actor":"MattGal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10161","RelatedDescription":"Opened issue \"ToolsError build failures in 'prodcon/cli/release/2.2.1xx/' - '20181008.01'\" (#10161) at dotnet/cli","RelatedBody":"@dotnet-mc-bot commented on [Mon Oct 08 2018](https://github.com/dotnet/core-eng/issues/4333)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=2097028\r\n  - **Agent:** DDVSOLINUXAGE009\r\n  - **Error log:** dotnet_install: Error: Extraction failed...\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@MattGal commented on [Thu Oct 11 2018](https://github.com/dotnet/core-eng/issues/4333#issuecomment-429054154)\n\nThis is an interesting one, so I'll move it to CLI to see if they want to investigate it. \r\n\r\nBasically the script gets the download it was doing cancelled at around 13% complete, but then tries to untar the resulting download, with predictable results:\r\n\r\n```\r\n2018-10-08T10:45:06.1631996Z Using code from: /data/agent/_work/306/s\r\n2018-10-08T10:45:07.1421050Z + /opt/code/scripts/obtain/dotnet-install.sh --version 2.1.300 --install-dir /opt/code/.dotnet_stage0/x64 --architecture x64\r\n2018-10-08T10:45:07.1688717Z dotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300/dotnet-sdk-2.1.300-linux-musl-x64.tar.gz\r\n2018-10-08T10:45:07.2550436Z Connecting to dotnetcli.azureedge.net (72.21.81.200:443)\r\n2018-10-08T10:45:07.8691124Z \r\n2018-10-08T10:45:08.0778587Z dotnet.wjsTY1NCx      13% |****                           | 21631k  0:00:06 ETA\r\n2018-10-08T10:45:08.0942417Z dotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300/dotnet-sdk-2.1.300-linux-musl-x64.tar.gz\r\n2018-10-08T10:45:09.6490445Z tar: unexpected end of file\r\n2018-10-08T10:45:09.6492222Z tar: short read\r\n2018-10-08T10:45:09.9809933Z dotnet_install: Error: Extraction failed\r\n2018-10-08T10:45:10.6676847Z /bin/bash failed with return code: 1\r\n```\r\n\r\nIt seems an obvious candidate for error detection and possibly retry. \n\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8407386223","Type":"PullRequestEvent","CreatedAt":"2018-10-11T20:47:18","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/811","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Globalization.*\" (#811) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"8407310820","Type":"PullRequestEvent","CreatedAt":"2018-10-11T20:33:23","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/807","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Collections.*\" (#807) at dotnet/standard","RelatedBody":"Fixes #843.\r\n\r\n@dotnet/nsboard "},{"Id":"8407310807","Type":"IssuesEvent","CreatedAt":"2018-10-11T20:33:23","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/843","RelatedDescription":"Closed issue \"Add KeyedValueCollection.TryGetValue(TKey key, out TItem item) to .NET Standard VNext\" (#843) at dotnet/standard","RelatedBody":"Consider adding [`KeyedValueCollection.TryGetValue(TKey key, out TItem item)`](https://github.com/dotnet/corefx/blob/a9d16d97206aa8d2aead52194f40acdd3c85ca28/src/System.ObjectModel/src/System/Collections/ObjectModel/KeyedCollection.cs#L106) (in System.Collections.ObjectModel) to [.NET Standard VNext](https://github.com/dotnet/standard/milestone/3)."},{"Id":"8407194612","Type":"PullRequestEvent","CreatedAt":"2018-10-11T20:11:47","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/812","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Linq.*\" (#812) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"8406667514","Type":"PullRequestEvent","CreatedAt":"2018-10-11T18:36:00","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/813","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Numerics\" (#813) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"8406608685","Type":"PullRequestEvent","CreatedAt":"2018-10-11T18:25:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/831","RelatedDescription":"Merged pull request \"Make TypeInfo extensible\" (#831) at dotnet/standard","RelatedBody":"This fixes #830.\r\n\r\n@dotnet/nsboard "},{"Id":"8406608660","Type":"IssuesEvent","CreatedAt":"2018-10-11T18:25:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/830","RelatedDescription":"Closed issue \"System.Reflection: Make type extensible\" (#830) at dotnet/standard","RelatedBody":"We should consider marking all constructors as public so that people can derive from `System.Type`.\r\n\r\n@weshaggard, do you know which APIs are required? Is it just the .ctors?"},{"Id":"8406539547","Type":"PullRequestEvent","CreatedAt":"2018-10-11T18:14:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/802","RelatedDescription":"Merged pull request \"Add DbProviderFactories\" (#802) at dotnet/standard","RelatedBody":"This fixes #707 and fixes #356.\r\n\r\nThis adds the `DbProviderFactories` that allows creating factorings for DB access.\r\n\r\n@dotnet/nsboard "},{"Id":"8406539519","Type":"IssuesEvent","CreatedAt":"2018-10-11T18:14:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/356","RelatedDescription":"Closed issue \"Bring System.Data.Common.DbProviderFactories into .NET Standard\" (#356) at dotnet/standard","RelatedBody":"This is a draft of the proposed API. The exact version of .NET Standard we bring this in is going to depend on schedule. \r\n\r\nIt is based on the existing API in .NET and Mono. Currently the API is missing in .NET Core and we need to bring it there too (see https://github.com/dotnet/corefx/issues/4571). We should later consider what this means for other platforms like Xamarin and Unity. \r\n\r\nNote that on .NET Framework and Mono, `DbProviderFactories` is a mere read-only façade over configuration sections. \r\n\r\nA few guiding principles:\r\n\r\n1. We should have the existing API in .NET Framework and Mono as the baseline. That includes the `DataRow`/`DataTable`-based APIs for compatibility.\r\n2. In order to make this useful in places where `System.Configuration` is not used, we need to enable in memory and hybrid implementations (hybrid meaning that they should be able to merge the contents of configuration sections with provider factories configured using the new in-memory APIs).\r\n\r\nI used the name ~~`SetFactory` rather than something like `AddFactory` for the in-memory registration because is the opposite to `GetFactory` and I wanted the API to succeed always regardless of whether a provider was previously registered with the same invariant name.~~ `ConfigureFactory` in the in-memory registration API because it needs to register not only the mapping of the type to an invariant name but also other metada such as name and description. \r\n\r\n``` C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Data.Common;\r\n\r\nnamespace System.Data.Common\r\n{\r\n    public static class DbProviderFactories\r\n    {\r\n        // exists in netfx and Mono, include in netstandard 2.x\r\n        public static DbProviderFactory GetFactory(string providerInvariantName) \r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        // exists in netfx and Mono, include in netstandard 2.x\r\n        // not much value other than compat\r\n        public static DbProviderFactory GetFactory(DataRow providerRow) \r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        // exists in netfx and Mono, include in netstandard 2.x\r\n        public static DbProviderFactory GetFactory(DbConnection connection)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        // exists in netfx and Mono, include in netstandard 2.x\r\n        // not ideal that it returns DataTable, but it is how it is currently implemented\r\n        public static DataTable GetFactoryClasses() \r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        // new in .NET Core 2.x, port to netfx and Mono, include in .NET Standard 2.x + 1\r\n        public static void ConfigureFactory(\r\n            Type providerFactoryClass, \r\n            string providerInvariantName, \r\n            string name, \r\n            string description)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\ncc @terrajobst "},{"Id":"8406500066","Type":"PullRequestEvent","CreatedAt":"2018-10-11T18:07:27","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/806","RelatedDescription":"Merged pull request \"Miscellaneous improvements in Microsoft.Win32.SafeHandles\" (#806) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"8406388381","Type":"PullRequestEvent","CreatedAt":"2018-10-11T17:48:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/800","RelatedDescription":"Merged pull request \"Add ITuple\" (#800) at dotnet/standard","RelatedBody":"This fixes #628.\r\n\r\nThis adds `ITuple` which enables tuple decomposition when the underlying type isn't statically known to be a tuple type (e.g. if it is `object`).\r\n\r\n@dotnet/nsboard "},{"Id":"8406388352","Type":"IssuesEvent","CreatedAt":"2018-10-11T17:48:10","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/628","RelatedDescription":"Closed issue \"Adding ITuple to .NET Standard\" (#628) at dotnet/standard","RelatedBody":"The `ITuple` interface is available in .NET Core 2.0 and .NET Framework 4.7.1. Is there anything preventing it being added to .NET Standard as well? The `ValueTuple` itself is part of .NET Standard."},{"Id":"8405747209","Type":"IssuesEvent","CreatedAt":"2018-10-11T15:59:30","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/897","RelatedDescription":"Opened issue \"Apply more custom attributes to netstandard.dll\" (#897) at dotnet/standard","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/32768\r\n\r\nOnce we determine the set of significant attributes we may need to add them back to netstandard.dll.\r\n\r\nDoing so will require cooridination to make sure all implementers of netstandard.dll already apply those attributes.\r\n"},{"Id":"8404701060","Type":"PullRequestEvent","CreatedAt":"2018-10-11T13:32:28","Actor":"JW33","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/896","RelatedDescription":"Opened pull request \"Update evolution-of-design-time-assemblies.md\" (#896) at dotnet/standard","RelatedBody":"Fix punctuation and a misspelling"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8409029697","Type":"PullRequestEvent","CreatedAt":"2018-10-12T05:19:19","Actor":"thezim","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32783","RelatedDescription":"Opened pull request \"Correct OPENSSL_ROOT_DIR environment variable.\" (#32783) at dotnet/corefx","RelatedBody":"cmake should not be included a part of environment variable. Var must also be properly end quoted."},{"Id":"8408994609","Type":"IssuesEvent","CreatedAt":"2018-10-12T05:05:38","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/32782","RelatedDescription":"Opened issue \"Proposal: add implicit conversation from Memory to Span, ReadOnlySpan and from ReadOnlyMemory to ReadOnlySpan\" (#32782) at dotnet/corefx","RelatedBody":"Proposal:\r\n1. Add implicit conversation from Memory to Span and ReadOnlySpan\r\n2. Add implicit conversation from ReadOnlyMemory to ReadOnlySpan."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8408524324","Type":"PullRequestEvent","CreatedAt":"2018-10-12T02:09:36","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30455","RelatedDescription":"Merged pull request \"Command handler to close block comment on /\" (#30455) at dotnet/roslyn","RelatedBody":"Fixes #30089\r\n\r\nTagging @sharwell"},{"Id":"8408524311","Type":"IssuesEvent","CreatedAt":"2018-10-12T02:09:36","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30089","RelatedDescription":"Closed issue \"Automatically close block comment on /\" (#30089) at dotnet/roslyn","RelatedBody":"I was encouraged by work from @Neme12 in #30074, so I'm resurrecting a *very* old feature request of mine. 😄 \r\n\r\n**Steps to Reproduce**:\r\n\r\nPress <kbd>/</kbd> in the location marked with `|`:\r\n\r\n```csharp\r\n/*\r\n * Typed some text and then pressed enter...\r\n * |\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\n/*\r\n * Typed some text and then pressed enter...\r\n */\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\n/*\r\n * Typed some text and then pressed enter...\r\n * /\r\n```\r\n"},{"Id":"8408416678","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30468","RelatedDescription":"Merged pull request \"Merge dev16.0.x to dev16.0.x-vs-deps\" (#30468) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0.x into dev16.0.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0.x-to-dev16.0.x-vs-deps\ngit reset --hard upstream/dev16.0.x-vs-deps\ngit merge upstream/dev16.0.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0.x-to-dev16.0.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8408360984","Type":"IssuesEvent","CreatedAt":"2018-10-12T01:09:39","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30428","RelatedDescription":"Closed issue \"Improve Go To Last Edit Location\" (#30428) at dotnet/roslyn","RelatedBody":"**Version Used**:  15.8.6\r\n\r\n**Steps to Reproduce**: ç\r\n\r\nExecute command  \"Go To Last Edit Location\"\r\n\r\n**Expected Behavior**:\r\nif i execute multiple time the command  \"Go To Last Edit Location\" should navigate over all historical.\r\n(How work \"Navigate Backward\")\r\n\r\n**Actual Behavior**:\r\nIt only supports one level of history"},{"Id":"8408173675","Type":"PullRequestEvent","CreatedAt":"2018-10-12T00:01:10","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30469","RelatedDescription":"Opened pull request \"Nest 'introduce variable' code actions to help clean up the lightbulb.\" (#30469) at dotnet/roslyn","RelatedBody":"Makes things now look like this:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/46840265-f1b7f500-cd76-11e8-9994-465dfef1fa6c.png)\r\n\r\nNote: we will inline these guys if the lightbulb is short.  For example:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/46840294-2461ed80-cd77-11e8-813e-da8c3e03a6e7.png)\r\n\r\nThis fits the IDE style of trying to balance between providing fast access to helpful stuff, while also not making the code action list hugely overwhelming.  \r\n\r\nThis came up as part of the discussion during: https://github.com/dotnet/roslyn/issues/30464\r\n"},{"Id":"8408172430","Type":"PullRequestEvent","CreatedAt":"2018-10-12T00:00:46","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30468","RelatedDescription":"Opened pull request \"Merge dev16.0.x to dev16.0.x-vs-deps\" (#30468) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0.x into dev16.0.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0.x-to-dev16.0.x-vs-deps\ngit reset --hard upstream/dev16.0.x-vs-deps\ngit merge upstream/dev16.0.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0.x-to-dev16.0.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8409041655","Type":"PullRequestEvent","CreatedAt":"2018-10-12T05:23:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6443","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6443) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"8408942844","Type":"PullRequestEvent","CreatedAt":"2018-10-12T04:45:06","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6447","RelatedDescription":"Opened pull request \"Unify available types; stop emitting precodes for method calls\" (#6447) at dotnet/corert","RelatedBody":"This change contains two conservative CPAOT fixes for deficiencies\r\nI discovered during debugging:\r\n\r\n1) Unify available types - as we're using GetTypeDefinition(),\r\nwe may hit the same type multiple times for generic instantiations\r\nover different arguments; we should emit such types only once\r\ninto the available type table.\r\n\r\n2) Use delayed load helpers, not precodes, for resolving method\r\ncalls as it's generally cheaper (previously we had to emit the\r\nprecode fixups into each method calling a particular method)\r\nand it's what Crossgen does.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408579267","Type":"IssuesEvent","CreatedAt":"2018-10-12T02:28:48","Actor":"frankzye","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6446","RelatedDescription":"Opened issue \"Unhandled Exception: System.ArgumentNullException: Value cannot be null\" (#6446) at dotnet/corert","RelatedBody":"I don't know which part caurse these errors, and no other messages found,  please help. It works when not using corert.\r\n`Unhandled Exception: System.ArgumentNullException: Value cannot be null.\r\nParameter name: method\r\n   at System.Linq.Expressions.Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) + 0x1f4\r\n   at System.Linq.Expressions.Expression.Call(Expression, MethodInfo, IEnumerable`1) + 0x146\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.Compile[T](MethodInfo, ParameterInfo[]) + 0x1ad\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate) + 0x258\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() + 0xa5\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() + 0x275\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.<StartAsync>d__26.MoveNext() + 0xa6`"},{"Id":"8408432522","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:35:50","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6345","RelatedDescription":"Closed pull request \"WIP: Targeted fixes for \"/CoreCLR All\" ILC errors (990 failures remain)\" (#6345) at dotnet/corert","RelatedBody":"1) Don't try to emit method signature in relocsOnly mode as we don't\r\nyet have all the necessary tokens available in this early phase.\r\n\r\n2) Fix one more case concerning constrained types (we need to pass\r\naround the original method, typically IDisposable.Dispose, not\r\nany particular specialization as that may not be representable\r\nas a R2R signature).\r\n\r\n3) Per David Wrighton's suggestion, I have explicitly suppressed\r\nemitting native code for ArrayMethod's, leaving them up to runtime\r\nJIT. I have attached a TODO-PERF code comment stating that this is\r\na potential opportunity to exceed Crossgen CQ.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408427698","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:34:02","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6387","RelatedDescription":"Closed pull request \"Gracefully handle non-compilable methods\" (#6387) at dotnet/corert","RelatedBody":"This is another part of my WIP PR. Previously, any method compilation\r\nfailure has torn down the entire compilation due to the fact that,\r\nonce a method didn't compile, its code never got published and the\r\nclause\r\n\r\n        public override bool StaticDependenciesAreComputed => _methodCode != null;\r\n\r\nhit an assertion failure in the dependency graph walker. I'm proposing\r\nto populate uncompilable methods with a dummy code object with\r\nthe potential to satisfy most compile-time checks while being\r\nunresolvable by itself which is important as we don't want to\r\nsilently tolerate calls to the uncompiled method.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408427119","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:33:49","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6313","RelatedDescription":"Closed pull request \"WIP: Latest batch of my CPAOT changes resolved against latest\" (#6313) at dotnet/corert","RelatedBody":"This is the squashed set of my remaining changes rebased against\r\nthe latest CoreRT R2R state. I believe the changes fall into the\r\nfollowing categories:\r\n\r\n1) Generalization of DelayLoadHelperThunk to also work for eager\r\nthunk - in light of this fact I renamed it to just ImportThunk.\r\n\r\n2) Scattered fixes in EH and unwind info to light up exception\r\nhandling. This includes the changes to cater for the fact that\r\nCoreCLR uses a different encoding for the EH info than CoreRT.\r\n\r\n3) Experimental refactoring to get rid of explicit token passing\r\nso that they are always synthesized based on pre-recorded\r\nresolveToken information.\r\n\r\nMy current thinking is that I'm going to send out a separate PR\r\nfor the ImportThunk first as that's a very straightforward change.\r\nAfter that I'll try to separate out the EH / unwind info fixes\r\nfrom the token refactoring and also send them out separately.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408392262","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:20:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6445","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#6445) at dotnet/corert","RelatedBody":""},{"Id":"8408325071","Type":"PullRequestEvent","CreatedAt":"2018-10-12T00:56:26","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6428","RelatedDescription":"Merged pull request \"Cross-module signatures, non-compilable methods and instance hashtable fixes\" (#6428) at dotnet/corert","RelatedBody":"This is a combination of cleaned-up versions of changes I previously made to fix various CoreCLR tests.\r\n\r\n1) Gracefully handle non-compilable methods without crashing the compiler;\r\n\r\n2) Improvements in handling of cross-module signatures;\r\n\r\n3) Implement CoreCLR-compatible method hashing."},{"Id":"8408054109","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:21:41","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6445","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#6445) at dotnet/corert","RelatedBody":""},{"Id":"8408052430","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:21:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6444","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6444) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8407980198","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:00:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6444","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6444) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8407601222","Type":"PullRequestEvent","CreatedAt":"2018-10-11T21:29:24","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6443","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6443) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8407278575","Type":"PullRequestEvent","CreatedAt":"2018-10-11T20:27:29","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2571","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to release/2.1.5xx\" (#2571) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8407263164","Type":"PullRequestEvent","CreatedAt":"2018-10-11T20:24:52","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2579","RelatedDescription":"Opened pull request \"[DO NOT MERGE] Modification of the readme for a test.\" (#2579) at dotnet/sdk","RelatedBody":"[DO NOT MERGE] Modification of the readme for a test."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1049807908173574144","CreatedAt":"2018-10-09T23:44:44+00:00","UserScreenname":"dotnet","Text":"Blogged -- .NET Framework October 2018 Security and Quality Rollup https://t.co/tLgVdVbM4L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":8,"RawContent":null},{"Id":"1049702744515203072","CreatedAt":"2018-10-09T16:46:51+00:00","UserScreenname":"dotnet","Text":"Announcing the latest preview release of ML .NET 0.6 (Machine Learning .NET) https://t.co/3lXXCs30ma","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":102,"FavoriteCount":59,"RawContent":null},{"Id":"1047894749867270145","CreatedAt":"2018-10-04T17:02:31+00:00","UserScreenname":"dotnet","Text":"Blogged -- Update on .NET Core 3.0 and .NET Framework 4.8 https://t.co/tBpJg3Eoc8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":326,"FavoriteCount":244,"RawContent":null},{"Id":"1047645317401735168","CreatedAt":"2018-10-04T00:31:22+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 has reached end of life https://t.co/FZTYietdMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":148,"FavoriteCount":174,"RawContent":null},{"Id":"1047579283579756544","CreatedAt":"2018-10-03T20:08:58+00:00","UserScreenname":"dotnet","Text":"https://t.co/Pt9ZGHYH8C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-10-12T05:30:33.2693866Z","RunDurationInMilliseconds":8326}