{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10228116772","Type":"PullRequestEvent","CreatedAt":"2019-08-16T23:42:20","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7458","RelatedDescription":"Merged pull request \"[ReleasePrep] merge dev into master\" (#7458) at NuGet/NuGetGallery","RelatedBody":"https://github.com/NuGet/NuGetGallery/issues/7457"},{"Id":"10227872538","Type":"PullRequestEvent","CreatedAt":"2019-08-16T22:23:40","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7460","RelatedDescription":"Merged pull request \"[MSA/AAD] Fortify cred check\" (#7460) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10227750924","Type":"PullRequestEvent","CreatedAt":"2019-08-16T21:52:07","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7460","RelatedDescription":"Opened pull request \"[MSA/AAD] Fortify cred check\" (#7460) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10227626076","Type":"IssuesEvent","CreatedAt":"2019-08-16T21:24:25","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7394","RelatedDescription":"Closed issue \"Deployment for week of August 5, 2019\" (#7394) at NuGet/NuGetGallery","RelatedBody":"## Orchestrator\r\n\r\nMerge PR: https://github.com/NuGet/NuGet.Jobs/pull/788\r\nMergePR: https://github.com/NuGet/NuGet.Jobs/pull/793\r\nRelease: [416771](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=416771)\r\n\r\n- [x] INT\r\n  - [x] USNC\r\n  - [x] USSC\r\n- [x] PROD\r\n  - [x] USNC\r\n  - [x] USSC\r\n\r\n## Symbols Orchestrator\r\n\r\nMerge PR: https://github.com/NuGet/NuGet.Jobs/pull/788\r\nMerge PR: https://github.com/NuGet/NuGet.Jobs/pull/793\r\nRelease: [416774](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=416774)\r\n\r\n- [x] INT\r\n  - [x] USNC\r\n  - [x] USSC\r\n- [x] PROD\r\n  - [x] USNC\r\n  - [x] USSC\r\n\r\n## NuGet.Licenses\r\n\r\nhttps://github.com/NuGet/NuGet.Licenses/commit/6301156bc3c3b599ac335ef382a704d9134749db\r\nRelease: [416930](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=416930)\r\n\r\n- [x] DEV\r\n- [x] PROD\r\n\r\n## Stats.CreateAzureCdnWarehouseReports\r\n\r\nhttps://github.com/NuGet/NuGet.Jobs/commit/1b6f4a0bf6605fb676cccca6a839cabdb5c17f2a\r\nRelease: [416773](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-environment-logs&releaseId=416773&environmentId=2002961)\r\n- [x] INT\r\n- [x] PROD\r\n\r\n## NuGetDSR Job\r\n\r\nhttps://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGet.Internal.Jobs/commit/2de7219af79d0b570a344a9177ca13541c43b842?refName=refs%2Fheads%2Fmaster\r\nRelease: [416676](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=416676)\r\n\r\n- [x] DEV\r\n- [x] INT\r\n- [x] PROD"},{"Id":"10227079649","Type":"IssuesEvent","CreatedAt":"2019-08-16T19:41:10","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7413","RelatedDescription":"Closed issue \"On-prem hosted NuGet Gallery - Push symbol packages and its feed for Visual Studio\" (#7413) at NuGet/NuGetGallery","RelatedBody":"Hi,\r\n\r\nMy company is looking to host its own NuGet Gallery and would like to have both the main package and symbols package feeds available using it.\r\n\r\nSo, I have downloaded the source code for it and tried to push both the main package and symbols package, but pushing the symbols package fails.\r\n\r\nLooking at the source code for NuGet Gallery, I can see that it only allows symbol packages which have PackageType set to 'SymbolsPackage' in metadata which I believe is only available in 'snupkg' symbol packages.\r\n\r\nI also looked at how NuGet client works and if I understand correctly, the source need to implement V3 API which has the 'index.json' file. Is there any documentation for I can achieve the same for the on-prem hosted NuGet Gallery and what will be the URL to use in Visual Studio for symbols packages?\r\n\r\nIf not, can you please recommend the other best possible solutions?\r\n\r\nThanks\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10228551495","Type":"IssuesEvent","CreatedAt":"2019-08-17T03:32:32","Actor":"daniel-white","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8465","RelatedDescription":"Opened issue \"Transitive lock files result in NU1004\" (#8465) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet cli\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 2.1.801\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS 10.14.6 (18G87)\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .net standard project. Add a nuget reference with a wildcard.\r\n\r\n2. Enable `RestorePackagesWithLockFile`.\r\n\r\n2. Run `dotnet restore` for the first project.\r\n\r\n2. Add another .net standard project. Reference the first project via project reference.\r\n\r\n2. Run `dotnet restore`for the second project.\r\n\r\n3. Run `dotnet restore --locked-mode` for the second project.\r\n\r\n4. Observe `NU1004`\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n[log.txt](https://github.com/NuGet/Home/files/3511626/log.txt)\r\n\r\n\r\n\r\n### Sample Project\r\n[locktest.zip](https://github.com/NuGet/Home/files/3511627/locktest.zip)\r\n\r\n\r\n"},{"Id":"10226092204","Type":"IssuesEvent","CreatedAt":"2019-08-16T16:50:19","Actor":"mhsimkin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8464","RelatedDescription":"Opened issue \"NU1107: Version Conflict on mix framework project\" (#8464) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\nNuGet version (x.x.x.xxx): 5.2.0\r\ndotnet.exe --version (if appropriate): N/A\r\nVS version (if appropriate): VS 2019 Enterprise 16.2.2\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 Pro Build 1809\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI’m in the process of converting our internal libraries into .NET Standard 2.  As a result, I have packages that are multi-targeting .Net 4.7.2 and .Net Standard 2.0.  At the same time, I’m still developing new applications and updating older applications.\r\n\r\nIn a new application (Windows service) that targets 4.7.2 there is a conflict pulling in packages.\r\nHere is the actual error message:\r\n\r\n> NU1107: Version conflict detected for RabbitMQ.Client. Install/reference RabbitMQ.Client 5.1.0 directly to project MprProductSync to resolve this issue. \r\n>  MprProductSync -> ScribeClientAPI.MSLogging.Legacy 2019.8.13.6 -> ScribeClientAPI.Legacy 2019.8.13.6 -> Messaging.RabbitMq 2019.8.13.57 -> RabbitMQ.Client (>= 5.1.0) \r\n>  MprProductSync -> RENAPI.Standard 2019.8.16.2 -> UtilsLibrary 2019.8.15.6 -> RabbitMQ.Client (= 2.5.1).\r\n> NuGet package restore failed. Please see Error List window for detailed warnings and errors.\r\n\r\nBelow is a list of what frameworks each one of the targets/packages in the above error are using:\r\nMprProductSync :                                  4.7.2\r\nScribeClientAPI.MSLogging.Legacy:      Standard 2\r\nScribeClientAPI.Legacy:                         Standard 2\r\nMessaging.,RabbitMQ:                          Standard 2\r\nRabbitMQ.Client:                                   4.5.1/Standard 1.5/Standard 2\r\nRENAPI.Standard:                                  Standard 2\r\nUtilsLibrary:                                           4.7.2/Standard 2\r\nRabbitMQ.Client:                                  4.5.1/Standard 1.5/Standard 2\r\n\r\nI understand that NuGet will attempt to match a project targeting 4.7.2 with a library built with 4.7.2. \r\n\r\nMy expectation is that if a .NET Standard package was determined to be the best match, that all  descendant packages also resolve to .NET Standard.\r\n\r\nFor example, RENAPI.Standard is a Standard 2 package.  It has a dependency on UtilsLibrary which also has a Standard 2 version, which would use the RabbitMQ.Client that is also compiled against .NET Standard. Both the UtilsLibrary and RabbitMQ.Client are multi-targeted packages.\r\n\r\nInstead it seems that during the package resolution the full framework version of UtilsLibrary is being used, which results in the specific version locked RabbitMQ.Client is being used.\r\n\r\nHaving to always package the full framework and standard versions separately will lead to other problems.  (1) duplicate packages with just the name and framework being different, (2) unable to seamlessly update existing applications without changing the package name.\r\n\r\nThis will just make it harder to migrate from the full framework to .NET Core/Standard.\r\n\r\n### Verbose Logs\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\nSee attached msbuild.log\r\n[msbuild.log](https://github.com/NuGet/Home/files/3510441/msbuild.log)\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8\r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n-marc\r\n"},{"Id":"10226014892","Type":"IssuesEvent","CreatedAt":"2019-08-16T16:37:15","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8463","RelatedDescription":"Opened issue \"dotnet list package with multi targeting WPF project\" (#8463) at NuGet/Home","RelatedBody":"From https://github.com/dotnet/cli/issues/12267\r\n\r\n* `dotnet new wpf`\r\n* Replace TargetFramework with <TargetFrameworks>netcoreapp3.0;net45</TargetFrameworks>\r\n* `dotnet restore`\r\n* `dotnet list package`\r\n\r\nRestore succeeded, so `dotnet list package` should too."},{"Id":"10224464384","Type":"IssuesEvent","CreatedAt":"2019-08-16T12:49:28","Actor":"CodeIsLie","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8462","RelatedDescription":"Opened issue \"No dependencies in Nuget.Protocol API for PackageSearchResource\" (#8462) at NuGet/Home","RelatedBody":"I use Nuget.Protocol 5.2.0 to investigate some features of Nuget dependency graph and i write next code:\r\n```C#\r\n\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing NuGet.Common;\r\nusing NuGet.Configuration;\r\nusing NuGet.Protocol.Core.Types;\r\nusing NuGet.Protocol.VisualStudio;\r\n\r\nnamespace NuGetApiInvestigation\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            var visStudio = Repository.Provider.GetVisualStudio();\r\n            var packageSource = new PackageSource(\"https://api.nuget.org/v3/index.json\");\r\n            var sourceRepository = Repository.CreateSource(visStudio, packageSource);\r\n            var packageSearchResource = await sourceRepository.GetResourceAsync<PackageSearchResource>();\r\n            \r\n            var searchAsync = await packageSearchResource.SearchAsync(\"\", new SearchFilter(false), 0, 500,\r\n                NullLogger.Instance, CancellationToken.None);\r\n            foreach (var metadata in searchAsync)\r\n            {\r\n                Dictionary<string, int> usages = new Dictionary<string, int>();\r\n\r\n                foreach (var dependencySet in metadata.DependencySets)\r\n                foreach (var dependency in dependencySet.Packages)\r\n                {\r\n                    usages[dependency.Id] += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd I realize that i don't get any dependencySet that way. Of course, i can use PackageMetadataResource to get dependencies for each package, but it took too many time for 500+ packages. Is it possible to get dependencies in package metadata by using PackageSearchResource? I mean, maybe there is exist some flag or PackageSource for this purpose?\r\n"},{"Id":"10221906282","Type":"IssuesEvent","CreatedAt":"2019-08-16T04:02:33","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8385","RelatedDescription":"Closed issue \"Prevent NuGetFrameworkException from nomination API\" (#8385) at NuGet/Home","RelatedBody":"Since d16.1, when the project system calls nomination the framework moniker provided to us when the project's TargetFramework is invalid, is `_`, rather than `Unsupported`, as previously. This causes a `NuGetFrameworkException` when `GetShortFolderName()`. Project system is not handling exception in nomination and just reports it as a fatal error which causes a yellow bar at the top of Visual Studio and also Watson errors.\r\n\r\nWe need to report errors in the assets file, but there are certain kinds of restore errors that today prevent the assets file from being generated. This work is just to prevent the watson bugs and yellow bar, and to make VS 16.x work like 15.9 does in the same situation (an error is still listed in the error list, so customers still get feedback that something is wrong). #7717 is the long term fix."},{"Id":"10221313782","Type":"IssuesEvent","CreatedAt":"2019-08-16T01:03:05","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8448","RelatedDescription":"Closed issue \"Make NuGet.CommandLine.XPlat debuggable\" (#8448) at NuGet/Home","RelatedBody":"Historically it has been very difficult to debug NuGet.CommandLine.XPlat (the entry point to several `dotnet` cli commands), involving copying compiled binaries into a dotnet sdk folder, setting an environment variable to cause NuGet to pause until a debugger is attached, and then attaching Visual Studio as a debugger to the correct PID.\r\n\r\nIt should be as easy to debug as debugging any other command line program."},{"Id":"10221024144","Type":"IssuesEvent","CreatedAt":"2019-08-15T23:34:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8453","RelatedDescription":"Closed issue \"Recursively touch all SDK files to fix the PackCommand_PackTarget_IsIncremental flakiness\" (#8453) at NuGet/Home","RelatedBody":"PackCommand_PackTarget_IsIncremental is flaky so sometimes the SDK files are creating with a Utc timestamp, meaning when the SDK is extracted on a redmond machine, it acts as it's in the future. \r\nThat breaks the msbuild incremental logic as it's timestamp based."},{"Id":"10220663429","Type":"IssuesEvent","CreatedAt":"2019-08-15T22:04:36","Actor":"peterhuene","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8461","RelatedDescription":"Opened issue \"Confusing warning message about license, only for pack verb\" (#8461) at NuGet/Home","RelatedBody":"_From @richlander on Thursday, August 15, 2019 9:34:20 PM_\r\n\r\nThis is the experience with .NET Core 3.0 Preview 8:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr license\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.89 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.73\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 16.01 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n```\r\n\r\nThis is the warning at issue:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n\r\nThat wording isn't directly actionable since I don't explicitly use \"licenseUrl\" in my project, and warning doesn't suggest that \"licenseUrl might be a substring of another element.\r\n\r\nMade this change (based on [NU5125](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5125)):\r\n\r\n` <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>`\r\n\r\nto\r\n\r\n`<PackageLicenseExpression>MIT</PackageLicenseExpression>`\r\n\r\nExperience:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.86 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.19\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 15.3 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>\r\n```\r\n\r\nWarning went away. That's good.\r\n\r\n\r\n\r\n\r\n\r\n\r\n_Copied from original issue: dotnet/cli#12272_"},{"Id":"10220541451","Type":"IssuesEvent","CreatedAt":"2019-08-15T21:40:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8460","RelatedDescription":"Opened issue \"Add arcade based automation for .NET Core CLI insertions\" (#8460) at NuGet/Home","RelatedBody":""},{"Id":"10220515371","Type":"IssuesEvent","CreatedAt":"2019-08-15T21:34:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8459","RelatedDescription":"Closed issue \"Distribute the .NET CLI as a .NET CLI tool (dotnet tool)\" (#8459) at NuGet/Home","RelatedBody":"I.e. so that it can be installed using `dotnet tool install`.\r\n\r\nA continuous source of pain is the mismatch between `dotnet` and `nuget.exe`. The former does not support all the operations of the latter, and often lags behind when new features are released. Some of the problems described in https://github.com/dotnet/coreclr/issues/26175 also apply with regard to issues and repos. Often, I find it near to impossible find out which version of the SDK is going to contain a given change to the NuGet client.\r\n\r\nWhile it possible to use nuget.exe instead, bootstrapping this from, for example, a build script is relatively painful in that it requires a non-trivial amount of boilerplate code. Whereas it's trivial to bootstrap a `dotnet tool` (`dotnet tool install --tool-path ...`).\r\n\r\nIf the NuGet CLI was distributed as a `dotnet tool`, that would probably solve most of these issues. We could choose to ignore any NuGet commands in the SDK and use the `dotnet tool` instead. We could follow issues in the NuGet repo in isolation, and pick up the new versions of the `dotnet tool` when we need to."},{"Id":"10220171760","Type":"IssuesEvent","CreatedAt":"2019-08-15T20:35:14","Actor":"adamralph","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8459","RelatedDescription":"Opened issue \"Distribute the .NET CLI as a .NET CLI tool (dotnet tool)\" (#8459) at NuGet/Home","RelatedBody":"I.e. so that it can be installed using `dotnet tool install`.\r\n\r\nA continuous source of pain is the mismatch between `dotnet` and `nuget.exe`. The former does not support all the operations of the latter, and often lags behind when new features are released. Some of the problems described in https://github.com/dotnet/coreclr/issues/26175 also apply with regard to issues and repos. Often, I find it near to impossible find out which version of the SDK is going to contain a given change to the NuGet client.\r\n\r\nWhile it possible to use nuget.exe instead, bootstrapping this from, for example, a build script is relatively painful in that it requires a non-trivial amount of boilerplate code. Whereas it's trivial to bootstrap a `dotnet tool` (`dotnet tool install --tool-path ...`).\r\n\r\nIf the NuGet CLI was distributed as a `dotnet tool`, that would probably solve most of these issues. We could choose to ignore any NuGet commands in the SDK and use the `dotnet tool` instead. We could follow issues in the NuGet repo in isolation, and pick up the new versions of the `dotnet tool` when we need to."},{"Id":"10219793260","Type":"IssuesEvent","CreatedAt":"2019-08-15T19:32:22","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8458","RelatedDescription":"Opened issue \"Improve the NU1605 warning message\" (#8458) at NuGet/Home","RelatedBody":"A WIP PR already in https://github.com/NuGet/NuGet.Client/pull/2348\r\n\r\nOther customer reports; https://developercommunity.visualstudio.com/content/problem/653804/nu1605-detected-package-downgrade-microsoftapplica.html"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-08-17T05:30:40.2188543Z","RunDurationInMilliseconds":1634}