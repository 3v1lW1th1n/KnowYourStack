{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"},{"Id":"7226630380","Type":"IssuesEvent","CreatedAt":"2018-02-10T11:59:43","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Opened issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7361303140","Type":"IssuesEvent","CreatedAt":"2018-03-11T05:30:11","Actor":"IlyaGrebnov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16889","RelatedDescription":"Opened issue \"Idea for Dictionary<TKey, TValue> to make hash collisions be ordered by hashCode\" (#16889) at dotnet/coreclr","RelatedBody":"Dictionary<TKey, TValue> collision resolution implemented as separate chaining with TryInsert method always inserting new entry as first in the linked list. I think this is sub optimal and potentially should be better strategies. One of ideas could be making collisions list ordered by hashCode. This won't improve performance of Find/Insert methods if entry is expected to be found, but could improve performance of Find/Insert methods in case of misses since we could terminate search early if 'entries[i].hashCode > hashCode'. \r\n\r\nNote, this depends on quality of hash codes / avg. number of collisions per bucket and requires careful testing. I do not have time to test this, but I think this is worth a try. \r\n\r\nCC @benaadams  who finds a joy in making code faster :)"},{"Id":"7361227519","Type":"PullRequestEvent","CreatedAt":"2018-03-11T04:17:26","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16888","RelatedDescription":"Opened pull request \"Up the jit stress timeout to 3 hours\" (#16888) at dotnet/coreclr","RelatedBody":"Current jitx86hwintrinsicnoavx job runs around 4 hours. Which will cause timeouts if over.\r\n\r\nThis is linked with conversation on https://github.com/dotnet/coreclr/pull/16817#issuecomment-372078465.\r\n\r\n/cc @4creators @jkotas "},{"Id":"7361108490","Type":"IssuesEvent","CreatedAt":"2018-03-11T02:29:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16864","RelatedDescription":"Closed issue \"[ARM] Crossgen can't generate pdb for R2R System.Private.CoreLib.dll\" (#16864) at dotnet/coreclr","RelatedBody":"In order to use Ready2Run for `System.Private.CoreLib.dll` for ARM and retire fragile NGen (as we wanted in #16826 #16839) this needed to be resolved first\r\n\r\n```\r\nBUILD: \"D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\x86\\crossgen.exe\" /Platform_Assemblies_Paths \"D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\" /CreatePdb \"D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\PDB\" \"D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\System.Private.CoreLib.dll\" \r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.22220.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nLoaded image 'D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\System.Private.CoreLib.dll' (for input file 'D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\System.Private.CoreLib.dll') is not a native image.\r\nError generating PDB for 'D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\System.Private.CoreLib.dll': Couldn't find a native image. (Exception from HRESULT: 0x80131C64)\r\nError: compilation failed for \"D:\\git\\coreclr-base\\bin\\Product\\Windows_NT.arm.Checked\\System.Private.CoreLib.dll\" (0x80131c64)\r\n```\r\n**Related issues:** #16862 "},{"Id":"7361108271","Type":"PullRequestEvent","CreatedAt":"2018-03-11T02:29:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16882","RelatedDescription":"Merged pull request \"Set SetIsGeneratingNgenPDB flag early\" (#16882) at dotnet/coreclr","RelatedBody":""},{"Id":"7361104320","Type":"PullRequestEvent","CreatedAt":"2018-03-11T02:25:53","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16878","RelatedDescription":"Closed pull request \"[WIP][No merge] Crossgen /CreatePdb failure\" (#16878) at dotnet/coreclr","RelatedBody":"This PR is for testing only"},{"Id":"7361008620","Type":"IssuesEvent","CreatedAt":"2018-03-11T01:05:03","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16887","RelatedDescription":"Opened issue \"RyuJIT generates poor code for a helper method which does `return Method(value, value)`\" (#16887) at dotnet/coreclr","RelatedBody":"### Issue\r\nFor the code (where `ReturnType` and `OperandType` are value types):\r\n```C#\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static ReturnType MyMethod1(OperandType value)\r\n{\r\n    return MyMethod2(value, value);\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static ReturnType MyMethod2(OperandType left, OperandType right)\r\n{\r\n    // Logic\r\n}\r\n```\r\n\r\nRyuJIT currently has poor codegen when inlining a call to `MyMethod1` and ends up reading `value` from memory, twice.\r\n\r\n### Example\r\nA simple example program: [Test.cs.txt](https://github.com/dotnet/coreclr/files/1799935/Test.cs.txt)\r\n\r\nThe method `Test1` currently produces:\r\n* [JitDisasm.Test1.txt](https://github.com/dotnet/coreclr/files/1799930/JitDisasm.Test1.txt)\r\n* [JitDump.Test1.txt](https://github.com/dotnet/coreclr/files/1799932/JitDump.Test1.txt)\r\n\r\nThe method `Test2` currently produces:\r\n* [JitDisasm.Test2.txt](https://github.com/dotnet/coreclr/files/1799931/JitDisasm.Test2.txt)\r\n* [JitDump.Test2.txt](https://github.com/dotnet/coreclr/files/1799933/JitDump.Test2.txt)\r\n\r\nThe method `Test3` currently produces:\r\n* [JitDisasm.Test3.txt](https://github.com/dotnet/coreclr/files/1799936/JitDisasm.Test3.txt)\r\n* [JitDump.Test3.txt](https://github.com/dotnet/coreclr/files/1799937/JitDump.Test3.txt)\r\n\r\n### Additional Notes\r\nThe stack frames appear to be much larger than necessary (it looks like the stack frames of each inlined method are kept, even when the values are no longer used).\r\n\r\nDirectly calling `MyMethod2` (`Test2`) produces better code, but it fails to recognize that `left` and `right` are the same value.\r\n\r\nManually inlining `MyMethod2` (`Test3`) produces the best code. I would think that it is feasible for the JIT to produce this code when the code is inlined by the JIT (`Test1`)."},{"Id":"7361004340","Type":"IssuesEvent","CreatedAt":"2018-03-11T01:01:19","Actor":"bcronce","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16886","RelatedDescription":"Opened issue \"ValueTask could reuse cancelled task\" (#16886) at dotnet/coreclr","RelatedBody":"In [private Task GetTaskForValueTaskSource()](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/Threading/Tasks/ValueTask.cs), the task returned by this method in certain cases could be made static and reused.\r\n\r\n```c#\r\nvar tcs = new TaskCompletionSource<bool>();\r\ntcs.TrySetCanceled();\r\nreturn tcs.Task;\r\n```\r\ninto\r\n```c#\r\ninternal static Task CancelledTask ...\r\n...\r\nreturn ValueTask.CancelledTask\r\n```"},{"Id":"7360934828","Type":"PullRequestEvent","CreatedAt":"2018-03-11T00:02:38","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16817","RelatedDescription":"Merged pull request \"Implement SSE2 SetVector128 HW intrinsics - managed\" (#16817) at dotnet/coreclr","RelatedBody":"FYI @CarolEidt @fiigii @tannergooding \r\n\r\n~~This is managed implementation only to get early feedback on implementation. Tests will be added a bit later today or actually tomorrow in my time zone.~~ "},{"Id":"7360749399","Type":"PullRequestEvent","CreatedAt":"2018-03-10T21:48:35","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16885","RelatedDescription":"Opened pull request \"Fix lldb-3.9-dev package name\" (#16885) at dotnet/coreclr","RelatedBody":"@janvorli "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7360168585","Type":"IssuesEvent","CreatedAt":"2018-03-10T15:50:00","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8764","RelatedDescription":"Opened issue \".Net core publish output is ugly\" (#8764) at dotnet/cli","RelatedBody":"@HolyOne commented on [Sat Mar 10 2018](https://github.com/dotnet/core/issues/1330)\n\nHello,\r\nI have built a website using .net core razor pages. \r\nMy problem is when I publish the website there are hundreds of dll files.\r\nMost often, what I am trying to find is appconfig / webconfig or main Application file\r\n\r\nI think you should package rest of them in a bin folder or something because it looks like all compiled files are dumped in the publish root folder and this is annoying on publishing situations\n\n"},{"Id":"7358792398","Type":"PullRequestEvent","CreatedAt":"2018-03-09T23:41:45","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8763","RelatedDescription":"Opened pull request \"Update template engine to 1.0.1-beta3-20180309-1459566\" (#8763) at dotnet/cli","RelatedBody":"Catch up template engine to one more recent than the 2.1.0-preview1 build"},{"Id":"7358543527","Type":"IssuesEvent","CreatedAt":"2018-03-09T22:23:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8762","RelatedDescription":"Opened issue \"Better error message to guide user when there is only preview version in the feed\" (#8762) at dotnet/cli","RelatedBody":"It is hard for user to take the right action -- \r\n`dotnet install tool -g t-rex --version 1.0.0-preview1-002`\r\n\r\nCurrent experience:\r\n![image](https://user-images.githubusercontent.com/6993335/37232747-265a2520-23a5-11e8-9f24-d4217bbc9a49.png)\r\n\r\n"},{"Id":"7358417739","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:51:51","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8756","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#8756) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7359014110","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:15:12","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/672","RelatedDescription":"Opened pull request \"Update Xamarin platform APIs to latest Dev 15.7\" (#672) at dotnet/standard","RelatedBody":"Fixes https://github.com/mono/mono/issues/7496"},{"Id":"7358857084","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:06:28","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/671","RelatedDescription":"Opened pull request \"Trimming fixes\" (#671) at dotnet/standard","RelatedBody":"Fixes #670, #667, #626 \r\n\r\nThis honors MSBuild's related files (eg: .pdb) that are added to ReferenceCopyLocalPaths.  I added a switch to turn off this behavior if it is undesired.\r\n\r\nI've also fixed the package-graph issues by bringing back the assets file reading that I previously removed in a723e6ca6c49d6947803d2952517e46f1465c0ce, but as a fallback.\r\n\r\n/cc @jnm2 @weshaggard "},{"Id":"7356295921","Type":"IssuesEvent","CreatedAt":"2018-03-09T14:26:39","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/670","RelatedDescription":"Opened issue \"Trimming is not preserving non-assembly ReferenceCopyLocalPaths\" (#670) at dotnet/standard","RelatedBody":"Our trimmer only removed ReferenceCopyLocalPaths that had OriginalItemSpecs of removed assemblies, but your trimmer removes all non-assembly `ReferenceCopyLocalPaths`. Namely, 50 PDBs from NuGet packages. We want those PDBs in build output for two reasons: stepping into embedded or linked source while debugging, and snapshotting them easily with each CI build for use in future debugging.\r\n\r\nIs there a workaround I could apply? It [looks](https://github.com/dotnet/standard/blob/master/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L99) like the MSBuild task is missing the facility to keep related reference items together.\r\n\r\n/cc @ericstj "},{"Id":"7350255559","Type":"IssuesEvent","CreatedAt":"2018-03-08T13:46:54","Actor":"nyctef","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/669","RelatedDescription":"Opened issue \"FileNotFoundException for Microsoft.SqlServer.Types 10.0.0.0 when trying to use SQL Server geography data\" (#669) at dotnet/standard","RelatedBody":"Hopefully this is the right place to post this-\r\n\r\nWe've been hitting an issue using [System.Data.SqlClient](https://www.nuget.org/packages/System.Data.SqlClient/) through a netstandard2.0 project where Microsoft.SqlServer.Types 10.0.0.0 will fail to load when trying to fetch geography data from SQL Server. I think we can work around this problem by [getting the dll from nuget](https://www.nuget.org/packages/Microsoft.SqlServer.Types/), but since the nuget package only has a `net40` version, this means the project we're installing the nuget package into can't be `netstandard2.0` any more.\r\n\r\nI've created an example repo here: https://github.com/nyctef/geography-repro to try and demonstrate the problem - it should crash on machines were Microsoft.SqlServer.Types 10.0.0.0 isn't in the GAC already."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7361299528","Type":"PullRequestEvent","CreatedAt":"2018-03-11T05:26:26","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27943","RelatedDescription":null,"RelatedBody":""},{"Id":"7361299467","Type":"PullRequestEvent","CreatedAt":"2018-03-11T05:26:22","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/27943","RelatedDescription":"Closed pull request \"[WIP] Added tests for callsite inline/L1/L2 caching\" (#27943) at dotnet/corefx","RelatedBody":""},{"Id":"7361147583","Type":"PullRequestEvent","CreatedAt":"2018-03-11T03:04:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27944","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview2-26311-01, preview2-26310-02, respectively (master)\" (#27944) at dotnet/corefx","RelatedBody":""},{"Id":"7361060185","Type":"PullRequestEvent","CreatedAt":"2018-03-11T01:47:54","Actor":"VSadov","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27943","RelatedDescription":"Opened pull request \"[WIP] Added tests for L1/L2 callsite caching\" (#27943) at dotnet/corefx","RelatedBody":""},{"Id":"7361038765","Type":"PullRequestEvent","CreatedAt":"2018-03-11T01:30:02","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27931","RelatedDescription":"Merged pull request \"Start adding alternate data stream tests\" (#27931) at dotnet/corefx","RelatedBody":"Also fill out ExampleTests.\r\n\r\nWe couldn't do this before without `\\\\?\\` due to our path validation.\r\n\r\ncc: @danmosemsft, @pjanotti, @Anipik "},{"Id":"7361038054","Type":"IssuesEvent","CreatedAt":"2018-03-11T01:29:27","Actor":"jp2masa","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/27942","RelatedDescription":"Opened issue \"[System.Composition] Exporting single metadata key and importing with array property in metadata view fails\" (#27942) at dotnet/corefx","RelatedBody":"I have this export:\r\n```cs\r\ninternal class SomePropertyExports\r\n{\r\n    [Export(\"MyContract\")]\r\n    [ExportMetadata(\"SomeText\", \"some text\")]\r\n    public string MyExport { get; }\r\n}\r\n```\r\nAnd this metadata view:\r\n```cs\r\npublic class MyMetadata\r\n{\r\n    [DefaultValue(null)]\r\n    public string[] SomeText { get; set; }\r\n}\r\n```\r\nThen I import it like this:\r\n```cs\r\n[Export]\r\ninternal class ImportClass\r\n{\r\n    [ImportingConstructor]\r\n    public ImportClass([ImportMany(\"MyContract\")] IEnumerable<Lazy<string, MyMetadata>> someExports)\r\n    {\r\n    }\r\n}\r\n```\r\nAnd I get the following exception:\r\n```\r\nSystem.InvalidCastException: 'Unable to cast object of type 'System.String' to type 'System.String[]'.'\r\n```\r\nIf I export the property with no \"SomeText\" metadata or with more than one \"SomeText\" metadata, it works fine, is this expected?"},{"Id":"7360974538","Type":"PullRequestEvent","CreatedAt":"2018-03-11T00:35:45","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27940","RelatedDescription":"Merged pull request \"Re-enable several task awaiting tests\" (#27940) at dotnet/corefx","RelatedBody":"Closes https://github.com/dotnet/corefx/issues/27675"},{"Id":"7360974534","Type":"IssuesEvent","CreatedAt":"2018-03-11T00:35:45","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27675","RelatedDescription":"Closed issue \"IsValidLocationForInlining no longer considered when running await continuations\" (#27675) at dotnet/corefx","RelatedBody":"when up to 2.1 preview1  run app in cmd dotnet run -c release -f netcoreapp2.1\r\nTaskCompletionSource TrySetResult  be blocked\r\nnetcoreapp2.0 is ok\r\n\r\n\r\n```C#\r\n public sealed class TaskCompletionSource : TaskCompletionSource<int>\r\n    {\r\n        public static readonly TaskCompletionSource Void = CreateVoidTcs();\r\n\r\n        public TaskCompletionSource(object state)\r\n            : base(state)\r\n        {\r\n        }\r\n\r\n        public TaskCompletionSource()\r\n        {\r\n        }\r\n\r\n        public bool TryComplete()\r\n        {\r\n           return this.TrySetResult(0);\r\n        }\r\n\r\n        public void Complete() => this.SetResult(0);\r\n\r\n        // todo: support cancellation token where used\r\n        public bool SetUncancellable() => true;\r\n\r\n        public override string ToString() => \"TaskCompletionSource[status: \" + this.Task.Status.ToString() + \"]\";\r\n\r\n        static TaskCompletionSource CreateVoidTcs()\r\n        {\r\n            var tcs = new TaskCompletionSource();\r\n            tcs.TryComplete();\r\n            return tcs;\r\n        }\r\n    }\r\n```"},{"Id":"7360881714","Type":"PullRequestEvent","CreatedAt":"2018-03-10T23:21:09","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/27941","RelatedDescription":"Opened pull request \" Promptly close SocketsHttpHandler pooled connection when receiving EOF\" (#27941) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/27908\r\ncc: @geoffkizer, @davidsh"},{"Id":"7360806463","Type":"PullRequestEvent","CreatedAt":"2018-03-10T22:28:09","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/27921","RelatedDescription":"Merged pull request \"RemoteInvoke added to SetTempEnv\" (#27921) at dotnet/corefx","RelatedBody":"Fixes #27847"},{"Id":"7360806456","Type":"IssuesEvent","CreatedAt":"2018-03-10T22:28:08","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27847","RelatedDescription":"Closed issue \"Test failure: System.IO.Tests.PathTests/GetTempFileName\" (#27847) at dotnet/corefx","RelatedBody":"Opened on behalf of @Sunny-pu\n\nThe test `System.IO.Tests.PathTests/GetTempFileName` has failed.\n\nSystem.IO.FileNotFoundException : Unable to find the specified file.\n\n        Stack Trace:\n\n           at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 23\n       at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter) in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/Interop/Unix/Interop.IOErrors.cs:line 50\n       at System.IO.Path.GetTempFileName() in /Users/buildagent/agent/_work/20/s/src/mscorlib/shared/System/IO/Path.Unix.cs:line 99\n       at System.IO.Tests.PathTests.GetTempFileName() in /Users/buildagent/agent/_work/391/s/corefx/src/System.Runtime.Extensions/tests/System/IO/PathTests.cs:line 174\nBuild : Master - 20180308.02 (Core Tests)\nFailing configurations:\n- OSX.1013.Amd64-x64\n  - Release\nDetails:\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180308.02/workItem/System.Runtime.Extensions.Tests/analysis/xunit/System.IO.Tests.PathTests~2FGetTempFileName"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7361273493","Type":"IssuesEvent","CreatedAt":"2018-03-11T05:01:02","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25401","RelatedDescription":"Opened issue \"VB: IDE0032 \"Use auto property\" should consider accessibility of setters/getters.\" (#25401) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nPaste the following code into a VB project:\r\n\r\n```vb\r\nPublic Class Test\r\n  Private mCreatedBy As String\r\n  Private mCreatedOn As Date\r\n\r\n  Public Property CreatedBy As String\r\n    Get\r\n      Return Me.mCreatedBy\r\n    End Get\r\n    Protected Set(ArgValue As String)\r\n      Me.mCreatedBy = ArgValue\r\n    End Set\r\n  End Property\r\n\r\n  Public Property CreatedOn As Date\r\n    Get\r\n      Return Me.mCreatedOn\r\n    End Get\r\n    Protected Set(ArgValue As Date)\r\n      Me.mCreatedOn = ArgValue\r\n    End Set\r\n  End Property\r\nEnd Class\r\n```\r\nThe private fields `mCreatedBy` and `mCreatedOn` fade out and when you hover over them, the IDE suggests using an auto property:\r\n\r\n![vs_use_auto_property_fix](https://user-images.githubusercontent.com/20465797/37249873-d8d2ed3e-2500-11e8-9cae-78bbc75133be.png)\r\n\r\nIf you go ahead and do the fix, it produces this code:\r\n\r\n```vb\r\nPublic Class Test\r\n  Public Property CreatedBy As String\r\n\r\n  Public Property CreatedOn As Date\r\nEnd Class\r\n```\r\n\r\nHowever, **the above code is not equivalent to the initial code** which had the setter using `Protected` accessibility. Even the [docs](https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/auto-implemented-properties) say you can't use auto properties if you want different accessibility levels for the getter/setter.\r\n\r\n**Expected Behavior**:\r\n\r\nThe \"use auto property\" suggestion should only be offered when the original code uses getters/setters with the same accessibility level.\r\n\r\nPS: I've looked really hard around the IDE and there is no obvious way to disable these auto-fixes in cases where they are either broken or disagree with one's coding style. Is there a way to do it?"},{"Id":"7360695665","Type":"IssuesEvent","CreatedAt":"2018-03-10T21:13:32","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25400","RelatedDescription":"Opened issue \"Test plan for \"recursive patterns\"\" (#25400) at dotnet/roslyn","RelatedBody":"This is a place to collect notes and ideas for validating the recursive patterns feature.\r\n\r\n- [ ] EnC"},{"Id":"7360513260","Type":"IssuesEvent","CreatedAt":"2018-03-10T19:18:27","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25318","RelatedDescription":"Closed issue \"Allow `s == default` when s has `operator==(S, int)`\" (#25318) at dotnet/roslyn","RelatedBody":"In PR https://github.com/dotnet/roslyn/pull/24913, I fixed the case where `s` doesn't have an operator== and I also verified the case where s has `operator==(S, S)`.\r\nBut while working on tuple equality, I thought of this scenario and it doesn't seem to work.\r\n\r\nStarted working on this (branch `default-bug`)."},{"Id":"7360510691","Type":"PullRequestEvent","CreatedAt":"2018-03-10T19:16:49","Actor":"DustinCampbell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25376","RelatedDescription":"Merged pull request \"Add Project.OutputRefFilePath and ProjectInfo.OutputRefFilePath\" (#25376) at dotnet/roslyn","RelatedBody":"This change adds an OutputRefFilePath path to the workspace API in support the compiler's /refout feature. Keeping track of this path in the workspace is necessary for resolving a command line's metadata references to project references.\r\n"},{"Id":"7360374298","Type":"IssuesEvent","CreatedAt":"2018-03-10T17:54:28","Actor":"alrz","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25399","RelatedDescription":"Opened issue \"partial methods shouldn't be allowed to have different ref-kinds\" (#25399) at dotnet/roslyn","RelatedBody":"**Version Used**: master\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\npartial class C {\r\n    partial void M(in int i);\r\n    partial void M(ref int i) {}  \r\n}\r\n```\r\n**Expected Behavior**: Error: ref-kind doesn't match\r\n\r\n**Actual Behavior**: No error\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7359237870","Type":"PullRequestEvent","CreatedAt":"2018-03-10T03:43:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7359083309","Type":"PullRequestEvent","CreatedAt":"2018-03-10T01:54:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5527","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5527) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7358862091","Type":"PullRequestEvent","CreatedAt":"2018-03-10T00:08:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358838837","Type":"PullRequestEvent","CreatedAt":"2018-03-09T23:59:24","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5526","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5526) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358332918","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:31:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5525","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5525) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7358228740","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:06:41","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5525","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5525) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7356755491","Type":"IssuesEvent","CreatedAt":"2018-03-09T15:51:59","Actor":"bderuijsscher","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5524","RelatedDescription":"Opened issue \"[UWP] .net native compiled project won't run (Entry Point Not Found error)\" (#5524) at dotnet/corert","RelatedBody":"When targetting .net standard 2.0 for a windows uwp application (Windows IoT core, ARM targetting Windows 10 build 16299). The project compiles normally however when run on a target devices generates the error \"Entry Point Not Found\".\r\n\r\nPlease refer to the discussion on the MSDN forum [here](https://social.msdn.microsoft.com/Forums/en-US/e202edb0-dcb5-405e-bee7-5ddf4faca77b/uwp-cannot-build-app-with-net-native-enabled-in-release-mode?forum=wpdevelop)\r\n\r\nWhen the same project is compiled in debug modus (and thus without .net native toolchain), the application runs normally on the target device.\r\n\r\nIt is difficult to determine in more detail what the exact cause is of this error."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7358848460","Type":"IssuesEvent","CreatedAt":"2018-03-10T00:02:59","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2035","RelatedDescription":"Opened issue \"S.R.TypeExtensions not deployed for net461 application\" (#2035) at dotnet/sdk","RelatedBody":"Have a situation where System.Reflection.TypeExtensions is not being deployed. Here is the project setup that we have:\r\n\r\n- CSharpCompilerTestUtilites: targets netstandard1.3 and uses System.Reflection.TypeExtensions\r\n- CSharpCompilerEmitTests: targets net461 + netcoreapp2.0, references CSharpCompilerTestUtilities\r\n\r\nThe net461 output of CSharpCompilerEmitTests does not contain System.Reflection.TypeExtensions. That is necessary to run and hence some of our unit tests fail. \r\n\r\nTo repro:\r\n\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Switch to branch repro/deploy-type-extensions\r\n- `powershell build/scripts/build.ps1 -build -restore` \r\n- Check the contents of `Binaries\\Debug\\UnitTests\\CSharpCompilerEmitTests\\net461` \r\n\r\nNote: In our build `DisableImplicitFrameworkReferences` is `false` by default and we have a tendancy to use explicit package references (hold over from the project.json days). It's possible this is contributing here but I'm unable to track this down. \r\n\r\n"},{"Id":"7358645501","Type":"IssuesEvent","CreatedAt":"2018-03-09T22:52:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2034","RelatedDescription":"Opened issue \"Move import of bundled versions earlier\" (#2034) at dotnet/sdk","RelatedBody":"Currently they're imported here: \r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L18\r\n\r\nBut that would be after common props, and importantly after package reference props and Directory.Build.props. \r\n\r\nWe should move it here for the same reason as noted for UsingMicrosoftNETSdk:\r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.props#L17-L26\r\n\r\nThe reason is that we now have the NETCoreSdkVersion set in these props and we want that to be consumable everywhere like UsingMicrosoftNETSdk.\r\n"},{"Id":"7358441976","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:57:43","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2031","RelatedDescription":"Closed pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#2031) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358437808","Type":"PullRequestEvent","CreatedAt":"2018-03-09T21:56:42","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2030","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#2030) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7358142047","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:45:55","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2033","RelatedDescription":"Opened issue \"How to disable \"preview version\" warning message?\" (#2033) at dotnet/sdk","RelatedBody":"Currently, the SDK issues this high importance message when I build\r\n\r\n> You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. \r\n\r\nI already have a global.json version and I explicitly set it a preview version, so the warning seems unnecessary. How can I disable this message altogether?"},{"Id":"7358131756","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:43:21","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2032","RelatedDescription":"Closed issue \"Build issues hundreds of spam messages about \"You are working with a preview version of the .NET Core SDK.\"\" (#2032) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\nclone https://github.com/aspnet/Mvc\r\nInstall latest CLI (2.1.300-preview2-008322)\r\ndotnet build Mvc.sln\r\n\r\n**Result**\r\n\r\n🤢 \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/37227919-a72d42a2-2393-11e8-8bf0-e83799995ab9.png)\r\n\r\n\r\n@livarcocc @nguerrera "},{"Id":"7358024282","Type":"IssuesEvent","CreatedAt":"2018-03-09T20:17:27","Actor":"natemcmaster","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2032","RelatedDescription":"Opened issue \"Build issues hundreds of spam messages about \"You are working with a preview version of the .NET Core SDK.\"\" (#2032) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\nclone https://github.com/aspnet/Mvc\r\nInstall latest CLI (2.1.300-preview2-008322)\r\n\r\n**Result**\r\n\r\n🤢 \r\n\r\n![image](https://user-images.githubusercontent.com/2696087/37227919-a72d42a2-2393-11e8-8bf0-e83799995ab9.png)\r\n\r\n\r\n@livarcocc @nguerrera "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":37,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2018-03-11T05:30:19.6340232Z","RunDurationInMilliseconds":7704}