{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10132971685","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:59:11","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7334","RelatedDescription":"Closed issue \"[Azure Search] Figure out how to properly boost packages that just match on tag\" (#7334) at NuGet/NuGetGallery","RelatedBody":"Dapper matches \"ORM\" tag but is currently not getting a boost from that so it appears very low in results.\r\n\r\nSome communities have centered around a specific tag, e.g. `tags:\"aws-sdk-v3\"`. These cases should work well too.\r\n\r\nIt may work okay right now with field scoping to tags, but for example \"tags:orm\" is still not perfect."},{"Id":"10132970128","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:58:38","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7403","RelatedDescription":"Opened issue \"[Azure Search] Turn off Catalog2Lucene and old Lucene search after traffic decreases\" (#7403) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132966164","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:57:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7402","RelatedDescription":"Opened issue \"[Azure Search] Move service index to Azure Search for V3 search\" (#7402) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132961338","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:55:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7401","RelatedDescription":"Opened issue \"[Azure Search] Move the service index to Azure Search for autocomplete\" (#7401) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132954138","Type":"PullRequestEvent","CreatedAt":"2019-08-02T00:53:26","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7398","RelatedDescription":"Merged pull request \"Icon related view-model changes. Take 2\" (#7398) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/2599.\r\n\r\nAfter trying to apply [previous](https://github.com/NuGet/NuGetGallery/pull/7364) changes to Icon branch, I realized that it would be better to have an actual class that produces view models. That would allow to pass services it uses as constructor arguments, simplifying actual `Create` (or `Setup`) calls.\r\n\r\nOne day, we can have it in DI (and we'd have to shuffle around the Unit tests as a result), but that would be quite a massive change by itself."},{"Id":"10132948751","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:51:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6447","RelatedDescription":"Closed issue \"[Azure Search] Implement auxiliary2azuresearch to update total download count\" (#6447) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132944688","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:50:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7376","RelatedDescription":"Closed issue \"[Azure search] Enable relevancy tests for deployments\" (#7376) at NuGet/NuGetGallery","RelatedBody":"The relevancy tests need to run against prod env only."},{"Id":"10132856423","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:21:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7400","RelatedDescription":"Opened issue \"[Azure Search] Split traffic for hijack by percentage\" (#7400) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132804158","Type":"IssuesEvent","CreatedAt":"2019-08-02T00:05:20","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7289","RelatedDescription":"Closed issue \"[Azure Search] Remove duplicate Google Analytics events\" (#7289) at NuGet/NuGetGallery","RelatedBody":"Follow-up from https://github.com/NuGet/NuGetGallery/pull/7288.\r\n\r\nWe should first verify that the AI events are roughly similar to GA events."},{"Id":"10132774440","Type":"IssuesEvent","CreatedAt":"2019-08-01T23:57:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6978","RelatedDescription":"Closed issue \"[Azure Search] Bug Bash\" (#6978) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10132773351","Type":"IssuesEvent","CreatedAt":"2019-08-01T23:56:47","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6966","RelatedDescription":"Closed issue \"[Azure Search] Document ops tasks\" (#6966) at NuGet/NuGetGallery","RelatedBody":"Document how to:\r\n\r\n* [x] Rebuild the index\r\n..."},{"Id":"10132731806","Type":"IssuesEvent","CreatedAt":"2019-08-01T23:44:19","Actor":"shishirx34","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7027","RelatedDescription":"Closed issue \"[Azure Search] Define a ranking for the \"empty search query\" that doesn't over-value System.* packages\" (#7027) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10132670160","Type":"IssuesEvent","CreatedAt":"2019-08-01T23:26:55","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8420","RelatedDescription":"Opened issue \"Suggestion:  NuGet config -list command to list configuration file locations\" (#8420) at NuGet/Home","RelatedBody":"Similar to how [`locals -list` command](https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-locals#options) lists local paths, it would be handy if a `config -list` command listed [NuGet configuration file locations](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#config-file-locations-and-uses)."},{"Id":"10132546839","Type":"IssuesEvent","CreatedAt":"2019-08-01T22:54:13","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/Home/issues/7891","RelatedDescription":"Reopened issue \"Test:  NetCoreProjectExecuteInitScriptOnlyOnce test consistently fails\" (#7891) at NuGet/Home","RelatedBody":"```\r\nSystem.Management.Automation.PSInvalidOperationException: The WriteObject and WriteError methods cannot be called from outside the overrides of the BeginProcessing, ProcessRecord, and EndProcessing methods, and they can only be called from within the same thread. Validate that the cmdlet makes these calls correctly, or contact Microsoft Customer Support Services.\r\nat System.Management.Automation.MshCommandRuntime.ThrowIfWriteNotPermitted(Boolean needsToWriteToPipeline)\r\nat System.Management.Automation.MshCommandRuntime.DoWriteError(Object obj)\r\nat System.Security.SecurityContext.Run(SecurityContext securityContext, ContextCallback callback, Object state)\r\nat System.Management.Automation.MshCommandRuntime.WriteError(ErrorRecord errorRecord, Boolean overrideInquire)\r\nat System.Management.Automation.MshCommandRuntime.WriteError(ErrorRecord errorRecord)\r\nat System.Management.Automation.Cmdlet.WriteError(ErrorRecord errorRecord)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.HandleError(ErrorRecord errorRecord, Boolean terminating)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.HandleException(Exception exception, Boolean terminating, String errorId, ErrorCategory category, Object target)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.WriteError(Exception exception)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.WriteError(String message)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.LogCore(MessageLevel level, String formattedMessage)\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.WaitAndLogPackageActions()\r\nat NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.<ProcessRecordCore>b__7_1()\r\nat NuGet.PackageManagement.VisualStudio.NuGetLockService.<>c__DisplayClass9_0`1.<<ExecuteNuGetOperationAsync>b__2>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.<JoinAsync>d__68.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask`1.<JoinAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.PackageManagement.VisualStudio.NuGetLockService.<>c__DisplayClass9_0`1.<<ExecuteNuGetOperationAsync>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.<JoinAsync>d__68.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask`1.<JoinAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.PackageManagement.VisualStudio.NuGetLockService.<ExecuteNuGetOperationAsync>d__9`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.<<ProcessRecordCore>b__7_0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nat Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\r\nat NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.ProcessRecordCore()\r\nat NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.ProcessRecord() \r\n```"},{"Id":"10131832375","Type":"IssuesEvent","CreatedAt":"2019-08-01T20:35:32","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8419","RelatedDescription":"Closed issue \"Build:  \"Xml94\" and \"Microsoft\" SHA-1 Authenticode certificates are retired\" (#8419) at NuGet/Home","RelatedBody":"CI builds are failing."},{"Id":"10131187586","Type":"IssuesEvent","CreatedAt":"2019-08-01T18:52:25","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8419","RelatedDescription":"Opened issue \"Build:  Xml94 certificate is dead\" (#8419) at NuGet/Home","RelatedBody":""},{"Id":"10131111919","Type":"IssuesEvent","CreatedAt":"2019-08-01T18:40:21","Actor":"neville-nazerane","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8389","RelatedDescription":"Closed issue \"csproj equivalent to licence \" (#8389) at NuGet/Home","RelatedBody":"I usually push a nuget by using \r\n\r\n    dotnet pack -c release\r\n\r\nfollowed by:\r\n\r\n    nuget push <package> -source nuget.org\r\n\r\nToday I had to upload manually and it showed me the following warning: \r\n\r\n> All published packages should have license information specified.\r\n\r\nThe documentation says to use <license type=\"file\">license\\license.txt</license> in the .nuspec. I prefer not to have to update the .nuspec everytime and update the csproj file instead. I can't find any documentation pointing to what is to be used in the .csproj in order to generate this license tag. I have tried :\r\n\r\n     <PackageLicense>none</PackageLicense>\r\n      <License>none</License>\r\n\r\nTrying `type=\"file\"` crashes the project. I have also tried adding a License.txt file. "},{"Id":"10130959366","Type":"IssuesEvent","CreatedAt":"2019-08-01T18:16:53","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8418","RelatedDescription":"Opened issue \"Test:  package signing tests sometimes fail with 0xC0000001 (STATUS_UNSUCCESSFUL)\" (#8418) at NuGet/Home","RelatedBody":"According to @bartonjs, this is tracked by https://github.com/dotnet/corefx/issues/37994.\r\n\r\nExample from one CI test run:\r\n```\r\nNuGet.Packaging.Test.CertificateUtilityTests.IsSignatureAlgorithmSupported_WhenSupported_ReturnsTrue(algorithm: SHA384, expectedSignatureAlgorithmOid: \"1.2.840.113549.1.1.12\") [FAIL]\r\n---- System.Security.Cryptography.CryptographicException : Unknown error \"-1073741823\".\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\nStack Trace:\r\n          \r\n    ----- Inner Stack Trace #1 (System.Security.Cryptography.CryptographicException) -----\r\n        at System.Security.Cryptography.NCryptNative.SignHash[T](SafeNCryptKeyHandle key, Byte[] hash, T& paddingInfo, AsymmetricPaddingMode paddingMode, NCryptHashSigner`1 signer)\r\n        at System.Security.Cryptography.NCryptNative.SignHashPkcs1(SafeNCryptKeyHandle key, Byte[] hash, String hashAlgorithm)\r\n        at System.Security.Cryptography.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(309,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, RSA rsa, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(212,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, Int32 publicKeyLength, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs(36,0): at NuGet.Packaging.Test.CertificatesFixture..ctor()\r\n    ----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n          \r\nSystem.AggregateException : One or more errors occurred.\r\n---- System.Security.Cryptography.CryptographicException : Unknown error \"-1073741823\".\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\nStack Trace:\r\n          \r\n    ----- Inner Stack Trace #1 (System.Security.Cryptography.CryptographicException) -----\r\n        at System.Security.Cryptography.NCryptNative.SignHash[T](SafeNCryptKeyHandle key, Byte[] hash, T& paddingInfo, AsymmetricPaddingMode paddingMode, NCryptHashSigner`1 signer)\r\n        at System.Security.Cryptography.NCryptNative.SignHashPkcs1(SafeNCryptKeyHandle key, Byte[] hash, String hashAlgorithm)\r\n        at System.Security.Cryptography.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n        at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n        at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(309,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, RSA rsa, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs(212,0): at Test.Utility.Signing.SigningTestUtility.GenerateCertificate(String subjectName, Action`1 modifyGenerator, HashAlgorithmName hashAlgorithm, RSASignaturePaddingMode paddingMode, Int32 publicKeyLength, ChainCertificateRequest chainCertificateRequest)\r\n    E:\\A\\_work\\118\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs(36,0): at NuGet.Packaging.Test.CertificatesFixture..ctor()\r\n    ----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n```\r\nAnother example:\r\n```\r\nSystem.AggregateException : One or more errors occurred. (Unknown error (0xc0000001)) (The following constructor parameters did not have matching fixture data: CertificatesFixture fixture)\r\n---- Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unknown error (0xc0000001)\r\n---- The following constructor parameters did not have matching fixture data: CertificatesFixture fixture\r\n\r\n----- Inner Stack Trace #1 (Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException) -----\r\n   at Internal.Cryptography.CngCommon.SignHash(SafeNCryptKeyHandle keyHandle, ReadOnlySpan`1 hash, AsymmetricPaddingMode paddingMode, Void* pPaddingInfo, Int32 estimatedSize)\r\n   at System.Security.Cryptography.RSAImplementation.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\r\n   at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm)\r\n   at System.Security.Cryptography.X509Certificates.TbsCertificate.Sign(X509SignatureGenerator signatureGenerator, HashAlgorithmName hashAlgorithm)\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber)\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter)\r\n   at Test.Utility.Signing.SigningTestUtility.GenerateSelfIssuedCertificate(Boolean isCa) in E:\\A\\_work\\23\\s\\test\\TestUtilities\\Test.Utility\\Signing\\SigningTestUtility.cs:line 432\r\n   at NuGet.Packaging.Test.CertificatesFixture..ctor() in E:\\A\\_work\\23\\s\\test\\NuGet.Core.Tests\\NuGet.Packaging.Test\\SigningTests\\CertificatesFixture.cs:line 55\r\n----- Inner Stack Trace #2 (Xunit.Sdk.TestClassException) -----\r\n```"},{"Id":"10130917698","Type":"IssuesEvent","CreatedAt":"2019-08-01T18:10:36","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8417","RelatedDescription":"Opened issue \"Test:  PushCommand_PushToServer_WhenPluginReturnsAbort_ThrowsAndDoesNotFallBackToConsoleProvider is flaky\" (#8417) at NuGet/Home","RelatedBody":"Test `PushCommand_PushToServer_WhenPluginReturnsAbort_ThrowsAndDoesNotFallBackToConsoleProvider` is flaky, at least on Mono on macOS:\r\n```\r\nAssert.Contains() Failure\r\nNot found: 401 (Unauthorized)\r\nIn value: WARNING: No API Key was provided and no API Key could be found for 'http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget'. To save an API Key for a source use the 'setApiKey' command.\r\nPushing testPackage1.1.1.0.nupkg to 'http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget'...\r\n PUT http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget/\r\nAn error was encountered when fetching 'PUT http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget/'. The request will now be retried.\r\nCannot access a disposed object.\r\nObject name: 'System.Net.Sockets.NetworkStream'.\r\n PUT http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget/\r\nAn error was encountered when fetching 'PUT http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget/'. The request will now be retried.\r\nAn error occurred while sending the request\r\n Error getting response stream (Write: Unable to write data to the transport connection: The socket has been shut down.): SendFailure\r\n Unable to write data to the transport connection: The socket has been shut down.\r\n The socket has been shut down\r\n PUT http://localhost:50233/0ca37f7f-3431-472d-b4db-d7568e4d59ac/nuget/\r\n Error getting response stream (Write: Unable to write data to the transport connection: The socket has been shut down.): SendFailure\r\n Unable to write data to the transport connection: The socket has been shut down.\r\n The socket has been shut down\r\n\r\n  at NuGet.CommandLine.Test.NuGetPushCommandTest.PushCommand_PushToServer_WhenPluginReturnsAbort_ThrowsAndDoesNotFallBackToConsoleProvider () [0x00198] in <998d4ca3cda245c69c0afa8be5b6054f>:0 \r\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in <48b95f3df5804531818f80e28ec60191>:0 \r\n```"},{"Id":"10130821817","Type":"IssuesEvent","CreatedAt":"2019-08-01T17:56:08","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7835","RelatedDescription":"Closed issue \"NuGet command client does not remove old executables when updating\" (#7835) at NuGet/Home","RelatedBody":"Whilst updating NuGet.exe (the commandline client) I noticed that it didn't remove the old version.\r\n\r\nWould this be desirable behaviour? To my thinking it makes sense to remove a previous version assuming the new version has been extracted from the package successfully.\r\n\r\nI'm happy to take this on, if it is a wanted change, but would ask what tests would be required, if any."},{"Id":"10130470470","Type":"IssuesEvent","CreatedAt":"2019-08-01T17:01:58","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8416","RelatedDescription":"Opened issue \"Remove net40 support from NuGet.Framework\" (#8416) at NuGet/Home","RelatedBody":"NuGet/NuGet.Client#587 added `net40` as a TFM to `NuGet.Framework`\r\n\r\n> This is to support using NuGet 3.x inside of NuGet 2.x (NuGet.Core.dll), which targets net40-client\r\n\r\nWe no longer support NuGet 2.x, so this can be removed.\r\n\r\nto decide: remove in 5.x, or wait for 6.0"},{"Id":"10130381280","Type":"IssuesEvent","CreatedAt":"2019-08-01T16:48:55","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8415","RelatedDescription":"Opened issue \"NuGetFramework API issues\" (#8415) at NuGet/Home","RelatedBody":"## Short/Long form TFM parsing inconsistencies\r\n\r\nGiven that:\r\n```csharp\r\nNuGetFramework.Parse(\"netstandard2.0\") == NuGetFramework.Parse(\".NETStandard,Version=2.0\")\r\nNuGetFramework.Parse(\"netcoreapp3.0\") == NuGetFramework.Parse(\".NETCoreApp,Version=3.0\")\r\nNuGetFramework.Parse(\"net48\") == NuGetFramework.Parse(\".NETFramework,Version=4.8\")\r\n```\r\n\r\nit seems reasonable to me to expect the following to be true, both of which are currently false\r\n```csharp\r\nNuGetFramework.Parse(\"foo20\") == NuGetFramework.Parse(\"foo,Version=2.0\")\r\nNuGetFramework.Parse(\"foo2.0\") == NuGetFramework.Parse(\"foo,Version=2.0\")\r\n```\r\n\r\n## Long form TFM parsing, malformed version\r\n\r\nWhen parsing a TFM with certain malformed versions, the version is silently ignored with basically no feedback that anything was wrong.\r\n```csharp\r\nNuGetFramework.Parse(\"foo,2.0\").ToString() == \"foo,Version=0.0\"\r\n```\r\n\r\nWhile most strings passed to `NuGetFramework.Parse` return something, having a version that can't be parsed as a `NuGetVersion` throws an exception, which is inconsistent with parsing other malformed TFM strings\r\n\r\n```csharp\r\nNuGetFramework.Parse(\"foo,Veresion=bar\")\r\n```\r\n\r\n## Incorrect behaviour in with `IsUnsupported`\r\n\r\nThe XML doc for `NuGetFramework.IsUnsupported` says:\r\n\r\n> True if this framework was invalid or unknown. This framework is only compatible with Any and Agnostic.\r\n\r\nHowever, `NuGetFramework.Parse(\"foo,Version=1.0\").IsUnsupported` returns false. Given that `foo` does not match any known framework identifier in `FrameworkConstants.FrameworkIdentifiers`, it should return true.\r\n"},{"Id":"10130210883","Type":"IssuesEvent","CreatedAt":"2019-08-01T16:23:57","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8414","RelatedDescription":"Opened issue \"Minimal VS install has broken NuGet UI\" (#8414) at NuGet/Home","RelatedBody":"Withthe VS 16.3 preview, if you install just the shell, no workloads selected, then run VS, the Package Manager Console can be opened, but the host never finishes initializing. Also, if you go to tools->Options, if you select either of the NuGet pages you get an error."},{"Id":"10130118327","Type":"IssuesEvent","CreatedAt":"2019-08-01T16:10:43","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8413","RelatedDescription":"Closed issue \"Test:  Apex tests failing on VS 16.3\" (#8413) at NuGet/Home","RelatedBody":"Apex tests are failing at runtime due to MEF composition failures:\r\n```\r\nSystem.NotSupportedException : Unable to get exported value for 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService', this feature may not be supported for the host. See inner exception for details.\r\n---- System.ComponentModel.Composition.CompositionException : The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) Could not load type 'Microsoft.VisualStudio.ImmersiveProjectServices.IVsImmersiveProjectDeployTest' from assembly 'Microsoft.VisualStudio.TailoredProjectServices, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nResulting in: An exception occurred while calling the 'OnImportsSatisfied' method on type 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\n\r\nResulting in: Cannot activate part 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\nElement: Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> TypeCatalog (Types='Microsoft.Test.Apex.FontsAndColors.FontsAndColorsService, Microsoft.Test.Apex.VisualStudio.PackageService, ...').\r\n\r\nResulting in: Cannot get export 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService (ContractName=\\\"Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService\\\")' from part 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\nElement: Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService (ContractName=\\\"Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService\\\") --> Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> TypeCatalog (Types='Microsoft.Test.Apex.FontsAndColors.FontsAndColorsService, Microsoft.Test.Apex.VisualStudio.PackageService, ...').\r\n\r\nServer stack trace: \r\n   at Microsoft.Test.Apex.VisualStudio.CompositionExtensions.GetValue[T](Lazy`1 lazyImport)\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.SolutionService.get_BuildManager()\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.ProjectTestExtension.Build()\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]& outArgs)\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)\r\n\r\nException rethrown at [0]: \r\n   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)\r\n   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.ProjectTestExtension.Build()\r\n   at NuGet.Tests.Apex.CommonUtility.CreateAndInitProject(ProjectTemplate projectTemplate, SimpleTestPathContext pathContext, SolutionService solutionService, ILogger logger) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Utility\\CommonUtility.cs:line 398\r\n   at NuGet.Tests.Apex.ApexTestContext..ctor(VisualStudioHost visualStudio, ProjectTemplate projectTemplate, ILogger logger, Boolean noAutoRestore) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Apex\\ApexTestContext.cs:line 40\r\n   at NuGet.Tests.Apex.NetCoreProjectTestCase.CreateNetCoreProject_AddProjectReference(ProjectTemplate projectTemplate) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NetCoreProjectTestCase.cs:line 38\r\n----- Inner Stack Trace -----\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.ExportServices.<>c__DisplayClass12_0`1.<CreateStronglyTypedLazyOfT>b__1()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.Test.Apex.VisualStudio.CompositionExtensions.GetValue[T](Lazy`1 lazyImport)\r\n```"},{"Id":"10129183763","Type":"IssuesEvent","CreatedAt":"2019-08-01T14:19:07","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8413","RelatedDescription":"Opened issue \"Test:  Apex tests failing on VS 16.3\" (#8413) at NuGet/Home","RelatedBody":"Apex tests are failing at runtime due to MEF composition failures:\r\n```\r\nSystem.NotSupportedException : Unable to get exported value for 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService', this feature may not be supported for the host. See inner exception for details.\r\n---- System.ComponentModel.Composition.CompositionException : The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) Could not load type 'Microsoft.VisualStudio.ImmersiveProjectServices.IVsImmersiveProjectDeployTest' from assembly 'Microsoft.VisualStudio.TailoredProjectServices, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\nResulting in: An exception occurred while calling the 'OnImportsSatisfied' method on type 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\n\r\nResulting in: Cannot activate part 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\nElement: Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> TypeCatalog (Types='Microsoft.Test.Apex.FontsAndColors.FontsAndColorsService, Microsoft.Test.Apex.VisualStudio.PackageService, ...').\r\n\r\nResulting in: Cannot get export 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService (ContractName=\\\"Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService\\\")' from part 'Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService'.\r\nElement: Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService (ContractName=\\\"Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService\\\") --> Microsoft.Test.Apex.VisualStudio.Solution.BuildManagerService --> TypeCatalog (Types='Microsoft.Test.Apex.FontsAndColors.FontsAndColorsService, Microsoft.Test.Apex.VisualStudio.PackageService, ...').\r\n\r\nServer stack trace: \r\n   at Microsoft.Test.Apex.VisualStudio.CompositionExtensions.GetValue[T](Lazy`1 lazyImport)\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.SolutionService.get_BuildManager()\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.ProjectTestExtension.Build()\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]& outArgs)\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)\r\n\r\nException rethrown at [0]: \r\n   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)\r\n   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)\r\n   at Microsoft.Test.Apex.VisualStudio.Solution.ProjectTestExtension.Build()\r\n   at NuGet.Tests.Apex.CommonUtility.CreateAndInitProject(ProjectTemplate projectTemplate, SimpleTestPathContext pathContext, SolutionService solutionService, ILogger logger) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Utility\\CommonUtility.cs:line 398\r\n   at NuGet.Tests.Apex.ApexTestContext..ctor(VisualStudioHost visualStudio, ProjectTemplate projectTemplate, ILogger logger, Boolean noAutoRestore) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Apex\\ApexTestContext.cs:line 40\r\n   at NuGet.Tests.Apex.NetCoreProjectTestCase.CreateNetCoreProject_AddProjectReference(ProjectTemplate projectTemplate) in E:\\A\\_work\\1\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NetCoreProjectTestCase.cs:line 38\r\n----- Inner Stack Trace -----\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.ExportServices.<>c__DisplayClass12_0`1.<CreateStronglyTypedLazyOfT>b__1()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.Test.Apex.VisualStudio.CompositionExtensions.GetValue[T](Lazy`1 lazyImport)\r\n```"},{"Id":"10128844604","Type":"IssuesEvent","CreatedAt":"2019-08-01T13:38:59","Actor":"menaheme","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8412","RelatedDescription":"Opened issue \"Nuget MSBuild auto-detection picks up msbuild.exe 14 on a machine that has VS 2017 installed\" (#8412) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version (4.9.3.5777):\r\n\r\nVS version (if appropriate): 2017 , 15.9\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win 7 v 6.1.7601\r\n\r\n## Detailed repro steps:\r\n\r\n1. run Nuget Restore <path to sln>  -NoCache -NonInteractive\r\n\r\n### Actual result:\r\n\r\nMSBuild auto-detection finds MSbuild ver 14, that is indeed installed on the machine. but visual studio 2017 came with MSBuild version 15.\r\n\r\n### Expected result:\r\nMSBuild auto-detection to find MSBuild version 15\r\n\r\n### note:\r\nthis does not happen on all dev stations, and build agents. temporary fix - we use the specify msbuild version argument.\r\n\r\n\r\n"},{"Id":"10127423105","Type":"IssuesEvent","CreatedAt":"2019-08-01T10:10:30","Actor":"dp7g09","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8411","RelatedDescription":"Opened issue \"PackageReference wild card resolves to non-existent version\" (#8411) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n`Wild card package reference version resolves to the 'Version' value passed into msbuild instead of the value in NuGet Feed. I am not sure if this is expected behaviour, can someone please direct me towards documentation if this is expected.\r\n`\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\n```\r\nNuGet.exe\r\nMSBuild.exe\r\n```\r\n\r\nNuGet version (x.x.x.xxx): `5.0.2.5988`\r\nMSBuild version: `Microsoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework`\r\n\r\ndotnet.exe --version (if appropriate): NA\r\n\r\nVS version (if appropriate): `VS Professional 2019 v16.1.5`\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): `Win 10 Pro 1803`\r\n\r\nWorked before? If so, with which NuGet version: `Don't know.`\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Unzip TestProj.zip to get TestProj.csproj\r\n\r\n2. Nuget Restore\r\n\r\n`nuget restore .\\TestProj.csproj`\r\n\r\n3. MSBuild the proj\r\n`msbuild .\\TestProj.csproj /P:Version=99.99.99`\r\n\r\n4. Check dependency version on Nuget Package Explorer\r\nSee that the dependency version is set to the value we were setting for our nupkg instead of resolving to the one in the nuget feed.\r\n\r\n![image](https://user-images.githubusercontent.com/22910832/62284647-ea6bf000-b44b-11e9-9f23-ebdac607e3d1.png)\r\n\r\n## Other suggested things\r\n\r\n### Sample Project\r\n[TestProj.zip](https://github.com/NuGet/Home/files/3456105/TestProj.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null},{"Id":"1115380341353537538","CreatedAt":"2019-04-08T22:26:10+00:00","UserScreenname":"nuget","Text":"Alert 🚨: Package publishing to @NuGet.org is taking more time than expected. The team is currently investigating th… https://t.co/EuaZ7gBehM","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":1,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-08-02T05:30:48.0225251Z","RunDurationInMilliseconds":2700}