{"Data":{"Blog":{"FeedItems":[{"Title":"The F# development home on GitHub is now dotnet/fsharp","PublishedOn":"2019-05-20T18:16:50+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"TL;DR We&#8217;ve moved the F# GitHub repository from microsoft/visualfsharp to dotnet/fsharp, as specified in the corresponding RFC.\nF# has a somewhat strange history in its name and brand. If we...","Href":"https://devblogs.microsoft.com/dotnet/the-f-development-home-on-github-is-now-dotnet-fsharp/","RawContent":null},{"Title":"Create Interactive .NET Documentation with Try .NET","PublishedOn":"2019-05-16T20:01:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"When it comes to developers&#8217; documentation, it is essential that we capture their interest and lead them down the path of success as soon as possible. Across multiple languages, developer...","Href":"https://devblogs.microsoft.com/dotnet/creating-interactive-net-documentation/","RawContent":null},{"Title":"Performance Improvements in .NET Core 3.0","PublishedOn":"2019-05-15T19:17:00+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Back when we were getting ready to ship .NET Core 2.0, I wrote a blog post exploring some of the many performance improvements that had gone into it. I enjoyed putting it together so much and received...","Href":"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Default implementations in interfaces","PublishedOn":"2019-05-14T23:47:18+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Default implementations in interfaces\nWith last week&#8217;s posts Announcing .NET Core 3.0 Preview 5 and Visual Studio 2019 version 16.1 Preview 3, the last major feature of C# 8.0 is now available...","Href":"https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/","RawContent":null},{"Title":".NET Core May 2019 Updates – 1.0.16, 1.1.14, 2.1.11 and 2.2.5","PublishedOn":"2019-05-14T19:06:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a Visual...","Href":"https://devblogs.microsoft.com/dotnet/net-core-may-2019/","RawContent":null},{"Title":".NET Framework May 2019 Security and Quality Rollup","PublishedOn":"2019-05-14T18:29:22+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update.\nSecurity\nCVE-2019-0820 – Denial of Service Vulnerability\nA denial of service...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null},{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":104,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9672707695","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:52:38","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24702","RelatedDescription":"Merged pull request \"Fix loading libcoreclrtraceptprovider.so\" (#24702) at dotnet/coreclr","RelatedBody":"This commit [#5bb7eb68](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcoreclr%2Fcommit%2F5bb7eb68035e98e356aba68115e28ed22d3d34aa&data=02%7C01%7Cmikem%40microsoft.com%7Cd2ed3cc0c912442ee56308d6de3f3a93%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636940760475991923&sdata=A%2Ful4WNpa2WacPoHXDLUNvybsX8%2BF6cY4YHMSPw32T8%3D&reserved=0) in coreclr broken loading the tracepointer provider.  The change in [src/dlls/mscoree/coreclr/CMakeLists.txt](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcoreclr%2Fcommit%2F5bb7eb68035e98e356aba68115e28ed22d3d34aa%23diff-32d08c372954bc5f13d3635781753df6R129&data=02%7C01%7Cmikem%40microsoft.com%7Cd2ed3cc0c912442ee56308d6de3f3a93%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636940760476001911&sdata=66y1qlxNFII0WhAtcPlaLMIwx4JUiNbwE8YwpgkJSrQ%3D&reserved=0).  "},{"Id":"9672706689","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:52:19","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22712","RelatedDescription":"Merged pull request \"Fix profiler crash on shutdown\" (#22712) at dotnet/coreclr","RelatedBody":"Fixes issue #22176. Use the profiler evacuation counters to ensure that we\r\ndon't callback into the profiler when it has already been released.\r\nPreviously we only did this as part of the attach/detach feature, but this\r\nis required for correctness during standard shutdown given that managed\r\nthreads are still running concurrently.\r\n\r\nThanks to @iskiselev for a very nice repro as well some accurate analysis\r\nof the runtime that made finding and fixing this much easier!"},{"Id":"9672671476","Type":"IssuesEvent","CreatedAt":"2019-05-22T04:40:56","Actor":"jiangzeng01","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24691","RelatedDescription":"Closed issue \"Crash happen when there is not enough space on the disk for the netperf file\" (#24691) at dotnet/coreclr","RelatedBody":"Test:\r\ncoreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs\r\n\r\nRepro steps:\r\n1. Create a VHD with 10MB fixed size.\r\n2. Change netperf file path in the file \"coreclr\\tests\\src\\tracing\\common\\NetPerfFile.cs\" to point to the VHD\r\n3. Build & run the test.\r\n4. Crash happen with following exception.\r\n\r\nException:\r\n```\r\nBEGIN EXECUTION\r\n \"F:\\TempRepo\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe\r\n        Start: Enable tracing.\r\n        End: Enable tracing.\r\n\r\n        Start: Messaging.\r\n        End: Messaging.\r\n\r\n        Start: Disable tracing.\r\n        End: Disable tracing.\r\n\r\n        Start: Processing events from file.\r\n\r\nUnhandled Exception: System.IO.IOException: There is not enough space on the disk. : 'E:\\becf7070-0f27-4604-8e96-4b79a32ec6bf.netperf.etlx.new'\r\n   at System.IO.FileStream.WriteCore(ReadOnlySpan`1 source)\r\n   at System.IO.FileStream.WriteSpan(ReadOnlySpan`1 source)\r\n   at System.IO.FileStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at FastSerialization.IOStreamStreamWriter.MakeSpace()\r\n   at FastSerialization.MemoryStreamWriter.Write(Int32 value)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.WriteBlob(IntPtr source, IStreamWriter writer, Int32 byteCount)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.<>c__DisplayClass83_0.<CopyRawEvents>b__1(TraceEvent data)\r\n   at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)\r\n   at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.Dispatch(TraceEvent anEvent)\r\n   at Microsoft.Diagnostics.Tracing.EventPipeEventBlock.FromStream(Deserializer deserializer)\r\n   at FastSerialization.Deserializer.ReadObjectDefinition(Tags tag, StreamLabel objectLabel)\r\n   at FastSerialization.Deserializer.ReadObject()\r\n   at Microsoft.Diagnostics.Tracing.EventPipeEventSource.Process()\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CopyRawEvents(TraceEventDispatcher rawEvents, IStreamWriter writer)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.<>c__DisplayClass118_0.<FastSerialization.IFastSerializable.ToStream>b__0()\r\n   at FastSerialization.DeferedRegion.Write(Serializer serializer, Action toStream)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.FastSerialization.IFastSerializable.ToStream(Serializer serializer)\r\n   at FastSerialization.Serializer.WriteObjectData(IFastSerializable obj, Tags beginTag)\r\n   at FastSerialization.Serializer.WriteObjectRef(IFastSerializable obj, Boolean defered)\r\n   at FastSerialization.Serializer..ctor(IStreamWriter writer, IFastSerializable entryObject)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeEventSources(TraceEventDispatcher source, String etlxFilePath, TraceLogOptions options)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeDataFile(String filePath, String etlxFilePath, TraceLogOptions options)\r\n   at Tracing.Tests.EventSourceTrace.Main(String[] args) in F:\\TempRepo\\coreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs:line 85\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\n```"},{"Id":"9672626168","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:27:01","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24610","RelatedDescription":"Merged pull request \"Implement AppDomain.Monitoring*MemorySize\" (#24610) at dotnet/coreclr","RelatedBody":"Tools like Benchmark.NET use this API to get total allocated memory.  Any reason not to make it work by just calling GC.GetTotalAllocatedBytes?\r\n\r\ncc: @jkotas, @Maoni0, @VSadov, @luhenry "},{"Id":"9672594650","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:16:50","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24647","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#24647) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190517.14\r\n- **Date Produced**: 5/18/2019 7:38 AM\r\n- **Commit**: 5fe287f34ad0bf403b75ce17d8c7b19f21c744de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27717-14\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190518.08\r\n- **Date Produced**: 5/19/2019 4:22 AM\r\n- **Commit**: 7c7a2e90741b0efcba4bea89f7fcbcfbc1f61120\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27718-08\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190519.10\r\n- **Date Produced**: 5/20/2019 8:53 AM\r\n- **Commit**: 278cf168efcf3adf053aa07b8773ced47887f416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27719-10\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190520.09\r\n- **Date Produced**: 5/21/2019 5:42 AM\r\n- **Commit**: c3145b06ba5151d5eafcf177a2e380f7acb61189\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27720-09\r\n\r\n"},{"Id":"9672590640","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:15:33","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24688","RelatedDescription":"Merged pull request \"Delete Unsafe redefinitions of Windows APIs\" (#24688) at dotnet/coreclr","RelatedBody":"Leftover from SQL hosting infrastructure"},{"Id":"9672521484","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:53:59","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24709","RelatedDescription":"Opened pull request \"Delete dead strongname-related code\" (#24709) at dotnet/coreclr","RelatedBody":""},{"Id":"9672459327","Type":"IssuesEvent","CreatedAt":"2019-05-22T03:35:15","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24686","RelatedDescription":"Closed issue \"Environment.ProcessorCount returns 1 instead of correct value on Linux\" (#24686) at dotnet/coreclr","RelatedBody":"@JMan7777 reported this in https://github.com/dotnet/core/issues/2714.\r\n\r\n> At first Environment.ProcessorCount returns the correct value, and then later it returns 1.\r\n\r\n@JMan7777 provided a test project to reproduce the issue: https://github.com/dotnet/core/files/3193555/Test.zip. The issue was reported when running on Docker, but it also occurs on plain Linux.\r\n\r\nstracing the application shows `sched_getaffinity` returns a single cpu when calling `Environment.ProcessorCount`. This is happens after some threads have set their affinity to a specific processor.\r\n\r\nIt seems that either `sched_getaffinity(0` is returning the value for the current thread (and not the process), or we are changing the affinity of the process pid (main thread). \r\n\r\nThis probably regressed in https://github.com/dotnet/coreclr/pull/23824 (v3.0.0-preview5-27622-75).\r\n\r\nCC @janvorli @karelz "},{"Id":"9672455351","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:34:03","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24593","RelatedDescription":"Merged pull request \"Update build docker images to enable NUMA  support\" (#24593) at dotnet/coreclr","RelatedBody":"So far, the NUMA support for Linux was disabled due to the fact that the\r\nbuild docker images didn't have libnuma development package installed.\r\nThis change updates the images to ones that have the libnuma added that\r\nwere created recently."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9672825530","Type":"PullRequestEvent","CreatedAt":"2019-05-22T05:27:24","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11392","RelatedDescription":"Merged pull request \"Update stage 0\" (#11392) at dotnet/cli","RelatedBody":"Includes NuGet update which should unblock #11366 "},{"Id":"9672768958","Type":"PullRequestEvent","CreatedAt":"2019-05-22T05:11:05","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11396","RelatedDescription":"Opened pull request \"Delete flaky test\" (#11396) at dotnet/cli","RelatedBody":" This load test like test style is not good for unit test. The error is likely caused by timeout since there are [instance](https://dev.azure.com/dnceng/public/_build/results?buildId=196283&view=ms.vss-test-web.build-test-results-tab&runId=4765564&resultId=100004) that it ran 24 seconds (cap 50 seconds). And it is fault positive. The deadlock has not been seen in product.\r\n\r\n"},{"Id":"9672547774","Type":"IssuesEvent","CreatedAt":"2019-05-22T04:02:04","Actor":"Jepson109","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11395","RelatedDescription":"Opened issue \"Hotkey conflict on the SDK installation wiwith Turkish\" (#11395) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1.Open  the sdk installation file (.NET core sdk 3.0.100-preview6-012031)\r\n2.Tap \"Alt\" key to observe the hotkey on installation wizard\r\n\r\n## Expected  behavior\r\nHotkeys work fine on the installation wizard\r\n\r\n## Actual behavior\r\nHotkey \"k\" is conflicted on the installation wizard\r\n![Untitled](https://user-images.githubusercontent.com/38854445/58146582-5500f280-7c89-11e9-805c-36128951e94e.png)\r\n## Environment data\r\nVS Version: 16.2.0 Preview 2.0 [28920.75.d16.2stg ]\r\n`dotnet --info` output:\r\n.NET Core SDK (varsa global.json'u yansıtır):\r\n Version:   3.0.100-preview6-012031\r\n Commit:    f84d1b7f66\r\n\r\nÇalışma Zamanı Ortamı:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012031\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27720-09\r\n  Commit:  c3145b06ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012031 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19271-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27720-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27720-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9672539051","Type":"IssuesEvent","CreatedAt":"2019-05-22T03:59:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/2754","RelatedDescription":"Closed issue \"Modify RuntimeEnvironment to use System.Runtime.InteropServices.RuntimeInformation \" (#2754) at dotnet/cli","RelatedBody":"The code ported from `Microsoft.Extensions.PlatformAbstractions` contains a bunch of pinvokes for APIs that are available via the RuntimeInformation package. However the package has issues in RC2 where it does not bring in runtime binaries in desktop applications. This is fixed in RTM (https://github.com/dotnet/corefx/issues/7863).\n"},{"Id":"9672531693","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:57:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11394","RelatedDescription":"Merged pull request \"Merge 2.2.3xx into 2.2.4xx\" (#11394) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"9672528684","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:56:15","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11393","RelatedDescription":"Merged pull request \"Merge 2.1.7xx into release 2.1.8xx\" (#11393) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"9671875858","Type":"IssuesEvent","CreatedAt":"2019-05-22T00:50:42","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/11324","RelatedDescription":"Reopened issue \"Flaky test: TestPersistenceChannelConstructorAndDisposeOnDeadlock\" (#11324) at dotnet/cli","RelatedBody":""},{"Id":"9671757619","Type":"PullRequestEvent","CreatedAt":"2019-05-22T00:15:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11394","RelatedDescription":"Opened pull request \"Merge 2.2.3xx into 2.2.4xx\" (#11394) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"9671746752","Type":"PullRequestEvent","CreatedAt":"2019-05-22T00:11:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11393","RelatedDescription":"Opened pull request \"Merge 2.1.7xx into release 2.1.8xx\" (#11393) at dotnet/cli","RelatedBody":"\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9671231423","Type":"PullRequestEvent","CreatedAt":"2019-05-21T22:04:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1198","RelatedDescription":"Merged pull request \"Add missing members to MemoryMarshal\" (#1198) at dotnet/standard","RelatedBody":"This fixes #1193."},{"Id":"9671231409","Type":"IssuesEvent","CreatedAt":"2019-05-21T22:04:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1193","RelatedDescription":"Closed issue \"Fix APICompat issues with netstandard2.0 System.Memory\" (#1193) at dotnet/standard","RelatedBody":"After adding a shim for `System.Memory` to netstandard2.1, we uncovered an incompatibility with netstandard2.0:\r\n\r\nhttps://github.com/dotnet/standard/blob/d3413ee9ec761bdf067114a498b9da3ebf0149df/src/apicompat/baselines/ApiCompatBaseline.netstandard2.0.txt#L72-L74\r\n\r\nIndeed, these members exist in CoreFx's ref, but are missing in Standard:  https://github.com/dotnet/corefx/blob/1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14/src/System.Memory/ref/System.Memory.cs#L471\r\n\r\n@terrajobst we should add these missing members to the surface area for `netstandard2.1`"},{"Id":"9670252671","Type":"PullRequestEvent","CreatedAt":"2019-05-21T19:26:08","Actor":"ViktorHofer","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1203","RelatedDescription":"Merged pull request \"Fix public key of ns2.0 shims\" (#1203) at dotnet/standard","RelatedBody":"System.Buffers, System.Memory, and System.Threading.Tasks.Extensions all use\r\nthe open key.  Ensure we use the same key here."},{"Id":"9669656650","Type":"PullRequestEvent","CreatedAt":"2019-05-21T17:55:19","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1203","RelatedDescription":"Opened pull request \"Fix public key of ns2.0 shims\" (#1203) at dotnet/standard","RelatedBody":"System.Buffers, System.Memory, and System.Threading.Tasks.Extensions all use\r\nthe open key.  Ensure we use the same key here."},{"Id":"9668251674","Type":"PullRequestEvent","CreatedAt":"2019-05-21T14:48:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1202","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1202) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.1\r\n\r\n"},{"Id":"9667374671","Type":"PullRequestEvent","CreatedAt":"2019-05-21T13:07:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1202","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1202) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.1\r\n\r\n"},{"Id":"9662302527","Type":"PullRequestEvent","CreatedAt":"2019-05-20T20:27:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Merged pull request \"Add asymmetric key import/export APIs\" (#1197) at dotnet/standard","RelatedBody":"This fixes #1178."},{"Id":"9662302502","Type":"IssuesEvent","CreatedAt":"2019-05-20T20:27:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Closed issue \"Consider asymmetric key import/export API for NS2.1\" (#1178) at dotnet/standard","RelatedBody":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)"},{"Id":"9662269105","Type":"PullRequestEvent","CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Merged pull request \"Enable C# mode command line diff\" (#1196) at dotnet/standard","RelatedBody":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9672764927","Type":"PullRequestEvent","CreatedAt":"2019-05-22T05:09:55","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37858","RelatedDescription":"Opened pull request \"Use RepoTools instead of global tools\" (#37858) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/arcade/pull/2848\r\n\r\nI added the restoring repo tools (out-of-proc) logic to arcade with an extension point to configure the path of the repo tools manifest. Also I removed the restoring optional tools logic as we don't have TestILC anymore in corefx. If we want that step back we can just look into the git history. There's currently no reason to have it."},{"Id":"9672706604","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:52:18","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37857","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert,coreclr\" (#37857) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9672704266","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:51:32","Actor":"msftbot[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37854","RelatedDescription":"Merged pull request \"Using netcoreapp2.1 version if colorUtil for all new netcoreapp versions\" (#37854) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/36641"},{"Id":"9672704255","Type":"IssuesEvent","CreatedAt":"2019-05-22T04:51:32","Actor":"msftbot[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36641","RelatedDescription":"Closed issue \"Wrong ColorUtil being used on netcoreapp3.0 (and maybe netcoreapp2.1)\" (#36641) at dotnet/corefx","RelatedBody":"It appears that we're using the wrong source for this.  There's a netcoreapp2.0 and netcoreapp2.1 version and only 2.0 is used."},{"Id":"9672694270","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:48:16","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37856","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#37856) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @mikernet"},{"Id":"9672623504","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:26:14","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37518","RelatedDescription":"Merged pull request \"Regression test for multiple attributes on the same type\" (#37518) at dotnet/corefx","RelatedBody":"Contributes to #37261"},{"Id":"9672373657","Type":"IssuesEvent","CreatedAt":"2019-05-22T03:10:48","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37434","RelatedDescription":"Closed issue \"JsonSerializer does not serialize structs\" (#37434) at dotnet/corefx","RelatedBody":"When I try to serialize struct to JSON I get an error.\r\n\r\nStruct:\r\n```c#\r\npublic struct MyStruct\r\n{\r\n    public MyStruct(string name)\r\n    {\r\n        Name = name;\r\n    }\r\n\r\n    public string Name { get; }\r\n}\r\n```\r\n\r\nExecution:\r\n```c#\r\nvar myStruct = new MyStruct(\"Test\")\r\nvar json = JsonSerializer.ToString(myStruct);\r\n```\r\n\r\n**Exception:**\r\nException has been thrown by the target of an invocation.\r\n```\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture)\r\n   at System.Text.Json.Serialization.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.Serialization.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteCore(ArrayBufferWriter`1 output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.WriteCoreString(Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.Serialization.JsonSerializer.ToString[TValue](TValue value, JsonSerializerOptions options)\r\n```\r\n\r\n**Inner exception:**\r\nCannot bind to the target method because its signature is not compatible with that of the delegate type.\r\n```\r\n   at System.Delegate.CreateDelegate(Type type, MethodInfo method, Boolean throwOnBindFailure)\r\n   at System.Text.Json.Serialization.JsonPropertyInfoCommon`3..ctor(Type parentClassType, Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type elementType, JsonSerializerOptions options)\r\n```"},{"Id":"9672347991","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:03:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37856","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#37856) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @mikernet"},{"Id":"9672300368","Type":"IssuesEvent","CreatedAt":"2019-05-22T02:50:28","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37722","RelatedDescription":"Closed issue \"Utf8JsonReader has ambiguous documentation for Get/TryGet methods\" (#37722) at dotnet/corefx","RelatedBody":"As of 3.0-preview5, the current documentation for the Get*/TryGet* helper methods have ambiguous documentation that does not accurately reflect their behavior.\r\n\r\nhttps://github.com/dotnet/corefx/blob/d06ce9d2116cb4bda528822e63d32ce3735ea653/src/System.Text.Json/src/System/Text/Json/Reader/Utf8JsonReader.TryGet.cs#L413-L432\r\n\r\nThe summary states that the method will read the _next_ token and parse it. However, the current implementation parses the current token, not the next one in the document. This ambiguous language exists in the documentation for all Get*/TryGet* methods, and is made more confusing by the `Read()` function's documentation, which also states that it reads the next token in the document.\r\n\r\nGiven the current implementation, it may be helpful to fix the documentation to reflect the true behavior of these methods as well as implement additional methods that do in fact parse the next token instead of the current one. I am porting some Json.NET code and have wrapped all of these methods inside of extension methods to avoid having to call `Read()` before I parse each property value."},{"Id":"9672298085","Type":"PullRequestEvent","CreatedAt":"2019-05-22T02:49:50","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37779","RelatedDescription":"Merged pull request \"Fix ambiguous Utf8JsonReader Get/TryGet method documentation\" (#37779) at dotnet/corefx","RelatedBody":"Fixes issue #37722"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9672584399","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:13:37","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35762","RelatedDescription":null,"RelatedBody":"This PR extracts out the AnalyzerConfigDocument related changes in the Workspaces/VS layer out of https://github.com/dotnet/roslyn/pull/35691. I have cherry-picked the first 4 and last 4 commits from that PR."},{"Id":"9672584229","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:13:34","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35762","RelatedDescription":"Closed pull request \"Extract out the AnalyzerConfigDocument related changes from #35691\" (#35762) at dotnet/roslyn","RelatedBody":"This PR extracts out the AnalyzerConfigDocument related changes in the Workspaces/VS layer out of https://github.com/dotnet/roslyn/pull/35691. I have cherry-picked the first 4 and last 4 commits from that PR."},{"Id":"9672481393","Type":"IssuesEvent","CreatedAt":"2019-05-22T03:41:51","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35872","RelatedDescription":"Opened issue \"Remove obsolete editor-layer 'IIndentationService\" (#35872) at dotnet/roslyn","RelatedBody":"The core interface moves to the workspace layer in https://github.com/dotnet/roslyn/pull/33978.  This issue tracks removing the older obsolete interface once we ensure no 3rd parties (i.e. TS/xaml) are using this."},{"Id":"9672420667","Type":"PullRequestEvent","CreatedAt":"2019-05-22T03:24:09","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35871","RelatedDescription":"Opened pull request \"Provide context information for analyzer exceptions\" (#35871) at dotnet/roslyn","RelatedBody":"🚧 Needs tests\r\n\r\nFixes #30660"},{"Id":"9672094585","Type":"PullRequestEvent","CreatedAt":"2019-05-22T01:54:53","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35762","RelatedDescription":null,"RelatedBody":"This PR extracts out the AnalyzerConfigDocument related changes in the Workspaces/VS layer out of https://github.com/dotnet/roslyn/pull/35691. I have cherry-picked the first 4 and last 4 commits from that PR."},{"Id":"9672094428","Type":"PullRequestEvent","CreatedAt":"2019-05-22T01:54:50","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35762","RelatedDescription":"Closed pull request \"Extract out the AnalyzerConfigDocument related changes from #35691\" (#35762) at dotnet/roslyn","RelatedBody":"This PR extracts out the AnalyzerConfigDocument related changes in the Workspaces/VS layer out of https://github.com/dotnet/roslyn/pull/35691. I have cherry-picked the first 4 and last 4 commits from that PR."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9672623660","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:26:17","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7440","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7440) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9672620170","Type":"PullRequestEvent","CreatedAt":"2019-05-22T04:25:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7439","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7439) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub"},{"Id":"9671368662","Type":"PullRequestEvent","CreatedAt":"2019-05-21T22:34:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Merged pull request \"Port GC changes from coreclr - 9\" (#7434) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n"},{"Id":"9671368335","Type":"PullRequestEvent","CreatedAt":"2019-05-21T22:34:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7439","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7439) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9671364043","Type":"PullRequestEvent","CreatedAt":"2019-05-21T22:33:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7438) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AArnott"},{"Id":"9662829664","Type":"PullRequestEvent","CreatedAt":"2019-05-20T22:00:07","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n"},{"Id":"9662829336","Type":"PullRequestEvent","CreatedAt":"2019-05-20T22:00:01","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 9\" (#7434) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n"},{"Id":"9661603559","Type":"PullRequestEvent","CreatedAt":"2019-05-20T18:29:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7438) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9660864756","Type":"PullRequestEvent","CreatedAt":"2019-05-20T16:27:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7437","RelatedDescription":"Opened pull request \"Initial script changes to enable CPAOT on Linux\" (#7437) at dotnet/corert","RelatedBody":"This is a small set of script changes I made to enable\r\nCPAOT build on Linux. I have basically added the new\r\noption to runtest.sh and fixed a few trivial issues\r\nI hit in my local testing. I haven't yet figured out\r\nhow to cleanly pull down the CoreClrRuntime folder,\r\nfor now I'm copying it over manually from a live CoreCLR\r\nbuild on my DTL VM.\r\n\r\nWith these changes (and after manually copying the Core_Root\r\nfolder from CoreCLR to bin/obj/Linux.x64.Debug/CoreClrRuntme)\r\nI'm able to build the ReadyToRunUnit test. Sadly it doesn't\r\nrun yet, corerun claims that \"coreclr_initialize failed:\r\n0x80070057\"; I have however found out that I'm receiving\r\nexactly the same error when trying to run the same test\r\ncompiled with Crossgen so I guess it's rather a problem\r\nwith my local enlistment and / or build. I'm looking into\r\nthis right now.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9672818753","Type":"PullRequestEvent","CreatedAt":"2019-05-22T05:25:31","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3252","RelatedDescription":"Merged pull request \"Update NuGet\" (#3252) at dotnet/sdk","RelatedBody":"Replacement for #3243, on top of #3250 which should hopefully fix things."},{"Id":"9672740458","Type":"IssuesEvent","CreatedAt":"2019-05-22T05:02:33","Actor":"RayKoopa","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3256","RelatedDescription":"Opened issue \"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)\" (#3256) at dotnet/sdk","RelatedBody":"I'm using 3.0.100-preview5-011568 in VS 16.2.0 Preview 1.0 and the following sample C# console application:\r\n\r\n**project.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableContextOptions>enable</NullableContextOptions>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n**Program.cs**\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            String? x = \"Test\";\r\n            Console.WriteLine(x);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDespite having set `NullableContextOptions` to `enable` in the project file, I receive the warning **CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.** on the `String?` question mark character.\r\n\r\nSimilarly, another project cannot be compiled anymore due to **CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.** when using `T?` for a generic class type method parameter:\r\n```cs\r\npublic void WriteOptional<T>(in T? value) where T : class, IWritable\r\n```\r\n\r\nWhen adding `#nullabe enable` to the top of the file(s) causing the warning, it is gone. It's like the project element lost its functionality after upgrading to VS 16.2.0? I did not change the SDK preview version and could compile the same sources correctly in 16.1.0.\r\n\r\nI'm not sure if https://github.com/dotnet/sdk/issues/3245 is relevant here."},{"Id":"9671946735","Type":"PullRequestEvent","CreatedAt":"2019-05-22T01:12:25","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3255","RelatedDescription":"Opened pull request \"Fix generate package on build pack as tool\" (#3255) at dotnet/sdk","RelatedBody":"NuGet/Home#7801\r\n\r\n(the easiest way to understand that is)since nuget no longer sets NoBuild on GeneratePackageOnBuild, we need to do similar logic to get the previous state.\r\n\r\nfix https://github.com/dotnet/sdk/issues/3253"},{"Id":"9671893231","Type":"IssuesEvent","CreatedAt":"2019-05-22T00:56:10","Actor":"vatsan-madhavan","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3254","RelatedDescription":"Opened issue \"deps.json for ProjectReferences is not emitted correctly\" (#3254) at dotnet/sdk","RelatedBody":"When I create a project with a project reference like this...\r\n\r\n```XML\r\n<ProjectReference Include=\"..\\WindowsBase.csproj\" />\r\n```\r\n\r\n... the `deps.json` file that's generated has an entry like this:\r\n\r\n```json\r\n      \"WindowsBase/1.0.0\": {\r\n        \"runtime\": {\r\n          \"WindowsBase.dll\": {}\r\n        }\r\n      }\r\n```\r\nThe application loads `WindowsBase` from `Microsoft.NetCore.App` instead of loading the one supplied by the referenced project. \r\n\r\n[Repro: XUnitTestProject1.zip](https://github.com/dotnet/sdk/files/3205090/XUnitTestProject1.zip)\r\n\r\n/cc @ericstj \r\n"},{"Id":"9671846457","Type":"IssuesEvent","CreatedAt":"2019-05-22T00:41:38","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2114","RelatedDescription":"Closed issue \"Cannot build project with PackAsTool=true and GeneratePackageOnBuild=true \" (#2114) at dotnet/sdk","RelatedBody":"**Repro**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet build`\r\n\r\n**Expected**\r\nBuild the project *and* produce a nupkg.\r\n\r\n**Actual**\r\n`dotnet build` fails\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008523\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(326,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\dev\\natemcmaster\\tmp\\tmp.csproj]\r\n"},{"Id":"9671844263","Type":"IssuesEvent","CreatedAt":"2019-05-22T00:40:55","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3253","RelatedDescription":"Opened issue \"Project with PackAsTool and GeneratePackageOnBuild set to true fails to build\" (#3253) at dotnet/sdk","RelatedBody":"Tests in `GivenThatWeWantToPackAToolProjectWithGeneratePackageOnBuild` are failing with:\r\n\r\n> C:\\git\\dotnet-sdk\\artifacts\\bin\\Debug\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(337,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\git\\dotnet-sdk\\artifacts\\tmp\\Debug\\It_builds_suc---81F3C59C\\App\\consoledemo.csproj]\r\n\r\nThis regressed with a recent NuGet insertion."},{"Id":"9671832857","Type":"IssuesEvent","CreatedAt":"2019-05-22T00:37:23","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2114","RelatedDescription":"Reopened issue \"Cannot build project with PackAsTool=true and GeneratePackageOnBuild=true \" (#2114) at dotnet/sdk","RelatedBody":"**Repro**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet build`\r\n\r\n**Expected**\r\nBuild the project *and* produce a nupkg.\r\n\r\n**Actual**\r\n`dotnet build` fails\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008523\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(326,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\dev\\natemcmaster\\tmp\\tmp.csproj]\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"446861285","IsPullRequest":true,"CreatedAt":"2019-05-22T04:52:38","Actor":"mikem8361","Number":"24702","RawContent":null,"Title":"Fix loading libcoreclrtraceptprovider.so","State":"closed","Body":"This commit [#5bb7eb68](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcoreclr%2Fcommit%2F5bb7eb68035e98e356aba68115e28ed22d3d34aa&data=02%7C01%7Cmikem%40microsoft.com%7Cd2ed3cc0c912442ee56308d6de3f3a93%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636940760475991923&sdata=A%2Ful4WNpa2WacPoHXDLUNvybsX8%2BF6cY4YHMSPw32T8%3D&reserved=0) in coreclr broken loading the tracepointer provider.  The change in [src/dlls/mscoree/coreclr/CMakeLists.txt](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fcoreclr%2Fcommit%2F5bb7eb68035e98e356aba68115e28ed22d3d34aa%23diff-32d08c372954bc5f13d3635781753df6R129&data=02%7C01%7Cmikem%40microsoft.com%7Cd2ed3cc0c912442ee56308d6de3f3a93%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636940760476001911&sdata=66y1qlxNFII0WhAtcPlaLMIwx4JUiNbwE8YwpgkJSrQ%3D&reserved=0).  ","Url":"https://github.com/dotnet/coreclr/pull/24702","RelatedDescription":"Closed or merged PR \"Fix loading libcoreclrtraceptprovider.so\" (#24702)"},{"Id":"446769131","IsPullRequest":false,"CreatedAt":"2019-05-22T04:40:55","Actor":"jiangzeng01","Number":"24691","RawContent":null,"Title":"Crash happen when there is not enough space on the disk for the netperf file","State":"closed","Body":"Test:\r\ncoreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs\r\n\r\nRepro steps:\r\n1. Create a VHD with 10MB fixed size.\r\n2. Change netperf file path in the file \"coreclr\\tests\\src\\tracing\\common\\NetPerfFile.cs\" to point to the VHD\r\n3. Build & run the test.\r\n4. Crash happen with following exception.\r\n\r\nException:\r\n```\r\nBEGIN EXECUTION\r\n \"F:\\TempRepo\\coreclr\\bin\\tests\\Windows_NT.x64.Debug\\Tests\\Core_Root\\corerun.exe\" eventsourcetrace.exe\r\n        Start: Enable tracing.\r\n        End: Enable tracing.\r\n\r\n        Start: Messaging.\r\n        End: Messaging.\r\n\r\n        Start: Disable tracing.\r\n        End: Disable tracing.\r\n\r\n        Start: Processing events from file.\r\n\r\nUnhandled Exception: System.IO.IOException: There is not enough space on the disk. : 'E:\\becf7070-0f27-4604-8e96-4b79a32ec6bf.netperf.etlx.new'\r\n   at System.IO.FileStream.WriteCore(ReadOnlySpan`1 source)\r\n   at System.IO.FileStream.WriteSpan(ReadOnlySpan`1 source)\r\n   at System.IO.FileStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at FastSerialization.IOStreamStreamWriter.MakeSpace()\r\n   at FastSerialization.MemoryStreamWriter.Write(Int32 value)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.WriteBlob(IntPtr source, IStreamWriter writer, Int32 byteCount)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.<>c__DisplayClass83_0.<CopyRawEvents>b__1(TraceEvent data)\r\n   at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.DoDispatch(TraceEvent anEvent)\r\n   at Microsoft.Diagnostics.Tracing.TraceEventDispatcher.Dispatch(TraceEvent anEvent)\r\n   at Microsoft.Diagnostics.Tracing.EventPipeEventBlock.FromStream(Deserializer deserializer)\r\n   at FastSerialization.Deserializer.ReadObjectDefinition(Tags tag, StreamLabel objectLabel)\r\n   at FastSerialization.Deserializer.ReadObject()\r\n   at Microsoft.Diagnostics.Tracing.EventPipeEventSource.Process()\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CopyRawEvents(TraceEventDispatcher rawEvents, IStreamWriter writer)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.<>c__DisplayClass118_0.<FastSerialization.IFastSerializable.ToStream>b__0()\r\n   at FastSerialization.DeferedRegion.Write(Serializer serializer, Action toStream)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.FastSerialization.IFastSerializable.ToStream(Serializer serializer)\r\n   at FastSerialization.Serializer.WriteObjectData(IFastSerializable obj, Tags beginTag)\r\n   at FastSerialization.Serializer.WriteObjectRef(IFastSerializable obj, Boolean defered)\r\n   at FastSerialization.Serializer..ctor(IStreamWriter writer, IFastSerializable entryObject)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeEventSources(TraceEventDispatcher source, String etlxFilePath, TraceLogOptions options)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeDataFile(String filePath, String etlxFilePath, TraceLogOptions options)\r\n   at Tracing.Tests.EventSourceTrace.Main(String[] args) in F:\\TempRepo\\coreclr\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs:line 85\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24691","RelatedDescription":"Closed issue \"Crash happen when there is not enough space on the disk for the netperf file\" (#24691)"},{"Id":"446712105","IsPullRequest":true,"CreatedAt":"2019-05-22T04:15:33","Actor":"jkotas","Number":"24688","RawContent":null,"Title":"Delete Unsafe redefinitions of Windows APIs","State":"closed","Body":"Leftover from SQL hosting infrastructure","Url":"https://github.com/dotnet/coreclr/pull/24688","RelatedDescription":"Closed or merged PR \"Delete Unsafe redefinitions of Windows APIs\" (#24688)"},{"Id":"446920847","IsPullRequest":true,"CreatedAt":"2019-05-22T03:53:59","Actor":"jkotas","Number":"24709","RawContent":null,"Title":"Delete dead strongname-related code","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24709","RelatedDescription":"Open PR \"Delete dead strongname-related code\" (#24709)"},{"Id":"446691734","IsPullRequest":false,"CreatedAt":"2019-05-22T03:35:14","Actor":"tmds","Number":"24686","RawContent":null,"Title":"Environment.ProcessorCount returns 1 instead of correct value on Linux","State":"closed","Body":"@JMan7777 reported this in https://github.com/dotnet/core/issues/2714.\r\n\r\n> At first Environment.ProcessorCount returns the correct value, and then later it returns 1.\r\n\r\n@JMan7777 provided a test project to reproduce the issue: https://github.com/dotnet/core/files/3193555/Test.zip. The issue was reported when running on Docker, but it also occurs on plain Linux.\r\n\r\nstracing the application shows `sched_getaffinity` returns a single cpu when calling `Environment.ProcessorCount`. This is happens after some threads have set their affinity to a specific processor.\r\n\r\nIt seems that either `sched_getaffinity(0` is returning the value for the current thread (and not the process), or we are changing the affinity of the process pid (main thread). \r\n\r\nThis probably regressed in https://github.com/dotnet/coreclr/pull/23824 (v3.0.0-preview5-27622-75).\r\n\r\nCC @janvorli @karelz ","Url":"https://github.com/dotnet/coreclr/issues/24686","RelatedDescription":"Closed issue \"Environment.ProcessorCount returns 1 instead of correct value on Linux\" (#24686)"},{"Id":"446894949","IsPullRequest":true,"CreatedAt":"2019-05-22T03:33:06","Actor":"janvorli","Number":"24706","RawContent":null,"Title":"Fix GCToOSInterface::SetCurrentThreadIdealAffinity on Unix","State":"closed","Body":"The code was using GCToOSInterface::SetThreadAffinity, which\r\neffectively pinned the current thread to a specific processor. On\r\nWindows, it calls SetThreadIdealProcessor which is basically just a\r\nscheduler hint, but the thread can stil run on other threads.\r\n\r\nSince there is no way to set ideal affinity on Unix, the fix is to do\r\nnothing in the GCToOSInterface::SetCurrentThreadIdealAffinity.","Url":"https://github.com/dotnet/coreclr/pull/24706","RelatedDescription":"Closed or merged PR \"Fix GCToOSInterface::SetCurrentThreadIdealAffinity on Unix\" (#24706)"},{"Id":"446846549","IsPullRequest":true,"CreatedAt":"2019-05-22T03:19:33","Actor":"elinor-fung","Number":"24700","RawContent":null,"Title":"Add Microsoft.DotNet.Build.Tasks.Packaging to Version.Details.xml","State":"closed","Body":"Use the dependency flow/update system for Microsoft.DotNet.Build.Tasks.Packaging\r\n\r\ncc @RussKeldorph","Url":"https://github.com/dotnet/coreclr/pull/24700","RelatedDescription":"Closed or merged PR \"Add Microsoft.DotNet.Build.Tasks.Packaging to Version.Details.xml\" (#24700)"},{"Id":"446900209","IsPullRequest":true,"CreatedAt":"2019-05-22T02:12:32","Actor":"davidwrighton","Number":"24708","RawContent":null,"Title":"[WIP] Fewer ilstubs in corelib from reflection apis","State":"open","Body":"Rework use of marshalling for RuntimeTypeHandle, RuntimeModule, RuntimeAssembly, and IRuntimeMethodInfo as used by QCalls\r\n- Remove special QCall only used marshallers for RuntimeAssembly, RuntimeModule and IRuntimeMethodInfo\r\n- Following the pattern of ObjectHandleOnStack, implement QCall handle types for RuntimeAssembly/Module/TypeHandle. Use these in all QCalls that once passed the types directly.\r\n- For uses of IRuntimeMethodInfo, follow the existing RuntimeMethodHandleInternal pattern\r\n\r\nAlso perform some replacement of bool marshalling with use of Interop.BOOL\r\n- This may trigger build breaks on Linux/Mac, should be easy to fix\r\n\r\nFix delivers a relatively small win on startup, and small throughput gains around reflection as IL stubs are no longer necessary for many functions in reflection that once needed them.\r\n\r\nReduces methods jitted on powershell startup from 422 to 399, (About 5%) but performance win is only about 5ms on ~400ms as the methods removed are simple.","Url":"https://github.com/dotnet/coreclr/pull/24708","RelatedDescription":"Open PR \"[WIP] Fewer ilstubs in corelib from reflection apis\" (#24708)"},{"Id":"446897298","IsPullRequest":true,"CreatedAt":"2019-05-22T01:58:13","Actor":"janvorli","Number":"24707","RawContent":null,"Title":"Fix module override for recursive generic signatures","State":"open","Body":"When crossgen-ing with large version bubble enabled, generic signatures\r\nthat got copied from the source IL were missing module overrides at\r\ndeeper levels of the generic signature.\r\nFor example, in case of X<Y<A,B>,Z>, the override was applied only to Y\r\nand Z, but not to A and B.\r\n\r\nThis change fixes that by inserting module override zapsig at all\r\nlevels.","Url":"https://github.com/dotnet/coreclr/pull/24707","RelatedDescription":"Open PR \"Fix module override for recursive generic signatures\" (#24707)"},{"Id":"446788746","IsPullRequest":true,"CreatedAt":"2019-05-22T01:52:31","Actor":"elinor-fung","Number":"24693","RawContent":null,"Title":"Set ContinuousIntegrationBuild=true for product build in build-job.yml","State":"closed","Body":"cc @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/pull/24693","RelatedDescription":"Closed or merged PR \"Set ContinuousIntegrationBuild=true for product build in build-job.yml\" (#24693)"},{"Id":"446887331","IsPullRequest":true,"CreatedAt":"2019-05-22T01:07:18","Actor":"lpereira","Number":"24704","RawContent":null,"Title":"Misc. changes in PAL_Random(): use getrandom(), fix O_CLOEXEC usage, etc.","State":"open","Body":"There are two big changes here:\r\n\r\n- Random data from /dev/urandom should not be messed around with, especially with a PRNG that has been initialized with little entropy (`time(NULL)`). Only use the userland PRNG if all other methods fail.\r\n- `getrandom(2)`, introduced in Linux 3.17, is used if available. This makes it possible to gather data from the same pool `/dev/urandom` draws from, without requiring that device to exist (e.g. under a tight `chroot()`), and do not require opening a file.","Url":"https://github.com/dotnet/coreclr/pull/24704","RelatedDescription":"Open PR \"Misc. changes in PAL_Random(): use getrandom(), fix O_CLOEXEC usage, etc.\" (#24704)"},{"Id":"446601950","IsPullRequest":true,"CreatedAt":"2019-05-22T00:46:06","Actor":"dotnet-maestro[bot]","Number":"24681","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 11:58 AM\r\n- **Commit**: 6576979664f443fa03773da591e0ed1fc78ed12c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190521.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190521.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24681","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24681)"},{"Id":"446874441","IsPullRequest":true,"CreatedAt":"2019-05-22T00:00:34","Actor":"CarolEidt","Number":"24703","RawContent":null,"Title":"Fix x86 synchronized method","State":"open","Body":"For the JIT32_GCENCODER the this pointer must be either kept in a single register or on the stack.\r\n\r\nFix #24166","Url":"https://github.com/dotnet/coreclr/pull/24703","RelatedDescription":"Open PR \"Fix x86 synchronized method\" (#24703)"},{"Id":"446690549","IsPullRequest":true,"CreatedAt":"2019-05-21T23:24:20","Actor":"jkotas","Number":"24685","RawContent":null,"Title":"Add null check in VoidFreeNativeLibrary","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24685","RelatedDescription":"Closed or merged PR \"Add null check in VoidFreeNativeLibrary\" (#24685)"},{"Id":"446860833","IsPullRequest":false,"CreatedAt":"2019-05-21T22:59:04","Actor":"echesakovMSFT","Number":"24701","RawContent":null,"Title":"[Windows/arm] PMI assertions in System.Memory.dll: idxLastRegDesc > 0","State":"open","Body":"All the assertions in the same location **src\\vm\\arm\\stubs.cpp Line: 1832** https://github.com/dotnet/coreclr/blob/2b4b230cdf44d0c25df004660f18c4290e9deb72/src/vm/arm/stubs.cpp#L1817-L1834\r\n\r\n```\r\nPREPALL type# 32 method# 253 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::Slice\r\n\r\nAssert failure(PID 14092 [0x0000370c], Thread: 3664 [0x0e50]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\n```\r\nPREPALL type# 32 method# 256 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::GetPosition\r\n\r\nAssert failure(PID 13332 [0x00003414], Thread: 2020 [0x07e4]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\n```\r\nPREPALL type# 32 method# 264 System.Buffers.ReadOnlySequence`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]::Seek\r\n\r\nAssert failure(PID 7660 [0x00001dec], Thread: 2312 [0x0908]): idxLastRegDesc > 0\r\n\r\n<no module>! <no symbol> + 0x0 (0x00000000)\r\n    File: D:\\git\\coreclr1\\src\\vm\\arm\\stubs.cpp Line: 1832\r\n    Image: C:\\echesako\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nReproduces on top of eb95382ef607afb7def0656168a6a6507b45f254","Url":"https://github.com/dotnet/coreclr/issues/24701","RelatedDescription":"Open issue \"[Windows/arm] PMI assertions in System.Memory.dll: idxLastRegDesc > 0\" (#24701)"},{"Id":"446711641","IsPullRequest":true,"CreatedAt":"2019-05-21T22:00:54","Actor":"stephentoub","Number":"24687","RawContent":null,"Title":"Reduce overhead of SemaphoreSlim.WaitAsync","State":"closed","Body":"This affects the case where SemaphoreSlim.WaitAsync is invoked, the operation completes asynchronously because there's no count available in the semaphore, and where a timeout and/or a cancellation token is passed to WaitAsync.  In that case, we need to wait for the underlying wait task to complete, for cancellation to be requested, or for the timeout to elapse.\r\n\r\nThere's currently one code path that handles this.  This change improves that slightly by avoiding a defensive array copy.  However, we can do much better when we get a cancelable token but no timeout (a reasonably common situation), in which case we can avoid operations like Task.Delay, can register with the original cancellation token rather than a new one (which means we avoid forcing a new CancellationTokenSource's lazily-allocated partitions into existence), etc.\r\n\r\nBenchmark results:\r\n```\r\n|                    Method | Toolchain |        Mean | Ratio | Allocated |\r\n|-------------------------- |---------- |------------:|------:|----------:|\r\n|           NoConfiguration |       Old |    86.87 ns |  1.00 |      88 B |\r\n|           NoConfiguration |       New |    85.67 ns |  0.99 |      88 B |\r\n|                           |           |             |       |           |\r\n|               WithTimeout |       Old | 2,033.45 ns |  1.00 |     944 B |\r\n|               WithTimeout |       New | 1,982.97 ns |  0.98 |     920 B |\r\n|                           |           |             |       |           |\r\n|              WithNewToken |       Old | 1,961.81 ns |  1.00 |    1152 B |\r\n|              WithNewToken |       New | 1,588.10 ns |  0.81 |     792 B |\r\n|                           |           |             |       |           |\r\n|           WithReusedToken |       Old | 1,995.70 ns |  1.00 |     864 B |\r\n|           WithReusedToken |       New | 1,572.84 ns |  0.79 |     504 B |\r\n|                           |           |             |       |           |\r\n|    WithTimeoutAndNewToken |       Old | 2,143.68 ns |  1.00 |    1248 B |\r\n|    WithTimeoutAndNewToken |       New | 2,108.24 ns |  0.98 |    1224 B |\r\n|                           |           |             |       |           |\r\n| WithTimeoutAndReusedToken |       Old | 2,127.29 ns |  1.00 |     960 B |\r\n| WithTimeoutAndReusedToken |       New | 2,185.27 ns |  1.03 |     936 B |\r\n```\r\n\r\nBenchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Configs;\r\nusing BenchmarkDotNet.Jobs;\r\nusing BenchmarkDotNet.Running;\r\nusing Microsoft.Win32.SafeHandles;\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    public static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private readonly SemaphoreSlim _sem = new SemaphoreSlim(0);\r\n    private readonly CancellationToken _token = new CancellationTokenSource().Token;\r\n\r\n    [Benchmark]\r\n    public void NoConfiguration()\r\n    {\r\n        Task t = _sem.WaitAsync();\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void WithTimeout()\r\n    {\r\n        Task t = _sem.WaitAsync(int.MaxValue);\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void WithNewToken()\r\n    {\r\n        var cts = new CancellationTokenSource();\r\n        Task t = _sem.WaitAsync(cts.Token);\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void WithReusedToken()\r\n    {\r\n        Task t = _sem.WaitAsync(_token);\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void WithTimeoutAndNewToken()\r\n    {\r\n        var cts = new CancellationTokenSource();\r\n        Task t = _sem.WaitAsync(int.MaxValue, cts.Token);\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n\r\n    [Benchmark]\r\n    public void WithTimeoutAndReusedToken()\r\n    {\r\n        Task t = _sem.WaitAsync(int.MaxValue, _token);\r\n        _sem.Release();\r\n        t.GetAwaiter().GetResult();\r\n    }\r\n}\r\n```\r\n\r\ncc: @kouvel, @tarekgh, @sharwell \r\nCloses https://github.com/dotnet/coreclr/issues/24622","Url":"https://github.com/dotnet/coreclr/pull/24687","RelatedDescription":"Closed or merged PR \"Reduce overhead of SemaphoreSlim.WaitAsync\" (#24687)"},{"Id":"446832714","IsPullRequest":true,"CreatedAt":"2019-05-21T21:25:37","Actor":"lpereira","Number":"24699","RawContent":null,"Title":"Cache current thread ID in TLS","State":"open","Body":"While looking at the strace of `corerun` built with logging and debugging information, I was amazed at the number of gettid() calls it was making.  While system calls are cheap, they're still not free; cache this number in the thread local storage area.  Adds a branch, but it's just a comparison with 0, so it's fine in comparison.","Url":"https://github.com/dotnet/coreclr/pull/24699","RelatedDescription":"Open PR \"Cache current thread ID in TLS\" (#24699)"},{"Id":"446803997","IsPullRequest":true,"CreatedAt":"2019-05-21T21:07:24","Actor":"sdmaclea","Number":"24695","RawContent":null,"Title":"Add CreateNativeDelegate flags check","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24695","RelatedDescription":"Closed or merged PR \"Add CreateNativeDelegate flags check\" (#24695)"},{"Id":"446819166","IsPullRequest":true,"CreatedAt":"2019-05-21T20:50:35","Actor":"sywhang","Number":"24698","RawContent":null,"Title":"Add runtime counter for current assemblies loaded","State":"open","Body":"For #20372","Url":"https://github.com/dotnet/coreclr/pull/24698","RelatedDescription":"Open PR \"Add runtime counter for current assemblies loaded\" (#24698)"},{"Id":"446815485","IsPullRequest":true,"CreatedAt":"2019-05-21T20:41:31","Actor":"lpereira","Number":"24697","RawContent":null,"Title":"Bump reference to \"dotnet\" in global.json","State":"open","Body":"While trying to build on Arch Linux, which ships with OpenSSL 1.1.1 by default, `dotnet` was unable to find a suitable libssl version to use. It expects one with the 1.0 API.\r\n\r\nTook me some time with strace to figure out why this wasn't working the way it's supposed to work.\r\n\r\nMake this clearer in the documentation so others don't have to guess.","Url":"https://github.com/dotnet/coreclr/pull/24697","RelatedDescription":"Open PR \"Bump reference to \"dotnet\" in global.json\" (#24697)"},{"Id":"446812444","IsPullRequest":true,"CreatedAt":"2019-05-21T20:33:51","Actor":"lpereira","Number":"24696","RawContent":null,"Title":"Use auxiliary vector to obtain the executable path name","State":"open","Body":"This vector is populated by the kernel while loading an ELF, and is available to user land without requiring any system calls.  This is specially interesting if programs are executed under a chroot where\r\n/proc isn't available (and thus realpath(\"/proc/self/exe\"), the current method of obtaining the full path name for the executable).","Url":"https://github.com/dotnet/coreclr/pull/24696","RelatedDescription":"Open PR \"Use auxiliary vector to obtain the executable path name\" (#24696)"},{"Id":"446676417","IsPullRequest":true,"CreatedAt":"2019-05-21T20:28:50","Actor":"jkotas","Number":"24684","RawContent":null,"Title":"Delete infrastructure files that are no longer used","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24684","RelatedDescription":"Closed or merged PR \"Delete infrastructure files that are no longer used\" (#24684)"},{"Id":"446802710","IsPullRequest":false,"CreatedAt":"2019-05-21T20:10:32","Actor":"noahfalk","Number":"24694","RawContent":null,"Title":"EventSource improvements for text logging","State":"open","Body":"From an email thread with Krzysztof Cwalina and Pavel Krymets we were discussing that EventSource has rough edges when you try to use it for textual logging:\r\n\r\n> This is pretty much all I would have, built-in sinks, built-in simple text source, support for Azure functions (whether it needs multitenancy or not).\r\n\r\n> One other issue I’ve seen is a performance of in-process EventSource listener, there are a lot of allocations per event.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24694","RelatedDescription":"Open issue \"EventSource improvements for text logging\" (#24694)"},{"Id":"446743767","IsPullRequest":true,"CreatedAt":"2019-05-21T20:04:14","Actor":"sdmaclea","Number":"24690","RawContent":null,"Title":"Update CreateNativeDelegate calling convention","State":"closed","Body":"Pass unicode on Windows","Url":"https://github.com/dotnet/coreclr/pull/24690","RelatedDescription":"Closed or merged PR \"Update CreateNativeDelegate calling convention\" (#24690)"},{"Id":"446778427","IsPullRequest":false,"CreatedAt":"2019-05-21T19:08:55","Actor":"dotNETSanta","Number":"24692","RawContent":null,"Title":"Getting rid of \"out\" params in order to use ValueTuple / Nullability","State":"open","Body":"\r\n\r\nhttps://github.com/dotnet/coreclr/blob/9773db1e7b1acb3ec75c9cc0e36bd62dcbacd6d5/src/System.Private.CoreLib/shared/System/Buffers/Text/Utf8Parser/Utf8Parser.Integer.Signed.D.cs#L9-L81\r\n\r\nWhy cannot we repalce all those ``out`` params with **for example** ValueTuples or Nullability?\r\n\r\nCurrent approach:\r\n\r\n\tstring s = (...);\r\n\r\n\tif (int.TryParse(s, out var result)\r\n\t{\r\n\t\t(...)\r\n\t}\r\n\t\r\nMy suggestion:\r\n\r\nA:\r\n\r\n\tvar result = int.TryParse(s);\r\n\tif (result.Success)\r\n\t{\r\n\t\tConsole.WriteLine(result.Value);\r\n\t}\t\r\n\t\r\nB:\t\r\n\t\r\n\tvar result = int.TryParse(s);\r\n\tif (result.HasValue)\r\n\t{\r\n\t\tConsole.WriteLine(result);\r\n\t}\r\n\r\nA:\r\n\r\n\tpublic (bool Success, int Value) TryParse(string s)\r\n\t{\r\n\t\tif (...)\r\n\t\t{\r\n\t\t   return (false, default(int));\r\n\t\t}\r\n\t\t\r\n\t\t(...)\r\n\t\t\r\n\t\treturn (true, result);\r\n\t}\r\n\r\nB:\r\n\r\n\tpublic int? Value TryParse(string s)\r\n\t{\r\n\t\tif (...)\r\n\t\t{\r\n\t\t   return null;\r\n\t\t}\r\n\t\t\r\n\t\t(...)\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\nI think it'd:\r\n\r\nMade old code being more maintainable by updating old code to \"modern standards\"\r\n\r\nWe'd be able to get rid of side effects functions\r\n\r\n\r\nHow it'd affect performance?\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/24692","RelatedDescription":"Open issue \"Getting rid of \"out\" params in order to use ValueTuple / Nullability\" (#24692)"},{"Id":"446619390","IsPullRequest":false,"CreatedAt":"2019-05-21T18:06:33","Actor":"xiangzhai","Number":"24682","RawContent":null,"Title":"[X86/Linux] Could not load type Internal.Runtime.Augments.EnvironmentAugments","State":"closed","Body":"Hi,\r\n\r\nmaster branch 22288107a7acf7a3cf40f72c0464a722c80b7ba9\r\n\r\n`export COMPlus_JitDump=Main` by following https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md\r\n\r\nAdd `<RuntimeIdentifier>` tag:\r\n\r\n```\r\n$ cat HelloWorld.csproj \r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n`dotnet publish -c Debug` is able to work:\r\n\r\n```\r\n$ ./HelloWorld/bin/Debug/netcoreapp2.1/linux-x64/publish/HelloWorld \r\nHello World!\r\n```\r\n\r\nBut Overwrite the CLR dlls with the ones built locally !!!BANG!!!\r\n\r\n```\r\n$ cp -rT bin/Product/Linux.x64.Debug HelloWorld/bin/Debug/netcoreapp2.1/linux-x64/publish\r\n$ ./HelloWorld/bin/Debug/netcoreapp2.1/linux-x64/publish/HelloWorld \r\n\r\nUnhandled Exception: System.TypeLoadException: Could not load type 'Internal.Runtime.Augments.EnvironmentAugments' from assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.\r\n   at System.Environment.GetEnvironmentVariable(String variable)\r\n   at System.Text.EncodingHelper.GetCharset()\r\n   at System.Text.EncodingHelper.GetEncodingFromCharset()\r\n   at System.ConsolePal.GetConsoleEncoding()\r\n   at System.ConsolePal.get_OutputEncoding()\r\n   at System.Console.<>c.<get_OutputEncoding>b__18_0()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Object& syncLock, Func`1 valueFactory)\r\n   at System.Threading.LazyInitializer.EnsureInitialized[T](T& target, Object& syncLock, Func`1 valueFactory)\r\n   at System.Console.EnsureInitialized[T](T& field, Func`1 initializer)\r\n   at System.Console.get_OutputEncoding()\r\n   at System.Console.CreateOutputWriter(Stream outputStream)\r\n   at System.Console.<>c.<get_Out>b__25_0()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Object& syncLock, Func`1 valueFactory)\r\n   at System.Threading.LazyInitializer.EnsureInitialized[T](T& target, Object& syncLock, Func`1 valueFactory)\r\n   at System.Console.EnsureInitialized[T](T& field, Func`1 initializer)\r\n   at System.Console.get_Out()\r\n   at System.Console.WriteLine(String value)\r\n   at HelloWorld.Program.Main(String[] args)\r\nAborted (core dumped)\r\n\r\n\r\nThread 1 \"HelloWorld\" received signal SIGABRT, Aborted.\r\n__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n51\t../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\r\n(gdb) bt\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#1  0x00007ffff6cc2801 in __GI_abort () at abort.c:79\r\n#2  0x00007ffff60598c3 in PROCAbort () at /home/loongson/zhaixiang/coreclr-mips64/src/pal/src/thread/process.cpp:3484\r\n#3  0x00007ffff6059541 in PROCEndProcess (hProcess=0xffffff01, uExitCode=1, bTerminateUnconditionally=1)\r\n    at /home/loongson/zhaixiang/coreclr-mips64/src/pal/src/thread/process.cpp:1480\r\n#4  0x00007ffff6059645 in TerminateProcess (hProcess=0xffffff01, uExitCode=1)\r\n    at /home/loongson/zhaixiang/coreclr-mips64/src/pal/src/thread/process.cpp:1373\r\n#5  0x00007ffff5ad0960 in UnwindManagedExceptionPass1 (ex=..., frameContext=0x7fffffffb050)\r\n    at /home/loongson/zhaixiang/coreclr-mips64/src/vm/exceptionhandling.cpp:4684\r\n#6  0x00007ffff5ad0e38 in DispatchManagedException (ex=..., isHardwareException=false)\r\n    at /home/loongson/zhaixiang/coreclr-mips64/src/vm/exceptionhandling.cpp:4756\r\n#7  0x00007ffff5bef6cf in PreStubWorker (pTransitionBlock=0x7fffffffb848, pMD=0x7fff7dabc470)\r\n    at /home/loongson/zhaixiang/coreclr-mips64/src/vm/prestub.cpp:1660\r\n#8  0x00007ffff5ae9fc0 in ThePreStub () at /home/loongson/zhaixiang/coreclr-mips64/src/vm/amd64/theprestubamd64.S:17\r\n#9  0x00007fff7d699b69 in ?? ()\r\n#10 0x00007fff5400b408 in ?? ()\r\n#11 0x00007fff5400b5c8 in ?? ()\r\n#12 0x9d869c0280ccba00 in ?? ()\r\n#13 0x00007fffffffded0 in ?? ()\r\n#14 0x00007fffffffb900 in ?? ()\r\n#15 0x00007fff7d699171 in ?? ()\r\n#16 0x00007fffffffb8e0 in ?? ()\r\n#17 0x0000000000000000 in ?? ()\r\n```\r\n\r\nBTW [release/2.1](https://github.com/dotnet/coreclr/tree/release/2.1) branch is able to work:\r\n\r\n```\r\n$ cp -rT bin/Product/Linux.x64.Debug HelloWorld/bin/Debug/netcoreapp2.0/linux-x64/publish\r\n\r\n$ ./HelloWorld/bin/Debug/netcoreapp2.0/linux-x64/publish/HelloWorld \r\n...\r\nAllocations for HelloWorld.Program:Main(ref) (MethodHash=f17df074)\r\ncount:        276, size:      27071, max =       2600\r\nallocateMemory:      65536, nraUsed:      41272\r\n\r\nAlloc'd bytes by kind:\r\n                  kind |       size |     pct\r\n  ---------------------+------------+--------\r\n         AssertionProp |          0 |   0.00%\r\n               ASTNode |       4400 |  16.25%\r\n              InstDesc |       2964 |  10.95%\r\n              ImpStack |          0 |   0.00%\r\n            BasicBlock |       1992 |   7.36%\r\n             fgArgInfo |         64 |   0.24%\r\n       fgArgInfoPtrArr |          8 |   0.03%\r\n              FlowList |        160 |   0.59%\r\n     TreeStatementList |          0 |   0.00%\r\n               SiScope |        136 |   0.50%\r\n        FlatFPStateX87 |          0 |   0.00%\r\n       DominatorMemory |          0 |   0.00%\r\n                  LSRA |       3552 |  13.12%\r\n         LSRA_Interval |        320 |   1.18%\r\n      LSRA_RefPosition |       2176 |   8.04%\r\n          Reachability |          0 |   0.00%\r\n                   SSA |          0 |   0.00%\r\n           ValueNumber |          0 |   0.00%\r\n              LvaTable |       2192 |   8.10%\r\n            UnwindInfo |          0 |   0.00%\r\n                hashBv |         80 |   0.30%\r\n                bitset |          0 |   0.00%\r\n          FixedBitVect |          0 |   0.00%\r\n               Generic |        380 |   1.40%\r\n        IndirAssignMap |          0 |   0.00%\r\n         FieldSeqStore |          0 |   0.00%\r\n    ZeroOffsetFieldMap |          0 |   0.00%\r\n          ArrayInfoMap |          0 |   0.00%\r\n          MemoryPhiArg |          0 |   0.00%\r\n                   CSE |          0 |   0.00%\r\n                    GC |       2424 |   8.95%\r\n                CorSig |        104 |   0.38%\r\n              Inlining |          0 |   0.00%\r\n            ArrayStack |          0 |   0.00%\r\n             DebugInfo |        368 |   1.36%\r\n             DebugOnly |       5592 |  20.66%\r\n               Codegen |          0 |   0.00%\r\n               LoopOpt |          0 |   0.00%\r\n             LoopHoist |          0 |   0.00%\r\n               Unknown |        159 |   0.59%\r\n            RangeCheck |          0 |   0.00%\r\n              CopyProp |          0 |   0.00%\r\n\r\n****** DONE compiling HelloWorld.Program:Main(ref)\r\nHello World!\r\n```\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/issues/24682","RelatedDescription":"Closed issue \"[X86/Linux] Could not load type Internal.Runtime.Augments.EnvironmentAugments\" (#24682)"},{"Id":"446713521","IsPullRequest":true,"CreatedAt":"2019-05-21T16:26:52","Actor":"MichalStrehovsky","Number":"24689","RawContent":null,"Title":"Allow generating HW intrinsics in crossgen","State":"open","Body":"We currently don't precompile methods that use hardware intrinsics because we don't know the CPU that the generated code will run on. Jitting these methods slows down startup and accounts for 3% of startup time in PowerShell.\r\n\r\nWith this change, we're going to lift this restriction for CoreLib (the thing that matters for startup) and support generating HW intrinsics for our minimum supported target ISA (SSE/SSE2). This means that code that uses intrinsics higher than this will be compiled with IsSupported = false.\r\n\r\nWe will rely on tiered JITting to eventually replace the pregenerated method body that targets the minimum supported ISA with the most efficient code supported by the processor.","Url":"https://github.com/dotnet/coreclr/pull/24689","RelatedDescription":"Open PR \"Allow generating HW intrinsics in crossgen\" (#24689)"},{"Id":"446640923","IsPullRequest":false,"CreatedAt":"2019-05-21T14:07:40","Actor":"directhex","Number":"24683","RawContent":null,"Title":"[ARM64/Linux] error MSB6006: \"csc.dll\" exited with code 139.","State":"open","Body":"I'm trying to do a Mono `--with-core=only` build, which uses a stock .NET Core to build our System.Private.CoreLib:\r\n\r\n`dotnet build -p:TargetsUnix=true  -v:diag -p:BuildArch=arm64 -p:OutputPath=bin/arm64 -p:RoslynPropsFile=\"../../../netcore/roslyn/packages/microsoft.net.compilers.toolset/3.1.0-beta3-19213-02/build/Microsoft.Net.Compilers.Toolset.props\" System.Private.CoreLib.csproj`\r\n\r\nThis errors out in Roslyn, with no more detail than `/tmp/mono/netcore/roslyn/packages/microsoft.net.compilers.toolset/3.1.0-beta3-19213-02/tasks/netcoreapp2.1/Microsoft.CSharp.Core.targets(58,5): error MSB6006: \"csc.dll\" exited with code 139. [/tmp/mono/mcs/class/System.Private.CoreLib/System.Private.CoreLib.csproj]`\r\n\r\nUsing all the most bleeding edge things - dotnet 3.0.100-preview5-011568, Roslyn 3.1.0-beta3-19213-02, on Ubuntu 16.04 on AMD Opteron A1170 (SoftIron Overdrive 3000)\r\n\r\nExample failure on https://dev.azure.com/dnceng/public/_build/results?buildId=194840\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/coreclr/files/3202924/msbuild.binlog.zip)","Url":"https://github.com/dotnet/coreclr/issues/24683","RelatedDescription":"Open issue \"[ARM64/Linux] error MSB6006: \"csc.dll\" exited with code 139.\" (#24683)"},{"Id":"446598646","IsPullRequest":false,"CreatedAt":"2019-05-21T12:45:41","Actor":"mihail-vladov","Number":"24680","RawContent":null,"Title":"Debugging .Net Core is messed up after instrumenting code with a profiler","State":"open","Body":"Hi, I have a problem with debugging .Net Core. The debugger arrowhead pointer (highlighted line) is not positioned to the correct execution line when debugging .Net Core with profiler enabled. Stepping the code line by line advances the pointer based on the initial offset/messed position. When the arrowhead leaves the method the remaining lines are executed at once.\r\n\r\nSampleProfiler uses Profiling API to inject several dummy lines at the beginning of the methods by handling ICorProfilerCallback::JITCompilationStarted event. The final code looks like the following:\r\n```\r\n0000:  nop\r\n0001:  nop\r\n\r\n0002:  ldc.i4     0 \r\n0004:  brfalse    0008\r\n\r\n0005:  nop\r\n0006:  nop\r\n0007:  nop\r\n0008:  nop\r\n\r\n...\r\n\r\n       <the original code goes here>\r\n\r\n...        \r\n```\r\n\r\nI have prepared a [simple project](https://github.com/mihail-vladov/Debug-NetCore-Problem) demonstrating the issue. The problem is not reproducible in .NET Framework. You could use the same project to verify that as it is multitargeting.\r\n\r\nPlease advise on how this problem can be overcome.\r\n","Url":"https://github.com/dotnet/coreclr/issues/24680","RelatedDescription":"Open issue \"Debugging .Net Core is messed up after instrumenting code with a profiler\" (#24680)"},{"Id":"446892756","IsPullRequest":false,"CreatedAt":"2019-05-20T03:59:15","Actor":"rladuca","Number":"24705","RawContent":null,"Title":"WPF Applications crashing when loading DWrite","State":"open","Body":"* .NET Core Version: 3.0.100-preview6-012012, regression from preview5, exact build that regresses unknown at this time.\r\n* Windows version: N/A\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?:No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n When a WPF application loads DirectWriteForwarder, the module constructor attempts to load DirectWrite and instantiate the appropriate factory for use with font rendering.  In this build, the invocation of the creation function for the factory fails with an invalid cast HResult.\r\n\r\nThe offending function is in Factory,cpp on line 122 (pasted here as this source is not currently available):\r\n```c#\r\n  __declspec(noinline) void Factory::Initialize(\r\n                                                 FactoryType factoryType\r\n                                                 )\r\n    {\r\n        IUnknown* factoryTemp;\r\n        DWRITECREATEFACTORY pfnDWriteCreateFactory = (DWRITECREATEFACTORY)GetDWriteCreateFactoryFunctionPointer();\r\n\r\n        HRESULT hr = (*pfnDWriteCreateFactory)(\r\n            DWriteTypeConverter::Convert(factoryType),\r\n            (REFIID)(*(_guidForIDWriteFactory->Value)),\r\n            &factoryTemp\r\n            );\r\n        \r\n        ConvertHresultToException(hr, \"Factory::Initialize\");\r\n\r\n        _pFactory = (IDWriteFactory*)factoryTemp;\r\n    }\r\n```\r\n **Actual behavior:** Invalid cast exception.\r\n \r\n **Expected behavior:** DirectWrite is initialized.\r\n \r\n **Minimal repro:** https://github.com/rladuca/DWriteIssue\r\n\r\n@dotnet/wpf-developers \r\n \r\n","Url":"https://github.com/dotnet/coreclr/issues/24705","RelatedDescription":"Open issue \"WPF Applications crashing when loading DWrite\" (#24705)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"446782608","IsPullRequest":true,"CreatedAt":"2019-05-22T05:27:23","Actor":"dsplaisted","Number":"11392","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Includes NuGet update which should unblock #11366 ","Url":"https://github.com/dotnet/cli/pull/11392","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#11392)"},{"Id":"446935452","IsPullRequest":true,"CreatedAt":"2019-05-22T05:11:05","Actor":"wli3","Number":"11396","RawContent":null,"Title":"Delete flaky test","State":"open","Body":" This load test like test style is not good for unit test. The error is likely caused by timeout since there are [instance](https://dev.azure.com/dnceng/public/_build/results?buildId=196283&view=ms.vss-test-web.build-test-results-tab&runId=4765564&resultId=100004) that it ran 24 seconds (cap 50 seconds). And it is fault positive. The deadlock has not been seen in product.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11396","RelatedDescription":"Open PR \"Delete flaky test\" (#11396)"},{"Id":"446922390","IsPullRequest":false,"CreatedAt":"2019-05-22T04:02:04","Actor":"Jepson109","Number":"11395","RawContent":null,"Title":"Hotkey conflict on the SDK installation wiwith Turkish","State":"open","Body":"## Steps to reproduce\r\n1.Open  the sdk installation file (.NET core sdk 3.0.100-preview6-012031)\r\n2.Tap \"Alt\" key to observe the hotkey on installation wizard\r\n\r\n## Expected  behavior\r\nHotkeys work fine on the installation wizard\r\n\r\n## Actual behavior\r\nHotkey \"k\" is conflicted on the installation wizard\r\n![Untitled](https://user-images.githubusercontent.com/38854445/58146582-5500f280-7c89-11e9-805c-36128951e94e.png)\r\n## Environment data\r\nVS Version: 16.2.0 Preview 2.0 [28920.75.d16.2stg ]\r\n`dotnet --info` output:\r\n.NET Core SDK (varsa global.json'u yansıtır):\r\n Version:   3.0.100-preview6-012031\r\n Commit:    f84d1b7f66\r\n\r\nÇalışma Zamanı Ortamı:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012031\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27720-09\r\n  Commit:  c3145b06ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012031 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19271-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27720-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27720-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11395","RelatedDescription":"Open issue \"Hotkey conflict on the SDK installation wiwith Turkish\" (#11395)"},{"Id":"446877660","IsPullRequest":true,"CreatedAt":"2019-05-22T03:57:15","Actor":"livarcocc","Number":"11394","RawContent":null,"Title":"Merge 2.2.3xx into 2.2.4xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11394","RelatedDescription":"Closed or merged PR \"Merge 2.2.3xx into 2.2.4xx\" (#11394)"},{"Id":"446876975","IsPullRequest":true,"CreatedAt":"2019-05-22T03:56:15","Actor":"livarcocc","Number":"11393","RawContent":null,"Title":"Merge 2.1.7xx into release 2.1.8xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11393","RelatedDescription":"Closed or merged PR \"Merge 2.1.7xx into release 2.1.8xx\" (#11393)"},{"Id":"446311673","IsPullRequest":true,"CreatedAt":"2019-05-21T20:32:13","Actor":"livarcocc","Number":"11382","RawContent":null,"Title":"Update branding to 2.1.701","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11382","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.701\" (#11382)"},{"Id":"445987717","IsPullRequest":false,"CreatedAt":"2019-05-21T19:35:01","Actor":"Jepson109","Number":"11378","RawContent":null,"Title":"\"dotnet build\" failed with error NETSDK1073 for the .NET core 3.0 app with reference to a .NET Standard 2.1 class lib","State":"closed","Body":"## Steps to reproduce\r\n1. Install .NET core sdk 3.0.100-preview6-012012 \r\n2. Create a  .NET core 3.0 app with reference to a .NET Standard **2.1** class lib with below CLI\r\n    dotnet new console -o consoleapp30\r\n    dotnet new classlib -n CSNS21Lib -f **netstandard2.1**\r\n    dotnet add reference ..\\CSNS21Lib\\CSNS21Lib.csproj \r\n3. run \"dotnet build\" to observe the result\r\n\r\n##Note\r\n1. This issue also repro with VS\r\n2. This issue is not repro on the .NET core 3.0 app with reference to a .NET Standard **2.0** class lib\r\n     \r\n\r\n## Expected  behavior\r\nThe project can be built successfully\r\n\r\n## Actual behavior\r\nBuild with error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\r\n![image](https://user-images.githubusercontent.com/38854445/58007716-75ac3980-7b1d-11e9-9308-75e6561ac645.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012012\r\n Commit:    94b54a5ef6\r\n\r\nRuntime Environment:  \r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012012\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27718-08\r\n  Commit:  7c7a2e9074\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012012 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19265-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27718-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27718-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11378","RelatedDescription":"Closed issue \"\"dotnet build\" failed with error NETSDK1073 for the .NET core 3.0 app with reference to a .NET Standard 2.1 class lib\" (#11378)"},{"Id":"446312935","IsPullRequest":true,"CreatedAt":"2019-05-21T19:24:32","Actor":"livarcocc","Number":"11385","RawContent":null,"Title":"Update branding to 2.2.301","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11385","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.301\" (#11385)"},{"Id":"446312584","IsPullRequest":true,"CreatedAt":"2019-05-21T19:24:21","Actor":"livarcocc","Number":"11384","RawContent":null,"Title":"Update branding to 2.2.205","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11384","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.205\" (#11384)"},{"Id":"446579538","IsPullRequest":true,"CreatedAt":"2019-05-21T12:02:11","Actor":"dotnet-bot","Number":"11391","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11391","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11391)"},{"Id":"446579500","IsPullRequest":true,"CreatedAt":"2019-05-21T12:02:06","Actor":"dotnet-bot","Number":"11390","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11390","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11390)"},{"Id":"446579474","IsPullRequest":true,"CreatedAt":"2019-05-21T12:02:03","Actor":"dotnet-bot","Number":"11389","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11389","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11389)"},{"Id":"446579450","IsPullRequest":true,"CreatedAt":"2019-05-21T12:01:59","Actor":"dotnet-bot","Number":"11388","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11388","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11388)"},{"Id":"446445509","IsPullRequest":false,"CreatedAt":"2019-05-21T06:51:51","Actor":"atifaziz","Number":"11387","RawContent":null,"Title":"Multiple global tool versions installed with unexpected behaviours thereafter","State":"open","Body":"## Steps to reproduce\r\n\r\nI honestly don't know how I or `dotnet tool install -g` got me here 😕 but I have two version of [`dotnet-try`](https://www.nuget.org/packages/dotnet-try/) installed:\r\n\r\n```\r\nPS> dotnet tool list -g\r\nPackage Id                             Version           Commands                   \r\n------------------------------------------------------------------------------------\r\namazon.lambda.testtool-2.1             0.9.2             dotnet-lambda-test-tool-2.1\r\namazon.lambda.tools                    3.2.3             dotnet-lambda              \r\nbenchmarkdotnet.tool                   0.11.5            dotnet-benchmark           \r\ncoverlet.console                       1.5.1             coverlet                   \r\ncsharpminifierconsole                  1.0.2             csmin                      \r\ncsharpsyntaxvalidator                  1.1.0             csval                      \r\ndotnet-ignore                          1.0.4             dotnet-ignore              \r\ndotnet-nuget-gc                        0.1.12            dotnet-nuget-gc            \r\ndotnet-outdated                        2.2.0             dotnet-outdated            \r\ndotnet-reportgenerator-globaltool      4.1.5             reportgenerator            \r\ndotnet-script                          0.29.0            dotnet-script              \r\ndotnet-symbol                          1.0.3             dotnet-symbol              \r\ndotnet-t4                              2.0.4             t4                         \r\ndotnet-try                             1.0.19264.11      dotnet-try                 \r\ndotnet-try                             1.0.19266.17      dotnet-try                 \r\ndotnet-warp                            1.0.9             dotnet-warp                \r\ndotnetsay                              2.1.4             dotnetsay                  \r\ndotnetthx                              0.1.2             dotnet-thx                 \r\nelemental.sysinfotool                  0.5.0             sysinfo                    \r\ngit-istage                             0.2.61            git-istage                 \r\ngit-rocket-filter                      1.0.1             git-rocket-filter          \r\ngit-status-cli                         1.0.0             git-status                 \r\nnyancat                                1.1.0             nyancat                    \r\nrecolor                                2.4.0             recolor                    \r\nsourcelink                             3.0.0             sourcelink                 \r\n```\r\n\r\nHowever, when I try to update, I get an error:\r\n\r\n```\r\nPS> dotnet tool update -g dotnet-try\r\nTool 'dotnet-try' has multiple versions installed and cannot be updated.\r\n```\r\n\r\nAnd the same happen when trying to uninstall:\r\n\r\n```\r\nPS> dotnet tool uninstall -g dotnet-try\r\nTool 'dotnet-try' has multiple versions installed and cannot be uninstalled.\r\n```\r\n\r\nWhen I look at the help for `uninstall`, I do not see a way to uninstall a specific version:\r\n\r\n```\r\nUsage: dotnet tool uninstall [options] <PACKAGE_ID>\r\n\r\nArguments:\r\n  <PACKAGE_ID>   The NuGet Package Id of the tool to uninstall.\r\n\r\nOptions:\r\n  -g, --global         Uninstall the tool from the current user's tools directory.\r\n  --tool-path <PATH>   The directory containing the tool to uninstall.\r\n  -h, --help           Show command line help.\r\n```\r\n\r\nInterestingly, I can still run `dotnet-try` and when I do with its `--version` switch, I see that it's running the older version (1.0.19264.11 < 1.0.19266.17):\r\n\r\n    PS> dotnet try --version\r\n    1.0.26411+32b271139a2df7175d00a808cca2b85c59504b70\r\n\r\n## Expected  behavior\r\n\r\nExpected one of the following:\r\n\r\n- latest version of the tool to run\r\n- `install` should have never let me get into this situation in the first place\r\n- `uninstall` should uninstall all versions\r\n- `uninstall` should have a `--version` flag\r\n\r\n## Actual behavior\r\n\r\n- Impossible to update\r\n- Impossible to uninstall\r\n- Older version of tool is run\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.204\r\n Commit:    8757db13ec\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.204\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.14 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/11387","RelatedDescription":"Open issue \"Multiple global tool versions installed with unexpected behaviours thereafter\" (#11387)"},{"Id":"446312019","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:51","Actor":"livarcocc","Number":"11383","RawContent":null,"Title":"Update branding to 2.2.108","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11383","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.108\" (#11383)"},{"Id":"446311115","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:42","Actor":"livarcocc","Number":"11381","RawContent":null,"Title":"Update branding to 2.1.605","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11381","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.605\" (#11381)"},{"Id":"446310541","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:26","Actor":"livarcocc","Number":"11379","RawContent":null,"Title":"Update branding to 2.1.508","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11379","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.508\" (#11379)"},{"Id":"445207601","IsPullRequest":true,"CreatedAt":"2019-05-21T00:56:58","Actor":"dotnet-bot","Number":"11369","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11369","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11369)"},{"Id":"445195589","IsPullRequest":true,"CreatedAt":"2019-05-20T23:41:30","Actor":"peterhuene","Number":"11368","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.3xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11368","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.3xx\" (#11368)"},{"Id":"445193802","IsPullRequest":true,"CreatedAt":"2019-05-20T23:41:19","Actor":"peterhuene","Number":"11367","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.1.7xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11367","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.1.7xx\" (#11367)"},{"Id":"446321270","IsPullRequest":false,"CreatedAt":"2019-05-20T21:35:29","Actor":"wli3","Number":"11386","RawContent":null,"Title":"Local tools vs2019 v16.1 -- There was an error running the selected code generator","State":"open","Body":"From @restrellasosa\r\n\r\n[\r\n![Capture](https://user-images.githubusercontent.com/6253560/57991475-38906a80-7a7d-11e9-9ff6-5bad861fe8b6.JPG)\r\n](url)\r\n\r\nHow i can fix this. I try all! I dont know why and if anybody have knowlegde pls!\r\n\r\n--------------------------\r\n\r\nFrom @tebeco\r\n@restrellasosa \r\nis that related to local tool ? or should it be in another issue ?\r\n\r\n--------------------------\r\nFrom @restrellasosa \r\n\r\nLocal tools vs2019 v16.1\r\n[cid:image002.png@01D50E9E.F9466720]\r\n\r\n[cid:image006.png@01D50E9E.F9466720]\r\n\r\nEnviado desde Correo<https://go.microsoft.com/fwlink/?LinkId=550986> para Windows 10\r\n\r\n----------------------------\r\nFrom @tebeco\r\n\r\nit's visual studio right ?\r\nVisual Studio is your IDE\r\nLocal tool are the name given to a specific tooling ship via nuget to extend `dotnet.exe`\r\n\r\nif your issue is related to Visual Studio and it installation\r\nCan delete your comments here and create an issue in Visual Studio feedback hub ?\r\nfor that just click the \"Feedback\" button in visual studio ? It's in the top right corner next to the \"Live Share\" button","Url":"https://github.com/dotnet/cli/issues/11386","RelatedDescription":"Open issue \"Local tools vs2019 v16.1 -- There was an error running the selected code generator\" (#11386)"},{"Id":"446311091","IsPullRequest":false,"CreatedAt":"2019-05-20T21:08:23","Actor":"nguerrera","Number":"11380","RawContent":null,"Title":"dotnet tool install uses current runtime's dotnet.exe and not current dotnet.exe to restore tool","State":"open","Body":"If multilevel lookup is enabled (current default), the sdk can be running on a runtime from a different directory than the dotnet.exe that launched the sdk command. When tool install shells out to dotnet restore, it picks the dotnet.exe next to the runtime that is being used and not the dotnet.exe that hosted the tool install command. \r\n\r\n## Steps to reproduce\r\n\r\n1. Have some 2.1.x runtime newer than 2.1.0 installed to global c:\\program files\\dotnet\r\n2. Have [SDK 2.1.300](https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300/dotnet-sdk-2.1.300-win-x64.zip) unzipped to c:\\example\r\n3. `set PATH=c:\\example;%PATH%` \r\n4. `set DOTNET_MULTILEVEL_LOOKUP=`\r\n5. `mkdir repro && cd repro`\r\n6. `dotnet new global.json --sdk-version 2.1.300`\r\n7. `dotnet -d tool install -g some-tool`\r\n\r\n\r\n## Expected  behavior\r\n\r\nRestore uses the dotnet.exe from c:\\example and succeeds\r\n\r\n## Actual behavior\r\n\r\nRestore uses the dotnet.exe from Program Files, and then fails to find the 2.1.300 SDK pinned in global.json\r\n```\r\nD:\\repro>dotnet -d tool install -g some-tool\r\nTelemetry is: Enabled\r\nRunning C:\\Program Files\\dotnet\\dotnet.exe restore C:\\Users\\nicholg\\AppData\\Local\\Temp\\a4mqhtjd.cnm\\restore.csproj --runtime any -property:BaseIntermediateOutputPath=C:\\Users\\nicholg\\.dotnet\\tools\\.store\\.stage\\ujrqo0tp.121 -verbosity:quiet\r\nProcess ID: 12388\r\nA compatible installed dotnet SDK for global.json version: [2.1.300] from [D:\\repro\\global.json] was not found\r\nPlease install the [2.1.300] SDK or update [D:\\repro\\global.json] with an installed dotnet SDK:\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nThe tool package could not be restored.\r\nTool 'some-tool' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11380","RelatedDescription":"Open issue \"dotnet tool install uses current runtime's dotnet.exe and not current dotnet.exe to restore tool\" (#11380)"},{"Id":"445323710","IsPullRequest":false,"CreatedAt":"2019-05-20T17:06:21","Actor":"yuki233","Number":"11372","RawContent":null,"Title":"\"dotnet build\" for mvc failed with error  MSB4064","State":"closed","Body":"## Steps to reproduce\r\n1. Install .NET core SDK 3.0.100-preview6-011991\r\n2. Run \"dotnet new mvc -o mymvc\"\r\n3. Run \"dotnet build\" to observe the result\r\n\r\n## Expected  behavior\r\n1. Dotnet build works fine.\r\n\r\n## Actual behavior\r\n1. dotnet build failed with error MSB4064\r\n\r\n/usr/share/dotnet/sdk/3.0.100-preview6-011991/Sdks/Microsoft.NET.Sdk.Razor/build                                  /netstandard2.0/Microsoft.NET.Sdk.Razor.Compilation.targets(156,10): error MSB40                                  64: The \"NullableContextOptions\" parameter is not supported by the \"Csc\" task. V                                  erify the parameter exists on the task, and it is a settable public instance pro                                  perty. [/home/nicole/mymvc/mymvc.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview6-011991/Sdks/Microsoft.NET.Sdk.Razor/build                                  /netstandard2.0/Microsoft.NET.Sdk.Razor.Compilation.targets(120,5): error MSB406                                  3: The \"Csc\" task could not be initialized with its input parameters.  [/home/ni                                  cole/mymvc/mymvc.csproj]\r\n![image](https://user-images.githubusercontent.com/1578239/57913940-3b922c00-78c0-11e9-8bb0-3583cc136408.png)\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011991\r\n Commit:    c4f1cf02c2\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview6-011991/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27716-10\r\n  Commit:  6defcc2f37\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview6-011991 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19265-03 [/usr/share/dotnet/shared/Mic                                  rosoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27716-10 [/usr/share/dotnet/shared/Micros                                  oft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11372","RelatedDescription":"Closed issue \"\"dotnet build\" for mvc failed with error  MSB4064\" (#11372)"},{"Id":"445709506","IsPullRequest":true,"CreatedAt":"2019-05-18T12:46:06","Actor":"dotnet-maestro[bot]","Number":"11377","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190517.5\r\n- **Date Produced**: 5/18/2019 1:20 AM\r\n- **Commit**: efc78834f8816aeea9d26168f887248732fd9fda\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19267.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11377)"},{"Id":"445634274","IsPullRequest":false,"CreatedAt":"2019-05-17T22:04:09","Actor":"ardove","Number":"11376","RawContent":null,"Title":"Global tools should be allowed to update themselves","State":"open","Body":"I previously opened https://github.com/dotnet/cli/issues/11375 but on the wrong account, so reopening here.\r\n\r\nThis is handy for making sure that someone using your tool doesn't need to understand the dotnet cli to update their tools (we can simply provide useful contextual information from our global tool that guides them through the process). Typically, something like a `<toolName> update` is less verbose and easier to remember than `dotnet tool install -g <toolName>`). \r\n\r\n## Steps to reproduce\r\n* Create a global tool which allows for an update command (`dotnet tool install -g <toolName>`)\r\n* Publish version 0.0.0 of the tool\r\n* Implement the update command in such a way that it invokes `dotnet tool update -g <toolName>` to update to the latest version of the tool\r\n* Install version 0.0.0 of the tool\r\n* Publish version 0.0.1 of the tool \r\n* Run the update command (`<toolName> update`)\r\n\r\n## Expected  behavior\r\n* The tool can update itself successfully\r\n* Any future invocations of the tool use the updated version \r\n\r\n## Actual behavior\r\n```\r\nFailed to uninstall tool package '<toolName>': Access to the path '<userPath>\\.dotnet\\tools\\.store\\<toolName>\\0.0.0' is denied\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11376","RelatedDescription":"Open issue \"Global tools should be allowed to update themselves\" (#11376)"},{"Id":"445632581","IsPullRequest":false,"CreatedAt":"2019-05-17T21:57:34","Actor":"adovepf","Number":"11375","RawContent":null,"Title":"Global tool should be able to update itself","State":"closed","Body":"## Steps to reproduce\r\n* Create a global tool which allows for an update command (`dotnet install -g <toolName>`)\r\n* Publish version 0.0.0 of the tool\r\n* Implement the update command in such a way that it invokes `dotnet tool update -g <toolName>` to update to the latest version of the tool\r\n* Install version 0.0.0 of the tool\r\n* Publish version 0.0.1 of the tool \r\n* Run the update command (`<toolName> update`)\r\n\r\n## Expected  behavior\r\n* The tool can update itself successfully\r\n* Any future invocations of the tool use the updated version \r\n\r\n## Actual behavior\r\n```\r\nFailed to uninstall tool package '<toolName>': Access to the path '<userPath>\\.dotnet\\tools\\.store\\<toolName>\\0.0.0' is denied\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11375","RelatedDescription":"Closed issue \"Global tool should be able to update itself\" (#11375)"},{"Id":"445212455","IsPullRequest":true,"CreatedAt":"2019-05-17T21:02:58","Actor":"nguerrera","Number":"11370","RawContent":null,"Title":"Remove stale, unused xlf files","State":"closed","Body":"There were ancient \"neutral\" xlf files with no language, and some left over from a rename of LocalizableStrings to CommonLocalizableStrings.\r\n","Url":"https://github.com/dotnet/cli/pull/11370","RelatedDescription":"Closed or merged PR \"Remove stale, unused xlf files\" (#11370)"},{"Id":"445253878","IsPullRequest":true,"CreatedAt":"2019-05-17T15:48:03","Actor":"wli3","Number":"11371","RawContent":null,"Title":"Increase the time out","State":"closed","Body":"A normal run could take 2000ms, since all tests run in parallel.\r\nIt is very likely to go over the existing limit due to not enough resource\r\n","Url":"https://github.com/dotnet/cli/pull/11371","RelatedDescription":"Closed or merged PR \"Increase the time out\" (#11371)"},{"Id":"445496514","IsPullRequest":true,"CreatedAt":"2019-05-17T15:24:57","Actor":"dsychin","Number":"11374","RawContent":null,"Title":"WIP add no-self-contained option for dotnet publish","State":"open","Body":"This is an attempt to fix #9949\r\n\r\nI am not sure whether the way I have done it is the best way.","Url":"https://github.com/dotnet/cli/pull/11374","RelatedDescription":"Open PR \"WIP add no-self-contained option for dotnet publish\" (#11374)"},{"Id":"445409695","IsPullRequest":true,"CreatedAt":"2019-05-17T13:26:49","Actor":"dotnet-maestro[bot]","Number":"11373","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190516.1\r\n- **Date Produced**: 5/17/2019 1:04 AM\r\n- **Commit**: f8a2a0fa2fd3b5676b7e93e9a16d4fdae540140d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19266.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11373","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11373)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"445645996","IsPullRequest":true,"CreatedAt":"2019-05-21T22:04:59","Actor":"terrajobst","Number":"1198","RawContent":null,"Title":"Add missing members to MemoryMarshal","State":"closed","Body":"This fixes #1193.","Url":"https://github.com/dotnet/standard/pull/1198","RelatedDescription":"Closed or merged PR \"Add missing members to MemoryMarshal\" (#1198)"},{"Id":"444621714","IsPullRequest":false,"CreatedAt":"2019-05-21T22:04:59","Actor":"wtgodbe","Number":"1193","RawContent":null,"Title":"Fix APICompat issues with netstandard2.0 System.Memory","State":"closed","Body":"After adding a shim for `System.Memory` to netstandard2.1, we uncovered an incompatibility with netstandard2.0:\r\n\r\nhttps://github.com/dotnet/standard/blob/d3413ee9ec761bdf067114a498b9da3ebf0149df/src/apicompat/baselines/ApiCompatBaseline.netstandard2.0.txt#L72-L74\r\n\r\nIndeed, these members exist in CoreFx's ref, but are missing in Standard:  https://github.com/dotnet/corefx/blob/1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14/src/System.Memory/ref/System.Memory.cs#L471\r\n\r\n@terrajobst we should add these missing members to the surface area for `netstandard2.1`","Url":"https://github.com/dotnet/standard/issues/1193","RelatedDescription":"Closed issue \"Fix APICompat issues with netstandard2.0 System.Memory\" (#1193)"},{"Id":"446749048","IsPullRequest":true,"CreatedAt":"2019-05-21T19:26:08","Actor":"ericstj","Number":"1203","RawContent":null,"Title":"Fix public key of ns2.0 shims","State":"closed","Body":"System.Buffers, System.Memory, and System.Threading.Tasks.Extensions all use\r\nthe open key.  Ensure we use the same key here.","Url":"https://github.com/dotnet/standard/pull/1203","RelatedDescription":"Closed or merged PR \"Fix public key of ns2.0 shims\" (#1203)"},{"Id":"446608759","IsPullRequest":true,"CreatedAt":"2019-05-21T14:48:22","Actor":"dotnet-maestro[bot]","Number":"1202","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19271.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19271.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1202)"},{"Id":"445640404","IsPullRequest":true,"CreatedAt":"2019-05-20T20:27:35","Actor":"terrajobst","Number":"1197","RawContent":null,"Title":"Add asymmetric key import/export APIs","State":"closed","Body":"This fixes #1178.","Url":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Closed or merged PR \"Add asymmetric key import/export APIs\" (#1197)"},{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-20T20:27:35","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"closed","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Closed issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"445635400","IsPullRequest":true,"CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Number":"1196","RawContent":null,"Title":"Enable C# mode command line diff","State":"closed","Body":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```","Url":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Closed or merged PR \"Enable C# mode command line diff\" (#1196)"},{"Id":"446103850","IsPullRequest":true,"CreatedAt":"2019-05-20T13:38:53","Actor":"dotnet-maestro[bot]","Number":"1201","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1201)"},{"Id":"445816606","IsPullRequest":true,"CreatedAt":"2019-05-19T13:14:40","Actor":"dotnet-maestro[bot]","Number":"1200","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1200)"},{"Id":"445713531","IsPullRequest":true,"CreatedAt":"2019-05-18T13:13:40","Actor":"dotnet-maestro[bot]","Number":"1199","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1199)"},{"Id":"445427447","IsPullRequest":true,"CreatedAt":"2019-05-17T14:02:55","Actor":"dotnet-maestro[bot]","Number":"1195","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190516.12\r\n- **Date Produced**: 5/17/2019 8:31 AM\r\n- **Commit**: 6f9570e012054bf407778c0b07632e7733ecbb13\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19266.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1195)"},{"Id":"444869749","IsPullRequest":false,"CreatedAt":"2019-05-16T10:11:58","Actor":"KexyBiscuit","Number":"1194","RawContent":null,"Title":"Is ValueTask<> missing in latest NetStandard?","State":"open","Body":"```\r\nerror CS0012: The type 'ValueTask<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nMight be related to #1180?\r\n\r\n```\r\n> dotnet --version\r\n3.0.100-preview6-011910\r\n```\r\n\r\n```\r\n<TargetFramework>netstandard2.1</TargetFramework>\r\n<NetStandardImplicitPackageVersion>2.1.0-prerelease.19265.2</NetStandardImplicitPackageVersion>\r\n```","Url":"https://github.com/dotnet/standard/issues/1194","RelatedDescription":"Open issue \"Is ValueTask<> missing in latest NetStandard?\" (#1194)"},{"Id":"442461759","IsPullRequest":true,"CreatedAt":"2019-05-15T21:27:47","Actor":"terrajobst","Number":"1183","RawContent":null,"Title":"Seal types that cannot be inherited","State":"closed","Body":"These changes are related to #1176 and address the same problem.\r\n\r\nFixes #1171.","Url":"https://github.com/dotnet/standard/pull/1183","RelatedDescription":"Closed or merged PR \"Seal types that cannot be inherited\" (#1183)"},{"Id":"441943870","IsPullRequest":true,"CreatedAt":"2019-05-15T19:22:33","Actor":"wtgodbe","Number":"1180","RawContent":null,"Title":"Add shims to netstandard2.1 for types that used to have OOB packages","State":"closed","Body":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs ","Url":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Closed or merged PR \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180)"},{"Id":"444399962","IsPullRequest":true,"CreatedAt":"2019-05-15T12:04:11","Actor":"dotnet-maestro[bot]","Number":"1192","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 1:26 PM\r\n- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1192","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1192)"},{"Id":"442864446","IsPullRequest":true,"CreatedAt":"2019-05-14T17:23:33","Actor":"wtgodbe","Number":"1185","RawContent":null,"Title":"Fail CI build if APICompat baseline files would change","State":"closed","Body":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL","Url":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Closed or merged PR \"Fail CI build if APICompat baseline files would change\" (#1185)"},{"Id":"442475952","IsPullRequest":false,"CreatedAt":"2019-05-14T17:23:33","Actor":"wtgodbe","Number":"1184","RawContent":null,"Title":"Fail CI when APICompat Baseline files change","State":"closed","Body":"Right now, when a change to Standard causes a change to the APICompat baseline(s), the build succeeds, and the baseline files are re-written with the change. In CI, we should fail the build on changes to the APICompat baseline files (rather than silently rewriting them).\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1184","RelatedDescription":"Closed issue \"Fail CI when APICompat Baseline files change\" (#1184)"},{"Id":"443876288","IsPullRequest":true,"CreatedAt":"2019-05-14T12:39:27","Actor":"dotnet-maestro[bot]","Number":"1191","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1191)"},{"Id":"443629557","IsPullRequest":true,"CreatedAt":"2019-05-14T00:00:25","Actor":"JohnTortugo","Number":"1189","RawContent":null,"Title":"Update azure-pipelines.yml","State":"closed","Body":"Related to: https://github.com/dotnet/core-eng/issues/6291","Url":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Closed or merged PR \"Update azure-pipelines.yml\" (#1189)"},{"Id":"443632814","IsPullRequest":false,"CreatedAt":"2019-05-13T22:41:56","Actor":"yangsong2828","Number":"1190","RawContent":null,"Title":"HttpModule with Microsoft.AspNetCore.Http","State":"open","Body":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks.","Url":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Open issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190)"},{"Id":"443361033","IsPullRequest":true,"CreatedAt":"2019-05-13T12:19:21","Actor":"dotnet-maestro[bot]","Number":"1188","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1188)"},{"Id":"443096722","IsPullRequest":true,"CreatedAt":"2019-05-12T12:18:57","Actor":"dotnet-maestro[bot]","Number":"1187","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1187","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1187)"},{"Id":"442986105","IsPullRequest":true,"CreatedAt":"2019-05-11T12:28:56","Actor":"dotnet-maestro[bot]","Number":"1186","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1186","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1186)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-09T21:46:08","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"closed","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Closed or merged PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"442425601","IsPullRequest":true,"CreatedAt":"2019-05-09T21:41:45","Actor":"joperezr","Number":"1182","RawContent":null,"Title":"Fix official build which is failing when trying to publish the packages to BAR","State":"closed","Body":"cc: @wtgodbe \r\n\r\nOfficial builds are failing when trying to publish packages to BAR because the AssetsManifest file isn't being generated any longer. This was caused because of a breaking change in Arcade. These changes will fix this issue.","Url":"https://github.com/dotnet/standard/pull/1182","RelatedDescription":"Closed or merged PR \"Fix official build which is failing when trying to publish the packages to BAR\" (#1182)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-09T20:13:26","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"closed","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Closed or merged PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"442368786","IsPullRequest":true,"CreatedAt":"2019-05-09T19:01:19","Actor":"joperezr","Number":"1181","RawContent":null,"Title":"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions","State":"closed","Body":"cc: @stephentoub @terrajobst \r\n\r\nResponding to changes made by https://github.com/dotnet/corefx/pull/37367 where the extnsion methods where moved to a new type. This is the first time I make a change like this so please do let me know if I missed anything.","Url":"https://github.com/dotnet/standard/pull/1181","RelatedDescription":"Closed or merged PR \"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions\" (#1181)"},{"Id":"441500740","IsPullRequest":false,"CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Number":"1179","RawContent":null,"Title":"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework","State":"open","Body":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Open issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"446935249","IsPullRequest":true,"CreatedAt":"2019-05-22T05:09:54","Actor":"ViktorHofer","Number":"37858","RawContent":null,"Title":"Use RepoTools instead of global tools","State":"open","Body":"Depends on https://github.com/dotnet/arcade/pull/2848\r\n\r\nI added the restoring repo tools (out-of-proc) logic to arcade with an extension point to configure the path of the repo tools manifest. Also I removed the restoring optional tools logic as we don't have TestILC anymore in corefx. If we want that step back we can just look into the git history. There's currently no reason to have it.\r\n\r\nRemoving the global tools logic from sendtohelix.proj as it won't work with repo tools this way. When we actually need this we will probably go a different way (i.e. coverlet integration with dotnet test or restoring repo tools on helix).","Url":"https://github.com/dotnet/corefx/pull/37858","RelatedDescription":"Open PR \"Use RepoTools instead of global tools\" (#37858)"},{"Id":"446931603","IsPullRequest":true,"CreatedAt":"2019-05-22T04:52:18","Actor":"Dotnet-GitSync-Bot","Number":"37857","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/37857","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert,coreclr\" (#37857)"},{"Id":"446863567","IsPullRequest":true,"CreatedAt":"2019-05-22T04:51:31","Actor":"Anipik","Number":"37854","RawContent":null,"Title":"Using netcoreapp2.1 version if colorUtil for all new netcoreapp versions","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/36641","Url":"https://github.com/dotnet/corefx/pull/37854","RelatedDescription":"Closed or merged PR \"Using netcoreapp2.1 version if colorUtil for all new netcoreapp versions\" (#37854)"},{"Id":"446910786","IsPullRequest":true,"CreatedAt":"2019-05-22T04:48:16","Actor":"Dotnet-GitSync-Bot","Number":"37856","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @mikernet","Url":"https://github.com/dotnet/corefx/pull/37856","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37856)"},{"Id":"446879205","IsPullRequest":true,"CreatedAt":"2019-05-22T00:23:04","Actor":"safern","Number":"37855","RawContent":null,"Title":"Add nullable annotations to System.Runtime","State":"open","Body":"We still need to do an API review on them but people can start adding comments here.\r\n\r\ncc: @dotnet/nullablefc @jkotas","Url":"https://github.com/dotnet/corefx/pull/37855","RelatedDescription":"Open PR \"Add nullable annotations to System.Runtime\" (#37855)"},{"Id":"446845347","IsPullRequest":true,"CreatedAt":"2019-05-21T23:23:15","Actor":"Dotnet-GitSync-Bot","Number":"37850","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/37850","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37850)"},{"Id":"446855748","IsPullRequest":true,"CreatedAt":"2019-05-21T22:39:01","Actor":"Anipik","Number":"37853","RawContent":null,"Title":"Using reflection to add handler for user preference events","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/36642\r\n\r\nI tested it locally with changing the contrast of the machine, and the event handler is getting invoked.\r\n\r\nCode snippet to test the change\r\n\r\n``` c#\r\nusing Microsoft.Win32;\r\nusing System;\r\nusing System.Reflection;\r\n\r\nnamespace System.Drawing\r\n{\r\n    static internal class KnownColorTable\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Type systeEventsType = Type.GetType(\"Microsoft.Win32.SystemEvents, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\", throwOnError: false);\r\n            EventInfo upEventInfo = systeEventsType?.GetEvent(\"UserPreferenceChanging\", BindingFlags.Public | BindingFlags.Static);\r\n\r\n            if (upEventInfo != null)\r\n            {\r\n                Type userPrefChangingDelegateType = Type.GetType(\"Microsoft.Win32.UserPreferenceChangingEventHandler, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\", throwOnError: false);\r\n                MethodInfo mi = Type.GetType(\"System.Drawing.KnownColorTable\")?.GetMethod(\"OnUserPreferenceChanging\", BindingFlags.NonPublic | BindingFlags.Static);\r\n                Delegate handler = Delegate.CreateDelegate(userPrefChangingDelegateType, mi);\r\n                upEventInfo.AddEventHandler(null, handler);\r\n            }\r\n            while (true) { }\r\n        }\r\n\r\n        private static void OnUserPreferenceChanging(object sender, EventArgs args)\r\n        {\r\n            PropertyInfo categoryProperty = args.GetType()?.GetProperty(\"Category\", BindingFlags.Instance | BindingFlags.Public);\r\n\r\n            if (categoryProperty == null)\r\n                return;\r\n\r\n            int propertyValue = (int)categoryProperty.GetValue(args);\r\n            if (propertyValue == 2) // UserPreferenceCategory.Color = 2\r\n            {\r\n                Console.WriteLine(\"Its Working\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nI will try to test it with win forms app with my local version of corefx\r\n","Url":"https://github.com/dotnet/corefx/pull/37853","RelatedDescription":"Open PR \"Using reflection to add handler for user preference events\" (#37853)"},{"Id":"446853384","IsPullRequest":true,"CreatedAt":"2019-05-21T22:30:51","Actor":"krwq","Number":"37852","RawContent":null,"Title":"HttpClient: Try decode Location header using UTF-8","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/35103\r\n\r\nSome websites such as i.e. https://www.ilna.ir/fa/tiny/news-724227 (link from repro)\r\nwhen asking for redirect put utf-8 characters in the Location header - currently all browsers and desktop implementation of HttpClient can handle such case.\r\n\r\nThis change is moving the desktop logic which is checking if Location contains any characters higher than 127 and if it does it tries to decode using UTF-8 (if that fails it falls back to the old behavior which is ISO-8859-1)\r\n\r\nDesktop code:\r\nhttps://referencesource.microsoft.com/#System/net/System/Net/WebHeaderCollection.cs,1126\r\n\r\nYou can note that there is only one usage for Location header (every other header uses ISO-8859-1)\r\nhttps://referencesource.microsoft.com/#System/net/System/Net/WebHeaderCollection.cs,175\r\n\r\nI've tested locally with original repro added as test but it felt it was not a good test to add into corefx and I wasn't sure how to easily create such repro environment using our test infrastructure - any clues welcome.","Url":"https://github.com/dotnet/corefx/pull/37852","RelatedDescription":"Open PR \"HttpClient: Try decode Location header using UTF-8\" (#37852)"},{"Id":"446850157","IsPullRequest":true,"CreatedAt":"2019-05-21T22:19:22","Actor":"BruceForstall","Number":"37851","RawContent":null,"Title":"Publish corefx tests for more platforms","State":"open","Body":"Add publishing for Linux/arm64, Linux/arm32, musl/x64, musl/arm64.","Url":"https://github.com/dotnet/corefx/pull/37851","RelatedDescription":"Open PR \"Publish corefx tests for more platforms\" (#37851)"},{"Id":"446818307","IsPullRequest":false,"CreatedAt":"2019-05-21T20:48:22","Actor":"bricelam","Number":"37849","RawContent":null,"Title":"BitArray throws IndexOutOfRangeException when unmet shrink threshold","State":"open","Body":"``` csharp\r\nvar left = new BitArray(64);\r\nvar right = new BitArray(32);\r\n\r\n// NB: Since the shrink threshold (256) isn't met, the underlying int array isn't resized\r\nleft.Length = 32;\r\n\r\n// System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\nleft.Or(right);\r\n```\r\n\r\nThe `Or` operation (and probably others) assume that the length of underlying int arrays of both operands are equal. But this isn't the case when the arrays aren't actually resized when the BitArray length changes.\r\n\r\ncc @ajcvickers @Pilchie","Url":"https://github.com/dotnet/corefx/issues/37849","RelatedDescription":"Open issue \"BitArray throws IndexOutOfRangeException when unmet shrink threshold\" (#37849)"},{"Id":"446812529","IsPullRequest":true,"CreatedAt":"2019-05-21T20:34:04","Actor":"shutdown256","Number":"37848","RawContent":null,"Title":"fix CopyToAsyncCore - cancellation and infinite loop","State":"open","Body":"#37802 \r\nReadResult result = await ReadAsync(cancellationToken).ConfigureAwait(false); should be before the try/finally block because if you cancel the read operation the finally clause will try to advance reader that is not in reading state and instead of OperationCancelledException you will end up with InvalidOperationException.\r\n\r\nThere is a bug either in PipeReader.CopyToAsyncCore() or ReadOnlySequence.TryGet():\r\n\r\nWhen ReadOnlySequence.TryGet() reaches final segment it will return true and this final memory but it will also set position as default(SequencePosition) - I don't know if this is by design but CopyToAsyncCore() method does not take it in consideration and it will copy the memory but not advance the reader - this will cause it to repeat this data indefinitely.","Url":"https://github.com/dotnet/corefx/pull/37848","RelatedDescription":"Open PR \"fix CopyToAsyncCore - cancellation and infinite loop\" (#37848)"},{"Id":"446810155","IsPullRequest":true,"CreatedAt":"2019-05-21T20:28:15","Actor":"dotnet-maestro[bot]","Number":"37847","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 9:16 PM\r\n- **Commit**: 0c3b4e61abd88aef3868674059ef9f76b750bdb3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19270.2\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190520.3\r\n- **Date Produced**: 5/20/2019 9:17 PM\r\n- **Commit**: e5065d83295e4596b6c132140f24bfd8df402b82\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19270.3\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 3:08 PM\r\n- **Commit**: 6ff662cb59b06df85b153a762d6100a8f9c03a85\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19271.1\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190521.2\r\n- **Date Produced**: 5/21/2019 8:21 PM\r\n- **Commit**: c6b28b7f4ae85c1dd07ba1a27cb19b93d25b39c9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19271.2\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190521.3\r\n- **Date Produced**: 5/21/2019 10:58 PM\r\n- **Commit**: 060abaa723db9a24f0bb336b3d24bb89cfae3e12\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19271.3\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37847","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#37847)"},{"Id":"446790912","IsPullRequest":false,"CreatedAt":"2019-05-21T19:40:58","Actor":"safern","Number":"37846","RawContent":null,"Title":"Log version of libgdiplus to the console in System.Drawing.Common.Tests","State":"open","Body":"We've hit various situations that we wanted to know the version of libgdiplus that was used for a test run. So logging it to the console on startup of the System.Drawing.Common.Tests when running in a non-Windows environment would be really useful.\r\n\r\nMaybe `void WINGDIPAPI GdiplusShutdown (ULONG_PTR token);` can be used to do so.\r\n\r\nWe do that already in InteropServices tests: https://github.com/dotnet/corefx/blob/008d21c47c22b5757e09f6c3d346998004a0f985/src/System.Runtime.InteropServices.RuntimeInformation/tests/DescriptionNameTests.cs#L16\r\n\r\ncc: @danmosemsft @filipnavara ","Url":"https://github.com/dotnet/corefx/issues/37846","RelatedDescription":"Open issue \"Log version of libgdiplus to the console in System.Drawing.Common.Tests\" (#37846)"},{"Id":"446761388","IsPullRequest":true,"CreatedAt":"2019-05-21T19:16:51","Actor":"ViktorHofer","Number":"37845","RawContent":null,"Title":"Exclude non netcoreapp packages from OOB package","State":"closed","Body":"Went through the whole list, these are the only two packages that are netfx specific.","Url":"https://github.com/dotnet/corefx/pull/37845","RelatedDescription":"Closed or merged PR \"Exclude non netcoreapp packages from OOB package\" (#37845)"},{"Id":"446758707","IsPullRequest":false,"CreatedAt":"2019-05-21T18:19:43","Actor":"danadesrosiers","Number":"37844","RawContent":null,"Title":"JsonSerializerOptions.IgnoreReadOnlyProperties is not respected during deserialization","State":"open","Body":"According to the doc block in JsonSerializerOptions, the IgnoreReadOnlyProperties option should apply to both serialization and deserialization.  \r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializerOptions.cs#L125-L133\r\n\r\nThis makes sense, serialization and deserialization should have consistent behavior.  If I serialize, then deserialize, I would expect to end up with the same object.\r\n\r\nCurrently, the IgnoreReadOnlyProperties option is respected for serialization, but not deserialization.  The default value of the option is `false`, so if I have an object with a read only property, when I serialize, the property is included in the json, but when I deserialize, the property is ignored and its data is lost.  This seems like a bug.\r\n\r\nExample:\r\n```csharp\r\npublic class JsonSerializerTest\r\n{\r\n    [Fact]\r\n    public void TestReadOnlyProperty()\r\n    {\r\n        var original = new ObjectWithReadyOnlyProperty(1) {MyData = \"Test\"};\r\n        Assert.Equal(1, original.Id);  // The Id property is set to 1\r\n\r\n        // serialize\r\n        var json = JsonSerializer.ToString(original);\r\n        Assert.Equal(@\"{\"\"Id\"\":1,\"\"MyData\"\":\"\"Test\"\"}\", json);  // Id property is serialized to JSON\r\n\r\n        // deserialize\r\n        var newObject = JsonSerializer.Parse<ObjectWithReadyOnlyProperty>(json);\r\n        Assert.Equal(1, newObject.Id);  // FAIL: Id is 0, the value was lost :(\r\n    }\r\n\r\n    public class ObjectWithReadyOnlyProperty\r\n    {\r\n        public int Id { get; }  // read only\r\n        public string MyData { get; set; }\r\n\r\n        private ObjectWithReadyOnlyProperty() {}\r\n\r\n        public ObjectWithReadyOnlyProperty(int id)\r\n        {\r\n            Id = id;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn addition to this being inconsistent and having the potential to unexpectedly lose data, I think the ability to deserialize read only properties is important because it makes is possible to deserialize to an immutable object.  That is what I was trying to accomplish when I encountered this.","Url":"https://github.com/dotnet/corefx/issues/37844","RelatedDescription":"Open issue \"JsonSerializerOptions.IgnoreReadOnlyProperties is not respected during deserialization\" (#37844)"},{"Id":"446603371","IsPullRequest":true,"CreatedAt":"2019-05-21T17:51:35","Actor":"dotnet-maestro[bot]","Number":"37837","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 11:58 AM\r\n- **Commit**: 6576979664f443fa03773da591e0ed1fc78ed12c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190521.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37837","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#37837)"},{"Id":"446598714","IsPullRequest":true,"CreatedAt":"2019-05-21T17:48:23","Actor":"dotnet-maestro[bot]","Number":"37836","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190520.72\r\n- **Date Produced**: 5/21/2019 12:53 AM\r\n- **Commit**: c8e9c122aa5ea827e734fdffd889afa6318619da\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview6-27720-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6-27720-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6-27720-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37836","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#37836)"},{"Id":"446590403","IsPullRequest":true,"CreatedAt":"2019-05-21T17:46:48","Actor":"dotnet-maestro[bot]","Number":"37835","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190521.1\r\n- **Date Produced**: 5/21/2019 9:31 AM\r\n- **Commit**: 51a1f16ee2aaded4ce1fca6847471b58f7ffa160\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19271.1\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19271.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37835","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37835)"},{"Id":"446744883","IsPullRequest":false,"CreatedAt":"2019-05-21T17:45:12","Actor":"ViktorHofer","Number":"37843","RawContent":null,"Title":"System.Threading.Tasks.Tests.ExecutionContextFlowTest.TaskDropsExecutionContextUponCompletion failed in CI","State":"open","Body":"`System.Threading.Tasks.Tests.ExecutionContextFlowTest.TaskDropsExecutionContextUponCompletion` failed in CI on `netcoreapp-Windows_NT-Debug-x64-Windows.10.Amd64.ClientRS4.ES.Open`: https://dev.azure.com/dnceng/public/_build/results?buildId=195326&view=ms.vss-test-web.build-test-results-tab&runId=4726354&resultId=379881\r\n\r\n```\r\nSystem.TimeoutException : Task timed out after 00:01:00\r\n\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter[TResult](Task`1 task, TimeSpan timeout) in /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 60\r\n   at System.Threading.Tasks.Tests.ExecutionContextFlowTest.TaskDropsExecutionContextUponCompletion() in /_/src/System.Threading.Tasks/tests/Task/ExecutionContextFlowTest.cs:line 61\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/37843","RelatedDescription":"Open issue \"System.Threading.Tasks.Tests.ExecutionContextFlowTest.TaskDropsExecutionContextUponCompletion failed in CI\" (#37843)"},{"Id":"446588341","IsPullRequest":true,"CreatedAt":"2019-05-21T17:41:26","Actor":"dotnet-maestro[bot]","Number":"37834","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190520.09\r\n- **Date Produced**: 5/21/2019 5:42 AM\r\n- **Commit**: c3145b06ba5151d5eafcf177a2e380f7acb61189\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27720-09\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27720-09\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27720-09\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37834","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#37834)"},{"Id":"446580325","IsPullRequest":true,"CreatedAt":"2019-05-21T17:37:25","Actor":"dotnet-maestro[bot]","Number":"37833","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 1:26 PM\r\n- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19270.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19270.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19270.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19270.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37833","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#37833)"},{"Id":"446741577","IsPullRequest":false,"CreatedAt":"2019-05-21T17:36:53","Actor":"ViktorHofer","Number":"37842","RawContent":null,"Title":"Long running test: Client_ReadWriteCancelledToken_Throws_OperationCanceledException","State":"open","Body":"`System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException` hang on `OSX.1013.Amd64.Open-x64:Debug`.\r\n\r\n```\r\n  Discovering: System.IO.Pipes.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.IO.Pipes.Tests (found 371 of 463 test cases)\r\n  Starting:    System.IO.Pipes.Tests (parallel test collections = on, max threads = 8)\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:02:10\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:04:12\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:06:13\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:08:14\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:10:15\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:12:17\r\n   System.IO.Pipes.Tests: [Long Running Test] 'System.IO.Pipes.Tests.NamedPipeTest_Simple_ServerInOut_ClientIn.Client_ReadWriteCancelledToken_Throws_OperationCanceledException', Elapsed: 00:14:17\r\n```\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37833~2Fmerge/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190521.10/workItem/System.IO.Pipes.Tests/wilogs\r\n\r\ncc @JeremyKuhne, @carlossanlop ","Url":"https://github.com/dotnet/corefx/issues/37842","RelatedDescription":"Open issue \"Long running test: Client_ReadWriteCancelledToken_Throws_OperationCanceledException\" (#37842)"},{"Id":"446425323","IsPullRequest":true,"CreatedAt":"2019-05-21T17:32:32","Actor":"dotnet-maestro-bot","Number":"37832","RawContent":null,"Title":"Update ProjectNTfs to beta-27721-00 (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37832","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs to beta-27721-00 (master)\" (#37832)"},{"Id":"446700631","IsPullRequest":true,"CreatedAt":"2019-05-21T16:53:34","Actor":"Dotnet-GitSync-Bot","Number":"37840","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corefx/pull/37840","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37840)"},{"Id":"446701597","IsPullRequest":false,"CreatedAt":"2019-05-21T16:15:29","Actor":"bsitest","Number":"37841","RawContent":null,"Title":"null-coalescing operator returns incorrect value","State":"closed","Body":"I'm using .NET Framework v4.7.1 and the following produces incorrect result:\r\n\r\n`int? x = default;`\r\nat this point if you check what x is, it is set to **null** (_correctly_).  Then if you do:\r\n`var y = x ?? default;`\r\nat this point if you check what y is, it is set to **0** instead of **null** (_incorrectly_).  However if you force the type for _default_ like this:\r\n`var y = x ?? (int?)default;`\r\nit works correctly and y is **null**","Url":"https://github.com/dotnet/corefx/issues/37841","RelatedDescription":"Closed issue \"null-coalescing operator returns incorrect value\" (#37841)"},{"Id":"446649946","IsPullRequest":false,"CreatedAt":"2019-05-21T14:24:24","Actor":"sonnemaf","Number":"37839","RawContent":null,"Title":"Add ToList(capacity) to System.Linq.Enumerable","State":"open","Body":"The class System.Linq.Enumerable currently has a [ToList()](https://github.com/dotnet/corefx/blob/143df51926f2ad397fef9c9ca7ede88e2721e801/src/System.Linq/src/System/Linq/ToCollection.cs) method. I propose to add an extra overload ToList(capacity) to it.\r\n\r\n# Rationale and Usage\r\n\r\nThe normal ToList() methods will create an empty `List<T>` with the capacity of 4 and then adds all values in the Enumeration to it. This can cause a lot of Array resizes. Especially with large lists this can lead to many [LOH](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/large-object-heap) allocations. To avoid these allocations the new overload of the ToList() method has a extra capacity parameter which is used to create the `List<T>` with this capacity. This can reduce the number of allocations on the LOH if the capacity is chosen wisely. \r\n\r\n\r\n## Old ToList()\r\n\r\n```\r\nIEnumerable<Employee> employees = GetData();\r\n\r\nvar qry = from emp in employees\r\n          where emp.Salary > 1000\r\n          select emp.Name;\r\n\r\nvar list = qry.ToList();\r\n\r\n// do something with this list\r\n```\r\n\r\n## New ToList(capacity)\r\n```\r\nIEnumerable<Employee> employees = GetData();\r\n\r\nvar qry = from emp in employees\r\n          where emp.Salary > 1000\r\n          select emp.Name;\r\n\r\nvar list = qry.ToList(20_000);\r\n\r\n// do something with this list\r\n```\r\n\r\n# Details\r\n\r\n- An extra overload for ToArray(), ToDictionary() and ToLookup() with capactity parameters would also be very useful.\r\n- PLINQ implementation is also required\r\n\r\n# Pull Request\r\nA PR with the proposed changes is available GH-25545. It is closed. It needed this API Review first.","Url":"https://github.com/dotnet/corefx/issues/37839","RelatedDescription":"Open issue \"Add ToList(capacity) to System.Linq.Enumerable\" (#37839)"},{"Id":"446647626","IsPullRequest":true,"CreatedAt":"2019-05-21T14:20:09","Actor":"watfordgnf","Number":"37838","RawContent":null,"Title":"Ensure JSON TryGetXXX sets values to default if returning false #37119","State":"open","Body":"This fixes #37119 by ensuring that `value` is assigned `default` whenever a TryGetXXX method would return `false`.\r\n\r\nTest coverage notes:\r\nI was unable to get coverage on TryGetSingle and TryGetDouble's false path. The simple take, an invalid number, causes an InvalidOperationException to be thrown instead of returning false. If the value is a number, it appears that Utf8Parser.TryParse will always return *some* value (be it NaN, +/-Inf) for the inputs we give it because of the preceding check that the value itself is a number.","Url":"https://github.com/dotnet/corefx/pull/37838","RelatedDescription":"Open PR \"Ensure JSON TryGetXXX sets values to default if returning false #37119\" (#37838)"},{"Id":"446372304","IsPullRequest":true,"CreatedAt":"2019-05-21T01:37:39","Actor":"dotnet-maestro-bot","Number":"37831","RawContent":null,"Title":"Update BuildTools to preview1-04021-01 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37831","RelatedDescription":"Closed or merged PR \"Update BuildTools to preview1-04021-01 (release/2.2)\" (#37831)"},{"Id":"446355863","IsPullRequest":false,"CreatedAt":"2019-05-20T23:45:03","Actor":"kamsar","Number":"37830","RawContent":null,"Title":"Dataflow TransformBlock silently fails if TaskCanceledException is thrown","State":"open","Body":"If an operation executing in the context of a `TransformBlock` throws a `TaskCanceledException` - specifically that exception - it does NOT fault the dataflow pipeline and silently continues execution.\r\n\r\nIn my case, I was making some HTTP calls and an overloaded server caused HttpClient to throw that exception.\r\n\r\n> .NET Core SDK (reflecting any global.json):\r\n> Version:   3.0.100-preview3-010431\r\n> Commit:    d72abce213\r\n> System.Threading.Tasks.Dataflow, Version=4.6.4.0\r\n\r\nSample program that will reproduce the issue (it should throw an exception, but instead it just prints 'Done'):\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Threading.Tasks.Dataflow;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static async Task<int> Main(string[] args)\r\n        {\r\n            var producer = new BufferBlock<int>();\r\n\r\n            var processor = new TransformBlock<int, int>(async input =>\r\n            {\r\n                throw new TaskCanceledException(\"Silent failure\");\r\n            });\r\n\r\n            producer.LinkTo(processor, new DataflowLinkOptions { PropagateCompletion = true });\r\n\r\n            var results = new List<int>();\r\n\r\n            var consumer = new ActionBlock<int>(result =>\r\n            { \r\n                results.Add(result);\r\n            });\r\n\r\n            processor.LinkTo(consumer, new DataflowLinkOptions { PropagateCompletion = true });\r\n\r\n            // add each spec to the pipeline\r\n            foreach (var spec in Enumerable.Range(0, 10))\r\n            {\r\n                producer.Post(spec);\r\n            }\r\n\r\n            // done adding to queue\r\n            producer.Complete();\r\n\r\n            await Task.WhenAll(producer.Completion, processor.Completion, consumer.Completion).ConfigureAwait(false);\r\n\r\n            foreach (var result in results)\r\n            {\r\n                Console.WriteLine(result);\r\n            }\r\n\r\n            Console.WriteLine(\"Done!\");\r\n\r\n            return 0;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n```\r\n\r\nChanging the thrown exception to say `InvalidOperationException` fixes the problem and an exception is thrown when we await the dataflow completion.","Url":"https://github.com/dotnet/corefx/issues/37830","RelatedDescription":"Open issue \"Dataflow TransformBlock silently fails if TaskCanceledException is thrown\" (#37830)"},{"Id":"446353114","IsPullRequest":true,"CreatedAt":"2019-05-20T23:32:39","Actor":"maryamariyan","Number":"37829","RawContent":null,"Title":"Make JsonPropertyNameAttribute.Name property readonly","State":"open","Body":"@ahsonkhan the test coverage for this class is already at 100%\r\n\r\n- [ ] Pending API approval.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/37552","Url":"https://github.com/dotnet/corefx/pull/37829","RelatedDescription":"Open PR \"Make JsonPropertyNameAttribute.Name property readonly\" (#37829)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"446918564","IsPullRequest":false,"CreatedAt":"2019-05-22T03:41:48","Actor":"CyrusNajmabadi","Number":"35872","RawContent":null,"Title":"Remove obsolete editor-layer IIndentationService","State":"open","Body":"The core interface moves to the workspace layer in https://github.com/dotnet/roslyn/pull/33978.  This issue tracks removing the older obsolete interface once we ensure no 3rd parties (i.e. TS/xaml) are using this.","Url":"https://github.com/dotnet/roslyn/issues/35872","RelatedDescription":"Open issue \"Remove obsolete editor-layer IIndentationService\" (#35872)"},{"Id":"446915042","IsPullRequest":true,"CreatedAt":"2019-05-22T03:24:07","Actor":"sharwell","Number":"35871","RawContent":null,"Title":"Provide context information for analyzer exceptions","State":"open","Body":"🚧 Needs tests\r\n\r\nFixes #30660","Url":"https://github.com/dotnet/roslyn/pull/35871","RelatedDescription":"Open PR \"Provide context information for analyzer exceptions\" (#35871)"},{"Id":"446884172","IsPullRequest":false,"CreatedAt":"2019-05-22T00:50:17","Actor":"davkean","Number":"35870","RawContent":null,"Title":"\"Use compound assignment\" leaves empty whitespace if expression spans lines","State":"open","Body":"**Version Used**: \r\nVersion 16.2.0 Preview 2.0 [28920.253.d16.2stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n            foo = foo ?? \r\n                string.Empty;\r\n```\r\n\r\n**Expected Behavior**:\r\n``` C#\r\n            foo ??= string.Empty;\r\n```\r\n\r\n**Actual Behavior**:\r\n``` C#\r\n            foo ??=                 string.Empty;\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35870","RelatedDescription":"Open issue \"\"Use compound assignment\" leaves empty whitespace if expression spans lines\" (#35870)"},{"Id":"446860218","IsPullRequest":true,"CreatedAt":"2019-05-22T00:48:33","Actor":"gafter","Number":"35856","RawContent":null,"Title":"Unskip passing tests.","State":"closed","Body":"Fixes #35611\r\n\r\n@dotnet/roslyn-ide May I please have a review of these test changes?\r\n","Url":"https://github.com/dotnet/roslyn/pull/35856","RelatedDescription":"Closed or merged PR \"Unskip passing tests.\" (#35856)"},{"Id":"446883009","IsPullRequest":true,"CreatedAt":"2019-05-22T00:43:34","Actor":"heejaechang","Number":"35869","RawContent":null,"Title":"added code lens resource file in vsix","State":"open","Body":"add resource files for new code lens dlls in setup.","Url":"https://github.com/dotnet/roslyn/pull/35869","RelatedDescription":"Open PR \"added code lens resource file in vsix\" (#35869)"},{"Id":"446878158","IsPullRequest":false,"CreatedAt":"2019-05-22T00:17:44","Actor":"vsfeedback","Number":"35868","RawContent":null,"Title":"C# Ability to assign to readonly fields from constructor-invoked methods.","State":"open","Body":"<p>To simplify a constructor, I sometimes separate some of the functionality into private methods.</p> <p>Unfortunately, this doesn't work if I'm assigning to readonly fields.</p> <p>It would be nice if the compiler was able to determine that these private methods are only being invoked from the constructor and allow me to assign to readonly fields from within.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/567798/c-ability-to-assign-to-readonly-fields-from-constr.html\nVSTS ticketId: 892542_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/15/2019, 01:08 AM (6 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/35868","RelatedDescription":"Open issue \"C# Ability to assign to readonly fields from constructor-invoked methods.\" (#35868)"},{"Id":"446871445","IsPullRequest":false,"CreatedAt":"2019-05-22T00:12:36","Actor":"AdamYoblick","Number":"35860","RawContent":null,"Title":".editorconfig rules for private const fields don't seem to apply","State":"closed","Body":"**Version Used**: \r\n\r\nVisual Studio Enterprise 2019 Preview 16.2.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Download the attached editorconfig.txt and rename it to .editorconfig\r\n[editorconfig.txt](https://github.com/dotnet/roslyn/files/3204962/editorconfig.txt)\r\n2. Create a project with some private const fields\r\n3. Name the fields in the UPPERCASE_WITH_UNDERSCORES format\r\n\r\n**Expected Behavior**:\r\n\r\nVS should suggest that I change these names to PascalCase\r\n\r\n**Actual Behavior**:\r\n\r\nVS doesn't suggest anything","Url":"https://github.com/dotnet/roslyn/issues/35860","RelatedDescription":"Closed issue \".editorconfig rules for private const fields don't seem to apply\" (#35860)"},{"Id":"446874641","IsPullRequest":true,"CreatedAt":"2019-05-22T00:01:15","Actor":"dotnet-bot","Number":"35867","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35867","RelatedDescription":"Open PR \"Merge master-vs-deps to features/razorSupport2\" (#35867)"},{"Id":"446874618","IsPullRequest":true,"CreatedAt":"2019-05-22T00:01:11","Actor":"dotnet-bot","Number":"35866","RawContent":null,"Title":"Merge master to features/lspSupport","State":"open","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35866","RelatedDescription":"Open PR \"Merge master to features/lspSupport\" (#35866)"},{"Id":"446874582","IsPullRequest":true,"CreatedAt":"2019-05-22T00:01:03","Actor":"dotnet-bot","Number":"35865","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35865","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35865)"},{"Id":"446874379","IsPullRequest":false,"CreatedAt":"2019-05-22T00:00:20","Actor":"vsfeedback","Number":"35864","RawContent":null,"Title":"C# Text Editor - Add spacing option for tuples","State":"open","Body":"VSF_TYPE_MARKDOWNThere is currently no option to set spacing preferences for tuples.\nAs a result, the automatic formatting will change something like:\n( &quot;hello&quot;, &quot;world&quot; )\ninto:\n(&quot;hello&quot;, &quot;world&quot;)\nFor those who prefer the first, please add &quot;Insert space within element list parentheses (for tuples)&quot;\nin Text Editor &gt; C# &gt; Code Style &gt; Formatting &gt; Spacing.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/565361/c-text-editor-add-spacing-option-for-tuples.html\nVSTS ticketId: 891843_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/13/2019, 02:11 AM (8 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/35864","RelatedDescription":"Open issue \"C# Text Editor - Add spacing option for tuples\" (#35864)"},{"Id":"446874035","IsPullRequest":false,"CreatedAt":"2019-05-21T23:58:42","Actor":"mavasani","Number":"35863","RawContent":null,"Title":"Refactor the code handling different TextDocument kinds in the IDE layers","State":"open","Body":"We now have 3 distinct text document kinds: Document (regular source document), AdditionalDocument (additional files) and AnalyzerConfigDocument (editorconfig files). We have large number of places in the IDE layer where each client has to deal with all the 3 different document kinds, also leading to lot of code duplication. This issue tracks refactoring the code so that we have a central service/shim that handles all different document kinds and exposes APIs such that the client does not need to handle each document kind.\r\n\r\nSee following comments for some ideas on this work:\r\n1. https://github.com/dotnet/roslyn/pull/35691/commits/4c0459a25a556db891b467ed713e53415374095b#r284291020\r\n2. https://github.com/dotnet/roslyn/pull/35762/files#r286224367, https://github.com/dotnet/roslyn/pull/35762/files#r286224882\r\n3. https://github.com/dotnet/roslyn/pull/35762/files#r286232360\r\n4. https://github.com/dotnet/roslyn/pull/35762/files#r286227148\r\n5. https://github.com/dotnet/roslyn/pull/35762/files#r286228639\r\n6. https://github.com/dotnet/roslyn/pull/35762/files#r286235383\r\n7. https://github.com/dotnet/roslyn/pull/35762/files#r286236054\r\n8. https://github.com/dotnet/roslyn/pull/35762/files#r286239878","Url":"https://github.com/dotnet/roslyn/issues/35863","RelatedDescription":"Open issue \"Refactor the code handling different TextDocument kinds in the IDE layers\" (#35863)"},{"Id":"446872366","IsPullRequest":false,"CreatedAt":"2019-05-21T23:50:25","Actor":"mavasani","Number":"35862","RawContent":null,"Title":"Audit the differences in TextDocument handling between different document kinds in the IDE layer","State":"open","Body":"This issue tracks auditing all our IDE code base where we have different implementation for either of the following document kinds: Document, AdditionalDocument and AnalyzerConfigDocument.\r\n\r\nFor example, see the following comments:\r\n1. https://github.com/dotnet/roslyn/pull/35762/files#r286255564","Url":"https://github.com/dotnet/roslyn/issues/35862","RelatedDescription":"Open issue \"Audit the differences in TextDocument handling between different document kinds in the IDE layer\" (#35862)"},{"Id":"446872197","IsPullRequest":false,"CreatedAt":"2019-05-21T23:49:36","Actor":"vsfeedback","Number":"35861","RawContent":null,"Title":"Add Convert anonymous type to class refactoring for VB","State":"open","Body":"<p>This refactoring exists for C#, please add it to VB too.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/562754/add-convert-anonymous-type-to-class-refactoring-fo.html\nVSTS ticketId: 889997_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/9/2019, 03:20 AM (12 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/35861","RelatedDescription":"Open issue \"Add Convert anonymous type to class refactoring for VB\" (#35861)"},{"Id":"446871417","IsPullRequest":true,"CreatedAt":"2019-05-21T23:46:09","Actor":"jasonmalinowski","Number":"35859","RawContent":null,"Title":"Use \"preview\" language version for Miscellaneous Files","State":"open","Body":"Since we don't know what type of files they are, we should always use the absolute, absolute latest, which is Preview for C#.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35857","Url":"https://github.com/dotnet/roslyn/pull/35859","RelatedDescription":"Open PR \"Use \"preview\" language version for Miscellaneous Files\" (#35859)"},{"Id":"446870584","IsPullRequest":false,"CreatedAt":"2019-05-21T23:42:26","Actor":"vsfeedback","Number":"35858","RawContent":null,"Title":"Find All Associated Types context menu option for namespaces in C# files","State":"open","Body":"<p>Within Visual Studio (all versions), occasionally I want to see how a namespace is being used within a file. Refactoring hints tell me when a namespace isn't being used so that I can remove it, but that doesn't help me if I want to see how a namespace is already being used. This information is necessary to allow me to make decisions to do the following:</p><ol><li>Replace the using statement for a full namespace with a using alias directive when I'm only using one or two types within that namespace.</li> <li>Remove a namespace entirely by replacing uses of it with something else (if, for example, I want to remove all uses of Linq in a project/file).</li></ol> <p>To facilitate this, it would be very helpful if Visual Studio provided a context sensitive menu option for namespaces in C# files that allows me to identify any type used within that file that is dependent on the using statement. That new capability, combined with the existing Find All References implementation for namespaces, will allow developers to manage their namespace usage properly in their C# projects.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/560270/find-all-associated-types-context-menu-option-for.html\nVSTS ticketId: 888714_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/8/2019, 02:46 AM (13 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/35858","RelatedDescription":"Open issue \"Find All Associated Types context menu option for namespaces in C# files\" (#35858)"},{"Id":"446867956","IsPullRequest":false,"CreatedAt":"2019-05-21T23:29:45","Actor":"davkean","Number":"35857","RawContent":null,"Title":"Misc files are not allowed to use C# 8.0","State":"open","Body":"**Version Used**: \r\nVersion 16.2.0 Preview 2.0 [28920.253.d16.2stg]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Open VS \r\n2.  File -> New -> File -> Visual C# file\r\n3. Replace the file with the following:\r\n\r\n``` C#\r\nusing System;\r\n\r\npublic class Class1\r\n{\r\n\tpublic Class1(string bar)\r\n\t{\r\n            string foo ??= bar;\r\n\t}\r\n}\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nNo errors\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS8652\tThe feature 'coalescing assignment' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.\tMiscellaneous Files\tC:\\Users\\davkean\\AppData\\Local\\Temp\\~vs29DB.cs\t8\tActive\r\nError\tCS1002\t; expected\tMiscellaneous Files\tC:\\Users\\davkean\\AppData\\Local\\Temp\\~vs29DB.cs\t8\tActive\r\nError\tCS1525\tInvalid expression term '??='\tMiscellaneous Files\tC:\\Users\\davkean\\AppData\\Local\\Temp\\~vs29DB.cs\t8\tActive\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35857","RelatedDescription":"Open issue \"Misc files are not allowed to use C# 8.0\" (#35857)"},{"Id":"446844478","IsPullRequest":false,"CreatedAt":"2019-05-21T22:00:10","Actor":"gafter","Number":"35855","RawContent":null,"Title":"PROTOTYPE comment in ProjectState.cs","State":"open","Body":"There is a `PROTOTYPE` comment in `ProjectState.cs`.  We use such comments to track code that is not product-ready.  Please either remove the comment, file an issue, or fix the code.\r\n\r\n``` c#\r\n            // PROTOTYPE: why isn't this just a provided implementation?\r\n            private sealed class WorkspaceAnalyzerConfigOptions : AnalyzerConfigOptions\r\n            {\r\n                private readonly ImmutableDictionary<string, string> _analyzerOptions;\r\n\r\n                public WorkspaceAnalyzerConfigOptions(AnalyzerConfigOptionsResult analyzerConfigOptions)\r\n                {\r\n                    _analyzerOptions = analyzerConfigOptions.AnalyzerOptions;\r\n                }\r\n\r\n                public override bool TryGetValue(string key, out string value) => _analyzerOptions.TryGetValue(key, out value);\r\n            }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35855","RelatedDescription":"Open issue \"PROTOTYPE comment in ProjectState.cs\" (#35855)"},{"Id":"446843546","IsPullRequest":false,"CreatedAt":"2019-05-21T21:57:03","Actor":"0xd4d","Number":"35854","RawContent":null,"Title":"'Make local function static' removes empty line above local function","State":"open","Body":"**Version Used**: VS 16.1 and C#8 preview\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `Ctrl+.` on `LocalFunc` and hit `Make local function static`\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe empty line above the local function is preserved\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            static int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\nThe empty line above the local function is removed\r\n\r\n```C#\r\nusing System;\r\nnamespace ConsoleApp9 {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine(\"Hello World!\");\r\n            static int LocalFunc() => 123;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35854","RelatedDescription":"Open issue \"'Make local function static' removes empty line above local function\" (#35854)"},{"Id":"446831762","IsPullRequest":true,"CreatedAt":"2019-05-21T21:23:01","Actor":"ryzngard","Number":"35853","RawContent":null,"Title":"Also get the compilation for the interface symbol instead of passing null","State":"open","Body":"Fixes #35786 ","Url":"https://github.com/dotnet/roslyn/pull/35853","RelatedDescription":"Open PR \"Also get the compilation for the interface symbol instead of passing null\" (#35853)"},{"Id":"446830135","IsPullRequest":false,"CreatedAt":"2019-05-21T21:18:47","Actor":"AlekseyTs","Number":"35852","RawContent":null,"Title":"VB DIM: An attempt to embed an interface with non-abstract members should cause an error","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub NoPia_02()\r\n            Dim attributesRef = GetCSharpCompiation(NoPiaAttributes).EmitToImageReference()\r\n\r\n            Dim csSource =\r\n\"\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Runtime.CompilerServices;\r\n\r\n[assembly: PrimaryInteropAssemblyAttribute(1,1)]\r\n[assembly: Guid(\"\"f9c2d51d-4f44-45f0-9eda-c9d599b58257\"\")]\r\n\r\n[ComImport()]\r\n[Guid(\"\"f9c2d51d-4f44-45f0-9eda-c9d599b58279\"\")]\r\npublic interface ITest33\r\n{\r\n    void M1(){}\r\n}\r\n\" + NoPiaAttributes\r\n\r\n            Dim csCompiation = GetCSharpCompiation(csSource, {attributesRef}).EmitToImageReference(embedInteropTypes:=True)\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nclass UsePia \r\n    Sub Main(x as ITest33)\r\n        x.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={attributesRef, csCompiation})\r\n            ' Expect an error similar to - CS8711: Type 'ITest33' cannot be embedded because it has a non-abstract member. Consider setting the 'Embed Interop Types' property to false.\r\n            comp1.AssertTheseDiagnostics()\r\n        End Sub\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35852","RelatedDescription":"Open issue \"VB DIM: An attempt to embed an interface with non-abstract members should cause an error\" (#35852)"},{"Id":"446827145","IsPullRequest":false,"CreatedAt":"2019-05-21T21:10:58","Actor":"AlekseyTs","Number":"35851","RawContent":null,"Title":"FindMostSpecificImplementation swallows useSiteDiagnostics ","State":"open","Body":"```private static Symbol FindMostSpecificImplementation(Symbol interfaceMember, NamedTypeSymbol implementingInterface)``` swallows useSiteDiagnostics an is used in a couple of places internally in the compiler. Need to make sure that dropping the diagnostics is not going to cause problems. ","Url":"https://github.com/dotnet/roslyn/issues/35851","RelatedDescription":"Open issue \"FindMostSpecificImplementation swallows useSiteDiagnostics \" (#35851)"},{"Id":"446813845","IsPullRequest":true,"CreatedAt":"2019-05-21T20:37:32","Actor":"333fred","Number":"35850","RawContent":null,"Title":"Add initial checkpointing to the nullable walker.","State":"open","Body":"This adds the initial code for checkpointing the nullable walker, and defines the structure of a checkpoint. This PR does not do anything with the checkpoints yet: MemberSemanticModel gets the checkpoints, and then just throws them away without saving them. The intention is that it will save the checkpoints and use them in the speculative model in a follow up PR. @dotnet/roslyn-compiler @AlekseyTs @gafter for review.","Url":"https://github.com/dotnet/roslyn/pull/35850","RelatedDescription":"Open PR \"Add initial checkpointing to the nullable walker.\" (#35850)"},{"Id":"446798819","IsPullRequest":false,"CreatedAt":"2019-05-21T20:00:20","Actor":"CyrusNajmabadi","Number":"35849","RawContent":null,"Title":"Can't build latest roslyn","State":"open","Body":"This is hte latest master.  I've pulled and restored things.  But if i try to build, i get:\r\n\r\n```\r\n5>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010963\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(136,5): error MSB4044: The \"GenerateDepsFile\" task was not given a value for the required parameter \"CompileReferences\".\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35849","RelatedDescription":"Open issue \"Can't build latest roslyn\" (#35849)"},{"Id":"446760823","IsPullRequest":true,"CreatedAt":"2019-05-21T18:25:03","Actor":"jasonmalinowski","Number":"35848","RawContent":null,"Title":"Add support for .editorconfig files to MSBuildWorkspace","State":"open","Body":"Just threading through files discovered to the workspace; no interesting changes here.","Url":"https://github.com/dotnet/roslyn/pull/35848","RelatedDescription":"Open PR \"Add support for .editorconfig files to MSBuildWorkspace\" (#35848)"},{"Id":"446758813","IsPullRequest":false,"CreatedAt":"2019-05-21T18:19:58","Actor":"vsfeedback","Number":"35847","RawContent":null,"Title":"string param = default shown as string param = null in virtual methods when overridden","State":"open","Body":"VSF_TYPE_MARKDOWNHi\n\nI have a method\n\n`protected override U CreateReply&lt;U&gt;(IContent content, Guid relationGuid = default, string code = default, string name = default)`\n\nwhen overridden in a sub-class, it looks like this\n\n`protected override U CreateReply&lt;U&gt;(IContent content, Guid relationGuid = default, string code = null, string name = null)`\n\nIt would be nice if optional string parameters declared as default is also set to default (instead of null) when overridden.\n\nProbably not a big issue, other than &quot;cosmetic&quot;.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/570557/string-param-default-shown-as-string-param-null-in.html\nVSTS ticketId: 893747_\n_These are the original issue comments:_\n\nFrode Gilberg on 5/16/2019, 03:38 AM (5 days ago): Correction. The first code-sample should be virtual (not override). Typing mistake\nVisual Studio Feedback System on 5/16/2019, 10:58 PM (4 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35847","RelatedDescription":"Open issue \"string param = default shown as string param = null in virtual methods when overridden\" (#35847)"},{"Id":"446757610","IsPullRequest":true,"CreatedAt":"2019-05-21T18:16:56","Actor":"cston","Number":"35846","RawContent":null,"Title":"Decode pre- and post-condition nullable attributes","State":"open","Body":"Decode `[AllowNull]`, `[DisallowNull]`, `[MaybeNull]`, `[NotNull]`, `[MaybeNullWhen(bool)]`, `[NotNullWhen(bool)]`.\r\n\r\nNo changes to `NullableWalker` to consume these attributes yet.","Url":"https://github.com/dotnet/roslyn/pull/35846","RelatedDescription":"Open PR \"Decode pre- and post-condition nullable attributes\" (#35846)"},{"Id":"446755617","IsPullRequest":false,"CreatedAt":"2019-05-21T18:11:56","Actor":"vsfeedback","Number":"35845","RawContent":null,"Title":"\"IDE0059: Value assigned to variable is never used\" is appearing with local function","State":"open","Body":"VSF_TYPE_MARKDOWNThe warning appears on variable &quot;check&quot; in the following code:\n\n```\n       public bool TestMethod()\n        {\n            bool check = true;\n            LocalFunction();\n            return check;\n\nvoid LocalFunction()\n            {\n                check = false;\n                Console.WriteLine(check);\n            }\n        }\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/575232/ide0059-value-assigned-to-variable-is-never-used-i.html\nVSTS ticketId: 896188_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/20/2019, 09:35 PM (13 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35845","RelatedDescription":"Open issue \"\"IDE0059: Value assigned to variable is never used\" is appearing with local function\" (#35845)"},{"Id":"446712472","IsPullRequest":false,"CreatedAt":"2019-05-21T16:24:28","Actor":"pbojanczyk","Number":"35844","RawContent":null,"Title":"null-coalescing operator ?? not returning the correct value","State":"open","Body":"**Version Used**: 3.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. int? x = default;\r\n2. var y = x ?? default;\r\n\r\n**Expected Behavior**: y should be **null**\r\n\r\n**Actual Behavior**: y is 0\r\n\r\nHowever if you explicitly specify the cast for default you'll get the correct value like this:\r\n`var y = x ?? (int?)default;`","Url":"https://github.com/dotnet/roslyn/issues/35844","RelatedDescription":"Open issue \"null-coalescing operator ?? not returning the correct value\" (#35844)"},{"Id":"446686678","IsPullRequest":false,"CreatedAt":"2019-05-21T15:30:41","Actor":"ionoy","Number":"35843","RawContent":null,"Title":"Make IRecursivePatternOperation public","State":"open","Body":"**Version Used**: \r\n3.0.0\r\n\r\n**Description**\r\nRight now, there is no way to analyze the operation behind the pattern matching code like this: `a is (var b, var c)`  without using Reflection. Please make `IRecursivePatternOperation` interface public.","Url":"https://github.com/dotnet/roslyn/issues/35843","RelatedDescription":"Open issue \"Make IRecursivePatternOperation public\" (#35843)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"446926910","IsPullRequest":true,"CreatedAt":"2019-05-22T04:26:17","Actor":"Dotnet-GitSync-Bot","Number":"7440","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @mikernet","Url":"https://github.com/dotnet/corert/pull/7440","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7440)"},{"Id":"446854506","IsPullRequest":true,"CreatedAt":"2019-05-22T04:25:11","Actor":"Dotnet-GitSync-Bot","Number":"7439","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7439","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7439)"},{"Id":"445642704","IsPullRequest":true,"CreatedAt":"2019-05-21T22:34:36","Actor":"Suchiman","Number":"7434","RawContent":null,"Title":"Port GC changes from coreclr - 9","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n","Url":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 9\" (#7434)"},{"Id":"446251764","IsPullRequest":true,"CreatedAt":"2019-05-21T22:33:34","Actor":"Dotnet-GitSync-Bot","Number":"7438","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AArnott","Url":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7438)"},{"Id":"446206809","IsPullRequest":true,"CreatedAt":"2019-05-20T16:27:32","Actor":"trylek","Number":"7437","RawContent":null,"Title":"Initial script changes to enable CPAOT on Linux","State":"open","Body":"This is a small set of script changes I made to enable\r\nCPAOT build on Linux. I have basically added the new\r\noption to runtest.sh and fixed a few trivial issues\r\nI hit in my local testing. I haven't yet figured out\r\nhow to cleanly pull down the CoreClrRuntime folder,\r\nfor now I'm copying it over manually from a live CoreCLR\r\nbuild on my DTL VM.\r\n\r\nWith these changes (and after manually copying the Core_Root\r\nfolder from CoreCLR to bin/obj/Linux.x64.Debug/CoreClrRuntme)\r\nI'm able to build the ReadyToRunUnit test. Sadly it doesn't\r\nrun yet, corerun claims that \"coreclr_initialize failed:\r\n0x80070057\"; I have however found out that I'm receiving\r\nexactly the same error when trying to run the same test\r\ncompiled with Crossgen so I guess it's rather a problem\r\nwith my local enlistment and / or build. I'm looking into\r\nthis right now.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7437","RelatedDescription":"Open PR \"Initial script changes to enable CPAOT on Linux\" (#7437)"},{"Id":"445072772","IsPullRequest":true,"CreatedAt":"2019-05-20T07:44:09","Actor":"trylek","Number":"7428","RawContent":null,"Title":"CPAOT support for large version bubble, take #2","State":"closed","Body":"As I haven't found out how to reopen my original PR after reverting it, I have prepared a new one. In the first commit I have pushed the original change rebased to the preparatory change moving CanInline\r\nto CompilationModuleGroup. In the second commit I added logic for clean separation of input assembly set from the version bubble assembly set.\r\n\r\nEarlier in CPAOT development, we used to use CompilationModuleGroup.ContainsType / ContainsMethodBody for checking whether a given typesystem element belongs to either of these sets. To facilitate the separation I have added two new methods on CompilationModuleGroup, VersionsWithType and VersionsWithMethodBody. I audited all calls to ContainsMethodBody & ContainsType in the CPAOT codebase and I modified those querying the version bubble to call VersionsWithType/MethodBody instead.\r\n\r\nThanks\r\n\r\nTomas\r\n","Url":"https://github.com/dotnet/corert/pull/7428","RelatedDescription":"Closed or merged PR \"CPAOT support for large version bubble, take #2\" (#7428)"},{"Id":"445756425","IsPullRequest":true,"CreatedAt":"2019-05-18T21:35:30","Actor":"trylek","Number":"7436","RawContent":null,"Title":"SuperIlc fixes for building the entire Pri#1 suite","State":"open","Body":"After adding support for the issues.targets file I became\r\nable to run the entire Pri# 1 test suite using SuperIlc.\r\nThis change fixes issues uncovered by this more extensive\r\ntesting.\r\n\r\n1) We need to slightly special-case the Core_Root folder\r\nas it technically lies under the CoreCLR\\bin\\tests\\(cfg)\r\nfolder; when building this entire folder, SuperIlc used to\r\npick it up as one of the folders to compile and was\r\nsubsequently racing between the build of this folder and\r\nof the tests that refer to it in CPAOT framework mode.\r\n\r\n2) BuildFolder construction was collecting test references\r\ntoo early i.e. before the framework was built. I came to\r\nthe conclusion that this is a general problem stemming from\r\nthe fact that ProcessInfo was an arbitrary mixture of the\r\nprocess parameters and the state machine used during the\r\nactual build. I have cleaned this up by separating the\r\nparameter file into a new class ProcessParameters; this let\r\nme add logic for constructing the actual paramterers later.\r\n\r\n3) I have added new options to specify explicit compilation\r\nand execution timeouts to add at least minimum support for\r\nlong-building and long-running tests.\r\n\r\n4) I have parallelized folder deletion and subtree lookup\r\nto improve their performance.\r\n\r\n5) I have added caching to the check for managed assemblies.\r\nPreviously, in the Pri# 1 tests we used to open framework\r\nassemblies about 3 million times just for the purpose of\r\nthis lookup.\r\n\r\n6) I have reduced the batch size for running ETW processes\r\nfrom 100 to 10 as the larger number of events collected\r\nwithin a single session was apparently slowing down test\r\nexecution.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7436","RelatedDescription":"Open PR \"SuperIlc fixes for building the entire Pri#1 suite\" (#7436)"},{"Id":"445661755","IsPullRequest":true,"CreatedAt":"2019-05-18T05:14:47","Actor":"Dotnet-GitSync-Bot","Number":"7435","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7435","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7435)"},{"Id":"445624997","IsPullRequest":true,"CreatedAt":"2019-05-18T00:48:06","Actor":"Dotnet-GitSync-Bot","Number":"7433","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7433","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7433)"},{"Id":"445569920","IsPullRequest":true,"CreatedAt":"2019-05-17T22:23:58","Actor":"jkotas","Number":"7432","RawContent":null,"Title":"Mark CustomAttributeNamedArgument and CustomAttributeTypedArgument as readonly","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7432","RelatedDescription":"Closed or merged PR \"Mark CustomAttributeNamedArgument and CustomAttributeTypedArgument as readonly\" (#7432)"},{"Id":"445509182","IsPullRequest":true,"CreatedAt":"2019-05-17T18:08:27","Actor":"Dotnet-GitSync-Bot","Number":"7431","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7431","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7431)"},{"Id":"445259095","IsPullRequest":true,"CreatedAt":"2019-05-17T15:51:42","Actor":"Dotnet-GitSync-Bot","Number":"7430","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @Anipik","Url":"https://github.com/dotnet/corert/pull/7430","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7430)"},{"Id":"445085554","IsPullRequest":true,"CreatedAt":"2019-05-17T04:25:54","Actor":"Dotnet-GitSync-Bot","Number":"7429","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7429","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7429)"},{"Id":"444773127","IsPullRequest":true,"CreatedAt":"2019-05-16T13:56:26","Actor":"Dotnet-GitSync-Bot","Number":"7427","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7427","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7427)"},{"Id":"444513464","IsPullRequest":true,"CreatedAt":"2019-05-15T22:10:39","Actor":"jkotas","Number":"7426","RawContent":null,"Title":"Move IlcBuildTasksPath default to Microsoft.NETCore.Native.targets","State":"closed","Body":"It is used by DumpNativeResources task in Microsoft.NETCore.Native.targets\r\n\r\nFixes #7425","Url":"https://github.com/dotnet/corert/pull/7426","RelatedDescription":"Closed or merged PR \"Move IlcBuildTasksPath default to Microsoft.NETCore.Native.targets\" (#7426)"},{"Id":"444383256","IsPullRequest":false,"CreatedAt":"2019-05-15T22:10:39","Actor":"ctaggart","Number":"7425","RawContent":null,"Title":"NativeCompilationDuringPublish=false leads to msbuild error evaluating \"$(IlcBuildTasksPath)\"","State":"closed","Body":"When I set `/p:NativeCompilationDuringPublish=false ` as described in [the documentation](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#disabling-native-compilation) and [recommended](https://github.com/dotnet/corert/issues/258#issuecomment-492331206), I get this error:\r\n\r\n```\r\nroot@5d9313239163:/src/Shirley# dotnet publish -r ubuntu.16.04-x64 -c Release /p:NativeCompilationDuringPublish=false\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-02/build/Microsoft.NETCore.Native.targets(301,45): error MSB4022: The result \"\" of evaluating the value \"$(IlcBuildTasksPath)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid. [/src/Shirley/Shirley.fsproj]\r\n```\r\n\r\nAs a work-a-round I'm going to try a variation of [another way to disable the ILCompiler](https://github.com/dotnet/corert/issues/258#issuecomment-492331624).","Url":"https://github.com/dotnet/corert/issues/7425","RelatedDescription":"Closed issue \"NativeCompilationDuringPublish=false leads to msbuild error evaluating \"$(IlcBuildTasksPath)\"\" (#7425)"},{"Id":"444137558","IsPullRequest":true,"CreatedAt":"2019-05-15T15:45:52","Actor":"jkotas","Number":"7424","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7424","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7424)"},{"Id":"444029647","IsPullRequest":true,"CreatedAt":"2019-05-14T21:13:10","Actor":"Dotnet-GitSync-Bot","Number":"7423","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @cshung @sywhang @tannergooding","Url":"https://github.com/dotnet/corert/pull/7423","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7423)"},{"Id":"443016643","IsPullRequest":true,"CreatedAt":"2019-05-14T17:01:52","Actor":"trylek","Number":"7415","RawContent":null,"Title":"Move CanInline to CompilationModuleGroup","State":"closed","Body":"As a preparatory change towards adding support for large version\r\nbubble to CPAOT I'm proposing to move CanInline from Compilation to\r\nCompilationModuleGroup in accordance with Simon's and Michal's\r\nfeedback - this refactoring will make it much easier to decouple\r\nthe set of assemblies being compiled from the set of assemblies\r\nwe can inline against (in large version bubble mode anything\r\ncan be inlined).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7415","RelatedDescription":"Closed or merged PR \"Move CanInline to CompilationModuleGroup\" (#7415)"},{"Id":"443994361","IsPullRequest":false,"CreatedAt":"2019-05-14T16:25:03","Actor":"ctaggart","Number":"7422","RawContent":null,"Title":"RhpETWLogLiveCom error on Debian 9 build","State":"closed","Body":"I got `dotnet publish -r win-x64`  working on Windows for my project, but when I try to build from `mcr.microsoft.com/dotnet/core/sdk:2.2.203-stretch` docker image, I get an error about `RhpETWLogLiveCom` missing.\r\n\r\n```\r\nroot@5d9313239163:/src/Shirley# dotnet publish -r linux-x64 -c release\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54.08 ms for /src/Shirley/Shirley.fsproj.\r\n  Shirley -> /src/Shirley/bin/release/netcoreapp2.2/linux-x64/Shirley.dll\r\n  /usr/bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(ReadOnlySpan`1<char>)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(System.ReadOnlySpan`1<Char>) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*,int32,int32,Encoding)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*, Int32, Int32, System.Text.Encoding) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*,int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*, Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char*,int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char*, Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char*)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char*) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char[],int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char[], Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char[])` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char[]) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `[S.P.CoreLib]System.Activator.CreateInstanceIntrinsic<__Canon>()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: System.__Canon System.Activator.CreateInstanceIntrinsic() [/src/Shirley/Shirley.fsproj]\r\n  obj/release/netcoreapp2.2/linux-x64/native/Shirley.o: In function `S_P_CoreLib_System_Runtime_InteropServices_InteropExtensions__RhpETWShouldWalkCom':\r\n  (__managedcode+0x613573): undefined reference to `RhpETWShouldWalkCom'\r\n  obj/release/netcoreapp2.2/linux-x64/native/Shirley.o: In function `S_P_CoreLib_System_Runtime_InteropServices_InteropExtensions__RhpETWLogLiveCom':\r\n  (__managedcode+0x61359b): undefined reference to `RhpETWLogLiveCom'\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/src/Shirley/Shirley.fsproj]\r\n/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang-3.9 \"obj/release/netcoreapp2.2/linux-x64/native/Shirley.o\" -o \"bin/release/netcoreapp2.2/linux-x64/native/Shirley\" /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libbootstrapper.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libRuntime.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libSystem.Private.CoreLib.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libSystem.Private.TypeLoader.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Globalization.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.IO.Compression.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Net.Security.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt\" exited with code 1. [/src/Shirley/Shirley.fsproj]\r\n```\r\n\r\nBased on https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md, I installed clang with:\r\n```\r\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\r\necho \"deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main\" | tee -a /etc/apt/sources.list\r\napt-get update\r\napt-get install cmake clang-3.9 libicu-dev uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev -y\r\n```\r\n\r\nThe CoreRT version is:\r\n```\r\n      \"Microsoft.DotNet.ILCompiler\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[1.0.0-alpha-*, )\",\r\n        \"resolved\": \"1.0.0-alpha-27714-01\",\r\n        \"contentHash\": \"Xa2TzZJKoyhMJF7rx+/WjXYOYfQEprdr6CGptdQ0ix4kVI2icYJQnbm+TALQHfb9okW0X3ebNrlPxXhJW461Qw==\"\r\n      },\r\n```\r\n\r\nI noticed this import here and noticed it hasn't been changed in a while.\r\nhttps://github.com/dotnet/corert/blame/master/src/System.Private.CoreLib/src/System/Runtime/RuntimeImports.cs#L724-L729\r\n\r\nAm I missing a dependency?\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7422","RelatedDescription":"Closed issue \"RhpETWLogLiveCom error on Debian 9 build\" (#7422)"},{"Id":"443767461","IsPullRequest":false,"CreatedAt":"2019-05-14T08:04:14","Actor":"mariopasquali","Number":"7421","RawContent":null,"Title":"Compiling ARM on x64","State":"open","Body":"Hi all,\r\n\r\nIt is a few weeks I am trying to set up an environment for compiling a Linux-ARM executable on a x64 machine, without much luck for now.  \r\n\r\nI have set up multiple machines including Debian 9, Ubuntu 16, Ubuntu 18, all 64-bits, even tried with 32-bits versions.  I am currently working on a Ubuntu 16 x64.  Probably an obvious question, but could someone confirm this is supported for compiling an ARM32 output?\r\n\r\nThere are a few possible typos in the following document that are possibly confusing:\r\nhttps://github.com/dotnet/corert/blob/master/Documentation/cross-building.md\r\n\r\n- `\"In addition, to cross compile CoreCLR\"` should it be CoreRT?\r\n- `\"Cross compiling CoreCLR\"` should it be CoreRT?\r\n- `\"$ ROOTFS_DIR=~/coreclr-cross/\"` should it be corert?\r\n- `\"$ ROOTFS_DIR=~/coreclr-cross/arm ./build.sh\"` should it be corert?\r\n\r\nAnother aspect that I didn't get right is the section \"Using CoreRT for cross compiling under arm on x86 host\".  Is this the section applying to my case where I whish building an output for ARM32 on x86?  If yes, then when would the previous section \"Cross compiling CoreCLR\" apply?\r\n\r\nA few more remarks on the section \"Using CoreRT for cross compiling under arm on x86 host\":\r\n- The steps for \"Build CoreFX\" seems outdated.  Should probably by updated with https://github.com/dotnet/corefx/blob/master/Documentation/building/cross-building.md.  \r\n- `\"./build.sh x86 debug verbose cross crosstarget skiptests\"` There is no parameter crosstarget in build.sh as far as I can see.  Is this outdated?  I am running into various issues when trying to run this step without \"crosstarget\" parameter, like file not found of ConstrainedCallSupportHelpers.S, `\"GetUnwindProcInfo is not supported on this arch yet.\"`, etc.\r\n- Regarding step 4, it would be helpful to give examples of the variables.  What is supposed to be ${WORKING_DIR}?  The output of the application that should be compiled?\r\n\r\nThank you,\r\nMario ","Url":"https://github.com/dotnet/corert/issues/7421","RelatedDescription":"Open issue \"Compiling ARM on x64\" (#7421)"},{"Id":"442385927","IsPullRequest":true,"CreatedAt":"2019-05-14T05:35:48","Actor":"Dotnet-GitSync-Bot","Number":"7412","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7412)"},{"Id":"443568119","IsPullRequest":true,"CreatedAt":"2019-05-14T03:14:10","Actor":"jkotas","Number":"7418","RawContent":null,"Title":"Opt-in more Windows PInvokes into direct calls","State":"closed","Body":"Fixes intermittent infinited recursion inside lazy PInvoke resolver","Url":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Closed or merged PR \"Opt-in more Windows PInvokes into direct calls\" (#7418)"},{"Id":"443634094","IsPullRequest":true,"CreatedAt":"2019-05-14T03:13:57","Actor":"JohnTortugo","Number":"7419","RawContent":null,"Title":"Update xplat-job.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @MattGal ","Url":"https://github.com/dotnet/corert/pull/7419","RelatedDescription":"Closed or merged PR \"Update xplat-job.yml\" (#7419)"},{"Id":"443662831","IsPullRequest":true,"CreatedAt":"2019-05-14T03:02:47","Actor":"MichalStrehovsky","Number":"7420","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7420","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7420)"},{"Id":"441964184","IsPullRequest":true,"CreatedAt":"2019-05-13T19:45:58","Actor":"nattress","Number":"7411","RawContent":null,"Title":"Add SuperIlc compile-nuget command","State":"closed","Body":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit.","Url":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Closed or merged PR \"Add SuperIlc compile-nuget command\" (#7411)"},{"Id":"443059474","IsPullRequest":true,"CreatedAt":"2019-05-13T17:38:45","Actor":"Suchiman","Number":"7416","RawContent":null,"Title":"Port GC changes from coreclr - 8","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7389\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0):**\r\n- https://github.com/dotnet/coreclr/commit/0ee3b5e64a98dc71aefed2304fe4bcf7f66ca9f5 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/dda6b6136e21901842758970d831f31687913a35 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/e7725a6ff986879f8ff2fd9e09ab636545ba7bca (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3a24095610ecaba62495740bf8319ad467af4997 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3bd82d1935806a87d668f4ea102de37077996005 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/8b8231291ded137c49632ef808bbbdc9a500507b (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0372174871c1e27f483c9877c2c5181720be8722 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/df214e67d3cbccb42d2733f4cbe8097a378a731a (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8415a8933844c9d92c435f6ac268612a9563eb3a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab (gc only port)\r\n\r\n**Points of interest**:\r\nhttps://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 made some changes to volatile on the runtime side that i've only partially applied\r\nI've skipped the patch for `Add CGroup CFS CPU limit support` because cgroups support is missing","Url":"https://github.com/dotnet/corert/pull/7416","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 8\" (#7416)"},{"Id":"443513642","IsPullRequest":false,"CreatedAt":"2019-05-13T17:21:02","Actor":"ctaggart","Number":"7417","RawContent":null,"Title":"Please provide a .vsconfig","State":"open","Body":"Please provide a .vsconfig with the minimal required Visual Studio 2019 dependencies needed to build. For an example, see:\r\n\r\nhttps://github.com/microsoft/visualfsharp/blob/master/.vsconfig\r\n\r\nRight now the experience is:\r\n```\r\nPS C:\\Users\\taggac\\github\\corert> .\\build.cmd\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.1.0-pre.3.0\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nCould not find Visual C++ under C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\. Visual C++ is a pre-requisite to build this repository.\r\nSee: https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n```\r\n\r\nI'd like to be able to open a solution and have Visual Studio prompt to install all the dependencies via Visual Studio Installer.","Url":"https://github.com/dotnet/corert/issues/7417","RelatedDescription":"Open issue \"Please provide a .vsconfig\" (#7417)"},{"Id":"442915094","IsPullRequest":true,"CreatedAt":"2019-05-11T21:57:05","Actor":"nattress","Number":"7414","RawContent":null,"Title":"Clean publish test output folders before run","State":"closed","Body":"Incremental build was hiding failures in our local enlistments that only CI would catch due to it always starting with a fresh enlistment.","Url":"https://github.com/dotnet/corert/pull/7414","RelatedDescription":"Closed or merged PR \"Clean publish test output folders before run\" (#7414)"},{"Id":"442866699","IsPullRequest":true,"CreatedAt":"2019-05-10T21:13:18","Actor":"trylek","Number":"7413","RawContent":null,"Title":"Revert \"Initial CPAOT support for large version bubble\"","State":"closed","Body":"Reverts dotnet/corert#7403","Url":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Closed or merged PR \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"446827153","IsPullRequest":true,"CreatedAt":"2019-05-22T05:25:30","Actor":"dsplaisted","Number":"3252","RawContent":null,"Title":"Update NuGet","State":"closed","Body":"Replacement for #3243, on top of #3250 which should hopefully fix things.","Url":"https://github.com/dotnet/sdk/pull/3252","RelatedDescription":"Closed or merged PR \"Update NuGet\" (#3252)"},{"Id":"446933661","IsPullRequest":false,"CreatedAt":"2019-05-22T05:02:32","Actor":"RayKoopa","Number":"3256","RawContent":null,"Title":"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)","State":"open","Body":"I'm using 3.0.100-preview5-011568 in VS 16.2.0 Preview 1.0 and the following sample C# console application:\r\n\r\n**project.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <LangVersion>8.0</LangVersion>\r\n    <NullableContextOptions>enable</NullableContextOptions>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n**Program.cs**\r\n```cs\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            String? x = \"Test\";\r\n            Console.WriteLine(x);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nDespite having set `NullableContextOptions` to `enable` in the project file, I receive the warning **CS8632: The annotation for nullable reference types should only be used in code within a '#nullable' context.** on the `String?` question mark character.\r\n\r\nSimilarly, another project cannot be compiled anymore due to **CS8627: A nullable type parameter must be known to be a value type or non-nullable reference type. Consider adding a 'class', 'struct', or type constraint.** when using `T?` for a generic class type method parameter:\r\n```cs\r\npublic void WriteOptional<T>(in T? value) where T : class, IWritable\r\n```\r\n\r\nWhen adding `#nullabe enable` to the top of the file(s) causing the warning, it is gone. It's like the project element lost its functionality after upgrading to VS 16.2.0? I did not change the SDK preview version and could compile the same sources correctly in 16.1.0.\r\n\r\nI'm not sure if https://github.com/dotnet/sdk/issues/3245 is relevant here.","Url":"https://github.com/dotnet/sdk/issues/3256","RelatedDescription":"Open issue \"NullableContextOptions has no effect anymore (after upgrading to VS 16.2 Preview 1?)\" (#3256)"},{"Id":"446888312","IsPullRequest":true,"CreatedAt":"2019-05-22T01:12:24","Actor":"wli3","Number":"3255","RawContent":null,"Title":"Fix generate package on build pack as tool","State":"open","Body":"NuGet/Home#7801\r\n\r\n(the easiest way to understand that is)since nuget no longer sets NoBuild on GeneratePackageOnBuild, we need to do similar logic to get the previous state.\r\n\r\nfix https://github.com/dotnet/sdk/issues/3253","Url":"https://github.com/dotnet/sdk/pull/3255","RelatedDescription":"Open PR \"Fix generate package on build pack as tool\" (#3255)"},{"Id":"446885292","IsPullRequest":false,"CreatedAt":"2019-05-22T00:56:10","Actor":"vatsan-madhavan","Number":"3254","RawContent":null,"Title":"deps.json for ProjectReferences is not emitted correctly","State":"open","Body":"When I create a project with a project reference like this...\r\n\r\n```XML\r\n<ProjectReference Include=\"..\\WindowsBase.csproj\" />\r\n```\r\n\r\n... the `deps.json` file that's generated has an entry like this:\r\n\r\n```json\r\n      \"WindowsBase/1.0.0\": {\r\n        \"runtime\": {\r\n          \"WindowsBase.dll\": {}\r\n        }\r\n      }\r\n```\r\nThe application loads `WindowsBase` from `Microsoft.NetCore.App` instead of loading the one supplied by the referenced project. \r\n\r\n[Repro: XUnitTestProject1.zip](https://github.com/dotnet/sdk/files/3205090/XUnitTestProject1.zip)\r\n\r\n/cc @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3254","RelatedDescription":"Open issue \"deps.json for ProjectReferences is not emitted correctly\" (#3254)"},{"Id":"446882523","IsPullRequest":false,"CreatedAt":"2019-05-22T00:40:55","Actor":"dsplaisted","Number":"3253","RawContent":null,"Title":"Project with PackAsTool and GeneratePackageOnBuild set to true fails to build","State":"open","Body":"Tests in `GivenThatWeWantToPackAToolProjectWithGeneratePackageOnBuild` are failing with:\r\n\r\n> C:\\git\\dotnet-sdk\\artifacts\\bin\\Debug\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(337,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\git\\dotnet-sdk\\artifacts\\tmp\\Debug\\It_builds_suc---81F3C59C\\App\\consoledemo.csproj]\r\n\r\nThis regressed with a recent NuGet insertion.","Url":"https://github.com/dotnet/sdk/issues/3253","RelatedDescription":"Open issue \"Project with PackAsTool and GeneratePackageOnBuild set to true fails to build\" (#3253)"},{"Id":"446345530","IsPullRequest":true,"CreatedAt":"2019-05-21T18:34:59","Actor":"dsplaisted","Number":"3250","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Should unblock #3243","Url":"https://github.com/dotnet/sdk/pull/3250","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3250)"},{"Id":"446443251","IsPullRequest":false,"CreatedAt":"2019-05-21T06:45:04","Actor":"davidfowl","Number":"3251","RawContent":null,"Title":"deps.json file has empty compilationOptions section","State":"open","Body":"Likely a result of the migration to the new JSON APIs\r\n\r\n```JSON\r\n{\r\n  \"runtimeTarget\": {\r\n    \"name\": \".NETCoreApp,Version=v3.0\",\r\n    \"signature\": \"\"\r\n  },\r\n  \"compilationOptions\": {},\r\n  \"targets\": {\r\n    \".NETCoreApp,Version=v3.0\": {\r\n      \"ConsoleApp1/1.0.0\": {\r\n        \"runtime\": {\r\n          \"ConsoleApp1.dll\": {}\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"libraries\": {\r\n    \"ConsoleApp1/1.0.0\": {\r\n      \"type\": \"project\",\r\n      \"serviceable\": false,\r\n      \"sha512\": \"\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\ncc @ahsonkhan @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3251","RelatedDescription":"Open issue \"deps.json file has empty compilationOptions section\" (#3251)"},{"Id":"445519479","IsPullRequest":false,"CreatedAt":"2019-05-20T17:14:41","Actor":"sebastienros","Number":"3245","RawContent":null,"Title":"NullableContextOptions error during build","State":"closed","Body":"Using the latest build of the SDK, since yesterday.\r\n\r\n```\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(156,10): error MSB4064: The \"NullableContextOptions\" parameter is not supported by the \"Csc\" task. Verify the parameter exists on the task, and it is a settable public instance property. [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(120,5): error MSB4063: The \"Csc\" task could not be initialized with its input parameters.  [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3245","RelatedDescription":"Closed issue \"NullableContextOptions error during build\" (#3245)"},{"Id":"446041376","IsPullRequest":false,"CreatedAt":"2019-05-20T10:31:08","Actor":"fubar-coder","Number":"3249","RawContent":null,"Title":"*.dll.config from package reference not copied to output on publish","State":"open","Body":"# Description\r\n\r\nIt seems that the `*.dll.config` files from a package reference aren't copied to the output directory during a `dotnet publish`.\r\n\r\n# Use case\r\n\r\nI stumbled across this problem while consuming my `FubarDev.PamSharp` package, which **requires** having the ´.dll.config` file, because it contains a `dllmap` that is needed to find the correct native library.\r\n\r\n# `dotnet --info`\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/fubar-coder/dotnet/sdk/3.0.100-preview5-011568/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011568 [/home/fubar-coder/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/home/fubar-coder/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/home/fubar-coder/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# System information\r\n\r\nWindows 10 Pro for Workstation 1809 (Build 17763.475)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3249","RelatedDescription":"Open issue \"*.dll.config from package reference not copied to output on publish\" (#3249)"},{"Id":"444047284","IsPullRequest":true,"CreatedAt":"2019-05-17T23:36:22","Actor":"sbomer","Number":"3231","RawContent":null,"Title":"Flow IsTrimmable from FrameworkReference to resolved assets","State":"closed","Body":"Follow-up to https://github.com/dotnet/core-sdk/pull/1992/files. The next step is to flow the metadata from `RuntimePack` to the resolved files.\r\n\r\nThis flows `IsTrimmable` metadata from `FrameworkReference` and `KnownFrameworkReference` (`FrameworkReference` has priority) to the `RuntimePack` ItemGroup produced by `ResolveFrameworkReferences`. The metadata will ultimately influence the default linker behavior.\r\n\r\n@dsplaisted @nguerrera PTAL.","Url":"https://github.com/dotnet/sdk/pull/3231","RelatedDescription":"Closed or merged PR \"Flow IsTrimmable from FrameworkReference to resolved assets\" (#3231)"},{"Id":"445620306","IsPullRequest":true,"CreatedAt":"2019-05-17T23:25:17","Actor":"wli3","Number":"3248","RawContent":null,"Title":"Remove _WriteAppConfigWithSupportedRuntime Input dependency ","State":"closed","Body":"on ResolveAssemblyReferencesStateFile\r\n\r\nfix https://github.com/dotnet/sdk/issues/3131\r\n\r\nI tried to get a repro in test. However, I cannot pin down a minimal repro to cause rar cache file to be invalid between builds.\r\n\r\ncc @KirillOsenkov","Url":"https://github.com/dotnet/sdk/pull/3248","RelatedDescription":"Closed or merged PR \"Remove _WriteAppConfigWithSupportedRuntime Input dependency \" (#3248)"},{"Id":"445606690","IsPullRequest":true,"CreatedAt":"2019-05-17T22:37:25","Actor":"peterhuene","Number":"3247","RawContent":null,"Title":"Copy runtime pack resource assemblies on self-contained build/publish.","State":"closed","Body":"This commit implements copying resource assemblies for self-contained\r\nbuild/publish from runtime packs.\r\n\r\nCloses #3068.","Url":"https://github.com/dotnet/sdk/pull/3247","RelatedDescription":"Closed or merged PR \"Copy runtime pack resource assemblies on self-contained build/publish.\" (#3247)"},{"Id":"445600954","IsPullRequest":true,"CreatedAt":"2019-05-17T22:09:36","Actor":"dsplaisted","Number":"3246","RawContent":null,"Title":"Skip tests where .NET Core version they use isn't supported on current OS","State":"closed","Body":"Update some tests to skip running if the current operating system doesn't support the right version of .NET Core.\r\n\r\nThis will help run the sdk tests in dotnet/core-sdk, which tests more operating systems than this repo does.","Url":"https://github.com/dotnet/sdk/pull/3246","RelatedDescription":"Closed or merged PR \"Skip tests where .NET Core version they use isn't supported on current OS\" (#3246)"},{"Id":"445498451","IsPullRequest":false,"CreatedAt":"2019-05-17T15:29:08","Actor":"fr0","Number":"3244","RawContent":null,"Title":"How to set version metadata?","State":"open","Body":"1. I want to use the `VersionPrefix` property inside my `csproj` to define my package's semver 2.0 (3-part) version.\r\n2. I want to attach a 4th part and build metadata on the command line.\r\n\r\nIn other words, I want to have the version be, e.g. \"1.2.3.4+f0c432\"\r\n\r\nWhere `1.23` is stored in the `csproj`\r\nand `.4` comes from the CI environment\r\nand `+40c432` is the commit hash.\r\n\r\nThe problem I've run into is that using `--version-suffix` automatically makes it a pre-release version, which I don't want.\r\n\r\nEven if I ignore the 4th number (build number), I can't even do this:\r\n\r\n```\r\ndotnet build MyProj  --version-suffix \"+f0c432\"\r\n```\r\n\r\nBecause:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/2.2.107/NuGet.targets(114,5): error : '1.2.3-+f0c432' is not a valid version string\r\n```","Url":"https://github.com/dotnet/sdk/issues/3244","RelatedDescription":"Open issue \"How to set version metadata?\" (#3244)"},{"Id":"444685384","IsPullRequest":true,"CreatedAt":"2019-05-16T23:10:13","Actor":"sbomer","Number":"3237","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3237","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3237)"},{"Id":"445092425","IsPullRequest":true,"CreatedAt":"2019-05-16T18:12:47","Actor":"zivkan","Number":"3243","RawContent":null,"Title":"Insert NuGet 5.2.0-preview2.6020 into master","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3243","RelatedDescription":"Open PR \"Insert NuGet 5.2.0-preview2.6020 into master\" (#3243)"},{"Id":"445077491","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:38","Actor":"nugetlurker","Number":"3242","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3242","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3242)"},{"Id":"445077453","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:32","Actor":"nugetlurker","Number":"3241","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3241","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3241)"},{"Id":"444694510","IsPullRequest":true,"CreatedAt":"2019-05-15T23:56:30","Actor":"MSLukeWest","Number":"3240","RawContent":null,"Title":"Setting IsKeyOutput metadata on AppHost file in PublishItemsOutputGroup","State":"open","Body":"Updating the publishing targets to set the IsKeyOutput metadata on the apphost file (exe).  The key output is used when creating shortcuts using Installer Projects.\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3240","RelatedDescription":"Open PR \"Setting IsKeyOutput metadata on AppHost file in PublishItemsOutputGroup\" (#3240)"},{"Id":"444692644","IsPullRequest":true,"CreatedAt":"2019-05-15T23:47:44","Actor":"dotnet-bot","Number":"3239","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3239","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#3239)"},{"Id":"444692635","IsPullRequest":true,"CreatedAt":"2019-05-15T23:47:41","Actor":"dotnet-bot","Number":"3238","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3238","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#3238)"},{"Id":"444669751","IsPullRequest":false,"CreatedAt":"2019-05-15T22:16:18","Actor":"shhsu","Number":"3236","RawContent":null,"Title":"Question: why does publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)","State":"open","Body":"Hi dotnet:\r\n\r\nI am wondering why publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)\r\nhttps://github.com/dotnet/sdk/blob/77677cd4cd4d033e2a30e33f2e7dc49d7f3c8095/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L354\r\n\r\nBackground:\r\nI created a VSTS pipeline that calls msbuild to build/sign/publish my application (publish to file). However, I am finding that a bunch of binaries in my publish directory is not signed.\r\n\r\nAfter some investigations I have found out that all bits in my $(OutDir) are signed, but the files got copied to publish directory are not from $(OutDir), instead they are from `obj\\Release\\` directory. After looking at the target file I finally found the line that indicates this behavior.\r\n\r\nI have yet to find a good around for this issue. I was wondering why is the reason for this behavior and if there is a workaround for this.\r\n\r\nthanks\r\nPeter","Url":"https://github.com/dotnet/sdk/issues/3236","RelatedDescription":"Open issue \"Question: why does publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)\" (#3236)"},{"Id":"444061058","IsPullRequest":true,"CreatedAt":"2019-05-15T21:16:56","Actor":"kouvel","Number":"3232","RawContent":null,"Title":"Make QuickJitForLoops configurable","State":"closed","Body":"- Enabling this option may improve startup time, may be useful in some scenarios\r\n- Enabling this option opens up the possibility that long-running hot loops remain for too long in code that is not optimized. Methods containing such hot loops may be attributed with `AggressiveOptimizationAttribute` to work around the issue on a case-by-case basis.","Url":"https://github.com/dotnet/sdk/pull/3232","RelatedDescription":"Closed or merged PR \"Make QuickJitForLoops configurable\" (#3232)"},{"Id":"444575344","IsPullRequest":true,"CreatedAt":"2019-05-15T18:11:45","Actor":"livarcocc","Number":"3235","RawContent":null,"Title":"Update branding to 2.2.4xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3235","RelatedDescription":"Open PR \"Update branding to 2.2.4xx\" (#3235)"},{"Id":"444575055","IsPullRequest":true,"CreatedAt":"2019-05-15T18:11:04","Actor":"livarcocc","Number":"3234","RawContent":null,"Title":"Update branding to 2.1.8xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3234","RelatedDescription":"Open PR \"Update branding to 2.1.8xx\" (#3234)"},{"Id":"444400167","IsPullRequest":true,"CreatedAt":"2019-05-15T12:04:41","Actor":"dotnet-maestro[bot]","Number":"3233","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19270.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.2\r\n- **Date Produced**: 5/20/2019 1:26 PM\r\n- **Commit**: 3b0760f8789d5d4bd146b36bd9051696d7a56bfa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19270.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3233","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3233)"},{"Id":"443611004","IsPullRequest":true,"CreatedAt":"2019-05-14T18:10:31","Actor":"dsplaisted","Number":"3228","RawContent":null,"Title":"Add ability to use test config file to list tests to skip","State":"closed","Body":"Add support for passing a `-testConfigFile` parameter when running tests.  This allows individual tests to be skipped without having to modify the test source code.  This will be helpful to allow tests to be run on other repos, such as with https://github.com/dotnet/core-sdk/pull/1454.\r\n\r\nThe test config file looks like this\r\n\r\n```xml\r\n<Tests>\r\n  <Method Name=\"Microsoft.NET.Clean.Tests.GivenThatWeWantToCleanAHelloWorldProject.It_can_clean_and_build_without_using_rebuild\"\r\n          Skip=\"true\"\r\n          Issue=\"https://github.com/dotnet/sdk/issues/1234\"\r\n          Reason=\"Reason for skip\"/>\r\n</Tests>\r\n```\r\n\r\nThe `Issue` and `Reason` attributes aren't currently used, they are merely informational to help us keep such a list up-to-date.","Url":"https://github.com/dotnet/sdk/pull/3228","RelatedDescription":"Closed or merged PR \"Add ability to use test config file to list tests to skip\" (#3228)"},{"Id":"443876478","IsPullRequest":true,"CreatedAt":"2019-05-14T14:10:53","Actor":"dotnet-maestro[bot]","Number":"3230","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3230","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3230)"},{"Id":"443634084","IsPullRequest":true,"CreatedAt":"2019-05-14T04:43:11","Actor":"JohnTortugo","Number":"3229","RawContent":null,"Title":"Update .vsts-ci.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @mattgal","Url":"https://github.com/dotnet/sdk/pull/3229","RelatedDescription":"Closed or merged PR \"Update .vsts-ci.yml\" (#3229)"},{"Id":"443361175","IsPullRequest":true,"CreatedAt":"2019-05-13T13:35:29","Actor":"dotnet-maestro[bot]","Number":"3227","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3227","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3227)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1129054452357271553","CreatedAt":"2019-05-16T16:02:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the .NET, C#, and F# teams https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null},{"Id":"1129053721206304769","CreatedAt":"2019-05-16T15:59:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1128765757175631872","CreatedAt":"2019-05-15T20:55:02+00:00","UserScreenname":"dotnet","Text":"We just blogged about all the performance works we did in .NET Core 3.0 https://t.co/2JGXxF7ejn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":315,"FavoriteCount":150,"RawContent":null},{"Id":"1128672633665384449","CreatedAt":"2019-05-15T14:45:00+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst in 15 minutes when he's implementing functions in his compiler. https://t.co/SYndeEbdMY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"1128343453970993152","CreatedAt":"2019-05-14T16:56:57+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1128339508414410757","CreatedAt":"2019-05-14T16:41:16+00:00","UserScreenname":"dotnet","Text":"ML .NET  CLI: Learn how to automatically generate an ML .NET  machine learning model and C# related code with this… https://t.co/i8zHrBa1UM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":51,"RawContent":null},{"Id":"1126254867708727296","CreatedAt":"2019-05-08T22:37:39+00:00","UserScreenname":"dotnet","Text":"Introducing the new https://t.co/YEWOJxOW2B.SqlClient #DOTNET #dotnetcore #build2019\nhttps://t.co/JhNYQ1GDni https://t.co/44c9wGLwsC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":139,"FavoriteCount":70,"RawContent":null}]}},"RunOn":"2019-05-22T05:30:35.086274Z","RunDurationInMilliseconds":10319}