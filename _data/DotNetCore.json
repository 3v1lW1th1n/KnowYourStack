{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":203,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6928329221","Type":"PullRequestEvent","CreatedAt":"2017-12-01T04:04:07","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15298","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, PgoData to preview1-26001-01, preview1-26001-01, master-20171130-0053, respectively (master)\" (#15298) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6928215831","Type":"IssuesEvent","CreatedAt":"2017-12-01T03:17:05","Actor":"crozone","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15316","RelatedDescription":"Opened issue \"DateTimeParse.Parse lacks full ISO8601 support\" (#15316) at dotnet/coreclr","RelatedBody":"`DateTimeParse.Parse()` (which powers `DateTime.Parse()` and `DateTimeOffset.Parse()`) currently only partially supports the ISO8601 standard. ISO8601 is heavily used in industry and having greater support for it significantly increases the usability of the `DateTime.Parse` methods.\r\n\r\nCurrently, the bits of ISO8601 that are supported are:\r\n\r\n* Sortable date/time pattern (\"s\"). **2009-06-15T13:45:30** = ISO8601 without timezone.\r\n\r\n* Round-trip date/time pattern. (\"O\"/\"o\"). **2009-06-15T13:45:30.0000000-07:00** = ISO 8601 with timezone offset.\r\n\r\nNotable formats that are currently omitted:\r\n\r\n* Dates, Times, or DateTimes without dash or colon separators: **20171201**, **123031**,  **20090615T134530+1100**\r\n\r\n* Datetimes that have a decimal fraction added to the lowest order time element when it isn't seconds:\r\n**2009-06-15T13:45.5** or **2009-06-15T13.5**\r\n\r\n* Week notation (with day): **2017-W48** or **2017-W48-4**\r\n\r\n* Ordinal date notation: **2017-001** - **2017-334**\r\n\r\n* Yearless date notation: **--10-31**, **--1031**.\r\n\r\n* Times that use a comma (',') as a decimal separator for the lowest time element. ISO8601 universally allows the use of both a comma (',') or a period ('.') as a decimal separator, independent of current culture. Currently, only a period ('.') is supported, regardless of the `CultureInfo.NumberFormat.NumberDecimalSeparator` provided (although both should be allowed irrespective of culture)."},{"Id":"6928047464","Type":"PullRequestEvent","CreatedAt":"2017-12-01T02:13:17","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15313","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#15313) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6927991708","Type":"PullRequestEvent","CreatedAt":"2017-12-01T01:52:37","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15315","RelatedDescription":"Opened pull request \"Unmark unused fields as not lvOnFrame\" (#15315) at dotnet/coreclr","RelatedBody":"If a dependently promoted (i.e. non-register candidate) field of a struct is unused, and its parent is not allocated onto the stack, we cannot allocate the dependent fields to the stack either (they were previously being assigned offsets from 0, which may be in the GC ptr area, which causes an assert).\r\n\r\nFix #14548"},{"Id":"6927850622","Type":"PullRequestEvent","CreatedAt":"2017-12-01T01:01:55","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15314","RelatedDescription":"Opened pull request \"Change name fo perf jobs to reflect the actual OS they run on\" (#15314) at dotnet/coreclr","RelatedBody":""},{"Id":"6927848957","Type":"PullRequestEvent","CreatedAt":"2017-12-01T01:01:17","Actor":"dotnet-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15313","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corert\" (#15313) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**"},{"Id":"6927811766","Type":"IssuesEvent","CreatedAt":"2017-12-01T00:48:19","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14206","RelatedDescription":"Closed issue \"[RyuJIT/arm64][JitStress=1] Assertion failed '(op2 == base) || (op2->gtEffectiveVal() == base)'\" (#14206) at dotnet/coreclr","RelatedBody":"From a Windows x64_arm64_altjit run with `COMPlus_JitStress=1`:\r\n\r\nTests:\r\n```\r\nJIT\\Directed\\perffix\\primitivevt\\callconv3_il_d\\callconv3_il_d.cmd\r\nJIT\\Directed\\perffix\\primitivevt\\identity3_il_d\\identity3_il_d.cmd\r\nJIT\\Methodical\\VT\\port\\_il_dbghuge_gcref\\_il_dbghuge_gcref.cmd\r\nJIT\\Methodical\\VT\\port\\_rellcs_gcref\\_rellcs_gcref.cmd\r\nJIT\\Methodical\\VT\\port\\_dbglcs_gcref\\_dbglcs_gcref.cmd\r\nJIT\\Methodical\\unsafecsharp\\_speed_relunsafe-3\\_speed_relunsafe-3.cmd\r\nJIT\\Methodical\\unsafecsharp\\_speed_dbgunsafe-1\\_speed_dbgunsafe-1.cmd\r\n```\r\n\r\nExample:\r\n```\r\nAssert failure(PID 11600 [0x00002d50], Thread: 21848 [0x5558]): Assertion failed '(op2 == base) || (op2->gtEffectiveVal() == base)' in 'DomainBoundILStubClass:IL_STUB_Array_Set(int,int,struct):this' (IL size 96)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\gentree.cpp Line: 3836\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6928004433","Type":"PullRequestEvent","CreatedAt":"2017-12-01T01:57:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8141","RelatedDescription":"Merged pull request \"Consume 2.0.4 LZMA\" (#8141) at dotnet/cli","RelatedBody":""},{"Id":"6927799224","Type":"PullRequestEvent","CreatedAt":"2017-12-01T00:43:56","Actor":"JunTaoLuo","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8141","RelatedDescription":"Opened pull request \"Consume 2.0.4 LZMA\" (#8141) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6923175027","Type":"PullRequestEvent","CreatedAt":"2017-11-30T07:52:30","Actor":"wstaelens","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/594","RelatedDescription":"Opened pull request \"Update versions.md\" (#594) at dotnet/standard","RelatedBody":"quick link to .NET Framework system requirements to easily check which OS is supported."},{"Id":"6915855180","Type":"PullRequestEvent","CreatedAt":"2017-11-28T23:23:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02228-01 (master)\" (#593) at dotnet/standard","RelatedBody":""},{"Id":"6908856639","Type":"IssuesEvent","CreatedAt":"2017-11-27T19:20:28","Actor":"Eilon","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/587","RelatedDescription":"Closed issue \" System.Net.Http.dll 4.6.25514.4 在nuget没有这个版本，与项目中的4.6.25220.1不兼容\" (#587) at dotnet/standard","RelatedBody":"与System.Net.Http.dll 这个版本4.6.25220.1及 以上版本不兼容，如果不引用会自动增加 System.Net.Http.dll 4.6.25514.4这个版本，但是在NuGet就没有4.6.25514.4这个版本号"},{"Id":"6904585264","Type":"IssuesEvent","CreatedAt":"2017-11-27T00:32:12","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/592","RelatedDescription":"Closed issue \"The certificate authority is invalid or incorrect exception while using .NET standard 2.0\" (#592) at dotnet/standard","RelatedBody":"My problem here is specifically in .Net standard 2.0 and .Net core 2.0, since the same code, seems to work fine with .net framework 4.6.1.\r\n\r\nIn .NET framework, we are using following code to trust all certificates:\r\n\r\n`ServicePointManager.ServiceCertificateValidationCallback += (o, c, ch, er) => true;`\r\n\r\nBut the same code is not working with .NET core 2.0 and .NET standard 2.0.\r\n\r\nI have also tried the below code:\r\n\r\n`var httpClientHandler = new HttpClientHandler();\r\nhttpClientHandler.ServiceCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;`\r\n\r\nBut this is not working for me.\r\n'An error occurred while sending the request, The certificate authority is invalid or incorrect' exception has been thrown.\r\n\r\n![image](https://user-images.githubusercontent.com/25975246/33242042-855d6ba6-d2f4-11e7-841c-483f82159d49.png)\r\n\r\n\r\nPlease suggest me any alternative solution for the self-signed certificate in .NET standard 2.0."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6928296150","Type":"IssuesEvent","CreatedAt":"2017-12-01T03:49:32","Actor":"lakeman","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25627","RelatedDescription":"Opened issue \"DbConnectionPool.CleanupCallback with short lived windows impersonation tokens causes kestrel process to crash\" (#25627) at dotnet/corefx","RelatedBody":"Add the following reproducer to an empty dotnet core 2 project and wait for the timer DbConnectionPool.CleanupCallback to fire.\r\nSince the WindowsIdentity token that was being impersonated has now been closed, an ObjectDisposedException will be thrown while attempting to run the timer in the captured execution context.\r\nThis causes ExecutionContext.OnContextChanged to call FailFast and crash the process.\r\n\r\n```\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddEntityFrameworkSqlServer();\r\n            services.AddDbContextPool<DbContext>(o => {\r\n                var server = \"localhost\";\r\n                var database = \"master\";\r\n                o.UseSqlServer($\"Server={server};Database={database};integrated security=True;Trusted_Connection=true\", options => { } );\r\n            });\r\n        }\r\n\r\n        private async Task WhoAmI(HttpContext context)\r\n        {\r\n            var dbContext = context.RequestServices.GetRequiredService<DbContext>();\r\n            var parm = new SqlParameter(\"name\", SqlDbType.VarChar, 50);\r\n            parm.Value = \"\";\r\n            parm.Direction = ParameterDirection.InputOutput;\r\n            await dbContext.Database.ExecuteSqlCommandAsync(\"select @name = loginame from master.sys.sysprocesses where spid = @@SPID\", parm);\r\n            var name = (parm.Value as string).Trim();\r\n            await context.Response.WriteAsync($\"Hello {name}!\");\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.Run(context => {\r\n                WindowsIdentity.RunImpersonated(\r\n                    ((WindowsIdentity)context.User.Identity).AccessToken,\r\n                    () => WhoAmI(context).Wait());\r\n                return Task.CompletedTask;\r\n            });\r\n        }\r\n    }\r\n```\r\nIs there an easy way to run this (and any other) timer to avoid capturing the execution context?"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6927689182","Type":"PullRequestEvent","CreatedAt":"2017-12-01T00:06:33","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23509","RelatedDescription":"Opened pull request \"Add more tests and fix some earlier tests for ref-reassignment\" (#23509) at dotnet/roslyn","RelatedBody":""},{"Id":"6927685238","Type":"PullRequestEvent","CreatedAt":"2017-12-01T00:05:11","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23508","RelatedDescription":"Opened pull request \"Accept PE Operator Symbols having in parameters\" (#23508) at dotnet/roslyn","RelatedBody":"PR for personal review only"},{"Id":"6927643964","Type":"PullRequestEvent","CreatedAt":"2017-11-30T23:52:05","Actor":"khyperia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23472","RelatedDescription":"Merged pull request \"Make range operator nonassociative and tie it to C# 7.3\" (#23472) at dotnet/roslyn","RelatedBody":"Ping @OmarTawfik"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6926328002","Type":"PullRequestEvent","CreatedAt":"2017-11-30T18:47:25","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5043","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5043) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6926074043","Type":"PullRequestEvent","CreatedAt":"2017-11-30T17:53:04","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5036","RelatedDescription":"Closed pull request \"Delete double/float formatting code moved to shared\" (#5036) at dotnet/corert","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15246\r\nContributes to https://github.com/dotnet/coreclr/pull/15246"},{"Id":"6926048517","Type":"PullRequestEvent","CreatedAt":"2017-11-30T17:47:49","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5043","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5043) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6925037142","Type":"PullRequestEvent","CreatedAt":"2017-11-30T14:48:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/5040","RelatedDescription":null,"RelatedBody":"The concept of RuntimeDeterminedMethodNode was added when I was trying to support a mode where generic dictionaries could have \"holes\" (null entries for things that are not used for the particular instantiation). This turned out to be not feasible and we now have dependency analysis infra to patch those holes up anyway. We don't need to track dependencies of canonical code on such granularity.\r\n\r\nThe only exception to that were generic methods, but I'm fixing that by having the method generic dictionary (which is tracked as a runtime determined dependency of the canonical body) to also depend on the ShadowConcreteMethod (to make sure we can actually fill it).\r\n\r\nI'm doing this because the devirtualization in RyuJIT causes `getCallInfo` to be called with bogus `pResolvedToken` and we can no longer use that to get a `RuntimeDeterminedMethod` anyway."},{"Id":"6923267561","Type":"PullRequestEvent","CreatedAt":"2017-11-30T08:19:33","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4999","RelatedDescription":"Merged pull request \"enabled thread static fields in WebAssembly\" (#4999) at dotnet/corert","RelatedBody":"@morganbr \r\nI've enabled thread static fields, it's generating quite a bit more code as a result and it ended up pulling in some weirdness around virtual calls to System.Type. The EEType wasnt getting output, so I've put in a dependency for the owning type when calling a virtual method. If you have any ideas for a different place to trigger the reference for the EEType that works too."},{"Id":"6922747670","Type":"PullRequestEvent","CreatedAt":"2017-11-30T05:20:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5042","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5042) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6928214547","Type":"PullRequestEvent","CreatedAt":"2017-12-01T03:16:33","Actor":"wjk","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1782","RelatedDescription":"Opened pull request \"[WIP] Build time ResX code-behind generation\" (#1782) at dotnet/sdk","RelatedBody":"This is my stab at resolving #94. There are a few things to note about this PR, though:\r\n\r\n1. _This code is totally untested at this time._ I have neither written unit tests (because I have no idea how to write unit tests for this), nor tested it informally (because I don't know how to force override the SDK bundled with MSBuild/VS). Any pointers on either of these topics will be appreciated.\r\n2. As currently written this PR does not apply heuristics to determine whether or not a `*.resx` file should have its code-behind generated. In particular, localized `*.resx` files (`*.en-US.resx`, `*.fr-FR.resx`, etc) will result in multiple identical code-behinds being generated, causing double-definition errors during compile. Any pointers on a good way to avoid this would also be appreciated.\r\n3. Currently `*.resx` code-behind files will be generated before the `Compile` target runs. I am unsure if this is the correct extensibility point for this task. Also, code-behind files will not be generated during design-time builds; the project must be manually built by the user for code-behind files to be updated. I did this because I don't know a good way to rerun the generator target immediately after these files change using only MSBuild (and not any project-system code).\r\n\r\nAgain, please don't merge this until I have worked the bugs out and written some unit tests. Thanks!"},{"Id":"6927547043","Type":"IssuesEvent","CreatedAt":"2017-11-30T23:22:39","Actor":"malachib","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1781","RelatedDescription":"Opened issue \"Warning C4691 when building a C++/CLI executable\" (#1781) at dotnet/sdk","RelatedBody":"When using assemblies from NuGet, I am virtually guaranteed to encounter this warning\r\n\r\nAn easy example is when trying to use Microsoft.Extensions.Logger.  One can easily reproduce the issue with [this project](https://www.dropbox.com/s/9261ina8p4gyce1/SW-132v2.zip?dl=0)\r\n\r\nWe also [explored the issue on MSDN](https://social.msdn.microsoft.com/Forums/vstudio/en-US/fae48caa-7746-4c8f-9c44-839bd23ed128/warning-c4691-when-building-a-ccli-executable-referencing-microsoftextensionslogging-via-nuget?forum=vcgeneral)\r\n\r\nIf a) I am posting in the right place and b) you would like me to break it down more/provide more detail please let me know"},{"Id":"6927088490","Type":"IssuesEvent","CreatedAt":"2017-11-30T21:30:57","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1780","RelatedDescription":"Opened issue \"Migrating tasks from old csproj to new csproj format\" (#1780) at dotnet/sdk","RelatedBody":"_From @MNie on November 30, 2017 21:20_\n\nI'm currently in a process of migrating old csprojs to a new format. In some of them I have a msbuild task to replace app.config with app.debug/release.config (depending on build configuration).\r\nIn old csproj code to achieve that looks as follows:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n  <Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n    <!--Generate transformed app config in the intermediate directory-->\r\n    <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n    <!--Force build process to use the transformed configuration file from now on.-->\r\n    <ItemGroup>\r\n      <AppConfigWithTargetPath Remove=\"App.config\" />\r\n      <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n        <TargetPath>$(TargetFileName).config</TargetPath>\r\n      </AppConfigWithTargetPath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nCurrently I have a piece of code like this which in fact doesn't work, but project compiles with it:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" AfterTargets=\"Build\">\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nSo the question is, is it supported in new csproj format? \r\nIf yes, how I could port such task(s)?\r\nIf no, would it be supported in future?\r\n\r\nOS info:\r\nVisual studio 15.4.4\r\n\r\n\r\n[msbuild issue](https://github.com/Microsoft/msbuild/issues/2746)\n\n_Copied from original issue: dotnet/project-system#3011_"},{"Id":"6926663261","Type":"IssuesEvent","CreatedAt":"2017-11-30T19:57:59","Actor":"pakrym","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1779","RelatedDescription":"Opened issue \"Running Restore and Build on clean project in one invocation produces invalid deps\" (#1779) at dotnet/sdk","RelatedBody":"Repro:\r\n1. `dotnet new web`\r\n2. `rm obj -rec -force`\r\n3. `dotnet msbuild /t:\"Restore;Build\"`\r\n\r\nExpected:\r\n\r\n`.deps.json` file is trimmed\r\n```\r\n      \"System.ComponentModel/4.3.0\": {\r\n        \"dependencies\": {\r\n          \"System.Runtime\": \"4.3.0\"\r\n        }\r\n      },\r\n```\r\n\r\nActual:\r\n\r\n```\r\n      \"System.ComponentModel/4.3.0\": {\r\n        \"dependencies\": {\r\n          \"System.Runtime\": \"4.3.0\"\r\n        },\r\n        \"runtime\": {\r\n          \"lib/netstandard1.3/System.ComponentModel.dll\": {}\r\n        }\r\n      },\r\n```\r\n"},{"Id":"6926420465","Type":"PullRequestEvent","CreatedAt":"2017-11-30T19:06:21","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1776","RelatedDescription":"Merged pull request \"Merging dev/release/2.0 into release/2.0.0\" (#1776) at dotnet/sdk","RelatedBody":"FYI. @dotnet/dotnet-cli "},{"Id":"6926361234","Type":"PullRequestEvent","CreatedAt":"2017-11-30T18:54:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1758","RelatedDescription":"Closed pull request \"Update build script switch defaults for log, restore, and test to true\" (#1758) at dotnet/sdk","RelatedBody":"With these changes, you can simply run `build` on a clean copy of the repo and you'll get a successful build, tests will run, and a binary log will be created for investigation in case anything goes wrong.\r\n\r\nTo build with one of these options disabled, do this: `build -Test:$False`"},{"Id":"6926190500","Type":"PullRequestEvent","CreatedAt":"2017-11-30T18:17:55","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1778","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/15.5\" (#1778) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171130-080041\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171130-080041 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6926181023","Type":"PullRequestEvent","CreatedAt":"2017-11-30T18:15:50","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1775","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1775) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171129-080148\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171129-080148 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":28,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":210,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-12-01T05:30:21.0920043Z","RunDurationInMilliseconds":8132}