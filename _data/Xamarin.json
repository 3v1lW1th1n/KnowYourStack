{"Data":{"Blog":{"FeedItems":[{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null},{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7979577767","Type":"PullRequestEvent","CreatedAt":"2018-07-17T22:21:55","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1975","RelatedDescription":"Opened pull request \"[xabuild] MSBuild assemblies should not \"Copy Local\"\" (#1975) at xamarin/xamarin-android","RelatedBody":"Mono 2018-04 (or 5.14.x) has some changes to MSBuild assemblies that\r\ncause the following failure when using `xabuild.exe`:\r\n\r\n    Mono: The following assembly referenced from monodroid/external/xamarin-android/bin/Debug/bin/Microsoft.Build.Tasks.Core.dll could not be loaded:\r\n        Assembly:   System.Reflection.Metadata    (assemblyref_index=7)\r\n        Version:    1.3.0.0\r\n        Public Key: b03f5f7f11d50a3a\r\n\r\nCurrently `xabuild.exe` is referencing various MSBuild assemblies that\r\nget copied into `bin/$(Configuration)/bin` and shipped in the OSS zip.\r\n\r\nThis isn't exactly desirable, since we don't really want to ship these\r\nassemblies... These assemblies are OS-specific (as far as I can tell),\r\nI noticed that these assemblies coming from a zip built on macOS do\r\nnot work on Windows.\r\n\r\nSo instead, we can use `Private=False` item metadata on all MSBuild\r\nreferences and use custom assembly loading. By using the\r\n`AppDomain.AssemblyResolve` event, we can add some code to probe the\r\nMSBuild bin directory for assemblies. If not found, we can return\r\n`null` and let the runtime do its default behavior."},{"Id":"7979324852","Type":"PullRequestEvent","CreatedAt":"2018-07-17T21:18:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1968","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] CopyIfChanged use last \"write\" time\" (#1968) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1962\r\n\r\nSince 0adf1ae0, I believe that resource changes on macOS have been\r\nflaky--sometimes working, sometimes not. They have been consistenly\r\nworking on Windows, however...\r\n\r\nAfter writing the simplest test I could, I found that my machine on\r\nHigh Sierra could *sometimes* reproduce what our QA team was seeing. I\r\nhad to add the `[Repeat]` NUnit attribute before I could get the\r\nfailure to occur regularly.\r\n\r\nAfter debugging for quite some time, I noticed a mistake in the\r\n`CopyIfChanged` task. When comparing timestamps, it looks like it is\r\nusing the last *access* time of the destination file instead of the\r\nlast *write* time!\r\n\r\nI think this is likely a typo (unintended), since switching the call\r\nto `GetLastWriteTimeUtc` fixes the problem. Keeping the test is a good\r\nidea, because it seems a bit scary we didn't catch this yet..."},{"Id":"7979324824","Type":"IssuesEvent","CreatedAt":"2018-07-17T21:18:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1962","RelatedDescription":"Closed issue \"UpdateAndroidResgen target is skipped on High Sierra and Win 10 after touching a resource file\" (#1962) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build project once.\r\n2. Touch the layout file associated with the main activity of the project.\r\n3. Build project again.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n_UpdateAndroidResgen runs again after a minor change to a resource file. I'm seeing this in d15-8 on Windows 10 and macOS sierra.\r\n\r\nSierra - _UpdateAndroidResgen runs (passed):\r\nhttp://xqa.blob.core.windows.net/gist/sierra-build-out-c16e2eb482834b98993ea94a141c8ed5.txt\r\n\r\n### Actual Behavior\r\n_UpdateAndroidResgen does not run after a minor change to a resource file. I'm only seeing this in High Sierra macOS environments, and it does seem to be a regression in d15-8.\r\n\r\nHigh Sierra - _UpdateAndroidResgen is skipped (failed):\r\nhttp://xqa.blob.core.windows.net/gist/log-53f53861e0864f38a84e2bb99262e833.txt\r\n\r\n### Version Information\r\nhttps://gist.github.com/pjcollins/700067943fa1b5778c2559aa9d208535\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->\n\n> VS bug [#647693](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/647693)"},{"Id":"7978692315","Type":"PullRequestEvent","CreatedAt":"2018-07-17T19:09:20","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1961","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] we should set TargetFrameworkMonikerAssemblyAttributesPath\" (#1961) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/Microsoft/msbuild/blob/b3f9eeab651c92bade6e4f64d11b59aa39e149cb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3305\r\nFixes: https://github.com/xamarin/xamarin-android/issues/1960\r\n\r\nWhile reviewing build logs, I have noticed something very odd if you\r\nare building for `TargetFrameworkVersion=v6.0` and it gets switched to\r\na different one such as `TargetFrameworkVersion=v9.0`.\r\n\r\nHere is the `GenerateTargetFrameworkMonikerAttribute` target from\r\n`Microsoft.Common.CurrentVersion.targets`:\r\n\r\n    WriteLinesToFile\r\n        Parameters\r\n            File = C:\\Users\\myuser\\AppData\\Local\\Temp\\MonoAndroid,Version=v6.0.AssemblyAttributes.cs\r\n            Lines\r\n                // <autogenerated />\r\n                using System;\r\n                using System.Reflection;\r\n                [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\", FrameworkDisplayName = \"Xamarin.Android v9.0 Support\")]\r\n            Overwrite = True\r\n\r\nThis was *very* odd, since it was writing a file named\r\n`MonoAndroid,Version=v6.0.AssemblyAttributes.cs` but then writing\r\n`[assembly: TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\"]` into\r\nit!\r\n\r\nIt appears we are seeing MSBuild's implementation of how\r\n`[assembly: TargetFrameworkAttribute]` is added to a compiled assembly.\r\nIt writes to a temp file using the value from\r\n`$(TargetFrameworkMonikerAssemblyAttributesPath)`. We are not setting\r\nthis property in `Xamarin.Android.Common.targets` after modifying the\r\nvalue of `$(TargetFrameworkVersion)`.\r\n\r\n## What could this break?\r\n\r\nConsider building multiple Xamarin.Android projects at the same time\r\nwith different `TargetFrameworkVersion` settings. The builds could\r\n\"step on each other\" and write an inappropriate value into the temp\r\nfile!\r\n\r\nIn fact, this did actually occur in March, see an example from kzu\r\nhere: https://xamarinhq.slack.com/archives/C03CEGRUW/p1521475676000161\r\n\r\n    kzu: how is this even possible?\r\n\r\n            <AndroidUseLatestPlatformSdk>false</AndroidUseLatestPlatformSdk>\r\n            <TargetFrameworkVersion>v8.0</TargetFrameworkVersion>\r\n\r\n    kzu: run `Rebuild` from IDE. get warning\r\n\r\n            warning XA0105: The $(TargetFrameworkVersion) for App1.Android.dll (v8.1) is greater than the $(TargetFrameworkVersion) for your project (v8.0). You need to increase the $(TargetFrameworkVersion) for your project.\r\n\r\nIt looks like the contents of\r\n`MonoAndroid,Version=v8.0.AssemblyAttributes.cs` likely contained\r\n`v8.1`, causing an unexplicable warning. The file was also not getting\r\nupdated, even on a `Rebuild`!\r\n\r\nI added some additional code in `Xamarin.Android.Common.targets` to\r\nset the `$(TargetFrameworkMonikerAssemblyAttributesPath)`\r\nappropriately, and added a test to check for the problem.\r\n\r\nI used the exact code from MSBuild, but changed the file to live in\r\n`$(IntermediateOutputPath)`, as to avoid read/write race conditions if\r\nmultiple Xamarin.Android projects were being built on the same\r\nmachine.\r\n\r\nMSBuild core targets handle creating this file, cleaning it, etc.\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/b3f9eeab651c92bade6e4f64d11b59aa39e149cb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3302-L3337\r\n\r\nWe also need to add `$(TargetFrameworkMonikerAssemblyAttributesPath)`\r\nto the `FileWrites` item group so `IncrementalClean` and `Clean` work\r\nappropriately."},{"Id":"7978692286","Type":"IssuesEvent","CreatedAt":"2018-07-17T19:09:20","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1960","RelatedDescription":"Closed issue \"Incorrect $(TargetFrameworkMonikerAssemblyAttributesPath) behavior for MSBuild\" (#1960) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nWhile reviewing build logs, I have noticed something very odd if you\r\nare building for `TargetFrameworkVersion=v6.0` and it gets switched to\r\na different one such as `TargetFrameworkVersion=v9.0`.\r\n\r\nHere is the `GenerateTargetFrameworkMonikerAttribute` target from\r\n`Microsoft.Common.CurrentVersion.targets`:\r\n\r\n    WriteLinesToFile\r\n        Parameters\r\n            File = C:\\Users\\myuser\\AppData\\Local\\Temp\\MonoAndroid,Version=v6.0.AssemblyAttributes.cs\r\n            Lines\r\n                // <autogenerated />\r\n                using System;\r\n                using System.Reflection;\r\n                [assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\", FrameworkDisplayName = \"Xamarin.Android v9.0 Support\")]\r\n            Overwrite = True\r\n\r\nThis was *very* odd, since it was writing a file named\r\n`MonoAndroid,Version=v6.0.AssemblyAttributes.cs` but then writing\r\n`[assembly: TargetFrameworkAttribute(\"MonoAndroid,Version=v9.0\"]` into\r\nit!\r\n\r\nIt appears we are seeing MSBuild's implementation of how\r\n`[assembly: TargetFrameworkAttribute]` is added to a compiled assembly.\r\nIt writes to a temp file using the value from\r\n`$(TargetFrameworkMonikerAssemblyAttributesPath)`. We are not setting\r\nthis property in `Xamarin.Android.Common.targets` after modifying the\r\nvalue of `$(TargetFrameworkVersion)`.\r\n\r\n### Expected Behavior\r\n\r\nWe shouldn't be writing incorrect `TargetFrameworkVersion` values into `$(Temp)\\MonoAndroid,Version=*.AssemblyAttributes.cs` files.\r\n\r\n### Actual Behavior\r\n\r\nWe are writing incorrect `TargetFrameworkVersion` values into `$(Temp)\\MonoAndroid,Version=*.AssemblyAttributes.cs` files.\r\n\r\n### Version Information\r\n\r\nxamarin-android/master"},{"Id":"7978527679","Type":"IssuesEvent","CreatedAt":"2018-07-17T18:36:31","Actor":"manish","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1948","RelatedDescription":"Closed issue \"Android template fails to build with Release/lp/10/jl/res/values-v24/values-v24.xml(2): error APT0000: Error parsing XML: no element found\" (#1948) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an Android App using VS for Mac 7.6.0.2002 and Xamarin.Android 9.0.0.8\r\n2. Select Release mode\r\n3. Click BuildAll\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nThe project builds\r\n\r\n### Actual Behavior\r\n\r\nThe project build fails with\r\n\r\n`/Users/builder/agent/_work/r21/a/XQA.VSMac/XQA.VisualStudioMac/TestResults/8f4a5fb9/TestCreateBuildDroidApp/Temp/DroidApp/DroidApp/obj/Release/lp/10/jl/res/values-v24/values-v24.xml(2): error APT0000: Error parsing XML: no element found`\r\n\r\n\r\n### Version Information\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac (Preview) ===\r\n\r\nVersion 7.6 Preview (7.6 build 2002)\r\nInstallation UUID: 16bbdea0-6a1d-4254-ad2e-db7ed7beda70\r\nRuntime:\r\n\tMono 5.12.0.286 (2018-02/1bdbf71a8b2) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 512000286\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.0-preview1-26216-03\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.300-preview1-008174/Sdks\r\nSDK Versions:\r\n\t2.1.300-preview1-008174\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.3\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.6.0.11 (Visual Studio Enterprise)\r\nHash: 61d20a80\r\nBranch: \r\nBuild date: 2018-07-09 14:24:45-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.14.0.11 (Visual Studio Enterprise)\r\nHash: 61d20a80\r\nBranch: HEAD\r\nBuild date: 2018-07-09 14:24:45-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.0.0.8 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/builder/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3  (API level 15)\r\n\t\t4.4    (API level 19)\r\n\t\t4.4.87 (API level 20)\r\n\t\t5.0    (API level 21)\r\n\t\t5.1    (API level 22)\r\n\t\t6.0    (API level 23)\r\n\t\t7.0    (API level 24)\r\n\t\t7.1    (API level 25)\r\n\t\t8.0    (API level 26)\r\n\t\t8.1    (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 27.0.2\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_144\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.2\r\nHash: 213565e\r\nBranch: 1.4-release\r\nBuild date: Thu, 05 Jul 2018 17:45:17 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 706002002\r\nGit revision: 22cdc5b66a97e40229b5895483bf665040a537f2\r\nBuild date: 2018-07-09 20:18:47+00\r\nBuild branch: release-7.6\r\nXamarin extensions: 9b74953e8dfc5ee0439bf8387d58b62d4a24cf81\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Mon Mar  5 22:24:32 PST 2018\r\n    root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n\r\n\r\n\r\n```\r\n\r\n### Log File\r\n\r\nBuild Output: http://xqa.blob.core.windows.net/gist/log-585b2a7188244b99be514430de4b2806.txt\r\n\r\nMore Details: http://xqa.blob.core.windows.net/gist/TestReport-a073e7a34cb749ffb74f3e37f37b4234.txt\n\n> VS bug [#645539](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/645539)"},{"Id":"7977777593","Type":"IssuesEvent","CreatedAt":"2018-07-17T16:14:14","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1956","RelatedDescription":"Closed issue \"Design-Time Resource.designer.cs can get out of date\" (#1956) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. File | New Project\r\n2. Build\r\n3. Change the default namespace on the project, update `MainActivity.cs` to use it\r\n4. Build\r\n5. I get Intellisense errors because `obj\\Debug\\designtime\\Resource.designer.cs` does *not* have the new namespace!\r\n\r\nI tried reproducing it with a test, but this passes:\r\n```csharp\r\n[Test]\r\npublic void DesignTimeResourceDesignerChangeNamespace ()\r\n{\r\n\tconst string namespaceA = \"NamespaceA\", namespaceB = \"NamespaceB\";\r\n\tvar proj = new XamarinAndroidApplicationProject {\r\n\t\tRootNamespace = namespaceA\r\n\t};\r\n\tusing (var b = CreateApkBuilder (Path.Combine (\"temp\", TestName))) {\r\n\t\tb.Target = \"Compile\";\r\n\t\tAssert.IsTrue (b.Build (proj, parameters: new [] { \"DesignTimeBuild=True\" }), \"first DTB should have succeeded.\");\r\n\r\n\t\tvar designTimeResourceDesigner = b.Output.GetIntermediaryPath (Path.Combine (\"designtime\", \"Resource.designer.cs\"));\r\n\t\tFileAssert.Exists (designTimeResourceDesigner, \"We should have a Design-Time Resource.designer.cs!\");\r\n\t\tvar contents = File.ReadAllText (designTimeResourceDesigner);\r\n\t\tStringAssert.Contains ($\"[assembly: global::Android.Runtime.ResourceDesignerAttribute(\\\"{namespaceA}.Resource\\\", IsApplication=true)]\", contents);\r\n\t\tStringAssert.Contains ($\"namespace {namespaceA}\", contents);\r\n\r\n\t\t//change the namespace\r\n\t\tproj.RootNamespace = namespaceB;\r\n\t\tproj.MainActivity = proj.DefaultMainActivity.Replace (\"${ROOT_NAMESPACE}\", namespaceB).Replace (\"${PROJECT_NAME}\", proj.ProjectName);\r\n\t\tproj.Touch (\"MainActivity.cs\");\r\n\r\n\t\t//Now a regular build\r\n\t\tb.Target = \"Build\";\r\n\t\tAssert.IsTrue (b.Build (proj), \"first *regular* build should have succeeded.\");\r\n\t\tvar resourceDesigner = Path.Combine (Root, b.ProjectDirectory, \"Resources\", \"Resource.designer.cs\");\r\n\t\tFileAssert.Exists (resourceDesigner, \"We should have a Resources/Resource.designer.cs!\");\r\n\t\tcontents = File.ReadAllText (resourceDesigner);\r\n\t\tStringAssert.Contains ($\"[assembly: global::Android.Runtime.ResourceDesignerAttribute(\\\"{namespaceB}.Resource\\\", IsApplication=true)]\", contents);\r\n\t\tStringAssert.Contains ($\"namespace {namespaceB}\", contents);\r\n\r\n\t\t//Back to DTB\r\n\t\tb.Target = \"Compile\";\r\n\t\tAssert.IsTrue (b.Build (proj, parameters: new [] { \"DesignTimeBuild=True\" }), \"second DTB should have succeeded.\");\r\n\r\n\t\tFileAssert.Exists (designTimeResourceDesigner, \"We should have a Design-Time Resource.designer.cs!\");\r\n\t\tcontents = File.ReadAllText (designTimeResourceDesigner);\r\n\t\tStringAssert.Contains ($\"[assembly: global::Android.Runtime.ResourceDesignerAttribute(\\\"{namespaceB}.Resource\\\", IsApplication=true)]\", contents);\r\n\t\tStringAssert.Contains ($\"namespace {namespaceB}\", contents);\r\n\t}\r\n}\r\n```\r\n\r\nSo here is what I *think* is happening, but I'm not really sure:\r\n* After step 4, a DTB doesn't occur, because a full build occurred?\r\n* Should we overwrite the contents of `obj\\Debug\\designtime\\Resource.designer.cs` when `Resources\\Resource.designer.cs` is updated?\r\n\r\n@dellis1972 thoughts?\r\n\r\n### Expected Behavior\r\n\r\nI shouldn't get Intellisense errors when changing namespace on a project.\r\n\r\n### Actual Behavior\r\n\r\nI get Intellisense errors when changing namespace on a project.\r\n\r\n### Version Information\r\n\r\nI used VS 2017 15.7.4 on Windows to reproduce this"},{"Id":"7977596285","Type":"PullRequestEvent","CreatedAt":"2018-07-17T15:44:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1971","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] ManagedResourceParser should not throw\" (#1971) at xamarin/xamarin-android","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/Xamarin%20Project%20Mgrs/_workitems/edit/639674\r\n\r\nIf a user generates an invalid or incomplete xml file the\r\n`ManagedResourceParser` should not crash with an exception.\r\n\r\n\r\n> The \"GenerateResourceDesigner\" task failed unexpectedly.System.Xml.XmlException: Root element is missing.   at System.Xml.XmlTextReaderImpl.Throw(Exception e)   at System.Xml.XmlTextReaderImpl.ParseDocumentContent()   at System.Xml.XmlTextReaderImpl.Read()   at Xamarin.Android.Tasks.ManagedResourceParser.ProcessXmlFile(String file)   at Xamarin.Android.Tasks.ManagedResourceParser.ProcessResourceFile(String file)   at Xamarin.Android.Tasks.ManagedResourceParser.Parse(String resourceDirectory, IEnumerable`1 additionalResourceDirectories, Boolean isApp, Dictionary`2 resourceMap)   at Xamarin.Android.Tasks.GenerateResourceDesigner.Execute()   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nIt should issue a warning and let the build fail at a point\r\nwhere `aapt` can issue a decent error.\r\n\r\nIf we leave the error reporting to `aapt` users should know how\r\nto fix the issue, and get a decent error message."},{"Id":"7977593893","Type":"PullRequestEvent","CreatedAt":"2018-07-17T15:43:37","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1973","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Desugar now works without Proguard/MultiDex\" (#1973) at xamarin/xamarin-android","RelatedBody":"Looking into a customer's binding project, usage of\r\n`$(AndroidEnableDesugar)` was causing a crash at runtime where\r\n`mono.MonoRuntimeProvider` was completely missing from the APK.\r\nLooking into it further, it seemed that our desugar support only\r\nworked when used in combination with Proguard or MultiDex.\r\n\r\nWhat was happening:\r\n- The `<Desugar />` MSBuild task \"desugars\" the Xamarin.Android app\r\n  code into a `__app_classes__.jar` file\r\n- However `__app_classes__.jar` was not added to the `OutputJars`\r\n  output property\r\n- In `Xamarin.Android.Common.targets` a `@(_AlternativeJarForAppDx)`\r\n  item group is used for the input to `javac`, which does not contain\r\n  any of the Xamarin.Android app's Java code!\r\n\r\nIn fact, a workaround for the customer's project, was to add the\r\nfollowing to their Xamarin.Android app project file:\r\n\r\n    <ItemGroup>\r\n      <_AlternativeJarForAppDx Include=\"$(IntermediateOutputPath)android\\bin\\desugared\\__app_classes__.jar\" />\r\n    </ItemGroup>\r\n\r\n-- which was less than ideal.\r\n\r\nSo before I fixed the issue, I improved our tests:\r\n- Added a `DexUtils` class that invokes the `dexdump` command, so we\r\n  can assert that a dex file contains a specific Java class\r\n- Added `AndroidSdkDirectory` and `AndroidNdkDirectory` properties to\r\n  `Xamarin.ProjectTools`, since I needed the Android SDK path to use\r\n  `dexdump`\r\n- Fixed a bug where we need to use\r\n  `Environment.SpecialFolder.UserProfile`, or the\r\n  `android-toolchain\\sdk` directory is not found on Windows\r\n- Added an assertion to the desugar tests, checking that\r\n  `Lmono/MonoRuntimeProvider;` exists in the dex file\r\n- The desugar tests should also `ThrowOnBuildFailure` if desugar is\r\n  enabled\r\n\r\nNext, the fixes for desugar support:\r\n- We no longer need `InputClassesDirectory`, and do not need to\r\n  generate `__app_classes__.jar`, since it was not being used at all\r\n  anyway.\r\n- In `Xamarin.Android.Common.targets` we should include `classes.zip`\r\n  in the `@(_AlternativeJarForAppDx)` item group.\r\n- I updated the `<Desugar />` task to our new pattern of only logging\r\n  the `[Output]` properties\r\n\r\nThe new tests are now green!\r\n\r\nNote:\r\n- I tried *including* `__app_classes__.jar` at first, but proguard\r\n  commands were failing. When the app code was \"desugared\", required\r\n  attributes were removed such as `@Keep`. Since D8/R8 is the way\r\n  forward in the future, I thought it simpler to just omit the\r\n  creation of `__app_classes__.jar`."},{"Id":"7976917060","Type":"IssuesEvent","CreatedAt":"2018-07-17T14:02:24","Actor":"wescur88","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1972","RelatedDescription":"Opened issue \"Issues with Binding to jar file - reopened\" (#1972) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. See https://github.com/xamarin/xamarin-android/issues/1856#event-1704657271\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7980447412","Type":"IssuesEvent","CreatedAt":"2018-07-18T03:36:29","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3241","RelatedDescription":"Closed issue \"Custom renderer singleton mode. How do I do this?\" (#3241) at xamarin/Xamarin.Forms","RelatedBody":"Use a custom renderer to control platform-specific controls. Static global classes are singleton mode. How do I do this?"},{"Id":"7980062251","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:10:55","Actor":"Steve887","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3328","RelatedDescription":"Closed pull request \"Adding index check to PageController.InternalChildren\" (#3328) at xamarin/Xamarin.Forms","RelatedBody":"If `RegisterToolbar` is called before the page has `InternalChildren` setup, an `ArgumentOutOfRange` exception will thrown when the first child is retrieved to check for a `MasterDetailPage`.\r\n\r\n### Description of Change ###\r\n\r\nAdd count check to `PageController.InternalChildren` in `RegisterToolbar` to make sure at least one is present before getting it.\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x ] Changes adhere to coding standard\r\n"},{"Id":"7980028479","Type":"PullRequestEvent","CreatedAt":"2018-07-18T00:57:23","Actor":"Steve887","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3328","RelatedDescription":"Opened pull request \"Adding index check to PageController.InternalChildren\" (#3328) at xamarin/Xamarin.Forms","RelatedBody":"If `RegisterToolbar` is called before the page has `InternalChildren` setup, an `ArgumentOutOfRange` exception will thrown when the first child is retrieved to check for a `MasterDetailPage`.\r\n\r\n### Description of Change ###\r\n\r\nAdd count check to `PageController.InternalChildren` in `RegisterToolbar` to make sure at least one is present before getting it.\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x ] Changes adhere to coding standard\r\n"},{"Id":"7979699911","Type":"IssuesEvent","CreatedAt":"2018-07-17T22:57:59","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3246","RelatedDescription":"Closed issue \"Cache DataTemplates how to create from XAML\" (#3246) at xamarin/Xamarin.Forms","RelatedBody":"Hi, is there a way to create suitable for RecycleElementAndDataTemplate DataTemplate from xaml?\r\nNow I can not use my DataTemplateSelector for ListView using caching.\r\n\r\nThis method does not work:\r\n```xml\r\n <DataTemplate x:Key=\"UnknownPropertyDataTemplate\">\r\n        <x:Arguments>\r\n            <x:Type>\r\n                <properties:TextProperty/>\r\n            </x:Type>\r\n        </x:Arguments>\r\n        <Label Text=\"{Binding Value}\" FontSize=\"{StaticResource TextSizeField}\" \r\n                            FontFamily=\"{StaticResource SourceSansProRegular}\" IsFocused=\"{Binding IsSelected}\"\r\n                            TextColor=\"{StaticResource Foreground}\" \r\n                            IsEnabled=\"{Binding ReadOnly, Converter={StaticResource InvertBoolenConverter}}\" />\r\n    </DataTemplate>\r\n```"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7980158537","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:48:02","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4457","RelatedDescription":"Closed pull request \"Fix introspection test results on new macOS beta\" (#4457) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7980157357","Type":"PullRequestEvent","CreatedAt":"2018-07-18T01:47:37","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4459","RelatedDescription":"Opened pull request \"Bump for Xcode 10 beta 4\" (#4459) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7978953746","Type":"PullRequestEvent","CreatedAt":"2018-07-17T20:03:17","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4458","RelatedDescription":"Opened pull request \"Initial OpenGL deprecation\" (#4458) at xamarin/xamarin-macios","RelatedBody":"- Only on macOS\r\n- Only a subset of the uses are deprecated, see radar://42257568"},{"Id":"7978605705","Type":"PullRequestEvent","CreatedAt":"2018-07-17T18:52:00","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4457","RelatedDescription":"Opened pull request \"Fix introspection test results on new macOS beta\" (#4457) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7978487014","Type":"IssuesEvent","CreatedAt":"2018-07-17T18:28:36","Actor":"PureWeen","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4456","RelatedDescription":"Opened issue \"Issue Connecting to Mac Agent from Windows\" (#4456) at xamarin/xamarin-macios","RelatedBody":"_From @jitendrajadav on July 17, 2018 11:21_\n\n<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nGetting error even when the Mac credentials are correct.\r\n\r\nEarlier it was working fine but once I have update both VS then problem is started \r\nCredential is correct and sharing option is also fine no firewall problem \r\n\r\nPlease check log here :\r\n`Xamarin.VisualStudio.TastyPackage|Information|0|Hooked up SDB tracing adapter\r\nXamarin.VisualStudio.TastyPackage|Information|0|Initialization finished\r\nXamarin|Information|0|Xamarin - 4.10.10.2-d15-7+35a01d8dc\r\nXamarin.VisualStudio.TastyPackage|Information|0|Hooked up SDB tracing adapter\r\nXamarin.VisualStudio.TastyPackage|Information|0|Initialization finished\r\nXamarin.VisualStudio.Android.XamarinAndroidPackage|Warning|0|Initializing Xamarin.VisualStudio.Android.XamarinAndroidPackage\r\nXamarin.VisualStudio.TastyPackage|Information|0|Hooked up SDB tracing adapter\r\nXamarin.VisualStudio.TastyPackage|Information|0|Initialization finished\r\nXamarin.VisualStudio.IOS.XamarinIOSPackage|Warning|0|Initializing Xamarin.VisualStudio.IOS.XamarinIOSPackage.\r\nXamarin.Inspector|Information|0|Inspector extension loaded\r\nXamarin.Inspector|Error|0|[Inspector] Error preparing project for inspection\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Xamarin.VisualStudio.Inspector.VSInspectorSession.Create(Project proj, IServiceProvider serviceProvider) in E:\\A\\_work\\7\\s\\src\\Features\\VisualStudio.Inspector\\Vsix\\VSInspectorSession.cs:line 54\r\n   at Xamarin.VisualStudio.Inspector.XamarinInspectorPackage.RefreshInspectorSession() in E:\\A\\_work\\7\\s\\src\\Features\\VisualStudio.Inspector\\Vsix\\XamarinInspectorPackage.cs:line 166\r\nXamarin.VisualStudio.Android.ContinuousPlayerDeviceProvider|Information|0|Live player started\r\nXamarin.Inspector|Error|0|[Inspector] Error preparing project for inspection\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Xamarin.VisualStudio.Inspector.VSInspectorSession.Create(Project proj, IServiceProvider serviceProvider) in E:\\A\\_work\\7\\s\\src\\Features\\VisualStudio.Inspector\\Vsix\\VSInspectorSession.cs:line 54\r\n   at Xamarin.VisualStudio.Inspector.XamarinInspectorPackage.RefreshInspectorSession() in E:\\A\\_work\\7\\s\\src\\Features\\VisualStudio.Inspector\\Vsix\\XamarinInspectorPackage.cs:line 166\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|There is no active connection to a Mac Server, hence the remote build properties will not be set. The build will be performed offline.\r\nXamarin.VisualStudio.IOS.MonoTouchFlavoredProject|Information|0|Beggining Build for C:\\Project\\KegID\\KegID\\KegID.iOS\\KegID.iOS.csproj. Properties: ContinueOnDisconnected: True, ServerAddress: \r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): StateChange: Start -> EntryPointBreakpointRegistered\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): Constructed\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: TargetReady\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: TargetHitBreakpoint\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): StateChange: EntryPointBreakpointRegistered -> EntryPointBreakpointHit\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): AgentBridge.InjectAssembly: /storage/emulated/0/Android/data/SLG.KegID/files/.__override__/Xamarin.Interactive.dll\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): AgentBridge.InjectAssembly: /storage/emulated/0/Android/data/SLG.KegID/files/.__override__/Xamarin.Interactive.Android.dll\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): StateChange: EntryPointBreakpointHit -> BreakdanceInvoking\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): StateChange: BreakdanceInvoking -> BreakdanceStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStopped\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStopped\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStopped\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStopped\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStopped\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: ThreadStarted\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): HandleTargetEvent: TargetExited\r\nXamarin.Inspector|Information|0|InspectorDebugSession(0): Disposed\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Server State transition from DisconnectedState to ConfiguringState on SLG-MUM (192.168.137.5)\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Checking host configuration for connecting to 'SLG-MUM'...\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Checking host configuration for connecting to 'SLG-MUM'...\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Server State transition from ConfiguringState to DisconnectingState on SLG-MUM (192.168.137.5)\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Starting disconnection from SLG-MUM...\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Starting disconnection from SLG-MUM...\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|Server State transition from DisconnectingState to DisconnectedState on SLG-MUM (192.168.137.5)\r\nXamarin.Messaging.Integration.State.ServerStateContext|Information|0|The connection to 'SLG-MUM' has been finished\r\nXamarin.Messaging.Integration.State.ServerStateContext|Warning|0|Host 'SLG-MUM' couldn't be configured because the user authentication has been cancelled\r\n`\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\nIt should be connect successfully \r\n### Actual Behavior\r\ngetting error like invalid credential \r\n### Basic Information\r\nFor Windows : \r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.7.5\r\nVisualStudio.15.Release/15.7.5+27703.2042\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nC# Tools   2.8.3-beta6-63029-08. Commit Hash: e9a3a6c0ba5b1fde8b1fff964bdfb3fb768ee2eb\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2042\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.10.2 (35a01d8dc)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n\r\nFor Mac :\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.7.5\r\nVisualStudio.15.Release/15.7.5+27703.2042\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nC# Tools   2.8.3-beta6-63029-08. Commit Hash: e9a3a6c0ba5b1fde8b1fff964bdfb3fb768ee2eb\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2042\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.10.2 (35a01d8dc)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n\n\n_Copied from original issue: xamarin/Xamarin.Forms#3321_"},{"Id":"7977736772","Type":"IssuesEvent","CreatedAt":"2018-07-17T16:07:08","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4455","RelatedDescription":"Closed issue \"Disable <.>(Previous, Next ) buttons from iOS Default keyboard\" (#4455) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n1. I am having a html form loaded in a webview. When I click on the textfield , the keyboard appears\r\n2. After entering a text field , click on the next input field and enter some text.\r\n3. The keyboard appears with <,>( previous , next buttons) that navigate through the html form.\r\n\r\nIs there any way to disable the next and previous buttons. I do not want them to display on my keyboard.\r\n\r\nThis is disabled if we turn them off in Settings-> General -> Keyboard -> Shortcuts -> Toggle OFF\r\nBut Can we do this programmatically in a webview?\r\nOr is there some solution to disable the buttons in keyboard?\r\n\r\nSample code:\r\n        public override void ViewDidLoad()\r\n        {\r\n            ...\r\n            string path = NSBundle.MainBundle.ResourcePath;\r\n            string htmlpath = Path.Combine(path, \"Welcome.html\");\r\n            webView.LoadRequest(new NSUrlRequest(new NSUrl(htmlpath, true)));\r\n         }\r\n\r\nWelcome.html\r\n...\r\n<!--<form >-->\r\n       First name: <input type=\"text\" name=\"first_name\"/>\r\n       <br>\r\n      Last name: <input type=\"text\" name=\"last_name\"/>\r\n  </form>\r\n...\r\n\r\n### Expected Behavior\r\nThe <,>(Previous, Next ) buttons form the keyboard should not be visible when html form is loaded in a webview. \r\n### Actual Behavior\r\nWhen a html form is being filled, the keyboard shows next, previous buttons to navigate the form.\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":40,"FavoriteCount":22,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":91,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":31,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":62,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":21,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":66,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":21,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2018-07-18T05:30:58.4262959Z","RunDurationInMilliseconds":4075}