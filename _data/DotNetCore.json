{"Data":{"Blog":{"FeedItems":[{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7078606901","Type":"PullRequestEvent","CreatedAt":"2018-01-10T05:08:35","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15802","RelatedDescription":"Merged pull request \"Port servicing fix\" (#15802) at dotnet/coreclr","RelatedBody":"This is porting the servicing fix https://github.com/dotnet/coreclr/commit/8ce622d569fae9feb160399db03dc2b86577be1b with a small delta change to get rid of unsafe code in CultureData per Jan recommendation"},{"Id":"7078213830","Type":"IssuesEvent","CreatedAt":"2018-01-10T02:18:22","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15803","RelatedDescription":"Opened issue \"EventPipe emits a call stack on rundown events\" (#15803) at dotnet/coreclr","RelatedBody":"This data is unnecessary and increases the output trace file size\r\n\r\nFound by @vancem"},{"Id":"7078125973","Type":"PullRequestEvent","CreatedAt":"2018-01-10T01:44:15","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15802","RelatedDescription":"Opened pull request \"Port servicing fix\" (#15802) at dotnet/coreclr","RelatedBody":"This is porting the servicing fix https://github.com/dotnet/coreclr/commit/8ce622d569fae9feb160399db03dc2b86577be1b with a small delta change to get rid of unsafe code in CultureData per Jan recommendation"},{"Id":"7078082985","Type":"PullRequestEvent","CreatedAt":"2018-01-10T01:27:49","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15801","RelatedDescription":"Opened pull request \"Add ETL flags for ReadyToRun\" (#15801) at dotnet/coreclr","RelatedBody":"Add flags to track the presence of ReadyToRun codegen in an assembly\r\nand module.\r\n\r\nAdd jitting flags to indicate when a method is jitted because the\r\nprecompiled code was rejected, either by a profiler or by ReadyToRun\r\ndependence tracking.\r\n\r\nTogether these can be used to distingish between\r\n* methods jitted because their assemblies were not precompiled\r\n* methods jitted because they were not precompiled in an otherwise\r\nprecompiled assembly"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7078591343","Type":"PullRequestEvent","CreatedAt":"2018-01-10T05:01:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8353","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26109-02 (master)\" (#8353) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7078590122","Type":"PullRequestEvent","CreatedAt":"2018-01-10T05:00:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8351","RelatedDescription":"Merged pull request \"Merge rel/1.1.0-MSRC into rel/1.1.0\" (#8351) at dotnet/cli","RelatedBody":""},{"Id":"7078589571","Type":"PullRequestEvent","CreatedAt":"2018-01-10T05:00:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8350","RelatedDescription":"Merged pull request \"Merge release/2.1-MSRC into release/2.1\" (#8350) at dotnet/cli","RelatedBody":""},{"Id":"7078312510","Type":"PullRequestEvent","CreatedAt":"2018-01-10T02:57:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8341","RelatedDescription":"Merged pull request \"Update to ASP.NET Core shared framework 2.1.0-preview1-28031\" (#8341) at dotnet/cli","RelatedBody":"In 2.1.0, ASP.NET Core is replacing the runtime package store with a shared framework, similar to Microsoft.NETCore.App. This PR updates packages and installers to pull the sharedfx instead of the runtime store.\r\n\r\nIn this PR:\r\n - updates to 2.1.0-preview1-28031\r\n - Unifies aspnetcore packages and installer downloads to one version variable\r\n - Unifies to one aspnetcore myget feed\r\n\r\nNot in this PR:\r\n - orchestrated build support\r\n - because the \"trampoline\" from the 2.0 runtime store to 2.1 shared framework is not yet implemented in corehost, I'll send a second PR soon to include the 2.0 runtime store alongside the 2.1 aspnetcore shared fx. Our goal is to have the host updated so this can be removed before rtm.\r\n  "},{"Id":"7078003336","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:58:31","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8355","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-rtm-4791 into cli\" (#8355) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4791 into cli release/2.1 branch"},{"Id":"7077878302","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:11:56","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8352","RelatedDescription":"Closed pull request \"Create a 'symstore' directory to gather symbols\" (#8352) at dotnet/cli","RelatedBody":"Gather the just built symbols and binaries to a 'symstore' directory - so that they are ready to publish via VSO.\r\n\r\n**Current set:**\r\ndotnet.*\r\nMicrosoft.DotNet.Cli.Sln.Internal.*\r\nMicrosoft.DotNet.Cli.Utils.*\r\nMicrosoft.DotNet.Configurer.*\r\nMicrosoft.DotNet.InternalAbstractions.*\r\n"},{"Id":"7077761654","Type":"PullRequestEvent","CreatedAt":"2018-01-09T23:31:20","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8347","RelatedDescription":"Merged pull request \"CLI produce 'DEB' distro agnostic installer packages; CLI:master\" (#8347) at dotnet/cli","RelatedBody":"_CLI to produce 'DEB' distro agnostic installer packages..._\r\n\r\nDirectory.Build.props\r\nMinor reordering: Branding.props uses 'IsDebianBaseDistro' defined in DerivedHostMachineInfo.props\r\n\r\nREADME.md\r\nUpdated - see: https://github.com/johnbeisner/cli/blob/CoalesceDebInstaller/README.md\r\n\r\nBranding.props \r\nDEB filename token \"HostMonikerRid\" = \"x64\"\r\n\r\nLinuxDistrosNativeInstaller.props \r\nOnly build the 'DEB' on debian.8-x64; remove the two other 'DEB' entries.\r\n\r\nSandBoxAndPackageInParallel.proj \r\nNo change - formatting.\r\n\r\n**Please note:**\r\nPreviously produced set of DEB files:\r\ndotnet-sdk-version-ubuntu-x64.deb for Ubuntu 14.04 \r\ndotnet-sdk-version-debian-x64.deb for Debian 8\r\ndotnet-sdk-version-ubuntu.16.04-x64.deb for Ubuntu 16.04\r\n\r\nProposed set of DEB files:\r\ndotnet-sdk-version-x64.deb\r\n\r\n**Testing:**\r\nBuilt a private VSO definition:\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1272947&_a=summary\r\nPublished to private blob storage:\r\nhttps://dotnetcli.blob.core.windows.net/jbeisner/Sdk/2.2.0-preview1-007881/\r\n  \r\n  \r\n  "},{"Id":"7077624994","Type":"PullRequestEvent","CreatedAt":"2018-01-09T22:50:12","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8353","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26109-02 (master)\" (#8353) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7077606171","Type":"PullRequestEvent","CreatedAt":"2018-01-09T22:45:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8352","RelatedDescription":"Opened pull request \"Create a 'symstore' directory to gather symbols\" (#8352) at dotnet/cli","RelatedBody":"Gather the just built symbols and binaries to a 'symstore' directory - so that they are ready to publish via VSO.\r\n\r\n**Current set:**\r\ndotnet.*\r\nMicrosoft.DotNet.Cli.Sln.Internal.*\r\nMicrosoft.DotNet.Cli.Utils.*\r\nMicrosoft.DotNet.Configurer.*\r\nMicrosoft.DotNet.InternalAbstractions.*\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7071488221","Type":"PullRequestEvent","CreatedAt":"2018-01-08T20:14:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02408-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7068857812","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:21:16","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Closed issue \"\\\" (#619) at dotnet/standard","RelatedBody":""},{"Id":"7068855860","Type":"IssuesEvent","CreatedAt":"2018-01-08T10:20:47","Actor":"henkburgstra","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/619","RelatedDescription":"Opened issue \"\\\" (#619) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7078652523","Type":"IssuesEvent","CreatedAt":"2018-01-10T05:29:17","Actor":"MohammadHamdyGhanem","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26251","RelatedDescription":"Opened issue \"SIMD Numeric Arrays Operations\" (#26251) at dotnet/corefx","RelatedBody":"I suggest to add some SIMD operations to Array class, such as:\r\n\r\n```\r\nint[] a = {1, 2, 3, 4, 5, 6, 7, 8};\r\nint[] b = {1, 2, 3, 4, 5, 6, 7, 8};\r\nvar c = a + b ;\r\n```\r\n\r\nC# should contain {2, 4, 6, 8, 10, 12, 14, 16}\r\nIf a and b have different  lengths, C# can raise exception, or conceder missed elements in the shortest array to be zeroes.\r\nIf we want to do so, we can use Vector4 to calculate the result:\r\nvar Result1 = new Vector4(1, 2, 3, 4) + new Vector4(1, 2, 3, 4);\r\nvar Result2 = new Vector4(5, 6, 7, 8) + new Vector4(5, 6, 7, 8);\r\nThen add the elements from the two results to the array. This will be verbose and ugly long code to write! It's better to write this in a low level SIMD directly without the need for Vector4.\r\nLikewise, you can provide these operations for numeric arrays:\r\n```\r\nc = a - b ;\r\nc = a * b ;\r\nc = a / b ;\r\n```\r\nAlso, b can a scalar value that operates on all array elements:\r\n```\r\nc = a + 1 ;\r\nc = a - 1 ;\r\nc = a * 2 ;\r\nc = a / 3 ;\r\n```\r\n\r\nMaybe it's better to add a class Named Simd to the System.Numerics namespace, that performs these operations on numeric arrays.\r\n\r\n```\r\nc = Simd.Add (a, b)\r\nc = Simd.Add (a, 1)\r\n```\r\nThe same for Simd.Subtract , Simd.Multiply, Simd.Divide, Simd.Pow, Simd.Aggregate, etc.\r\nAdd as many common array tasks as you can, that can be use the SIMD feature."},{"Id":"7078393403","Type":"PullRequestEvent","CreatedAt":"2018-01-10T03:30:47","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26250","RelatedDescription":"Opened pull request \"Add System.Net.WebSocket.Protocol netstandard package.\" (#26250) at dotnet/corefx","RelatedBody":"fixes #21537 \r\n\r\ncc @karelz @stephentoub @wfurt \r\n\r\ncc @weshaggard @ericstj Can you please take a look at the packaging changes for oob assembly..\r\n\r\nShort summary:\r\n--------------------\r\nSplit the ```ManagedWebSocket``` class into 3 files: ```ManagedWebSocket.netstandard.cs``` and ```ManagedWebSocket.netcoreapp.cs```. I tried to put the common code in ```ManagedWebSocket.Common.cs```. Refactoring out common parts seemed like a backward effort, where all the Span/Memory enhancements may have to be abandoned. So I prioritized enhancements over common code, where the change was tricky to make. Needless to say, the ```*.netcoreapp.cs``` file contains Span/Memory stuff, and the ```*.netstandard.cs``` contains ArraySegment/byte[] stuff.\r\n\r\nTesting:\r\n-----------------\r\nI was not able to get a successful test with ```WebSocket.ReceiveAsync```, it fails in ReceiveAsync, because the response from the server is not in the right format. So the code fails with ```ProtocolError``` in ```ReceiveAsync```. The behavior is same with and without this refactoring. Hence didn't include ```ReceiveAsync``` in the ```WebSocketProtocol_CreateFromConnectedStream_Succeeds``` outerloop test."},{"Id":"7078332623","Type":"PullRequestEvent","CreatedAt":"2018-01-10T03:05:29","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26249","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26109-03, preview1-26110-01, preview1-26109-02, respectively (master)\" (#26249) at dotnet/corefx","RelatedBody":""},{"Id":"7078243392","Type":"IssuesEvent","CreatedAt":"2018-01-10T02:29:59","Actor":"JohnRusk","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26248","RelatedDescription":"Opened issue \"NetworkInterface.Description is not useful on Linux\" (#26248) at dotnet/corefx","RelatedBody":"I see that, in #8297, the decision was been made for this property to just return the name of the interface, on Linux.  E.g. \"eth0\", whereas on Windows it returns a useful description of the make and model of the interface card.  It was also mentioned in that same issue, that the description could be improved in the future.\r\n\r\nIs there any possibility now of improving it to make it work more like the Windows version?  I'm writing a data transfer tool, which logs information about the environment it runs in. A meaningful description of the network adapter would be very useful.\r\n\r\nOr, if there's no possibility of improving it, could the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.networkinterface.description?view=netframework-4.7.1#System_Net_NetworkInformation_NetworkInterface_Description) please be changed to reflect the different behavior on Linux?  Right now the documentation says \"human-readable text that typically describes the interface vendor, type (for example, Ethernet), brand, and model\", which is definitely not the case on Linux at present. \r\n\r\n\r\n"},{"Id":"7078103979","Type":"PullRequestEvent","CreatedAt":"2018-01-10T01:35:57","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26230","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-26109-01, preview1-26109-01, preview1-26108-03, beta-26109-00, beta-26109-00, respectively (master)\" (#26230) at dotnet/corefx","RelatedBody":""},{"Id":"7078046907","Type":"IssuesEvent","CreatedAt":"2018-01-10T01:14:38","Actor":"geleems","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25620","RelatedDescription":"Closed issue \"Possible Critical Bug/Issue with SqlConnection in .NET Core 2.0 when running on Linux or Linux Containers and having multiple concurrent users like in a Load Test\" (#25620) at dotnet/corefx","RelatedBody":"POSSIBLE ISSUE/BUG\r\nWhen load testing with not many concurrent users (just like 20, 50 or more concurrent users)  we've found a Possible Critical Bug/Issue with SqlConnection in .NET Core 2.0 when running on Linux or Linux Containers.\r\nWe might be missing something, but I don't see it.\r\nThis is happening only when running SqlClient in .NET Core 2.0 on Linux or Linux-containers.\r\nWhen running on Windows or Windows Containers, there are no issues, so, that is a bad symptom...\r\n\r\n```\r\nError when load testing:\r\nSystem.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred\r\nwhile establishing a connection to SQL Server. The server was not found or was not accessible. Verify that \r\nthe instance name is correct and that SQL Server is configured to allow remote connections. (provider: \r\nTCP Provider, error: 40 - Could not open a connection to SQL Server) at \r\nSystem.Data.ProviderBase.DbConnectionPool.TryGetConnection(...\r\n```\r\n\r\nREPRO:\r\nWe have created a very simple project to repro the issue.\r\nIt is an ASP.NET Core Web API with two methods to run:\r\n1.\tMethod running a plain native SqlConnection with a query.\r\n2.\tMethod running a query with Dapper based on a query.\r\n3.\tWhen using EF Core, it should happen the same, but for the repro we perefered to go to the simplest repro which is just to use a SqlConntection.\r\n\r\nBasically, the issue is related to SqlConnection, not from higher level frameworks like EF Core or Dapper, as it happens whenever .NET Core 2.0 SqlConnection  is used on LINUX. \r\n\r\nYou can get the repro code from here (Simple ASP.NET Core 2.0 Web API with SqlConnection):\r\n\r\n[https://github.com/CESARDELATORRE/SQLConnNetCore2IssueRepro](https://github.com/CESARDELATORRE/SQLConnNetCore2IssueRepro)\r\n\r\nThis is the Web API method when using simply a SqlConntection:\r\n```C#\r\n[HttpGet(\"native\")]\r\npublic async Task<IActionResult> GetNative()\r\n{\r\n    var connectionString = \"Server=tcp:eshopsql-e3h5ug5xd3rfs.database.windows.net,1433;Initial Catalog=orderingdb;Persist Security Info=False;User ID=eshop;Password=MY-PASSWORD;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Max Pool Size=400;Connection Timeout=30;\";\r\n    using (var connection = new SqlConnection(connectionString))\r\n    {\r\n        try\r\n        {\r\n            connection.Open();\r\n            var command = connection.CreateCommand();\r\n            command.CommandText = @\"SELECT o.[Id] as ordernumber,o.[OrderDate] as [date],os.[Name] as [status],SUM(oi.units*oi.unitprice) as total\r\n                FROM [ordering].[Orders] o\r\n                LEFT JOIN[ordering].[orderitems] oi ON  o.Id = oi.orderid \r\n                LEFT JOIN[ordering].[orderstatus] os on o.OrderStatusId = os.Id                     \r\n                GROUP BY o.[Id], o.[OrderDate], os.[Name] \r\n                ORDER BY o.[Id]\";\r\n            var reader = command.ExecuteReader(System.Data.CommandBehavior.CloseConnection);\r\n            var count = 0;\r\n            while (reader.Read())\r\n            {\r\n                count += 1;\r\n            }\r\n            return Ok(count);\r\n        }\r\n        catch (Exception x)\r\n        {\r\n            throw new InvalidOperationException(x.ToString());\r\n        }\r\n    }\r\n}\r\n```\r\nThe database is actually running on an Azure SQL Database so we test it against a hypothetical \"production\" database. But this issue happens the same way if the SQL Database is running in a SQL Container.\r\n\r\nIf I deploy the container/solution from VS into Docker for Windows (running on the Linux VM), the Web API runs OK, as in the following screenshot:\r\nNOTE that the URL has to provide \"/native\" at the end.\r\n\r\nThe tables in SQL currently have no registries, hence \"0\" as return value. But the query is being executed:\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/33460579-ae95c594-d5e3-11e7-864a-7d0086760a01.png)\r\n\r\nIf you want to try with Dapper, try the same URL but ending on \"/dapper\" which will execute a different code/method.\r\n\r\nYou can see the Web API container running in the local Docker Linux VM:\r\n![image](https://user-images.githubusercontent.com/1712635/33460652-f50e2e94-d5e3-11e7-99fe-4b4595aadc03.png)\r\n\r\nThen, if we do Load Testing and simulate concurrent users, this is when we start getting a lot of errors from SqlConntection, like this:\r\n\r\n`System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server) at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection) at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions) at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions) at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry) at System.Data.SqlClient.SqlConnection.Open() at \r\n`\r\n\r\nContact me at cesardl at microsoft.com for further info about the issue.\r\n\r\n  "},{"Id":"7078029796","Type":"PullRequestEvent","CreatedAt":"2018-01-10T01:08:12","Actor":"geleems","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26247","RelatedDescription":"Opened pull request \"Fix for SqlConnection failure when having multiple concurrent users\" (#26247) at dotnet/corefx","RelatedBody":"This is a fix for issue https://github.com/dotnet/corefx/issues/25620\r\nIn .NET Core 2.0, SqlConnection failed on not many multiple concurrent users during ASP.NET web application load testing."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7078409351","Type":"IssuesEvent","CreatedAt":"2018-01-10T03:37:39","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22112","RelatedDescription":"Closed issue \"ASYNC Main Does not Respect [STAThread]\" (#22112) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n2017.3\r\n**Steps to Reproduce**:\r\nRun this code:\r\n````\r\n[STAThread]\r\nstatic async Task Main(string[] args) {\r\n\tConsole.WriteLine(System.Threading.Thread.CurrentThread.ApartmentState);\r\n}\r\n````\r\n\r\n**Expected Behavior**:\r\nI expect the thread to be STA.\r\n\r\n**Actual Behavior**:\r\nThe thread is MTA.\r\n"},{"Id":"7078303606","Type":"IssuesEvent","CreatedAt":"2018-01-10T02:53:44","Actor":"rolandh","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24140","RelatedDescription":"Opened issue \"Leading underscores in numeric literals (C#7.2 Feature) has squiggly underline error.\" (#24140) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n15.6.0 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Make a new project with C# 7.2 and the following line of code\r\n`int binaryValue = 0b_0101_0101;`\r\n\r\n**Expected Behavior**:\r\nNo warnings or squiggly underlines\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1109554/34753707-5f3db394-f609-11e7-907e-e59fbc7aee1b.png)\r\nError indicated however no build errors.\r\n\r\n"},{"Id":"7078041822","Type":"IssuesEvent","CreatedAt":"2018-01-10T01:12:43","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23436","RelatedDescription":"Closed issue \"Null ref on GetTrackingLineColumn\" (#23436) at dotnet/roslyn","RelatedBody":"variable misuse ML model tool found a null ref bug on https://github.com/dotnet/roslyn/blob/b4006aa257d30a8fcef926444b79063ca57ba6df/src/VisualStudio/Core/Def/Implementation/TableDataSource/AbstractTableEntriesSnapshot.cs#L165\r\n\r\nbasically, wrong snapshot is given, and null ref exception will be thrown."},{"Id":"7078031405","Type":"PullRequestEvent","CreatedAt":"2018-01-10T01:08:50","Actor":"t-camaia","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24139","RelatedDescription":"Opened pull request \"CS1628 error text mentions local functions\" (#24139) at dotnet/roslyn","RelatedBody":"Updated ERR_AnonDelegateCantUse error text to mention local functions. Also, a comment in a Local Function test was changed in order to keep it consistent.\r\n\r\nFixes #23386."},{"Id":"7077968008","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:45:09","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24138","RelatedDescription":"Opened issue \"Generate method does not infer 'bool' return type for method generated in a case-when clause\" (#24138) at dotnet/roslyn","RelatedBody":""},{"Id":"7077961150","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:42:36","Actor":"natemcmaster","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24137","RelatedDescription":"Opened issue \"Long-running VBCSCompiler.dll process runs at 100% CPU after parent process dies\" (#24137) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nUsing dotnet SDK 2.2.0-preview1-007866 on macOS 10.13.2\r\n\r\n**Steps to Reproduce**:\r\nTBH not sure 100% how to get into bad state. I don't know what is launching VBCSCompiler.dll. The parent process is gone...which is the issue.\r\n\r\nBut, it has been happening fairly often over the last few days while working on the https://github.com/dotnet/cli repo using VS Code - Insiders + C# extension 1.13.1.\r\n\r\nIf someone can point me to how to capture more information about how this long-running compiler server starts, I can provide a better repro.\r\n\r\n**Expected Behavior**:\r\nNo long running compiler process after I shutdown tools and build scripts.\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/2696087/34750111-03aae97a-f55a-11e7-86ac-6bd6c6f97a22.png)\r\n\r\nVS Code is closed, and I've killed the the build.sh script, yet I have two VBCSCompiler processes running. `ps` reports the processes have been open for ~ 18 hours.\r\n\r\nThe process was launched with these arguments:\r\n```\r\n/Users/namc/.dotnet/dotnet /Users/namc/.dotnet/sdk/2.2.0-preview1-007866/Roslyn/bincore/VBCSCompiler.dll -pipename:namc.False.bZ9mpL2HFmG8IVwxPkEmz6_N4OMYW1cLZOeZGRjGfv0\r\n```\r\n\r\nProcess sample: \r\n[processample.txt](https://github.com/dotnet/roslyn/files/1617126/processample.txt)\r\n\r\n"},{"Id":"7077959924","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:42:09","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24136","RelatedDescription":"Opened issue \"Extract method not offered for expression in 'when' clause of a switch/case pattern match.\" (#24136) at dotnet/roslyn","RelatedBody":""},{"Id":"7077939157","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:34:26","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24135","RelatedDescription":"Opened issue \"Speculative semantic model produces different behavior for local functions \" (#24135) at dotnet/roslyn","RelatedBody":"See the behavior in this test:\r\n\r\n```csharp\r\n        [Fact]\r\n        public void LocalFunctionAttribute()\r\n        {\r\n            const string text = @\"\r\nusing System;\r\nclass A : Attribute {}\r\n\r\nclass C\r\n{\r\n    static void M()\r\n    {\r\n        void local<[A]T>() {}\r\n    }\r\n}\";\r\n            var tree = SyntaxFactory.ParseSyntaxTree(text);\r\n            var comp = CreateStandardCompilation(tree);\r\n            var model = comp.GetSemanticModel(tree);\r\n            var a = tree.GetRoot().DescendantNodes()\r\n                .OfType<IdentifierNameSyntax>().ElementAt(2);\r\n            Assert.Equal(\"A\", a.Identifier.Text);\r\n            var attrInfo = model.GetSymbolInfo(a);\r\n            var attrType = comp.GlobalNamespace.GetTypeMember(\"A\");\r\n            var attrCtor = attrType.GetMember(\".ctor\");\r\n            Assert.Equal(attrCtor, attrInfo.Symbol);\r\n\r\n            // Assert that this is also true for the speculative semantic model\r\n            var newTree = SyntaxFactory.ParseSyntaxTree(text + \" \");\r\n            var m = newTree.GetRoot()\r\n                .DescendantNodes().OfType<MethodDeclarationSyntax>().Single();\r\n\r\n            Assert.True(model.TryGetSpeculativeSemanticModelForMethodBody(m.Body.SpanStart, m, out model));\r\n\r\n            a = newTree.GetRoot().DescendantNodes().OfType<IdentifierNameSyntax>().ElementAt(2);\r\n            Assert.Equal(\"A\", a.Identifier.Text);\r\n\r\n            // If we aren't using the right binder here, the compiler crashes going through the binder factory\r\n            var info = model.GetSymbolInfo(a);\r\n            Assert.Equal(attrType, info.Symbol);\r\n        }\r\n```\r\n\r\nWhen using the regular semantic model, the symbol returned by GetSymbolInfo is the attribute constructor. When using the speculative semantic model, the type is returned instead.\r\n\r\nThe root cause of this seems to be that `TryGetSpeculativeSemanticModelForMethodBody` directly returns a MethodBody semantic model, which bypasses the `GetMemberModel` call which may be needed to retrieve a more specific model (like an Attribute or InitializerSemanticModel) that may be needed to bind pieces of local functions."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7077900154","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:19:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5232","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5232) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7077769510","Type":"PullRequestEvent","CreatedAt":"2018-01-09T23:34:00","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5232","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5232) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7077482426","Type":"PullRequestEvent","CreatedAt":"2018-01-09T22:13:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5231","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5231) at dotnet/corert","RelatedBody":""},{"Id":"7077338895","Type":"PullRequestEvent","CreatedAt":"2018-01-09T21:39:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5231","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5231) at dotnet/corert","RelatedBody":""},{"Id":"7077336815","Type":"PullRequestEvent","CreatedAt":"2018-01-09T21:39:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5230","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5230) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7077331642","Type":"PullRequestEvent","CreatedAt":"2018-01-09T21:38:05","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5230","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5230) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7078003161","Type":"PullRequestEvent","CreatedAt":"2018-01-10T00:58:27","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1851","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-rtm-4791 into sdk\" (#1851) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4791 into sdk release/2.1 branch"},{"Id":"7078001360","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:57:47","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1846","RelatedDescription":"Closed issue \"Calling publish for two TFM fails with 2.1\" (#1846) at dotnet/sdk","RelatedBody":"I guess when I've updated VisualStudio to 15.3, it also installed SDK 2.1. In any case, the two calls:\r\n\r\n```\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework netstandard2.0\r\nC:\\...\\dotnet.exe publish C:\\...\\My.csproj --configuration Debug --framework net461\r\n```\r\n\r\nPreviously worked without any issues. The project was published for both frameworks correctly (MSBuild task library). But now, I get:\r\n\r\n>  C:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.Net.Http\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.IO.Compression\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.2\\Microsoft.Common.CurrentVersion.targets(2041,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime.InteropServices.RuntimeInformation\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\nerror CS0433: The type 'SerializableAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\nerror CS0433: The type 'NonSerializedAttribute' exists in both 'System.Runtime.Serialization.Formatters, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n\r\nI guess this is because of some dependency issues. ~~When I'm cleaning the `obj` folder, I can correctly publish for `net461` again.~~ It's actually the ` bin` folder I have to delete, in order to make `dotnet publish` work.\r\n\r\nAdding `--force` doesn't solve anything. This is the most surprising thing actually. \r\n\r\n  "},{"Id":"7077957329","Type":"IssuesEvent","CreatedAt":"2018-01-10T00:41:11","Actor":"tim241","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1850","RelatedDescription":"Opened issue \"[Arch Linux] The requested URL returned error: 40\" (#1850) at dotnet/sdk","RelatedBody":"Hello, when I execute the `build.sh`, the links\r\n`https://dotnetcli.azureedge.net/dotnet/Runtime/1.0.5/dotnet-runtime-1.0.5-linux-x64.tar.gz` \r\n`https://dotnetcli.azureedge.net/dotnet/Runtime/1.1.2/dotnet-runtime-1.1.2-linux-x64.tar.gz`\r\nfrom the `artifacts/.dotnet/2.2.0-preview1-007849/dotnet-install.sh` script\r\naren't valid anymore, they return a `404` error\r\nfull output: [build.log](https://gist.github.com/853508eb9932ca0a0f5c9a9500c8b8b9)\r\nI don't know if this is a dotnet-sdk issue, but the error arrives when executing the `build.sh` script from this repo.\r\nI do know that it downloads [this](https://github.com/dotnet/sdk/blob/master/build/build.sh#L137) script from [here](https://github.com/dotnet/sdk/blob/master/build/build.sh#L142)."},{"Id":"7076950747","Type":"IssuesEvent","CreatedAt":"2018-01-09T20:08:00","Actor":"bording","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1849","RelatedDescription":"Opened issue \"Regression in template packages in 2.1.4 SDK\" (#1849) at dotnet/sdk","RelatedBody":"Doing a diff between the 2.13 and 2.14 SDK folders, I noticed that the 2.1.4 SDK appears to have included an older version of some template NuGet packages.\r\n\r\n2.1.3\r\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171117-314.nupkg\r\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171117-314.nupkg\r\n\r\n2.1.4\r\n- microsoft.dotnet.common.itemtemplates.1.0.0-beta3-20171110-312.nupkg\r\n- microsoft.dotnet.test.projecttemplates.2.0.1.0.0-beta3-20171110-312.nupkg\r\n\r\n\r\nI haven't cracked open the packages to see what might be different between them, bit it seemed odd for a newer SDK to be including older packages. Was this intentional?\r\n\r\n"},{"Id":"7076201864","Type":"IssuesEvent","CreatedAt":"2018-01-09T17:18:05","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1835","RelatedDescription":"Closed issue \"Allow all configProperties in csproj\" (#1835) at dotnet/sdk","RelatedBody":"runtimeOptions->configProperties are allowed in csproj: https://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj#runtimeoptions\r\n\r\nThere is a new option introduced for invariant globalization:\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md#enabling-the-invariant-mode\r\n\r\nAllowing this to be set in proj files as `<InvariantGlobalization>true</InvariantGlobalization>` will make it consistent with rest of the set.\r\n\r\nFor such future properties and if it is safe, can there be an automatic key pattern mapping that will transform any `<namespace>.<type>.<feature>.<property>` in runtimeconfig.json under configProperties to `<feature><property><type>` and `<namespace>.<type>.<feature>` to `<feature><type>` in camel-casing in project files?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":10,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":40,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":46,"FavoriteCount":36,"RawContent":null},{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-01-10T05:30:21.5676366Z","RunDurationInMilliseconds":8771}