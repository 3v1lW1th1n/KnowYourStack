{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":170,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6888337869","Type":"PullRequestEvent","CreatedAt":"2017-11-22T05:13:39","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15145","RelatedDescription":"Merged pull request \"Add Decimal.TryFormat span-based method\" (#15145) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/25372\r\nContributes to https://github.com/dotnet/coreclr/issues/13544\r\n\r\ncc: @jkotas "},{"Id":"6888337187","Type":"IssuesEvent","CreatedAt":"2017-11-22T05:13:21","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15159","RelatedDescription":"Opened issue \"JIT test errors on Unix when changing decimal to explicit layout\" (#15159) at dotnet/coreclr","RelatedBody":"As part of unifying decimal's formatting code between coreclr and corert, @jkotas suggested I make decimal have an explicit layout, as it is in corert.  In doing so, a handful of JIT tests started failing:\r\n```\r\nJIT.Directed.coverage.oldtests.lclfldadd_cs_r.lclfldadd_cs_r\r\nJIT.Directed.perffix.primitivevt.mixed1_cs_ro.mixed1_cs_ro\r\nJIT.Methodical.fp.exgen.1000w1d_cs_r.1000w1d_cs_r\r\nJIT.Methodical.fp.exgen.1000w1d_cs_ro.1000w1d_cs_ro\r\nJIT.Methodical.fp.exgen.1000w1d_cs_do.1000w1d_cs_do\r\nJIT.Methodical.fp.exgen.1000w1d_cs_d.1000w1d_cs_d\r\nJIT.Methodical.fp.exgen.10w5d_cs_d.10w5d_cs_d\r\nJIT.Methodical.fp.exgen.10w5d_cs_do.10w5d_cs_do\r\nJIT.Methodical.fp.exgen.10w5d_cs_ro.10w5d_cs_ro\r\nJIT.Methodical.fp.exgen.200w1d-02_cs_do.200w1d-02_cs_do\r\nJIT.Methodical.fp.exgen.10w5d_cs_r.10w5d_cs_r\r\nJIT.Methodical.fp.exgen.200w1d-02_cs_ro.200w1d-02_cs_ro\r\nJIT.Directed.perffix.primitivevt.mixed1_cs_do.mixed1_cs_do\r\n```\r\nThe failures would seem to indicate a JIT/runtime bug, as they're frequently eminating from code other than decimal, suggesting that something is getting corrupted, e.g.\r\n```\r\nFAILED   - JIT/Methodical/fp/exgen/200w1d-02_cs_ro/200w1d-02_cs_ro.sh\r\n               BEGIN EXECUTION\r\n               /mnt/j/workspace/dotnet_coreclr/master/checked_ubuntu_tst_prtest/bin/tests/Windows_NT.x64.Checked/Tests/coreoverlay/corerun 200w1d-02_cs_ro.exe\r\n\r\n               Unhandled Exception: System.OverflowException: Value was either too large or too small for an Int32.\r\n                  at System.Convert.ThrowInt32OverflowException()\r\n                  at System.Convert.ToInt32(Int64 value)\r\n                  at testout1.Func_0()\r\n                  at testout1.Main()\r\n               ./200w1d-02_cs_ro.sh: line 243: 101339 Aborted                 (core dumped) $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\nThese failures are only occurring on Unix.\r\n\r\nHere's the commit that undoes the explicit layout; reverting this commit yields the failures.\r\nhttps://github.com/dotnet/coreclr/pull/15145/commits/dc35586ecd37be9d2517244175da8b84a1237005"},{"Id":"6888238317","Type":"PullRequestEvent","CreatedAt":"2017-11-22T04:28:56","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15158","RelatedDescription":"Opened pull request \"Move ArraySegment and a few other files to shared CoreLib partition\" (#15158) at dotnet/coreclr","RelatedBody":""},{"Id":"6887934583","Type":"PullRequestEvent","CreatedAt":"2017-11-22T02:26:16","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15157","RelatedDescription":"Opened pull request \"[RyuJit][x86] Set unused flag when replace an unused parent with a child.\" (#15157) at dotnet/coreclr","RelatedBody":"\r\n\r\nFix DevDiv_524309"},{"Id":"6887918314","Type":"PullRequestEvent","CreatedAt":"2017-11-22T02:20:18","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15144","RelatedDescription":"Merged pull request \"format spmi source\" (#15144) at dotnet/coreclr","RelatedBody":""},{"Id":"6887873005","Type":"IssuesEvent","CreatedAt":"2017-11-22T02:02:59","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14860","RelatedDescription":"Reopened issue \"[RyuJIT/arm32][JITMinOpts=1] Test runtime failures\" (#14860) at dotnet/coreclr","RelatedBody":"The following tests fail with `COMPlus_JITMinOpts=1` on Windows arm32.\r\n\r\n```\r\nGC\\LargeMemory\\Allocation\\finalizertest\\finalizertest.cmd\r\nJIT\\IL_Conformance\\Old\\Conformance_Base\\ldc_add_ovf_u4\\ldc_add_ovf_u4.cmd\r\n```\r\n\r\nCI job:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_minopts_prtest/7/consoleText\r\n\r\nResults:\r\n```\r\nRunning: C:\\brucefo\\Windows_NT.arm.Release.2017-11-03\\GC\\LargeMemory\\Allocation\\finalizertest\\finalizertest.cmd -coreroot c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\\corerun.exe\" finalizertest.exe 2048\r\n0 2147483648\r\nallocateInFinalizerTest failed\r\nOOM\r\nLarge Memory Machine required\r\nTest failed\r\nExpected: 100\r\nActual: 0\r\nEND EXECUTION - FAILED\r\nFAILED\r\nRunning: C:\\brucefo\\Windows_NT.arm.Release.2017-11-03\\JIT\\IL_Conformance\\Old\\Conformance_Base\\ldc_add_ovf_u4\\ldc_add_ovf_u4.cmd -coreroot c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-03\\corerun.exe\" ldc_add_ovf_u4.exe\r\nExpected: 100\r\nActual: 101\r\nEND EXECUTION - FAILED\r\n```\r\n\r\nIt also looks like\r\n```\r\nGC\\Regressions\\dev10bugs\\536168\\536168\\536168.cmd \r\n```\r\nfails, because it hangs. It also hangs without `COMPlus_JITMinOpts=1`.\r\n"},{"Id":"6887854280","Type":"IssuesEvent","CreatedAt":"2017-11-22T01:56:17","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15156","RelatedDescription":"Opened issue \"[RyuJIT/arm32][JitStress=2][JitStressRegs=3] Test failure: dlstack.cmd\" (#15156) at dotnet/coreclr","RelatedBody":"Test `GC\\Scenarios\\DoublinkList\\dlstack\\dlstack.cmd` fails with:\r\n\r\n```\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=3\r\n```\r\n\r\noutput:\r\n```\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-11-11\\corerun.exe\" dlstack.exe\r\nTest should return with ExitCode 100 ...\r\n Performing Collect/Wait/Collect cycle again\r\n Finalized number stable at 9990\r\n9990 DLinkNodes finalized\r\nTest Failed\r\nExpected: 100\r\nActual: 1\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstress2_jitstressregs3_tst_prtest/1/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/"},{"Id":"6887833806","Type":"IssuesEvent","CreatedAt":"2017-11-22T01:48:42","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15155","RelatedDescription":"Opened issue \"[RyuJIT/arm32][JitStress=2][JitStressRegs=2] Test failure: dlbigleak.cmd\" (#15155) at dotnet/coreclr","RelatedBody":"Test `GC\\Scenarios\\DoublinkList\\dlbigleak\\dlbigleak.cmd` fails with:\r\n\r\n```\r\nCOMPlus_JitStress=2\r\nCOMPlus_JitStressRegs=2\r\n```\r\n\r\noutput:\r\n```\r\nTest should return with ExitCode 100 ...\r\n1470 DLinkNodes finalized\r\nTest Failed\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_jitstress2_jitstressregs2_tst_prtest/1/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/\r\n"},{"Id":"6887791698","Type":"IssuesEvent","CreatedAt":"2017-11-22T01:32:52","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15154","RelatedDescription":"Opened issue \"Tiered jitting: We need a working x86 full-stack build so that the VS profiler team can test our feature\" (#15154) at dotnet/coreclr","RelatedBody":"When I last tried to find a working x86 dotnet daily build I wasn't successful. This is apart from any details of the tiered jitting feature - the dotnet build wasn't able to do some basic restore/build/run for a template ASP.Net app. Its possible the daily build I tried was just an unlucky one but I was unable to quickly salvage it or find information about an LKG version to use instead.\r\n\r\nThese are the steps I used to acquire and run an x64 version that worked. I expected that I could replace 'x64' with 'x86' everywhere it shows up below and it would also work, but that didn't happen. \r\n\r\n---\r\n\r\n1)\tDownload and run the installer for the new build: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.0-preview1-007525/dotnet-sdk-2.2.0-preview1-007525-win-x64.exe\r\nThis should install the new build SxS with any other builds on the machine. You don’t need to uninstall anything in advance.\r\nYou should observe the following folders have been created on the machine which were not present before:\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.1.0-preview1-25907-02\r\nC:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007525\r\n\r\n2)\tCreate a new default MVC ASP.Net project in Visual Studio\r\n\r\n3)\tOpen the .csproj file that was created and replace the XML tag that looks like this:\r\n`<TargetFramework>netcoreapp2.0</TargetFramework>`\r\n                So that it is now this:\r\n ```\r\n              <TargetFramework>netcoreapp2.1</TargetFramework>\r\n              <RuntimeFrameworkVersion>2.1.0-preview1-25907-02</RuntimeFrameworkVersion>\r\n```\r\n\r\n4)\tIn the same directory as the .sln, add a file named global.json with this content:\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.0-preview1-007525\"\r\n  }\r\n}\r\n\r\n5)\tIn the same directory as the .sln, add a second file named “nuget.config” with this content:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n<packageSources>\r\n    <add key=\"dotnet-core\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\"/>\r\n</packageSources>\r\n</configuration>\r\n```\r\n\r\n6)\tNow build and run the application.\r\n"},{"Id":"6887765317","Type":"IssuesEvent","CreatedAt":"2017-11-22T01:22:58","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15152","RelatedDescription":"Opened issue \"[RyuJIT/arm32] test failures with TailcallStress\" (#15152) at dotnet/coreclr","RelatedBody":"The following tests fail with `COMPlus_TailcallStress=1` with a Checked build, running Release-built tests.\r\n\r\n```\r\nbaseservices\\threading\\waithandle\\misc\\waithandlewaitone1\\waithandlewaitone1.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort11\\ArraySort11.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort12\\ArraySort12.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort13\\ArraySort13.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort14\\ArraySort14.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort2b\\ArraySort2b.cmd\r\nCoreMangLib\\cti\\system\\array\\ArraySort3b\\ArraySort3b.cmd\r\nCoreMangLib\\cti\\system\\collections\\generic\\comparer\\ComparerCompare1\\ComparerCompare1.cmd\r\nCoreMangLib\\cti\\system\\collections\\generic\\comparer\\ComparerCompare2\\ComparerCompare2.cmd\r\nJIT\\Generics\\ConstrainedCall\\vt1_il_d\\vt1_il_d.cmd\r\nJIT\\Methodical\\structs\\valuetuple\\valuetuple.cmd\r\nJIT\\Performance\\CodeQuality\\Burgers\\Burgers\\Burgers.cmd\r\nJIT\\Performance\\CodeQuality\\Linq\\Linq\\Linq.cmd\r\nJIT\\Performance\\CodeQuality\\V8\\Richards\\Richards\\Richards.cmd\r\nJIT\\SIMD\\CircleInConvex_r\\CircleInConvex_r.cmd\r\nJIT\\SIMD\\CircleInConvex_ro\\CircleInConvex_ro.cmd\r\nreadytorun\\tests\\generics\\generics.cmd\r\n```\r\n\r\nThis doesn't include tests that also fail in JitStress=1 or 2 runs.\r\n\r\nThe failure mode is access violation. It's likely the same as the remaining failures in JitStress=1 https://github.com/dotnet/coreclr/issues/14862, some (or all) of which also appear to be tailcall related.\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_tailcallstress_tst_prtest/3/artifact/bin/tests/Windows_NT.arm.Checked/Smarty.run.0/Smarty.0.fail.smrt/*view*/\r\n"},{"Id":"6887752958","Type":"PullRequestEvent","CreatedAt":"2017-11-22T01:18:28","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15151","RelatedDescription":"Opened pull request \"JitBench harness improvements\" (#15151) at dotnet/coreclr","RelatedBody":"This is work in progress on JitBench before I head off on vacation. It consumes the changes in https://github.com/aspnet/JitBench/pull/79 once they are checked in. After that happens this PR would need to be merged up and the hardcoded JitBench repo commit SHA to download would need to be updated. Testing with all those changes locally everything appeared to work and it did fix issues I was hitting where the test was failing part way through with versioning related errors.\r\n---\r\n\r\n\r\nUse a shared framework version that is pinned to the CoreCLR package version in dependencies.props instead of using open-ended latest build versions. This should help make results more predictable. If two runs have CoreCLR synced to the same point they should use all the same .Net Core component versions, regardless of the passage of time.\r\n\r\nUse the RunBenchmark.ps1 script maintained by the JitBench repo rather than hard-coding all the different setup, install, restore, publish steps here.\r\n\r\nAdded a new option to grab JitBench repo from a local folder on the machine instead of downloading it from github to make local development easier. It still has some issues trying to overwrite the previous folder if you run the full benchmark multiple times in this mode, but it can be worked around manually be deleting the previous folder yourself, or use the 'Use-Existing-Setup option' to avoid making redundant copies."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6888195994","Type":"PullRequestEvent","CreatedAt":"2017-11-22T04:10:08","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8035","RelatedDescription":"Merged pull request \"Global tools package obtain\" (#8035) at dotnet/cli","RelatedBody":"This is a model. It is not used by dotnet.dll yet for easy code review. Given a tools package id, it can create a fake project and restore to correct folder\r\n\r\nIncludes:\r\n- DI, aka no circular dependency of commands\r\n- Parser of config XML\r\n- I try to create test nupkg at build time, so I can run test and debug\r\neasily with VSCode. The code is in test csproj."},{"Id":"6888156489","Type":"IssuesEvent","CreatedAt":"2017-11-22T03:53:20","Actor":"RickStrahl","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8084","RelatedDescription":"Opened issue \"StackOverFlow Exception on Mac - fine on Windows\" (#8084) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI just installed new 2.0.3 SDK on Mac and am trying to run a project that's working fine on Windows.\r\n\r\nWhen I run any` dotnet` command I get:\r\n![image](https://user-images.githubusercontent.com/1374013/33108732-ca17aed0-cee1-11e7-9340-e5b35fbc9215.png)\r\n\r\nI'm using code from this repo:\r\nhttps://github.com/RickStrahl/Westwind.Globalization\r\n\r\nThere are multiple .NET projects, the .NET Core one in question is the sample project in:\r\n./src/NetCore/Westwind.Globalization.Sample.AspNetCore\r\n\r\nand I'm running out of that folder.\r\n\r\nThis project has another project reference higher up the folder hierarchy so I'm wondering if that may be the problem. \r\n\r\nFWIW, I restore a couple other projects on the same machine and setup and using the same SDK and they work fine. Something is different but I can't figure out what \r\n\r\n## Expected  behavior\r\nNo stack overflow.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  eb1d5ee318\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n"},{"Id":"6887842097","Type":"IssuesEvent","CreatedAt":"2017-11-22T01:51:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6705","RelatedDescription":"Closed issue \"Is prefercliruntime the preferred solution for CLI tools?\" (#6705) at dotnet/cli","RelatedBody":"Related: https://github.com/fable-compiler/Fable/issues/961#event-1099667439\r\n\r\nHi there! Recently a user has reported a problem with `dotnet-fable` CLI tool as apparently the tool won't run if the user has a lower dotnet SDK (and thus coreclr runtime) **patch version** than the one used to build it. This behavior doesn't look very intuitive as netcoreapp target frameworks don't include a patch version (`netcoreapp1.0`, `netcoreapp1.1`), and one would expect the tool to work with all coreclr 1.0.x runtimes, or at least to be able to set the minimum patch version explicitly instead of letting MSBuild do it for you.\r\n\r\nHowever, @enricosada has explained to me the tradeoffs for CLI tools and suggested to use a `prefercliruntime` file to avoid the error. The question then is: is this the preferred solution for all CLI tools? If so, could it be documented somewhere, added to CLI tools templates, improve the error message users see when it's missing, etc?\r\n\r\nThanks a lot for your help!\r\n"},{"Id":"6887835459","Type":"PullRequestEvent","CreatedAt":"2017-11-22T01:49:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8081","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25921-02 (master)\" (#8081) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6887712605","Type":"PullRequestEvent","CreatedAt":"2017-11-22T01:03:29","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8083","RelatedDescription":"Opened pull request \"Update F# and Roslyn translations\" (#8083) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6887314583","Type":"PullRequestEvent","CreatedAt":"2017-11-21T22:52:11","Actor":"jcagme","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/589","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02221-02 (master)\" (#589) at dotnet/standard","RelatedBody":""},{"Id":"6881694379","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:29:13","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/573","RelatedDescription":"Closed issue \"There's no way to get the managed object size in memory\" (#573) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nThere is no way to get the actual (or even an approximate) size of the cached object in the memory.\r\n\r\nThe case is, we have +100 customized cache for different purposes to accelerate our platform, for each cache we have\r\n- Cache MaxSize\r\n- Cache ConsumedSize\r\n- Cache RemainingSize\r\n\r\nWhenever we insert some object to be cached, we should detect its size to re-calculate aforementioned cache properties.\r\n\r\nI know that's a complex issue and depends on many factors, so far we have some workarounds but non of them is official and we afraid to be changed in any minor or major release.\r\n\r\nShould you add any API to get the object size in the memory ? or at least Type size and then we can add the object-specific data length.\r\n\r\nRelated Topics\r\n\r\n[Workaround 1](https://stackoverflow.com/questions/1128315/find-size-of-object-instance-in-bytes-in-c-sharp)\r\n[What Microsoft says about this issue](https://blogs.msdn.microsoft.com/cbrumme/2003/04/15/size-of-a-managed-object/)"},{"Id":"6881690742","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:28:04","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/557","RelatedDescription":"Closed issue \"Net standard 2.0 on Win 10 Mobile ?\" (#557) at dotnet/standard","RelatedBody":"I have phone with installed Fall Creators Update (10.0.15254.1) and VS can't deploy app on phone, while on desktop works fine. Do Win 10 Mobile with Fall Creators Update support apps that use net standard 2.0 ?"},{"Id":"6881685465","Type":"IssuesEvent","CreatedAt":"2017-11-20T23:26:17","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/572","RelatedDescription":"Closed issue \"Cannot open class diagram .cd file\" (#572) at dotnet/standard","RelatedBody":"Dear,\r\n\r\nIn a .net standard library project, on vs2017 15.4, we cannot open a class diagram file."},{"Id":"6880680323","Type":"IssuesEvent","CreatedAt":"2017-11-20T19:29:54","Actor":"fleed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/588","RelatedDescription":"Closed issue \"Issue restoring referenced packages\" (#588) at dotnet/standard","RelatedBody":"I'm porting some old **.NET 2.0** projects to the new `.csproj` format and replacing project references with packages.\r\nI have the following projects:\r\n- Project A (ProjectA.dll): **.NET 2.0** -> **netstandard2.0** - packed in `PackageA`\r\n- Project B (ProjectB.dll): **.NET 2.0** -> **net461** (references `System.Windows.Forms`) - packed in `PackageB`\r\n- Project C (ProjectC.dll): **.NET 2.0** -> **net461** (references `PackageA` and `PackageB`) - packed in `PackageC`\r\n- ConsoleApp: new, **netcoreapp2.0**, references `PackageC`\r\n\r\nInspecting the packages, I can see that `PackageC` correctly references the other two packages, both under **.NET framework,Version=4.6.1** and *exclude=Build,Analyzers*.\r\n\r\nAnyway, when restoring the project `ConsoleApp`, I can see in `Visual Studio 2015.4.4` that the other two packages don't appear in the dependency tree.\r\nI can still build the `ConsoleApp`, but when running, I'm getting `System.IO.FileNotFoundException: Could not load file or assembly 'ProjectA.dll, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the specified file`\r\n\r\nMy `dotnet --info`:\r\n\r\n```\r\n.NET Command Line Tools (2.1.1-preview-007165)\r\n\r\nProduct Information:\r\n Version:            2.1.1-preview-007165\r\n Commit SHA-1 hash:  a4d1a8e0bb\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.1-preview-007165\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n**Additional remarks**:\r\n\r\n- all packages contain their assemblies within the expected path **lib\\netstandard2.0** for `PackageA`, **lib\\net461** for the others\r\n- I've removed the old *packages.config* files from old projects\r\n- I'm using a local folder added to `NuGet.config` for the packages"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6888307956","Type":"IssuesEvent","CreatedAt":"2017-11-22T05:00:21","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25428","RelatedDescription":"Opened issue \"Remove trimming and validation for file find filter strings\" (#25428) at dotnet/corefx","RelatedBody":"The complexity here has to do with limited trust scenarios. We shouldn't trim or care about \"..\". \r\n\r\n#25426 handles this for Windows. Working on Unix."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6888030644","Type":"IssuesEvent","CreatedAt":"2017-11-22T03:02:35","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23354","RelatedDescription":"Opened issue \"Duplicate completions offered while working on compiler tests\" (#23354) at dotnet/roslyn","RelatedBody":"For instance, try typing `ConvertedType` again in ` TupleImplicitNullableAndCustomConversionsWithTypelessTuple`.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/33107872-173f1ae8-ceee-11e7-86d2-4773dea58c7d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/33107878-201e0b2e-ceee-11e7-855f-7c934687fb2c.png)\r\n\r\nNote: not all completions appear to be duplicated (`GetHashCode` is there only once):\r\n![image](https://user-images.githubusercontent.com/12466233/33107913-583b5836-ceee-11e7-90d3-c12a02b04db7.png)\r\n"},{"Id":"6887746434","Type":"PullRequestEvent","CreatedAt":"2017-11-22T01:16:06","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23353","RelatedDescription":"Opened pull request \"Decouple some icky coupled bits in the Visual Studio project layer\" (#23353) at dotnet/roslyn","RelatedBody":"Our VS project layer has three highly coupled types: VisualStudioProjectTracker, DocumentProvider, and derivations of AbstractProject. Making these perform well and support background-thread calling is going to require rationalizing how data flows between these types, unlike the current model that is best described as \"the world's largest ball of twine.\"\r\n\r\nThis PR is just cleaning up some other stuff in the way. DocumentProvider itself consumed a IVisualStudioHostProject interface which was implemented by AbstractProject and the Miscellaneous Files workspace's projects, which was getting it zero extra value. This meant that any refactoring of DocumentProvider would also impact MiscellanouesFilesWorkspace. The first commit here just deletes that link.\r\n\r\nOnce we did that, we can then delete IVisualStudioHostProject and IVisualStudioHostProjectContainer. This way the VisualStudioProjectTracker/DocumentProvider/AbstractProject coupling is more explicit rather than through an interface. If nothing else, it means finding dead code is easier."},{"Id":"6887666251","Type":"IssuesEvent","CreatedAt":"2017-11-22T00:46:26","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23348","RelatedDescription":"Closed issue \"Expose attributes operation blocks for attributes on type parameters\" (#23348) at dotnet/roslyn","RelatedBody":"Follow up for https://github.com/dotnet/roslyn/pull/23318#discussion_r152411734"},{"Id":"6887649979","Type":"IssuesEvent","CreatedAt":"2017-11-22T00:40:18","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23352","RelatedDescription":"Opened issue \"ExtractMethodCodeRefactoringProvider threw exception\" (#23352) at dotnet/roslyn","RelatedBody":"No repro here, was in the middle of other refactorings and have no idea what I did:\r\n\r\n```\r\nSystem.InvalidOperationException : Matrix does not contain Key 'C7'.\r\n   at Roslyn.Utilities.Contract.ThrowIfFalse(Boolean condition,String message)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.ExtractMethodMatrix.GetVariableStyle(Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetVariableStyle(Dictionary`2 symbolMap,ISymbol symbol,SemanticModel model,ITypeSymbol type,Boolean captured,Boolean dataFlowIn,Boolean dataFlowOut,Boolean alwaysAssigned,Boolean variableDeclared,Boolean readInside,Boolean writtenInside,Boolean readOutside,Boolean writtenOutside,Boolean unsafeAddressTaken)\r\n   at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GenerateVariableInfoMap(SemanticModel model,DataFlowAnalysis dataFlowAnalysisData,Dictionary`2 symbolMap)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6887820766","Type":"PullRequestEvent","CreatedAt":"2017-11-22T01:43:48","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4983","RelatedDescription":"Opened pull request \"[WIP] ILCompiler nuget package support\" (#4983) at dotnet/corert","RelatedBody":"Below is a working implementation - CoreRT can be consumed by adding a \r\n```xml\r\n <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"X\" /> \r\n```\r\nwhere X is the version of the ILCompiler package produced by build-packages.cmd or once its published with \r\n\r\n```bat \r\ndotnet add package Microsoft.DotNet.ILCompiler\r\n```\r\n\r\nIdeally, I'd like to add the assemblies produced by the project references in `Microsoft.DotNet.ILCompiler.pkgproj` to have their `TargetPath` property overriden when creating this package specifically, but the paths seem to be dynamically generated somewhere in the compiler. Can anyone more familiar with the NuGet package publishing pipeline take a look?\r\nAdditionally, the implementation below doesn't include symbols for the framework, sdk and tools assemblies to the final package."},{"Id":"6887430755","Type":"PullRequestEvent","CreatedAt":"2017-11-21T23:25:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4982","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4982) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6887407633","Type":"PullRequestEvent","CreatedAt":"2017-11-21T23:18:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4981","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4981) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6887234265","Type":"IssuesEvent","CreatedAt":"2017-11-21T22:30:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1570","RelatedDescription":"Closed issue \"Include 3rd party and P2P dependencies during native compile.\" (#1570) at dotnet/corert","RelatedBody":"Implementation assemblies for 3rd party and P2P dependencies should be passed to ilc.exe as references.\n\nAn open question is how to handle the runtime identifier in this case. 3rd Party dependencies may not be targeting the -aot runtime identifier suffix that native libs are currently under. For this reason this is somewhat tied to #402\n\nThis is another step in unblocking #255\n\n/cc @schellap @gkhanna79 Is this how you envision handling these dependencies?\n\nP.S: a move of dotnet/cli#406\n"},{"Id":"6886953687","Type":"PullRequestEvent","CreatedAt":"2017-11-21T21:24:24","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4981","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4981) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6886758521","Type":"PullRequestEvent","CreatedAt":"2017-11-21T20:40:18","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4980","RelatedDescription":"Opened pull request \"Adjust to decimal formatting moving to shared\" (#4980) at dotnet/corert","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15145\r\ncc: @jkotas "},{"Id":"6886444424","Type":"PullRequestEvent","CreatedAt":"2017-11-21T19:30:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4977","RelatedDescription":"Merged pull request \"Implement efficient Array.IndexOf\" (#4977) at dotnet/corert","RelatedBody":"This is the remainder of #4935.\r\n\r\nWe special case a couple methods on Array to avoid allocating a full EqualityComparer per each array type. This saves 22 kB on hello world (comparers for a bunch of primitive types and enums).\r\n\r\nSame as in #4935 - we restrict the optimization to non-shared value types. On Project N we would also optimize shared valuetypes, but these are rare enough that it's probably not worth building the infrastructure for.\r\n\r\nFixes #763."},{"Id":"6886157608","Type":"PullRequestEvent","CreatedAt":"2017-11-21T18:26:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4971","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4971) at dotnet/corert","RelatedBody":""},{"Id":"6886075000","Type":"PullRequestEvent","CreatedAt":"2017-11-21T18:08:37","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4718","RelatedDescription":"Merged pull request \"Allow creating static or shared native library\" (#4718) at dotnet/corert","RelatedBody":"This PR adds support for creating static libraries (.lib, .a) and dynamic libraries (.dll, .dylib, .so) with CoreRT.\r\n\r\n### Commands\r\n* Dynamic library (Windows): `dotnet build /t:LinkNative /p:NativeLib=Shared /p:DefFile=<path-to-def-exports-file>`\r\n* Dynamic library (Unix): `dotnet build /t:LinkNative /p:NativeLib=Shared`\r\n* Static library: `dotnet build /t:LinkNative /p:NativeLib=Static`\r\n\r\n`dlopen` on Unix and `LoadLibrary` on Windows are able to call any .NET method (within the generated native shared library) with the `NativeCallable` attribute applied. Generated static library (.lib, .a) would need to also be linked with the other CoreRT static libraries as well as your C++ code for all links to be resolved.\r\n\r\nAt this time there are errors when you try build a shared library on Ubuntu. Shared and static libraries can be successfully built on both Windows and macOS, only static libraries on Ubuntu\r\n\r\ncc @jkotas @MichalStrehovsky \r\n\r\n#1285 "},{"Id":"6885995887","Type":"PullRequestEvent","CreatedAt":"2017-11-21T17:51:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4979","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4979) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6885984098","Type":"PullRequestEvent","CreatedAt":"2017-11-21T17:49:03","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4979","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4979) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6885460404","Type":"PullRequestEvent","CreatedAt":"2017-11-21T16:10:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4978","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4978) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6885457426","Type":"PullRequestEvent","CreatedAt":"2017-11-21T16:09:47","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4978","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4978) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6887294176","Type":"PullRequestEvent","CreatedAt":"2017-11-21T22:46:41","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1763","RelatedDescription":"Opened pull request \"Update feed tasks version\" (#1763) at dotnet/sdk","RelatedBody":"Contains a version number fix and an update to the asset publishing code"},{"Id":"6886877526","Type":"IssuesEvent","CreatedAt":"2017-11-21T21:06:55","Actor":"KathleenDollard","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1740","RelatedDescription":"Closed issue \"MacOs install summary page shows wrong version\" (#1740) at dotnet/sdk","RelatedBody":"After installing .NET Core SDK 2.0.3, the MacOs summary page is as attached. The title correctly says 2.0.3, but twice on the page it says 2.0.0\r\n\r\n@wli3 \r\n\r\n![screen shot 2017-11-15 at 10 57 58 am](https://user-images.githubusercontent.com/5844318/32854975-3ac53162-c9f5-11e7-8dde-5685da6ad846.png)\r\n"},{"Id":"6883289849","Type":"IssuesEvent","CreatedAt":"2017-11-21T08:52:47","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1595","RelatedDescription":"Closed issue \"Regression: VS2017 / Package References in library projects do not generate binding redirects\" (#1595) at dotnet/sdk","RelatedBody":"This might be releated to https://github.com/dotnet/sdk/issues/1351 but since all the existing issues only reference EXE and/or WinEXE project types, it also feels like a different issue.\r\n\r\nIn VS2013 and VS2015, when I created a Class Library project and added NuGet dependencies, I would get binding redirects generated into the app.config file. \r\n\r\nIn VS2017, this behavior still works vor Full Framework Class Library projects using packages.config. However, when I create a .NET Standard Class Library project or switch to PackageReferences in the Full Framework Class Library, this does not work. It also doesn't help to set \r\n`<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>`.\r\n\r\nIt can be workarounded by setting     `<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n`in the project file.\r\n\r\nI assume the reason is in \r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2109\r\n```\r\n  <Target Name=\"GenerateBindingRedirectsUpdateAppConfig\"\r\n    AfterTargets=\"GenerateBindingRedirects\"\r\n    Condition=\"'$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)')\">\r\n```\r\nand\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L326\r\n`<GenerateBindingRedirectsOutputType Condition=\"'$(OutputType)'=='exe' or '$(OutputType)'=='winexe'\">true</GenerateBindingRedirectsOutputType>\r\n`\r\nIf GenerateBindingRedirectsOutputType would also check for type 'Library', it would work. Actually, why check at all?\r\n\r\nWhile there exists a workaround, for library authors this is a pretty major problem since the concept of semantically versioned NuGet packages breaks down if the tooling doesn't support binding redirects - it is common and intended to have mismatched dependency version numbers. In turn, this means it's not possible to run unit tests on your library without binding redirects.\r\n\r\nEdit: Sorry, I think I might have created a duplicate of this one here: https://github.com/Microsoft/msbuild/issues/1310\r\n\r\nEdit 2: Added documentation about both .NET Standard and Full Framework with Package References."},{"Id":"6882053481","Type":"PullRequestEvent","CreatedAt":"2017-11-21T01:34:46","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1762","RelatedDescription":"Merged pull request \"Use shared compiler in CoreGenerateSatelliteAssemblies\" (#1762) at dotnet/sdk","RelatedBody":"The `CoreGenerateSatelliteAssemblies` target uses the `Csc` task to\r\ncreate satellite assemblies. We can greatly speed up the creation of\r\nthese assemblies by telling `Csc` to use the shared compiler server if\r\nit is available, rather than spinning up a new copy of csc.exe for every\r\nsatellite."},{"Id":"6881766531","Type":"PullRequestEvent","CreatedAt":"2017-11-20T23:52:51","Actor":"tmeschter","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1762","RelatedDescription":"Opened pull request \"Use shared compiler in CoreGenerateSatelliteAssemblies\" (#1762) at dotnet/sdk","RelatedBody":"The `CoreGenerateSatelliteAssemblies` target uses the `Csc` task to\r\ncreate satellite assemblies. We can greatly speed up the creation of\r\nthese assemblies by telling `Csc` to use the shared compiler server if\r\nit is available, rather than spinning up a new copy of csc.exe for every\r\nsatellite."},{"Id":"6881432799","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:18:02","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1757","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1757) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171117-080032\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171117-080032 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6881431942","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:17:50","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1742","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#1742) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171116-080043\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171116-080043 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6881426600","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:16:32","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1745","RelatedDescription":"Merged pull request \"Making the 'RestoreSources' configurable: sdk\" (#1745) at dotnet/sdk","RelatedBody":"Remove NuGet source references - NuGet.config\r\nSet 'RestoreSources' in RestoreSources.props - import to: Common.props\r\nFixed one test: Microsoft.NET.Publish.Tests.GivenThatWeWantToStoreAProjectWithDependencies.store_nativeonlyassets\r\n\r\nUnrelated:\r\nREADME.md -formatting\r\ntools/PushToBlobFeed.targets - helpful comment\r\n\r\n@dotnet/dotnet-cli\r\n@jcagme\r\n@karajas\r\n@chcosta\r\n"},{"Id":"6881425551","Type":"PullRequestEvent","CreatedAt":"2017-11-20T22:16:15","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1756","RelatedDescription":"Merged pull request \"Update the implicit Runtime Framework version to 2.0\" (#1756) at dotnet/sdk","RelatedBody":"This one is targeting master."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":70,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":14,"RawContent":null},{"Id":"931580871437635584","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"dotnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/nXoIDLCubn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null},{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":60,"RawContent":null},{"Id":"931205222579318784","CreatedAt":"2017-11-16T17:00:00+00:00","UserScreenname":"dotnet","Text":"Having trouble moving to .NET Core because of missing Windows APIs? Introducing the Windows Compatibility Pack for… https://t.co/s3KKSJ467u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":149,"FavoriteCount":85,"RawContent":null}]}},"RunOn":"2017-11-22T05:30:33.5085212Z","RunDurationInMilliseconds":12873}