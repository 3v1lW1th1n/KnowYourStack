{"Data":{"GitHub":{"Issues":[{"Id":"338102214","IsPullRequest":true,"CreatedAt":"2018-07-04T01:32:11","Actor":"zeahmed","Number":"491","RawContent":null,"Title":"Added convenience constructors for set of transforms.","State":"open","Body":"This PR fixes #487.\r\n\r\nConvenience constructors are added for the following transforms. \r\n\r\n- ChooseColumnsTransform.cs\r\n- ConvertTransform.cs\r\n- DropSlotsTransform.cs\r\n- GenerateNumberTransform.cs\r\n- HashTransform.cs\r\n- KeyToValueTransform.cs\r\n- KeyToVectorTransform.cs\r\n- LabelConvertTransform.cs\r\n- LabelIndicatorTransform.cs\r\n- RangeFilter.cs\r\n- ShuffleTransform.cs\r\n- SkipTakeFilter.cs\r\n- TermTransform.cs\r\n","Url":"https://github.com/dotnet/machinelearning/pull/491","RelatedDescription":"Open PR \"Added convenience constructors for set of transforms.\" (#491)"},{"Id":"338012530","IsPullRequest":true,"CreatedAt":"2018-07-03T22:29:43","Actor":"Ivanidzo4ka","Number":"488","RawContent":null,"Title":"Hide argument object in ensemble multivoting","State":"closed","Body":"fixes #443 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/488","RelatedDescription":"Closed or merged PR \"Hide argument object in ensemble multivoting\" (#488)"},{"Id":"337662742","IsPullRequest":false,"CreatedAt":"2018-07-03T22:03:09","Actor":"JoshuaLight","Number":"475","RawContent":null,"Title":"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?**\r\nOpened the solution.\r\n\r\n- **What happened?**\r\nI've found that `test\\data` solution folder contains missing files: `sentiment_data.tsv` and `sentiment_test.tsv`.\r\nAs it looks in [Microsoft.ML.sln](https://github.com/dotnet/machinelearning/blob/master/Microsoft.ML.sln) it has:\r\n```\r\n// Starts at 37.\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"data\", \"data\", \"{FDA2FD2C-A708-43AC-A941-4D941B0853BF}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t>>\ttest\\data\\sentiment_data.tsv = test\\data\\sentiment_data.tsv\r\n\t>>\ttest\\data\\sentiment_test.tsv = test\\data\\sentiment_test.tsv\r\n\tEndProjectSection\r\nEndProject\r\n```\r\nWhile such data actually doesn't present in repository, as it looks [here](https://github.com/dotnet/machinelearning/tree/master/test/data).\r\n- **What did you expect?**\r\nI'd expect that there should be no missing files in solution.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/475","RelatedDescription":"Closed issue \"`sentiment_data.tsv` and `sentiment_test.tsv` are missing in the solution.\" (#475)"},{"Id":"338061231","IsPullRequest":true,"CreatedAt":"2018-07-03T22:03:07","Actor":"JoshuaLight","Number":"490","RawContent":null,"Title":"Removed `data` solution-folder from solution files.","State":"closed","Body":"As mentioned in #475, files in `data` solution-folder currently are not presented in repository, so it's probably worth to remove them.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/490","RelatedDescription":"Closed or merged PR \"Removed `data` solution-folder from solution files.\" (#490)"},{"Id":"338041406","IsPullRequest":false,"CreatedAt":"2018-07-03T20:20:13","Actor":"Ivanidzo4ka","Number":"489","RawContent":null,"Title":"Image support in IDataView and transforms.","State":"open","Body":"Currently only way to work with images is by manually loading pixels arrays into array field in the class and wrap that class into collection data source. Which is not pleasant.\r\n\r\nI propose to add support for type Image in DataView type system which can be based on System.Drawing.Bitmap This way user can specify Bitmap image in their class and it will be properly consumed by CollectionDataSource. \r\n\r\nAlso I suggest to implement transform which would accept column with file paths and load this images during pipeline execution. Which allow you to save memory in case of streaming dataview, some trainers support streaming structure of data, and this way you need to keep in memory only one image for current row instead of images for all rows.\r\n\r\nSince quite often you need to modify images (Re-scale them, transform image into Grayscale, etc) it make sense to keep Image format as \"image\" and not directly convert it into vector of floats which we require for learners. Which means we need transform which would convert Image type into feature vector.\r\n\r\nTo summarize I propose to create following:\r\n\r\nImage type based on Bitmap.\r\nImageLoader transform\r\nImageResizer transform\r\nImageGrayscale transform\r\nImageToPixels transform \r\n\r\n@shauheen @TomFinley  @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/issues/489","RelatedDescription":"Open issue \"Image support in IDataView and transforms.\" (#489)"},{"Id":"338010262","IsPullRequest":false,"CreatedAt":"2018-07-03T18:32:00","Actor":"zeahmed","Number":"487","RawContent":null,"Title":"[Part 2] Create convenience constructor for the listed Transforms.","State":"open","Body":"This work item is related to #371 and is the 2nd work item in series of creating convenience constructor (cf. #380). In this work item, convenience constructors will be created following set of transforms. \r\n\r\n- ChooseColumnsTransform.cs\r\n- ConvertTransform.cs\r\n- DropSlotsTransform.cs\r\n- GenerateNumberTransform.cs\r\n- HashTransform.cs\r\n- KeyToValueTransform.cs\r\n- KeyToVectorTransform.cs\r\n- LabelConvertTransform.cs\r\n- LabelIndicatorTransform.cs\r\n- RangeFilter.cs\r\n- ShuffleTransform.cs\r\n- SkipTakeFilter.cs\r\n- TermTransform.cs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/487","RelatedDescription":"Open issue \"[Part 2] Create convenience constructor for the listed Transforms.\" (#487)"},{"Id":"337997566","IsPullRequest":true,"CreatedAt":"2018-07-03T18:19:26","Actor":"zeahmed","Number":"486","RawContent":null,"Title":"Reverted 'new' modifier to be first in statement.","State":"closed","Body":"This is a small fix left over from PR 478. Following [C# documentation](https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/435f1dw2(v%3dvs.100)), placing 'new' modifier to be first in the statement.","Url":"https://github.com/dotnet/machinelearning/pull/486","RelatedDescription":"Closed or merged PR \"Reverted 'new' modifier to be first in statement.\" (#486)"},{"Id":"337976972","IsPullRequest":true,"CreatedAt":"2018-07-03T16:44:21","Actor":"markusweimer","Number":"485","RawContent":null,"Title":"Issue 434: Fixed imprecise `cref`s in XML Docs","State":"open","Body":"This fixes a couple of dangling `cref` in the XML Docs. This commit doesn't contain functional changes to the code.\r\n\r\nIssue:\r\n  This closes #434","Url":"https://github.com/dotnet/machinelearning/pull/485","RelatedDescription":"Open PR \"Issue 434: Fixed imprecise `cref`s in XML Docs\" (#485)"},{"Id":"337698392","IsPullRequest":true,"CreatedAt":"2018-07-03T16:39:51","Actor":"Ivanidzo4ka","Number":"478","RawContent":null,"Title":"Remove all spaces in the end of lines","State":"closed","Body":"It's nice to not have spaces in the end of lines","Url":"https://github.com/dotnet/machinelearning/pull/478","RelatedDescription":"Closed or merged PR \"Remove all spaces in the end of lines\" (#478)"},{"Id":"337591952","IsPullRequest":true,"CreatedAt":"2018-07-03T15:04:01","Actor":"yaeldekel","Number":"467","RawContent":null,"Title":"Fix a bug with group Id column in CV macro and add NameColumn argument to CV and TrainTest macros","State":"closed","Body":"This PR fixes bug #456, and also introduces a NameColumn argument to the TrainTest and CV macros, to enable the evaluator to use it in the per-instance results.\r\nFixes #456 \r\nFixes #466 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/467","RelatedDescription":"Closed or merged PR \"Fix a bug with group Id column in CV macro and add NameColumn argument to CV and TrainTest macros\" (#467)"},{"Id":"337582568","IsPullRequest":false,"CreatedAt":"2018-07-03T15:04:01","Actor":"yaeldekel","Number":"466","RawContent":null,"Title":"CV macro should be able to pass a name column to the evaluator","State":"closed","Body":"When running in CV mode, the per-instance results data view contains the results from all folds. Having a name column enables identifying the examples, since they are not in the same order as the input data. Currently, there is no way to pass a name column to the evaluator in the CV macro.","Url":"https://github.com/dotnet/machinelearning/issues/466","RelatedDescription":"Closed issue \"CV macro should be able to pass a name column to the evaluator\" (#466)"},{"Id":"337246711","IsPullRequest":true,"CreatedAt":"2018-07-03T14:55:23","Actor":"JoshuaLight","Number":"463","RawContent":null,"Title":"Fixed all typos in word `Transform`.","State":"closed","Body":"Hey guys!\r\n\r\nWanna trying to contribute and do some helpful work! What is my first small trophy â€” typo in `ILearningPipelineStep` comment, which, as I found, is presented in other places in code.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/463","RelatedDescription":"Closed or merged PR \"Fixed all typos in word `Transform`.\" (#463)"},{"Id":"337934338","IsPullRequest":false,"CreatedAt":"2018-07-03T14:51:45","Actor":"eerhardt","Number":"484","RawContent":null,"Title":"We should set our PackageTags in the NuGet packages","State":"open","Body":"If we set the `$(PackageTags)` property in our NuGet package projects, the tags will automatically be defined in our .nupkg. And those values will be shown in nuget.org.\r\n\r\nWe are currently leaving this property blank in our packages.\r\n\r\n/cc @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/484","RelatedDescription":"Open issue \"We should set our PackageTags in the NuGet packages\" (#484)"},{"Id":"337930926","IsPullRequest":false,"CreatedAt":"2018-07-03T14:43:42","Actor":"eerhardt","Number":"483","RawContent":null,"Title":"We should publish our NuGet packages to VSTS's artifacts","State":"open","Body":"When doing an official build, we only publish our NuGet packages to MyGet. We should also publish them to VSTS's artifacts tab. This way they aren't only on MyGet, and when we push our official packages to `nuget.org`, we can pull them from VSTS's artifacts drop of the build.","Url":"https://github.com/dotnet/machinelearning/issues/483","RelatedDescription":"Open issue \"We should publish our NuGet packages to VSTS's artifacts\" (#483)"},{"Id":"337929799","IsPullRequest":false,"CreatedAt":"2018-07-03T14:41:01","Actor":"eerhardt","Number":"482","RawContent":null,"Title":"LightGBM doesn't work during F5 of a .NET Core application","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n```\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-009063\r\n Commit:    dd0179a67c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.400-preview-009063\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n```\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUsing the latest `0.3.0-preview` NuGet package, I tried using LightGBM in a .NET Core application.  I did the walk through: https://www.microsoft.com/net/learn/apps/machine-learning-and-ai/ml-dotnet/get-started/windows, only changing:\r\n\r\n```C#\r\n            // STEP 4: Add learner\r\n            // Add a learning algorithm to the pipeline. \r\n            // This is a classification scenario (What type of iris is this?)\r\n            pipeline.Add(new LightGbmClassifier());\r\n//            pipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\n```\r\n- **What happened?**\r\n\r\n```\r\nUnhandled Exception: System.InvalidOperationException: Entry point 'Trainers.LightGbmClassifier' not found\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode..ctor(IHostEnvironment env, IChannel ch, ModuleCatalog moduleCatalog, RunContext context, String id, String entryPointName, JObject inputs, JObject outputs, Boolean checkpoint, String stageId, Single cost, String label, String group, String weight)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.ValidateNodes(IHostEnvironment env, RunContext context, JArray nodes, ModuleCatalog moduleCatalog, String label, String group, String weight)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, JArray nodes)\r\n   at Microsoft.ML.Runtime.Experiment.Compile()\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n   at MLLightGBMSmokeTest.Program.Main(String[] args) in C:\\Users\\eerhardt\\source\\repos\\MLLightGBMSmokeTest\\Program.cs:line 72\r\n```\r\n\r\n- **What did you expect?**\r\nI expected the walk through app to run successfully.\r\n\r\n### Notes\r\nWhen F5 debugging a .NET Core app in VS, or using `dotnet run` on the command line, .NET Core doesn't have all the dependencies copied to the output directory. Instead, references that come from NuGet packages are executed from the NuGet package cache folder.\r\nSince LightGBM comes from a separate NuGet package than the rest of the Microsoft.ML, it is loaded from a separate folder than the rest of the Microsoft.ML package.\r\n\r\nI've looked through the [ComponentCatalog](https://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Core/ComponentModel/ComponentCatalog.cs#L393-L425) code, and it appears if I force the `Microsoft.ML.LightGBM.dll` to be loaded first, I can workaround the issue.\r\n\r\nSo I added \r\n\r\n```C#\r\n        static void Main(string[] args)\r\n        {\r\n            // workaround to ensure LightGbm assembly is loaded\r\n            new LightGbmArguments();\r\n```\r\n\r\nAnd I am able to successfully use LightGBM on .NET Core during F5.\r\n\r\n### Workarounds\r\n\r\nAny of these should allow you to workaround the issue:\r\n\r\n1. forcing the assembly to be loaded, like I did above: `new LightGbmArguments();`\r\n2. `dotnet publish` your application and running it from the published folder (since all dependencies are copied during publish)\r\n3. Using full .NET Framework\r\n\r\n/cc @ericstj @TomFinley @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/482","RelatedDescription":"Open issue \"LightGBM doesn't work during F5 of a .NET Core application\" (#482)"},{"Id":"337701078","IsPullRequest":true,"CreatedAt":"2018-07-03T13:15:18","Actor":"shauheen","Number":"479","RawContent":null,"Title":"Cherrypick to update release for V0.3","State":"closed","Body":"Cherrypick into release for v0.3","Url":"https://github.com/dotnet/machinelearning/pull/479","RelatedDescription":"Closed or merged PR \"Cherrypick to update release for V0.3\" (#479)"},{"Id":"337846609","IsPullRequest":false,"CreatedAt":"2018-07-03T10:51:59","Actor":"maxambrogi","Number":"481","RawContent":null,"Title":"there's an alternative to the TextLoader class?I would like to add the data to the pipeline without to use a file. Regards  ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/481","RelatedDescription":"Open issue \"there's an alternative to the TextLoader class?I would like to add the data to the pipeline without to use a file. Regards  \" (#481)"},{"Id":"337753953","IsPullRequest":false,"CreatedAt":"2018-07-03T05:48:21","Actor":"sharpwood","Number":"480","RawContent":null,"Title":"When will ML.NET support deeplearning network ,such as CNTK ,tensorflow","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/480","RelatedDescription":"Open issue \"When will ML.NET support deeplearning network ,such as CNTK ,tensorflow\" (#480)"},{"Id":"337684413","IsPullRequest":true,"CreatedAt":"2018-07-02T23:50:34","Actor":"GalOshri","Number":"476","RawContent":null,"Title":"Add release notes for ML.NET 0.3","State":"closed","Body":"This adds release notes for ML.NET 0.3","Url":"https://github.com/dotnet/machinelearning/pull/476","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.3\" (#476)"},{"Id":"337606890","IsPullRequest":true,"CreatedAt":"2018-07-02T23:38:18","Actor":"zeahmed","Number":"468","RawContent":null,"Title":"Added tests for new API where components(Loaders/Transforms/Learners) are directly instantiated.","State":"closed","Body":"This PR addressed #424. \r\n\r\nTwo scenario tests were added to show how to directly instantiate ML.NET components instead of using Pipeline API. The test may not look elegant at first instance but they will help us shape the new API.\r\n\r\nThis work is inline with new API proposal #371.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/468","RelatedDescription":"Closed or merged PR \"Added tests for new API where components(Loaders/Transforms/Learners) are directly instantiated.\" (#468)"},{"Id":"337693132","IsPullRequest":false,"CreatedAt":"2018-07-02T23:12:21","Actor":"sfilipi","Number":"477","RawContent":null,"Title":"Additional documentation for the ML.Net types and components should live in xml docs","State":"open","Body":"Through PR #455 we introduced XML strings in the codebase, that flow to the generated CSharpApi, to better document the trainers of the Microsoft.ML.Trainers namespace. \r\n\r\nThe final destination for those XML strings should be xml files, in the 'docs' folder, parallel to the src folder. Those documents should be referenced in the CSharp api, and through the code by xml <includes> tags. ","Url":"https://github.com/dotnet/machinelearning/issues/477","RelatedDescription":"Open issue \"Additional documentation for the ML.Net types and components should live in xml docs\" (#477)"},{"Id":"337358659","IsPullRequest":true,"CreatedAt":"2018-07-02T21:21:07","Actor":"ganik","Number":"464","RawContent":null,"Title":"Light LDA doc ","State":"closed","Body":"issue #458","Url":"https://github.com/dotnet/machinelearning/pull/464","RelatedDescription":"Closed or merged PR \"Light LDA doc \" (#464)"},{"Id":"337659926","IsPullRequest":false,"CreatedAt":"2018-07-02T20:55:59","Actor":"Andy-Wilkinson","Number":"474","RawContent":null,"Title":"Proposal for Fluent API","State":"open","Body":"In this issue I describe a proposal for a fluent API for the building of ML.NET learning pipelines. This API would be consistent with existing .NET patterns such as LINQ, allowing people new to ML.NET to pick it up easily. It would allow clear concise code for simple scenarios, whilst allowing easy extension for more complex situations.\r\n\r\n# Background\r\n\r\nThe `LearningPipeline` API used by the current preview releases of ML.NET has a number of limitations. Theprogramming model does not fit in with other .NET code (we do not write other code as a series of steps added to a list), and follows a linear pipeline without merging/branching (e.g. with data from multiple sources, or train/test splitting of data).\r\n\r\nThe recent proposal for a major API change by @TomFinley in issue #371 is a bit step forward towards a more natural programming model, with each step of the pipeline new-ed up in turn. I would argue however that this no longer reflects the true flow through a learning pipeline, with previous steps being relegated to a parameter of the constructor. This proposal builds on top of #371 with a fluent API.\r\n\r\n# Proposed API\r\n\r\nBy using extension functions (in a similar manner to LINQ) we can pass the previous step of a pipeline as the 'this' parameter into subsequent steps, preserving the natural flow. For example,\r\n\r\n```\r\nvar loader = new TextLoader(new MultiFileSource(dataPath),\r\n        useHeader: true, separator: ',',\r\n        cols: new[] { ... });\r\nvar transform = transform.AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n        \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n        \"YearBuilt\", \"YearRenovated\", \"Zipcode\");\r\nvar transform = transform.AddCategoricalTransform(\"CategoryFeatures\");\r\n```\r\n\r\nThis could be further cleaned up to,\r\n\r\n```\r\nvar pipeline = new TextLoader(new MultiFileSource(dataPath),\r\n        useHeader: true, separator: ',',\r\n        cols: new[] { ... })\r\n    .AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n        \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n        \"YearBuilt\", \"YearRenovated\", \"Zipcode\")\r\n    .AddCategoricalTransform(\"CategoryFeatures\");\r\n```\r\n\r\n## More complex examples,\r\n\r\nYou could easily write extension functions that combine multiple steps, but could be consumed in the same way. Something like the following (I've created a hypothetical `IDataPipeline` to represent any pipeline step that produces data),\r\n\r\n```\r\npublic IDataPipeline CreateCategories(this IDataPipeline input)\r\n{\r\n    return input.AddConcatTransform(env, trans, \"CategoryFeatures\",\r\n            \"Bedrooms\", \"Bathrooms\", \"Floors\", \"Waterfront\", \"View\", \"Condition\", \"Grade\",\r\n            \"YearBuilt\", \"YearRenovated\", \"Zipcode\")\r\n        .AddCategoricalTransform(\"CategoryFeatures\");\r\n}\r\n```\r\n\r\nYou could easily merge data from two pipelines,\r\n\r\n```\r\nvar input1 = new.TextLoader(...)\r\n        .DoSomeTransforms();\r\nvar input2 = new.TextLoader(...)\r\n        .DoSomeMoreTransforms();\r\n\r\nvar input = input1.ConcatenateRows(input2);\r\n```\r\n\r\nYou could take advantage of tuples to split the data pipeline, such that different steps could be applied before later merging,\r\n\r\n```\r\nvar (train, test) = input.AddTrainTestSplit(...);\r\n\r\ntrain.DoSomeTransforms();\r\ntest.DoSomeMoreTransforms();\r\n```\r\n\r\n# Summary\r\n\r\nThis is an outline proposal for an alternative API that could be used alongside, or instead of that proposed in issue #371. There are still some rough edges here and there, but I hope that this will start a discussion of the posibilites provided by a fluent API.","Url":"https://github.com/dotnet/machinelearning/issues/474","RelatedDescription":"Open issue \"Proposal for Fluent API\" (#474)"},{"Id":"337648300","IsPullRequest":false,"CreatedAt":"2018-07-02T20:14:39","Actor":"adamshakhabov","Number":"473","RawContent":null,"Title":"Get cluster items","State":"open","Body":"_Sorry for my English :)_\r\n\r\nI am using sample [Clustering Iris Data](https://github.com/dotnet/machinelearning-samples/tree/master/samples/getting-started/Clustering_Iris). Is there anyway except cluster Id also get items which were put in the same cluster?\r\n\r\nThat is, I got prediction:\r\n\r\n`var prediction1 = model.Predict(TestIrisData.Setosa1);`\r\n\r\nand I can get cluster Id by `prediction1.SelectedClusterId`. But I also need to know data about another items with their features SepalLength, SepalWidth, PetalLength, PetalWidth.","Url":"https://github.com/dotnet/machinelearning/issues/473","RelatedDescription":"Open issue \"Get cluster items\" (#473)"},{"Id":"337647069","IsPullRequest":true,"CreatedAt":"2018-07-02T20:10:20","Actor":"tyclintw","Number":"472","RawContent":null,"Title":"ParquetLoader - Save Schema to context to support loading the model without files.","State":"open","Body":"This changes address issue #471 \r\n\r\nThe Schema is added to the model context when saving. The context model can then be properly loaded without the need of additional files in order to inspect the schema. A file is still required on initial construction and an error will be thrown if a RowCursor is created without a file.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/472","RelatedDescription":"Open PR \"ParquetLoader - Save Schema to context to support loading the model without files.\" (#472)"},{"Id":"337645678","IsPullRequest":false,"CreatedAt":"2018-07-02T20:05:41","Actor":"tyclintw","Number":"471","RawContent":null,"Title":"Cannot load a ParquetLoader without a file.","State":"open","Body":"### Issue\r\n1. Save a ParquetLoader model context.\r\n2. Load the model context with an empty IMultiStreamSource.\r\n\r\nExpected result:\r\nThe model can be loaded to inspect the schema.\r\n\r\nActual result:\r\nThe model will throw the error \"Parquet loader must be created with one file\".","Url":"https://github.com/dotnet/machinelearning/issues/471","RelatedDescription":"Open issue \"Cannot load a ParquetLoader without a file.\" (#471)"},{"Id":"337634294","IsPullRequest":false,"CreatedAt":"2018-07-02T19:24:33","Actor":"ErcinDedeoglu","Number":"470","RawContent":null,"Title":"How to add new data to existing trained data model?","State":"open","Body":"Hi,\r\nI am very new to this subject. Maybe there might be a problem with my point of view. Thank you for all the reviews.\r\n\r\nI have 10 million rows * 60 columns of data.\r\nAnd every 1 minute new/fresh data coming. And it is really unstable. So I need to train all data every 1 minute.\r\nI would like to learn if it is possible: I want to change trained data model with new data;\r\nload it, change it and write it again.\r\n\r\nLike:\r\n```\r\n            PredictionModel.ReadAsync(_modelpath).Wait();\r\n            PredictionModel<IrisData, IrisPrediction> model = pipeline.Train<IrisData, IrisPrediction>();\r\n            model.WriteAsync(_modelpath).Wait();\r\n```\r\n\r\nI'm not sure if it is working?\r\n\r\nThans advance!","Url":"https://github.com/dotnet/machinelearning/issues/470","RelatedDescription":"Open issue \"How to add new data to existing trained data model?\" (#470)"},{"Id":"337618807","IsPullRequest":false,"CreatedAt":"2018-07-02T19:17:29","Actor":"ErcinDedeoglu","Number":"469","RawContent":null,"Title":"How to load data from variable?","State":"closed","Body":"Hi,\r\nI want to load data from memory, so I can connect it with sql server, webservice etc.\r\n\r\n`pipeline.Add(new TextLoader(dataPath).CreateFrom<IrisData>(separator: ','));`\r\nbut this is only method that I can find! It only works with file on the disk!\r\n\r\nI want to add data from variable like:\r\n`string x = \"116.76000,0.00000,116.76000,0.00000,116.76000,UP\"`\r\n\r\nI hope it is possible right now?\r\n\r\nThanks advance!","Url":"https://github.com/dotnet/machinelearning/issues/469","RelatedDescription":"Closed issue \"How to load data from variable?\" (#469)"},{"Id":"337580150","IsPullRequest":false,"CreatedAt":"2018-07-02T16:11:45","Actor":"sfilipi","Number":"465","RawContent":null,"Title":"Create EntryPoint for LightGBM","State":"open","Body":"Currently LightGBM is part of ML.Net Trainers, but there is no [entry point](https://github.com/dotnet/machinelearning/blob/master/docs/code/EntryPoints.md) it. \r\n\r\nOther languages, that interface with ML.Net through Entry Points won't have access to it, until there is an entry point for it. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/465","RelatedDescription":"Open issue \"Create EntryPoint for LightGBM\" (#465)"},{"Id":"337193292","IsPullRequest":true,"CreatedAt":"2018-06-30T07:02:01","Actor":"TomFinley","Number":"462","RawContent":null,"Title":"Isolate ONNX implementations in separate DLL","State":"open","Body":"Partial fix to #162. The full fix would be pushing the DLL into its own nuget so we could remove the protobuf dependency. However I am not sure how to do that. Maybe @eerhardt can help me here.\r\n\r\nPreviously, the ONNX infrastructure and implementations (including refs to protobuf) were in a central DLL. This gave us a dependency on a separate somewhat large project (protobuf), that was only of interest to people saving ONNX models.\r\n\r\nBy having the components save themselves through interfaces rather than actual instantiable classes (`OnnxContext` became `IOnnxContext`, `NodeProto` and `OnnxUtils` became `IOnnxNode`), there is no need for any \"direct\" dependency on protobuf.\r\n\r\nAll implementation classes become internal classes of the `Microsoft.ML.Onnx` project. (This was previously called `Microsoft.ML.UniversalFormat` due to historical reasons that no longer make sense.) The only public classes in that project are the entry-points and commands inside `SaveOnnxCommand.cs`, which instantiate actual implementors of those interfaces, then pass to ONNX savable components.\r\n\r\nAlso, I opportunistically improved documentation on those public interfaces (though even with docs the interfaces would scarcely make sense to someone unfamiliar with ONNX), and improved the code.","Url":"https://github.com/dotnet/machinelearning/pull/462","RelatedDescription":"Open PR \"Isolate ONNX implementations in separate DLL\" (#462)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-04T05:30:37.6463676Z","RunDurationInMilliseconds":1121}