{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7059847892","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:43:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15739","RelatedDescription":"Merged pull request \"Unix: Specify Ordinal comparison in TimeZoneInfo\" (#15739) at dotnet/coreclr","RelatedBody":"The default behavior for `StartsWith` uses the current culture for comparisons. These should be ordinal."},{"Id":"7059847286","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:42:59","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15738","RelatedDescription":"Merged pull request \"Address ReflectionTypeLoadException feedback\" (#15738) at dotnet/coreclr","RelatedBody":"Address additional minor feedback from #15711:\r\n\r\n - Share the code for `Message` and `ToString`\r\n - Remove trailing `NewLine` from resulting string\r\n - Pass initial base string to `StringBuilder..ctor`\r\n - Cache the exceptions array in a local (passed-in as a parameter)\r\n - Move methods below properties\r\n - Remove trailing whitespace\r\n\r\ncc: @wtgodbe, @danmosemsft"},{"Id":"7059846406","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:42:29","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15740","RelatedDescription":"Merged pull request \"Use string.Contains(char) instead of Contains(string)\" (#15740) at dotnet/coreclr","RelatedBody":"Now that `string.Contains(char)` exists, use it in corelib."},{"Id":"7059811651","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:24:13","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15748","RelatedDescription":"Opened pull request \"Simplfiy AppDomain.ToString\" (#15748) at dotnet/coreclr","RelatedBody":"Simply concatenate the strings instead of using the `StringBuilderCache`."},{"Id":"7059810679","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:23:40","Actor":"maryamariyan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15729","RelatedDescription":"Merged pull request \"Adding EnsureCapacity implementation for Dictionary\" (#15729) at dotnet/coreclr","RelatedBody":"Adding EnsureCapacity API to Dictionary and Adding Tests.\r\ntests and the ref changes are made in a corefx PR separately here https://github.com/dotnet/corefx/pull/26158.\r\n\r\ncc: @danmosemsft @benaadams \r\n \r\nTODO Next in a separate PR:\r\n- Will add EnsureCapacity to SortedSet and HashSet \r\n- Will add TrimExcess to Dictionary, SortedSet "},{"Id":"7059787110","Type":"PullRequestEvent","CreatedAt":"2018-01-05T04:10:30","Actor":"justinvp","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15747","RelatedDescription":"Opened pull request \"AggregateException: Use StringBuilder.AppendFormat\" (#15747) at dotnet/coreclr","RelatedBody":"Use `AppendFormat(...)` instead of `Append(string.Format(...))` and `AppendLine()` instead of `Append(Environment.NewLine)`."},{"Id":"7059641551","Type":"PullRequestEvent","CreatedAt":"2018-01-05T03:02:16","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15746","RelatedDescription":"Opened pull request \"Add IL tests for cases where Span is not allowed\" (#15746) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/8516"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7058110293","Type":"IssuesEvent","CreatedAt":"2018-01-04T19:01:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8148","RelatedDescription":"Closed issue \"Add --list-sdks and --list-runtimes to the help of the Sdk\" (#8148) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Build latest version on Ubuntu\r\n- Go to a project where global.json specifies an earlier version\r\n- `dotnet restore`\r\n- Get an error:\r\n> The specified SDK version [old version] from global.json [path/to/global.json] not found; install specified SDK version\r\n- OK, so we need to edit global.json.  What's the new version?\r\n- `dotnet --version`\r\n- Get an error:\r\n> The specified SDK version [old version] from global.json [path/to/global.json] not found; install specified SDK version\r\n\r\n## Expected  behavior\r\nI'd expect `dotnet --version` to always give me the version\r\n\r\n## Actual behavior\r\nIf I'm currently in a folder with a `global.json` file, it doesn't give me the version, instead giving me an error that I need the version number it won't give me in order to fix.  This can be worked around by `cd`ing to a folder that doesn't have a `global.json` file, but it's still annoying\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.1.1-preview-007094)\r\n\r\nProduct Information:\r\n Version:            2.1.1-preview-007094\r\n Commit SHA-1 hash:  f657648f07\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/osboxes/dotnet/roslyn/Binaries/dotnet-cli/sdk/2.1.1-preview-007094/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n"},{"Id":"7058107825","Type":"PullRequestEvent","CreatedAt":"2018-01-04T19:00:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8324","RelatedDescription":"Merged pull request \"Add help for list-sdks and list-runtimes\" (#8324) at dotnet/cli","RelatedBody":"Add help for `--list-sdks` and `--list-runtimes` which is shown via `dotnet --help` or `dotnet --h` when the SDK is installed.\r\n\r\nThis matches the help previously added to core-setup when just doing a `dotnet`, or when `dotnet --help` or `dotnet --h` is used without the SDK being present.\r\n\r\nFixes https://github.com/dotnet/core-setup/issues/3503\r\n\r\n@nguerrera assuming we want this for preview1, do I need to create a PR in that branch, or are we doing mass syncing of master to preview1?"},{"Id":"7055389532","Type":"PullRequestEvent","CreatedAt":"2018-01-04T08:00:38","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8328","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to dev/release/2.0\" (#8328) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20180104-080037\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20180104-080037 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7055389441","Type":"PullRequestEvent","CreatedAt":"2018-01-04T08:00:36","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8327","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#8327) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180104-080035\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180104-080035 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7054900571","Type":"PullRequestEvent","CreatedAt":"2018-01-04T04:18:31","Actor":"schneems","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8326","RelatedDescription":"Opened pull request \"[ci skip] Get more Open Source Helpers\" (#8326) at dotnet/cli","RelatedBody":"[CodeTriage](https://www.codetriage.com/) is an app I have maintained\nfor the past 4-5 years with the goal of getting people involved in\nOpen Source projects like this one. The app sends subscribers a random\nopen issue for them to help \"triage\". For some languages you can also\nsuggested areas to add documentation.\n\nThe initial approach was inspired by seeing the work of the small\ncore team spending countless hours asking \"what version was\nthis in\" and \"can you give us an example app\". The idea is to\noutsource these small interactions to a huge team of volunteers\nand let the core team focus on their work.\n\nI want to add a badge to the README of this project. The idea is to\nprovide an easy link for people to get started contributing to this\nproject. A badge indicates the number of people currently subscribed\nto help the repo. The color is based off of open issues in the project.\n\nHere are some examples of other projects that have a badge in their\nREADME:\n\n- https://github.com/crystal-lang/crystal\n- https://github.com/rails/rails\n- https://github.com/codetriage/codetriage\n\nThanks for building open source software, I would love to help you find some helpers."},{"Id":"7054875215","Type":"PullRequestEvent","CreatedAt":"2018-01-04T04:04:40","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8325","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26104-04 (master)\" (#8325) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7054373613","Type":"PullRequestEvent","CreatedAt":"2018-01-04T00:18:07","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8323","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4782 into cli\" (#8323) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4782 into cli master branch"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7058805790","Type":"PullRequestEvent","CreatedAt":"2018-01-04T21:57:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02404-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7056464684","Type":"IssuesEvent","CreatedAt":"2018-01-04T12:53:29","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Closed issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7054495904","Type":"PullRequestEvent","CreatedAt":"2018-01-04T01:09:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7054119223","Type":"PullRequestEvent","CreatedAt":"2018-01-03T22:46:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7053032329","Type":"IssuesEvent","CreatedAt":"2018-01-03T18:01:03","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/605","RelatedDescription":"Closed issue \"NETStandard 2.0 Project Template not working properly.\" (#605) at dotnet/standard","RelatedBody":"I've an issue when creating project template in VS 2017 15.5.1 version.\r\n\r\nWhen i create a project template and use it to create a project. There is no file existed in there regarding my project templates have many files.\r\n\r\nSteps to re-produce the bug:\r\n- Create a NETStandard2 class library in VS 2017.\r\n- Create multiple files in there.\r\n- Export Template for that projects.\r\n- Copy that template into: C:\\Users\\{Username}\\Documents\\Visual Studio 2017\\Templates\\ProjectTemplates \r\n- Create a project base on that template.\r\n\r\nAnyone have any idea for this one?"},{"Id":"7053021857","Type":"IssuesEvent","CreatedAt":"2018-01-03T17:58:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Closed issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Environment\r\n- Windows 10 (Version 10.0.16299)\r\n- Visual Studio 2017 15.5.2\r\n- .NET Core SDK 2.1.3 (64-bit) installed\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that initialises the `IFoo` private field\r\n\r\n\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n\r\nNote that I have a parameterless contructor for `DummyController`.\r\n\r\n5. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`InvalidOpeartionException` is thrown with the inner exception `MissingMethodException`.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n\r\n## Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n\r\n## Moving the initialisation of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"},{"Id":"7052970315","Type":"PullRequestEvent","CreatedAt":"2018-01-03T17:45:56","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02402-04 (master)\" (#610) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7059921660","Type":"IssuesEvent","CreatedAt":"2018-01-05T05:23:31","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26174","RelatedDescription":"Opened issue \"Provided a CoreFX API Analyzer\" (#26174) at dotnet/corefx","RelatedBody":"### Rationale\r\nThere are a number of APIs in CoreFX for which special rules may apply, or for which it may be useful to provide additional diagnostics at compile time or during development time.\r\n\r\nAs such, I propose we create a dedicated project (or repository) to contain these CoreFX specific analyzers.\r\n\r\n### Example\r\n\r\nThe new Hardware Intrinsic APIs occasionally have special rules. For example, `Vector128<float> System.Runtime.Intrinsics.X86.Sse.Shuffle(Vector128<float>, Vector128<float>, byte)` requires that the third parameter be a constant so that the underlying hardware instruction can be emitted appropriately.\r\n\r\nThe diagnostic that applies to this is very niche, and will only realistically be used by the hardware intrinsic APIs, so doing something like providing a language feature to enforce it is unlikely to happen.\r\n\r\nHowever, implementing a diagnostic analyzer that detects the case where a user does not pass a constant and therefore violates the API contract is fairly trivial and greatly improves the development experience when consuming said API.\r\n\r\nOther analyzers could include common bug fixes made to the repos or suggestions to use the latest APIs that are being added. For example, many of the Desktop framework APIs only took a string. However, CoreCLR added a number of overloads which allow passing single characters instead. Additionally, CoreFX has recently added a number of overloads which take `Span<T>`. Both of these are code-fix analyzers that could be easily suggested to the developer."},{"Id":"7059670037","Type":"IssuesEvent","CreatedAt":"2018-01-05T03:14:13","Actor":"ufcpp","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26173","RelatedDescription":"Opened issue \"API Propsal: char.GetUnicodeCategory(unicode scalar)\" (#26173) at dotnet/corefx","RelatedBody":"I'd like Unicode scalar/code point/[rune](https://github.com/dotnet/corefx/issues/24093) version of the `GetUnicodeCategory` method.\r\n\r\nI have a [UTF8-related library](https://github.com/ufcpp/GraphemeSplitter) and I often write a code like the following:\r\n\r\n```cs\r\nchar.GetUnicodeCategory(char.ConvertFromUtf32(0x1F401), 0)\r\n```\r\n\r\nThis is inefficient because of string allocation. Futhermore, coreclr has the [`InternalGetUnicodeCategory(int ch)`](https://source.dot.net/#System.Private.CoreLib/shared/System/Globalization/CharUnicodeInfo.cs,196d0be2b1b2b26a) method internally. Please make this public.\r\n"},{"Id":"7059588969","Type":"IssuesEvent","CreatedAt":"2018-01-05T02:41:09","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26172","RelatedDescription":"Opened issue \"Convert System.Runtime.Caching project to support netstandard\" (#26172) at dotnet/corefx","RelatedBody":"This work items is to convert the project to support all platforms and to adjust the code to do the right thing without having all the functionality on all platforms.\r\n\r\nWith the current S.R.Caching.MemoryCache memory management design the main missing external piece to fully support all platforms is #25617. Once this is implemented, the cache will still likely need some \"adjustments\" as the way of deriving \"cache memory pressure\" from \"memory usage\" is likely to be different on Linux (or even different on different versions of Linux). This invites further design decisions whether to let the cache \"translate\" memory readings into memory pressure itself or to delegate this to the user code (or have both the default algorithm and an opportunity to override it)...\r\n\r\nUntil then the plan is to support netstandard but the cache will throw PNSE if the corresponding memory settings are provided on the platforms where we don't have comprehensive memory info yet.\r\n"},{"Id":"7059534181","Type":"IssuesEvent","CreatedAt":"2018-01-05T02:18:43","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26171","RelatedDescription":"Opened issue \"System.Runtime.Caching tests - style and other minor changes\" (#26171) at dotnet/corefx","RelatedBody":"There are a few PR comments to #25169 that would require minor refactoring to the tests. I plan to do it in a separate PR in order to not delay the main bulk of tests to get into the COREFX. \r\n- [ ] string de-duplication\r\n- [ ] nullable type, etc.. "},{"Id":"7059533914","Type":"IssuesEvent","CreatedAt":"2018-01-05T02:18:35","Actor":"kg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26170","RelatedDescription":"Opened issue \"TCPListener.Stop leaks a socket handle (intentionally?)\" (#26170) at dotnet/corefx","RelatedBody":"If you use TCPListener.Start and then Stop the listener, the Stop method then creates a new socket. That socket leaks until reclaimed by the GC (or some other mechanism). In many cases this is harmless since it's not eating up a port, but on Linux this can result in \"Too many open files\".\r\n\r\nhttps://github.com/dotnet/corefx/blob/6719752de7cee6ee44ba3cd542c36d6785034413/src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs#L165\r\n\r\nMono uses corefx's implementation of this class and using TCPListener in a loop will typically exhaust available handles relatively quickly, producing this:\r\n\r\n```\r\nUnhandled Exception:\r\nSystem.Net.Sockets.SocketException (0x80004005): Too many open files\r\n  at System.Net.Sockets.Socket.Accept () [0x00033] in <c2e1018d8475415eae8a3c299d0a3981>:0 \r\n  at System.Net.Sockets.TcpListener.AcceptSocket () [0x0001e] in <c2e1018d8475415eae8a3c299d0a3981>:0 \r\n  at Program.Step () [0x000d0] in <5edebf9e82cb4b9695ac71dcde742b80>:0 \r\n```\r\n\r\nFrom my testing on Windows both .NET Framework and .NET Core leak a handle in Stop, but periodically the leaked handles are collected via some mechanism (according to Visual Studio diagnostic tools, this mechanism is not a regular GC). If you look at the handle count for the dotnet process it climbs very rapidly while starting/stopping TCPListeners, then occasionally drops by like 700.\r\n\r\nSo, given that this behavior matches .NET Framework, it's probably not a \"bug\", but it seems wrong to me. Is it intentional and something that has to be kept for compatibility purposes? I'd argue that .Stop should not be allocating a new socket, since in many scenarios the user is never going to use the listener again after they stop it, and that leaked handle will sit around for a while.\r\n\r\nHere is my test case. I tested it on Windows under .NET Framework and .NET Core 2.0, and on Linux under trunk mono:\r\nhttps://gist.github.com/kg/09f6eeb8082838913a65eb5b19fbb9d6\r\n\r\nMono throwing an exc here is obviously not dotnet's fault, but I wanted to raise the underlying stdlib issue since it seems wrong to me."},{"Id":"7059522843","Type":"PullRequestEvent","CreatedAt":"2018-01-05T02:13:52","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26166","RelatedDescription":"Merged pull request \"Fix ReflectionTypeLoadExceptionTests\" (#26166) at dotnet/corefx","RelatedBody":"Expected values should be specified before actual values, and use `Assert.Null` instead of `Assert.Equal` for null values.\r\n\r\ncc: @wtgodbe, @jkotas"},{"Id":"7059514790","Type":"PullRequestEvent","CreatedAt":"2018-01-05T02:10:23","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25169","RelatedDescription":"Merged pull request \"Adding tests for System.Runtime.Caching\" (#25169) at dotnet/corefx","RelatedBody":"Also adding a solution file for all System.Runtime.Caching projects\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7059750977","Type":"IssuesEvent","CreatedAt":"2018-01-05T03:51:55","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23563","RelatedDescription":"Closed issue \"Occasional FileNotFoundExceptions in VS Builds coming from CSC.exe and BuildServerConnection type\" (#23563) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n* csc.exe: 2.6.0.62321 (26fb741a)\r\n* Visual Studio: 27129.0.d15.6 (15.6.0 branch)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Rebuild project in VS (I've see it occasionally across multiple machines and projects, but it's inconsistent)\r\n\r\n**Expected Behavior**: Successful/failed build results with compiler errors, etc.\r\n\r\n**Actual Behavior**: Exception is thrown by csc.exe:\r\n\r\n```\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error MSB3883: Unexpected exception:\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : System.IO.FileNotFoundException: Could not load file or assembly 'System.Security.Principal.Windows, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : File name: 'System.Security.Principal.Windows, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.GetPipeNameForPathOpt(String compilerExeDirectory)\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.get_IsCompilerServerSupported()\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : WRN: Assembly binding logging is turned OFF.\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : Note: There is some performance penalty associated with assembly bind failure logging.\r\n10>C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets(84,5): error : To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n```\r\n\r\nIt's inconsistent, and can usually be resolved by killing VBCSCompiler.exe, but it's a pain when it happens and once it starts it seems to be consistent until VBCSCompiler is restarted."},{"Id":"7059747919","Type":"IssuesEvent","CreatedAt":"2018-01-05T03:50:23","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23777","RelatedDescription":"Closed issue \"Overload resolution bug when calling params method from derived class\" (#23777) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    class B\r\n    {\r\n    }\r\n\r\n    class C\r\n    {\r\n        void M(B b, params object[] args)\r\n        {\r\n        }\r\n\r\n        /*\r\n        void M(params object[] args)\r\n        {\r\n            // Correctly picks up on M(B, object[])\r\n            M(new B(), args);\r\n        }\r\n        */\r\n    }\r\n\r\n    class D : C\r\n    {\r\n        void M(params object[] args)\r\n        {\r\n            // Wrongly picks up on M(object[]), leading to StackOverflowException\r\n            M(new B(), args);\r\n        }\r\n    }\r\n```\r\n\r\nI picked up this bug while working on an analyzer, funnily enough. Here's the code where I actually ran into the bug: https://github.com/jamesqo/roslyn-analyzers/blob/7b686d8ac75b9f555a2e87417be45c37a3ad79f3/src/Microsoft.CodeQuality.Analyzers/UnitTests/ApiDesignGuidelines/DoNotMixBlockingAndAsyncTests.Fixer.cs#L34-L42. I was able to work around it by using named parameters."},{"Id":"7059695209","Type":"IssuesEvent","CreatedAt":"2018-01-05T03:25:45","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22237","RelatedDescription":"Closed issue \"Bogus assert in EnsureIsReadOnlyAttributeExists \" (#22237) at dotnet/roslyn","RelatedBody":"I saw the assert once while trying to rename a \"ref readonly\" parameter in CoreFxLab solution.\r\nThe assert is ignorable and I could not reproduce it again. \r\n\r\n== Update: \r\nIt seems it can also be cause by solution crawler. \r\n\r\nThe assert is benign and seems bogus. \r\n\r\nThe following code calls into the helper when attribute is already already known to be needed that bit is \"frozen\".\r\n\r\n```cs\r\n                if (parameter.RefKind == RefKind.RefReadOnly)\r\n                {\r\n                    // These parameters might not come from a compilation (example: lambdas evaluated in EE).\r\n                    // During rewriting, lowering will take care of flagging the appropriate PEModuleBuilder instead.\r\n                    parameter.DeclaringCompilation?.EnsureIsReadOnlyAttributeExists(diagnostics, parameter.GetNonNullSyntaxNode().Location, modifyCompilationForRefReadOnly);\r\n                }\r\n```\r\n\r\nEither should not call, or should relax the assert to not be triggered when asking for something that we already asked before. \r\nI think we should do the latter. -relax the attribute\r\n"},{"Id":"7059681976","Type":"IssuesEvent","CreatedAt":"2018-01-05T03:19:36","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21684","RelatedDescription":"Closed issue \"Weird missing assembly problem while calling Emit (not in insider version of Windows 10) \" (#21684) at dotnet/roslyn","RelatedBody":"I'm trying to using Roslyn to compile C# code in Netfx46. Roslyn package is referred in a multi-targets dll solution, including net46 as one target. MetadataReferenceResolver is provided and ResolveMissingAssembly is overridden.\r\n\r\nWhen I calling Emit from Windows 10 released version, Enterprise x64 15063, no matter VS is installed or not, there will be an exception thrown:\r\n\r\n> Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Security.Cryptography.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n>    at Microsoft.CodeAnalysis.CryptographicHashProvider.ComputeSha1(Byte[] bytes)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentity.CalculatePublicKeyToken(ImmutableArray`1 publicKey)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentity.get_PublicKeyToken()\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentity.KeysEqual(AssemblyIdentity x, AssemblyIdentity y)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentity.EqualIgnoringNameAndVersion(AssemblyIdentity x, AssemblyIdentity y)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentity.MemberwiseEqual(AssemblyIdentity x, AssemblyIdentity y)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentityComparer.TriviallyEquivalent(AssemblyIdentity x, AssemblyIdentity y)\r\n>    at Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(AssemblyIdentity reference, String referenceDisplayName, AssemblyIdentity definition, Boolean& unificationApplied, Boolean ignoreVersion)\r\n>    at Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolveReferencedAssembly(AssemblyIdentity reference, ImmutableArray`1 definitions, Int32 definitionStartIndex, AssemblyIdentityComparer assemblyIdentityComparer)\r\n>    at Microsoft.CodeAnalysis.CommonReferenceManager`2.ResolveReferencedAssemblies(ImmutableArray`1 references, ImmutableArray`1 definitions, Int32 definitionStartIndex, AssemblyIdentityComparer assemblyIdentityComparer)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.AssemblyDataForMetadataOrCompilation.BindAssemblyReferences(ImmutableArray`1 assemblies, AssemblyIdentityComparer assemblyIdentityComparer)\r\n>    at Microsoft.CodeAnalysis.CommonReferenceManager`2.Bind(TCompilation compilation, ImmutableArray`1 explicitAssemblies, ImmutableArray`1 explicitModules, ImmutableArray`1 explicitReferences, ImmutableArray`1 explicitReferenceMap, MetadataReferenceResolver resolverOpt, MetadataImportOptions importOptions, Boolean supersedeLowerVersions, Dictionary`2 assemblyReferencesBySimpleName, ImmutableArray`1& allAssemblies, ImmutableArray`1& implicitlyResolvedReferences, ImmutableArray`1& implicitlyResolvedReferenceMap, DiagnosticBag resolutionDiagnostics, Boolean& hasCircularReference, Int32& corLibraryIndex)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.ReferenceManager.CreateSourceAssemblyForCompilation(CSharpCompilation compilation)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetRuntimeMetadataVersion(EmitOptions emitOptions)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetRuntimeMetadataVersion(EmitOptions emitOptions, DiagnosticBag diagnostics)\r\n>    at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CreateModuleBuilder(EmitOptions emitOptions, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, IEnumerable`1 manifestResources, CompilationTestData testData, DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n>    at Microsoft.CodeAnalysis.Compilation.CheckOptionsAndCreateModuleBuilder(DiagnosticBag diagnostics, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)\r\n>    at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken)\r\n>    at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken)\r\n\r\nThis exception is thrown while calling Emit. Though MetadataReferenceResolver is provided, but ResolveMissingAssembly is not called.\r\n\r\nWhile running the same code in Windows Insider Version (Enterprise x64 16257), it works like a charm. No problem at all.\r\n\r\nAnd, I tried to send the compiled exe among these testing computers. No matter the exe file came from, exception will always be thrown in Windows released version and not in insider version. Even, the problem is gone after I upgrade one computer from released version to insider version.\r\n\r\nTesting source code: https://github.com/scegg/CSharpRoslynAgency\r\nJust download all source code, compile and select to start NetFxConsole project.\r\n\r\nAny idea?\r\nThanks."},{"Id":"7059619961","Type":"IssuesEvent","CreatedAt":"2018-01-05T02:53:26","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24060","RelatedDescription":"Closed issue \"UseExplicitType: var in deconstruction is rewritten with unexpected newlines\" (#24060) at dotnet/roslyn","RelatedBody":"A number of undesirable newlines get added to the generated code during formatting.\r\n\r\nAs far as I can tell the root cause of the newlines getting added is `AbstractTriviaFormatter.GetLineColumnOfWhitespace` which returns a value with lines=1. This causes `AbstractTriviaFormatter.AddWhitespaceTextChange` to add a newline.\r\n\r\n```C#\r\n        [WpfFact, Trait(Traits.Feature, Traits.Features.CodeActionsUseExplicitType)]\r\n        [WorkItem(23752, \"https://github.com/dotnet/roslyn/issues/23752\")]\r\n        public async Task OnNestedDeconstructionVarWithTrivia()\r\n        {\r\n            await TestInRegularAndScriptAsync(\r\n@\"using System;\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n        /*before*/[|var|]/*after*/ (/*x1*/x/*x2*/, /*yz1*/(/*y1*/y/*y2*/, /*z1*/z/*z2*/)/*yz2*/) /*end*/ = new Program();\r\n    }\r\n    void Deconstruct(out int i, out Program s) { i = 1; s = null; }\r\n}\", @\"using System;\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n        /*before*//*after*/ (\r\n/*x1*/int x/*x2*/,\r\n/*yz1*/(\r\n/*y1*/int y/*y2*/,\r\n/*z1*/Program z/*z2*/)/*yz2*/) /*end*/ = new Program();\r\n    }\r\n    void Deconstruct(out int i, out Program s) { i = 1; s = null; }\r\n}\", options: ExplicitTypeEverywhere());\r\n        }\r\n```"},{"Id":"7059513426","Type":"IssuesEvent","CreatedAt":"2018-01-05T02:09:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24060","RelatedDescription":"Opened issue \"UseExplicitType: var in deconstruction is rewritten with unexpected newlines\" (#24060) at dotnet/roslyn","RelatedBody":"A number of undesirable newlines get added to the generated code during formatting.\r\n\r\nAs far as I can tell the root cause of the newlines getting added is `AbstractTriviaFormatter.GetLineColumnOfWhitespace` which returns a value with lines=1. This causes `AbstractTriviaFormatter.AddWhitespaceTextChange` to add a newline.\r\n\r\n```C#\r\n        [WpfFact, Trait(Traits.Feature, Traits.Features.CodeActionsUseExplicitType)]\r\n        [WorkItem(23752, \"https://github.com/dotnet/roslyn/issues/23752\")]\r\n        public async Task OnNestedDeconstructionVarWithTrivia()\r\n        {\r\n            await TestInRegularAndScriptAsync(\r\n@\"using System;\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n        /*before*/[|var|]/*after*/ (/*x1*/x/*x2*/, /*yz1*/(/*y1*/y/*y2*/, /*z1*/z/*z2*/)/*yz2*/) /*end*/ = new Program();\r\n    }\r\n    void Deconstruct(out int i, out Program s) { i = 1; s = null; }\r\n}\", @\"using System;\r\nclass Program\r\n{\r\n    void M()\r\n    {\r\n        /*before*//*after*/ (\r\n/*x1*/int x/*x2*/,\r\n/*yz1*/(\r\n/*y1*/int y/*y2*/,\r\n/*z1*/Program z/*z2*/)/*yz2*/) /*end*/ = new Program();\r\n    }\r\n    void Deconstruct(out int i, out Program s) { i = 1; s = null; }\r\n}\", options: ExplicitTypeEverywhere());\r\n        }\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7058028026","Type":"PullRequestEvent","CreatedAt":"2018-01-04T18:41:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5206","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5206) at dotnet/corert","RelatedBody":""},{"Id":"7058027044","Type":"PullRequestEvent","CreatedAt":"2018-01-04T18:41:01","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5206","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5206) at dotnet/corert","RelatedBody":""},{"Id":"7057756247","Type":"PullRequestEvent","CreatedAt":"2018-01-04T17:35:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5204","RelatedDescription":"Merged pull request \"Fix TODO about moving HandleRef type to CoreLib\" (#5204) at dotnet/corert","RelatedBody":""},{"Id":"7057698840","Type":"PullRequestEvent","CreatedAt":"2018-01-04T17:22:25","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5205","RelatedDescription":"Merged pull request \"Update BuildTools\" (#5205) at dotnet/corert","RelatedBody":""},{"Id":"7057514740","Type":"PullRequestEvent","CreatedAt":"2018-01-04T16:43:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5205","RelatedDescription":"Opened pull request \"Update BuildTools\" (#5205) at dotnet/corert","RelatedBody":""},{"Id":"7057404969","Type":"PullRequestEvent","CreatedAt":"2018-01-04T16:20:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5204","RelatedDescription":"Opened pull request \"Fix TODO about moving HandleRef type to CoreLib\" (#5204) at dotnet/corert","RelatedBody":""},{"Id":"7057211472","Type":"PullRequestEvent","CreatedAt":"2018-01-04T15:41:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5203","RelatedDescription":"Merged pull request \"Restore ability to compile against Test.CoreLib\" (#5203) at dotnet/corert","RelatedBody":""},{"Id":"7057206358","Type":"PullRequestEvent","CreatedAt":"2018-01-04T15:40:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5202","RelatedDescription":"Merged pull request \"[ILVerify] Fix backward branching rule using signed byte for short-branch deltas\" (#5202) at dotnet/corert","RelatedBody":"This fixes the MarkPredecessorWithLowerOffset missing a cast to signed byte for short versions of branching instruction.\r\n\r\nI also added a valid test case for this scenario."},{"Id":"7057017660","Type":"PullRequestEvent","CreatedAt":"2018-01-04T15:01:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5203","RelatedDescription":"Opened pull request \"Restore ability to compile against Test.CoreLib\" (#5203) at dotnet/corert","RelatedBody":""},{"Id":"7056828121","Type":"PullRequestEvent","CreatedAt":"2018-01-04T14:21:27","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5202","RelatedDescription":"Opened pull request \"[ILVerify] Fix backward branching rule using signed byte for short-branch deltas\" (#5202) at dotnet/corert","RelatedBody":"This fixes the MarkPredecessorWithLowerOffset missing a cast to signed byte for short versions of branching instruction.\r\n\r\nI also added a valid test case for this scenario."},{"Id":"7056827096","Type":"PullRequestEvent","CreatedAt":"2018-01-04T14:21:13","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5199","RelatedDescription":"Merged pull request \"Add option to block all metadata in an assembly\" (#5199) at dotnet/corert","RelatedBody":"Adding an attribute type whose presence makes everything in an assembly reflection blocked.\r\n\r\nThis reduces the size of a Hello world by ~300 kB (50 kB in metadata blob and the rest are various runtime artifacts we no longer need).\r\n\r\nIf we evacuate public APIs out of System.Private.Interop and mark it fully blocked, we can get some more savings (e.g. the `bool IsComObject(Type type)` method marks `__ComObject` as reflectable (and constructed!) due to the ldtoken and there's no happiness in that)."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7058401857","Type":"PullRequestEvent","CreatedAt":"2018-01-04T20:13:50","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1837","RelatedDescription":"Merged pull request \"Partial resolution of issue 1327\" (#1837) at dotnet/sdk","RelatedBody":"Partial resolution of issue 1327\r\nAddressing: https://github.com/dotnet/sdk/issues/1327\r\n\r\nThe \"I_can_restore_a_project_with_implicit_msbuild_nuget_config\" tests are still failing on full framework.\r\n  "},{"Id":"7058173963","Type":"PullRequestEvent","CreatedAt":"2018-01-04T19:17:14","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1842","RelatedDescription":"Opened pull request \"WIP: Issue 736\" (#1842) at dotnet/sdk","RelatedBody":"First pass removal of conditional 'non-skip' blind returns in test cases.\r\n\r\nAddressing: https://github.com/dotnet/sdk/issues/736"},{"Id":"7058072510","Type":"PullRequestEvent","CreatedAt":"2018-01-04T18:52:07","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1841","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-rtm-4782 into sdk\" (#1841) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-rtm-4782 into sdk master branch"},{"Id":"7054748329","Type":"IssuesEvent","CreatedAt":"2018-01-04T03:02:48","Actor":"dasMulli","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1375","RelatedDescription":"Closed issue \"$(DefaultItemExcludes) in targets contains double slashes\" (#1375) at dotnet/sdk","RelatedBody":"I just stumbled on some weird behaviour trying to add generated compile files in a target:\r\n\r\non macOS, having only a `Program.cs.template` file as an example (remove `Program.cs` after each build) and a leftover assembly info file in a RID specific path in `obj/` from a previous RID-specific publish:\r\n\r\n```xml\r\n  <Target Name=\"GenerateSomeFiles\" BeforeTargets=\"BeforeBuild\">\r\n    <Exec Command=\"cp Program.cs.template Program.cs\" />\r\n    <Message Importance=\"high\" Text=\"DefaultItemExcludes: $(DefaultItemExcludes)\" />\r\n    <Message Importance=\"high\" Text=\"Exclude: $(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);@(Compile)\" />\r\n    <ItemGroup>\r\n      <Compile Include=\"**/*$(DefaultLanguageSourceExtension)\"\r\n               Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);@(Compile)\" />\r\n    </ItemGroup>\r\n    <Message Importance=\"high\" Text=\"Compile: @(Compile)\" />\r\n  </Target>\r\n```\r\n\r\nprints:\r\n\r\n```\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 15.3.388.41745 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  DefaultItemExcludes: ;bin/Debug//**;obj/Debug//**;bin//**;obj//**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc;packages/**\r\n  Exclude: ;bin/Debug//**;obj/Debug//**;bin//**;obj//**;**/*.user;**/*.*proj;**/*.sln;**/*.vssscc;packages/**;;**/.*/**;\r\n  Compile: obj/Debug/netcoreapp2.0/osx.10.12-x64/dasmulli.sample.application.AssemblyInfo.cs;obj/Debug/netcoreapp2.0/osx.10.12-x64/sampleapp.AssemblyInfo.cs;obj/Debug/netcoreapp2.0/sampleapp.AssemblyInfo.cs;Program.cs\r\n```\r\n\r\nand then fails because an old assembly info file was included in `@(Compile)` (might as well have been from switching between Debug and Release configurations).\r\n\r\nThe interesting part here is that these parts have double slashes in them:\r\n```\r\nbin/Debug//**;obj/Debug//**;bin//**;obj//**\r\n```\r\n\r\nwhich seem to originate from [being defined like `$(BaseIntermediateOutputPath)/**`](https://github.com/dotnet/sdk/blob/30baeae0a60f26214ffad743ddbbe4851375b4a2/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.targets#L29-L32).\r\n\r\nIf I add `$(BaseIntermediateOutputPath)**;$(BaseOutputPath)**` to the `Exclude` attribute, the directories are excluded as expected.\r\n\r\nHowever, I'd expect `$(DefaultItemExcludes)` to give me a safe value in all targets because the SDK should know which directories should be excluded and not require target authors to fix missing directories that only work during static evaluation. Is there anything that could be done to avoid this problem?\r\n\r\ncc @dsplaisted "},{"Id":"7054399074","Type":"PullRequestEvent","CreatedAt":"2018-01-04T00:28:27","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1840","RelatedDescription":"Merged pull request \"Updating repo-toolset to 1.0.0-beta-62503-02 \" (#1840) at dotnet/sdk","RelatedBody":"This fast tracks the change from release/2.1"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-01-05T05:30:22.3621781Z","RunDurationInMilliseconds":7976}