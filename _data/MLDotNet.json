{"Data":{"GitHub":{"Issues":[{"Id":"411040624","IsPullRequest":false,"CreatedAt":"2019-02-16T07:20:38","Actor":"Ivanidzo4ka","Number":"2592","RawContent":null,"Title":"PredictionKind in TrainerEstimatorBase should be internalized","State":"open","Body":"I don't see any reason to expose it publicly especially since all our trainers coupled with specific catalog.","Url":"https://github.com/dotnet/machinelearning/issues/2592","RelatedDescription":"Open issue \"PredictionKind in TrainerEstimatorBase should be internalized\" (#2592)"},{"Id":"411015117","IsPullRequest":false,"CreatedAt":"2019-02-16T02:20:44","Actor":"endintiers","Number":"2591","RawContent":null,"Title":"Documentation: ML.NET Algo Cheat Sheet/Bot","State":"open","Body":"### System information\r\n\r\nAll\r\n\r\n### Issue\r\n\r\nDocumentation Suggestion.\r\n\r\nCreate an algorithm cheat sheet along the lines of https://docs.microsoft.com/en-us/azure/machine-learning/studio/algorithm-cheat-sheet for ML.NET. Add options each time an AI library is added/changes.\r\n\r\nA chart is nice/easy but a) too small for all the possibilities in all libraries?, b) hard to update.\r\n\r\nHow about an algo-picker bot? Some better/easier idea? I guess a chart with really really small writing might work for V1.0.\r\n\r\nThe point is: \"If you build it, they won't necessarily come - unless you make it stoopidly easy for them to get there\".\r\n\r\n### Source code / logs\r\n\r\nN/A\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2591","RelatedDescription":"Open issue \"Documentation: ML.NET Algo Cheat Sheet/Bot\" (#2591)"},{"Id":"411013136","IsPullRequest":false,"CreatedAt":"2019-02-16T02:00:04","Actor":"Ivanidzo4ka","Number":"2590","RawContent":null,"Title":"Microsoft.ML.Internal.Internallearn namespace requires certain internalization","State":"open","Body":"At least\r\n`public sealed class SlotDropper` should become internal.\r\n`public static class PredictionUtil` should become internal\r\n`public static class TypeUtils`\r\nalso all public delegates in this namespace can be made internal.","Url":"https://github.com/dotnet/machinelearning/issues/2590","RelatedDescription":"Open issue \"Microsoft.ML.Internal.Internallearn namespace requires certain internalization\" (#2590)"},{"Id":"410994166","IsPullRequest":false,"CreatedAt":"2019-02-16T01:56:18","Actor":"Ivanidzo4ka","Number":"2585","RawContent":null,"Title":"IChannelProvider should become internal","State":"closed","Body":"towards #1602","Url":"https://github.com/dotnet/machinelearning/issues/2585","RelatedDescription":"Closed issue \"IChannelProvider should become internal\" (#2585)"},{"Id":"410994570","IsPullRequest":false,"CreatedAt":"2019-02-16T01:56:12","Actor":"Ivanidzo4ka","Number":"2587","RawContent":null,"Title":"IHost should become internal","State":"closed","Body":"towards #1602 ","Url":"https://github.com/dotnet/machinelearning/issues/2587","RelatedDescription":"Closed issue \"IHost should become internal\" (#2587)"},{"Id":"410994297","IsPullRequest":false,"CreatedAt":"2019-02-16T01:56:02","Actor":"Ivanidzo4ka","Number":"2586","RawContent":null,"Title":"IProgressChannelProvider should become internal","State":"closed","Body":"towards #1602 ","Url":"https://github.com/dotnet/machinelearning/issues/2586","RelatedDescription":"Closed issue \"IProgressChannelProvider should become internal\" (#2586)"},{"Id":"411010883","IsPullRequest":false,"CreatedAt":"2019-02-16T01:38:09","Actor":"Ivanidzo4ka","Number":"2589","RawContent":null,"Title":"Calibrators shouldn't have public constructors","State":"open","Body":"We closed our ModelParameters constructors. We should do same thing with calibrators.\r\nhttps://github.com/dotnet/machinelearning/blob/1f90f50f813ecd152e46e92deb4a7827c7f24e31/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L1745","Url":"https://github.com/dotnet/machinelearning/issues/2589","RelatedDescription":"Open issue \"Calibrators shouldn't have public constructors\" (#2589)"},{"Id":"410561532","IsPullRequest":true,"CreatedAt":"2019-02-16T01:29:57","Actor":"abgoswam","Number":"2563","RawContent":null,"Title":"In the public surface area, all occurrences of Argument keyword replaced with Options","State":"closed","Body":"Fixes #2557\r\n\r\nFor **public** API surface, all occurrences of *Argument* keyword replaced with *Options*\r\n\r\nSeveral internal classes continue to be called `Arguments`. We can target those post V1.0  since they are not part of public surface area anyway.","Url":"https://github.com/dotnet/machinelearning/pull/2563","RelatedDescription":"Closed or merged PR \"In the public surface area, all occurrences of Argument keyword replaced with Options\" (#2563)"},{"Id":"410919998","IsPullRequest":true,"CreatedAt":"2019-02-16T00:05:34","Actor":"Ivanidzo4ka","Number":"2574","RawContent":null,"Title":"Respect Marked exception during model loading.","State":"closed","Body":"address https://github.com/dotnet/machinelearning/issues/2567","Url":"https://github.com/dotnet/machinelearning/pull/2574","RelatedDescription":"Closed or merged PR \"Respect Marked exception during model loading.\" (#2574)"},{"Id":"410995976","IsPullRequest":false,"CreatedAt":"2019-02-16T00:03:43","Actor":"TomFinley","Number":"2588","RawContent":null,"Title":"Some Roslyn analyzer tests have unexpected compilation errors","State":"open","Body":"In #2562, @sharwell updates the code analyzer tests to utilize some existing convenience classes. This is great, but it also reveals an issue with the existing tests that should be fixed.\r\n\r\nThe old mechanism that was based on the VS Roslyn templates was restrictive in the diagnostics it \"listened\" to and reported. But this went even so far as not even reporting actual compilation errors, and some of the test sources have compilation errors of one form or another (missing declarations mostly, it seems like, based on files from `src` that were included in compilation, seems to be a common theme).\r\n\r\nFor these, it was not intended that there be compilation errors in the code compiled for testing the Roslyn analyzers, so that should be addressed and fixed. (Possibly be inserting dummy declarations into the test input to get it to compile, or some other mechanism.)\r\n\r\nSee the above PR #2562, for those changes where actual compilation errors are now listed among \"expected\" errors. The goal of this issue would be to get it so that those new \"additions\" are no longer necessary.\r\n\r\nThis FYI is *not* API critical work for v1.","Url":"https://github.com/dotnet/machinelearning/issues/2588","RelatedDescription":"Open issue \"Some Roslyn analyzer tests have unexpected compilation errors\" (#2588)"},{"Id":"410961770","IsPullRequest":true,"CreatedAt":"2019-02-15T23:49:03","Actor":"wschin","Number":"2578","RawContent":null,"Title":"[One-line change] Internalize MamlEvaluatorBase","State":"closed","Body":"To fix #1976, the last missing piece is hiding \r\n```csharp\r\n    public abstract class MamlEvaluatorBase : IMamlEvaluator\r\n```\r\nbecause we already have\r\n```csharp\r\n    [BestFriend]\r\n    internal abstract partial class EvaluatorBase<TAgg> : IEvaluator\r\n        where TAgg : EvaluatorBase<TAgg>.AggregatorBase\r\n\r\n    [BestFriend]\r\n    internal interface IMamlEvaluator : IEvaluator\r\n\r\n    [BestFriend]\r\n    internal interface IEvaluator\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/2578","RelatedDescription":"Closed or merged PR \"[One-line change] Internalize MamlEvaluatorBase\" (#2578)"},{"Id":"410985992","IsPullRequest":true,"CreatedAt":"2019-02-15T23:19:12","Actor":"rogancarr","Number":"2584","RawContent":null,"Title":"Adding functional tests for explainability","State":"open","Body":"This PR adds functional tests for Explainability features. Namely, it tests the following scenarios:\r\n\r\n* I can get near-free (local) feature importance for scored examples (Feature Contributions)\r\n* I can view the overall importance of each feature (Permutation Feature Importance, GetFeatureWeights)\r\n* I can train interpretable models (linear model, GAM)\r\n* I can view how much each feature contributed to each prediction for trees and linear models (Feature Contributions)\r\n\r\nFixes #2573 ","Url":"https://github.com/dotnet/machinelearning/pull/2584","RelatedDescription":"Open PR \"Adding functional tests for explainability\" (#2584)"},{"Id":"410980618","IsPullRequest":false,"CreatedAt":"2019-02-15T22:56:58","Actor":"Ivanidzo4ka","Number":"2583","RawContent":null,"Title":"DataKind shouldn't be publicly visible.","State":"open","Body":"We need to replace places like this \r\nhttps://github.com/dotnet/machinelearning/blob/13b33392dd3fbffc0922b2af72c8236b74c95fc0/src/Microsoft.ML.Data/Transforms/TypeConverting.cs#L542\r\nhttps://github.com/dotnet/machinelearning/blob/832ecad57808bbe79f36dc6886882781fb5bd399/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L45\r\nto proper .net type support.","Url":"https://github.com/dotnet/machinelearning/issues/2583","RelatedDescription":"Open issue \"DataKind shouldn't be publicly visible.\" (#2583)"},{"Id":"410977775","IsPullRequest":false,"CreatedAt":"2019-02-15T22:46:14","Actor":"eerhardt","Number":"2582","RawContent":null,"Title":"Mark EntryPoints classes and APIs as internal","State":"open","Body":"We have a few classes in `Microsoft.ML.Core` that are public, but they shouldn't be.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/13b33392dd3fbffc0922b2af72c8236b74c95fc0/src/Microsoft.ML.Core/EntryPoints/TransformModel.cs#L14\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/13b33392dd3fbffc0922b2af72c8236b74c95fc0/src/Microsoft.ML.Core/EntryPoints/PredictorModel.cs#L14\r\n\r\nBasically, anything under the `Microsoft.ML.EntryPoints` namespace should be internal.\r\n\r\nThis is OK, because anything that uses EntryPoints already has `InternalsVisibleTo`.\r\n\r\n@TomFinley @glebuk @ganik @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/2582","RelatedDescription":"Open issue \"Mark EntryPoints classes and APIs as internal\" (#2582)"},{"Id":"410976758","IsPullRequest":false,"CreatedAt":"2019-02-15T22:42:47","Actor":"yaeldekel","Number":"2581","RawContent":null,"Title":"Remove value tuples from TransformsCatalog methods","State":"open","Body":"Many of the methods in TransformsCatalog create estimators using a params array of (string outputColumnName, string inputColumnName). As mentioned in #2501, we should change all these to not use value tuples.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2581","RelatedDescription":"Open issue \"Remove value tuples from TransformsCatalog methods\" (#2581)"},{"Id":"410969048","IsPullRequest":true,"CreatedAt":"2019-02-15T22:17:34","Actor":"yaeldekel","Number":"2580","RawContent":null,"Title":"VectorToImageTransform conversion to estimator/transformer","State":"open","Body":"This is the remaining work for the public API of Microsoft.ML.ImageAnalytics. \r\nFixes #2269 .","Url":"https://github.com/dotnet/machinelearning/pull/2580","RelatedDescription":"Open PR \"VectorToImageTransform conversion to estimator/transformer\" (#2580)"},{"Id":"410965429","IsPullRequest":true,"CreatedAt":"2019-02-15T22:06:43","Actor":"stephentoub","Number":"2579","RawContent":null,"Title":"Remove exception due to supportsSparse:true in ReadFromTextLoader","State":"open","Body":"In the GitHubLabeler sample, for example, there are ~450 InvalidOperationExceptions getting thrown and caught internally, as the implementation tries to parse some text as an int and fails.  There's no need for an exception here; the implementation is already using a TryParse method, which it then turns into an exception and then immediately catches and ignores... we can just cut out the middle man and not throw.\r\n\r\nRelated to https://github.com/dotnet/machinelearning-samples/pull/257\r\nRelated to https://github.com/dotnet/machinelearning/issues/2576","Url":"https://github.com/dotnet/machinelearning/pull/2579","RelatedDescription":"Open PR \"Remove exception due to supportsSparse:true in ReadFromTextLoader\" (#2579)"},{"Id":"410958639","IsPullRequest":true,"CreatedAt":"2019-02-15T21:48:37","Actor":"Ivanidzo4ka","Number":"2577","RawContent":null,"Title":"Replace IPredictor in Fit method to proper model parameters","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2553","Url":"https://github.com/dotnet/machinelearning/pull/2577","RelatedDescription":"Open PR \"Replace IPredictor in Fit method to proper model parameters\" (#2577)"},{"Id":"410957474","IsPullRequest":false,"CreatedAt":"2019-02-15T21:45:12","Actor":"stephentoub","Number":"2576","RawContent":null,"Title":"ReadFromTextLoader(..., supportsSparse, ...) defaults to true?","State":"open","Body":"ReadFromTextFile has a `supportsSparse = true` argument.  It seems like this should actually default to false?  Otherwise it tries to interpret all of the input as if it may contain sparse data and fails in the parsing on every line, unless there actually is sparse data.","Url":"https://github.com/dotnet/machinelearning/issues/2576","RelatedDescription":"Open issue \"ReadFromTextLoader(..., supportsSparse, ...) defaults to true?\" (#2576)"},{"Id":"410938671","IsPullRequest":false,"CreatedAt":"2019-02-15T20:50:43","Actor":"luisquintanilla","Number":"2575","RawContent":null,"Title":"Add message in Visual Studio Template letting user know saving is complete.","State":"open","Body":"When running the ML.NET Console Application Visual Studio Template, the last message output to the console is \"Saving the model\". Although saving is done, the user may be confused and think that saving is still happening. Adding an extra console output message indicating saving is complete may help inform the user the model has been successfully saved and the application is done running.\r\n\r\n![image](https://user-images.githubusercontent.com/46974588/52883521-427e9680-3139-11e9-9304-30fe8a961607.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2575","RelatedDescription":"Open issue \"Add message in Visual Studio Template letting user know saving is complete.\" (#2575)"},{"Id":"410566218","IsPullRequest":true,"CreatedAt":"2019-02-15T20:12:24","Actor":"wschin","Number":"2564","RawContent":null,"Title":"Make primal stochastic trainer also typed","State":"closed","Body":"To fix #2555, we apply idea done in #2506 to another stochastic gradient trainer. Basically, to align this trainer and the whole SDCA family, `StochasticGradientDescentClassificationTrainer` got renamed to\r\n```csharp\r\n    public abstract class SgdBinaryTrainerBase<TModelParameters> :\r\n        LinearTrainerBase<BinaryPredictionTransformer<TModelParameters>, TModelParameters>\r\n        where TModelParameters : class, IPredictorProducing<float>\r\n```\r\nwhich holds common functions used in all derived classes.\r\nThe new class, `SgdBinaryTrainerBase`, branches out into three actual implementations:\r\n- `LegacySgdBinaryTrainer` for command line and entry point BC.\r\n- `SgdNonCalibratedBinaryTrainer` for training `LinearBinaryModelParameters` with any loss which implements `IClassificationLoss`.\r\n- `SgdBinaryTrainer` for training `CalibratedModelParametersBase<LinearBinaryModelParameters, PlattCalibrator>`, which is essentially logistic regression and was the default before this PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2564","RelatedDescription":"Closed or merged PR \"Make primal stochastic trainer also typed\" (#2564)"},{"Id":"410919698","IsPullRequest":false,"CreatedAt":"2019-02-15T19:52:52","Actor":"rogancarr","Number":"2573","RawContent":null,"Title":"Create functional tests for all V1 Explainability scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the TensorFlow functionality we want fully supported in V1.\r\n\r\n* I can get near-free (local) feature importance for scored examples (Feature Contributions)\r\n* I can view the overall importance of each feature (Permutation Feature Importance, GetFeatureWeights)\r\n* I can train interpretable models (linear model, GAM)\r\n* I can view how much each feature contributed to each prediction for trees and linear models (Feature Contributions)\t \t \t ","Url":"https://github.com/dotnet/machinelearning/issues/2573","RelatedDescription":"Open issue \"Create functional tests for all V1 Explainability scenarios\" (#2573)"},{"Id":"410914923","IsPullRequest":false,"CreatedAt":"2019-02-15T19:38:27","Actor":"rogancarr","Number":"2572","RawContent":null,"Title":"TensorFlowUtils doesn't really fit with the 1.0 API","State":"open","Body":"One of the scenarios we want to support in ML.NET 1.0 is the ability to examine the schema of a TensorFlow model (see example below [1]). To do this, we currently use helper methods in the `TensorFlowUtils` class [2].\r\n\r\nRight now, this class and these methods are `public` and can be used as part of an ML.NET program, but that doesn't seem like the way we want to go in v1.0. What do you all think? Does it make sense to add these methods to mlContext and make them internal/BestFriend? If we add them to a catalog, where should they go?\r\n\r\n[1] Example of why you would want to examine the schema before loading. Here, we want to get the layer names and their sizes before specifying them as outputs in our `IDataView`:\r\n```cs\r\n// Get the output size of a layer\r\nvar schema = TensorFlowUtils.GetModelSchema(mlContext, model_location);\r\nvar outputColumn = schema.GetColumnOrNull(\"Output\");\r\nif (outputColumn.HasValue)\r\n    outputLength = ((VectorType)outputColumn.Value.Type).Dimensions[0];\r\n```\r\n\r\n[2] Helper Methods\r\n```cs\r\npublic static Schema GetModelSchema(IHostEnvironment env, string modelPath);\r\npublic static IEnumerable<(string, string, ColumnType, string[])> GetModelNodes(IHostEnvironment env, string modelPath);\r\npublic static TensorFlowModelInfo LoadTensorFlowModel(IHostEnvironment env, string modelPath);\r\n```\r\nwhere `LoadTensorFlowModel` is already in the Transforms catalog.\r\n\r\nWould `GetModelSchema` and `GetModelNodes` go in the `DataOperations` catalog?\r\n\r\nAnd to pile on, `GetModelNodes` (which may not be necessary to expose) returns a list of returns, instead of an object, which we definitely can't have in V1.\r\n\r\nRelated to #2498","Url":"https://github.com/dotnet/machinelearning/issues/2572","RelatedDescription":"Open issue \"TensorFlowUtils doesn't really fit with the 1.0 API\" (#2572)"},{"Id":"410892337","IsPullRequest":false,"CreatedAt":"2019-02-15T18:32:48","Actor":"grahamehorner","Number":"2571","RawContent":null,"Title":"Q: ML.NET within SQLCLR","State":"open","Body":"I would like to run/train a ML.NET model from with in SQL server as a SQLCLR; at present the ML.NET is failing with an obsquer error that looks to be related to security, is/will it be possible to run/train ML.NET models from inside SQL stored procedures close to the data source.","Url":"https://github.com/dotnet/machinelearning/issues/2571","RelatedDescription":"Open issue \"Q: ML.NET within SQLCLR\" (#2571)"},{"Id":"410885100","IsPullRequest":false,"CreatedAt":"2019-02-15T18:11:04","Actor":"JRAlexander","Number":"2570","RawContent":null,"Title":"MLContext.BinaryClassification.Trainers does not resolve to a documentation topic in the API Reference.","State":"open","Body":"MLContext.BinaryClassification.Trainers does not resolve to a documentation topic in the API Reference.  It should. \n\nGiven the following code: \n     Microsoft.ML.Trainers.SdcaBinaryTrainer train = mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent(labelColumn: DefaultColumnNames.Label, featureColumn: DefaultColumnNames.Features);\n\nHow do we find and use the available set of Learners / Trainers via from the API Ref?       \n\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 8468bfed-64e4-c462-085d-19c1cce3b627\n* Version Independent ID: b4721a22-be85-9b1c-0914-fc591c3e9f28\n* Content: [MLContext.BinaryClassification Property (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.mlcontext.binaryclassification?view=ml-dotnet#Microsoft_ML_MLContext_BinaryClassification)\n* Content Source: [dotnet/xml/Microsoft.ML/MLContext.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/MLContext.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/2570","RelatedDescription":"Open issue \"MLContext.BinaryClassification.Trainers does not resolve to a documentation topic in the API Reference.\" (#2570)"},{"Id":"410877016","IsPullRequest":true,"CreatedAt":"2019-02-15T17:47:41","Actor":"eerhardt","Number":"2569","RawContent":null,"Title":"Stop using System.ComponentModel.Composition","State":"open","Body":"Replace our MEF usage, which is only used by custom mapping transforms, with the ComponentCatalog class.\r\n\r\nFix #1595\r\nFix #2422\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2569","RelatedDescription":"Open PR \"Stop using System.ComponentModel.Composition\" (#2569)"},{"Id":"410862003","IsPullRequest":true,"CreatedAt":"2019-02-15T17:05:11","Actor":"maryamariyan","Number":"2568","RawContent":null,"Title":"Removes IHostEnvironment.CreateTempFile","State":"open","Body":"This PR is effectively removing CreateTempFile from IHostEnvironment and moving it to helper class and expects the caller to dispose of the handle safely instead.\r\n\r\nIssue ask was to Remove Dispose from LocalEnvironment. The Dispose would have been useful if the class wanted to Dispose of the file handles created using CreateTempFile which is not expected to be the responsibility of LocalEnvironment (or ConsoleEnvironment) anymore. \r\n\r\nFixes: #1287 \r\ncc: @eerhardt \r\n\r\n\r\n---\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2568","RelatedDescription":"Open PR \"Removes IHostEnvironment.CreateTempFile\" (#2568)"},{"Id":"410828380","IsPullRequest":false,"CreatedAt":"2019-02-15T15:47:45","Actor":"eerhardt","Number":"2567","RawContent":null,"Title":"Bad exception experience loading a model","State":"open","Body":"See this PR review comment: https://github.com/dotnet/machinelearning/pull/1951/files#r244808064.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/13b33392dd3fbffc0922b2af72c8236b74c95fc0/src/Microsoft.ML.Data/DataLoadSave/TransformerChain.cs#L255-L263\r\n\r\nThis is causing a real problem with the Custom Mapping Transformer work that I'm doing.\r\n\r\nWhen a user tries loading a model that contains a Custom Mapping Transformer, but we can't find that extension/contract we throw an exception during `ModelLoadContext.LoadModel` above saying `Can't find extension 'foo'`.\r\n\r\nHowever, this code here eats that exception, tries doing something else and then throws a terrible exception `Repository doesn't contain entry DataLoaderModel\\Model.key`, which makes absolutely no sense to the user.\r\n\r\nWe should change this code such that the original exception is thrown if we can't load the `Pipeline`. Maybe we could start writing a flag into a \"pipeline\" model file to tell if it is supposed to be a Pipeline or not...? If we don't see that flag, then for sure the exception from `ModelLoadContext.LoadModel` above should be thrown.\r\n\r\n@TomFinley @Ivanidzo4ka - Thoughts?","Url":"https://github.com/dotnet/machinelearning/issues/2567","RelatedDescription":"Open issue \"Bad exception experience loading a model\" (#2567)"},{"Id":"410790856","IsPullRequest":false,"CreatedAt":"2019-02-15T14:21:58","Actor":"DevLob-zz","Number":"2566","RawContent":null,"Title":"Exception on create predictor on release ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Virtual Machine\r\n- **.NET Version (eg., dotnet --info)**: 4.6.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** i call a method to generate a zip file model\r\n- **What happened?** through exception when deploy on the server but when i was on the debug mode it never crash\r\n- **What did you expect?**\r\nit should work.  is there is any missing dll \r\n\r\n\r\n### Source code / logs\r\n\r\n> Framework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.MissingMethodException\r\n   at Microsoft.ML.Training.TrainerUtils.CreatePredicate(Microsoft.ML.Data.RoleMappedData, Microsoft.ML.Training.CursOpt, System.Collections.Generic.IEnumerable`1<Int32>)\r\n   at Microsoft.ML.Trainers.FastTree.DataConverter+MemImpl.MakeBoundariesAndCheckLabels(Int64 ByRef, Int64 ByRef)\r\n   at Microsoft.ML.Trainers.FastTree.DataConverter+MemImpl..ctor(Microsoft.ML.Data.RoleMappedData, Microsoft.ML.IHost, Double[][], Single, Boolean, Boolean, Microsoft.ML.PredictionKind, Int32[], Boolean)\r\n   at Microsoft.ML.Trainers.FastTree.DataConverter.Create(Microsoft.ML.Data.RoleMappedData, Microsoft.ML.IHost, Int32, Single, Boolean, Boolean, Int32, Microsoft.ML.PredictionKind, Microsoft.ML.Trainers.FastTree.IParallelTraining, Int32[], Boolean)\r\n   at Microsoft.ML.Trainers.FastTree.ExamplesToFastTreeBins.FindBinsAndReturnDataset(Microsoft.ML.Data.RoleMappedData, Microsoft.ML.PredictionKind, Microsoft.ML.Trainers.FastTree.IParallelTraining, Int32[], Boolean)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeTrainerBase`3[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ConvertData(Microsoft.ML.Data.RoleMappedData)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeBinaryClassificationTrainer.TrainModelCore(Microsoft.ML.TrainContext)\r\n   at Microsoft.ML.Training.TrainerEstimatorBase`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrainTransformer(Microsoft.Data.DataView.IDataView, Microsoft.Data.DataView.IDataView, Microsoft.ML.IPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Fit(Microsoft.Data.DataView.IDataView)\r\n   at CommonLookPDFAutoTagger.ML.Train.MLModelGenerator.BuildArtifactTrainEvaluateAndSaveModel(CommonLook_PDF_AutoTagger.DataLayer.MLTrainersType, System.Collections.Generic.List`1<CommonLook_PDF_AutoTagger.DataLayer.LK_MLFeatures>)\r\n   at CLAIModelGenerator.MainViewModel.Generate()\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2566","RelatedDescription":"Open issue \"Exception on create predictor on release \" (#2566)"},{"Id":"410707837","IsPullRequest":false,"CreatedAt":"2019-02-15T10:43:03","Actor":"duzenko","Number":"2565","RawContent":null,"Title":"Example in README.md does not compile","State":"open","Body":"### System information\r\n\r\n- Windows 10.0.17134\r\n- 2.2.200-preview-009813\r\n\r\n### Issue\r\n\r\n- Copy-pasted code from readme.md to a new console project in Microsoft.ML.sln\r\n- Build failed with error CS0117: 'TextLoader.Arguments' does not contain a definition for 'Column', etc\r\n- Expected: The example code compiles successfully\r\n\r\n### Source code / logs\r\n\r\n```\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nnamespace ConsoleApp1 {\r\n    class Program {\r\n        static void Main( string[] args ) {\r\n            Console.WriteLine( \"Hello World!\" );\r\n\r\n            var mlContext = new MLContext();\r\n            var reader = mlContext.Data.CreateTextLoader( new TextLoader.Arguments {\r\n                Column = new[] {\r\n                    new TextLoader.Column(\"SentimentText\", DataKind.Text, 1),\r\n                    new TextLoader.Column(\"Label\", DataKind.Bool, 0),\r\n                },\r\n                HasHeader = true,\r\n                Separator = \",\"\r\n            } );\r\n            var data = reader.Read( dataPath );\r\n            var learningPipeline = mlContext.Transforms.Text.FeaturizeText( \"Features\", \"SentimentText\" )\r\n                    .Append( mlContext.BinaryClassification.Trainers.FastTree() );\r\n            var model = learningPipeline.Fit( data );\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2565","RelatedDescription":"Open issue \"Example in README.md does not compile\" (#2565)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-17T05:30:58.8594021Z","RunDurationInMilliseconds":1111}