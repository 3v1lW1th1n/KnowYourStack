{"Data":{"GitHub":{"Issues":[{"Id":"337246711","IsPullRequest":true,"CreatedAt":"2018-06-30T22:19:29","Actor":"JoshuaLight","Number":"463","RawContent":null,"Title":"Fixed all typos in word `Transform`.","State":"open","Body":"Hey guys!\r\n\r\nWanna trying to contribute and do some helpful work! What is my first small trophy â€” typo in `ILearningPipelineStep` comment, which, as I found, is presented in other places in code.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/463","RelatedDescription":"Open PR \"Fixed all typos in word `Transform`.\" (#463)"},{"Id":"337193292","IsPullRequest":true,"CreatedAt":"2018-06-30T07:02:01","Actor":"TomFinley","Number":"462","RawContent":null,"Title":"Isolate ONNX implementations in separate DLL","State":"open","Body":"Partial fix to #162. The full fix would be pushing the DLL into its own nuget so we could remove the protobuf dependency. However I am not sure how to do that. Maybe @eerhardt can help me here.\r\n\r\nPreviously, the ONNX infrastructure and implementations (including refs to protobuf) were in a central DLL. This gave us a dependency on a separate somewhat large project (protobuf), that was only of interest to people saving ONNX models.\r\n\r\nBy having the components save themselves through interfaces rather than actual instantiable classes (`OnnxContext` became `IOnnxContext`, `NodeProto` and `OnnxUtils` became `IOnnxNode`), there is no need for any \"direct\" dependency on protobuf.\r\n\r\nAll implementation classes become internal classes of the `Microsoft.ML.Onnx` project. (This was previously called `Microsoft.ML.UniversalFormat` due to historical reasons that no longer make sense.) The only public classes in that project are the entry-points and commands inside `SaveOnnxCommand.cs`, which instantiate actual implementors of those interfaces, then pass to ONNX savable components.\r\n\r\nAlso, I opportunistically improved documentation on those public interfaces (though even with docs the interfaces would scarcely make sense to someone unfamiliar with ONNX), and improved the code.","Url":"https://github.com/dotnet/machinelearning/pull/462","RelatedDescription":"Open PR \"Isolate ONNX implementations in separate DLL\" (#462)"},{"Id":"337177740","IsPullRequest":true,"CreatedAt":"2018-06-30T02:03:42","Actor":"agoswamiazureml","Number":"461","RawContent":null,"Title":"Fix column purpose for PipelineSweeperMacro","State":"open","Body":"Fixes #460 \r\n\r\n- Adding arguments to the PipelineSweeperMacro.  Users will be able to specify the columns for a particular purpose.  \r\n- Updating the methods in the PurposeInference and TransformInference classes to pass the user provided column purposes as optional arguments.\r\n- Added unit tests for the sweeping engines we have currently (Defaults, Rocket, UniformRandom)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/461","RelatedDescription":"Open PR \"Fix column purpose for PipelineSweeperMacro\" (#461)"},{"Id":"337177138","IsPullRequest":false,"CreatedAt":"2018-06-30T01:52:20","Actor":"agoswamiazureml","Number":"460","RawContent":null,"Title":"PipelineSweeperMacro incorrect column purpose inference","State":"open","Body":"PipelineSweeperMacro tries to infer the Purpose of the columns in the data-set, and then generates the parameter space to sweep over.  \r\n\r\nFor several datasets, it infers the purpose incorrectly e.g.  for some datasets, the PipelineSweeperMacro ended up using the label column as a feature.  There is currently no way for the user to override this behavior.  \r\n\r\nThe proposal is to add arguments to the PipelineSweeperMacro, corresponding to the intended purpose for a particular column.  Purpose inference will be done only on columns which were not specified by the user. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/460","RelatedDescription":"Open issue \"PipelineSweeperMacro incorrect column purpose inference\" (#460)"},{"Id":"337164537","IsPullRequest":false,"CreatedAt":"2018-06-29T23:31:51","Actor":"dan-drews","Number":"459","RawContent":null,"Title":"Resources for getting started with ML","State":"open","Body":"I am just beginning to try utilizing this framework, and by following the [Github Labeler Sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/end-to-end-apps/github-labeler) I have been able to build some proof of concept applications within my organization (with surprisingly high accuracy).\r\n\r\nHowever, we are starting to look at taking this a step further. One example is to utilize a StochasticDualCoordinateAscentClassifier along with a PredictedLabelColumnOriginalValueConverter to suggest the top 3 predicted labels, rather than just 1. For example, to not automatically label a github issue, but recommend labels that can be applied.\r\n\r\nThe description of this project says:\r\n\r\n> ML.NET allows .NET developers to develop their own models and infuse custom ML into their applications without prior expertise in developing or tuning machine learning models, all in .NET.\r\n\r\nBut when I am trying to dig into the documentation, all of the information is very technical, using math and science terms that are way above my understanding. **Are there good resources for people who have high development experience, but no ML experience that I can reference to learn more without feeling like I need a degree in mathematics?** From the little amount of time that I have spent using ML.NET, I am thrilled with the results. Many of our models have had 75% accuracy without much tweaking at all to be necessary, but I am hoping we will be able to use this to take our understanding to the next level.","Url":"https://github.com/dotnet/machinelearning/issues/459","RelatedDescription":"Open issue \"Resources for getting started with ML\" (#459)"},{"Id":"337164295","IsPullRequest":false,"CreatedAt":"2018-06-29T23:30:04","Actor":"ganik","Number":"458","RawContent":null,"Title":"LightLda documentation should be more specific.","State":"open","Body":"Currently it doesn't explain how trainer works and don't provide example how to use it","Url":"https://github.com/dotnet/machinelearning/issues/458","RelatedDescription":"Open issue \"LightLda documentation should be more specific.\" (#458)"},{"Id":"337158185","IsPullRequest":false,"CreatedAt":"2018-06-29T22:48:13","Actor":"hybridware","Number":"457","RawContent":null,"Title":"Enable ML.NET to support open access healthcare models","State":"open","Body":"Please update ML.NET so it will support existing open access healthcare datasets and add tools that would easily enable comparison of genomic data and overlapping data (which could be used to detect cancer patterns) pythons bedtools is a good example of this \r\nhttp://bedtools.readthedocs.io/en/latest/\r\n\r\nAllow us to train our models using open datasets e.g. this example with azure ml.\r\nhttps://blogs.msdn.microsoft.com/cdndevs/2016/05/31/getting-started-with-machine-learningwisconsin-breast-cancer-dataset/","Url":"https://github.com/dotnet/machinelearning/issues/457","RelatedDescription":"Open issue \"Enable ML.NET to support open access healthcare models\" (#457)"},{"Id":"337155849","IsPullRequest":false,"CreatedAt":"2018-06-29T22:33:45","Actor":"yaeldekel","Number":"456","RawContent":null,"Title":"Cross validation macro doesn't work with non-default group column name","State":"open","Body":"Related to #292. When the fix for this bug was checked in (#291) there was a bug related to the GroupId and Weight columns, which causes the specified column names not to be passed to the evaluation entry point. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/456","RelatedDescription":"Open issue \"Cross validation macro doesn't work with non-default group column name\" (#456)"},{"Id":"337143012","IsPullRequest":true,"CreatedAt":"2018-06-29T21:29:46","Actor":"sfilipi","Number":"455","RawContent":null,"Title":"Xml docs for trainers and a minor infrastructure changes","State":"open","Body":"Addresses: #388 \r\n\r\nThis PR adds an EntryPointInfo attribute that will contain the XML documentation to append to the summary: \"Description\", \"References\", \"See also\" sections. \r\nIt also modifies the C# generation code to append the content of this new attribute to the summary. ","Url":"https://github.com/dotnet/machinelearning/pull/455","RelatedDescription":"Open PR \"Xml docs for trainers and a minor infrastructure changes\" (#455)"},{"Id":"337128266","IsPullRequest":true,"CreatedAt":"2018-06-29T20:30:16","Actor":"codemzs","Number":"454","RawContent":null,"Title":"Set culture to en-us in LightGBM","State":"open","Body":"fixes #440 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/454","RelatedDescription":"Open PR \"Set culture to en-us in LightGBM\" (#454)"},{"Id":"336825011","IsPullRequest":true,"CreatedAt":"2018-06-29T17:19:15","Actor":"Ivanidzo4ka","Number":"449","RawContent":null,"Title":"WIP humble attemtp to setup vector size for data in runtime.","State":"closed","Body":"I don't have any intent of checking this in in current state.\r\nDoesn't contain proper xml comments/ code cleaning.\r\nMain purpose of this PR is to gain feedback regarding mechanism of specifying vector sizes for type.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/449","RelatedDescription":"Closed or merged PR \"WIP humble attemtp to setup vector size for data in runtime.\" (#449)"},{"Id":"337069244","IsPullRequest":false,"CreatedAt":"2018-06-29T16:55:19","Actor":"Ivanidzo4ka","Number":"453","RawContent":null,"Title":"OneVersusAll documentation should be more specific.","State":"open","Body":"Currently it doesn't explain how trainer works and don't provide example how to use it.","Url":"https://github.com/dotnet/machinelearning/issues/453","RelatedDescription":"Open issue \"OneVersusAll documentation should be more specific.\" (#453)"},{"Id":"336826321","IsPullRequest":true,"CreatedAt":"2018-06-29T00:47:12","Actor":"codemzs","Number":"452","RawContent":null,"Title":"Update documentation for LightGBM and add missing binary references to console app.","State":"open","Body":"fixes #450 \r\nfixes #451 ","Url":"https://github.com/dotnet/machinelearning/pull/452","RelatedDescription":"Open PR \"Update documentation for LightGBM and add missing binary references to console app.\" (#452)"},{"Id":"336826111","IsPullRequest":false,"CreatedAt":"2018-06-29T00:45:36","Actor":"codemzs","Number":"451","RawContent":null,"Title":"Console dll is missing references to binaries of learners/transforms and native code.","State":"open","Body":"Console dll allows ML.NET pipelines to be created and executed via command line. It is currently missing references to dlls of some learners, transforms and native code. ","Url":"https://github.com/dotnet/machinelearning/issues/451","RelatedDescription":"Open issue \"Console dll is missing references to binaries of learners/transforms and native code.\" (#451)"},{"Id":"336825851","IsPullRequest":false,"CreatedAt":"2018-06-29T00:43:39","Actor":"codemzs","Number":"450","RawContent":null,"Title":"Update LightGBM API documentation.","State":"open","Body":"LightGBM APIs require Micorosoft.ML.LightGBM nuget and this information needs to include in the documentation.","Url":"https://github.com/dotnet/machinelearning/issues/450","RelatedDescription":"Open issue \"Update LightGBM API documentation.\" (#450)"},{"Id":"336819879","IsPullRequest":true,"CreatedAt":"2018-06-29T00:05:37","Actor":"dan-drews","Number":"448","RawContent":null,"Title":"Add clarity to documentation on ColumnConcatenator","State":"open","Body":"Several of the [sample projects](https://github.com/dotnet/machinelearning-samples/) use more than 2 source columns in the column concatenator. In order to clarify, I updated all locations of the phrase \"Concatenates two columns of the same item type.\" to be \"Concatenates two or more columns of the same item type.\"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/448","RelatedDescription":"Open PR \"Add clarity to documentation on ColumnConcatenator\" (#448)"},{"Id":"336778768","IsPullRequest":true,"CreatedAt":"2018-06-28T21:01:45","Actor":"Ivanidzo4ka","Number":"447","RawContent":null,"Title":"Add more documentation for ova","State":"open","Body":"Provides more clear documentation for OneVersusAll learner.\r\nFixes #453 ","Url":"https://github.com/dotnet/machinelearning/pull/447","RelatedDescription":"Open PR \"Add more documentation for ova\" (#447)"},{"Id":"336719293","IsPullRequest":true,"CreatedAt":"2018-06-28T17:52:19","Actor":"TomFinley","Number":"446","RawContent":null,"Title":"[WIP] Normalization API helpers","State":"open","Body":"In which I introduce some helpers for normalization, and generally try to clean up the code-base. Addresses #433 . Hopefully will be used in #424, though I've changed the code here to use some of it where it made sense.\r\n\r\n* The `Microsoft.ML.Data` transform had a \"hidden\" dependency on `Microsoft.ML.Transform` project via dependency injection, for its existing \"helper\" for normalization (the console-app centric version). This has been resolved and replaced with direct instantiation. It required moving the normalizer files, however.\r\n\r\n* Introduction of helpers on `NormalizeTransform` for API-centric operations. (Not necessarily useful directly for console-application/GUI usage.)\r\n\r\n* Some documentation changes on `RoleMappedSchema` and `RoleMappedData`, though more non-cosmetic changes I'd expected would come with #445 .","Url":"https://github.com/dotnet/machinelearning/pull/446","RelatedDescription":"Open PR \"[WIP] Normalization API helpers\" (#446)"},{"Id":"336715723","IsPullRequest":false,"CreatedAt":"2018-06-28T17:40:23","Actor":"TomFinley","Number":"445","RawContent":null,"Title":"Direct API: RoleMappedSchema/Data Cleanup, Improvement","State":"open","Body":"Another followup to #371, in which we discuss changes to `RoleMappedSchema` and `RoleMappedData` to make them less idiosyncratic.\r\n\r\n`RoleMappedSchema` and `RoleMappedData` are structures that solve the following problem: Once you create a pipeline, before you feed it to an `ITrainer` or similar structure, you must have some mechanism to communicate to consumers of that pipeline, what all the columns were actually for... e.g., which column(s) were feature columns, which the label, and so on. (Before this structure existed, our \"solution\" to this was that every component consumed an `IDataView` directly and had configurable options for someone to declare which was which. This is good in that each trainer had the chance to be explicit about what it wanted, but still was somewhat troublesome since having to tell absolutely every component we wanted to use, \"OK, these are still the feature columns\" became somewhat troublesome, and a source of user error. So a structure to make this assignment more \"sticky\" was invented.\r\n\r\nSo that is all fine, more or less. And, I'd say on the whole it is a pretty good class, insofar that it seems to have worked well for its purpose. However there are wrinkles we probably ought to clean up.\r\n\r\nNearly all architecture effort went into making it easy to consume, as opposed to being easy or sensible to create. Previously, this made sense, since it was only instantiated in a handful of places, and used in hundreds of places. With API usage, the situation is reversed: we expect everyone to create it, and there will be \"only\" hundreds of consumers.\r\n\r\n* On that subject, creation is somewhat odd: there are `Create` and `CreateOpt` methods, as opposed to how most people would imagine an object is created, through an actual constructor (maybe with a `bool opt = false` parameter.)\r\n\r\n* \"Reapplication\" of an existing role-mapping to new data is a common operation performed in the code-base, yet there is no convenience for it, and it's something we'd want people to be able to do relatively easily. (E.g., when applying caching, for example.)\r\n\r\n* The common convenience helpers for the most common cases of creating `RoleMappedData` exist (e.g., \"these are my features, these are my labels) exist in a `TrainUtils` class. This makes them impossible to discover unless you know where to look. Probably the easiest to discover place to have these conveniences would be on the classes themselves. (This would also be a start at cleaning up `TrainUtils`, which is basically a haphazard bag of vaguely useful things.)\r\n\r\n* General cleanup of the code. A relic from a bygone time, `Id`, was never removed, despite being irrelevant and never used any more. It's been years since it was replaced with ids on `IRowCursor` directly. Also a fair amount of code exists in the class to detect conditions that cannot possibly happen.","Url":"https://github.com/dotnet/machinelearning/issues/445","RelatedDescription":"Open issue \"Direct API: RoleMappedSchema/Data Cleanup, Improvement\" (#445)"},{"Id":"336335195","IsPullRequest":true,"CreatedAt":"2018-06-27T21:41:52","Actor":"yaeldekel","Number":"437","RawContent":null,"Title":"Fix bug #435.","State":"closed","Body":"When combining per-instance data views, key columns with text key values should be handled only once.\r\nFixes #435 .","Url":"https://github.com/dotnet/machinelearning/pull/437","RelatedDescription":"Closed or merged PR \"Fix bug #435.\" (#437)"},{"Id":"336334329","IsPullRequest":false,"CreatedAt":"2018-06-27T21:41:52","Actor":"yaeldekel","Number":"435","RawContent":null,"Title":"Problem with the EvaluatorUtils method that appends per-instance data views","State":"closed","Body":"When appending the per-instance data views, we create create new key columns containing the union of the key values of the keys in the individual data views. Columns of type key that have text key values get reconciled twice, resulting in wrong values in these columns:\r\n\r\nelse if (dvNumber == 0 && dv.Schema.HasKeyNames(i, type.KeyCount))\r\n          firstDvKeyWithNamesColumns.Add(name);\r\nelse if (type.KeyCount > 0 && name != labelColName)\r\n{ ...\r\n\r\nColumns that go into the first \"else-if\" should not go into the second \"else-if\" which is supposed to handle key columns without text key values.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/435","RelatedDescription":"Closed issue \"Problem with the EvaluatorUtils method that appends per-instance data views\" (#435)"},{"Id":"336386335","IsPullRequest":true,"CreatedAt":"2018-06-27T21:35:08","Actor":"shauheen","Number":"444","RawContent":null,"Title":"Remove MML.DLL from Microsoft.ML nuget. (#439)","State":"closed","Body":"cherrypick into v0.3 to fix nuget","Url":"https://github.com/dotnet/machinelearning/pull/444","RelatedDescription":"Closed or merged PR \"Remove MML.DLL from Microsoft.ML nuget. (#439)\" (#444)"},{"Id":"336378080","IsPullRequest":false,"CreatedAt":"2018-06-27T20:36:15","Actor":"Ivanidzo4ka","Number":"443","RawContent":null,"Title":"Ensembles code required small cleanup","State":"open","Body":"Some files doesn't comply with our internal code policies (i.e. no consecutive new lines).\r\nDiversity Measurement for binary and regression classification are indistinguishable.\r\nWeighted average has wrong friendly name.","Url":"https://github.com/dotnet/machinelearning/issues/443","RelatedDescription":"Open issue \"Ensembles code required small cleanup\" (#443)"},{"Id":"336364273","IsPullRequest":true,"CreatedAt":"2018-06-27T19:51:06","Actor":"Ivanidzo4ka","Number":"442","RawContent":null,"Title":"small fixes in ensembles","State":"open","Body":"small code polishing related to #443\r\nmostly pacify robotom, and breaks diversity measure into separate interfaces (otherwise regression and binary have same interface and show off in gui/ code)\r\nalso put proper friendly name for weighted average combiner\r\n","Url":"https://github.com/dotnet/machinelearning/pull/442","RelatedDescription":"Open PR \"small fixes in ensembles\" (#442)"},{"Id":"336358607","IsPullRequest":true,"CreatedAt":"2018-06-27T19:31:22","Actor":"codemzs","Number":"441","RawContent":null,"Title":"Reverse integrate commit  fb8cf0b from master","State":"closed","Body":"Remove MML.DLL from Microsoft.ML nuget. (#439)","Url":"https://github.com/dotnet/machinelearning/pull/441","RelatedDescription":"Closed or merged PR \"Reverse integrate commit  fb8cf0b from master\" (#441)"},{"Id":"336348295","IsPullRequest":true,"CreatedAt":"2018-06-27T19:17:40","Actor":"codemzs","Number":"439","RawContent":null,"Title":"Remove MML.DLL from Microsoft.ML nuget.","State":"closed","Body":"fixes #438 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/439","RelatedDescription":"Closed or merged PR \"Remove MML.DLL from Microsoft.ML nuget.\" (#439)"},{"Id":"336348153","IsPullRequest":false,"CreatedAt":"2018-06-27T19:17:40","Actor":"codemzs","Number":"438","RawContent":null,"Title":"Remove MML.dll from Microsoft.ML nuget","State":"closed","Body":"We shouldn't have been adding an assembly to the Microsoft.ML package with netcoreapp2.0 TFM.  Doing this causes the project system to only reference the assemblies from`netcoreapp2.0` and not from netstandard2.0.","Url":"https://github.com/dotnet/machinelearning/issues/438","RelatedDescription":"Closed issue \"Remove MML.dll from Microsoft.ML nuget\" (#438)"},{"Id":"336349907","IsPullRequest":false,"CreatedAt":"2018-06-27T19:01:31","Actor":"hrkrx","Number":"440","RawContent":null,"Title":"Wrong Culture when passing arguments to LightGBM","State":"open","Body":"### System information\r\n\r\n- Win 10\r\n- dotnet core\r\n\r\n### Issue\r\n\r\nWhen calling the Train Method the arguments are parsed with the local culture instead of en or us, which leads to an Error:\r\n\r\n![41993623-57553e14-7a4c-11e8-9d75-12d423f54f8e](https://user-images.githubusercontent.com/5176531/41993935-1bdfc5ec-7a4d-11e8-899c-7d4f62cc85f1.png)","Url":"https://github.com/dotnet/machinelearning/issues/440","RelatedDescription":"Open issue \"Wrong Culture when passing arguments to LightGBM\" (#440)"},{"Id":"336335185","IsPullRequest":false,"CreatedAt":"2018-06-27T18:14:03","Actor":"markusweimer","Number":"436","RawContent":null,"Title":"Folder and file names don't match Namespaces and Type names","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 v1803\r\n- **.NET Version (eg., dotnet --info)**: 2.1.201 \r\n\r\n### Issue\r\n\r\n- **What did you do?** Open the solution in Jetbrains Rider\r\n- **What happened?** Rider pointed out many cases where type and file names differed, as well as cases where name spaces and folder names weren't in sync.","Url":"https://github.com/dotnet/machinelearning/issues/436","RelatedDescription":"Open issue \"Folder and file names don't match Namespaces and Type names\" (#436)"},{"Id":"336333719","IsPullRequest":false,"CreatedAt":"2018-06-27T18:08:54","Actor":"markusweimer","Number":"434","RawContent":null,"Title":"Documentation `cref`s point to nonexisting classes","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 v1803\r\n- **.NET Version (eg., dotnet --info)**: 2.1.201\r\n\r\n### Issue\r\n\r\n- **What did you do?** I opened the solution in Jetbrains Rider.\r\n- **What happened?** Rider pointed out a great many mistakes in the `cref` elements of XMLDocs\r\n- **What did you expect?** Perfect documentation, of course :-)","Url":"https://github.com/dotnet/machinelearning/issues/434","RelatedDescription":"Open issue \"Documentation `cref`s point to nonexisting classes\" (#434)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-01T05:30:35.1268838Z","RunDurationInMilliseconds":973}