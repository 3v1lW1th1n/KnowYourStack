{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7481474238","Type":"IssuesEvent","CreatedAt":"2018-04-04T20:47:07","Actor":"aspnet-hello","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3025","RelatedDescription":"Opened issue \"Session OnStart and Session OnEnd\" (#3025) at aspnet/Home","RelatedBody":"_From @Tratcher on Sunday, January 7, 2018 2:41:54 PM_\r\n\r\n_From @ErcinDedeoglu on January 7, 2018 20:59_\n\nI came here from https://github.com/aspnet/Session/issues/20\r\n\r\n@Tratcher @davidfowl @muratg\r\nIf you are not going to implement session onend; why we're setting the sessiontimeout?\r\nI read all of above, but not implementing sesion onend is really strange decision. Every application uses session events. Also @Tratcher adviced that we can store data on sql not session. This is also not acceptable...\r\n\r\nMy issue is I need session start event to recognize user from its cookie to auto login. But I cant handle session start atm...\r\n  \n\n_Copied from original issue: dotnet/corefx#26212_\r\n\r\n_Copied from original issue: aspnet/Session#206_"},{"Id":"7481473143","Type":"IssuesEvent","CreatedAt":"2018-04-04T20:46:52","Actor":"aspnet-hello","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3024","RelatedDescription":"Opened issue \"How to get number of session\" (#3024) at aspnet/Home","RelatedBody":"_From @lillo42 on Tuesday, March 20, 2018 11:31:14 AM_\r\n\r\nHi,\r\n\r\nHow can I get number of session ?\r\n\r\n_Copied from original issue: aspnet/Session#211_"},{"Id":"7480278513","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:53:31","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/1907","RelatedDescription":"Closed issue \"ModelState not updating when using JsonPatchDocument.ApplyTo<T>(T, ModelStateDictionary)\" (#1907) at aspnet/Home","RelatedBody":"I was playing around with a REST service in ASP.NET Core MVC and found this issue.\r\n\r\nHere is my model:\r\n```c#\r\n    public class Test\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        [Required]\r\n        [StringLength(10, MinimumLength = 1)]\r\n        public string FirstName { get; set; }\r\n\r\n        [Required]\r\n        [StringLength(10, MinimumLength = 1)]\r\n        public string LastName { get; set; }\r\n\r\n        public Test Copy()\r\n        {\r\n            Test newTest = new Test()\r\n            {\r\n                Id = this.Id,\r\n                FirstName = FirstName,\r\n                LastName = this.LastName\r\n            };\r\n\r\n            return newTest;\r\n        }\r\n    }\r\n```\r\n\r\nHere is my POST:\r\n```c#\r\n        [HttpPost]\r\n        public IActionResult Create([FromBody] Test item)\r\n        {\r\n            if (item == null) return BadRequest();\r\n            if (!ModelState.IsValid) return BadRequest();\r\n\r\n            TestItems.Add(item);\r\n\r\n            return CreatedAtRoute(\"GetTest\", new { id = item.Id }, item);\r\n        }\r\n```\r\n\r\nThe validation fails correctly based on the attributes on the model.\r\n\r\n\r\nHere is my PATCH (I have put comments around the issue):\r\n\r\n ```c#\r\n        [HttpPatch(\"{id}\")]\r\n        public IActionResult Patch(string id, [FromBody] JsonPatchDocument<Test> patch)\r\n        {\r\n            int theId;\r\n            if (!int.TryParse(id, out theId)) return BadRequest();\r\n            if (patch == null) return BadRequest();\r\n\r\n            Test item = TestItems.GetById(theId);\r\n            if (item == null) return NotFound();\r\n\r\n            // This is documented that it's supposed to update the ModelState, but it doesn't appear to do that\r\n            // and the model is always valid even if the updated values are not valid. The ModelState object\r\n            // only contains the id that was passed, it is not validating the parts in the patch instance. V1.1\r\n            // is not GA yet, so it may just be unfinished code.\r\n            patch.ApplyTo(item, ModelState);\r\n            // I shouldn't need to make this call, but the ModelState isn't updated by the ApplyTo call.\r\n            // This correctly updates the ModelState with the errors.\r\n            TryValidateModel(item);\r\n            if (!ModelState.IsValid) return BadRequest();\r\n\r\n            TestItems.Update(item);\r\n            return new NoContentResult();\r\n        }\r\n```\r\n\r\nI tried sending a replace for the FirstName to an empty string, and to a string that was too long. In both cases, the ModelState was unchanged after the call to ApplyTo. I added the call to TryValidateModel and that caused the ModelState to then be updated with errors.\r\n"},{"Id":"7480273369","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:52:29","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2258","RelatedDescription":"Closed issue \"Unhandled Exception: System.AggregateException: One or more errors occurred. (Webpack dev middleware failed because of an error while loading 'aspnet-webpack'. Error was: Error: Cannot find module 'aspnet-webpack'\" (#2258) at aspnet/Home","RelatedBody":"Using the ASP.NET Core Web Application  (ASP.NET Core 2.0) React.js and Redux project template as a baseline\r\ndotnet build -c Debug -o ./app\r\ndotnet publish -c Debug -o ./app\r\n\r\ncd app\r\nset ASPNETCORE_ENVIRONMENT=Development\r\ndotnet WebApplication1.dll\r\n\r\nResults in the error\r\nerror while loading 'aspnet-webpack'. Error was: Error: Cannot find module 'aspnet-webpack'\r\n\r\nTried working around the issue via npm update (npm-shrinkwrap.json present in my directory)\r\nThe node_modules folder is created on the publish of the webapplication.csproj\r\nWe also got the error \r\nwebpack.config.vendor.js not found.  \r\n\r\nWe thought all this stuff would be packaged up via the msbuild lines in the csproj file targets \r\n<Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\"> and\r\n<Target Name=\"DebugRunWebpack\" BeforeTargets=\"Build\" Condition=\" '$(Configuration)' == 'Debug' And !Exists('wwwroot\\dist') \">\r\n\r\nthat run npm install node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js etc.\r\n\r\nbut it looks like webpack wants to rebuild on the published bits in the app directory when we actually try to start the site up.\r\ndotnet publish looks like it copies the resulting bits from wwwroot\\dist\\**; ClientApp\\dist\\**\"  Are there other files that need to be copied?\r\n\r\nThe only workarounds we have found:\r\n1) instead of doing a build/publish above we do a dotnet run in the project directory (so instead of copying the published bits to a server, we copy the project directory structure including the csproj file)\r\nThis effectively starts the web server up on our deployed server using the development hosting environment\r\nUsing launch settings from C:\\app\\WebApplication1\\webapplication1\\Properties\\launchSettings.json...\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using 'C:\\Users\\ContainerAdministrator\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[58]\r\n      Creating key {9ae79442-a514-42c2-92da-6d5dcb48efb0} with creation date 2017-10-27 01:04:45Z, activation date 2017-10-27 01:04:45Z, and expiration date 2018-01-25 01:04:45Z.\r\ninfo: Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository[39]\r\n      Writing data to file 'C:\\Users\\ContainerAdministrator\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-9ae79442-a514-42c2-92da-6d5dcb48efb0.xml'.\r\n**Hosting environment: Development**\r\nContent root path: C:\\app\\WebApplication1\\webapplication1\r\n\r\n2) don't use ASPNETCORE_ENVIRONMENT=Development on the server we are deploying to.\r\n\r\nis there a way to use the published folder with ASPNETCORE_ENVIRONMENT=Development?"},{"Id":"7480266185","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:51:09","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3023","RelatedDescription":"Opened issue \"Bundling and minification broken\" (#3023) at aspnet/Home","RelatedBody":"_From @ipjohnson on April 4, 2018 11:54_\n\nI know that bundling and minification were removed from MVC proper but the replacement documented by ms [here](https://docs.microsoft.com/en-us/aspnet/core/client-side/bundling-and-minification?tabs=visual-studio%2Caspnetcore2x) is broken with [bootstrap 4](https://github.com/madskristensen/BundlerMinifier/issues/218) and has been for a year+ with no fix in sight.\r\n\r\nI understand the desire to lean on open source to not have to reinvent the wheel but this seems like a huge feature gap and one that is very painful. At some point developers want to be productive and not have to find new solutions to problems that had been solved.\r\n\r\n@davidfowl , @Eilon any thoughts? \n\n_Copied from original issue: aspnet/Mvc#7596_"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7482985376","Type":"IssuesEvent","CreatedAt":"2018-04-05T05:15:15","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1856","RelatedDescription":"Opened issue \"Move JsonHubProtocol to its own package\" (#1856) at aspnet/SignalR","RelatedBody":"`JsonHubProtocol` is currently in `Microsoft.AspNetCore.SignalR.Common`.\r\n\r\n`AddJsonProtocol` is currently in `Microsoft.AspNetCore.SignalR.Core`. (note that these helper methods are now also intented to be used by the client)\r\n\r\nConsider moving both of these to a `Microsoft.AspNetCore.SignalR.Protocols.Json` package. At the very least move `AddJsonProtocol` to common."},{"Id":"7482941954","Type":"PullRequestEvent","CreatedAt":"2018-04-05T04:56:19","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1855","RelatedDescription":"Opened pull request \"var all the things\" (#1855) at aspnet/SignalR","RelatedBody":"ReSharper -> Use var -> Solution wide"},{"Id":"7482921542","Type":"IssuesEvent","CreatedAt":"2018-04-05T04:47:16","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1662","RelatedDescription":"Closed issue \"The TS client doesn't support IPv6 address URLs in Edge\" (#1662) at aspnet/SignalR","RelatedBody":"Here's an annoying mess:\r\n\r\nIn Edge (Fall Creators Update), I cannot use IPv6 URLs (`http://[2003:…:3b]/`) in the browser when I want to connect to the server with a relative URL. In [the relevant code](https://github.com/aspnet/SignalR/blob/3a3cebb884ac4164c5f773a4ab652e5a19fbe290/client-ts/signalr/src/HttpConnection.ts#L238), `parser.host` is just `2003:…:3b` (without the brackets), so the resulting URL is invalid. `window.document.location.host` contains the brackets, though.\r\n\r\nIn Chrome, both `host` properties contain the brackets, so it works.\r\nIn Firefox for relative URLs, the `a`-element's `host` property is the empty string and the location's property contains the brackets, so things work."},{"Id":"7482915486","Type":"IssuesEvent","CreatedAt":"2018-04-05T04:44:36","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1436","RelatedDescription":"Closed issue \"signalr-client \"normalizes\" network-path references that start with \"//\".\" (#1436) at aspnet/SignalR","RelatedBody":"We have a website and multiple endpoints that provide SignalR hubs.\r\ne.g. the website is served from localhost:5000 and needs to be able to connect to a hub on localhost:5001.\r\n\r\nSince the endpoint is not the same as the URL the website was served from we can't simply provide the HubName to the HubConnection. So we provide the URL as a network-path reference, because the website currently must support HTTP and HTTPS. \r\nSo we pass '//localhost:5001/signalr/NotificationHub' to the HubConnection.\r\nWe are receiving the following message in the browsers console:\r\n\r\n> Information: Normalizing '//localhost:5001/signalr/NotificationHub' to 'http://localhost:5001//localhost:5001/signalr/NotificationHub'\r\n\r\nThis happens with the signalr-client package with version 1.0.0-alpha2-final.\r\n\r\nThe client should not normalize URLs beginning with // by adding protocol AND host (again) and instead let the browser handle the network-path reference (to keep in line with https://tools.ietf.org/html/rfc3986#section-4.2) or alternatively only put the current protocol in front."},{"Id":"7482914354","Type":"IssuesEvent","CreatedAt":"2018-04-05T04:44:05","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1835","RelatedDescription":"Closed issue \"JavaScript HubConnection constructor should resolve URLs relative to the page\" (#1835) at aspnet/SignalR","RelatedBody":"Example: If you are on `http://localhost/foo/bar/baz`\r\n\r\n* `new HubConnection('boz')` (Page-relative) should resolve to `http://localhost/foo/bar/boz`\r\n* `new HubConnection('/boz')` (Absolute) should resolve to `http://localhost/boz`"},{"Id":"7482913042","Type":"PullRequestEvent","CreatedAt":"2018-04-05T04:43:26","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1828","RelatedDescription":"Merged pull request \"Don't normalize urls that start with //\" (#1828) at aspnet/SignalR","RelatedBody":"Issue: https://github.com/aspnet/SignalR/issues/1436\r\nNeed to think about how to test this. "},{"Id":"7482845354","Type":"IssuesEvent","CreatedAt":"2018-04-05T04:13:28","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1844","RelatedDescription":"Closed issue \"camelCase vs PascalCase\" (#1844) at aspnet/SignalR","RelatedBody":"I have set the server to use Pascal:\r\nservices.AddSignalR(options => options.JsonSerializerSettings.ContractResolver = new DefaultContractResolver());\r\n\r\nWhy I need to tell the server to use the default is another issue, and yet another is why change class members without someone specifying that they want the change is yet another, but back to the problem.\r\n\r\nI have a Managed Client that communicates with the server for the express purpose of sending something to the javascript client(s). The class is pulled from RavenDB and all members are in tact.\r\n\r\n**However, when it lands on the server, it's camelCase**. It appears that the specification of serialization is not bidirectionsl, or something else is going on.\r\n\r\n**I just want classes to be exactly the way they were designed**, otherwise the code between clients gets confusing.\r\n\r\nHere's hoping there is an easy solution."},{"Id":"7482843168","Type":"PullRequestEvent","CreatedAt":"2018-04-05T04:12:30","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1854","RelatedDescription":"Opened pull request \"Add streaming benchmarks\" (#1854) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1811"},{"Id":"7482842873","Type":"PullRequestEvent","CreatedAt":"2018-04-05T04:12:22","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1849","RelatedDescription":"Merged pull request \"fix #1815 by disposing linked cts\" (#1849) at aspnet/SignalR","RelatedBody":"Snapshots taken immediately before a streaming invocation, then immediate after it completes. Compared memory traffic between the snapshots.\r\n\r\nBefore:\r\n\r\n![before](https://user-images.githubusercontent.com/7574/38328938-14a5e8bc-3801-11e8-9cfb-ff02c4908f5b.png)\r\n\r\nAfter:\r\n\r\n![after](https://user-images.githubusercontent.com/7574/38328947-1853c8b2-3801-11e8-972e-99ee7cdb8757.png)\r\n\r\nFixes #1815 "},{"Id":"7482842865","Type":"IssuesEvent","CreatedAt":"2018-04-05T04:12:22","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1815","RelatedDescription":"Closed issue \"We don't dispose the linked CancellationTokenSource on Streaming invocations\" (#1815) at aspnet/SignalR","RelatedBody":"Seems like we may have a leak here:\r\n\r\nhttps://github.com/aspnet/SignalR/blob/ac5dfcf9092d4919bda392e2782c0972f4389047/src/Microsoft.AspNetCore.SignalR.Core/Internal/DefaultHubDispatcher.cs#L378-L383\r\n\r\nWe create a linked token source but then we don't keep track of it. We should dispose it properly (though I need to think about if it's really a slow leak), maybe if both tokens always fire it's fine."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7481590341","Type":"IssuesEvent","CreatedAt":"2018-04-04T21:10:38","Actor":"jaska45","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7600","RelatedDescription":"Opened issue \"Razor Pages do not use localized page files\" (#7600) at aspnet/Mvc","RelatedBody":"I want to localize complete Razor page files. I tried to do in the same way as it works in MVC. This means that I add localized cshtml files. For example for Index.cshtml I added Index.fi.cshtml that is identical to the original English page file except strings are in Finnish. Then I configured Startup.cs with the normal localization related settings and ran the application. Finnish page file did not load. \r\n\r\nIs this supposed to work? If not can you implement it. Localizing a large web application by using resx strings is just too complicated for developers. I use an excellent localization tool that can make localized cshtml files very easily and keeps them in sync with the original files.\r\n\r\nI am using ASP.NET Core 2.1.0-preview1-final\r\n\r\n[Razor.zip](https://github.com/aspnet/Mvc/files/1877652/Razor.zip)"},{"Id":"7480344504","Type":"IssuesEvent","CreatedAt":"2018-04-04T17:06:18","Actor":"oferns","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7599","RelatedDescription":"Opened issue \"Classic Area Registration\" (#7599) at aspnet/Mvc","RelatedBody":"Am I right in thinking that the only way to register an area is to use the AreaAttribute? I used to be able to inherit from a class call AreaRegistration and call RegisterAllAreas(). Can I no longer do this? Do I have to remember to put an attribute at the top of my controller classes? If so, can anyone suggest a way of implementing a class that does what AreaRegistration used to? Or is there a compelling reason not to?\r\n\r\nthanks\r\nO"},{"Id":"7480334698","Type":"IssuesEvent","CreatedAt":"2018-04-04T17:04:22","Actor":"Crypt32","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7477","RelatedDescription":"Closed issue \"Model binder for nested type (collection of interfaces)\" (#7477) at aspnet/Mvc","RelatedBody":"I'm having an issue with model binding when posting object that contains interfaces. I'm using ASP.NET MVC Core 2.0, web api. Consider the following scenario:\r\n\r\n```C#\r\npublic class OuterClass : IOuterClass {\r\n    public string Prop1 { get; set; }\r\n    // this comes from interface, so I can't change the signature\r\n    public IList<INestedClass> NestedCollection { get; } = new List<INestedClass>();\r\n}\r\n// I made an implementation for this INestedClass interface\r\npublic class NestedClass : INestedClass {\r\n    public string Prop1 { get; set; }\r\n    public string Prop2 { get; set; }\r\n}\r\n```\r\nThese classes reside in separate class library (not in MVC project, but I believe it doesn't really matter).\r\n\r\nNow, my controller:\r\n```C#\r\n[HttpPost]\r\npublic IActionResult Post([FromBody] OuterClass createDto) {\r\n    if (createDto == null || !ModelState.IsValid) {\r\n        return BadRequest(new InvalidOperationException().Message);\r\n    }\r\n    // do POST stuff\r\n}\r\n```\r\nThis works as long as I don't try to post nested collection. When I do, `createDto` is always `null`. Obviously, default model binder cannot figure which type to use when building the collection. Therefore I need to write custom model binder and inherit from IModelBinder. There I should provide concrete type to use in `NestedCollection` collection. I tried to create empty model binder (which does nothing just to look what is happening).\r\n\r\n```C#\r\npublic class NestedObjectModelBinder : IModelBinder {\r\n    public Task BindModelAsync(ModelBindingContext bindingContext) {\r\n        var property = bindingContext.ModelName; // returns empty string\r\n        var value = bindingContext.ValueProvider.GetValue(property); // returns empty object\r\n        bindingContext.Result = ModelBindingResult.Success(new OuterClass());\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n```\r\nand update controller signature:\r\n```C#\r\n[HttpPost]\r\npublic IActionResult Post([ModelBinder(BinderType = typeof(NestedObjectModelBinder)][FromBody] OuterClass createDto) {\r\n// do stuff\r\n}\r\n```\r\nWhen posting data (from Postman) `NestedObjectModelBinder` is called. However, it shows outer object type. I have no idea how to create model binder (and let MVC to call it) for nested interface collection and help model binder to get the right type to use for it. Any thoughts?"},{"Id":"7480278356","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:53:29","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7598","RelatedDescription":"Opened issue \"ModelState not updating when using JsonPatchDocument.ApplyTo<T>(T, ModelStateDictionary)\" (#7598) at aspnet/Mvc","RelatedBody":"_From @TheWillieWonkaOfCode on January 19, 2017 21:26_\n\nI was playing around with a REST service in ASP.NET Core MVC and found this issue.\r\n\r\nHere is my model:\r\n```c#\r\n    public class Test\r\n    {\r\n        public int Id { get; set; }\r\n\r\n        [Required]\r\n        [StringLength(10, MinimumLength = 1)]\r\n        public string FirstName { get; set; }\r\n\r\n        [Required]\r\n        [StringLength(10, MinimumLength = 1)]\r\n        public string LastName { get; set; }\r\n\r\n        public Test Copy()\r\n        {\r\n            Test newTest = new Test()\r\n            {\r\n                Id = this.Id,\r\n                FirstName = FirstName,\r\n                LastName = this.LastName\r\n            };\r\n\r\n            return newTest;\r\n        }\r\n    }\r\n```\r\n\r\nHere is my POST:\r\n```c#\r\n        [HttpPost]\r\n        public IActionResult Create([FromBody] Test item)\r\n        {\r\n            if (item == null) return BadRequest();\r\n            if (!ModelState.IsValid) return BadRequest();\r\n\r\n            TestItems.Add(item);\r\n\r\n            return CreatedAtRoute(\"GetTest\", new { id = item.Id }, item);\r\n        }\r\n```\r\n\r\nThe validation fails correctly based on the attributes on the model.\r\n\r\n\r\nHere is my PATCH (I have put comments around the issue):\r\n\r\n ```c#\r\n        [HttpPatch(\"{id}\")]\r\n        public IActionResult Patch(string id, [FromBody] JsonPatchDocument<Test> patch)\r\n        {\r\n            int theId;\r\n            if (!int.TryParse(id, out theId)) return BadRequest();\r\n            if (patch == null) return BadRequest();\r\n\r\n            Test item = TestItems.GetById(theId);\r\n            if (item == null) return NotFound();\r\n\r\n            // This is documented that it's supposed to update the ModelState, but it doesn't appear to do that\r\n            // and the model is always valid even if the updated values are not valid. The ModelState object\r\n            // only contains the id that was passed, it is not validating the parts in the patch instance. V1.1\r\n            // is not GA yet, so it may just be unfinished code.\r\n            patch.ApplyTo(item, ModelState);\r\n            // I shouldn't need to make this call, but the ModelState isn't updated by the ApplyTo call.\r\n            // This correctly updates the ModelState with the errors.\r\n            TryValidateModel(item);\r\n            if (!ModelState.IsValid) return BadRequest();\r\n\r\n            TestItems.Update(item);\r\n            return new NoContentResult();\r\n        }\r\n```\r\n\r\nI tried sending a replace for the FirstName to an empty string, and to a string that was too long. In both cases, the ModelState was unchanged after the call to ApplyTo. I added the call to TryValidateModel and that caused the ModelState to then be updated with errors.\r\n\n\n_Copied from original issue: aspnet/Home#1907_"},{"Id":"7480266293","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:51:10","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7596","RelatedDescription":"Closed issue \"Bundling and minification broken\" (#7596) at aspnet/Mvc","RelatedBody":"I know that bundling and minification were removed from MVC proper but the replacement documented by ms [here](https://docs.microsoft.com/en-us/aspnet/core/client-side/bundling-and-minification?tabs=visual-studio%2Caspnetcore2x) is broken with [bootstrap 4](https://github.com/madskristensen/BundlerMinifier/issues/218) and has been for a year+ with no fix in sight.\r\n\r\nI understand the desire to lean on open source to not have to reinvent the wheel but this seems like a huge feature gap and one that is very painful. At some point developers want to be productive and not have to find new solutions to problems that had been solved.\r\n\r\n@davidfowl , @Eilon any thoughts? "},{"Id":"7479235892","Type":"IssuesEvent","CreatedAt":"2018-04-04T14:07:03","Actor":"aelij","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7597","RelatedDescription":"Opened issue \"Suggestion: Allow using interfaces for controllers\" (#7597) at aspnet/Mvc","RelatedBody":"We're building a microservices-based system using Service Fabric and MVC, and many of the services are internal. In order to ease the development of those services, I've created an `IApplicationModelProvider` (a bit [hacky](https://gist.github.com/aelij/7a6f8c51deaa14b4f3783122afc2242b) but works) that also reads route and verb attributes from interfaces which are shared between services. This makes them very easy to consume. Essentially turning MVC to RPC-style calls.\r\n\r\nFor example:\r\n\r\n```csharp\r\n[ContractRoute(\"api/foo\")]\r\npublic interface IFooService\r\n{\r\n    [HttpGet(\"{type}\"]\r\n    Task<List<Foo>> GetFoo([FromRoute] string type);\r\n    [HttpPost]\r\n    Task<Foo> UpdateFoo([FromBody] Foo foo);\r\n}\r\n```\r\n\r\nThe controller just implements the interface with no attributes at all.\r\n\r\nI've also written a Roslyn analyzer and code generator that creates clients from those interfaces using `HttpClient` and the `Microsoft.AspNet.WebApi.Client` package. The analyzer checks the contract for:\r\n\r\n* Valid route template syntax\r\n* Match route parameters with method parameters\r\n* All parameters have binding attributes (implicit not allowed)\r\n\r\nSome of those diagnostics could probably be used by any controller.\r\n\r\nNote this is not meant to replace Swagger, which is great for public APIs."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7482980019","Type":"IssuesEvent","CreatedAt":"2018-04-05T05:13:01","Actor":"DamianEdwards","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1735","RelatedDescription":"Opened issue \"Localize the default UI\" (#1735) at aspnet/Identity","RelatedBody":"Now that we have Identity UI in a library, we should consider having it use `IViewLocalizer` and `IStringLocalizer` to support localization of the various strings. I think it might be possible to just wrap all strings with calls to these interfaces, but **not** provide any resources, but rather have them picked up via the app if they're provided and configured correctly (we added features in 2.0 if I recall to enable this scenario)."},{"Id":"7476557947","Type":"IssuesEvent","CreatedAt":"2018-04-04T03:52:17","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Closed issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests.\r\n\r\nRight now, to support multiple services that use UserManager<TUser> we have to make something like this:\r\n\r\n```\r\n\tpublic class FakeUserManagerDependencies<T> where T : class\r\n\t{\r\n\t\tpublic readonly Mock<IdentityErrorDescriber> MockedIdentityErrorDescriber = new Mock<IdentityErrorDescriber>();\r\n\t\tpublic readonly Mock<IOptions<IdentityOptions>> MockedIdentityOptions = new Mock<IOptions<IdentityOptions>>();\r\n\t\tpublic readonly Mock<ILogger<UserManager<T>>> MockedLogger = new Mock<ILogger<UserManager<T>>>();\r\n\t\tpublic readonly Mock<ILookupNormalizer> MockedLookupNormalizer = new Mock<ILookupNormalizer>();\r\n\t\tpublic readonly Mock<IPasswordHasher<T>> MockedPasswordHasher = new Mock<IPasswordHasher<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IPasswordValidator<T>>>\r\n\t\t\tMockedPasswordValidators = new Mock<IEnumerable<IPasswordValidator<T>>>();\r\n\r\n\t\tpublic readonly Mock<IServiceProvider> MockedServiceProvider = new Mock<IServiceProvider>();\r\n\t\tpublic readonly Mock<IUserStore<T>> MockedUserStore = new Mock<IUserStore<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IUserValidator<T>>>\r\n\t\t\tMockedUserValidators = new Mock<IEnumerable<IUserValidator<T>>>();\r\n\t}\r\n\r\n\tpublic class FakeUserManager<T> : UserManager<T> where T : class\r\n\t{\r\n\t\tpublic FakeUserManagerDependencies<T> MockedDependencies { get; }\r\n\r\n\t\tpublic FakeUserManager() : this(new FakeUserManagerDependencies<T>())\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic FakeUserManager(FakeUserManagerDependencies<T> deps)\r\n\t\t\t: base(deps.MockedUserStore.Object,\r\n\t\t\t\tdeps.MockedIdentityOptions.Object,\r\n\t\t\t\tdeps.MockedPasswordHasher.Object,\r\n\t\t\t\tdeps.MockedUserValidators.Object,\r\n\t\t\t\tdeps.MockedPasswordValidators.Object,\r\n\t\t\t\tdeps.MockedLookupNormalizer.Object,\r\n\t\t\t\tdeps.MockedIdentityErrorDescriber.Object,\r\n\t\t\t\tdeps.MockedServiceProvider.Object,\r\n\t\t\t\tdeps.MockedLogger.Object\r\n\t\t\t)\r\n\t\t{\r\n\t\t\tMockedDependencies = deps;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nNow let's say we want to test a method that will retrieve a user and perform some work with that user object.  In our test, we now have to build out the `IUserStore<TUser>`, figure out what `UserManager<TUser>` does \"under the hood\" to return the expected response, and mock out the requests.  Instead, all we should be doing is mocking the `IUserManager<TUser>.FindByNameAsync(string userName)` to return a specific user object.\r\n\r\nThe current way does not allow the tester to properly isolate the actual code under test; we _must_ test the `UserManager<TUser>`'s functionality along with our own.  If the test were to fail, we cannot say for certain that the problem is in our code; for all we know it could be in the inner workings of the `UserManager<TUser>` class.\r\n\r\nThe way this is set up violates many tenets and good practices of code design and unit testing, which are tenets and good practices for a reason.  The level of effort does not seem like it would be especially high either; mostly a 1:1 replacement in code where it's used as a dependency, than a little rewiring in the dependency configuration.\r\n\r\n"},{"Id":"7473962090","Type":"PullRequestEvent","CreatedAt":"2018-04-03T16:51:05","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1734","RelatedDescription":"Opened pull request \"React to future Razor Sdk package breaking changes\" (#1734) at aspnet/Identity","RelatedBody":""},{"Id":"7473124420","Type":"PullRequestEvent","CreatedAt":"2018-04-03T14:34:00","Actor":"jholovacs","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1733","RelatedDescription":"Opened pull request \"#1732 Making UserManager<TUser> Implement IUserManager<TUser>, initia…\" (#1733) at aspnet/Identity","RelatedBody":"…l code changes.  I can't get the tests to run on my machine, so I'm trying to see what happens in the pull request..."},{"Id":"7468722524","Type":"IssuesEvent","CreatedAt":"2018-04-02T20:01:46","Actor":"jholovacs","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Opened issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests."},{"Id":"7468546859","Type":"IssuesEvent","CreatedAt":"2018-04-02T19:23:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1730","RelatedDescription":"Closed issue \"Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts\" (#1730) at aspnet/Identity","RelatedBody":"Found this during verification, we updated the scirpts under the lib folder to following versions:\r\njquery.validate.unobtrusive: from 3.2.6 to 3.2.9\r\njquery.validate: from 1.14.0 to 1.17.0\r\n\r\nWe should update the CDN urls in the following partial to match this.\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/Areas/Identity/Pages/_ValidationScriptsPartial.cshtml\r\n\r\ncc @mkArtakMSFT "},{"Id":"7468539077","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:21:23","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Merged pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"},{"Id":"7468506551","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:14:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Opened pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7481997096","Type":"IssuesEvent","CreatedAt":"2018-04-04T22:50:34","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2422","RelatedDescription":"Closed issue \"Delay loading the default development certificate\" (#2422) at aspnet/KestrelHttpServer","RelatedBody":"Today Kestrel first tries to load the default development certificate and assign that to all new HttpsConnectionAdapterOptions.ServerCertificate. \r\n\r\nThis shows up as a measurable % of startup time. It also causes log noise.\r\n\r\nIt also causes additional complexities with the new SNI support were the cert and the cert selector are mutually exclusive. This may need to get refactored as part of https://github.com/aspnet/KestrelHttpServer/issues/2357"},{"Id":"7481994549","Type":"PullRequestEvent","CreatedAt":"2018-04-04T22:49:50","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2465","RelatedDescription":"Merged pull request \"Delay loading the dev cert \" (#2465) at aspnet/KestrelHttpServer","RelatedBody":"#2422 Loading the dev cert is now delayed until after all possible user code that would set a cert."},{"Id":"7481745563","Type":"IssuesEvent","CreatedAt":"2018-04-04T21:44:32","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2416","RelatedDescription":"Closed issue \"Uncommon memory consumption with Sockets (i.e. a memory leak)\" (#2416) at aspnet/KestrelHttpServer","RelatedBody":"I updated the reliability tests to use Sockets now that it's the default transport.\r\n\r\nThe memory consumption seems to grow, I would wait for more days to make any conclusion.\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/37791801-5af0ff76-2dc7-11e8-8183-4e968954b861.png)\r\n\r\nThe first line is with Libuv, the one on the right is with Sockets.\r\n\r\nNB: Right now I can't track the changes as EF has an issue on the latest bits."},{"Id":"7481567506","Type":"IssuesEvent","CreatedAt":"2018-04-04T21:05:51","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2357","RelatedDescription":"Closed issue \"Support SNI to enable multiple HTTPS hosts on single server\" (#2357) at aspnet/KestrelHttpServer","RelatedBody":"There are three parts to this:\r\n1) Work with corefx to define the SslStream API: dotnet/corefx#24553\r\n2) Expose the new configuration in Kestrel's Https APIs.\r\n3) Expose some form of this in Kestrel's config file format\r\n\r\n@Tratcher @muratg "},{"Id":"7481566889","Type":"PullRequestEvent","CreatedAt":"2018-04-04T21:05:44","Actor":"JunTaoLuo","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2433","RelatedDescription":"Closed pull request \"Add logging for functional tests WIP\" (#2433) at aspnet/KestrelHttpServer","RelatedBody":"Addresses #2390. Need to fix long paths and invalid path chars on Windows."},{"Id":"7481455117","Type":"PullRequestEvent","CreatedAt":"2018-04-04T20:43:19","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2425","RelatedDescription":"Merged pull request \"Add SNI Support\" (#2425) at aspnet/KestrelHttpServer","RelatedBody":" #2357 Here's what Kestrel's SNI support might look like.\r\nThis is based on the initial CoreFx design in https://github.com/dotnet/corefx/pull/28278."},{"Id":"7481155673","Type":"PullRequestEvent","CreatedAt":"2018-04-04T19:43:22","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2465","RelatedDescription":"Opened pull request \"Delay loading the dev cert \" (#2465) at aspnet/KestrelHttpServer","RelatedBody":"#2422 Loading the dev cert is now delayed until after all possible user code that would set a cert.\r\n\r\nTODO: Rebase on top of SNI."},{"Id":"7480938893","Type":"IssuesEvent","CreatedAt":"2018-04-04T18:59:46","Actor":"sebastienros","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2455","RelatedDescription":"Closed issue \"Regression on Sockets Platform\" (#2455) at aspnet/KestrelHttpServer","RelatedBody":"See this graph for the details\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/38206026-b0de7b36-365d-11e8-82c6-7475ac9740bf.png)\r\n\r\nBlack line is Libuv Plaintext Platform,"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7482370290","Type":"PullRequestEvent","CreatedAt":"2018-04-05T00:56:14","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2239","RelatedDescription":"Merged pull request \"Show error if page directive is not at the top of file\" (#2239) at aspnet/Razor","RelatedBody":"Issue - https://github.com/aspnet/Mvc/issues/6633\r\nRelated PR - https://github.com/aspnet/Razor/pull/2180\r\n\r\n- This was already fixed in 2.1 but I didn't merge it to 15.7. Doing that will make the error show up in Error list in VS in design time.\r\n- Cherry picked commit https://github.com/aspnet/Razor/commit/a7178a66bd9b58e24ae0df36f80b71da44058a6f\r\n- There was also a [bug](https://github.com/aspnet/Razor/issues/2238) with how we were wiring up diagnostics in our directive nodes. I've included a targeted fix for that as well as part of this PR.\r\n- Added an integration test.\r\n- Also manually verified that this works within VS."},{"Id":"7482314086","Type":"IssuesEvent","CreatedAt":"2018-04-05T00:34:30","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2240","RelatedDescription":"Opened issue \"Ship Razor design time targets with MPack file\" (#2240) at aspnet/Razor","RelatedBody":"Esseentially do this - https://github.com/aspnet/Razor/issues/2069 - for VS for Mac"},{"Id":"7482265395","Type":"PullRequestEvent","CreatedAt":"2018-04-05T00:16:30","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2239","RelatedDescription":"Opened pull request \"Show error if page directive is not at the top of file\" (#2239) at aspnet/Razor","RelatedBody":"Issue - https://github.com/aspnet/Mvc/issues/6633\r\nRelated PR - https://github.com/aspnet/Razor/pull/2180\r\n\r\n- This was already fixed in 2.1 but I didn't merge it to 15.7. Doing that will make the error show up in Error list in VS in design time.\r\n- Cherry picked commit https://github.com/aspnet/Razor/commit/a7178a66bd9b58e24ae0df36f80b71da44058a6f\r\n- There was also a [bug](https://github.com/aspnet/Razor/issues/2238) with how we were wiring up diagnostics in our directive nodes. I've included a targeted fix for that as well as part of this PR.\r\n- Added an integration test.\r\n- Also manually verified that this works within VS."},{"Id":"7482251064","Type":"IssuesEvent","CreatedAt":"2018-04-05T00:11:29","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2238","RelatedDescription":"Opened issue \"Diagnostics in DirectiveIntermediateNode are lost\" (#2238) at aspnet/Razor","RelatedBody":"The diagnostics that get added to the directive nodes are all lost because we remove all the directives as part of an optimization [pass](https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Razor.Language/DirectiveRemovalOptimizationPass.cs#L9). We should lift those errors up before we delete those nodes so they are not lost."},{"Id":"7480855075","Type":"IssuesEvent","CreatedAt":"2018-04-04T18:43:35","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2236","RelatedDescription":"Closed issue \"For missing C# reference, it's going to a compiled code instead of original place\" (#2236) at aspnet/Razor","RelatedBody":"I was working in Blazor and when C# code have some error. Clicking on error windows's error doesn't take focus to correct file. It's going to compiled one instead of C# file which have issue.\r\n\r\nI have posted this earlier to Blazor. Please check https://github.com/aspnet/Blazor/issues/453"},{"Id":"7480698410","Type":"IssuesEvent","CreatedAt":"2018-04-04T18:14:09","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2056","RelatedDescription":"Closed issue \"Update PipeOptions once https://github.com/dotnet/corefx/issues/25427 is fixed\" (#2056) at aspnet/Razor","RelatedBody":"We will need to rely on the new setting introduced by https://github.com/dotnet/corefx/issues/25427 to provide a secure experience with the build server.\r\n\r\nIt's likely we'll need to use the constant value of this new enum to pass the correct value."},{"Id":"7480697568","Type":"IssuesEvent","CreatedAt":"2018-04-04T18:13:58","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2229","RelatedDescription":"Closed issue \"Don't run on build server if PipeOptions.CurrentUserOnly is not available\" (#2229) at aspnet/Razor","RelatedBody":"For security reasons, we don't want to have a build server running that accepts requests from all users. Since we don't have a good way of having that restriction without PipeOptions.CurrentUserOnly, we should just not run builds on the server in cases that option isn't available like when running in netcoreapp2.0."},{"Id":"7480408700","Type":"PullRequestEvent","CreatedAt":"2018-04-04T17:19:06","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2204","RelatedDescription":"Merged pull request \"Added PipeOptions.CurrentUserOnly option to the named pipe streams\" (#2204) at aspnet/Razor","RelatedBody":"#2056 \r\n\r\n"},{"Id":"7480245723","Type":"IssuesEvent","CreatedAt":"2018-04-04T16:47:09","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2237","RelatedDescription":"Opened issue \"Upgrade Microsoft.AspNetCore.Razor.Design.Test to target netcoreapp2.1\" (#2237) at aspnet/Razor","RelatedBody":"Right now it targets netcoreapp2.0 because [reasons](https://github.com/aspnet/Razor/blob/dev/test/Microsoft.AspNetCore.Razor.Design.Test/Microsoft.AspNetCore.Razor.Design.Test.csproj#L7). At this point, I'm not sure if we can work around the above reasons.\r\ncc @pranavkm who has more context."},{"Id":"7478633458","Type":"IssuesEvent","CreatedAt":"2018-04-04T12:21:49","Actor":"anirugu","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2236","RelatedDescription":"Opened issue \"For missing C# reference, it's going to a compiled code instead of original place\" (#2236) at aspnet/Razor","RelatedBody":"I was working in Blazor and when C# code have some error. Clicking on error windows's error doesn't take focus to correct file. It's going to compiled one instead of C# file which have issue.\r\n\r\nI have posted this earlier to Blazor. Please check https://github.com/aspnet/Blazor/issues/453"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":54,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":160,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2018-04-05T05:30:09.8381418Z","RunDurationInMilliseconds":8506}