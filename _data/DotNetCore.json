{"Data":{"Blog":{"FeedItems":[{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":"Announcing Visual Studio 2017 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":65,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7553179702","Type":"PullRequestEvent","CreatedAt":"2018-04-19T04:46:59","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17656","RelatedDescription":"Merged pull request \"Fix GC leakwheel scenario test\" (#17656) at dotnet/coreclr","RelatedBody":"Related to #16061 - JIT may extend the lifetime of the object, causing some objects to not get added to finalizer queue. This should at least stabilize the CI part, but I'm not sure why calling GC.Collect(2) and GC.WaitForPendingFinalizers() 3 times instead of 2 should do any change in behavior. Will look into that part and follow up with subsequent fixes if I find anything."},{"Id":"7552980698","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:30:19","Actor":"mmitche","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17663","RelatedDescription":"Opened pull request \"Remove debug/checked builds\" (#17663) at dotnet/coreclr","RelatedBody":"The debug/checked builds don't publish and aren't submitted for testing currently.  To reduce resource usage during the build, do not build these pipelines for now."},{"Id":"7552967756","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:25:33","Actor":"mmitche","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17655","RelatedDescription":"Merged pull request \"Skip container creation\" (#17655) at dotnet/coreclr","RelatedBody":"Container creation isn't required and would be incorrect if the ExpectedFeedUrl's account name didn't match AccountName."},{"Id":"7552899746","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:02:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17660","RelatedDescription":"Merged pull request \"Tweak order of interface declarations on string\" (#17660) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/29158"},{"Id":"7552435318","Type":"PullRequestEvent","CreatedAt":"2018-04-19T00:16:35","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17662","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02719-02 (master)\" (#17662) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7552403595","Type":"PullRequestEvent","CreatedAt":"2018-04-19T00:05:46","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17635","RelatedDescription":"Merged pull request \"Fix reading Time zone rules using Julian days\" (#17635) at dotnet/coreclr","RelatedBody":"Fixes #17393"},{"Id":"7552403588","Type":"IssuesEvent","CreatedAt":"2018-04-19T00:05:45","Actor":"tarekgh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17393","RelatedDescription":"Closed issue \"DateTime.Now is wrong when i change Ubuntu server Time\" (#17393) at dotnet/coreclr","RelatedBody":"When i change Date and Time on Ubuntu server with this command:\r\n`sudo date --set \"25 Apr 2018 16:00:00\"`\r\nAnd run this code:\r\n`Console.WriteLine(DateTime.Now);`\r\nhere are its output!\r\n`4/3/2018 15:00:30`\r\nWhile the current server time is 4/3/2018 16:00:55\r\nMy `app.csproj` file\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7553204740","Type":"IssuesEvent","CreatedAt":"2018-04-19T04:57:26","Actor":"davkean","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9098","RelatedDescription":"Closed issue \"Building a project between two different SDKs fails hard if you reuse nodes\" (#9098) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Build a project via msbuild with 2.1.300-preview2-008324\r\n2. Before msbuild nodes shutdown, build a project via msbuild with 2.1.300-preview2-008533\r\n\r\n## Expected  behavior\r\nNo errors\r\n\r\n## Actual behavior\r\nActual:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInfer\r\nence.targets(134,5): error MSB4062: The \"ShowPreviewMessage\" task could not be loaded from the assembly C:\\Program File\r\ns\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\net46/Microsoft.NET.Build.Tasks.dll.  Conf\r\nirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the\r\n task contains a public class that implements Microsoft.Build.Framework.ITask. [E:\\project-system2\\src\\Microsoft.Visual\r\nStudio.ProjectSystem.VisualBasic.UnitTests\\Microsoft.VisualStudio.ProjectSystem.VisualBasic.UnitTests.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7553203680","Type":"IssuesEvent","CreatedAt":"2018-04-19T04:56:59","Actor":"davkean","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9098","RelatedDescription":"Opened issue \"Building a project between two different SDKs fails hard if you reuse nodes\" (#9098) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Build a project via msbuild with 2.1.300-preview2-008324\r\n2. Before msbuild nodes shutdown, build a project via msbuild with 2.1.300-preview2-008533\r\n\r\n## Expected  behavior\r\nNo errors\r\n\r\n## Actual behavior\r\nActual:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInfer\r\nence.targets(134,5): error MSB4062: The \"ShowPreviewMessage\" task could not be loaded from the assembly C:\\Program File\r\ns\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\net46/Microsoft.NET.Build.Tasks.dll.  Conf\r\nirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the\r\n task contains a public class that implements Microsoft.Build.Framework.ITask. [E:\\project-system2\\src\\Microsoft.Visual\r\nStudio.ProjectSystem.VisualBasic.UnitTests\\Microsoft.VisualStudio.ProjectSystem.VisualBasic.UnitTests.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7553196926","Type":"PullRequestEvent","CreatedAt":"2018-04-19T04:54:16","Actor":"JunTaoLuo","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9097","RelatedDescription":"Opened pull request \"Add bundled aspnetcore runtime framework versions\" (#9097) at dotnet/cli","RelatedBody":"- Add integration test for implicit Microsoft.AspNetCore.App versions\r\n\r\nAddresses https://github.com/aspnet/Universe/issues/967. I'm adding the bundled AspNetCore runtime frameworks versions required by the Web SDK. I have run these tests locally but the PR's tests won't pass until we have a build with the Web SDK updates to ingest. We can review the PR but since it's ask mode, please wait for ship-room approval before merging. "},{"Id":"7553175092","Type":"PullRequestEvent","CreatedAt":"2018-04-19T04:45:06","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9096","RelatedDescription":"Opened pull request \"Fix .deb and .rpm dependency on the aspnetcore-store package \" (#9096) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/9095\r\n\r\nIn cleaning up some targets for 2.1.105, I missed that the <AspNetCoreRuntimePackageName> property needed to be set in both Installer.RPM.targets _and_ Installer.DEB.targets.\r\n\r\nChanges:\r\n - add tests that would have caught this error in the first place\r\n - fix the targets to include correctly a dependency on aspnetcore-store for 2.1.1xx builds"},{"Id":"7552846166","Type":"IssuesEvent","CreatedAt":"2018-04-19T02:43:29","Actor":"bording","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9095","RelatedDescription":"Opened issue \"2.1.105 SDK package isn't installing aspnetcore-store packages\" (#9095) at dotnet/cli","RelatedBody":"I installed the dotnet-sdk-2.1.105 package on an Ubuntu 16.04 machine and then removed the 2.1.104 package, and I noticed that the aspnetcore-store packages were eligible for auto-removal.\r\n\r\nIt looks like the 2.1.105 package doesn't have the correct dependency to bring in the runtime store packages like previous SDKs do.\r\n\r\nLooking at the tarball version of the 2.1.105 SDK, I see that the store files are still in there, so I suspect this change isn't intentional.\r\n\r\n@natemcmaster \r\n\r\n"},{"Id":"7551516992","Type":"PullRequestEvent","CreatedAt":"2018-04-18T20:23:54","Actor":"ianhays","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9094","RelatedDescription":"Opened pull request \"Add Fed28 and Deb9 to 2.1.3xx dotnet-install script\" (#9094) at dotnet/cli","RelatedBody":"Add Fed28 and Deb9 to 2.1.3xx dotnet-install script\r\n\r\nContinuation of https://github.com/dotnet/cli/pull/8902\r\nUnblocks https://github.com/dotnet/core-setup/pull/4043\r\n\r\nPTAL: @johnbeisner or @livarcocc "},{"Id":"7551126156","Type":"IssuesEvent","CreatedAt":"2018-04-18T19:05:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9075","RelatedDescription":"Closed issue \"Change name of buildserver command to build-server\" (#9075) at dotnet/cli","RelatedBody":"## Expected  behavior\r\n\r\n`dotnet build-server shutdown`\r\n\r\n## Actual behavior\r\n\r\n`dotnet buildserver shutdown`\r\n\r\n(Sorry I missed this earlier :-(\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7551122256","Type":"IssuesEvent","CreatedAt":"2018-04-18T19:04:43","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8039","RelatedDescription":"Closed issue \"cli-test-env.sh cannot run test on macOS\" (#8039) at dotnet/cli","RelatedBody":"There is 2 problem, `uname` is not evaluated, the following can make it work. However the hard part is RID in mac has the version number. Which it should not\r\n\r\n```sh\r\nuname=$(uname)\r\nif [ \"$(uname)\" == \"Darwin\" ]\r\nthen\r\n  RID=osx.10.13-x64\r\nelse\r\n  RID=linux-x64\r\nfi\r\n``` \r\n"},{"Id":"7551118479","Type":"PullRequestEvent","CreatedAt":"2018-04-18T19:04:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9093","RelatedDescription":"Opened pull request \"Update Roslyn to 2.8.0-dev-62817-01\" (#9093) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7551243488","Type":"IssuesEvent","CreatedAt":"2018-04-18T19:29:00","Actor":"slozier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/712","RelatedDescription":"Opened issue \"Is System.Reflection.Emit compatible with .NET Standard 2.0?\" (#712) at dotnet/standard","RelatedBody":"I seem to recall reading somewhere that the System.Reflection.Emit package probably shouldn't be used with .NET Standard 2.0. Is this correct? The issue I have is that users would like us (IronPython) to target netstandard2.0 and since it compiles fine when we reference the package they assume that this is correct. If this scenario is not supported then I'd rather not mislead them. If these should not be used together are there any plans to prevent the package from being referenced from a netstandard2.0 project?"},{"Id":"7550895308","Type":"PullRequestEvent","CreatedAt":"2018-04-18T18:21:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/711","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02718-02 (master)\" (#711) at dotnet/standard","RelatedBody":""},{"Id":"7550348911","Type":"PullRequestEvent","CreatedAt":"2018-04-18T16:37:41","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/709","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02717-01 (master)\" (#709) at dotnet/standard","RelatedBody":""},{"Id":"7550065613","Type":"PullRequestEvent","CreatedAt":"2018-04-18T15:48:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/710","RelatedDescription":"Merged pull request \"Fix old project system warnings\" (#710) at dotnet/standard","RelatedBody":"When NETStandard.Library was referenced in a .NETFramework project using the old project system,\r\nit would evaluate the project ignoring conditions on ItemGroups.  Apparently this is done to\r\ndisplay the superset of project configurations (eg both debug and release) in the solution heirarchy.\r\nThe warnings were a result of the items never being resolved after design time build finished\r\nresolving references (because of course the items were conditioned out for the target framework).\r\n\r\nWe can workaround this using choose/when.  Apparently the evaluation of the project is bold\r\nenough to ignore the conditions on an itemgroup, but not bold enough to choose one of many\r\nwhen (or all) clauses. :)\r\n\r\nFixes #708 "},{"Id":"7550065599","Type":"IssuesEvent","CreatedAt":"2018-04-18T15:48:35","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/708","RelatedDescription":"Closed issue \"Wrong reference path in NETStandard.Library.targets\" (#708) at dotnet/standard","RelatedBody":"@cannehag commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1440)\n\n# After installing NetStandard.Library 2.0.2, a lot of warning occur.\r\nNetStandard.Library.targets 2.0.2 have \r\n<Reference Include=\"$(MSBuildThisFileDirectory)\\ref\\Microsoft.Win32.Primitives.dll...\r\nAccording to documentation MSBuildThisFileDirectory will include a final slash, thus giving a path with double slash and the error message \r\nThe referenced component 'C:\\Users\\xxx\\.nuget\\packages\\netstandard.library\\2.0.2\\build\\netstandard2.0\\\\ref\\Microsoft.Win32.Primitives.dll could not be found'\r\n\r\nVersion 2.0.1 does not have this issue since the targets file is including *.dll from another path\r\n<ReferenceCopyLocalPaths Condition=\"'$(_NetStandardLibraryLibPath)' != ''\" Include=\"$(_NetStandardLibraryLibPath)*.dll\">\r\n\n\n---\n\n@elementalpete commented on [Mon Apr 16 2018](https://github.com/dotnet/core/issues/1440#issuecomment-381640157)\n\nI experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.\n\n"},{"Id":"7545738930","Type":"PullRequestEvent","CreatedAt":"2018-04-17T22:55:26","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/710","RelatedDescription":"Opened pull request \"Fix old project system warnings\" (#710) at dotnet/standard","RelatedBody":"When NETStandard.Library was referenced in a .NETFramework project using the old project system,\r\nit would evaluate the project ignoring conditions on ItemGroups.  Apparently this is done to\r\ndisplay the superset of project configurations (eg both debug and release) in the solution heirarchy.\r\nThe warnings were a result of the items never being resolved after design time build finished\r\nresolving references (because of course the items were conditioned out for the target framework).\r\n\r\nWe can workaround this using choose/when.  Apparently the evaluation of the project is bold\r\nenough to ignore the conditions on an itemgroup, but not bold enough to choose one of many\r\nwhen (or all) clauses. :)\r\n\r\nFixes #708 "},{"Id":"7545460661","Type":"PullRequestEvent","CreatedAt":"2018-04-17T21:43:26","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/709","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02717-01 (master)\" (#709) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7553130061","Type":"PullRequestEvent","CreatedAt":"2018-04-19T04:26:50","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29209","RelatedDescription":"Opened pull request \"Debuging hung test with lldb\" (#29209) at dotnet/corefx","RelatedBody":"This PR is just for testing purposes. so no review is required"},{"Id":"7553127762","Type":"PullRequestEvent","CreatedAt":"2018-04-19T04:25:52","Actor":"lmolkova","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29208","RelatedDescription":"Opened pull request \"[WIP] Introduce public setter for Activity \" (#29208) at dotnet/corefx","RelatedBody":"See #29207"},{"Id":"7553124464","Type":"IssuesEvent","CreatedAt":"2018-04-19T04:24:34","Actor":"lmolkova","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29207","RelatedDescription":"Opened issue \"Public setter for System.Diagnostics.Activity.Current\" (#29207) at dotnet/corefx","RelatedBody":"# Motivation \r\n\r\n`Activity` represents a context for distributed operation tracing.\r\nIt is created when an operation (e.g. Http request) starts and flows with async calls within a process.  \r\n\r\n`Activity.Current` is `AsyncLocal` static variable that any logger/tracing system can use to stamp logs and telemetry with 'correlation ids'.\r\n\r\n`Activity.Current` could be set via calling `Activity.Start` or `Activity.Stop` which are enough as long as managed  asyncronous flow is guaranteed which is not always the case.\r\n\r\nTypical example is ASP.NET application hosed with IIS where hop from managed to native thread chould happen at any step in the request execution pipeline. ASP.NET propagates `HttpContext` through such hops.\r\n\r\nWith current API, it is not possible to assign Current Activity 'back' to what it was before the hop.\r\n\r\n# Proposed API\r\n\r\nAdd public setter for `Activity.Current`. \r\n\r\n# Usage\r\nSuch method could be called from the certain points in the request execution pipeline:\r\n```csharp\r\npublic void RestoreActivityIfNeeded(HttpContext context)\r\n{\r\n    if (Activity.Current == null)\r\n    {\r\n        var storedActivity = (Activity)context.Items[\"AspNetActivityKey\"];\r\n        if (storedActivity != null)\r\n        {\r\n            Activity.Current = storedActivity; //!!!\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# Details\r\n* stopped/not started Activities *should not* be allowed as it makes Current stack *invalid*. E.g.\r\n\r\n```csharp\r\n    Activity.Current = stopped;\r\n    Activity.Current.Stop();  // Noop, never changes Current to Parent\r\n```\r\n\r\n```csharp\r\n    Activity.Current = notStarted;\r\n    notStarted.Stop() // Noop, never changes Current to Parent\r\n```\r\n\r\n* arguably, Activity.Current = null is valid. E.g. fork a background task with no context without stopping all stack\r\n\r\n```csharp\r\n\r\nActivity a = new Activity(\"incoming request\").Start();\r\n\r\nTask.Run(() => {\r\n    Activity.Current = null;\r\n    // start long-running task\r\n});\r\n\r\n// continune execution in the same context\r\n```\r\n\r\ncc @vancem\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7552961354","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:23:17","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29206","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#29206) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7552907883","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:04:57","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29206","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#29206) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7552899743","Type":"IssuesEvent","CreatedAt":"2018-04-19T03:02:05","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29158","RelatedDescription":"Closed issue \"About 30% performance regression for GetTypeCode() test\" (#29158) at dotnet/corefx","RelatedBody":"About 30% performance regression for GetTypeCode() test as seen in the chart below\r\n\r\n![capture01](https://user-images.githubusercontent.com/5897654/38884709-3eccc95c-4225-11e8-8e08-c7edaf349619.PNG)\r\n\r\nCorrection:\r\nBelow is the corefx diff from early March:\r\nhttps://github.com/dotnet/corefx/compare/e1f304886a8315fd3303ff0e75dc7595c42b8cd0...dotnet:5cc8f36bec8ee6e67f8576bdc698bef1a280e9b9\r\n\r\nRefer to [benchview](https://benchview/trendline?build_selector=latest&count=2000&aggregate=arithmeticMean&filterTail=one&filterVal=100&interval=INTERVAL_MIN_MAX&rtids=[957]&archids=[23]&mpids=[1292]&cfgids=[2706]&testids=[102192]&jobid=98308&) for more details.\r\n\r\ncc: @kouvel @danmosemsft"},{"Id":"7552869659","Type":"PullRequestEvent","CreatedAt":"2018-04-19T02:51:42","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29205","RelatedDescription":"Opened pull request \"Fix bug in ReadOnlySequence Slice(SequencePosition start, long length) for null next segment\" (#29205) at dotnet/corefx","RelatedBody":"cc @pakrym, @AlexRadch "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7553016163","Type":"IssuesEvent","CreatedAt":"2018-04-19T03:43:07","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26254","RelatedDescription":"Opened issue \"[Performance] Should eliminate the calls for ProjectChanges.GetChangedDocuments()\" (#26254) at dotnet/roslyn","RelatedBody":"when fixing the bug https://github.com/dotnet/roslyn/issues/18199, I noticed the ProjectChanges.GetChangedDocuments() and DocumentState.HasContentChanged() get called too many times for the upgrade project scenario.  \r\nI added 2 similar functions: ProjectChanges.GetTextChangedDocuments() and DocumentState.HasTextChanged() which only get the documents whose text changed without checking things like ParseOption etc.  \r\nEliminating the calls for GetChangedDocuments() or replace the calls to GetTextChangedDocuments() when possible will get a lot less changed documents to work with, therefore it will help to improve the performance\r\n"},{"Id":"7552936361","Type":"PullRequestEvent","CreatedAt":"2018-04-19T03:14:56","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26253","RelatedDescription":"Opened pull request \"Add editorconfig parser and unit tests\" (#26253) at dotnet/roslyn","RelatedBody":"This is the same parser used by Visual Studio for editorconfig with a\r\nminor modification to use case-insensitive comparison for property keys.\r\n\r\nRight now the parser is unused, but unit tests have been added in preparation for later use."},{"Id":"7552776060","Type":"PullRequestEvent","CreatedAt":"2018-04-19T02:19:03","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26011","RelatedDescription":"Merged pull request \"IntroduceLocal: adjust selection when pointing at trailing trivia\" (#26011) at dotnet/roslyn","RelatedBody":"Repro: try to invoke IntroduceLocal on an expression, but start the selection on a preceding line. The refactoring will not trigger.\r\nFor instance:\r\n```C#\r\nint x = [|\r\n     2 * 5 |]\r\n     ;\r\n```\r\n\r\nThe reason is that the region starts on the trailing trivia of the preceding token, so that preceding token gets included (`=` in this example). But the refactoring cannot proceed on `= 2 * 5` as that is not an expression.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/25990"},{"Id":"7552776048","Type":"IssuesEvent","CreatedAt":"2018-04-19T02:19:03","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25990","RelatedDescription":"Closed issue \"\"Introduce Local\" isn't available when the beginning of the selection contains a line break\" (#25990) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n15.6.4\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\nprivate void foo()\r\n{\r\n    var bar =\r\n        5 * 2\r\n    ;\r\n}\r\n```\r\n\r\nSelect the whitespace after the equals character (the line break) up until the '2' and open the Quick Actions.\r\n\r\n**Expected Behavior**:\r\nThe Quick Actions should include \"Introduce Local\" in addition to \"Extract Method\". The whitespace in the selection shouldn't make a difference.\r\n\r\n**Actual Behavior**:\r\nThe Quick Actions only include \"Extract Method\"\r\n\r\n**Notes**\r\nIf the leading line break isn't part of the selection (just the space characters and `5 * 2`), \"Introduce Local\" is available.\r\n\r\n![introduce-local-whitespace](https://user-images.githubusercontent.com/1947968/38410142-250ab1ae-3984-11e8-9dfb-81798faf6ffc.gif)\r\n\r\n"},{"Id":"7552669226","Type":"IssuesEvent","CreatedAt":"2018-04-19T01:41:48","Actor":"yaakov-h","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24653","RelatedDescription":"Closed issue \"2.6.1: NullReferenceException in BatchFixAllProvider\" (#24653) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft.CodeAnalysis v2.6.1, running on .NET Framework 4.7.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis is tricky - I have a program (not open-source) that applies code fixes across large amounts of solutions.\r\n\r\nWhen upgrading it from Roslyn 2.2 to Roslyn 2.6.1, I encountered this exception.\r\n\r\n**Expected Behavior**:\r\n\r\nProgram works as it used to.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<TryAddDocumentMergeChangesAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<GetFinalDocumentTextAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<GetDocumentIdToFinalTextAsync>d__13.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<TryMergeFixesAsync>d__11.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<TryGetMergedFixAsync>d__9.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<GetFixAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.<GetFixAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.<GetOperationsAsync>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Core.SolutionProcessor.<ApplyFixesAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Core.SolutionProcessor.<ProcessSolutionAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Core.Processor.<ProcessAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Runner.Program.<MainAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Runner.Program.<Main>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at WTG.BulkAnalysis.Runner.Program.<Main>(String[] args)\r\n```\r\n\r\nOr, simplified:\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryAddDocumentMergeChangesAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFinalDocumentTextAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetDocumentIdToFinalTextAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryMergeFixesAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.TryGetMergedFixAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync\r\n   at Microsoft.CodeAnalysis.CodeFixes.BatchFixAllProvider.GetFixAsync\r\n   at WTG.BulkAnalysis.Core.CodeFixEquivalenceGroup.GetOperationsAsync\r\n   at WTG.BulkAnalysis.Core.SolutionProcessor.ApplyFixesAsync\r\n   at WTG.BulkAnalysis.Core.SolutionProcessor.ProcessSolutionAsync\r\n   at WTG.BulkAnalysis.Core.Processor.ProcessAsync\r\n   at WTG.BulkAnalysis.Runner.Program.MainAsync\r\n   at WTG.BulkAnalysis.Runner.Program.Main(String[] args)\r\n```\r\n\r\n`CodeFixEquivalenceGroup.GetOperationsAsync` looks like this:\r\n\r\n```\r\npublic async Task<ImmutableArray<CodeActionOperation>> GetOperationsAsync(CancellationToken cancellationToken)\r\n{\r\n    var diagnostic = documentDiagnosticsToFix\r\n        .Values\r\n        .SelectMany(i => i.Values)\r\n        .Concat(projectDiagnosticsToFix.Values)\r\n        .First()\r\n        .First();\r\n\r\n    var document = solution.GetDocument(diagnostic.Location.SourceTree);\r\n\r\n    var diagnosticIds = new HashSet<string>(\r\n        documentDiagnosticsToFix\r\n            .Values\r\n            .SelectMany(i => i.Values)\r\n            .Concat(projectDiagnosticsToFix.Values)\r\n            .SelectMany(i => i)\r\n            .Select(j => j.Id));\r\n\r\n    var diagnosticsProvider = new TesterDiagnosticProvider(\r\n        documentDiagnosticsToFix,\r\n        projectDiagnosticsToFix);\r\n\r\n    var context = new FixAllContext(\r\n        document,\r\n        codeFixProvider,\r\n        FixAllScope.Solution,\r\n        codeFixEquivalenceKey,\r\n        diagnosticIds,\r\n        diagnosticsProvider,\r\n        cancellationToken);\r\n\r\n    var action = await fixAllProvider\r\n        .GetFixAsync(context)\r\n        .ConfigureAwait(false);\r\n\r\n    return await action\r\n        .GetOperationsAsync(cancellationToken)\r\n        .ConfigureAwait(false);\r\n}\r\n```\r\n\r\n`fixAllProvider` comes from `Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider.GetFixAllProvider()`.\r\n\r\nThe cause of the crash appears to be that `differenceService` is null [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeFixes/FixAllOccurrences/BatchFixAllProvider.cs,400)."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7552833920","Type":"PullRequestEvent","CreatedAt":"2018-04-19T02:39:12","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5727","RelatedDescription":"Merged pull request \"Update MonoGame samples to WinExe\" (#5727) at dotnet/corert","RelatedBody":"So that they don't pop out a console on Windows."},{"Id":"7552833119","Type":"PullRequestEvent","CreatedAt":"2018-04-19T02:38:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5728","RelatedDescription":"Merged pull request \"Disable Object.GetType optimizations\" (#5728) at dotnet/corert","RelatedBody":"Fixes #5713, adds more stuff to #5180 backlog."},{"Id":"7552368878","Type":"PullRequestEvent","CreatedAt":"2018-04-18T23:54:04","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5726","RelatedDescription":"Merged pull request \"Use fully canonical method in ready to run helpers\" (#5726) at dotnet/corert","RelatedBody":"Helper to call `Foo<string>.Virtual()` and `Foo<object>.Virtual()` is the same. Let's make fewer of them and also avoid helpers for things like `Foo<string, __Canon>.Virtual()` that put weird things in the dependency graph in the process.\r\n\r\nFixes #5710."},{"Id":"7552368868","Type":"IssuesEvent","CreatedAt":"2018-04-18T23:54:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5710","RelatedDescription":"Closed issue \"AF: !method.IsCanonicalMethod(CanonicalFormKind.Any) || method.GetCanonMethodTarget(CanonicalFormKind.Specific) == method\" (#5710) at dotnet/corert","RelatedBody":"Repro:\r\n\r\n```\r\ndotnet new console -lang F#\r\ndotnet publish -r win-x64 // make this run on debug version of the compiler\r\n```\r\n\r\nResult:\r\n\r\nAssertion failure in `ReflectableMethodNode::.ctor`:\r\n```\r\n            Debug.Assert(!method.IsCanonicalMethod(CanonicalFormKind.Any) ||\r\n                method.GetCanonMethodTarget(CanonicalFormKind.Specific) == method);\r\n```"},{"Id":"7552123251","Type":"IssuesEvent","CreatedAt":"2018-04-18T22:38:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4444","RelatedDescription":"Closed issue \"LinkNative doesn't pull assemblies from Runtime Package Store\" (#4444) at dotnet/corert","RelatedBody":"Before I start, I should say that I know the scenario I'm describing isn't remotely supported yet; I have just been exploring how unsupported it is. :smiling_imp: \r\n\r\nI'm [working on a thing](https://github.com/shtik/cli) that will benefit greatly from CoreRT AOT compilation when it is ready, so I thought I'd try it and see how far it got. It's an ASP.NET Core 2.0 application that just uses Routing, Kestrel and various Extensions packages. No Controllers or Views whatsoever. I figured it might work a bit and I could provide feedback on any problems I encountered.\r\n\r\nSo here goes with the first one:\r\n\r\nWhen I tried to build the `shtik/cli` console application with `/t:/LinkNative` it did actually produce a runnable `shtik.exe` file, but when I ran it it errored out with a `Could not find assembly Microsoft.Extensions...` message. Obviously it failed to pull the various assemblies from the ASP.NET Core runtime package store during the build.\r\n\r\nAs I say, I'm not expecting it to work, just flagging the issue for now.\r\n\r\n### Environment info:\r\n\r\nWindows 10 x64\r\nVisual Studio 2017.3 Native Tools command prompt\r\ndotnet SDK 2.0.0\r\nASP.NET Core 2.0.0\r\nCoreRT built from master branch as of about a week back."},{"Id":"7552001024","Type":"PullRequestEvent","CreatedAt":"2018-04-18T22:06:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5729","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5729) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7551992023","Type":"PullRequestEvent","CreatedAt":"2018-04-18T22:03:45","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5729","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5729) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7551980680","Type":"PullRequestEvent","CreatedAt":"2018-04-18T22:01:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5728","RelatedDescription":"Opened pull request \"Disable Object.GetType optimizations\" (#5728) at dotnet/corert","RelatedBody":"Fixes #5713, adds more stuff to #5180 backlog."},{"Id":"7551970085","Type":"PullRequestEvent","CreatedAt":"2018-04-18T21:58:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5727","RelatedDescription":"Opened pull request \"Update MonoGame samples to WinExe\" (#5727) at dotnet/corert","RelatedBody":"So that they don't pop out a console on Windows."},{"Id":"7551812096","Type":"PullRequestEvent","CreatedAt":"2018-04-18T21:22:57","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5726","RelatedDescription":"Opened pull request \"Use fully canonical method in ready to run helpers\" (#5726) at dotnet/corert","RelatedBody":"Helper to call `Foo<string>.Virtual()` and `Foo<object>.Virtual()` is the same. Let's make fewer of them and also avoid helpers for things like `Foo<string, __Canon>.Virtual()` that put weird things in the dependency graph in the process.\r\n\r\nFixes #5710."},{"Id":"7551340758","Type":"IssuesEvent","CreatedAt":"2018-04-18T19:48:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5704","RelatedDescription":"Closed issue \"Unable to compile when using System.ServiceProcess.ServiceController\" (#5704) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nI've been experimenting with the CoreRT for a while now and I'm attempting to compile a windows service to a native binary. The compilation goes through fine otherwise and I can run my code in non-service mode just fine, but when attempting to run it as a service I run into the following metadata marshaling issue:\r\n\r\n```\r\nFailed: EETypeRva:0x00A0F388: Interop+Advapi32+SERVICE_TABLE_ENTRY is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at agent!<BaseAddress>+0x1bbe9d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at System.ServiceProcess.ServiceBase.Run(ServiceBase[]) + 0x62\r\n   at Agent.Windows.Program.Main(String[]) + 0x154\r\n```\r\n\r\nNow since `Interop.Advapi32` is imported via static reference from the common lib ([see here](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L16)), I didn't find a way to allow MarshalStructure via rd.xml.\r\n\r\nThe first crash is at [line 603](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L603) of ServiceBase and probably some other calls would crash as well.\r\n\r\nI'm guessing to fix this the best approach would be to refactor the `System.ServiceProcess.ServiceController` to be more AOT friendly, but as it stands I just don't have the time at this standing moment to figure out how to do a custom build nor the time to learn the code base well enough to patch it myself :(\r\n\r\nAny suggestions?\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7553204678","Type":"IssuesEvent","CreatedAt":"2018-04-19T04:57:24","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2161","RelatedDescription":"Opened issue \"Building a project between two different SDKs fails hard if you reuse nodes\" (#2161) at dotnet/sdk","RelatedBody":"_From @davkean on April 19, 2018 4:56_\n\n## Steps to reproduce\r\n\r\n1. Build a project via msbuild with 2.1.300-preview2-008324\r\n2. Before msbuild nodes shutdown, build a project via msbuild with 2.1.300-preview2-008533\r\n\r\n## Expected  behavior\r\nNo errors\r\n\r\n## Actual behavior\r\nActual:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInfer\r\nence.targets(134,5): error MSB4062: The \"ShowPreviewMessage\" task could not be loaded from the assembly C:\\Program File\r\ns\\dotnet\\sdk\\2.1.300-preview2-008533\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\net46/Microsoft.NET.Build.Tasks.dll.  Conf\r\nirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the\r\n task contains a public class that implements Microsoft.Build.Framework.ITask. [E:\\project-system2\\src\\Microsoft.Visual\r\nStudio.ProjectSystem.VisualBasic.UnitTests\\Microsoft.VisualStudio.ProjectSystem.VisualBasic.UnitTests.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#9098_"},{"Id":"7552443721","Type":"IssuesEvent","CreatedAt":"2018-04-19T00:19:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2160","RelatedDescription":"Opened issue \"Investigate dotnet store running package resolution in parallel on same project\" (#2160) at dotnet/sdk","RelatedBody":"See #2159. Why does `dotnet store` make this a common case?"},{"Id":"7552419892","Type":"PullRequestEvent","CreatedAt":"2018-04-19T00:11:17","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2159","RelatedDescription":"Opened pull request \"Defend against parallel access to package assets cache\" (#2159) at dotnet/sdk","RelatedBody":"This can happen if certain targets are invoked in parallel on the same project\r\nhaving with global properties not differing sufficiently to provide each build\r\nwith a unique intermediate directory.\r\n\r\nOne case where this can happen is if there is a design-time build and real build\r\nhappening in parallel. Another case occurs frequently in `dotnet store`. The\r\nlatter may be a design flaw in `dotnet store` but the root cause hasn't been\r\nidentified yet. This will at least prevent `dotnet store` from failing, but more\r\ninvestigation is needed to understand why `dotnet store` gets itself into this\r\nsituation.\r\n\r\nNow, when we're unable to read or write the assets cache, we fall back to the\r\nsame in-memory technique that is used when DisablePackageAssetsCache is set to\r\ntrue. We will also log a high importance message (not a warning because that can\r\nbreak builds with warning-as-error and this can happen outside the user's\r\ncontrol). The intent of logging a message is to be able to get feedback if this\r\nis happening frequently. The risk the message is trying to mitigate is if we\r\nstart falling back from the fast path in common cases and don't have any clues\r\nabout that other than the perf hit.\r\n\r\nFix #2149\r\nFix #2089\r\nFix dotnet/cli#9092"},{"Id":"7552106076","Type":"IssuesEvent","CreatedAt":"2018-04-18T22:34:00","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2158","RelatedDescription":"Opened issue \"version comparison is not robust\" (#2158) at dotnet/sdk","RelatedBody":"SDK compare version use msbuild condition. However, msbuild build will try to [parse it as dec or hex ]( https://github.com/Microsoft/msbuild/blob/e8b480c373eadd9daa975c6e96e4dbbabcd9a4fe/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs#L44)first. So _2.11_ will be smaller than _2.2_.\r\n\r\nIf appending 0 at the end as in _2.2.0_, it will cause parse as number fail and consider it as Version. However. Version class's comparison does not consider _2.2_ and _2.2.0_ to be equal.[ In fact ](\r\nhttps://msdn.microsoft.com/en-us/library/s3bf0xb2(v=vs.110).aspx)_2.2. < 2.2.0_. \r\n\r\n\r\n"},{"Id":"7552055217","Type":"PullRequestEvent","CreatedAt":"2018-04-18T22:20:11","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2157","RelatedDescription":"Opened pull request \"Configure feeds for tests, add basic test coverage for targeting .NET Core 2.1\" (#2157) at dotnet/sdk","RelatedBody":"This essentially copies the logic for setting up a NuGet.config for tests with the right feeds from https://github.com/dotnet/cli/blob/8c937a0db08e56660aca456ac088f2d0e70735ab/build/NugetConfigFile.targets"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":147,"FavoriteCount":92,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":49,"FavoriteCount":33,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":32,"RawContent":null},{"Id":"985915431499259904","CreatedAt":"2018-04-16T16:18:50+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz and his pair-programming guest @fiercekittenz tomorrow for some LIVE CODING and discussion ab… https://t.co/Vll8gfdlKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"984485381071450112","CreatedAt":"2018-04-12T17:36:20+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview2 now available https://t.co/W0wBUDkqXt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":94,"FavoriteCount":80,"RawContent":null},{"Id":"984130513383317505","CreatedAt":"2018-04-11T18:06:13+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 2 https://t.co/SS9hInyJlJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":124,"FavoriteCount":82,"RawContent":null},{"Id":"984127988592623616","CreatedAt":"2018-04-11T17:56:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 2 https://t.co/T8ah6NSIAq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":425,"FavoriteCount":255,"RawContent":null}]}},"RunOn":"2018-04-19T05:30:22.6304987Z","RunDurationInMilliseconds":8169}