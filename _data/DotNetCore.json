{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7016561846","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:40:09","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15600","RelatedDescription":"Merged pull request \"Fix build-only test priority\" (#15600) at dotnet/coreclr","RelatedBody":"Build-only jobs used to create non-Windows test assets were changed\r\nundesirably to build only pri-0 tests.\r\n\r\nAddresses #15569"},{"Id":"7016546066","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:32:05","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15600","RelatedDescription":"Opened pull request \"Fix build-only test priority\" (#15600) at dotnet/coreclr","RelatedBody":"Build-only jobs used to create non-Windows test assets were changed\r\nundesirably to build only pri-0 tests.\r\n\r\nAddresses #15569"},{"Id":"7016537526","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:27:54","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15599","RelatedDescription":"Merged pull request \"Add an hour to test job timeouts to account for their slowness\" (#15599) at dotnet/coreclr","RelatedBody":""},{"Id":"7016513323","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:15:47","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15453","RelatedDescription":"Closed pull request \"[WIP] Dictionary - magic remainder\" (#15453) at dotnet/coreclr","RelatedBody":"Split Resize -> Expand and Rehash\r\n\r\nRehashing is only used in `string` key variant so it doesn't need to be compiled in every Expand\r\nRehashing doesn't expand the Dictionary so it can reuse the existing arrays\r\nUse MagicNumberRemainder rather than `idiv` in `Expand` and `Rehash`"},{"Id":"7016497000","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:08:03","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15599","RelatedDescription":"Opened pull request \"Add an hour to test job timeouts to account for their slowness\" (#15599) at dotnet/coreclr","RelatedBody":""},{"Id":"7016473003","Type":"PullRequestEvent","CreatedAt":"2017-12-21T03:56:59","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15598","RelatedDescription":"Merged pull request \"Fix Build Error When Using VS2015\" (#15598) at dotnet/coreclr","RelatedBody":"#14772 introduced a compilation error on VS2015.  I'm not sure why this doesn't occur in the CI - perhaps because we're compiling with VS2017.\r\n\r\n```\r\nc:\\src\\coreclr\\src\\vm\\threads.h(5287): error C2220: warning treated as error - no 'object' file generated (compiling source file C:\\src\\coreclr\\src\\classlibnative\\bcltype\\currency.cpp) [C:\\src\\coreclr\\bin\\obj\\W\r\nindows_NT.x64.Debug\\src\\classlibnative\\bcltype\\bcltype.vcxproj]\r\nc:\\src\\coreclr\\src\\vm\\threads.h(5287): warning C4800: 'DWORD': forcing value to bool 'true' or 'false' (performance warning) (compiling source file C:\\src\\coreclr\\src\\classlibnative\\bcltype\\currency.cpp) [C:\\sr\r\nc\\coreclr\\bin\\obj\\Windows_NT.x64.Debug\\src\\classlibnative\\bcltype\\bcltype.vcxproj]\r\n```"},{"Id":"7016292881","Type":"PullRequestEvent","CreatedAt":"2017-12-21T02:40:48","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15598","RelatedDescription":"Opened pull request \"Fix Build Error When Using VS2015\" (#15598) at dotnet/coreclr","RelatedBody":"#14772 introduced a compilation error on VS2015.  I'm not sure why this doesn't occur in the CI - perhaps because we're compiling with VS2017.\r\n\r\n```\r\nc:\\src\\coreclr\\src\\vm\\threads.h(5287): error C2220: warning treated as error - no 'object' file generated (compiling source file C:\\src\\coreclr\\src\\classlibnative\\bcltype\\currency.cpp) [C:\\src\\coreclr\\bin\\obj\\W\r\nindows_NT.x64.Debug\\src\\classlibnative\\bcltype\\bcltype.vcxproj]\r\nc:\\src\\coreclr\\src\\vm\\threads.h(5287): warning C4800: 'DWORD': forcing value to bool 'true' or 'false' (performance warning) (compiling source file C:\\src\\coreclr\\src\\classlibnative\\bcltype\\currency.cpp) [C:\\sr\r\nc\\coreclr\\bin\\obj\\Windows_NT.x64.Debug\\src\\classlibnative\\bcltype\\bcltype.vcxproj]\r\n```"},{"Id":"7016211183","Type":"PullRequestEvent","CreatedAt":"2017-12-21T02:07:53","Actor":"nategraf","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14772","RelatedDescription":"Merged pull request \"Enable EventPipe across Unix and Windows\" (#14772) at dotnet/coreclr","RelatedBody":"This PR includes a set of changes needed to enable EventPipe on Windows, and all Unix platforms (i.e. MacOSX and FreeBSD)\r\n\r\nOn all platforms The \"FireEtw*\" functions will call into EventPipe, if enabled, and out to a platform specific logger through a common interface of \"FireEtXplat*\"\r\n* On Windows FireEtXplat goes to ETW in functions generated by MC.exe\r\n* On non-Linux Unix platforms it will go to a dummy provider which simply returns success\r\n* On Linux it will go to LTTng as before\r\n\r\nAn important note is that on Windows, the EventPipe and \"FireEtXplat*\" functions will be built into the CLR, as there is no PAL\r\n\r\nThis PR is WIP for three reasons:\r\n* A replacement PAL_nanosleep needs to be implemented to port the sample profiler\r\n* I need to port tests to Windows and provide a sufficient level of coverage\r\n* PAL tests do not work on WIndows, so a replacement must be made"},{"Id":"7016132074","Type":"PullRequestEvent","CreatedAt":"2017-12-21T01:36:55","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15514","RelatedDescription":"Merged pull request \"IsSupported returns false for not-fully-implemented ISA classes\" (#15514) at dotnet/coreclr","RelatedBody":"Resolve #14930\r\n\r\n"},{"Id":"7016132063","Type":"IssuesEvent","CreatedAt":"2017-12-21T01:36:55","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14930","RelatedDescription":"Closed issue \"IsSupported needs to return false for not-yet-implemented intrinsics\" (#14930) at dotnet/coreclr","RelatedBody":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nunsafe class My {\r\n\r\nstatic void Main()\r\n{\r\n    Span<float> span1 = stackalloc float[4];\r\n    span1[0] = 9.5f;\r\n    span1[1] = 8.5f;\r\n    span1[2] = 7.5f;\r\n    span1[3] = 6.5f;\r\n\r\n    if (Sse.IsSupported)\r\n    {\r\n        fixed (float* span1Ptr = &span1.DangerousGetPinnableReference())\r\n        {\r\n           var vector1 = Sse.Load(span1Ptr);\r\n        }\r\n    }\r\n}\r\n\r\n}\r\n```\r\n\r\nActual result: Invalid program exception\r\nExpected result: succeeds\r\n\r\nIt is very hard for folks to experiment with this otherwise. And we would have to do this before shipping .NET Core 2.1 for non-yet-implemented intrinsics anyway."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7016300365","Type":"PullRequestEvent","CreatedAt":"2017-12-21T02:43:52","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8276","RelatedDescription":"Merged pull request \"Adding Alpine 3.6: README\" (#8276) at dotnet/cli","RelatedBody":"Changes to the README.md\r\n\r\nView a 'live' version here: https://github.com/johnbeisner/cli/blob/ReadMe/README.md"},{"Id":"7015994055","Type":"PullRequestEvent","CreatedAt":"2017-12-21T00:42:22","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8276","RelatedDescription":"Opened pull request \"Adding Alpine 3.6: README\" (#8276) at dotnet/cli","RelatedBody":"Changes to the README.md\r\n\r\nView a 'live' version here: https://github.com/johnbeisner/cli/blob/ReadMe/README.md"},{"Id":"7015613000","Type":"IssuesEvent","CreatedAt":"2017-12-20T22:33:23","Actor":"AArnott","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8275","RelatedDescription":"Opened issue \"`dotnet test --no-build` should not restore packages before running tests\" (#8275) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n`dotnet test -f netcoreapp1.0 --no-build`\r\n\r\n## Expected  behavior\r\n\r\nThe tests run without a restore or build beforehand.\r\n\r\n## Actual behavior\r\n\r\ndotnet first restores packages, then immediately runs tests without building.\r\n\r\nRestoring without building is pointless. If I specify `--no-build`, it's because I want to run tests on a previous build.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4-preview-007239)\r\n\r\nProduct Information:\r\n Version:            2.1.4-preview-007239\r\n Commit SHA-1 hash:  8b4773e1d3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4-preview-007239\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```"},{"Id":"7015319063","Type":"PullRequestEvent","CreatedAt":"2017-12-20T21:17:14","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8227","RelatedDescription":"Merged pull request \"Enable Alpine 3.6 CLI build\" (#8227) at dotnet/cli","RelatedBody":"This change enables CLI build for Alpine 3.6 and also adds CI job for\r\nit. It is mostly based on changes that were necessary to\r\nenable building of rhel.6 CLI\r\n\r\n"},{"Id":"7015317374","Type":"IssuesEvent","CreatedAt":"2017-12-20T21:16:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8274","RelatedDescription":"Closed issue \"Dotnet sln add using a globbing pattern isn't working within ASP.NET Core Build Docker Image\" (#8274) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nWithin ASP.NET Core Build Docker Image try to manipulate a solution using `dotnet sln testSln.sln add **/*Test.csproj` to add found test projects to a newly created test solution to work around https://github.com/Microsoft/vstest/issues/1129\r\n\r\n## Expected  behavior\r\n\r\nCan add projects using globbing within the ASP.NET Core Build Docker Image microsoft/aspnetcore-build:latest as from https://github.com/aspnet/aspnet-docker/blob/master/2.0/stretch/sdk/Dockerfile\r\n\r\n## Actual behavior\r\n\r\n```\r\n[testProject] Running shell script\r\n+ dotnet new sln -n testSln\r\nThe template \"Solution File\" was created successfully.\r\n[Pipeline] sh\r\n[testProject] Running shell script\r\n+ dotnet sln testSln.sln add **/*Test.csproj\r\nProject `**/*Test.csproj` does not exist.\r\nUsage: dotnet sln <SLN_FILE> add [options] <args>\r\n\r\nArguments:\r\n  <SLN_FILE>   Solution file to operate on. If not specified, the command will search the current directory for one.\r\n  <args>       Add one or more specified projects to the solution.\r\n\r\nOptions:\r\n  -h, --help   Show help information.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7015263663","Type":"IssuesEvent","CreatedAt":"2017-12-20T21:03:09","Actor":"dls314","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8274","RelatedDescription":"Opened issue \"Dotnet sln add using a globbing pattern isn't working within ASP.NET Core Build Docker Image\" (#8274) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nWithin ASP.NET Core Build Docker Image try to manipulate a solution using `dotnet sln testSln.sln add **/*Test.csproj` to add found test projects to a newly created test solution to work around https://github.com/Microsoft/vstest/issues/1129\r\n\r\n## Expected  behavior\r\n\r\nCan add projects using globbing within the ASP.NET Core Build Docker Image microsoft/aspnetcore-build:latest as from https://github.com/aspnet/aspnet-docker/blob/master/2.0/stretch/sdk/Dockerfile\r\n\r\n## Actual behavior\r\n\r\n```\r\n[testProject] Running shell script\r\n+ dotnet new sln -n testSln\r\nThe template \"Solution File\" was created successfully.\r\n[Pipeline] sh\r\n[testProject] Running shell script\r\n+ dotnet sln testSln.sln add **/*Test.csproj\r\nProject `**/*Test.csproj` does not exist.\r\nUsage: dotnet sln <SLN_FILE> add [options] <args>\r\n\r\nArguments:\r\n  <SLN_FILE>   Solution file to operate on. If not specified, the command will search the current directory for one.\r\n  <args>       Add one or more specified projects to the solution.\r\n\r\nOptions:\r\n  -h, --help   Show help information.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7013265545","Type":"IssuesEvent","CreatedAt":"2017-12-20T13:55:13","Actor":"VE-2016","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8273","RelatedDescription":"Opened issue \"NET Core SDK 2.2 for Visual Studio 2017\" (#8273) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI would like to build Roslyn platform from sources in Visual Studio 2017. One requirement is to install NET Core SDK 2.2 (preview). After installation of the NET Core SDK 2.2.0_Preview this version is not visible in Visual Studio 2017 in installed NetCore Frameworks\r\n\r\n## Expected  behavior\r\nRoslyn cannot be build because Visual Studio 2017 does not find this NET Core SDK 2.2.0 version.  How to install this version for Visual Studio 2017?\r\n\r\n## Actual behavior\r\nNET Core SDK 2.2 runs properly from command-line only.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7015432489","Type":"PullRequestEvent","CreatedAt":"2017-12-20T21:45:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02320-01 (master)\" (#610) at dotnet/standard","RelatedBody":""},{"Id":"7010697151","Type":"IssuesEvent","CreatedAt":"2017-12-20T00:48:14","Actor":"breyed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/609","RelatedDescription":"Opened issue \"NuGet links to out-of-date release notes\" (#609) at dotnet/standard","RelatedBody":"The \"Release Notes\" section of the [NETStandard.Library](https://www.nuget.org/packages/NETStandard.Library/) NuGet page links to [release notes for an old prerelease](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.0-preview1.md). Since the Release Notes section is version independent, it would be better to back the link up to the `release-notes` folder.\r\n\r\nA related issue is #171, which mentions the link, but focuses on the .NET Core vs. .NET Standard distinction."},{"Id":"7009282816","Type":"IssuesEvent","CreatedAt":"2017-12-19T18:33:37","Actor":"diddledan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/608","RelatedDescription":"Opened issue \"Proposal: add GetEnvironmentVariableAsBool to netstandard\" (#608) at dotnet/standard","RelatedBody":"Currently the dotnet cli has a function which is located at: [src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs Line 106](https://github.com/dotnet/cli/blob/fffe3142ad8043743d83885df2166fd2f80dceca/src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs#L106)\r\n\r\nI think it would be useful to consider this functionality for inclusion into the `System.Environment` namespace.\r\n\r\nThis issue is to raise the idea and garner discussion. I do not believe it would conflict with anything already present, though I've not performed a thorough examination to prove it."},{"Id":"7004949994","Type":"IssuesEvent","CreatedAt":"2017-12-18T23:09:41","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/601","RelatedDescription":"Closed issue \"Understanding NETStandard.Library as a dependancy in my nuspec\" (#601) at dotnet/standard","RelatedBody":"Should a NETStandard.Library dependency appear in a nuspec?\r\n\r\nWhat does it do to projects that reference the nupkg versus not having it in the nuspec? If my netstandard1.6 library chooses to depend on 1.6.1, doesn't that force any dependent library to also depend on 1.6.1+? Is that a good thing and is that why you'd put it in a nuspec?\r\n\r\nOut of 1.6.0, 1.6.1, 2.0.0, and 2.0.1, the SDK picks 1.6.1 and 2.0.0 to reference for netstandard1.6 and netstandard2.0. Why not 2.0.1 for both?\r\n\r\nIs there a changelog that summarizes the differences in 1.6.1, 2.0.0 and 2.0.1?\r\n\r\nAre there docs that answer these questions? This is the only information I've been able to glean so far which hints that keeping it in the nuspec is correct, but it doesn't answer any of my other questions: \r\n![image](https://user-images.githubusercontent.com/8040367/33782541-21670bc0-dc27-11e7-9071-ac023a71c840.png)\r\n(https://docs.microsoft.com/en-us/nuget/guides/create-net-standard-packages-vs2017#package-the-component)\r\n"},{"Id":"7003958208","Type":"PullRequestEvent","CreatedAt":"2017-12-18T19:06:54","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/444","RelatedDescription":"Closed pull request \"System.DirectoryServices* are scheduled for .net core 2.1 not .net core 2.0\" (#444) at dotnet/standard","RelatedBody":"According to issue [#2089](https://github.com/dotnet/corefx/issues/2089) System.DirectoryServices* won't make it to .netcore before 2.1.\r\n\r\nThis affects also [.NET API Browser](https://docs.microsoft.com/de-de/dotnet/api/system.directoryservices.accountmanagement?view=netcore-2.0) which states .NET Core 2.0 support for System.DirectoryServices*."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7016578070","Type":"IssuesEvent","CreatedAt":"2017-12-21T04:48:10","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26010","RelatedDescription":"Opened issue \"GetHashCode in netfx is not using randomized hash function\" (#26010) at dotnet/corefx","RelatedBody":"While trying to add tests to check if the randomized string hashing is working fine ([issue 24466](https://github.com/dotnet/corefx/issues/24466)), I noticed that netfx is not using random function for GetHashCode. \r\n\r\nThe randomized string hashing function is working properly in netcoreapp but not in netfx.\r\n```\"abc\".GetHashCode()``` should be randomized and be returning a different hashcode in different processes. But apparently instead it is returning the same hash code all the time.\r\n\r\nPlease refer to the tests added in [this PR](https://github.com/dotnet/corefx/pull/24779).\r\n\r\n"},{"Id":"7016061417","Type":"PullRequestEvent","CreatedAt":"2017-12-21T01:09:16","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26009","RelatedDescription":"Opened pull request \"Add license headers.\" (#26009) at dotnet/corefx","RelatedBody":"Realised I'd neglected this in a file, and found some others.\r\n\r\nAny *.cs file found without the usual license header has it added except:\r\n\r\n1. Files that note they are auto-generated.\r\n2. Files with a different header (unless it is very close to the usual, in which case adjust for typos and old versions).\r\n3. FxCopBaseline.cs files.\r\n\r\nAny usual licenses that didn't start on the first line were moved up."},{"Id":"7016021278","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:53:17","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19992","RelatedDescription":"Closed issue \"Tests under \"System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo\" failed with \"System.TimeoutException\"\" (#19992) at dotnet/corefx","RelatedBody":"Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170519.01/workItem/System.Net.Sockets.Tests/wilogs\r\n\r\n~~~\r\n2017-05-18 17:34:57,141: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.BeginSendToV4IPEndPointToV4Host_Success [FAIL]\r\n2017-05-18 17:34:57,141: INFO: proc(54): run_and_log_output: Output:       System.TimeoutException : The operation has timed out.\r\n2017-05-18 17:34:57,141: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:34:57,141: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs(1252,0): at System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.DualModeBeginSendTo_EndPointToHost_Helper(IPAddress connectTo, IPAddress listenOn, Boolean dualModeServer, Boolean expectedToTimeout)\r\n2017-05-18 17:35:02,218: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.BeginSendToV4IPEndPointToDualHost_Success [FAIL]\r\n2017-05-18 17:35:02,218: INFO: proc(54): run_and_log_output: Output:       System.TimeoutException : The operation has timed out.\r\n2017-05-18 17:35:02,219: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:35:02,219: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs(1252,0): at System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.DualModeBeginSendTo_EndPointToHost_Helper(IPAddress connectTo, IPAddress listenOn, Boolean dualModeServer, Boolean expectedToTimeout)\r\n2017-05-18 17:35:07,265: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.BeginSendToV6IPEndPointToDualHost_Success [FAIL]\r\n2017-05-18 17:35:07,265: INFO: proc(54): run_and_log_output: Output:       System.TimeoutException : The operation has timed out.\r\n2017-05-18 17:35:07,265: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:35:07,265: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs(1252,0): at System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.DualModeBeginSendTo_EndPointToHost_Helper(IPAddress connectTo, IPAddress listenOn, Boolean dualModeServer, Boolean expectedToTimeout)\r\n2017-05-18 17:35:12,650: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.BeginSendToV6IPEndPointToV6Host_Success [FAIL]\r\n2017-05-18 17:35:12,650: INFO: proc(54): run_and_log_output: Output:       System.TimeoutException : The operation has timed out.\r\n2017-05-18 17:35:12,650: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:35:12,650: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs(1252,0): at System.Net.Sockets.Tests.DualModeConnectionlessBeginSendTo.DualModeBeginSendTo_EndPointToHost_Helper(IPAddress connectTo, IPAddress listenOn, Boolean dualModeServer, Boolean expectedToTimeout)\r\n~~~"},{"Id":"7016016940","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:51:32","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19990","RelatedDescription":"Closed issue \"System.Net.Sockets.Tests.SocketOptionNameTest.FailedConnect_GetSocketOption_SocketOptionNameError failed with \"Xunit.Sdk.EqualException\"\" (#19990) at dotnet/corefx","RelatedBody":"Detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fportable~2Fcli~2F/build/20170519.01/workItem/System.Net.Sockets.Tests/wilogs\r\n\r\n~~~\r\n2017-05-18 17:34:01,833: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.SocketOptionNameTest.FailedConnect_GetSocketOption_SocketOptionNameError(simpleGet: False) [FAIL]\r\n2017-05-18 17:34:01,834: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2017-05-18 17:34:01,834: INFO: proc(54): run_and_log_output: Output:       Expected: 1\r\n2017-05-18 17:34:01,834: INFO: proc(54): run_and_log_output: Output:       Actual:   0\r\n2017-05-18 17:34:01,837: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:34:01,929: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs(173,0): at System.Net.Sockets.Tests.SocketOptionNameTest.FailedConnect_GetSocketOption_SocketOptionNameError(Boolean simpleGet)\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:    System.Net.Sockets.Tests.SocketOptionNameTest.FailedConnect_GetSocketOption_SocketOptionNameError(simpleGet: True) [FAIL]\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:       Assert.Equal() Failure\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:       Expected: 1\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:       Actual:   0\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:       Stack Trace:\r\n2017-05-18 17:34:11,952: INFO: proc(54): run_and_log_output: Output:          /Users/buildagent/agent/_work/24/s/corefx/src/System.Net.Sockets/tests/FunctionalTests/SocketOptionNameTest.cs(173,0): at System.Net.Sockets.Tests.SocketOptionNameTest.FailedConnect_GetSocketOption_SocketOptionNameError(Boolean simpleGet)\r\n~~~"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7016656057","Type":"IssuesEvent","CreatedAt":"2017-12-21T05:26:25","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23896","RelatedDescription":"Closed issue \"Event handler's arguments can be changed to 'in' (C# 7.2) without a compilation error, leading to runtime crashes\" (#23896) at dotnet/roslyn","RelatedBody":"Version: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\nExpected: Some type of error should be generated when trying to add event handlers `Program_Event1b` and `Program_Event2b`\r\n\r\nActual: The compiler generates an EXE that crashes at runtime.\r\n\r\nExample:\r\n\r\n```C#\r\nusing System;\r\n\r\nnamespace ConsoleApp1 {\r\n\tclass Program {\r\n\t\treadonly struct EventArgs1 {\r\n\t\t\tpublic int Value { get; }\r\n\t\t\tpublic EventArgs1(int value) => Value = value;\r\n\t\t}\r\n\t\tsealed class EventArgs2 {\r\n\t\t\tpublic int Value { get; }\r\n\t\t\tpublic EventArgs2(int value) => Value = value;\r\n\t\t}\r\n\t\tstatic event EventHandler<EventArgs1> Event1;\r\n\t\tstatic event EventHandler<EventArgs2> Event2;\r\n\t\tstatic void Main(string[] args) {\r\n\t\t\tEvent1 += Program_Event1a;\r\n\t\t\tEvent1 += Program_Event1b;\r\n\t\t\tEvent2 += Program_Event2a;\r\n\t\t\tEvent2 += Program_Event2b;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tEvent1?.Invoke(1111.1111, new EventArgs1(1111));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tConsole.WriteLine($\"EX: {ex.GetType().FullName}\");\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tEvent2?.Invoke(2222.2222, new EventArgs2(2222));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tConsole.WriteLine($\"EX: {ex.GetType().FullName}\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatic void Program_Event1a(object sender, EventArgs1 e) => Console.WriteLine($\"Event1: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event2a(object sender, EventArgs2 e) => Console.WriteLine($\"Event2: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event1b(in object sender, in EventArgs1 e) => Console.WriteLine($\"Event1: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event2b(in object sender, in EventArgs2 e) => Console.WriteLine($\"Event2: sender={sender}, e.Value={e.Value}\");\r\n\t}\r\n}\r\n\r\n```\r\n"},{"Id":"7016645474","Type":"IssuesEvent","CreatedAt":"2017-12-21T05:21:18","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23897","RelatedDescription":"Closed issue \"operator ==() with 'in' (C# 7.2) arguments generate a compilation error if it's in a different assembly\" (#23897) at dotnet/roslyn","RelatedBody":"Version: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\nExpected: It compiles and generates a few .NET files\r\n\r\nActual: It refuses to compile assembly # 1 `error CS0019: Operator '==' cannot be applied to operands of type 'S' and 'S'`\r\n\r\nWorkaround: Move all code to assembly # 1.\r\n\r\n**Assembly # 1**\r\n\r\nAdd a reference to assembly # 2\r\n\r\n```C#\r\nusing ClassLibrary1;\r\n\r\nnamespace ConsoleApp1 {\r\n\tclass Program {\r\n\t\tvoid M(S s) {\r\n\t\t\tvar copy = s;\r\n\t\t\tbool b = copy == s && copy != s;\r\n\t\t}\r\n\r\n\t\tstatic void Main(string[] args) {\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n**Assembly # 2**\r\n\r\n```C#\r\nnamespace ClassLibrary1 {\r\n\tpublic readonly struct S {\r\n\t\tpublic static bool operator ==(in S left, in S right) => false;\r\n\t\tpublic static bool operator !=(in S left, in S right) => false;\r\n\t\tpublic bool Equals(S other) => false;\r\n\t\tpublic override bool Equals(object obj) => false;\r\n\t\tpublic override int GetHashCode() => 0;\r\n\t}\r\n}\r\n```\r\n"},{"Id":"7016602321","Type":"IssuesEvent","CreatedAt":"2017-12-21T05:00:01","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23897","RelatedDescription":"Opened issue \"operator ==() with 'in' (C# 7.2) arguments generate a compilation error if it's in a different assembly\" (#23897) at dotnet/roslyn","RelatedBody":"Version: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\nExpected: It compiles and generates a few .NET files\r\n\r\nActual: It refuses to compile assembly # 1 `error CS0019: Operator '==' cannot be applied to operands of type 'S' and 'S'`\r\n\r\nWorkaround: Move all code to assembly # 1.\r\n\r\n**Assembly # 1**\r\n\r\nAdd a reference to assembly # 2\r\n\r\n```C#\r\nusing ClassLibrary1;\r\n\r\nnamespace ConsoleApp1 {\r\n\tclass Program {\r\n\t\tvoid M(S s) {\r\n\t\t\tvar copy = s;\r\n\t\t\tbool b = copy == s && copy != s;\r\n\t\t}\r\n\r\n\t\tstatic void Main(string[] args) {\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n**Assembly # 2**\r\n\r\n```C#\r\nnamespace ClassLibrary1 {\r\n\tpublic readonly struct S {\r\n\t\tpublic static bool operator ==(in S left, in S right) => false;\r\n\t\tpublic static bool operator !=(in S left, in S right) => false;\r\n\t\tpublic bool Equals(S other) => false;\r\n\t\tpublic override bool Equals(object obj) => false;\r\n\t\tpublic override int GetHashCode() => 0;\r\n\t}\r\n}\r\n```\r\n"},{"Id":"7016596089","Type":"IssuesEvent","CreatedAt":"2017-12-21T04:56:58","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23896","RelatedDescription":"Opened issue \"Event handler's arguments can be changed to 'in' (C# 7.2) without a compilation error, leading to runtime crashes\" (#23896) at dotnet/roslyn","RelatedBody":"Version: Microsoft (R) Visual C# Compiler version 2.6.0.62329 (5429b35d)\r\n\r\nExpected: Some type of error should be generated when trying to add event handlers `Program_Event1b` and `Program_Event2b`\r\n\r\nExample:\r\n\r\n```C#\r\nusing System;\r\n\r\nnamespace ConsoleApp1 {\r\n\tclass Program {\r\n\t\treadonly struct EventArgs1 {\r\n\t\t\tpublic int Value { get; }\r\n\t\t\tpublic EventArgs1(int value) => Value = value;\r\n\t\t}\r\n\t\tsealed class EventArgs2 {\r\n\t\t\tpublic int Value { get; }\r\n\t\t\tpublic EventArgs2(int value) => Value = value;\r\n\t\t}\r\n\t\tstatic event EventHandler<EventArgs1> Event1;\r\n\t\tstatic event EventHandler<EventArgs2> Event2;\r\n\t\tstatic void Main(string[] args) {\r\n\t\t\tEvent1 += Program_Event1a;\r\n\t\t\tEvent1 += Program_Event1b;\r\n\t\t\tEvent2 += Program_Event2a;\r\n\t\t\tEvent2 += Program_Event2b;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tEvent1?.Invoke(1111.1111, new EventArgs1(1111));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tConsole.WriteLine($\"EX: {ex.GetType().FullName}\");\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tEvent2?.Invoke(2222.2222, new EventArgs2(2222));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tConsole.WriteLine($\"EX: {ex.GetType().FullName}\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatic void Program_Event1a(object sender, EventArgs1 e) => Console.WriteLine($\"Event1: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event2a(object sender, EventArgs2 e) => Console.WriteLine($\"Event2: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event1b(in object sender, in EventArgs1 e) => Console.WriteLine($\"Event1: sender={sender}, e.Value={e.Value}\");\r\n\t\tstatic void Program_Event2b(in object sender, in EventArgs2 e) => Console.WriteLine($\"Event2: sender={sender}, e.Value={e.Value}\");\r\n\t}\r\n}\r\n\r\n```\r\n"},{"Id":"7016594281","Type":"IssuesEvent","CreatedAt":"2017-12-21T04:56:03","Actor":"0xd4d","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23895","RelatedDescription":"Opened issue \"Wrong order of 'in' and 'this' in extension method tooltip\" (#23895) at dotnet/roslyn","RelatedBody":"Version: VS2017 15.5.2\r\n\r\nHover over `M`, the tooltip shows `M(this in int a)` which is invalid C# (`error CS8339: The parameter modifier 'in' cannot be used after the modifier 'this'`)\r\n\r\n```C#\r\n\tstatic class Extensions {\r\n\t\tpublic static int M(in this int a) => a;\r\n\t}\r\n```\r\n"},{"Id":"7016333958","Type":"IssuesEvent","CreatedAt":"2017-12-21T02:57:17","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22776","RelatedDescription":"Closed issue \"Incorrect \"Add 'this.'\" diagnostic for class initializers\" (#22776) at dotnet/roslyn","RelatedBody":"This is reported in a few Developer Community feedback items, I will link them as they're processed.\r\n-  https://developercommunity.visualstudio.com/content/problem/131432/add-this-or-me-qualification-for-class-initializer.html\r\n- https://developercommunity.visualstudio.com/content/problem/129705/incorrect-ide0009-in-object-initializer.html\r\n- https://developercommunity.visualstudio.com/content/problem/161932/ide0009-add-this-or-me-qualification-incorrectly-r.html\r\n\r\nI have not been able to reproduce this locally using the settings in the Tools | Options. Maybe it requires the editorconfig? That doesn't make much sense but I haven't been able to come up with anything else."},{"Id":"7016320333","Type":"IssuesEvent","CreatedAt":"2017-12-21T02:51:49","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23894","RelatedDescription":"Opened issue \"selection doesn't work after deleting a character\" (#23894) at dotnet/roslyn","RelatedBody":"I'm editing text in C# editor.\nI have text like `.Constraint(new[] { &quot;FK_MatchingRule_MatchingProcess&quot; }, MatchingErrorCode.MatchingProcessDoesNotExist`\n\n- enter ',' at the end of the line\n- remove it with backspace\n- press shift and use arrow key down to select text from the line below\n\nexpected: some text in selection\n\nwhat I get: selection of text is not enabled at all.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/165148/selection-doesnt-work-after-deleting-a-character.html\nVSTS ticketId: 536457_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on ‎12‎/‎20‎/‎2017, 08:11 PM (40 min ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7016221617","Type":"IssuesEvent","CreatedAt":"2017-12-21T02:12:08","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23893","RelatedDescription":"Opened issue \"Wrong Code Style suggestion\" (#23893) at dotnet/roslyn","RelatedBody":"15.5.1, used to work all right before.\n\nVS suggests to change the following out parameter type to var, despite my setting of preference to built-in types over var. In earlier versions this worked. With plain variable declarations it's OK, only out parameters are problematic now.\n\nOn a related note, I'd very much like to see another setting that handles nullable versions of built-in types. I have a preference for built-in types over var but I'd like to see this extended to their nullable versions as well, like bool?, rather than suggesting them to change to var.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/167044/wrong-code-style-suggestion.html\nVSTS ticketId: 537874_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7016152336","Type":"IssuesEvent","CreatedAt":"2017-12-21T01:44:51","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23892","RelatedDescription":"Opened issue \"Do not get access to \"this\" in breakpoint conditions for expression properties/methods\" (#23892) at dotnet/roslyn","RelatedBody":"**Version Used**: Version 15.6.0 Preview 1.1 [27217.0.d15.6]\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\n    class Program\r\n    {\r\n        private readonly string _foo;\r\n\r\n        public string Foo => _foo; // Location 1\r\n\r\n        public string FooBar() => _foo; // Location 2\r\n    }\r\n```\r\n\r\n1. Set a breakpoint on Location 1 and Location 2\r\n2. Right-click breakpoint and choose Conditions\r\n3. Check conditions and in expression text box, type `this.`\r\n\r\n**Expected Behavior**:\r\nFor completion window to open and get intellisense for members of the class (ie _foo)\r\n\r\n**Actual Behavior**:\r\nActual, completion window doesn't open. If you force it open CTRL+Space there's no access to \"this\" members\r\n"},{"Id":"7016091476","Type":"IssuesEvent","CreatedAt":"2017-12-21T01:21:04","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23891","RelatedDescription":"Opened issue \"Scrolling down and then up in completion window in breakpoint shows \"Queue empty\" in MessageBox\" (#23891) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVersion 15.6.0 Preview 1.1 [27217.0.d15.6]\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Console App (.NET Framework)\r\n2. Set a breakpoint \r\n3. Right-click on breakpoint and Conditions...\r\n4. Check conditions\r\n5. In expression text box, press CTRL+Space to show completion window\r\n6. Holding down down arrow scroll until a few pages and the top completions items are waay off screen\r\n7. Holding down up arrow scroll back up to the top of the completion window\r\n\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nQueue empty.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n\r\n"},{"Id":"7016082751","Type":"IssuesEvent","CreatedAt":"2017-12-21T01:17:53","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23890","RelatedDescription":"Opened issue \"Scrolling too far up on completion window in suggestion mode throws exception\" (#23890) at dotnet/roslyn","RelatedBody":"1. File -> New -> Console App (.NET Framework)\r\n2. Set a breakpoint \r\n3. Right-click on breakpoint and Conditions...\r\n4. Check conditions\r\n5. In expression text box, press CTRL+Space to show completion window\r\n6. Press up 4 times \r\n\r\n![image](https://user-images.githubusercontent.com/1103906/34235807-3754d630-e648-11e7-91ea-edd9a0f88ebf.png)\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object. at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.CancellableContentControl..ctor(ToolTipProvider toolTipProvider, CustomCommitCompletion item) at Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.Completion.Presentation.ToolTipProvider.GetUIElement(Completion itemToRender, ICompletionSession context, UIElementType elementType) at Microsoft.VisualStudio.Language.Intellisense.Implementation.Helpers.<>c__DisplayClass6_0`2.<FindUIElement>b__0(IUIElementProvider`2 provider) at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.InstantiateExtension[TExtension,TMetadata,TExtensionInstance](Object errorSource, Lazy`2 provider, Func`2 getter) --- End of stack trace from previous location where exception was thrown --- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nThis sometimes occurs when you scrolling the window with the keyboard and you scroll too far.\r\n\r\nYou don't need a breakpoint to do this but suggestion mode is on by default in."},{"Id":"7016066636","Type":"IssuesEvent","CreatedAt":"2017-12-21T01:11:26","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23889","RelatedDescription":"Opened issue \"CSharpRenameTrackingCodeFixProvider throws the System.NullReferenceExcpetion on the solution that contains F# library\" (#23889) at dotnet/roslyn","RelatedBody":"Hi,\n\nI have recorded a screencast that illustrates the issue: https://www.screencast.com/t/z0rn9lvbZMcD\n\nThe probleamatic solution is attached.\n\nStack trace: System.AggregateException : One or more errors occurred. ---&gt; Object reference not set to an instance of an object.\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCodeAction.ComputePreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.&lt;&gt;c__DisplayClass11_0.&lt;GetPreviewAsync&gt;b__0(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](&lt;Unknown Parameters&gt;)\n---&gt; (Inner Exception #0) System.NullReferenceException : Object reference not set to an instance of an object.\n   at async Microsoft.CodeAnalysis.FindSymbols.Finders.NamedTypeSymbolReferenceFinder.DetermineDocumentsToSearchAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.CreateProjectToDocumentMapAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at async Microsoft.CodeAnalysis.FindSymbols.FindReferencesSearchEngine.FindReferencesAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.FindSymbols.SymbolFinder.FindRenamableReferencesAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.RenameLocations.AddLocationsReferenceSymbolsAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.RenameLocations.FindAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Rename.Renamer.RenameSymbolAsync(&lt;Unknown Parameters&gt;)\n   at async Microsoft.CodeAnalysis.Editor.Implementation.RenameTracking.RenameTrackingTaggerProvider.RenameTrackingCommitter.RenameSymbolWorkerAsync(&lt;Unknown Parameters&gt;)&lt;---\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/166190/csharprenametrackingcodefixprovider-throws-the-sys.html\nVSTS ticketId: 537049_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7016025545","Type":"PullRequestEvent","CreatedAt":"2017-12-21T00:55:03","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23888","RelatedDescription":"Opened pull request \"Remove obsolete duplicate APIs from type symbols.\" (#23888) at dotnet/roslyn","RelatedBody":""},{"Id":"7016008772","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:48:21","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23887","RelatedDescription":"Opened issue \"VS 2017.5.1 crash during 'Rename' operation (of an enum value)\" (#23887) at dotnet/roslyn","RelatedBody":"Hi,\n\nI open a solution with 14 projects (13 C#/ 1 F#, .NET Framework 4.7), go to a file with a enum, press CTRL+R,R to rename an enum value then VS starts thinking and crashes. Callstack from Event Viewer:\n\nApplication: devenv.exe\nFramework Version: v4.0.30319\nDescription: The application requested process termination through System.Environment.FailFast(string message).\nMessage: System.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.Session.&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\nStack:\n   at System.Environment.FailFast(System.String, System.Exception)\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1&lt;System.Exception&gt;)\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24, Microsoft.CodeAnalysis.Workspaces, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;FindDocumentsAndPossibleNameConflicts&gt;d__24 ByRef)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session.FindDocumentsAndPossibleNameConflicts()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;ResolveConflictsAsync&gt;d__18.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session+&lt;ResolveConflictsAsync&gt;d__18, Microsoft.CodeAnalysis.Workspaces, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;ResolveConflictsAsync&gt;d__18 ByRef)\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver+Session.ResolveConflictsAsync()\n   at Microsoft.CodeAnalysis.Rename.ConflictEngine.ConflictResolver.ResolveConflictsAsync(Microsoft.CodeAnalysis.Rename.RenameLocations, System.String, System.String, Microsoft.CodeAnalysis.Options.OptionSet, System.Func`2&lt;System.Collections.Generic.IEnumerable`1&lt;Microsoft.CodeAnalysis.ISymbol&gt;,System.Nullable`1&lt;Boolean&gt;&gt;, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet+&lt;GetReplacementsAsync&gt;d__7.MoveNext()\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet+&lt;GetReplacementsAsync&gt;d__7, Microsoft.CodeAnalysis.EditorFeatures, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](&lt;GetReplacementsAsync&gt;d__7 ByRef)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.AbstractEditorInlineRenameService+InlineRenameLocationSet.GetReplacementsAsync(System.String, Microsoft.CodeAnalysis.Options.OptionSet, System.Threading.CancellationToken)\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession+&lt;&gt;c__DisplayClass62_0.&lt;UpdateConflictResolutionTask&gt;b__0(System.Threading.Tasks.Task`1&lt;Microsoft.CodeAnalysis.Editor.IInlineRenameLocationSet&gt;)\n   at Roslyn.Utilities.TaskExtensions+&lt;&gt;c__DisplayClass16_0`2[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].&lt;SafeContinueWithFromAsync&gt;b__0(System.Threading.Tasks.Task)\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/167118/vs-201751-crash-during-rename-operation-of-an-enum.html\nVSTS ticketId: 537912_\n_These are the original issue comments:_\n\nPhillip Carter [MSFT] on 12/16/2017, 02:14 PM (4 days ago): <p>Hello Cyril,</p><p><br>Did you invoke rename on an F# enum or a C# enum? Are the enums consumed by other languages? (e.g., C# enum --&gt; used by F#, or F# enum --&gt; used by C#)</p>\n\nCyril Andreichuk on 12/18/2017, 01:42 AM (2 days ago): <p>hi,</p><p>1) it's C# enum (have you checked the attached files? you can see it there :))</p><p>2) the enum is not used in F# code. F# project references the project with the enum.</p><p>3) the issue can be reproduced on VS 15.5.2</p>\n\nPhillip Carter [MSFT] on 12/18/2017, 08:31 AM (2 days ago): <p>Thank you for the info! I work on the F# team, so I wanted to reach out about this before routing the bug to the appropriate team. It seems our system saw \"F#\" in the report and routed it my direction. I'll direct this to the C# IDE team.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7015986753","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:39:27","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23886","RelatedDescription":"Opened issue \"Possible bug in implementation of EETypeParameterSymbol.GetInterfaces\" (#23886) at dotnet/roslyn","RelatedBody":"```\r\n        internal override ImmutableArray<NamedTypeSymbol> GetInterfaces(ConsList<TypeParameterSymbol> inProgress)\r\n        {\r\n            var interfaces = _sourceTypeParameter.GetInterfaces(inProgress);\r\n            return this.TypeMap.SubstituteNamedTypes(Interfaces);\r\n        }\r\n```\r\n\r\nIt looks like SubstituteNamedTypes should be called on ```interfaces```, but it is called on ```Interfaces```."},{"Id":"7015974174","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:34:21","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23885","RelatedDescription":"Opened issue \"Unable to disable Roslyn lightbulb\" (#23885) at dotnet/roslyn","RelatedBody":"Why is there no option to use visual studio without the additional frills and bells and whistles that can be generalised under the 'Roslyn' category? When looking under Tools &amp; Extensions, the only option provided next to the entries relating to roslyn, is &quot;Uninstall&quot; (I'd expect to see a &quot;Disable&quot; somewhere), which kindly lets you know that everything else relating to C# development will also get removed should I desire to get rid of said component. Oh the number of times I've found myself staring at the uninstall screen longingly... If only RIDER had better web deploy support.\n\n\nSo please give us a way to _disable all_ visual studio suggestions, code fixes, refactorings, etc etc - the &quot;lightbulb&quot; essentially. The only lightbulb I want to see in my VS is the one belonging to ReSharper. \n\n\nThe choice of when we switch to VS tools, and IF we do it at all, should be left up to the developer, instead of being opted into features we haven't asked for, with the expectation that we'd be filing bug reports about things that annoy us - that's just lost productivity, on all ends. \n\nWe already had a perfectly good toolkit called ReSharper. Thanks to these &quot;improvements&quot; to VS, our favourite tool has taken a hit in terms of performance as well as feature development. \n\nOnce more for clarity: stop forcing roslyn &quot;helpers&quot; on me and let me disable that junk!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/159587/unable-to-disable-roslyn-lightbulb.html\nVSTS ticketId: 532717_\n_These are the original issue comments:_\n\nCheryl Borley (InConsulting Inc.) on ‎12‎/‎6‎/‎2017, 03:32 PM (14 days ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7015941271","Type":"IssuesEvent","CreatedAt":"2017-12-21T00:21:54","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23884","RelatedDescription":"Opened issue \"editorconfig static rule is applying to const\" (#23884) at dotnet/roslyn","RelatedBody":"I have two rules in my .editorconfig file (that lives in the same folder as the .sln file).  The first rule applies to private static fields and the second rule applies to private fields (with no required modifiers).\n\nWhen creating a private const field in a class I am getting a naming error because it is trying to apply the static naming rule.  It should be skipping that rule because that rule has &quot;required_modifers = static&quot; and this is a const field.\n\nIf I create an additional rule specifically for private const fields and put it before the static rule then everything works.  However this shouldn't be necessary since I want all my private non-static fields to use the same naming convention (so anything non-static should fall past the first rule and be applied by the second rule).\n\nThis issue is similiar to https://developercommunity.visualstudio.com/content/problem/152286/editorconfig-constenum-settings-not-working-in-vis.html which was closed due to being a duplicate.  I think it was incorrectly marked as a duplicate because the &quot;original&quot; report was a rule ordering issue.  In this scenario the rules are ordered correctly, but appear to be applied incorrectly.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/160932/editorconfig-static-rule-is-applying-to-const.html\nVSTS ticketId: 533466_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on ‎12‎/‎20‎/‎2017, 06:13 PM (8 min ago): <p>We appreciate you taking the time to report this problem. We are currently prioritizing problems that are impacting a broad set of our customers, so we may not be able to investigate this one immediately. We know this problem is important to you, so we will continue to monitor it.</p>\n\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7016498529","Type":"PullRequestEvent","CreatedAt":"2017-12-21T04:08:45","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5141","RelatedDescription":"Opened pull request \"Link WebAssembly runtime\" (#5141) at dotnet/corert","RelatedBody":"Changes to link the WebAssembly runtime with codegen. This will allow us to start enabling runtime-provided features. This change proves that out by allocating via the runtime (though with no GC reporting, so hopefully it doesn't try to collect). Also includes some codegen fixes required by the new code that we're generating. "},{"Id":"7015746440","Type":"PullRequestEvent","CreatedAt":"2017-12-20T23:13:08","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5140","RelatedDescription":"Opened pull request \"Add sample app and guide\" (#5140) at dotnet/corert","RelatedBody":"Add a sample app to demonstrate use of the ILCompiler NuGet package now that we publish it for all target runtimes. \r\nThis doesn't work under non-Windows platforms - we don't yet statically link to CoreFX libraries (with the exception of System.Native). When we do, this can be merged.\r\n"},{"Id":"7015677509","Type":"PullRequestEvent","CreatedAt":"2017-12-20T22:52:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5139","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5139) at dotnet/corert","RelatedBody":""},{"Id":"7015533161","Type":"PullRequestEvent","CreatedAt":"2017-12-20T22:11:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5139","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5139) at dotnet/corert","RelatedBody":""},{"Id":"7015528385","Type":"PullRequestEvent","CreatedAt":"2017-12-20T22:10:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5138","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5138) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7015519373","Type":"PullRequestEvent","CreatedAt":"2017-12-20T22:07:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5138","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5138) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7014356622","Type":"PullRequestEvent","CreatedAt":"2017-12-20T17:26:15","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5136","RelatedDescription":"Merged pull request \"Linux and OSX Package Publish Regression Fix\" (#5136) at dotnet/corert","RelatedBody":"Third time that packaging issues have popped up, clashes in naming cause the build pipeline to attempt to publish the same package multiple times and OverwriteOnPublish needs to be explicitly set to allow this. Instead of leaving it to chance (which machine finishes the build first), we define a \"canonical\" meta-package build. \r\n\r\nThis adds details to the ILCompiler runtimes.json files and only builds the necessary packages during official builds - i.e. runtime packages and the TargetingPack, which was being built multiple times, even though CoreCLR only consumes the win-x64 build. \r\n\r\nI really don't like adding logic to the .builds files. This works as a temporary workaround to get the ILCompiler package off the ground, but ideally we would copy CoreCLR's framework in making the package build and publishing selection logic generic for any additional packages.\r\n\r\n@MichalStrehovsky - could you take a look when you get the chance?\r\ncc @jkotas "},{"Id":"7010277470","Type":"PullRequestEvent","CreatedAt":"2017-12-19T22:30:16","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5136","RelatedDescription":"Opened pull request \"Linux and OSX Package Publish Regression Fix\" (#5136) at dotnet/corert","RelatedBody":"Third time this issue has popped up, but this time in publishing, because of the roundabout way we generate meta-packages. \r\n\r\nThis adds details to the ILCompiler runtimes.json files and only builds the necessary packages during official builds - i.e. runtime packages and the TargetingPack, which was being built multiple times, even though CoreCLR only consumes the win-x64 build. \r\n\r\nI really don't like adding logic to the .builds files. This works as a temporary workaround to get packages published and working, but ideally we would copy CoreCLR's framework in making the package build and publishing selection logic generic for any additional packages."},{"Id":"7008576623","Type":"PullRequestEvent","CreatedAt":"2017-12-19T16:08:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5134","RelatedDescription":"Closed pull request \"Remove reflection test hack\" (#5134) at dotnet/corert","RelatedBody":"This was added in #3773 when we started resolving interface calls into direct calls and the line stopped ensuring the interface method is callable with reflection (since there was no visible interface call happening in retail builds). Now that the scanner computes reflectable closure, the hack is no longer needed."},{"Id":"7008508505","Type":"PullRequestEvent","CreatedAt":"2017-12-19T15:56:10","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5135","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5135) at dotnet/corert","RelatedBody":""},{"Id":"7008507382","Type":"PullRequestEvent","CreatedAt":"2017-12-19T15:55:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5135","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5135) at dotnet/corert","RelatedBody":""},{"Id":"7007804313","Type":"PullRequestEvent","CreatedAt":"2017-12-19T13:43:54","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5134","RelatedDescription":"Opened pull request \"Remove reflection test hack\" (#5134) at dotnet/corert","RelatedBody":"This was added in #3773 when we started resolving interface calls into direct calls and the line stopped ensuring the interface method is callable with reflection (since there was no visible interface call happening in retail builds). Now that the scanner computes reflectable closure, the hack is no longer needed."},{"Id":"7007509313","Type":"PullRequestEvent","CreatedAt":"2017-12-19T12:36:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5129","RelatedDescription":"Merged pull request \"Add AnalysisBasedMetadataManager\" (#5129) at dotnet/corert","RelatedBody":"(Split into several self-contained commits for reviewability.)\r\n\r\nThis is making progress towards a pluggable metadata generation strategy. After this change, we no longer compute reflection metadata twice in optimized builds (once during the scanning, the second time during the compilation). Instead, the scanner computes the full metadata closure, and the compilation phase uses it to drive code generation and metadata generation. We no longer suffer from the problems caused by things getting inlined and becoming no longer reflectable.\r\n\r\nThe general design goals were:\r\n\r\n* Support a mode where the reflectable closure is computed based on what got compiled. This has two flavors:\r\n  * The closure gets computed by the IL scanner (to provide a deterministic closure that doesn't depend on what things got optimized away)\r\n  * The closure gets computed based on what the codegen backend compiled. This is so that we can have unoptimized builds that don't depend on the IL scanner.\r\n* Support a mode where reflectable closure is provided by an external tool (e.g. the Project N dependency reducer).\r\n* Support a mode where nothing is reflectable. This is to compile things like mrt100_app.dll or to do experiments.\r\n* Support a mode where reflectable closure and the metadata blob are computed ahead of time (Project X).\r\n\r\nThe design relies on multiple metadata managers that the dependency nodes (such as `MethodCodeNode`, or `EETypeNode`) call into to get additional dependencies. Those dependencies depend on what the metadata manager is doing and can be limited to just ensuring we have invoke stubs (Project X), to ensuring we have custom attributes, metadata for owning type and module, etc.\r\n\r\nThe resulting class hierarchy is:\r\n* `MetadataManager` - the base class for everything; handling things that are common.\r\n  * `EmptyMetadataManager` - this one does nothing.\r\n  * `PrecomputedMetadataManager` - for Project X.\r\n  * `GeneratingMetadataManager` - a metadata manager that generates reflection metadata and invoke stubs\r\n    * `UsageBasedMetadataManager` - this one collects necessary metadata based on usage. It uses some supporting node types (like `TypeMetadataNode`) to track additional dependencies of the metadata itself. This enforces invariants like usable custom attribute metadata, metadata for containing types of nested types, etc.)\r\n    * `AnalysisBasedMetadataManager` - this one provides compilation roots based on the things that are required to be reflectable, and uses an ahead of time determined set of things that need metadata. This one can be produced from a `UsageBasedMetadataManager` (for the \"IL scanner before compilation\" scenario), or could be instantiated from data provided by an external tool.\r\n\r\nThere is more work left, but this seems like a reasonable checkpoint. Examples of leftover things is handling of fields (now that we have a scanner, we can have a \"precise\" mode for tracking reflection field usage instead of blanket policy that says all fields are reflectable; we'll still need to support the fallback logic for \"no scanner\" scenarios, but optimized scenarios can get some size on disk benefits)."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7014464972","Type":"IssuesEvent","CreatedAt":"2017-12-20T17:50:57","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1780","RelatedDescription":"Closed issue \"Migrating tasks from old csproj to new csproj format\" (#1780) at dotnet/sdk","RelatedBody":"_From @MNie on November 30, 2017 21:20_\n\nI'm currently in a process of migrating old csprojs to a new format. In some of them I have a msbuild task to replace app.config with app.debug/release.config (depending on build configuration).\r\nIn old csproj code to achieve that looks as follows:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n  <Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n    <!--Generate transformed app config in the intermediate directory-->\r\n    <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n    <!--Force build process to use the transformed configuration file from now on.-->\r\n    <ItemGroup>\r\n      <AppConfigWithTargetPath Remove=\"App.config\" />\r\n      <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n        <TargetPath>$(TargetFileName).config</TargetPath>\r\n      </AppConfigWithTargetPath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nCurrently I have a piece of code like this which in fact doesn't work, but project compiles with it:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" AfterTargets=\"Build\">\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nSo the question is, is it supported in new csproj format? \r\nIf yes, how I could port such task(s)?\r\nIf no, would it be supported in future?\r\n\r\nOS info:\r\nVisual studio 15.4.4\r\n\r\n\r\n[msbuild issue](https://github.com/Microsoft/msbuild/issues/2746)\n\n_Copied from original issue: dotnet/project-system#3011_"},{"Id":"7011542742","Type":"PullRequestEvent","CreatedAt":"2017-12-20T06:41:49","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1830","RelatedDescription":"Closed pull request \"WIP Pack questions\" (#1830) at dotnet/sdk","RelatedBody":"Use WIP PR to ask some questions, I feel it is easier that way"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":13,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-21T05:30:24.0865186Z","RunDurationInMilliseconds":8400}