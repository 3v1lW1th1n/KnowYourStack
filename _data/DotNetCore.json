{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":93,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null},{"Title":".NET Core Source Code Analysis with Intel® VTune™ Amplifier","PublishedOn":"2018-10-23T21:04:49+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, Denis Pravdin, who are engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/23/net-core-source-code-analysis-with-intel-vtune-amplifier/","RawContent":null},{"Title":"Call For Participation: .NET and TypeScript at FOSDEM conference","PublishedOn":"2018-10-23T20:16:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The organizers of the FOSDEM 2019 conference have allocated a “Developer Room” on Saturday February 2nd 2019 for .NET and TypeScript discussions in Brussels Belgium.   FOSDEM is one of Europe’s most...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/23/call-for-participation-net-and-typescript-at-fosdem-conference/","RawContent":null},{"Title":".NET Framework October 2018 Preview of Quality Rollup","PublishedOn":"2018-10-18T20:44:34+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Updated Japanese dates that...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/18/net-framework-october-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Core 2.2 Preview 3","PublishedOn":"2018-10-18T01:03:01+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 3. We have made more improvements to the overall release that we would love to get your feedback on, either in the comments or at dotnet/core #2004....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-net-core-2-2-preview-3/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2 Preview 3","PublishedOn":"2018-10-17T20:10:48+00:00","CommentsCount":23,"FacebookCount":0,"Summary":"Today we are making EF Core 2.2 Preview 3 available, together with a new preview of our data provider for Cosmos DB and updated spatial extensions for various providers. Preview 3 is going to be the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-entity-framework-core-2-2-preview-3/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8571622963","Type":"PullRequestEvent","CreatedAt":"2018-11-12T05:14:33","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20936","RelatedDescription":"Closed pull request \"[RFC] Reusable ThreadPool workitems\" (#20936) at dotnet/coreclr","RelatedBody":"For the global threadpool queue workitems can be reused.\r\n\r\nThis introduces a threadpool thread local pool (64 items) and a global pool (256 items). \r\n\r\nThere are two types of pools; one for `WaitCallback` and one for `Action<TState>`.\r\n\r\nItems are returned to the threadpool local pool of the thread they execute on; when that is full they are returned to the global pool; until full then they are discarded.\r\n\r\nQueued items from a threadpool thread first attempt to get an item from their local pool, then the global pool, then they create a new item.\r\n\r\nQueued items from a non-threadpool thread first attempt to get an item from the global pool, then they create a new item.\r\n\r\nItems queued to the thread local work queues, rather than the global queue do not use reusable items.\r\n\r\nGeneric `Action<TState>` items are only pooled if they are an object type; as they are stored as `object` and pass through a type converter to execute; which would box value-types.\r\n\r\nBefore\r\n![image](https://user-images.githubusercontent.com/1142958/48306616-b8200880-e533-11e8-9ecb-ba5fc99453aa.png)\r\n\r\n\r\nAfter\r\n![image](https://user-images.githubusercontent.com/1142958/48307596-2f5f9780-e548-11e8-94e8-6d265d5e650d.png)\r\n\r\n\r\n/cc @stephentoub @davidfowl "},{"Id":"8571444642","Type":"IssuesEvent","CreatedAt":"2018-11-12T04:04:30","Actor":"maikebing","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20942","RelatedDescription":"Opened issue \"Enum.TryParse  Method conflict \" (#20942) at dotnet/coreclr","RelatedBody":"Enum.TryParse(Type enumType, string value, out object result)\r\n\r\nTryParse<TEnum>(string value, bool ignoreCase, out TEnum result) where TEnum : struct\r\n\r\n```\r\n       RpcCmds cmd = RpcCmds.NotSupported;\r\n                               object obj;\r\n                               Enum.TryParse(typeof(RpcCmds), \"NotSupported\", out obj);  //A \r\n                               Enum.TryParse(\"NotSupported\", true, out cmd);  //B\r\n```\r\nIDE thinks A is not wrong, but the compiler mistaken B for this usage.\r\nIs this a BUG?\r\n"},{"Id":"8571221134","Type":"IssuesEvent","CreatedAt":"2018-11-12T02:42:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20941","RelatedDescription":"Opened issue \"GCHandle tracing is not pay-for-play\" (#20941) at dotnet/coreclr","RelatedBody":"All tracing code should behind a fast check to make it pay-for-play. It does not seem to be happening for GCHandle Alloc/Free. See https://github.com/dotnet/coreclr/issues/20939.\r\n\r\nWe are doing several calls related to tracing just to fine out that there is nothing to do. It is something we should fix.\r\n\r\n"},{"Id":"8571108451","Type":"IssuesEvent","CreatedAt":"2018-11-12T02:00:03","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20939","RelatedDescription":"Closed issue \"Memory<T> is pinning prepinned arrays\" (#20939) at dotnet/coreclr","RelatedBody":"Looking at the profile on IOCompletion for Kestrel plaintext; mostly seems to be moving stuff onto the threadpool to run?\r\n\r\nHowever 35% is used freeing `GCHandle`\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/48314841-61fca500-e5c7-11e8-99f1-b07c54b2ce5a.png)\r\n\r\nOther issue, lock contention blue prior to UnsafeQueueUserWorkItem, don't see where the lock is though.\r\n\r\nQueuing to threadpool via `UnsafeQueueUserWorkItem` is only 4.3%\r\n\r\nHaven't come to any conclusions as of yet; might just be tracing overheads?"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8570752947","Type":"IssuesEvent","CreatedAt":"2018-11-11T22:59:54","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10314","RelatedDescription":"Opened issue \"Clean up publish target logic following copy-local unification.\" (#10314) at dotnet/cli","RelatedBody":"This is a tracking issue to follow up on the work performed by dotnet/sdk#2646.\r\n\r\nThere is duplicated work done in the publish targets for calculating copying dependencies.\r\n\r\nIdeally, for both build and publish to be identical in the copy-local of assets behavior, publish would reuse the same item set that build does for determining which assets to copy local.\r\n\r\nUnfortunately, there are a few hurdles that stand in the way of this:\r\n\r\n* Support for ASP.NET Core 2.0 runtime stores.  The 2.0 `Microsoft.AspNetCore.All` package hooks publish targets to populate the manifest list that is used to derive \"runtime store\" packages to exclude from the publish.  Since this happens after the build targets, there's no feasible way to support these packages and .NET Core 2.0 packages are no longer serviceable (EOL was Oct 2018).\r\n\r\n* Support for third-party use of runtime stores.  There are likely customers in existence that would like to continue using runtime stores in 3.0+.  To support this, we will need to move the manifest parsing logic out of the existing publish work and move it to package dependency resolution (as input to `ResolvePackageAssets` to calculate what needs to be copied local).\r\n\r\n* Currently `PrivateAssets=\"all\"` or `Publish=\"false\"` on a package reference excludes the package from publishing, but not build copy-local.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8567968192","Type":"IssuesEvent","CreatedAt":"2018-11-10T17:02:10","Actor":"bernd5","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/964","RelatedDescription":"Closed issue \"Why including everything into netstandard\" (#964) at dotnet/standard","RelatedBody":"Hello,\r\nwhy is net standard growing so much? Wouldn't it be better to provide new APIs via normal libraries?\r\nFor other platforms it becomes very hard to implement all changes in net standard.\r\n\r\nThe good thing is, that we have the coreFx repository which contains almost all standard APIs. But one problem is, that it has some strong (not documented) dependencies to the underlying runtime (e.g. RuntimeThread). Theres no indicator which says \"this type needs special runtime support\". For some types this is obvious, e.g. it's clear that Int32 can't be implemented by a value of \"Int32\". But for others not!\r\n\r\nTo implement net standard I would like to have two sets of APIs. One which needs special runtime Handling (like Delegate, Int32, String, Thread ...). And another one which has only non special APIs like Dicitionaries, Lists, Color (all types which can be implemented without any special runtime support)."},{"Id":"8567597502","Type":"PullRequestEvent","CreatedAt":"2018-11-10T13:16:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/965","RelatedDescription":"Merged pull request \"[Darc-Update] Update dependencies from build 20181109.22 of https://github.com/dotnet/arcade\" (#965) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18559.22.symbols.nupkg - 2.2.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18559.22.symbols.nupkg - 2.4.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18559.22\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18559.22\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Darc - 1.0.0-beta.18559.22\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18559.22\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18559.22\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18559.22"},{"Id":"8567575183","Type":"PullRequestEvent","CreatedAt":"2018-11-10T13:01:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/965","RelatedDescription":"Opened pull request \"[Darc-Update] Update dependencies from build 20181109.22 of https://github.com/dotnet/arcade\" (#965) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18559.22.symbols.nupkg - 2.2.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18559.22.symbols.nupkg - 2.4.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18559.22\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18559.22\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Darc - 1.0.0-beta.18559.22\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18559.22\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18559.22\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18559.22"},{"Id":"8567330842","Type":"IssuesEvent","CreatedAt":"2018-11-10T10:00:30","Actor":"bernd5","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/964","RelatedDescription":"Opened issue \"Why including everything into netstandard\" (#964) at dotnet/standard","RelatedBody":"Hello,\r\nwhy is net standard growing so much? Wouldn't it be better to provide new APIs via normal libraries?\r\nFor other platforms it becomes very hard to implement all changes in net standard.\r\n\r\nThe good thing is, that we have the coreFx repository which contains almost all standard APIs. But one problem is, that it has some strong (not documented) dependencies to the underlying runtime (e.g. RuntimeThread). Theres no indicator which says \"this type needs special runtime support\". For some types this is obvious, e.g. it's clear that Int32 can't be implemented by a value of \"Int32\". But for others not!\r\n\r\nTo implement net standard I would like to have two sets of APIs. One which needs special runtime Handling (like Delegate, Int32, String, Thread ...). And another one which has only non special APIs like Dicitionaries, Lists, Color (all types which can be implemented without any special runtime support)."},{"Id":"8566137211","Type":"PullRequestEvent","CreatedAt":"2018-11-09T22:29:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/963","RelatedDescription":"Merged pull request \"Add ISOWeek\" (#963) at dotnet/standard","RelatedBody":"This fixes #956 "},{"Id":"8566137198","Type":"IssuesEvent","CreatedAt":"2018-11-09T22:29:24","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/956","RelatedDescription":"Closed issue \"Include System.Globalization.ISOWeek\" (#956) at dotnet/standard","RelatedBody":"I'd like to propose the inclusion of the new `System.Globalization.ISOWeek` APIs, added in https://github.com/dotnet/corefx/pull/30386.\r\n\r\nI would consider these pretty fundamental APIs that would be useful on all the current .NET platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```patch\r\ndiff --git a/netstandard/ref/System.Globalization.cs b/netstandard/ref/System.Globalization.cs\r\nindex 995ce25..4214d5a 100644\r\n--- a/netstandard/ref/System.Globalization.cs\r\n+++ b/netstandard/ref/System.Globalization.cs\r\n@@ -446,6 +446,15 @@ namespace System.Globalization\r\n         public string GetUnicode(string ascii, int index) { throw null; }\r\n         public string GetUnicode(string ascii, int index, int count) { throw null; }\r\n     }\r\n+    public static partial class ISOWeek\r\n+    {\r\n+        public static int GetWeekOfYear(System.DateTime date) { throw null; }\r\n+        public static int GetWeeksInYear(int year) { throw null; }\r\n+        public static int GetYear(System.DateTime date) { throw null; }\r\n+        public static System.DateTime GetYearEnd(int year) { throw null; }\r\n+        public static System.DateTime GetYearStart(int year) { throw null; }\r\n+        public static System.DateTime ToDateTime(int year, int week, System.DayOfWeek dayOfWeek) { throw null; }\r\n+    }\r\n     public partial class JapaneseCalendar : System.Globalization.Calendar\r\n     {\r\n         public JapaneseCalendar() { }\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8571649787","Type":"IssuesEvent","CreatedAt":"2018-11-12T05:25:16","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33403","RelatedDescription":"Opened issue \"Flaky test System.Buffers.ArrayPool.Tests.CollectionTests/BuffersAreCollectedWhenStale(trim: True)\" (#33403) at dotnet/corefx","RelatedBody":"This test is failing every 5-10 runs in master. See history here https://mc.dot.net/#/product/netcore/30/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20181107.01/workItem/System.Buffers.Tests/analysis/xunit/System.Buffers.ArrayPool.Tests.CollectionTests~2FBuffersAreCollectedWhenStale(trim:%20True)\n\nIt already has extensive pauses and timeouts so I'm not sure what can be done. @jeremykuhne?\n\nThe test `System.Buffers.ArrayPool.Tests.CollectionTests/BuffersAreCollectedWhenStale(trim: True)` has failed.\n\nFailure Message:\n```\nSystem.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception.\n```\n\nStack Trace:\n```\n\nChild exception:\n  Xunit.Sdk.EqualException: Assert.Equal() Failure\nExpected: True\nActual:   False\n   at System.Buffers.ArrayPool.Tests.CollectionTests.<>c.<BuffersAreCollectedWhenStale>b__0_0(String trimString) in /root/corefx-2187344/src/System.Buffers/tests/ArrayPool/CollectionTests.cs:line 76\n\nChild process:\n  System.Buffers.Tests, Version=4.0.4.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Buffers.ArrayPool.Tests.CollectionTests+<>c Int32 <BuffersAreCollectedWhenStale>b__0_0(System.String)\n\nChild arguments:\n  True\n\n```\n\nBuild : 3.0 - 20181107.01 (Core Tests)\nFailing configurations:\n- Ubuntu.1604.Arm64-arm64\n  - Release"},{"Id":"8571633222","Type":"PullRequestEvent","CreatedAt":"2018-11-12T05:18:43","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33402","RelatedDescription":"Opened pull request \"Increase Compression tests timeout\" (#33402) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/32025 hopefully.\r\n\r\nGenerally, where a test is sporadically failing in official runs timing out on a wait, increasing it to 30 secs makes the problem go away."},{"Id":"8571628295","Type":"PullRequestEvent","CreatedAt":"2018-11-12T05:16:44","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33397","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreFxOptimizationData to preview-27112-01, preview.18562.1, master-20181111-0045, respectively (master)\" (#33397) at dotnet/corefx","RelatedBody":""},{"Id":"8571595599","Type":"IssuesEvent","CreatedAt":"2018-11-12T05:03:35","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33401","RelatedDescription":"Opened issue \"Test failure on NETFX run: System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest/SendAsync_MultipleOutstandingSendOperations_Throws(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)\" (#33401) at dotnet/corefx","RelatedBody":"Opened on behalf of @danmosemsft\n\nThe test `System.Net.WebSockets.Client.Tests.ArraySegmentSendReceiveTest/SendAsync_MultipleOutstandingSendOperations_Throws(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)` has failed.\n\nFailure Message:\n```\nSystem.Net.WebSockets.WebSocketException : The 'System.Net.WebSockets.InternalClientWebSocket' instance cannot be used for communication because it has been transitioned into the 'Aborted' state.\\r\n---- System.Net.WebSockets.WebSocketException : The 'System.Net.WebSockets.InternalClientWebSocket' instance cannot be used for communication because it has been transitioned into the 'Aborted' state.\n```\n\nStack Trace:\n```\n   at System.Net.WebSockets.WebSocketBase.ThrowIfAborted(Boolean aborted, Exception innerException)\n   at System.Net.WebSockets.WebSocketBase.ThrowIfConvertibleException(String methodName, Exception exception, CancellationToken cancellationToken, Boolean aborted)\n   at System.Net.WebSockets.WebSocketBase.<SendAsyncCore>d__47.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Net.WebSockets.Client.Tests.SendReceiveTest.<SendAsync_MultipleOutstandingSendOperations_Throws>d__8.MoveNext() in E:\\A\\_work\\17\\s\\corefx\\src\\System.Net.WebSockets.Client\\tests\\SendReceiveTest.cs:line 166\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n----- Inner Stack Trace -----\n   at System.Net.WebSockets.WebSocketProtocolComponent.ThrowIfSessionHandleClosed(WebSocketBase webSocket)\n   at System.Net.WebSockets.WebSocketProtocolComponent.WebSocketGetAction(WebSocketBase webSocket, ActionQueue actionQueue, Buffer[] dataBuffers, UInt32& dataBufferCount, Action& action, BufferType& bufferType, IntPtr& actionContext)\n   at System.Net.WebSockets.WebSocketBase.WebSocketOperation.<Process>d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Net.WebSockets.WebSocketBase.<SendAsyncCore>d__47.MoveNext()\n```\n\nBuild : 3.0 - 20181112.01 (Full Framework Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n"},{"Id":"8571182511","Type":"PullRequestEvent","CreatedAt":"2018-11-12T02:28:29","Actor":"joperezr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/33386","RelatedDescription":"Closed pull request \"CI is failing after my last checkin, trying to revert the version\" (#33386) at dotnet/corefx","RelatedBody":"…change for System.Memory to try and repair.\r\n\r\n```\r\n19:30:06     Testing System.Windows.Extensions TFM=netcoreapp3.0 RID=win7-x64\r\n19:30:06     Testing System.Windows.Extensions TFM=netcoreapp3.0 RID=debian.8-x64\r\n19:30:07 D:\\j\\workspace\\windows-TGrou---0d2c9ac4\\artifacts\\bin\\testPkg\\packageTest.targets(69,5): error : Assembly 'System.Drawing.Common' has insufficient version for dependency 'System.Memory' : 4.1.0.0 < 4.2.0.0. [D:\\j\\workspace\\windows-TGrou---0d2c9ac4\\artifacts\\bin\\testPkg\\projects\\System.Windows.Extensions\\netcoreapp3.0\\project.csproj] [D:\\j\\workspace\\windows-TGrou---0d2c9ac4\\pkg\\test\\testPackages.proj]\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8571237955","Type":"IssuesEvent","CreatedAt":"2018-11-12T02:48:23","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/19216","RelatedDescription":"Closed issue \"Test plan for \"ref readonly\" and related features (7.2)\" (#19216) at dotnet/roslyn","RelatedBody":"Write a test plan for \"ref readonly\", \"readonly structs\", \"ref and ref readonly extensions\" and \"ref ternary\"\r\n\r\n## LDM\r\n- [x] remove `in` syntax from initial release? ([merged](https://github.com/dotnet/roslyn/pull/22182))\r\n- [x] ref readonly locals? (implemented in 7.2, Andy)\r\n- [x] allowing `ref readonly` at call site (for those who dislike auto-ref)? (yes, but we're switching to `in` as keyword)\r\n- [ ] throw expression in ref ternary\r\n- [x] ref re-assignment (discussed in Oct 2nd LDM, C# 7.2 candidate)\r\n- [ ] Overloading on in/byval should cause an error (#22132)\r\n- [x] Should referencing [IsReadOnly] methods without an [IsConst] modreq be allowed? (#19792) (yes)\r\n\r\n## Spec\r\n- [x] Merge the \"decisions made\" spec into the existing docs\r\n- [ ] Note that `in` parameters are not allowed in iterator or async methods\r\n- [ ] Note that you can take unmanaged address of readonly variable (https://github.com/dotnet/roslyn/pull/22400)\r\n- [ ] Note the typing rule for stackalloc (`var x = stackalloc ...` is pointer type for compat reasons, but `condition ? stackalloc ... : stackalloc ...` is `Span`)\r\n\r\n## Misc\r\n\r\n- [x] Add feature docs for all these features (latest rules on Span, ref re-assignment)\r\n- [ ] Update Compiler test plan (stackalloc, in/ref readonly, ref struct)\r\n- [ ] Review BCL work (are the new types everywhere? for example, Span in mono?)\r\n- [ ] do IDE test pass\r\n    - [x] verify IDE completion and formatting on `ref readonly`, `in`, `return ref ...`, `ref` ternary, \r\n    - [x] CodeStyle for `in` versus `ref readonly`\r\n    - [ ] Analyzer/code fixer to recommend `readonly struct`\r\n    - [ ] If we choose to allow `ref readonly` at call site, CodeStyle for call site (for those who don't like auto-ref)\r\n   - [x] Block EE (problem with emitting attribute types?)\r\n   - [ ] Test Interactive\r\n- [ ] Test on various runtimes (desktop, core, native, mono). May need a spec of expected runtime behavior.\r\n- [ ] Triage remaining issues for the feature\r\n- [x] dogfood in Roslyn repo (https://github.com/dotnet/roslyn/pull/26010)\r\n- [ ] document PE Verify gaps (either with existing tracking issue, or creating a new one)\r\n\r\n\r\n## Ref readonly parameters\r\n- [x] [Spec](https://github.com/dotnet/csharplang/blob/master/proposals/readonly-ref.md) exists\r\n- [x] test passing too many modifiers (\"ref readonly in\" or \"in ref readonly\", etc)\r\n- [x] verify API declaration and usage from compilation, image, metadata-only image and ref assembly\r\n- [x] ref readonly property from metadata with different attributes on getter and property\r\n- [x] Where is it allowed or blocked?\r\n    - [x] combine with `out` or `params` (expect error)\r\n    - [x] `ref readonly` is disallowed: in local declarations `ref readonly var x = y;`, in front of expressions `var x = ref readonly y;`, `return ref readonly`, `foreach (readonly ref i in ...)`\r\n    - [x] ref readonly optional parameter\r\n    - [x] using `in` and `ref readonly` in lambda\r\n    - [x] using `in` in delegate\r\n    - [x] using `in` in local function\r\n    - [x] using `in` in async and iterator methods (disallowed)\r\n    - [x] explicit `in` or `ref readonly` at call site (disallowed)\r\n    - [x] the order of `ref` and `readonly` does matter (what is the error? should we offer a fixer?)\r\n    - [x] Using `in` in pattern-based lowering:\r\n        - [x] `Deconstruct` method with `in` parameters is not applicable for deconstruction\r\n        - [x] Implementing an task-like with `in` in builder type \r\n        - [x] enumerable/enumerator `GetEnumerator(in int count = 10)` (see #19742)\r\n\r\n    \r\n- [x] OHI\r\n    - [x] methods differing in `ref/out/in` (we only consider types)\r\n    - [x] invoke `M(1);` with `void M(ref readonly int i) { }` and `void M(int i) { }` in situation of ambiguity (because of inheritance or extension methods)\r\n\r\n- [x] verify `in` is invariant (because of CLR limitation, just like `out`)\r\n \r\n- [ ] Verify that IL for copy versus no-copy\r\n     - [ ] Passing in an RValue should work (making a temp copy, verify IL)\r\n     - [ ] Default values (temp copy)\r\n     - [ ] LValue need no copy\r\n     - [ ] test spilling for `M(someInArg, async M2(), someOtherInArg)`\r\n            - `someInArg` could be local, constant, `RefReadonlyM(refReadonlyField)`, `someArray[index]`, `field`\r\n- [ ] No writes allowed:\r\n    - [ ] assignment, compound assignment, passing as `ref`\r\n    - [ ] invocation (`in S s`, then `s.Mutate();`) (also allowed, operating on a temp copy, verify IL. But no copy if `S` is readonly struct)\r\n    - [ ] calling into a method passing `in` through is ok\r\n    - [ ] returning ref readonly parameter as ref (disallowed)\r\n    - [ ] returning ref parameter as ref readonly (allowed)\r\n- [ ] `in` parameters cannot be captured (lambda/async/iterator)\r\n- [x] `in` allowed in indexer and operator parameters\r\n- [x] test VB interop (calling blocked because modreq on overridable members and delegate/interface methods, but allowed on non-overridable members)\r\n- [x] taking pointer to ref readonly parameter (in unsafe code) is disallowed\r\n- [x] passing `nameof` expression as `in` argument (expect copy?)\r\n\r\n## Ref readonly returns\r\n- [x] [Spec](https://github.com/dotnet/csharplang/blob/master/proposals/readonly-ref.md) exists\r\n- [x] `in` syntax disallowed in method declaration\r\n- [x] `ref readonly` return in async method (no syntax for it)\r\n- [x] `ref readonly` return on operator is disallowed (no syntax for it)\r\n     - [x] operator from metadata should be handled (load as operator, but use-site error?)\r\n- [x] `ref readonly` on indexer (allowed)\r\n- [x] `readonly` is disallowed in `return` statement\r\n- [x] signature needs exact match in OHI\r\n     - [x] differentiates between `in` and `ref`\r\n- [x] ref-readonly-returning lambda?\r\n- [x] calling with a discard (no syntax for it?)\r\n   \r\n- [x] metadata:\r\n    - [x] `IsReadOnlyAttribute` gets embbeded if not found, disallowed in source\r\n    - [x] what if the attribute exists, but has wrong ctor shape?\r\n    - [x] If `InAttribute` modreq present but `IsReadOnlyAttribute` is missing, then cannot load metadata\r\n    - [x] If `IsReadOnlyAttribute` is present, but `InAttribute` modreq is missing, then can load and this absence of modreq will be carried over when overriding.\r\n    - [x] modreq always emitted (test VB interop)\r\n    - [x] verify API declaration and usage from compilation, image, metadata-only image and ref assembly\r\n\r\n## Readonly struct\r\n- [x] Spec\r\n- [ ] `readonly` on class declaration and other illegal members\r\n    - [ ] `readonly` is floating, but `ref` must be next to `struct` in `readonly ref struct`\r\n    - [ ] `partial` must be before `ref` or `struct` (but what about the `readonly`?)\r\n    - [ ] no `in` struct\r\n- [ ] `readonly` on half a partial struct (allowed, just like other modifiers)\r\n- [ ] How is it surfaced in symbol (semantic model)?\r\n- [ ] verify API declaration and usage from compilation, image, metadata-only image and ref assembly\r\n- [ ] readonly attribute is missing, readonly attribute specified in source, obsolete attribute is missing\r\n- [ ] `Obsolete` attribute given by user wins. There should be a warning.\r\n- [ ] can call `void M(in S s)` with `M(this)`, but not `void M(ref S s)`.\r\n- [ ] can call `void M(S s)` with `M(this)`, but that will make a copy.\r\n- [ ] `this` cannot be captured by lambda or other\r\n- [ ] taking a pointer to `this` is disallowed\r\n- [ ] all fields must be readonly\r\n- [ ] property setters and events are disallowed\r\n\r\n\r\n## Ref ternary\r\n- [ ] Blocked in expression tree\r\n- [ ] `(b ? ref x : ref y).M()` where `M` is ref extension method, regular extension method (error), regular method (error)\r\n     - [ ] does it make copies? what if `x` or `y` or both are readonly structs?\r\n- [ ] for `M(b ? ref x : ref y)` where `void M(in ...)`, I expect no temporary.\r\n- [ ] for `b ? ref M() : ref M2()` where `ref readonly C M()` (and same for M2), expect the ternary is readonly\r\n- [ ] for `b ? ref this : ref this` where `this` refers to a readonly struct, is the ternary readonly?\r\n- [ ] what if the branches differ in readonlyness in the examples above?\r\n- [ ] what if `b` is known to be constant (compiler knows which branch will be executed)?\r\n- [ ] Mixing ref and non-ref is disallowed. `b ? ref x : y`\r\n- [ ] Nesting. `b1 ? ref (b2 ? ref x : ref y) : ref z`\r\n- [ ] No ref coalescing operator `ref x ?? ref y`\r\n- [ ] Pattern matching on a ref ternary, or on a ref readonly ternary (this may matter later with tuple/deconstruction pattern?)\r\n- [ ] `b ? ref x : ref default` (disallowed)\r\n- [ ] Ref ternaries in tuple literal\r\n- [x] Ref ternary with throw expression (https://github.com/dotnet/csharplang/issues/919)\r\n- [ ] Ref ternary as `in` argument (`M(in condition ? ref x : ref y);`)\r\n\r\n## Ref readonly extension methods\r\n- [x] `ref readonly S Extension(ref readonly this S s) { return ref s; }`\r\n- [x] `void RRExtension<T>(ref readonly this T t) { ... }` (expect error)\r\n- [x] `42.RRExtension()` (ok, but makes temporary)\r\n- [x] `readonlyField.RRExtension()` (expect no temporary)\r\n- [x] `refReadonlyParameter.RRExtension()` (expect no temporary)\r\n- [x] `M().RRExtension()` (expect no temporary)\r\n- [ ] `this.RRExtension()` \r\n     - [ ] on readonly struct (expect no temporary)\r\n     - [ ] on a plain struct (expect makes temporary)\r\n- [ ] `(ref readonly ternary).RRExtension()` (expect no temporary)\r\n- [ ] Why do we allow on rvalues? (I assume for consistency with methods)\r\n- [x] verify API declaration and usage from compilation, image, metadata-only image and ref assembly\r\n\r\n## Ref-like types and safety (Span)\r\n- [x] [Spec](https://github.com/dotnet/csharplang/blob/master/proposals/span-safety.md) exists\r\n- [ ] See Neal's test plan: https://github.com/dotnet/roslyn/issues/20127\r\n- [x] `ref readonly string M(ref readonly string s = \"hello\") { return ref s; }`. Same with value type. (gives a unsafe-to-escape diagnostic)\r\n- [ ] test foreach with API pattern (as opposed to interface) on ref-like iterator\r\n- [x] dynamic and stackalloc\r\n     - [x] `dynamic d = stackalloc int[10];`\r\n     - [x] `Span<dynamic> d = stackalloc dynamic[10];`\r\n\r\n## Misc\r\n- [ ] `(b ? ref x : ref x).foo()`\r\n- [ ] `x.y.foo() // ref may be inferred`\r\n- [ ] Interaction with dynamic? nullable?\r\n- [x] attributes `IsReadOnly` and `IsByRefLike` are disallowed in source\r\n\r\nSee also\r\n- [Language Feature Status](https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md)\r\n- [The feature branch](https://github.com/dotnet/roslyn/tree/features/readonly-ref)\r\n- [[Work items] Readonly ref parameters/returns](https://github.com/dotnet/roslyn/issues/17287)\r\n- [Proposal (ref readonly, readonly struct, ref extensions)](https://github.com/dotnet/csharplang/blob/master/proposals/readonly-ref.md)\r\n- [Ref-like types and safety](https://github.com/dotnet/csharplang/blob/master/proposals/span-safety.md), \r\n- [Decisions made](https://github.com/VSadov/csharplang/blob/RefSpanDesignChoices/proposals/RefReadonlySpanDesignChoices.md)\r\n"},{"Id":"8570910703","Type":"IssuesEvent","CreatedAt":"2018-11-12T00:27:40","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31112","RelatedDescription":"Opened issue \"interface generation double bug\" (#31112) at dotnet/roslyn","RelatedBody":"I have a partial class A in a shared project, and partial class A in a c# project. I ask to extract the interface, VS fails.\n\nI copy the sources from the shared project to the c# project, then ask again to generate the interface, it succeeds, but partially: the interface contains all public properties and methods *twice*.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/360383/interface-generation-double-bug.html\nVSTS ticketId: 707584_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"8570897610","Type":"PullRequestEvent","CreatedAt":"2018-11-12T00:20:30","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31111","RelatedDescription":"Opened pull request \"Use the new IBlankLineIndentationService in the string-splitting feature.\" (#31111) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/31096.  Should not be reviewed until that goes in."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8570483611","Type":"PullRequestEvent","CreatedAt":"2018-11-11T20:35:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6557","RelatedDescription":"Opened pull request \"Report type-related intrinsics to RyuJIT\" (#6557) at dotnet/corert","RelatedBody":"We had this disabled because the way we represent runtime types is different from CoreCLR and reporting any of these led to asserts in RyuJIT and bad code.\r\n\r\nThis lets us optimize common patterns such as:\r\n* `typeof(T) == typeof(byte)`\r\n* `foo.GetType() == typeof(Foo)`\r\n\r\nThese patterns are pretty commonly used in high performance code paths, so having actual reflection there is pretty bad. This also lets us generate smaller code because a lot of these can be evaluated at compile time (this makes the ASP.NET WebApi sample in the repo 380 kB smaller).\r\n\r\nRequires an updated RyuJIT, so this won't work until I get the RyuJIT portion in.\r\n\r\nFixes #5180."},{"Id":"8570430523","Type":"IssuesEvent","CreatedAt":"2018-11-11T20:07:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6556","RelatedDescription":"Opened issue \"Bad marshalling for SafeHandle\" (#6556) at dotnet/corert","RelatedBody":"Our checked in multimodule tests hit bad IL while running with CHK RyuJIT (when compiling the framework for multimodule). I think this is the struct marshaler, judging from the method name.\r\n\r\nWe are actually also hitting the same bad IL assert in the WebApi sample, so this might well be one of the stress bugs we have been chasing:\r\n\r\n```\r\n// [S.P.CompilerGenerated]Internal.CompilerGenerated.<Module>.NativeToManaged__SecPkgContext_IssuerListInfoEx(__NativeType__SecPkgContext_IssuerListInfoEx&,SecPkgContext_IssuerListInfoEx&)\r\n.method void NativeToManaged__SecPkgContext_IssuerListInfoEx(valuetype Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx&, valuetype [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx&) cil managed\r\n{\r\n  // Code size: 41\r\n  .maxstack 2\r\n  .locals init (class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle V_0,\r\n      native int V_1,\r\n      class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle V_2,\r\n      uint32 V_3,\r\n      uint32 V_4,\r\n      uint32 V_5)\r\n\r\n  IL_0000:  ldarg.0\r\n  IL_0001:  ldfld       native int Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx::aIssuers\r\n  IL_0006:  stloc.1\r\n  IL_0007:  ldloc.1\r\n  IL_0008:  stloc.0\r\n  IL_0009:  ldloc.0\r\n  IL_000A:  stloc.2\r\n  IL_000B:  ldarg.1\r\n  IL_000C:  ldloc.2\r\n  IL_000D:  stfld       class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx::aIssuers\r\n  IL_0012:  ldarg.0\r\n  IL_0013:  ldfld       uint32 Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx::cIssuers\r\n  IL_0018:  stloc.s     4\r\n  IL_001A:  ldloc.s     4\r\n  IL_001C:  stloc.3\r\n  IL_001D:  ldloc.3\r\n  IL_001E:  stloc.s     5\r\n  IL_0020:  ldarg.1\r\n  IL_0021:  ldloc.s     5\r\n  IL_0023:  stfld       uint32 [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx::cIssuers\r\n  IL_0028:  ret\r\n}\r\n```"},{"Id":"8567472541","Type":"PullRequestEvent","CreatedAt":"2018-11-10T11:48:31","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6555","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#6555) at dotnet/corert","RelatedBody":""},{"Id":"8567471993","Type":"PullRequestEvent","CreatedAt":"2018-11-10T11:48:06","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6555","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#6555) at dotnet/corert","RelatedBody":""},{"Id":"8566968610","Type":"PullRequestEvent","CreatedAt":"2018-11-10T05:11:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6550","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#6550) at dotnet/corert","RelatedBody":"...mostly because I don't want us to forget to pick up the matching JitInterface change from dotnet/coreclr#20814. No JitInterface change this time.\r\n\r\nObject stack allocation doesn't work yet for R2R compilations because we seem to be pattern matching against `ALLOCOBJ  ref`, when in ready to run we have `CALL help ref    HELPER.CORINFO_HELP_READYTORUN_NEW`.\r\n\r\nIt doesn't seem like we need to port the changes in `getClassGClayout` because CoreRT class layout information includes the EEType field in reference types, whereas CoreCLR doesn't."},{"Id":"8566958738","Type":"IssuesEvent","CreatedAt":"2018-11-10T05:03:52","Actor":"gqqnbig","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6554","RelatedDescription":"Opened issue \"System.MissingMethodException : Method 'System.Xml.Serialization.XmlElementAttribute..ctor' not found.\" (#6554) at dotnet/corert","RelatedBody":"## Steps to reproduce:\r\n\r\n1. Create a .NET Core 2.1 Console project,\r\n2. Create a file as the following.\r\n\r\n```\r\nusing System;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar serializer = new XmlSerializer(typeof(C));\r\n\t\t\tvar c = new C(2);\r\n\t\t\tserializer.Serialize(Console.Out, c);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class C\r\n\t{\r\n\t\t[XmlElement(\"Number\",typeof(int))]\r\n\t\tpublic int N { get; set; }\r\n\r\n\t\tpublic C(int n)\r\n\t\t{\r\n\t\t\tN = n;\r\n\t\t}\r\n\r\n\t\tpublic C()\r\n\t\t{\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n3. Compile the project against CoreRT revision 14c335f2547bbcae19ff2cc8adc1c571e4d219fa with command \r\n\r\n> dotnet publish -r win-x64 -c release\r\n> 用于 .NET Core 的 Microsoft (R) 生成引擎版本 15.8.166+gd4e8d81a88\r\n> 版权所有(C) Microsoft Corporation。保留所有权利。\r\n> \r\n> C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\2.1.401\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\n> C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\2.1.401\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\n>   C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj 的还原在 46.24 ms 内完成。\r\n> C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\2.1.401\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\ConsoleApp1.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\n>   ConsoleApp1 -> C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\bin\\release\\netcoreapp2.1\\win-x64\\ConsoleApp1.dll\r\n>   Generating native code\r\n>   ConsoleApp1 -> C:\\Users\\gqqnbig\\source\\repos\\ConsoleApp1\\ConsoleApp1\\bin\\release\\netcoreapp2.1\\win-x64\\publish\\\r\n\r\n4. Run ConsoleApp1.exe\r\n\r\n## What is expected\r\n\r\nConsoleApp1.exe runs without exception.\r\n\r\n## What happens actually\r\n\r\n> ConsoleApp1.exe\r\n> Unhandled Exception: System.InvalidOperationException: There was an error generating the XML document. ---> System.InvalidOperationException: There was an error reflecting type 'ConsoleApp1.C'. ---> System.MissingMethodException: Method 'System.Xml.Serialization.XmlElementAttribute..ctor' not found.\r\n>    at Internal.Reflection.Extensions.NonPortable.CustomAttributeInstantiator.Instantiate(CustomAttributeData) + 0x528\r\n>    at ConsoleApp1!<BaseAddress>+0x201f38\r\n>    at ConsoleApp1!<BaseAddress>+0x207bac\r\n>    at ConsoleApp1!<BaseAddress>+0x7b289\r\n>    at System.Xml.Serialization.XmlAttributes..ctor(ICustomAttributeProvider) + 0xe9\r\n>    at ConsoleApp1!<BaseAddress>+0x17bdfa\r\n>    at ConsoleApp1!<BaseAddress>+0x17e882\r\n>    at ConsoleApp1!<BaseAddress>+0x17dff0\r\n>    at ConsoleApp1!<BaseAddress>+0x17cd85\r\n> \r\n>    --- End of inner exception stack trace ---\r\n>    at ConsoleApp1!<BaseAddress>+0x17ce4e\r\n>    at ConsoleApp1!<BaseAddress>+0x17beb9\r\n>    at System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(Type, XmlRootAttribute, String) + 0x7a\r\n>    at ConsoleApp1!<BaseAddress>+0x188f55\r\n>    at ConsoleApp1!<BaseAddress>+0x188e75\r\n>    at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter, Object, XmlSerializerNamespaces, String, String) + 0xc1\r\n> \r\n>    --- End of inner exception stack trace ---\r\n>    at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter, Object, XmlSerializerNamespaces, String, String) + 0x29a\r\n>    at System.Xml.Serialization.XmlSerializer.Serialize(TextWriter, Object, XmlSerializerNamespaces) + 0x5f\r\n>    at ConsoleApp1.Program.Main(String[]) + 0x66\r\n>    at ConsoleApp1!<BaseAddress>+0x206ba6\r\n> \r\n\r\n\r\nHow do I fix it?"},{"Id":"8566895128","Type":"IssuesEvent","CreatedAt":"2018-11-10T04:12:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6548","RelatedDescription":"Closed issue \"5 million  times of List<T>.Add will cause program hang in GC even memory usage was little\" (#6548) at dotnet/corert","RelatedBody":"5 million times of List<T>.Add will cause program to hang in GC even memory usage was little\r\n\r\n\r\n```\r\n\r\n\t    static void test()\r\n\t    {\r\n\r\n\t\t    List<Test2> test = new List<Test2>();\r\n\r\n\t\t    Test2 t2;\r\n\t\t    t2.y = 11;\r\n\r\n\t\t\tStopwatch stopwatch = new Stopwatch();\r\n\t\t    stopwatch.Start();\r\n\t\t    for (int i = 0; i < 5000000; i++)\r\n\t\t    {\r\n\r\n\t\t\t    //vectorEmplaceBack(vectorFunctions.pVector,&t2);\r\n\t\t\t    test.Add(t2);\r\n\t\t    }\r\n\t\t    stopwatch.Stop();\r\n\t\t    Console.WriteLine(\"c# time:\" + stopwatch.ElapsedMilliseconds);\r\n\r\n\t\t}\r\n```\r\n\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/29968862/48242821-ec060b80-e417-11e8-8bd9-3f7824369efe.png)\r\n\r\n\r\nmemory usage at the time of hang was 60MB in taskmgr\r\n\r\nwas static linked in C++ with x64 release ,however I believe it can reproduce in other cases"},{"Id":"8566699556","Type":"PullRequestEvent","CreatedAt":"2018-11-10T01:57:51","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6553","RelatedDescription":"Opened pull request \"WIP: wasm: add method reference for delegate parameters to pinvokes\" (#6553) at dotnet/corert","RelatedBody":"This change gets the delegate wrapper for the pinvoke added to the dependencies so the function is defined in the LLVM and not just declared.  This would resolve #6525 but, I think, it is subject to the same problem as #6415.  This is the stacktrace from the test included here which is similar:\r\n\r\n```\r\nexception thrown: abort() at jsStackTrace@http://localhost:6931/HelloWasm.js:1059:13\r\nstackTrace@http://localhost:6931/HelloWasm.js:1076:12\r\nabort@http://localhost:6931/HelloWasm.js:7982:44\r\n_abort@http://localhost:6931/HelloWasm.js:5751:7\r\n__Z6AssertPKcS0_jS0_@http://localhost:6931/HelloWasm.wasm:wasm-function[19635]:0x9d23da\r\n_RhGetCommonStubAddress@http://localhost:6931/HelloWasm.wasm:wasm-function[21362]:0xad0a87\r\n_S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal__AllocateThunk@http://localhost:6931/HelloWasm.wasm:wasm-function[2087]:0x15cc1b\r\n_S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2_CreateValueCallback_S_P_CoreLib_System_Delegate__S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal_PInvokeDelegateThunk___InvokeOpenStaticThunk@http://localhost:6931/HelloWasm.wasm:wasm-function[2088]:0x15cf57\r\n_S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2_CreateValueCallback_S_P_CoreLib_System_Delegate__S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal_PInvokeDelegateThunk___Invoke@http://localhost:6931/HelloWasm.wasm:wasm-function[3097]:0x1c76e7\r\n_S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2_S_P_CoreLib_System_Delegate__S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal_PInvokeDelegateThunk___GetValueLocked@http://localhost:6931/HelloWasm.wasm:wasm-function[2091]:0x15d403\r\n_S_P_CoreLib_System_Runtime_CompilerServices_ConditionalWeakTable_2_S_P_CoreLib_System_Delegate__S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal_PInvokeDelegateThunk___GetValue@http://localhost:6931/HelloWasm.wasm:wasm-function[2089]:0x15d173\r\n_S_P_CoreLib_System_Runtime_InteropServices_PInvokeMarshal__GetFunctionPointerForDelegate@http://localhost:6931/HelloWasm.wasm:wasm-function[1351]:0x117a5e\r\n_S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetFunctionPointerForDelegate@http://localhost:6931/HelloWasm.wasm:wasm-function[1349]:0x11765d\r\n_HelloWasm_Program__emscripten_set_main_loop@http://localhost:6931/HelloWasm.wasm:wasm-function[682]:0xd8c04\r\n_HelloWasm_Program__TestRegisterOfNativeCallback@http://localhost:6931/HelloWasm.wasm:wasm-function[675]:0xd887f\r\n_HelloWasm_Program__Main@http://localhost:6931/HelloWasm.wasm:wasm-function[344]:0xb2eb0\r\n_HelloWasm__Module___MainMethodWrapper@http://localhost:6931/HelloWasm.wasm:wasm-function[338]:0xaf2f2\r\n_StartupCodeMain@http://localhost:6931/HelloWasm.wasm:wasm-function[327]:0xaee49\r\n___managed__Main@http://localhost:6931/HelloWasm.wasm:wasm-function[19633]:0x9d238d\r\n_main@http://localhost:6931/HelloWasm.wasm:wasm-function[21492]:0xad74c0\r\nModule._main@http://localhost:6931/HelloWasm.js:7546:10\r\ncallMain@http://localhost:6931/HelloWasm.js:7855:15\r\ndoRun@http://localhost:6931/HelloWasm.js:7913:42\r\nrun/<@http://localhost:6931/HelloWasm.js:7924:7\r\n```\r\n\r\n@morganbr this also gets me closer to creating a PR for #5842 as it removes the undefined function so if you think its worthwhile it could be merged, without the test?"},{"Id":"8566059048","Type":"PullRequestEvent","CreatedAt":"2018-11-09T22:09:58","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6549","RelatedDescription":"Merged pull request \"Add WASM test for RVA static fields\" (#6549) at dotnet/corert","RelatedBody":"As requested in https://github.com/dotnet/corert/pull/6531#issuecomment-437121169."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1055215025982398465","CreatedAt":"2018-10-24T21:50:41+00:00","UserScreenname":"dotnet","Text":"Bringing .NET application performance analysis to Linux https://t.co/jivjRwPVBM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":61,"RawContent":null},{"Id":"1054879096981704704","CreatedAt":"2018-10-23T23:35:50+00:00","UserScreenname":"dotnet","Text":".NET Core Source Code Analysis with Intel® VTune™ Amplifier https://t.co/2I1YLWYbKb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":27,"RawContent":null},{"Id":"1054829662738608128","CreatedAt":"2018-10-23T20:19:24+00:00","UserScreenname":"dotnet","Text":"Call For Participation: .NET and TypeScript at FOSDEM conference https://t.co/xjDh49lbko","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2018-11-12T05:30:29.8378079Z","RunDurationInMilliseconds":7116}