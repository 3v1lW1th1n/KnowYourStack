{"Data":{"Blog":{"FeedItems":[{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null},{"Title":"Android Build Performance and Reliability","PublishedOn":"2018-11-21T16:45:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a Xamarin developer working on Android apps, you may be well-aware of two issues that slow down your everyday development; build times and the correctness of the build. If you aren&#8217;t sure...","Href":"https://blog.xamarin.com/android-build-performance-reliability/","RawContent":null},{"Title":"Xamarin.Forms 3.4.0: Say Hello to ImageButton","PublishedOn":"2018-11-15T19:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of our long-term goal to have more frequent releases, we’re pleased to announce the release of Xamarin.Forms 3.4.0. As always, this release contains even more bug fixes and most notably,...","Href":"https://blog.xamarin.com/xamarin-forms-3-4-0-say-hello-to-imagebutton/","RawContent":null},{"Title":"Twitch Workshop: Build Your First Mobile App with C#, Xamarin, and the Cloud","PublishedOn":"2018-11-14T18:45:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you been clamoring to get started with mobile development using C# and Xamarin? What if you could attend a full day workshop from the comfort of your house or in a conference room with some...","Href":"https://blog.xamarin.com/twitch-workshop-build-your-first-mobile-app/","RawContent":null},{"Title":"Gorilla Player: A Tool to Craft Beautiful XAML UIs for Xamarin.Forms","PublishedOn":"2018-11-08T21:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Leonardo Rodríguez Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UIKit and Gorilla Player. UXDivers specializes in designing and coding engaging...","Href":"https://blog.xamarin.com/gorilla-player-a-tool-to-craft-beautiful-xaml-uis-for-xamarin-forms/","RawContent":null},{"Title":"Xamarin and .NET Community Events in November","PublishedOn":"2018-11-01T16:01:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-november/","RawContent":null},{"Title":"Xamarin.Forms and Zeplin: Speed Up Your Design to Development Process","PublishedOn":"2018-10-23T18:53:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Arnstein Johansen, a Norwegian software engineer interested in mobile and web development. He works for Itema AS, a consultant agency in Trondheim, Norway and a...","Href":"https://blog.xamarin.com/xamarin-forms-and-zeplin-speed-up-your-design-to-development-process/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8706569741","Type":"PullRequestEvent","CreatedAt":"2018-12-06T03:28:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2494","RelatedDescription":"Opened pull request \"Bump to grendello/LibZipSharp/master@ffffd815\" (#2494) at xamarin/xamarin-android","RelatedBody":"Preparation for branch harmonization."},{"Id":"8706561260","Type":"PullRequestEvent","CreatedAt":"2018-12-06T03:25:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2493","RelatedDescription":"Opened pull request \"Bump to xamarin/Java.Interop/master@2e682251\" (#2493) at xamarin/xamarin-android","RelatedBody":"Fixes a `NullReferenceException` encountered when binding AndroidX."},{"Id":"8706462309","Type":"PullRequestEvent","CreatedAt":"2018-12-06T02:56:03","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2048","RelatedDescription":"Merged pull request \"Bump to mono:2018-08\" (#2048) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8706375927","Type":"PullRequestEvent","CreatedAt":"2018-12-06T02:30:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2492","RelatedDescription":"Merged pull request \"[samples] use $(DebugType) portable\" (#2492) at xamarin/xamarin-android","RelatedBody":"In 1fb7983, a new `HelloLibrary.csproj` was added, but it had some\r\nsettings that cause `pdb2mdb` to run:\r\n\r\n    <DebugType>full</DebugType>\r\n    ...\r\n    <DebugType>pdbonly</DebugType>\r\n\r\nI switched the \"Hello World\" projects to use `$(DebugType)` `portable`,\r\nso that portable pdb files are always generated as part of their\r\nbuild.\r\n\r\nThis way when profiling builds on Windows, I don't have to account for\r\nthe `<ConvertDebuggingFiles/>` MSBuild task taking time."},{"Id":"8706371453","Type":"PullRequestEvent","CreatedAt":"2018-12-06T02:29:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2491","RelatedDescription":"Merged pull request \"[android-toolchain] less http in parallel\" (#2491) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2255858\r\n\r\nOn VSTS, I've been occasionally seeing:\r\n\r\n    android-toolchain.targets(47,5): Error : Unable to download URL `https://dl.google.com/android/repository/android-ndk-r14b-windows-x86_64.zip` to `C:\\Users\\dlab14\\android-archives\\android-ndk-r14b-windows-x86_64.zip`: Exception of type 'System.OutOfMemoryException' was thrown.\r\n    android-toolchain.targets(47,5): Error : Exception of type 'System.OutOfMemoryException' was thrown.\r\n\r\nThis is likely one of the larger files we download.\r\n\r\nBut I think we have correct usage of `HttpClient` here:\r\n\r\n    using (var r = await client.GetAsync (uri, source.Token)) {\r\n        r.EnsureSuccessStatusCode ();\r\n        using (var s = await r.Content.ReadAsStreamAsync ())\r\n        using (var o = File.OpenWrite (tempPath)) {\r\n            await s.CopyToAsync (o, 4096, source.Token);\r\n        }\r\n    }\r\n\r\nSo I believe we just have too many HTTP requests in-flight at once.\r\n\r\nLooking at `android-toolchain.targets`, it looks like we were running\r\nall the Android SDK + NDK requests in parallel.\r\n\r\nI reworked this to run the SDK requests, then the NDK requests in a\r\nsecond step.\r\n\r\nHopefully, this will improve the OOM we are getting."},{"Id":"8706364504","Type":"PullRequestEvent","CreatedAt":"2018-12-06T02:27:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2490","RelatedDescription":"Merged pull request \"Bump to xamarin/xamarin-android-tools/master@f05c0aaa\" (#2490) at xamarin/xamarin-android","RelatedBody":"Harmonization before branching."},{"Id":"8705423860","Type":"IssuesEvent","CreatedAt":"2018-12-05T22:22:25","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2460","RelatedDescription":"Reopened issue \"xamarin nuget with  symbols do not debug work unless source is in same location as original  build source path\" (#2460) at xamarin/xamarin-android","RelatedBody":"Hi\r\n\r\nWhen I create our own nuget packages I have GeneratePackageOnBuild and include symbols (portable) and include source for the .net stanadr projects creating the nugets.\r\n\r\nThe symbols and debugging works with \"normal\" .net apps., however, they are not debuggable in Xamavin project. With that said the symbols will work if I replicate the build path (on the service running the agent pool and MSBuild) to be on the same location on my local machine and add the source.\r\n\r\nIt does not matter what I enter in  VS2017 15.9.2 Options->Debugger->Symbols\r\nThe absolute path from where the package was built, is required locally and the source code should be in this location locally also.\r\n\r\n\r\nAgain. we need to have the source code in the same location/path as it is on the build server. (this is difficult as each build has its own id) and it will work.\r\nIt does not matter if i index and do a seperate pack on the build server. Or whatever i do. \r\n\r\nIt just appears that the paths must be equal.\r\n\r\nAny ideas?\r\n\r\n\r\n\r\n"},{"Id":"8705365079","Type":"PullRequestEvent","CreatedAt":"2018-12-05T22:10:37","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2492","RelatedDescription":"Opened pull request \"[samples] use $(DebugType) portable\" (#2492) at xamarin/xamarin-android","RelatedBody":"In 1fb7983, a new `HelloLibrary.csproj` was added, but it had some\r\nsettings that cause `pdb2mdb` to run:\r\n\r\n    <DebugType>full</DebugType>\r\n    ...\r\n    <DebugType>pdbonly</DebugType>\r\n\r\nI switched the \"Hello World\" projects to use `$(DebugType)` `portable`,\r\nso that portable pdb files are always generated as part of their\r\nbuild.\r\n\r\nThis way when profiling builds on Windows, I don't have to account for\r\nthe `<ConvertDebuggingFiles/>` MSBuild task taking time."},{"Id":"8705267017","Type":"IssuesEvent","CreatedAt":"2018-12-05T21:52:33","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2460","RelatedDescription":"Closed issue \"xamarin nuget with  symbols do not debug work unless source is in same location as original  build source path\" (#2460) at xamarin/xamarin-android","RelatedBody":"Hi\r\n\r\nWhen I create our own nuget packages I have GeneratePackageOnBuild and include symbols (portable) and include source for the .net stanadr projects creating the nugets.\r\n\r\nThe symbols and debugging works with \"normal\" .net apps., however, they are not debuggable in Xamavin project. With that said the symbols will work if I replicate the build path (on the service running the agent pool and MSBuild) to be on the same location on my local machine and add the source.\r\n\r\nIt does not matter what I enter in  VS2017 15.9.2 Options->Debugger->Symbols\r\nThe absolute path from where the package was built, is required locally and the source code should be in this location locally also.\r\n\r\n\r\nAgain. we need to have the source code in the same location/path as it is on the build server. (this is difficult as each build has its own id) and it will work.\r\nIt does not matter if i index and do a seperate pack on the build server. Or whatever i do. \r\n\r\nIt just appears that the paths must be equal.\r\n\r\nAny ideas?\r\n\r\n\r\n\r\n"},{"Id":"8705232507","Type":"PullRequestEvent","CreatedAt":"2018-12-05T21:46:07","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2474","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] minimal Reference Assemblies support\" (#2474) at xamarin/xamarin-android","RelatedBody":"This is the beginning of our support for MSBuild/Roslyn \"Reference\r\nAssemblies\".\r\n\r\nAdding the following to a `csproj` file:\r\n\r\n    <ProduceReferenceAssembly>True</ProduceReferenceAssembly>\r\n\r\nCauses a `bin\\Debug\\ref\\MyLibrary.dll` to exist alongside\r\n`bin\\Debug\\MyLibrary.dll`.\r\n\r\nTwo item groups, `@(ReferenceCopyLocalPaths)` and `@(ReferencePath)`\r\nwill have new `%(ReferenceAssembly)` metadata:\r\n\r\n    bin\\Debug\\MyLibrary.dll\r\n        ReferenceAssembly = C:\\full\\path\\to\\bin\\Debug\\ref\\MyLibrary.dll\r\n\r\nIf an assembly does *not* include a reference assembly, it will still\r\nmaintain `%(ReferenceAssembly)` metadata pointing to itself:\r\n\r\n    bin\\Debug\\OtherLibrary.dll\r\n        ReferenceAssembly = C:\\full\\path\\to\\bin\\Debug\\OtherLibrary.dll\r\n\r\nIn some cases this metadata might not be there, such as using a path\r\nas input to `ResolveAssemblies` (`$(OutDir)$(TargetFileName)`), so our\r\n`ResolveAssemblies` MSBuild task should produce the value if it does\r\nnot exist.\r\n\r\n## Changes ##\r\n\r\nThe biggest change here is to rework `ResolveAssemblies` so that it\r\npreserves item metadata. The metadata was getting lost in various\r\nways:\r\n\r\n- Use of `%(ReferencePath.Identity)` instead of `@(ReferencePath)`.\r\n- Any new `TaskItem` instances created should use the ctor taking in\r\n  an existing `ITaskItem`. This preserves the metadata from the\r\n  original item.\r\n\r\nWe also needed to make some changes to support `%(ReferenceAssembly)`:\r\n\r\n- New `TaskItem` objects created by a file path should set\r\n  `%(ReferenceAssembly)`.\r\n- We should check if `%(ReferenceAssembly)` is missing, and set it\r\n  where appropriate.\r\n\r\nI looked into reworking `_GenerateJavaStubs` so it can be skipped\r\nwhen a reference assembly didn't change.\r\n\r\nI merely changed a single input: `@(_ResolvedAssemblies)` to\r\n`@(_ResolvedAssemblies->'%(ReferenceAssembly)')`.\r\n\r\nUnfortunately, this would break! A developer could write this\r\ncompletely valid C# class:\r\n\r\n    internal class Example : Java.Lang.Object { }\r\n\r\nHowever, since we have preserved item metadata, we can now use\r\n`%(ReferenceAssembly)` throughout the build. We can take advantage of\r\nit in the future.\r\n\r\nI added some documentation about what I found out with MSBuild\r\n\"Reference Assembly\" support, in general. I also added a unit test\r\nverifying which targets skip when `$(ProduceReferenceAssembly)` is set\r\nin a library project.\r\n\r\nI also reworked our Xamarin.Forms integration project so that it is\r\nnetstandard instead of a shared project.\r\n\r\nThis will help us test `$(ProduceReference)` assembly, and also has a\r\nmuch simpler project file!\r\n\r\nOther changes:\r\n\r\n- I let VS Windows fixup the `Xamarin.Android-Tests.sln file`. It\r\n  looks like there were a few mismatched guids and other things.\r\n- We did not have XamlC enabled:\r\n  `[assembly: XamlCompilation (XamlCompilationOptions.Compile)]`\r\n  this will greatly improve startup times!\r\n- We will need to call `/t:Restore` on the Xamarin.Forms netstandard\r\n  project now."},{"Id":"8705228301","Type":"PullRequestEvent","CreatedAt":"2018-12-05T21:45:22","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2491","RelatedDescription":"Opened pull request \"[android-toolchain] less http in parallel\" (#2491) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2255858\r\n\r\nOn VSTS, I've been occasionally seeing:\r\n\r\n    android-toolchain.targets(47,5): Error : Unable to download URL `https://dl.google.com/android/repository/android-ndk-r14b-windows-x86_64.zip` to `C:\\Users\\dlab14\\android-archives\\android-ndk-r14b-windows-x86_64.zip`: Exception of type 'System.OutOfMemoryException' was thrown.\r\n    android-toolchain.targets(47,5): Error : Exception of type 'System.OutOfMemoryException' was thrown.\r\n\r\nThis is likely one of the larger files we download.\r\n\r\nBut I think we have correct usage of `HttpClient` here:\r\n\r\n    using (var r = await client.GetAsync (uri, source.Token)) {\r\n        r.EnsureSuccessStatusCode ();\r\n        using (var s = await r.Content.ReadAsStreamAsync ())\r\n        using (var o = File.OpenWrite (tempPath)) {\r\n            await s.CopyToAsync (o, 4096, source.Token);\r\n        }\r\n    }\r\n\r\nSo I believe we just have too many HTTP requests in-flight at once.\r\n\r\nLooking at `android-toolchain.targets`, it looks like we were running\r\nall the Android SDK + NDK requests in parallel.\r\n\r\nI reworked this to run the SDK requests, then the NDK requests in a\r\nsecond step.\r\n\r\nHopefully, this will improve the OOM we are getting."},{"Id":"8704980428","Type":"PullRequestEvent","CreatedAt":"2018-12-05T21:00:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2490","RelatedDescription":"Opened pull request \"Bump to xamarin/xamarin-android-tools/master@f05c0aaa\" (#2490) at xamarin/xamarin-android","RelatedBody":"Harmonization before branching."},{"Id":"8704930445","Type":"IssuesEvent","CreatedAt":"2018-12-05T20:51:27","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2489","RelatedDescription":"Opened issue \"Deployment is failing intermittently during InstallPackageAssemblies\" (#2489) at xamarin/xamarin-android","RelatedBody":"I'm seeing deployment fail pretty consistently on a first deployment attempt, and I'm seemingly only able to work around it by cleaning and re-deploying. This appears to be a regression in relatively recent d16.0  builds.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Android project and try to deploy it to device.\r\n2. You may need to clean and redeploy, or otherwise work from an \"incremental\" state in order to reproduce, however as mentioned I am seeing this pretty consistently on \"Clean\" deployment attempts.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nDeployment attempts succeed every time.\r\n\r\n### Actual Behavior\r\nDeployment intermittently fails with\r\n```MSB4018: The \"InstallPackageAssemblies\" task failed unexpectedly.\r\nSystem.MissingMethodException: Method not found: 'Void Xamarin.AndroidTools.AndroidDeploySession.set_FastDevTypemapsProvider(System.Func`1<System.Collections.Generic.IEnumerable`1<System.String>>)'.\r\n   at Xamarin.Android.Tasks.InstallPackageAssemblies.RunTask()\r\n   at Xamarin.Android.Tasks.InstallPackageAssemblies.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\n### Version Information\r\nXamarin.Android SDK   9.1.199.38 (HEAD/00f9c37c) installed on top of VS2017 15.9\r\nMono: mono/mono/2018-08@23f2024af80\r\n    Java.Interop: xamarin/java.interop/master@6dd6f16\r\n    LibZipSharp: grendello/LibZipSharp/master@d695149\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    MXE: xamarin/mxe/xamarin@b9cbb535\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.25.2@4ea4c69\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d16-0-p2@9e78d6e\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.githubusercontent.com/pjcollins/9a0737e48f1ccbee5a898583860ab839/raw/ec98364a9f77b8bdcca88891d057016e234aeb93/gistfile1.txt\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8705817556","Type":"IssuesEvent","CreatedAt":"2018-12-05T23:51:52","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4652","RelatedDescription":"Opened issue \"[iOS,Android] TapGestureRecognizer doesn't work for first cells of CollectionView\" (#4652) at xamarin/Xamarin.Forms","RelatedBody":"\r\n### Description\r\n\r\nSince there's no SelectedItem, trying to add a TapGesture to my Item so I can navigate. \r\nThe command for the gesture is only executed after I scroll and tap a \"fresh\" row.. on the first items if I tap the command is not executed. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a gesture to your ItemTemplate\r\n```\r\n<DataTemplate xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"SCE.Templates.PostListItemTEmplate\" xmlns:ffimageloading=\"clr-namespace:FFImageLoading.Forms;assembly=FFImageLoading.Forms\">\r\n    <Grid HeightRequest=\"200\" HorizontalOptions=\"FillAndExpand\">\r\n        <Grid.GestureRecognizers>\r\n            <TapGestureRecognizer Command=\"{Binding Command}\" CommandParameter=\"{Binding .}\" />\r\n        </Grid.GestureRecognizers>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition>\r\n            </RowDefinition>\r\n            <RowDefinition Height=\"50\">\r\n            </RowDefinition>\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width=\"*\" />\r\n        </Grid.ColumnDefinitions>\r\n        <ffimageloading:CachedImage InputTransparent=\"true\" Grid.RowSpan=\"2\" DownsampleToViewSize=\"true\" DownsampleHeight=\"200\" Source=\"{Binding Image}\" Aspect=\"AspectFill\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"FillAndExpand\" />\r\n        <ContentView Grid.Row=\"1\" InputTransparent=\"true\"  Padding=\"10\" VerticalOptions=\"EndAndExpand\" BackgroundColor=\"#7F000000\">\r\n            <Label Text=\"{Binding Title}\" FontAttributes=\"Bold\" FontSize=\"20\" TextColor=\"White\" />\r\n        </ContentView>\r\n    </Grid>\r\n</DataTemplate>\r\n```\r\n2. Bind some items to your CollectionView\r\n```\r\n<CollectionView ItemsSource=\"{Binding Posts}\" ItemTemplate=\"{StaticResource postListItemTemplate}\" />\r\n```\r\n3. Create a list of Posts and set a Command for each with a debug action. \r\n4. Run sample and click the 1 st item.\r\n\r\n### Expected Behavior\r\n\r\nCommand with debug action should execute for 1st cell.\r\n\r\n### Actual Behavior\r\n\r\nCommand doesn't execute.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.0-pre\r\n- iOS, Android\r\n"},{"Id":"8705802877","Type":"PullRequestEvent","CreatedAt":"2018-12-05T23:48:00","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4651","RelatedDescription":"Opened pull request \"Implement Android single selection in CollectionView\" (#4651) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nImplement single item selection for the CollectionView on Android.\r\n\r\n### Issues Resolved ### \r\n\r\nNone\r\n\r\n### API Changes ###\r\nAdded:\r\n\r\n- SelectionMode SelectableItemsView.SelectionMode\r\n- object SelectableItemsView.SelectedItem\r\n- ICommand SelectableItemsView.SelectionChangedCommand\r\n- object SelectableItemsView.SelectionChangedCommandParameter\r\n- event EventHandler<SelectionChangedEventArgs> SelectionChanged\r\n- enum SelectionMode \r\n- class SelectionChangedEventArgs\r\n\r\n### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nIn Control Gallery, navigate to CollectionView Gallery -> Selection Galleries\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8704616515","Type":"IssuesEvent","CreatedAt":"2018-12-05T19:54:38","Actor":"praeclarum","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5235","RelatedDescription":"Opened issue \"NSStringDrawing.DrawAtPoint checks for UI thread but shouldn't\" (#5235) at xamarin/xamarin-macios","RelatedBody":"Like #5234, NSGraphics functionality works on background threads.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a background thread\r\n2. `\"Hello World\".DrawAtPoint (new CGPoint (0, 0), attributes);`\r\n\r\n### Expected Behavior\r\n\r\nText is drawn.\r\n\r\n### Actual Behavior\r\n\r\nThread consistency exception is thrown.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n\r\n```\r\n"},{"Id":"8704590136","Type":"IssuesEvent","CreatedAt":"2018-12-05T19:50:07","Actor":"praeclarum","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5234","RelatedDescription":"Opened issue \"NSBezierPath should not check for UI thread\" (#5234) at xamarin/xamarin-macios","RelatedBody":"NSBezierPaths are used throughout Cocoa for rendering on background threads in addition to foreground. Currently they throw when used in a background thread. This is wrong.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a background thread\r\n2. `NSBezierPath.FromOvalInRect (new CGRect (0, 0, 100, 100))`\r\n\r\n### Expected Behavior\r\n\r\nPath is created.\r\n\r\n### Actual Behavior\r\n\r\nUI thread consistency exception is thrown.\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n```\r\n"},{"Id":"8704574228","Type":"IssuesEvent","CreatedAt":"2018-12-05T19:47:22","Actor":"praeclarum","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5233","RelatedDescription":"Opened issue \"NSFont FromFontName should not check for UI thread\" (#5233) at xamarin/xamarin-macios","RelatedBody":"NSFont FromFontName/fontWithName:size: should not check for the UI thread since NSFonts are used throughout the APIs for non-UI tasks. Such things include text rendering with NSGraphics, SceneKit, and just general font playing around.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a background thread\r\n2. Call NSFont.FromFontName (\"Helvetica\", 10);\r\n\r\n### Expected Behavior\r\n\r\nEverything is OK, fonts are allowed on background threads.\r\n\r\n### Actual Behavior\r\n\r\nEnsureUIThread throws an exception\r\n\r\n### Environment\r\n\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.7 (build 1868)\r\nInstallation UUID: 4ba352e1-73e8-4dab-a9db-28012ca05af8\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000221\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.16.0.221 (2018-06/b63e5378e38) (64-bit)\r\n\tPackage version: 516000221\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.7.0.5148\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.2\r\n\t2.1.0-preview2-26406-04\r\n\t2.0.3\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Versions:\r\n\t2.1.302\r\n\t2.1.300-preview2-008530\r\n\t2.0.3\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: \r\nBuild date: 2018-11-21 00:03:25-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.1.11 (Visual Studio Enterprise)\r\nHash: 5ef73d34\r\nBranch: d15-9\r\nBuild date: 2018-11-21 00:03:24-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.38 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/fak/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.0 (API level 24)\r\n\t\t7.1 (API level 25)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 26.0.2\r\nSDK Build Tools Version: 26.0.3\r\n\r\nJava SDK: /Users/fak/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001868\r\nGit revision: 8bcdfa96d67c8c88dc45728cc968a2f84b55322f\r\nBuild date: 2018-11-22 12:19:29+00\r\nBuild branch: release-7.7\r\nXamarin extensions: d66dbedcda237cd9b546abfecfeecafba6f8e3cb\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed extensions ===\r\n\r\nMSBuild Editor 2.1.0\r\n\r\n```\r\n"},{"Id":"8703360899","Type":"PullRequestEvent","CreatedAt":"2018-12-05T16:28:35","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5205","RelatedDescription":"Merged pull request \"[d15-9] Bump maccore to head of d15-9 branch\" (#5205) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":35,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":35,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":15,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":94,"FavoriteCount":52,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":44,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":180,"FavoriteCount":104,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":17,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":60,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":30,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":20,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":33,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":32,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":200,"FavoriteCount":111,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":56,"RawContent":null}]}},"RunOn":"2018-12-06T05:31:24.1433861Z","RunDurationInMilliseconds":4409}