{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7416679276","Type":"IssuesEvent","CreatedAt":"2018-03-22T02:39:20","Actor":"qfcolin","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2987","RelatedDescription":"Opened issue \"Using IDataProtector to decrypt jwt/bearer tokens\" (#2987) at aspnet/Home","RelatedBody":"Hi,\r\nI have a question relating to aspnet core 2.1.\r\nI use the same key to encrypt the data between services  as I do to encrypt my auth bearer tokens. I'm hoping to wire up jwt authentication to use dataprotector to decrypt the tokens automatically so I can access the claims and User.Identity. Something like the code sample below :\r\n\r\n`\r\nservices.AddDataProtection()\r\n                    .SetApplicationName(\"MyProtector\")\r\n                    .PersistKeysToAzureBlobStorage(new Uri(blobStorageUrl));\r\n\r\nvar **protector** = provider.CreateProtector(\"MyProtector\");\r\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n        .AddJwtBearer(options =>\r\n        {\r\n          options.TokenValidationParameters = new TokenValidationParameters\r\n          {\r\n            ValidateIssuer = true,\r\n            ValidateAudience = true,\r\n            ValidateLifetime = true,\r\n            ValidateIssuerSigningKey = true,\r\n            ValidIssuer = Configuration[\"Jwt:Issuer\"],\r\n            ValidAudience = Configuration[\"Jwt:Issuer\"],\r\n            IssuerSigningKey = **protector**\r\n          };\r\n        });\r\n`\r\nIs there any way to do this? If not what would be the alternative recommendation? Create a middleware and decrypt the tokens manually?\r\nAny advice appreciated,\r\nThanks,\r\nColin"},{"Id":"7416058052","Type":"IssuesEvent","CreatedAt":"2018-03-21T23:08:20","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2866","RelatedDescription":"Closed issue \"Broken tests on ASPNETCI-A-116: EnsureCreateHttpsCertificate_CreatesACertificate_WhenThereAreNoHttpsCertificates\" (#2866) at aspnet/Home","RelatedBody":"aspnetci-a-116 is currently disabled because it fails the certificate tests. @javiercn will investigate and re-enable when he's fixed it."},{"Id":"7415367274","Type":"IssuesEvent","CreatedAt":"2018-03-21T20:30:24","Actor":"gitfortee","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2986","RelatedDescription":"Opened issue \"Server side session state in web api - is it a good practice.? particularly if you want your application to be scalable.?\" (#2986) at aspnet/Home","RelatedBody":"Hi, \r\n\r\nOur team is writing an Angular + Dotnet Core 2.0 Web API project. We are expecting this application to scale rapidly in the near future and therefore have some questions below:\r\n\r\nIs maintaining server side state using sessions in a web api project a good practice? I understand this is not how REST works however would like to find out if maintaining server side state would benefit my application. We are expecting this application to scale fast in the near feature. \r\n\r\nCan someone help me with how to benchmark and find out numbers to validate our choice? - be it a REST ful approach where we send state with each request or persist session state at server and minimize request payload and database trips..? I don't know where to start hence seeking some guidance.\r\n"},{"Id":"7413448690","Type":"IssuesEvent","CreatedAt":"2018-03-21T15:03:46","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2984","RelatedDescription":"Closed issue \"Download file from server\" (#2984) at aspnet/Home","RelatedBody":"how to download a excel file from server after Ajax success callback?"},{"Id":"7412934220","Type":"IssuesEvent","CreatedAt":"2018-03-21T13:46:18","Actor":"Hsinky","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2985","RelatedDescription":"Opened issue \"IE浏览器无法保存身份验证信息\" (#2985) at aspnet/Home","RelatedBody":"asp.net core 2.0.6存储身份验证信息时无效，但是谷歌或火狐是正常的，如下是我的代码\r\nIN IE，“HttpContext.SignInAsync” can't save cookie,bug,chrome or firefox is normal,please me,thanks，code:\r\n![image](https://user-images.githubusercontent.com/10111222/37713246-3d2abd5e-2d51-11e8-864d-4f746427ac96.png)\r\n"},{"Id":"7411261394","Type":"IssuesEvent","CreatedAt":"2018-03-21T07:57:01","Actor":"pethumishara","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2984","RelatedDescription":"Opened issue \"Download file from server\" (#2984) at aspnet/Home","RelatedBody":"how to download a excel file from server after Ajax success callback?"},{"Id":"7409791117","Type":"IssuesEvent","CreatedAt":"2018-03-20T22:41:04","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2982","RelatedDescription":"Opened issue \"Remove temporary breaking change listings\" (#2982) at aspnet/Home","RelatedBody":"The following breaking changes are listed only because of aspnet/BuildTools#615:\r\n```\r\n[\r\n    {\r\n        \"TypeId\": \"public class Microsoft.Extensions.DiagnosticAdapter.ProxyDiagnosticSourceMethodAdapter : Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter\",\r\n        \"Kind\": \"Removal\"\r\n    },\r\n    {\r\n        \"TypeId\": \"public interface Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter\",\r\n        \"Kind\": \"Removal\"\r\n    },\r\n    {\r\n        \"TypeId\": \"public class Microsoft.Extensions.DiagnosticAdapter.DiagnosticSourceAdapter : System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>\",\r\n        \"MemberId\": \"public System.Boolean Write(System.String diagnosticName, System.Object arg1, System.Object arg2 = null)\",\r\n        \"Kind\": \"Removal\"\r\n    }\r\n]\r\n```\r\n\r\nThey should be removed once it is resolved."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7416659397","Type":"PullRequestEvent","CreatedAt":"2018-03-22T02:32:21","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1683","RelatedDescription":"Opened pull request \"[WIP] Message writing optimization\" (#1683) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1633\r\n\r\n* Adds a write-only stream backed by pooled arrays\r\n* Adds a write-only stream into `IBufferWriter<byte>`\r\n\r\nI'm having trouble running dotnetbenchmark so I don't have numbers yet.\r\n\r\nPotential further improvements:\r\n* IConnection exposes Output so we can write directly to output instead of to an array then pass the array to the connection\r\n* When broadcasting messages, instead of calling ToArray to get an array sized exactly to the message from the memory stream we could get the raw buffer and write using that to clients. Need to make sure the buffer is returned to the pool after writing"},{"Id":"7416148668","Type":"IssuesEvent","CreatedAt":"2018-03-21T23:35:44","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1317","RelatedDescription":"Closed issue \"Detect availability of transport dependencies on client and server and disable them automatically\" (#1317) at aspnet/SignalR","RelatedBody":"We should consider how to detect WebSocket availability on the server and automatically disable the transport when the server can't support WebSockets.\r\n\r\nThis would depend on aspnet/Hosting#1241 since we can't tell if the server will support it from the application without detecting the specific name of the server (and OS version, etc.)\r\n\r\nWe should also do similar detection on the TS client, detecting `WebSocket` and `EventSource` types. In the .NET client we should detect Windows 7 (non-`netcoreapp2.1`) where `ClientWebSocket` will fail."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7417068931","Type":"IssuesEvent","CreatedAt":"2018-03-22T05:07:52","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7525","RelatedDescription":"Opened issue \"ApiDescriptionProvider doesn't handle task-likes\" (#7525) at aspnet/Mvc","RelatedBody":"`DefaultApiDescriptionProvider` is responsible for populating the basic API Explorer data based on the method signature. However, we don't handle task-like return types here, and just handle `Task` and `Task<T>`\r\n\r\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.ApiExplorer/DefaultApiDescriptionProvider.cs#L487\r\n\r\nArbitrary task-like types are supported by MVC's action invoker, but that doesn't work in API Explorer."},{"Id":"7416212606","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:56:18","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7524","RelatedDescription":"Opened pull request \"Cleanup ApplicationPartFactory\" (#7524) at aspnet/Mvc","RelatedBody":""},{"Id":"7415956284","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:40:17","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7427","RelatedDescription":"Merged pull request \"ApplicationPartManager - the works\" (#7427) at aspnet/Mvc","RelatedBody":""}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7416213770","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:56:41","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1704","RelatedDescription":"Opened pull request \"ApplicationPartFactory part 3\" (#1704) at aspnet/Identity","RelatedBody":""},{"Id":"7415965028","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:42:45","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1703","RelatedDescription":"Merged pull request \"Release/2.1\" (#1703) at aspnet/Identity","RelatedBody":""},{"Id":"7415964626","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:42:38","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1703","RelatedDescription":"Opened pull request \"Release/2.1\" (#1703) at aspnet/Identity","RelatedBody":""},{"Id":"7415963504","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:42:18","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1701","RelatedDescription":"Merged pull request \"React to application part changes\" (#1701) at aspnet/Identity","RelatedBody":""},{"Id":"7415098761","Type":"IssuesEvent","CreatedAt":"2018-03-21T19:37:16","Actor":"kodithuwa","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1702","RelatedDescription":"Opened issue \"Maximum limit of Role Claims\" (#1702) at aspnet/Identity","RelatedBody":"I have used Role Claims for authorize our system, but, problem is role claim table growing rapidly and sometimes there are more than 200 claims for some roles. and it has given error (HTTP Error 400. The size of the request headers is too long.) when a user going to login the site. HOW CAN I FIX THIS ????"},{"Id":"7414533786","Type":"PullRequestEvent","CreatedAt":"2018-03-21T17:52:16","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1681","RelatedDescription":"Merged pull request \"Create or update baselines to match 2.0\" (#1681) at aspnet/Identity","RelatedBody":null},{"Id":"7414417567","Type":"PullRequestEvent","CreatedAt":"2018-03-21T17:32:32","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1680","RelatedDescription":"Closed pull request \"Use ApplicationPartFactory and Sdk features in IdentityUI\" (#1680) at aspnet/Identity","RelatedBody":""},{"Id":"7414416621","Type":"PullRequestEvent","CreatedAt":"2018-03-21T17:32:23","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1701","RelatedDescription":"Opened pull request \"React to application part changes\" (#1701) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7417089954","Type":"PullRequestEvent","CreatedAt":"2018-03-22T05:15:51","Actor":"natemcmaster","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2414","RelatedDescription":"Merged pull request \"Remove dotnet tool install from instructions on using dotnet-dev-certs\" (#2414) at aspnet/KestrelHttpServer","RelatedBody":"This tool ships in-box, so the error message shouldn't instruct users to install it separately."},{"Id":"7416914841","Type":"IssuesEvent","CreatedAt":"2018-03-22T04:04:02","Actor":"mihevc","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2415","RelatedDescription":"Opened issue \"Unable to load DLL 'libuv': The specified module or one of its dependencies could not be found.\" (#2415) at aspnet/KestrelHttpServer","RelatedBody":"I'm building my docker image using alpine runtime and I get this message.  It works on windows.\r\n\r\nHere is my docker file\r\n\r\nFROM microsoft/dotnet:2.1-sdk-alpine\r\n\r\nRUN apk update \\\r\n\t&& apk add libuv\r\n\r\n# Set the Working Directory\r\nWORKDIR /app\r\n\r\n# Configure the listening port to 80\r\nENV ASPNETCORE_URLS http://*:80\r\nEXPOSE 80\r\n\r\n# Start the app\r\nENTRYPOINT [\"dotnet\", \"mycode.dll\"]\r\n\r\nI tried adding Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv but it didn't make any difference.  I also commented out the entry point and ran the container, went into the container and verified that libuv was install.  Then, I ran the app inside the container and got the same error."},{"Id":"7415777908","Type":"PullRequestEvent","CreatedAt":"2018-03-21T21:56:06","Actor":"natemcmaster","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2414","RelatedDescription":"Opened pull request \"Remove dotnet tool install from instructions on using dotnet-dev-certs\" (#2414) at aspnet/KestrelHttpServer","RelatedBody":"This tool ships in-box, so the error message shouldn't instruct users to install it separately."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7416219372","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:58:34","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2206","RelatedDescription":"Opened pull request \"ApplicationPartFactory part 1\" (#2206) at aspnet/Razor","RelatedBody":""},{"Id":"7416070732","Type":"IssuesEvent","CreatedAt":"2018-03-21T23:12:00","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2205","RelatedDescription":"Opened issue \"Razor extension does not report the right version number in Help->About\" (#2205) at aspnet/Razor","RelatedBody":"![image](https://user-images.githubusercontent.com/1430011/37742327-6aadcb06-2d22-11e8-8d81-b4b482476aba.png)\r\n\r\n\r\nWe will likely need to do something like : https://github.com/dotnet/roslyn/blob/14aed138a01c448143b9acf0fe77a662e3dfe2f4/src/VisualStudio/Core/Def/Utilities/ProvideRoslynVersionRegistration.cs\r\n\r\nThe code that VS gives you out of the box only provides you the ability to pass a hardcoded version, and so that's what we've always done."},{"Id":"7415674542","Type":"IssuesEvent","CreatedAt":"2018-03-21T21:32:51","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1714","RelatedDescription":"Closed issue \"Add wildcard to tag on HtmlTargetElement\" (#1714) at aspnet/Razor","RelatedBody":"In a project, I would need to add functional logic on an unknown range of taghelpers. Why unknown ? just because I have a TagHelper on a homemade framework which contains mandatory logic. This framework is referenced by several projects.\r\nOn these several projects, We can write new TagHelpers but those new TagHelpers must call the TagHelper from the framework.\r\n\r\nTo reach our goal, the easiest way would be to apply our \"framework tag helper\" to every tags which begins by something\r\n\r\nFor instance, I'd like to apply my framework taghelper to every tag helpers beginning with \"mytag-*\". So i think allowing wildcard to \"tag\" parameter in HtmlTargetElement would be a great idea. It's already posible with the attributes"},{"Id":"7415239773","Type":"PullRequestEvent","CreatedAt":"2018-03-21T20:05:16","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2204","RelatedDescription":"Opened pull request \"Added PipeOptions.CurrentUserOnly option to the named pipe streams\" (#2204) at aspnet/Razor","RelatedBody":"#2056 \r\n\r\n"},{"Id":"7414708049","Type":"PullRequestEvent","CreatedAt":"2018-03-21T18:22:40","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2180","RelatedDescription":"Merged pull request \"Show error if page directive is not at the top of file\" (#2180) at aspnet/Razor","RelatedBody":"aspnet/Mvc#6633\r\n\r\nOnce we know that an `@page` exists in the document, we can process the same document again with `ParseLeadingDirectives=true` and make sure if the `@page` exists in the resulting code document. If not, log an error."},{"Id":"7414457224","Type":"IssuesEvent","CreatedAt":"2018-03-21T17:39:26","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2203","RelatedDescription":"Opened issue \"Explicit expressions in tag helper attributes are lowered to IR incorrectly\" (#2203) at aspnet/Razor","RelatedBody":"Consider these two usages of a tag helper....\r\n\r\n```\r\n@{ var x = \"hi\"; }\r\n<Foo bar=\"@x\" />\r\n<Foo bar=\"@(x)\" />\r\n```\r\n\r\nThese two expressions will be lowered differently in the IR, which results in different codegen, and is visible to extensibility.\r\n\r\n```\r\nCSharpExpression:\r\n  Token \"x\"\r\n\r\nVS \r\n\r\nCSharpExpression:\r\n  Token \"(\"\r\n  Token \"x\"\r\n  Token \")\"\r\n```\r\n\r\nThis is bad because in other places where explicit expressions occur the parenthesis are just delimiters and are considered metacode, not C#. Explicit expressions have the same syntactic form as an implicit expression surrounded by parens, which is why this is egregious. \r\n"},{"Id":"7413734311","Type":"PullRequestEvent","CreatedAt":"2018-03-21T15:45:20","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2202","RelatedDescription":"Opened pull request \"Add a few more Razor Sdk fixes\" (#2202) at aspnet/Razor","RelatedBody":"* UseSharedCompilation to determine the default value of UseRazorBuildServer\r\n* Generate AssemblyDescriptionAttribute"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":9,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":13,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Ra… https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-03-22T05:30:09.6362753Z","RunDurationInMilliseconds":8275}