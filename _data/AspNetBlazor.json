{"Data":{"GitHubIssues":{"Issues":[{"Id":"359664465","IsPullRequest":false,"CreatedAt":"2018-09-12T21:45:42","Actor":"vertonghenb","Number":"1412","RawContent":null,"Title":"Get ComponentId When error is thrown: No element is currently associated with component {ComponentId} ","State":"open","Body":"Using Blazor Server Side\r\nFrom time to time Blazor throws the following error:\r\n`No element is currently associated with component {ComponentId}`\r\n\r\nThe error is always thrown on the first load after a `StateHasChanged`, if you hard refresh the page the error doesn't happen anymore. If you remove a surrounding `<div>` from the page, the error is gone.\r\n\r\n- Is there a way to see which component has which id?\r\n- Is this a known issue?\r\n\r\nFor me this is quite vague and it happends for no certain reason, only from time to time.","Url":"https://github.com/aspnet/Blazor/issues/1412","RelatedDescription":"Open issue \"Get ComponentId When error is thrown: No element is currently associated with component {ComponentId} \" (#1412)"},{"Id":"359596916","IsPullRequest":false,"CreatedAt":"2018-09-12T18:19:20","Actor":"samuelcavendish","Number":"1411","RawContent":null,"Title":"Blazor (Server Side) displays blank page","State":"open","Body":"I've seen similar issues for older versions, but I think this is a different one since it only seems to affect the server side project, the client side project seems to work correctly.\r\n\r\nI followed the setup instructions from https://blazor.net/docs/get-started.html\r\nVS version 15.8.2\r\ndotnet version 2.1.402\r\n\r\nWhen clicking new project & selecting the server side project it shows the loading screen and then a blank page. There are no errors in the console. \r\n\r\nI had to make just 1 change other than the File -> New Project. Once the project was created, I went into the Server project Properties -> Debug -> Enable SSL. This was to get rid of the error in chrome about the site can't provide a secure connection. ","Url":"https://github.com/aspnet/Blazor/issues/1411","RelatedDescription":"Open issue \"Blazor (Server Side) displays blank page\" (#1411)"},{"Id":"359146325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:30:10","Actor":"masonwheeler","Number":"1410","RawContent":null,"Title":"Blazor rewrite rule is far too broad","State":"open","Body":"URL rewriting is important for making a SPA work, but the standard ASP.NET rewrite rule for Blazor is completely broken.  It essentially says \"take any request that doesn't exist and treat it as a request for index.html\", which means that requests for things that *should exist but don't* also return index.html instead of generating a 404, making debugging much more difficult.\r\n\r\nWhat's needed is an analyzer that looks at the various `@page` directives and extracts a set of precise rewrite rules from them.","Url":"https://github.com/aspnet/Blazor/issues/1410","RelatedDescription":"Open issue \"Blazor rewrite rule is far too broad\" (#1410)"},{"Id":"359112289","IsPullRequest":false,"CreatedAt":"2018-09-11T15:56:42","Actor":"ruratnayake","Number":"1409","RawContent":null,"Title":"Int.Parse and Int.TryParse not working","State":"open","Body":"I have tried to do some validation message display based on the input change on an input field. but seems Int.Parse and TryParse not Working.\r\n\r\nI have modified the counter page in the default template. Functionality should be if user enter valid integer value the increment counter value should be increased by 1. otherwise decrement by 5. no change detected on increment counter \r\n\r\n```html\r\n@page \"/counter\"\r\n\r\n<style type=\"text/css\">\r\n    .show {\r\n        color: red;\r\n        display: block;\r\n    }\r\n\r\n    .hide {\r\n        display: none;\r\n    }\r\n</style>\r\n\r\n<h1>Counter</h1>\r\n\r\n<p>valid input change count: @currentCount (intValString: @intValString)</p>\r\n\r\n<input type=\"text\" bind=\"@intValString\" onchange=\"@OnIntValueStringChange\" />\r\n<span class='@(isIntInput ? \"show\" : \"hide\")'>Enter valid integer value.</span>\r\n\r\n@functions{\r\n\r\n    int currentCount = 0;\r\n\r\n    bool isIntInput = true;\r\n\r\n    string intValString;\r\n\r\n    void OnIntValueStringChange()\r\n    {\r\n        try\r\n        {\r\n            int.Parse(intValString);\r\n            currentCount++;\r\n            isIntInput = true;\r\n        }\r\n        catch (Exception)\r\n        {\r\n            currentCount-=5;\r\n            isIntInput = false;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1409","RelatedDescription":"Open issue \"Int.Parse and Int.TryParse not working\" (#1409)"},{"Id":"359091713","IsPullRequest":false,"CreatedAt":"2018-09-11T15:09:20","Actor":"stsrki","Number":"1408","RawContent":null,"Title":"Detect parent from child component","State":"open","Body":"Sorry if this was answered already. I have a need for the child component to behave differently based on the parent in which it is placed. I need to know if the _ChildComponent_ is placed inside of _ParentComponent_ or not.\r\n\r\nFor axample if I have this\r\n```\r\n<div>\r\n    <ParentComponent>\r\n       <ChildComponent />\r\n    <ParentComponent>\r\n</div>\r\n```\r\nit would render:\r\n```\r\n<div>\r\n    <div class=\"parent-class\"\r\n        <span class=\"child-class hello-parent\"></span>\r\n    <div>\r\n</div>\r\n```\r\n\r\nAnd this\r\n```\r\n<div>\r\n   <ChildComponent />\r\n</div>\r\n```\r\nit would render:\r\n```\r\n<div>\r\n    <span class=\"child-class\"></span>\r\n</div>\r\n```\r\n\r\nIs this even possible?","Url":"https://github.com/aspnet/Blazor/issues/1408","RelatedDescription":"Open issue \"Detect parent from child component\" (#1408)"},{"Id":"358779157","IsPullRequest":false,"CreatedAt":"2018-09-11T11:02:03","Actor":"LaurenceFrost","Number":"1406","RawContent":null,"Title":"Subscribing to data changes","State":"closed","Body":"Coming from a Knockout background, I am used to creating properties (observables) in my view models, and then creating subscriptions to them so that an event automatically occurs when a value changes (regardless of how that value change happens).\r\n\r\nIs there something similar in Blazor (either already, or in the pipeline)?\r\n\r\nTaking the inbuilt \"counter\" example, I want SetDataAsChanged() to be called whenever there is a change to the currentCount variable, keeping in mind that there could be multiple ways that the variable could be updated, and I do not want to have to manually call SetDataAsChanged() each time.\r\n\r\n```\r\n@functions {\r\n    int currentCount = 0;\r\n    bool dataChanged = false;\r\n\r\n    void IncrementCount()\r\n    {\r\n        currentCount += 2;\r\n    }\r\n    \r\n    \r\n    // I want this called whenever currentCount changes (from anywhere)\r\n    void SetDataAsChanged()\r\n    {\r\n        dataChanged = true;\r\n    }\r\n}\r\n```\r\n\r\nIs this possible, or does it conflict with Blazor's design intentions?","Url":"https://github.com/aspnet/Blazor/issues/1406","RelatedDescription":"Closed issue \"Subscribing to data changes\" (#1406)"},{"Id":"358961107","IsPullRequest":true,"CreatedAt":"2018-09-11T09:26:09","Actor":"SteveSandersonMS","Number":"1407","RawContent":null,"Title":"Update linking","State":"open","Body":"Updates to newer linker binary, plus config changes recommended by @marek-safar.","Url":"https://github.com/aspnet/Blazor/pull/1407","RelatedDescription":"Open PR \"Update linking\" (#1407)"},{"Id":"358008703","IsPullRequest":true,"CreatedAt":"2018-09-11T08:55:28","Actor":"SteveSandersonMS","Number":"1396","RawContent":null,"Title":"Refactor server-side blazor startup to allow Azure SignalR. Fixes #1227","State":"closed","Body":"Fixes #1227\r\n\r\nThe main challenge with this is:\r\n(1) We don't want to take a strict dependency on the `Microsoft.Azure.SignalR` package (at least not for everyone)\r\n(2) The `Microsoft.Azure.SignalR` package uses its own custom equivalent to `MapHub` that looks the same as the standard `Microsoft.AspNetCore.SignalR` one, but actually uses different types. So if we comply with (1), then we can't possibly call `MapHub` on the developer's behalf.\r\n\r\nPossible resolutions, then:\r\n\r\n* A: Use reflection tricks and make it more magic (no thanks)\r\n* B: Have a separate `Microsoft.AspNetCore.Blazor.AzureSignalR` package that depends on `Microsoft.Azure.SignalR`\r\n* C: Let the developer call `MapHub` themselves, meaning that (a) we have to remove all the other magic from `UseServerSideBlazor` and (b) we have to make `BlazorHub` public.\r\n\r\nBetween B and C, I prefer option C because it makes us less tightly coupled to SignalR APIs, so if SignalR adds more overloads to `MapHub` or other config styles in the future, we should automatically be composable with it.\r\n\r\nThis PR implements options C.\r\n\r\n### Result\r\n\r\nThe result is that `app.UseServerSideBlazor<TClient>();` is now exactly equivalent to:\r\n\r\n```csharp\r\napp.UseSignalR(route => route.MapHub<BlazorHub>(BlazorHub.DefaultPath));\r\napp.UseBlazor<TClient>();\r\n```\r\n\r\nSo, if a developer wants, they can choose *not* to call `UseServerSideBlazor`, but rather use those two lines instead, and from there they can replace `UseSignalR` with `UseAzureSignalR` if they want.\r\n\r\nTherefore the way to use Azure SignalR with a server-side Blazor app becomes (in the server app's `Startup.cs`):\r\n\r\n```csharp\r\n    public class Startup\r\n    {\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddSignalR().AddAzureSignalR(/* optionsOrConnectionString */);\r\n            services.AddServerSideBlazor<Client.Startup>();\r\n            // ...\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            app.UseAzureSignalR(route => route.MapHub<BlazorHub>(BlazorHub.DefaultPath));\r\n            app.UseBlazor<Client.Startup>();\r\n            // ...\r\n        }\r\n    }\r\n```\r\n\r\nNote: This means that `AddSignalR` is being called twice - once by the developer manually, and once inside `AddServerSideBlazor`. @anurse, do you know if there's any problem or disadvantage with calling that twice? We can stop it if we absolutely must, but it will be easier for developers to understand this way (because it works both with and without Azure SignalR with a minimum of user code changes).\r\n\r\n### More notes, mainly for @rynowak\r\n\r\nI moved all the \"register startup actions\" logic out of `UseServerSideBlazor` and into `AddServerSideBlazor` (so that `UseServerSideBlazor` can be equivalent to the two lines above). I believe the net result is the same, and it still can be extended to support registering multiple server-side Blazor endpoints in the future (with different `TClient` values), but for now I still left it hard-coded to use `/_blazor` as the path without implementing support for configuring an alternate path.","Url":"https://github.com/aspnet/Blazor/pull/1396","RelatedDescription":"Closed or merged PR \"Refactor server-side blazor startup to allow Azure SignalR. Fixes #1227\" (#1396)"},{"Id":"358443923","IsPullRequest":true,"CreatedAt":"2018-09-11T01:59:52","Actor":"rynowak","Number":"1404","RawContent":null,"Title":"Add  Support for Templated Components","State":"closed","Body":"## Summary\r\n\r\nThis change adds support for templated components\r\n- Components can accept multiple, named child content elements as arguments\r\n- Components can render a child content that accepts a parameter\r\n- We revised the signature of `RenderFragment<T>` to be more usable\r\n\r\n**We don't yet have support for genericly typed components - that will come next.**\r\n\r\n## How to use\r\n\r\n```\r\n@* In TemplatedTable.cshtml *@\r\n@functions {\r\n    [Parameter] RenderFragment Header { get; set; }\r\n\r\n    [Parameter] RenderFragment<Item> ItemTemplate { get; set; }\r\n\r\n    [Parameter] RenderFragment Footer { get; set; }\r\n\r\n    [Parameter]\r\n    IReadOnlyList<Item> Items { get; set; }\r\n}\r\n\r\n...\r\n\r\n@* Elsewhere... *@\r\n<TemplatedTable Items=\"@Items\">\r\n    <Header><tr>...</tr></Header>\r\n    <ItemTemplate>\r\n        <tr><td>@context.Col1</td><td>@context.Col2</td><td>@context.Col3</td></tr>\r\n    </ItemTemplate>\r\n</TemplatedTable>\r\n```\r\n\r\nWhen a component defines a parameter of type `RenderFragment` or `RenderFragment<T>` (for some `T`), that parameter can have its value bound from a child element (child content). This feature now supports any number of child content parameters and they can have any valid element name as names. Previously only the name `ChildContent` could be used, and the type was always `RenderFragment` of `T`. \r\n\r\nChild content arguments can be can be passed explicitly by wrapping the content in an element that matches the parameter name. Child content arguments must be passed explicitly when passing multiple child content arguments through the component body. The tooling will help with completion for child content  both as attributes and as elements in the body.\r\n\r\nWe've improved the validation and diagnostics of these features to try and make the limitations and mistakes clear. I don't anticipate that any of these new features are breaking changes. Passing child content to the `ChildContent` parameter still works implicitly, even when the `ChildContent` parameter isn't declared.\r\n\r\n----\r\n\r\nChild content arguments of type `RenderFragment<T>` passed as elements will have an implict parameter name of `context`. You can change the parameter name if you wish:\r\n```\r\n    <ItemTemplate Context=\"item\">\r\n        <tr><td>@item.Col1</td><td>@item.Col2</td><td>@item.Col3</td></tr>\r\n    </ItemTemplate>\r\n```\r\n\r\nThe value passed through `Context` must be a static/constant value. You should see completion/intellisense inside the `<ItemTemplate>` element for `item` in this example.\r\n\r\n----\r\n\r\nAdditionally, we've changed the siganture of `RenderFragment<T>` to be more usable. Now a `RenderFragment<T>` will return a `RenderFragment` when evaluated. This makes defining templates using the existing Razor syntax more natural.\r\n\r\n```\r\n@{\r\n    RenderFragment t1 = @<div>...</div>;\r\n    RenderFragment<Person> t2 = (person) => @<div>...</div>;\r\n}\r\n```\r\n\r\nWhen using a `RenderFragment<T>` with Razor templates, you need to define the parameter name yourself. \r\n\r\n\r\n## Notes\r\n- It's probably best to look at this commit by commit. As part of this work I reorganized and de-duplicated a bunch of the baseline tests.\r\n- There is an issue with child content argument completion when the child content parameter name is the same as an HTML element. The editor will complete it as lowercase.","Url":"https://github.com/aspnet/Blazor/pull/1404","RelatedDescription":"Closed or merged PR \"Add  Support for Templated Components\" (#1404)"},{"Id":"358434078","IsPullRequest":false,"CreatedAt":"2018-09-11T01:19:54","Actor":"StingyJack","Number":"1403","RawContent":null,"Title":"\"MonoTouch does not support dynamic proxy code generation.\" when trying to call existing services using existing controllers.","State":"closed","Body":"I made a solution with the Blazor getting started project. It ran, so I added a login page and the interactivity with the UI seems correct when running it. I then tried to extend it a little bit by adding three projects to the solution. \r\n\r\n- a netFx 4.6.2 library for common objects and service contracts. \r\n- a netFx 4.6.2 library for page controllers/service ChannelFactory/ClientBase's. This refs the common library\r\n- a netFx 4.6.2 Asp.net web application with a single Wcf AuthService.svc. This refs the common library\r\n\r\nOnly the things to support attempting a user login are present. The method signatures in the controllers and services are simple `AuthResult AttemptUserAuth(string username, string password);` where `AuthResult` has an `IsAuthed` bool property and a few string properties.  Using a console application I can ref the two libraries and successfully make calls to the AuthService.svc.  If I try to wire in the same assemblies into the Blazor project, when it calls the wcf service I get the error in the title.\r\n\r\nI found a [suggestion](https://stackoverflow.com/questions/10054581/monotouch-wcf-how-to-consume-the-wcf-service-without-svcutil) to override the ChannelBase for the ClientBase, but that didnt work as-is because ChannelBase has no `Invoke` method, only the `Begin/EndInvoke` pair. When I tried to use those I would get only null reference exceptions. \r\n\r\nKeeping the arrangement of libraries and the existing wcf services is critical to the story, as there are a few hundred projects and a few million lines of code invested in that stack type and there is no financial benefit to just changing from the wcf/xml/soap to rest/json. However, there is as much leeway as code generation can permit, I just cant find a working pattern that I can use within this \"getting started\" project.\r\n\r\nBefore I spend another afternoon trying to make this work, can someone please tell me if what I am trying to do is possible, or is going to be possible with Blazor?","Url":"https://github.com/aspnet/Blazor/issues/1403","RelatedDescription":"Closed issue \"\"MonoTouch does not support dynamic proxy code generation.\" when trying to call existing services using existing controllers.\" (#1403)"},{"Id":"358488218","IsPullRequest":true,"CreatedAt":"2018-09-10T06:44:05","Actor":"shibutamang","Number":"1405","RawContent":null,"Title":"Small tweaks to support publish","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1405","RelatedDescription":"Open PR \"Small tweaks to support publish\" (#1405)"},{"Id":"358386053","IsPullRequest":false,"CreatedAt":"2018-09-10T04:04:17","Actor":"lakani","Number":"1402","RawContent":null,"Title":"for loop only render last value","State":"closed","Body":"i've modified a littel the counter page to try how i can render array of buttons, but i got a strange behavior \r\n`\r\n`@page \"/counter\"`\r\n`\r\n<h1>Counter</h1>`\r\n\r\n`<p>Current count: @currentCount</p>`\r\n\r\n`<button class=\"btn btn-primary\" onclick=\"@IncrementCount\">Click me</button>`\r\n\r\n`<button class=\"btn btn-primary\" onclick=\"@Reset\">Reset</button>`\r\n\r\n\r\n`@for (int i = 0; i < _Sarr.Length; i++)   {`\r\n\t` <button class=\"btn btn-primary\" onclick=\"@(e => bReset( i ))\">@_Sarr[i]</button>`\r\n`}`\r\n\r\n\r\n@functions {\r\n\tint currentCount = 0;\r\n\r\n\tstring[] _Sarr = new string[] { \"one\", \"two\", \"three\" };\r\n\r\n\tvoid IncrementCount()\r\n\t{\r\n\t\tcurrentCount++;\r\n\t}\r\n\r\n\tvoid bReset(int s)\r\n\t{\r\n\t\tConsole.WriteLine(s.ToString());\r\n\t\tcurrentCount += s;\r\n\r\n\r\n\t}\r\n\r\n\tvoid Reset()\r\n\t{\r\n\t\tcurrentCount = 0;\r\n\t}\r\n}\r\n`\r\n\r\nbut whenever i click on one of the buttons in the array , s variable passed by 3\r\n\r\nam i doing someting wrong ?","Url":"https://github.com/aspnet/Blazor/issues/1402","RelatedDescription":"Closed issue \"for loop only render last value\" (#1402)"},{"Id":"358337952","IsPullRequest":false,"CreatedAt":"2018-09-09T04:51:17","Actor":"StingyJack","Number":"1401","RawContent":null,"Title":"A compatible SDK version for global.json version: [2.1.300] ... was not found","State":"closed","Body":"I was getting this when trying to follow the Getting Started guide.  I found my version number by using `dotnet --version` (it was 2.1.401) and then I replaced the 2.1.300 into the `global.json`.\r\n\r\nThe Getting Started does work at this point, are there any known problems with using a slightly later version of the dotnet SDK?","Url":"https://github.com/aspnet/Blazor/issues/1401","RelatedDescription":"Closed issue \"A compatible SDK version for global.json version: [2.1.300] ... was not found\" (#1401)"},{"Id":"358294078","IsPullRequest":false,"CreatedAt":"2018-09-08T13:09:32","Actor":"mrpmorris","Number":"1400","RawContent":null,"Title":"StateHasChanged has no effect when called from JavaScript interop","State":"open","Body":"I've uploaded a sample app here https://drive.google.com/open?id=1HnrxLNiRAbfTn3Mgwkk-pvgZeqrb7Rjb\r\n\r\n1. Run the app\r\n2. Note that the Counter is 0\r\n3. Click the button (repeatedly)\r\n4. Note it remains 0\r\n\r\nEdit index.cshtml\r\nComment out the call to StateHasChanged in OnPageLoaded\r\n\r\n1. Run the app\r\n2. Note that the Counter is 0\r\n3. Click the button (once)\r\n4. Note it changes to 2\r\n\r\nConclusion: A call from JavaScript into Blazor does not automatically update view state, but adding in StateHasChanged causes all view state to stop working from thereon in.\r\n\r\nSOURCE\r\n=====\r\n\r\n>     public static class BrowserInterop\r\n>     {\r\n>         private const string NotifyPageLoadedCallbackId = \"PeterMorris.BrowserInterop.NotifyPageLoaded\";\r\n> \r\n>         public static event EventHandler PageLoaded;\r\n> \r\n>         public static RenderFragment Initialize()\r\n>         {\r\n>             return (RenderTreeBuilder renderer) =>\r\n>             {\r\n>                 renderer.OpenElement(1, \"script\");\r\n>                 renderer.AddContent(1, GetPageLoadedScript());\r\n>                 renderer.CloseElement();\r\n>             };\r\n>         }\r\n> \r\n>         [JSInvokable(NotifyPageLoadedCallbackId)]\r\n>         public static void NotifyPageLoaded()\r\n>         {\r\n>             Console.WriteLine(\"PageLoaded!!!\");\r\n>             PageLoaded?.Invoke(null, null);\r\n>         }\r\n> \r\n>         private static string GetPageLoadedScript()\r\n>         {\r\n>             string assemblyName = typeof(BrowserInterop).Assembly.GetName().Name;\r\n> \r\n>             return \r\n>             #region JavaScript\r\n> $@\"\r\n> \t(function() {{ \r\n> \t\tDotNet.invokeMethodAsync('{assemblyName}', '{NotifyPageLoadedCallbackId}');\r\n> \t}})();\r\n> \";\r\n>             #endregion\r\n>         }\r\n>     }\r\n> \r\n\r\nMainLayout.cshtml\r\n============\r\nAt the bottom of the file add \r\n\r\n> @BrowserInterop.Initialize()\r\n\r\n\r\nIndex.cshtml\r\n========\r\n```\r\n@page \"/\"\r\n\r\nCounter value is @Count\r\n<button class=\"btn btn-primary\" onclick=\"@ButtonClick\">Click me</button>\r\n\r\n@functions\r\n{\r\n    int Count = 0;\r\n\r\n    protected override void OnInit()\r\n    {\r\n        base.OnInit();\r\n        BrowserInterop.PageLoaded += OnPageLoaded;\r\n    }\r\n\r\n    private void OnPageLoaded(object sender, EventArgs args)\r\n    {\r\n        BrowserInterop.PageLoaded -= OnPageLoaded;\r\n        Count++;\r\n        StateHasChanged();\r\n        Console.WriteLine($\"Counter is now {Count}\");\r\n    }\r\n\r\n    private void ButtonClick()\r\n    {\r\n        Count++;\r\n        StateHasChanged();\r\n    }\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1400","RelatedDescription":"Open issue \"StateHasChanged has no effect when called from JavaScript interop\" (#1400)"},{"Id":"358289469","IsPullRequest":false,"CreatedAt":"2018-09-08T11:59:59","Actor":"mrpmorris","Number":"1399","RawContent":null,"Title":"Blazor Language Services causing Visual Studio to crash","State":"open","Body":"When I open a Blazor project VS hangs for a while and then disappears. The next time I open it I am informed Blazor Language Services extension caused the problem.\r\n\r\nhttps://www.youtube.com/watch?v=qqbAc9Kbo3M\r\n\r\nLet me know if you need anything additional (project / logs / remote access to laptop).\r\n\r\n Update - Output from build process\r\n\r\n> Error\t\trzc generate exited with code 1.\tWebApplication22.Client\tC:\\Users\\X\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets\t184\t\r\n\r\n\r\n> 1>------ Rebuild All started: Project: WebApplication22.Shared, Configuration: Debug Any CPU ------\r\n> 1>WebApplication22.Shared -> C:\\Users\\X\\source\\repos\\WebApplication22b\\WebApplication22.Shared\\bin\\Debug\\netstandard2.0\\WebApplication22.Shared.dll\r\n> 2>------ Rebuild All started: Project: WebApplication22.Client, Configuration: Debug Any CPU ------\r\n> 2>One or more errors occurred. (Stack empty.)\r\n> 2>   at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n> 2>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n> 2>--- End of stack trace from previous location where exception was thrown ---\r\n> 2>   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n> 2>   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n> 2>   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n> 2>   at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.GenerateCode(RazorProjectEngine engine, SourceItem[] inputs)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCore(RazorConfiguration configuration, String projectDirectory, String tagHelperManifest, List`1 sources, List`1 outputs, List`1 relativePaths)\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.GenerateCommand.ExecuteCoreAsync()\r\n> 2>   at Microsoft.AspNetCore.Razor.Tools.CommandBase.<ExecuteAsync>d__13.MoveNext()\r\n> 2>C:\\Users\\X\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets(184,5): error : rzc generate exited with code 1.\r\n> 2>Done building project \"WebApplication22.Client.csproj\" -- FAILED.\r\n> 3>------ Rebuild All started: Project: WebApplication22.Server, Configuration: Debug Any CPU ------\r\n> 3>WebApplication22.Server -> C:\\Users\\X\\source\\repos\\WebApplication22b\\WebApplication22.Server\\bin\\Debug\\netcoreapp2.1\\WebApplication22.Server.dll\r\n> ========== Rebuild All: 2 succeeded, 1 failed, 0 skipped ==========","Url":"https://github.com/aspnet/Blazor/issues/1399","RelatedDescription":"Open issue \"Blazor Language Services causing Visual Studio to crash\" (#1399)"},{"Id":"357983836","IsPullRequest":false,"CreatedAt":"2018-09-07T18:05:34","Actor":"NikolayIT","Number":"1395","RawContent":null,"Title":"When using binding, on enter key pressed I do not receive the actual input value","State":"closed","Body":"I have the following code:\r\n\r\n    <input bind=@this.Value onkeypress=\"@KeyPress\" />\r\n    @functions {\r\n        public string Value { get; set; }\r\n        void KeyPress(UIKeyboardEventArgs e)\r\n        {\r\n            if (e.Key == \"Enter\")\r\n            {\r\n                Console.WriteLine(this.Value);\r\n            }\r\n        }\r\n    }\r\n\r\nWhen I write some text in the input field (for example `test1`) and click enter I get empty text written on the console. When I add some more text (like `test2`) and again click enter I get just `test1` (the previous value before the enter click) on the console:\r\n\r\n![image](https://user-images.githubusercontent.com/3106986/45209844-a9e51000-b296-11e8-8e41-83c8c1e5c325.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1395","RelatedDescription":"Closed issue \"When using binding, on enter key pressed I do not receive the actual input value\" (#1395)"},{"Id":"358126265","IsPullRequest":false,"CreatedAt":"2018-09-07T16:05:32","Actor":"GodzillaDaThrilla","Number":"1398","RawContent":null,"Title":"Sidebar auto-collapses any collapsable children on wide media - fix included","State":"open","Body":"Figured this out while trying to create an accordion on the sidebar. I found that the standard bootstrap collapse on child elements worked fine on small screens where the sidebar collapses to the top, but on large screens the accordion menu(s) would just keep re-collapsing (again, only only large screens, collapseable elements functioned normally in mobile view).\r\n\r\n### The Problem:\r\nThe problem is with the default template, specifically this in NavMenu.cshtml:\r\n![image](https://user-images.githubusercontent.com/18584301/45224021-cc842280-b2b0-11e8-9047-a30114adcc75.png)\r\nand this in site.css:\r\n![image](https://user-images.githubusercontent.com/18584301/45224090-048b6580-b2b1-11e8-9422-4b0a6cbc1327.png)\r\n\r\nThis means that the collapse prevention is inherited by all child elements on wide screens, which makes a hamburger/accordion-style menu impossible.\r\n\r\n### The Fix:\r\nAdd an arbitrary class to the HTML - I called mine navInner:\r\n![image](https://user-images.githubusercontent.com/18584301/45224401-c93d6680-b2b1-11e8-99a1-80f31b6efb68.png)\r\nThen modify the CSS so it targets only the sidebar specifically and not its children. I did this by replacing the  \".collapse\" with a combo-selector \".navInner.collapse\" :\r\n![image](https://user-images.githubusercontent.com/18584301/45224515-0dc90200-b2b2-11e8-95b2-e1b79293da91.png)\r\n\r\n### The Result:\r\n![image](https://user-images.githubusercontent.com/18584301/45230184-014ba600-b2c0-11e8-903d-d8693b762d89.png)\r\n![image](https://user-images.githubusercontent.com/18584301/45230231-24765580-b2c0-11e8-8efc-2f9138c5a060.png)\r\nHey hey, it works!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1398","RelatedDescription":"Open issue \"Sidebar auto-collapses any collapsable children on wide media - fix included\" (#1398)"},{"Id":"358069684","IsPullRequest":false,"CreatedAt":"2018-09-07T13:35:29","Actor":"SteveSandersonMS","Number":"1397","RawContent":null,"Title":"Avoid publishing _bin/asmjs/wasm directories for server-side only apps","State":"open","Body":"Currently the build/publishing process doesn't differentiate between WebAssembly and server-side Blazor apps, and hence it outputs `mono.wasm`/`mono.asm.js` and the `_bin` directory (containing client-downloadable .NET assemblies) in both cases.\r\n\r\nYou *do* want to publish those files for WebAssembly apps, but you *don't* for server-side only ones (partly because it's pointless extra stuff to publish, and partly because you might actively not want clients to be able to download the Blazor app assemblies, since you only intend to use them on the server).\r\n\r\n**Proposal**\r\n\r\n1. In the Blazor client project, add an MSBuild property like `<OutputWebAssemblyFiles>true</OutputWebAssemblyFiles>`. This will be present by default in our WebAssembly project templates, but not the server-side one. Then we change the build process so that, if this flag is not present, it does not emit the `_bin`/`asmjs`/`wasm` directories.\r\n    * Obviously this is a breaking change, but it's pretty easy for people to add this to their existing apps.\r\n    * I think it should be opt-in like this, not opt-out, because it gives people a better chance of recognizing that they even have a choice.\r\n    * Having this flag also slightly simplifies the server-side template, because it no longer has to explicitly opt out from running the linker. The linker wouldn't be run anyway if we weren't outputting the WebAssembly files.\r\n2. We can also use the `OutputWebAssemblyFiles` flag to know whether to include a list of .NET assemblies in `_framework/blazor.boot.json`, hence also solving #1233.\r\n\r\n@danroth27 / @rynowak - thoughts on this design? Any other way you'd prefer it to be configured?\r\n\r\nThe main way people could still get this wrong is by adding a new Blazor client project to an existing solution to use it as a server-executed app, but forgetting to remove the `<OutputWebAssemblyFiles>` flag. Not sure how big of an issue to consider that.","Url":"https://github.com/aspnet/Blazor/issues/1397","RelatedDescription":"Open issue \"Avoid publishing _bin/asmjs/wasm directories for server-side only apps\" (#1397)"},{"Id":"356913219","IsPullRequest":true,"CreatedAt":"2018-09-07T11:44:54","Actor":"kant2002","Number":"1386","RawContent":null,"Title":"Removal of global.json from the template","State":"closed","Body":"I remove only global.json from the template, and leave global.json in the repository root, since it is required for the build.\r\nSee #1324","Url":"https://github.com/aspnet/Blazor/pull/1386","RelatedDescription":"Closed or merged PR \"Removal of global.json from the template\" (#1386)"},{"Id":"357667652","IsPullRequest":false,"CreatedAt":"2018-09-07T11:38:48","Actor":"stsrki","Number":"1394","RawContent":null,"Title":"ref attribute is null","State":"closed","Body":"I have a custom components for my _navbar_ and I want to control the collapse(BarMenu) using the reference attribute like this:\r\n\r\n```\r\n<Bar Expand=\"Size.Large\" Background=\"Background.Primary\" Theme=\"Theme.Dark\">\r\n    <BarBrand To=\"\">Home</BarBrand>\r\n    <BarToggler For=\"@barMenu\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </BarToggler>\r\n    <BarMenu ref=\"barMenu\">\r\n        ...\r\n    </BarMenu>\r\n</Bar\r\n\r\n@functions{\r\n    private BarMenu barMenu;\r\n}\r\n```\r\nIn my BarToggler I have this code for button onclick event:\r\n\r\n```\r\n[Parameter] private BarMenu For { get; set; }\r\n\r\nprotected void ClickHandler()\r\n{\r\n    For?.Toggle();\r\n}\r\n```\r\nand in BarMenu:\r\n```\r\npublic void Toggle()\r\n{\r\n    IsOpen = !IsOpen;\r\n    Toggled?.Invoke( IsOpen );\r\n\r\n    StateHasChanged();\r\n}\r\n```\r\n\r\nNow the problem is that this only works if I place the Bar **inside** of MainLayout component. If I try to place it inside of any other component/page it is not working. The **For** attribute is always null in the BarToggler component and because of that the Toggle function will never be called.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1394","RelatedDescription":"Closed issue \"ref attribute is null\" (#1394)"},{"Id":"357392050","IsPullRequest":false,"CreatedAt":"2018-09-06T08:15:28","Actor":"ChuckBevitt","Number":"1392","RawContent":null,"Title":"Sample App Does Not Compile","State":"closed","Body":"I followed the directions carefully at https://blazor.net/docs/get-started.html to create your first project. However, when I try to build the sample app created by the template I get this error:\r\n\r\nError\tMSB3073\tThe command \"dotnet \"C:\\Users\\DevCharlesB\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json obj\\Debug\\netstandard2.0\\Test Blazor2.dll --references \"C:\\Test\\Test Blazor2\\Test Blazor2\\obj\\Debug\\netstandard2.0\\blazor/bootjson-references.txt\" --embedded-resources \"C:\\Test\\Test Blazor2\\Test Blazor2\\obj\\Debug\\netstandard2.0\\blazor/embedded.resources.txt\" --linker-enabled --output \"C:\\Test\\Test Blazor2\\Test Blazor2\\obj\\Debug\\netstandard2.0\\blazor/blazor.boot.json\"\" exited with code -532462766.\tTest Blazor2\tC:\\Users\\DevCharlesB\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\Blazor.MonoRuntime.targets\t635\r\n\r\nCan't quite pick out what it's trying to tell me or where to go with it. Appreciate any suggestions.","Url":"https://github.com/aspnet/Blazor/issues/1392","RelatedDescription":"Closed issue \"Sample App Does Not Compile\" (#1392)"},{"Id":"357455542","IsPullRequest":false,"CreatedAt":"2018-09-06T02:19:40","Actor":"SwErSumant","Number":"1393","RawContent":null,"Title":"Browser ( Chrome ) Extension development Template","State":"closed","Body":"NOTE: **Its not a browser extension to support blazor but develop any browser extension by using blazor.**\r\nWe can start from here\r\nhttps://developer.chrome.com/extensions/getstarted\r\nCan you please provide browser ( Chrome ) extension development template ?\r\nWhich other browser extension development is possible ?\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1393","RelatedDescription":"Closed issue \"Browser ( Chrome ) Extension development Template\" (#1393)"},{"Id":"357373728","IsPullRequest":true,"CreatedAt":"2018-09-05T21:00:37","Actor":"rynowak","Number":"1391","RawContent":null,"Title":"Fix path to our templates","State":"closed","Body":"Fixes #1375","Url":"https://github.com/aspnet/Blazor/pull/1391","RelatedDescription":"Closed or merged PR \"Fix path to our templates\" (#1391)"},{"Id":"357123662","IsPullRequest":false,"CreatedAt":"2018-09-05T14:59:05","Actor":"kant2002","Number":"1389","RawContent":null,"Title":"Libman restore does not working","State":"closed","Body":"If add libman.json to the project, then on new PC on the build files does not restored","Url":"https://github.com/aspnet/Blazor/issues/1389","RelatedDescription":"Closed issue \"Libman restore does not working\" (#1389)"},{"Id":"357141636","IsPullRequest":false,"CreatedAt":"2018-09-05T09:26:09","Actor":"arkadiuszwojcik","Number":"1390","RawContent":null,"Title":"Component not rendering after StateHasChanged call","State":"open","Body":"I have created simple `NavElement` component that changes a bit standard `NavLink` behaviour. According to log all logic works but somehow component is not re-rendered after `StateHasChanged` call. Relevant code looks like this:\r\n\r\n        private void OnLocationChanged(object sender, string newUriAbsolute)\r\n        {\r\n            Console.WriteLine(\"OnLocationChanged\");\r\n\r\n            var shouldBeActiveNow = ShouldMatch(newUriAbsolute);\r\n\r\n            if (shouldBeActiveNow != IsActive)\r\n            {\r\n                IsActive = shouldBeActiveNow;\r\n                Console.WriteLine(\"Calling StateHasChanged\");\r\n                StateHasChanged();\r\n            }\r\n        }\r\n\r\n        protected override bool ShouldRender() => true;\r\n\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n            Console.WriteLine(\"BuildRenderTree\");\r\n\r\n            builder.OpenElement(0, \"li\");\r\n\r\n            // Set class attribute\r\n            builder.AddAttribute(0, \"class\", CombineWithSpace(Class, IsActive ? ActiveClass : null));\r\n\r\n            builder.AddContent(1, ChildContent);\r\n\r\n            builder.CloseElement();\r\n        }\r\n\r\nComponent renders initialy. Later on when I click on some link logic works like expected and I get `Calling StateHasChanged` in browser console for two nav elements (old active and new active). But after that I can't see in logs `BuildRenderTree`. But when I refresh web page changes are applied.","Url":"https://github.com/aspnet/Blazor/issues/1390","RelatedDescription":"Open issue \"Component not rendering after StateHasChanged call\" (#1390)"},{"Id":"357027331","IsPullRequest":false,"CreatedAt":"2018-09-05T08:26:31","Actor":"Lupusa87","Number":"1388","RawContent":null,"Title":"warning BL9993: Component parameter 'any' is marked public, but component parameters should not be public","State":"closed","Body":"**This warning has no sense!**\r\n\r\n1. If I want to access child **property or action** from parent using component reference I need public property (why should I add extra public method to modify private property) or action (especially).\r\n\r\n2. I often access component's properties or actions from any place inside application, logically I need public properties or actions to have control of them.\r\n\r\nI use public access level but VS is giving this warning.\r\n\r\nI can use **internal** access level but I think it will be also against the logic based with blazor analyzer requires private.\r\n\r\nMy questions:\r\n**1. What are arguments for requesting private?**\r\n\r\n**2. Why can not be used public or internal?**\r\n\r\n**3. If there is good reason then what can we do in above cases?**\r\n\r\n@SteveSandersonMS \r\n","Url":"https://github.com/aspnet/Blazor/issues/1388","RelatedDescription":"Closed issue \"warning BL9993: Component parameter 'any' is marked public, but component parameters should not be public\" (#1388)"},{"Id":"357001867","IsPullRequest":true,"CreatedAt":"2018-09-04T22:40:37","Actor":"Suchiman","Number":"1387","RawContent":null,"Title":"Support streaming HTTP responses and HttpCompletionOption.ResponseHeadersRead","State":"open","Body":"This delays reading the response body as  `ArrayBuffer`  by moving it into a custom `HttpContent` type which allows `httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead` to work as intended.\r\nAdditionally this introduces optional support for streaming the response body if supported by the browser and enabled by the user (controlled via `BrowserHttpMessageHandler.StreamingSupported` and `BrowserHttpMessageHandler.StreamingEnabled`).\r\nStreaming is not enabled by default because the default behavior of `HttpClient` is to buffer anyway while the streaming mode increases the overhead (many interop transitions, Tasks allocated for every `ReadAsync` call).\r\nLast but not least a small change to cascade the `CancellationToken` to an `abortController` on the JS side so an in-flight fetch request can be properly canceled.\r\nfixes #1384","Url":"https://github.com/aspnet/Blazor/pull/1387","RelatedDescription":"Open PR \"Support streaming HTTP responses and HttpCompletionOption.ResponseHeadersRead\" (#1387)"},{"Id":"356866373","IsPullRequest":false,"CreatedAt":"2018-09-04T15:34:46","Actor":"andras-ferencz","Number":"1385","RawContent":null,"Title":"Annoying wwwroot folder behavior - no failback mechanism for lack of an accessible index.html file.","State":"open","Body":"If your visual studio lags out and in the process you [whack your keyboard](https://dqbasmyouzti2.cloudfront.net/assets/content/cache/made/content/images/articles/BrokenComputer_XL_721_420_80_s_c1.jpg) and it somehow hits the right combination of hotkeys to move the wwwroot folder to, say, Pages or Shared, you're going to have a really bad time with this wonderful error: \r\n\r\n> The SPA default page middleware could not return the default page '/index.html' because it was not found, and no other middleware handled the request.\r\n\r\nI understand that managing to achieve this error is the equivalent of winning the [GRAND PRIZE](https://en.wikipedia.org/wiki/Golden_Raspberry_Awards), but hear me out here.\r\n\r\nAs you frantically search the internet for why your latest deployment destroyed everything for no reason whatsoever, you'll bet met with zero indication that, perhaps, just perhaps, a goddamned little gremlin from Redmond, WA moved your wwwroot folder underneath another folder.\r\n\r\nVisualStudio should definitely not let you accidentally move or drag the wwwroot (or any other folder that gets a specialized, unique icon - seriously, how tf has this not been implemented by 2018?); but Blazor itself, should have a failback mechanism for when it gets served without an accessible index.html page; even a single string of text that says \"hey i, the magnificent blazor, couldn't find wwwroot\". \r\n\r\n🐊","Url":"https://github.com/aspnet/Blazor/issues/1385","RelatedDescription":"Open issue \"Annoying wwwroot folder behavior - no failback mechanism for lack of an accessible index.html file.\" (#1385)"},{"Id":"356789193","IsPullRequest":false,"CreatedAt":"2018-09-04T12:34:46","Actor":"csnewman","Number":"1384","RawContent":null,"Title":"BrowserHttpMessageHandler reads body content to end","State":"open","Body":"Inside \"Blazor/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Services/Http.ts\", the response data is handled via \" responseData = await response.arrayBuffer();\", which reads the entire response stream to the end, and then returns the data, however this is the incorrect behaviour.\r\n\r\nHttpMessageHandler's should not buffer the response as this is handled within the HttpClient.\r\n\r\nThis means that method such as \"_httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, CancellationToken.None);\", are not handled correctly as the ResponseHeadersRead flag is not respected, due to the content body being read to the end.\r\n\r\nWe would need to wrap the ReadableStream from the JS side to the c# side as the HttpContent in the ReceiveResponse in BrowserHttpMessageHandler.\r\n\r\nIs there any chance of getting this fixed? As I've managed to get the c# signalr client working with long polling, but can't get the \"ServerSentEventsTransport\" to work until this is fixed, as otherwise the client timeouts trying to read the content body to the end, when it shouldn't as the ResponseHeadersRead is passed.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1384","RelatedDescription":"Open issue \"BrowserHttpMessageHandler reads body content to end\" (#1384)"},{"Id":"356770513","IsPullRequest":true,"CreatedAt":"2018-09-04T11:38:05","Actor":"kant2002","Number":"1383","RawContent":null,"Title":"Add -c option in the blazor server","State":"open","Body":"- Pass configuration using MSBuild variable $(Configuration)\r\n- Parse command line parameters -c or --configuration to match dotnet command way of defining configuration\r\n\r\nSee #261","Url":"https://github.com/aspnet/Blazor/pull/1383","RelatedDescription":"Open PR \"Add -c option in the blazor server\" (#1383)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-09-13T05:30:04.2025225Z","RunDurationInMilliseconds":2330}