{"Data":{"Blog":{"FeedItems":[{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7 Preview 4. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2 now available","PublishedOn":"2018-04-12T17:24:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. This second preview includes many...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-now-available/","RawContent":null},{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7594709770","Type":"IssuesEvent","CreatedAt":"2018-04-27T00:43:23","Actor":"ws4u","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3101","RelatedDescription":"Opened issue \"The default location for storing mdf local database files\" (#3101) at aspnet/Home","RelatedBody":"In ASP.NET Core, the default location for storing mdf files is C:/users/username. But in ASP.NET, the mdf file is located in the App_Data folder under the project directory. I like this behaviour, because we can copy the entire project folder to another computer, and the project can still run. This is especially convenient when we ask students to submit their ASP.NET projects for marking. We just ask them to zip their entire project folders for submission. Then, we can then download their zip files and unzip and run. \r\n\r\nHowever, with the new location at c:/users/username, the above method of asking students to submit their projects and then marking their projects will no longer work. So I strongly suggest to restore the default location to the App_Data under the project directory. This is very important for educators to teach ASP.NET Core. Please advise. Thanks."},{"Id":"7594393241","Type":"IssuesEvent","CreatedAt":"2018-04-26T22:51:26","Actor":"pranavkm","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3098","RelatedDescription":"Closed issue \"No line numbers in Exceptions\" (#3098) at aspnet/Home","RelatedBody":"I am trying to log exceptions and wrote a very simple middleware to catch all of the exceptions. I am debugging locally and the middleware works fine, but there are no line numbers in the exception which is really what I was hoping to capture. The weird part is that when the request passes through to the developer exception page the line number is displayed there. \r\n\r\nHow can I get the line numbers in my exception handling middleware?\r\n\r\nYou can recreate this behavior in a new project.\r\n\r\n                app.UseDeveloperExceptionPage();\r\n                app.UseMiddleware<ExceptionLoggingMiddleware>();\r\n\r\n    public class ExceptionLoggingMiddleware\r\n    {\r\n        private readonly RequestDelegate _next;\r\n\r\n        public ExceptionLoggingMiddleware(RequestDelegate next)\r\n        {\r\n            _next = next;\r\n        }\r\n\r\n        public async Task Invoke(HttpContext context)\r\n        {\r\n            try\r\n            {\r\n                await _next.Invoke(context);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                TryLogException(context, e);\r\n                throw;\r\n            }\r\n        }\r\n    }\r\n"},{"Id":"7593562144","Type":"IssuesEvent","CreatedAt":"2018-04-26T19:44:06","Actor":"chrisckc","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3100","RelatedDescription":"Opened issue \"Performance difference when using ResponseBuffering middleware\" (#3100) at aspnet/Home","RelatedBody":"The default configuration of a new .Net Core project does not use Reponse Buffering, instead the response is sent in chunks so that the result payload can start to be sent while it is being serialized which is supposed to improve memory usage and performance. This is a new feature in .NET Core, in my initial testing when coming from the previous generation of .NET i was not aware of this new feature that was enabled by default.\r\n\r\nI have done some basic testing to help decide whether it is worth sticking with the default or using the ResponseBuffering middleware which in theory would slow things down and consume more server RAM.\r\n\r\nThe tests where run from a .Net Core 2 Web API using an in memory data repository. The throughput tests where ran for 10 seconds several times over to obtain an average result. The payload size is the total size including the headers. The memory usage was monitored during a 60 second throughput test. (observing the 3 dotnet processes found).\r\n\r\nEverything was performed locally on a Macbook Pro with 16GB RAM.\r\n\r\n**Throughput tests returning a 730 Byte JSON payload:**\r\nDefault configuration (no response buffering):\r\n- Average throughput: ~3500 requests/sec\r\n- Peak memory usage ~900MB\r\n\r\nUsing the ResponseBuffering middleware:\r\n- Average throughput: ~4000 requests/sec\r\n- Peak memory usage ~900MB\r\n\r\nThe results were surprising, faster average throughput when using ResponseBuffering with no real difference in memory usage so i then tried the same with a 10KB payload...\r\n\r\n**Throughput tests returning a 10KB JSON payload:**\r\nDefault configuration (no response buffering):\r\n- Average throughput: ~2500 requests/sec\r\n- Peak memory usage ~400MB\r\n\r\nUsing the ResponseBuffering middleware:\r\n- Average throughput: ~2400 requests/sec\r\n- Peak memory usage ~300MB\r\n\r\nThe results were very close, so i then tried the same with a 100KB payload...\r\n\r\n**Throughput tests returning a 100KB JSON payload:**\r\nDefault configuration (no response buffering):\r\n- Average throughput: ~350 requests/sec\r\n- Peak memory usage ~700MB\r\n\r\nUsing the ResponseBuffering middleware:\r\n- Average throughput: ~360 requests/sec\r\n- Peak memory usage ~350MB\r\n\r\nAgain, the results very close, but notice the significantly less memory overhead when using the Response Buffering middleware, so i then tried the same with a 1MB payload...\r\n\r\n**Throughput tests returning a 1MB JSON payload:**\r\nDefault configuration (no response buffering):\r\n- Average throughput: ~24 requests/sec\r\n- Peak memory usage ~750MB\r\n\r\nUsing the ResponseBuffering middleware:\r\n- Average throughput: ~18 requests/sec\r\n- Peak memory usage ~350MB\r\n\r\nWith a 1MB payload the default configuration has faster throughput, but the memory overhead is still much higher. Obviously a 1MB payload is excessive and the API should implement paging to split into multiple smaller requests, but for the purposes of testing it was worth seeing what the result would be.\r\n\r\nConsidering the significant issues that the default configuration without Response Buffering causes when errors occur during serialization, my tests show that it is well worth adding Response Buffering as there seems to be no benefit to not using it, only downsides.\r\n\r\nRefer to this thread for a description of the issues:\r\nhttps://github.com/aspnet/Home/issues/2285\r\n\r\nI did a quick test from a separate machine over the network as a sanity check and the results were not much different, but i plan to do a better test in the future with a more of a production setup.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7593289199","Type":"IssuesEvent","CreatedAt":"2018-04-26T18:48:32","Actor":"molant","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3099","RelatedDescription":"Opened issue \"JavaScript content-type should be \"text/javascript\" instead of \"application/javascript\" and should contain charset=utf-8\" (#3099) at aspnet/Home","RelatedBody":"[The WHATWG recommendation is to use `text/javascript`](https://html.spec.whatwg.org/multipage/infrastructure.html#dependencies)\r\n\r\n![image](https://user-images.githubusercontent.com/606594/39325448-10fa2c94-4947-11e8-9452-9edc83aeb7c0.png)\r\n\r\nAlso, text based resources should contain `charset=utf-8` (if they are in `utf-8` which should be the case):\r\n\r\n* [make sure things render correctly](https://www.w3.org/International/questions/qa-what-is-encoding)\r\n* prevent the browsers from going down more complicated paths to guess what's the right charset of the file\r\n\r\nThere's more documentation in [this documentation](https://sonarwhal.com/docs/user-guide/rules/rule-content-type/)\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7594698611","Type":"PullRequestEvent","CreatedAt":"2018-04-27T00:38:54","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2154","RelatedDescription":"Opened pull request \"Fix not setting HttpConnection.ConnectionId\" (#2154) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/2148"},{"Id":"7594061360","Type":"IssuesEvent","CreatedAt":"2018-04-26T21:26:01","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2153","RelatedDescription":"Opened issue \"Add ConnectionId to logging scope in .NET Client logging\" (#2153) at aspnet/SignalR","RelatedBody":"We should start a scope with the connection ID in each of `Invoke`, `Send`, `Stream`, and when invoking handlers, etc."},{"Id":"7593929307","Type":"IssuesEvent","CreatedAt":"2018-04-26T20:57:49","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2152","RelatedDescription":"Opened issue \"Consider putting Connection ID back in the log messages\" (#2152) at aspnet/SignalR","RelatedBody":"Today we log the connection ID as a \"scope\" parameter, which tags it on every log throughout the application that is written in the scope of a specific connection. This is goodness. However, some loggers (lookin at you Azure App Service Logger) don't include Scope information in the log messages and don't have a way to do so. For these, it would be useful if the SignalR log messages included the connection ID. We should consider putting the connection ID back into the individual log messages (in the actual message) so we can get that data.\r\n\r\nSimilarly, we should expose scopes in Azure App Service, but that's a separate issue."},{"Id":"7593692550","Type":"IssuesEvent","CreatedAt":"2018-04-26T20:10:16","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2151","RelatedDescription":"Opened issue \"Call Access Token Factory once and cache the result until a 401 occurs\" (#2151) at aspnet/SignalR","RelatedBody":"To improve the ability to \"refresh\" expired tokens, we should consider caching the access token provided by the factory. Then, when an HTTP request gets a `401`, we call the factory again before re-issuing the request. That way the user can configure a process to \"refresh\" the token without forcing the connection to be reestablished\r\n\r\n* For the WebSockets transport, this has no effect. There is only ever a single request. This logic would **not** cover reconnecting in the event of something like #1159 (where the WebSocket is terminated when the token expires)\r\n* For the SSE transport, this only affects `POST` (send) requests. We would call the token factory again and re-issue the send. The unsent data would stay buffered in the pip\r\n* For Long Polling, this affects `POST` requests like SSE, and the `GET` (poll) requests. The client would assume that a `401` error indicates that the data is **still in the pipe** for them to read. The server would be expected to keep data in the pipe in the case of a `401`"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7595213297","Type":"PullRequestEvent","CreatedAt":"2018-04-27T03:53:25","Actor":"nalanxiancai","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7715","RelatedDescription":"Opened pull request \"[Fixes #4317] UrlResolutionTagHelper doesn't work with TagHelpers tha…\" (#7715) at aspnet/Mvc","RelatedBody":"…t run before and supress output"},{"Id":"7595185489","Type":"IssuesEvent","CreatedAt":"2018-04-27T03:42:31","Actor":"veryuglyman","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7714","RelatedDescription":"Opened issue \"---------- About Attribute --------------\" (#7714) at aspnet/Mvc","RelatedBody":"In the method called inside the asp.net core mvc controller method, my custom attribute will automatically call, what is the reason\r\n\r\n在asp.net core mvc 控制器里面的方法和方法里面调用的方法上，我自定义的attribute会自动调用，是什么原因"},{"Id":"7594639851","Type":"IssuesEvent","CreatedAt":"2018-04-27T00:16:01","Actor":"austindrenski","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7713","RelatedDescription":"Opened issue \"Greater precedence for ActionResult<T>\" (#7713) at aspnet/Mvc","RelatedBody":"I'm working with `2.1.0-preview2-final` and trying to get `ApiDescription` to report that a method returning `Task<ActionResult<T>>` translates into an endpoint with a response type of `T` on success.\r\n\r\nBased on the current implementation, it looks like `ActionResult<T>` is only being set for `Status200OK` when there are ___no__ other filters_ at play:\r\n\r\nhttps://github.com/aspnet/Mvc/blob/1b9372f5b0c490209d49e6051f5f1b615094f399/src/Microsoft.AspNetCore.Mvc.ApiExplorer/DefaultApiDescriptionProvider.cs#L418-L440\r\n\r\nBased on the announcement, I expected `ActionResult<T>` to be used for `Status200OK` _before_ the attributes were considered, allowing explicit attributes to overrule the inference from `ActionResult<T>`:\r\n\r\n> We want to embrace the OpenAPI specification (previously called “Swagger”) and make Web APIs built with ASP.NET Core more descriptive. Today you need a lot of “attribute soup” to get a reasonable OpenAPI spec from ASP.NET Core. We plan to introduce __an opinionated layer__ that infers the possible responses based on what you’re likely to have done with your actions (__attributes still win when you want to be explicit__).\r\nhttps://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/#mvc \r\n\r\n### Questions\r\n\r\n1. Is the current behavior intentional/frozen for 2.1?\r\n2. If it isn't frozen, is the team be open to a pull request in this area?\r\n\r\n\r\n### Potential change\r\n```c#\r\n// Set the OK response to the runtime type by default.\r\nif (type != null)\r\n{\r\n    objectTypes[StatusCodes.Status200OK] = type;\r\n}\r\n\r\n// Register the attributes, potentially overriding the default OK response.\r\nvar contentTypes = new MediaTypeCollection();\r\nif (responseMetadataAttributes != null)\r\n{\r\n    foreach (var metadataAttribute in responseMetadataAttributes)\r\n    {\r\n        metadataAttribute.SetContentTypes(contentTypes);\r\n\r\n        if (metadataAttribute.Type != null)\r\n        {\r\n            objectTypes[metadataAttribute.StatusCode] = metadataAttribute.Type;\r\n        }\r\n    }\r\n}\r\n```\r\n"},{"Id":"7592943116","Type":"IssuesEvent","CreatedAt":"2018-04-26T17:44:17","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6954","RelatedDescription":"Closed issue \"FormTagHelper support for asp-protocol (& asp-host)\" (#6954) at aspnet/Mvc","RelatedBody":"Currently the difference between the `AnchorTagHelper` and the `FormTagHelper` is the following:\r\n\r\n|                    | Anchor | Forms |\r\n|--------------------|--------|-------|\r\n| asp-action         | ✔      | ✔     |\r\n| asp-controller     | ✔      | ✔     |\r\n| asp-area           | ✔      | ✔     |\r\n| asp-page           | ✔      | ✔     |\r\n| asp-page-handler   | ✔      | ✔     |\r\n| asp-fragment       | ✔      | ✔     |\r\n| asp-host           | ✔      |       |\r\n| asp-protocol       | ✔      |       |\r\n| asp-route          | ✔      | ✔     |\r\n| asp-all-route-data | ✔      | ✔     |\r\n| asp-route-*        | ✔      | ✔     |\r\n\r\nSince the `AnchorTagHelper` supports protocol and host, I don't think it should be too difficult to add support for them in the `FormTagHelper`. If need be I can try to make a PR for it.\r\n\r\nI needed the ability to set the protocol on a form (to create a absolute url), and while checking the documentation/source code I found that there wasn't currently support for it on the forms tag.\r\n\r\nShould I create a PR, or is this omitted/disabled for a reason?"},{"Id":"7592910972","Type":"IssuesEvent","CreatedAt":"2018-04-26T17:38:01","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7603","RelatedDescription":"Closed issue \"A complex action parameter isn't shown as required when marked with `RequiredAttribute`\" (#7603) at aspnet/Mvc","RelatedBody":"Using 2.1.0-preview2:\r\n\r\nWhen configuring the following two APIs on the controller:\r\n```csharp\r\n[HttpPost]\r\npublic IActionResult ApiWithComplexParameters(Movie nonRequired, [Required]Movie required)\r\n{\r\n    return Ok();\r\n}\r\n\r\n[HttpPost(\"/custom\")]\r\npublic IActionResult ApiWithSimpleParameters(string nonRequiredParam, [Required]string requiredParam){\r\n    return Ok();\r\n}\r\n```\r\n\r\nSwagger shows only the `string requiredParam` as required and the red asterisk isn't shown for the `Movie required` parameter:\r\n![image](https://user-images.githubusercontent.com/34246760/38382737-95f0174e-38bf-11e8-9baa-5390e693a2d7.png)\r\n![image](https://user-images.githubusercontent.com/34246760/38382755-a024e55a-38bf-11e8-8ef8-abeac9ca025e.png)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7590681395","Type":"PullRequestEvent","CreatedAt":"2018-04-26T11:19:04","Actor":"cw882","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1772","RelatedDescription":"Closed pull request \"Updated tests\" (#1772) at aspnet/Identity","RelatedBody":""},{"Id":"7590649266","Type":"PullRequestEvent","CreatedAt":"2018-04-26T11:12:17","Actor":"cw882","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1772","RelatedDescription":"Opened pull request \"Updated tests\" (#1772) at aspnet/Identity","RelatedBody":""},{"Id":"7590393572","Type":"PullRequestEvent","CreatedAt":"2018-04-26T10:20:05","Actor":"cw882","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1771","RelatedDescription":"Opened pull request \"Added ability to add additional claims during sign-in.\" (#1771) at aspnet/Identity","RelatedBody":"This is to allow externally authenticated user claims to be appended to the signed in users' list of claims without being persisted to the database.\r\n\r\nRelated:  [#1685 Improve external login token/claim flow to identity in default templates](https://github.com/aspnet/Identity/issues/1685)"},{"Id":"7584684521","Type":"IssuesEvent","CreatedAt":"2018-04-25T12:51:49","Actor":"melvillo","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1770","RelatedDescription":"Opened issue \"2fa recovery code is invalid\" (#1770) at aspnet/Identity","RelatedBody":"Hi,\r\nSeems there is an issue with 2fa recovery code as it's not working.\r\n1. Create a new ASP.NET Core Web project with built-in authentication, and deploy the db as default schema\r\n2. Create a new user, and enable it's 2fa by using Microsoft Authentication app or Google's, copy the 2fa recovery code\r\n3. Log out, and re-Log in, but use the 2fa recovery code to reset the 2fa settings, then you can get the error message\r\n\r\nnetcoreapp2.0\r\nMicrosoft.AspNetCore.All            Version=\"2.0.6\" \r\nMicrosoft.EntityFrameworkCore.Tools          Version=\"2.0.2\""},{"Id":"7580136803","Type":"PullRequestEvent","CreatedAt":"2018-04-24T17:57:46","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1769","RelatedDescription":"Opened pull request \"AllowAnonymous for external login providers\" (#1769) at aspnet/Identity","RelatedBody":"Addresses #1762\r\n\r\nWhile using the global authorization filter, `ConfirmEmail` is not accessible when clicking the verification email link (when logged out). So adding the attribute to it as well.\r\n\r\n"},{"Id":"7577613802","Type":"IssuesEvent","CreatedAt":"2018-04-24T10:55:35","Actor":"Misanthrop87","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1768","RelatedDescription":"Opened issue \"Map asp.net core 2.0 Identity to existing DB schema\" (#1768) at aspnet/Identity","RelatedBody":"I have built a small web application with asp.net core 2.0 MVC. In this web application, I did not implement any authentication methods so far.\r\n\r\nRight now I have an MSSQL database running in the background and I can add/view/edit/delete users from the database. I adapted this tutorial and followed it pretty closely. However I also added some functionality like localization and stuff, and everything is running pretty smoothly.\r\n\r\nMy next goal is to enable authentication and authorization. The authentication part shall be straightforward. The goal is that the application will be running as an intranet solution. This means the authentication method just shall check if the Windows User is existing in the previously mentioned database. I don't want to create a separate login. However, it might be that there is a Windows user in the active directory, which is not part of the database. This User should just be able to see a default error page.\r\n\r\nI made quite a huge research and I also tried a lot of different stuff, however, I do absolutely not find any \"database first\" tutorial for this part or any other documentation which explains what to do.\r\n\r\nI actually \"just\" want to teach the asp.net core 2.0 identity framework that it shall look into my user-table and check if the current windows user is existent and if not to forward him to the error page. A second step would be to load all the roles which this user is assigned to from the mapping table.\r\n\r\nAny kind of help would be highly appreciated."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7594596229","Type":"PullRequestEvent","CreatedAt":"2018-04-27T00:00:04","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2528","RelatedDescription":"Merged pull request \"Pass configuration value to builds\" (#2528) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7594561692","Type":"PullRequestEvent","CreatedAt":"2018-04-26T23:47:32","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2528","RelatedDescription":"Opened pull request \"Pass configuration value to builds\" (#2528) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7593680976","Type":"IssuesEvent","CreatedAt":"2018-04-26T20:07:58","Actor":"p2atran","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2527","RelatedDescription":"Opened issue \"https kestrel causes script to load 4-5 times slower than without\" (#2527) at aspnet/KestrelHttpServer","RelatedBody":"I originally thought the bug was part of mvc, but it might be from kestrel.\r\n\r\nInformation can be found on this thread:\r\nhttps://github.com/aspnet/Mvc/issues/7704\r\n\r\nBut to sum it up, if you follow these instructions to get a new core 2.0 project:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/getting-started?view=aspnetcore-2.0\r\n\r\nThen add https in `UseKestrel` in program.cs, the program loads super slow. A 38mb script when loaded with the new/clean project took me about 8-9 seconds, where as with https kestrel it took 35s to 1min.\r\n\r\nA reproducible example can be found in the mvc thread in my last comment."},{"Id":"7593102955","Type":"PullRequestEvent","CreatedAt":"2018-04-26T18:14:09","Actor":"pakrym","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2526","RelatedDescription":"Opened pull request \"React to pool cleanup\" (#2526) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7588260106","Type":"IssuesEvent","CreatedAt":"2018-04-26T00:31:24","Actor":"joetherod","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2524","RelatedDescription":"Closed issue \"Asp Net MVC Core App getting Http Bad Request\" (#2524) at aspnet/KestrelHttpServer","RelatedBody":"The request doesnt seem to make it to the MVC Core application and no errors are thrown. The browser just returns 400 Bad Request. The url contains an accented character.\r\n\r\nuri encoded in javascript and part of url:\r\nParis%2C%20%C3%8Ele-de-France%20Region\r\nactual value:\r\nParis, Île-de-France Region\r\n\r\nHow do I configure Kestrel to allow the characters.\r\nThe originial app MVC 4 running in IIS allows the url request.\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7594711829","Type":"IssuesEvent","CreatedAt":"2018-04-27T00:44:12","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2310","RelatedDescription":"Closed issue \"Flaky test: WritePidFile_WorksAsExpected \" (#2310) at aspnet/Razor","RelatedBody":"This test [fails occasionally](http://aspnetci/viewLog.html?buildId=456254&buildTypeId=Lite_Razor) with the following error:\r\n\r\n```\r\nSystem.IO.IOException : The process cannot access the file 'C:\\Users\\asplab\\.dotnet\\pids\\build\\rzc-3176' because it is being used by another process.\r\n   at System.IO.FileSystem.DeleteFile(String fullPath)\r\n   at System.IO.File.Delete(String path)\r\n   at Microsoft.AspNetCore.Razor.Tools.ServerCommandTest.WritePidFile_WorksAsExpected() in /_/test/Microsoft.AspNetCore.Razor.Tools.Test/ServerCommandTest.cs:line 55\r\n```"},{"Id":"7594706549","Type":"PullRequestEvent","CreatedAt":"2018-04-27T00:42:03","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2312","RelatedDescription":"Merged pull request \"Specify RuntimeFrameworkVersion \\ NSLibraryVersion when running tests\" (#2312) at aspnet/Razor","RelatedBody":""},{"Id":"7594623902","Type":"PullRequestEvent","CreatedAt":"2018-04-27T00:10:04","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2312","RelatedDescription":"Opened pull request \"Specify RuntimeFrameworkVersion \\ NSLibraryVersion when running tests\" (#2312) at aspnet/Razor","RelatedBody":""},{"Id":"7594558496","Type":"IssuesEvent","CreatedAt":"2018-04-26T23:46:20","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2311","RelatedDescription":"Opened issue \"Broken tests: Build_RazorOutputPath_SetToNonDefault et al\" (#2311) at aspnet/Razor","RelatedBody":"These tests [fail](http://aspnetci/viewLog.html?buildId=456588&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally on OSX-Universe\r\n\r\n```\r\nNo stacktrace available\r\n```\r\n\r\nThis is likely a dupe of #2309 but we should figure out why we don't get any output when it happens on OSX."},{"Id":"7594468915","Type":"IssuesEvent","CreatedAt":"2018-04-26T23:15:19","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2310","RelatedDescription":"Opened issue \"Flaky test: WritePidFile_WorksAsExpected \" (#2310) at aspnet/Razor","RelatedBody":"This test [fails occasionally](http://aspnetci/viewLog.html?buildId=456254&buildTypeId=Lite_Razor) with the following error:\r\n\r\n```\r\nSystem.IO.IOException : The process cannot access the file 'C:\\Users\\asplab\\.dotnet\\pids\\build\\rzc-3176' because it is being used by another process.\r\n   at System.IO.FileSystem.DeleteFile(String fullPath)\r\n   at System.IO.File.Delete(String path)\r\n   at Microsoft.AspNetCore.Razor.Tools.ServerCommandTest.WritePidFile_WorksAsExpected() in /_/test/Microsoft.AspNetCore.Razor.Tools.Test/ServerCommandTest.cs:line 55\r\n```"},{"Id":"7594464527","Type":"IssuesEvent","CreatedAt":"2018-04-26T23:13:53","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2309","RelatedDescription":"Opened issue \"Broken tests: RazorCompile_NoopsWithNoFiles et all\" (#2309) at aspnet/Razor","RelatedBody":"These tests fail on Universe test runs:\r\n\r\n```\r\nMicrosoft.AspNetCore.Razor.Design.IntegrationTests.Assert+BuildFailedException : Build failed.\r\ndotnet msbuild /nr:false /restore /p:_RazorBuildServerPipeName=0dae5e52-a070-466f-841a-82e90065d7d6 /t:RazorCompile /p:Configuration=Release \r\n\r\nMicrosoft (R) Build Engine version 15.7.172.38367 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj...\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : warning NU1603: SimpleMvc depends on Microsoft.NETCore.App (>= 2.1.0-rc1-26424-03) but Microsoft.NETCore.App 2.1.0-rc1-26424-03 was not found. An approximate best match of Microsoft.NETCore.App 2.2.0-preview1-26424-04 was resolved.\r\n  Generating MSBuild file /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/obj/SimpleMvc.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/obj/SimpleMvc.csproj.nuget.g.targets.\r\n  Restore completed in 975.74 ms for /Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj.\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : warning NU1603: SimpleMvc depends on Microsoft.NETCore.App (>= 2.1.0-rc1-26424-03) but Microsoft.NETCore.App 2.1.0-rc1-26424-03 was not found. An approximate best match of Microsoft.NETCore.App 2.2.0-preview1-26424-04 was resolved.\r\n/Users/aspnetci/Documents/buildAgent/temp/buildTmp/Razor/cf21ufjh.qaw/SimpleMvc/SimpleMvc.csproj : error : The project was restored using Microsoft.NETCore.App version 2.2.0-preview1-26424-04, but with current settings, version 2.1.0-rc1-26424-03 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.\r\n\r\n\r\n\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.Assert.BuildPassed(MSBuildResult result) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/Assert.cs:line 27\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.RazorCompileIntegrationTest.RazorCompile_NoopsWithNoFiles() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/RazorCompileIntegrationTest.cs:line 45\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nThis is almost certainly happening because we updated the SDK. If we set `/p:VerifyMatchingImplicitPackageVersion=false` we get:\r\n\r\n```\r\nSystem.TypeInitializationException : The type initializer for 'Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest' threw an exception.\r\n---- System.InvalidOperationException : Cannot find reference assembly 'Microsoft.AspNetCore.Html.Abstractions.dll' file for package Microsoft.AspNetCore.Html.Abstractions.Reference\r\nStack Trace:\r\nat Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest.CreateDescriptor_BuildsDescriptorsFromSimpleTypes() in D:\\dd\\Razor\\test\\Microsoft.CodeAnalysis.Razor.Test\\DefaultTagHelperDescriptorFactoryTest.cs:line 1756\r\n----- Inner Stack Trace -----\r\nat Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\nat Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\nat Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\nat System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\nat System.Linq.Enumerable.SelectEnumerableIterator`2.ToArray()\r\nat System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\nat Microsoft.CodeAnalysis.TestCompilation.GetMetadataReferences(Assembly assembly) in D:\\dd\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.Common\\TestCompilation.cs:line 30\r\nat Microsoft.CodeAnalysis.TestCompilation.Create(Assembly assembly, SyntaxTree syntaxTree) in D:\\dd\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.Common\\TestCompilation.cs:line 41\r\nat Microsoft.CodeAnalysis.Razor.Workspaces.DefaultTagHelperDescriptorFactoryTest..cctor() in D:\\dd\\Razor\\test\\Microsoft.CodeAnalysis.Razor.Test\\DefaultTagHelperDescriptorFactoryTest.cs:line 25\r\n```\r\ninstead.\r\n\r\nCC @pranavkm  who said he'd look into this."},{"Id":"7594137408","Type":"IssuesEvent","CreatedAt":"2018-04-26T21:43:16","Actor":"ryanbrandenburg","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2225","RelatedDescription":"Closed issue \"IViewLocalizer and string concatenation\" (#2225) at aspnet/Razor","RelatedBody":"I was trying to concatenate localized strings, but it was a little harder than I expected.\r\n\r\nBelow is the minimum Razor code to reproduce my difficulties, which could perfectly be part of my short comings 😃 \r\n\r\n```csharp\r\n@inject IViewLocalizer Localizer\r\n@{\r\n    ViewData[\"Title\"] = Localizer[\"Some\"] + \" \" + Localizer[\"Value\"];\r\n}\r\n```\r\n\r\nI was expecting my page title to be `Some Value`, but instead got `Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString Microsoft.AspNetCore.Mvc.Localization.LocalizedHtmlString`\r\n\r\nThe following code without concatenation produces `Some` as the expected page title:\r\n```csharp\r\n@inject IViewLocalizer Localizer\r\n@{\r\n    ViewData[\"Title\"] = Localizer[\"Some\"];\r\n}\r\n```\r\n\r\nAfter some trial and error, I decide to check the LocalizedHtmlString and used the Value property like this:\r\n\r\n```csharp\r\n@inject IViewLocalizer Localizer\r\n@{\r\n    ViewData[\"Title\"] = Localizer[\"Some\"].Value + \" \" + Localizer[\"Value\"].Value;\r\n}\r\n```\r\n\r\nAnd this got me the expected result. Maybe this is by design, but couldn't find a hint in the docs and to me it isn't very intuitive, because without string concatenation it is working as expected."},{"Id":"7593134222","Type":"IssuesEvent","CreatedAt":"2018-04-26T18:19:50","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2296","RelatedDescription":"Closed issue \"Publishing an app that references a Razor class library does not publish the class library views dll\" (#2296) at aspnet/Razor","RelatedBody":"Found this on @jbagga's VM when debugging a publish to Azure scenario. The scenario was Main App references Razor Pages Class Library. When publishing to a folder from VS, the views dll did not get copied over to the publish directory. Publishing from the command line worked fine."},{"Id":"7588013529","Type":"IssuesEvent","CreatedAt":"2018-04-25T23:06:11","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2269","RelatedDescription":"Closed issue \"Attach ProjectEngine and TagHelpers to ProjectSnapshot\" (#2269) at aspnet/Razor","RelatedBody":"We need to create a Project Engine per `ProjectSnapshot` and also attach the collection of tag helpers to the project snapshot.\r\n\r\nThese needs to respond to updates and changes in configuration appropriately.\r\n\r\nWe should move the creation of the project engine out of the parser and into the project snapshots themselves."},{"Id":"7588012749","Type":"PullRequestEvent","CreatedAt":"2018-04-25T23:05:55","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2304","RelatedDescription":"Merged pull request \"Add documents, engine, tag helpers to snapshot\" (#2304) at aspnet/Razor","RelatedBody":"The project snapshot now maintains a RazorProjectEngine as well as set\r\nof Tag Helpers that are known for that snapshot.\r\n\r\nPivoted some more services to be snapshot-centric.\r\n\r\nAlso added the ability to track .cshtml documents to the project system.\r\nFor now most components just ignore document changes."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":12,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null},{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":97,"FavoriteCount":55,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-04-27T05:30:13.831006Z","RunDurationInMilliseconds":7524}