{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6711485151","Type":"PullRequestEvent","CreatedAt":"2017-10-13T04:12:53","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14484","RelatedDescription":"Opened pull request \"Fix #14426\" (#14484) at dotnet/coreclr","RelatedBody":"Added a more flexible IL master breakpoint that can:\r\n   a) bind to native offset 0 of each jitted code body\r\n   b) use a MethodDescFilter so that only jitted code for one generic instance receives breakpoints\r\n\r\nThe remaining change is simply to switch step-in and trace stepping to use that new breakpoint binding behavior instead of the code version specific binding behavior that was used before. This ensures that even if the code version changes after the trace occurs we will still have a breakpoint on the alternate code versions and complete the stepping operation."},{"Id":"6711406090","Type":"IssuesEvent","CreatedAt":"2017-10-13T03:36:25","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14421","RelatedDescription":"Closed issue \"Tiered jitting should not occur in debuggable code\" (#14421) at dotnet/coreclr","RelatedBody":"When the runtime is requested to generate debuggable code, these methods need to stay debuggable for the lifetime of the application. If tiered jitting replaced them with more optimized code then stepping, breakpoints, local evaluation, EnC, and other parts of the debugging experience would become unexpectedly worse or fail entirely."},{"Id":"6711285506","Type":"IssuesEvent","CreatedAt":"2017-10-13T02:45:59","Actor":"dotnet-mc-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14483","RelatedDescription":"Opened issue \"Test failure: Interop_ArrayMarshalling._BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_/_BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_cmd\" (#14483) at dotnet/coreclr","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `Interop_ArrayMarshalling._BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_/_BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_cmd` has failed.\n\n\n    Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'MarshalBoolArrayNative': The specified module or one of its dependencies could not be found.\n     (Exception from HRESULT: 0x8007007E)\n       at MarshalBoolArray.DoCallBackIn(CallBackIn callback)\n       at MarshalBoolArray.Main()\n    /Users/dotnet-bot/dotnetbuild/work/1ae05bb1-a6e4-4794-b4eb-e2e67f29b8b4/Work/b029dd58-4e41-4cac-9f2e-278a7d84fbaa/Unzip/BoolArray/MarshalBoolArrayTest/MarshalBoolArrayTest.sh: line 243:  9337 Abort trap: 6           $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\n    \n    \n    Return code:      1\n    Raw output file:      /Users/dotnet-bot/dotnetbuild/work/1ae05bb1-a6e4-4794-b4eb-e2e67f29b8b4/Work/b029dd58-4e41-4cac-9f2e-278a7d84fbaa/Unzip/Reports\\Interop.ArrayMarshalling\\BoolArray\\MarshalBoolArrayTest\\MarshalBoolArrayTest.output.txt\n    Raw output:\n    BEGIN EXECUTION\n    /Users/dotnet-bot/dotnetbuild/work/1ae05bb1-a6e4-4794-b4eb-e2e67f29b8b4/Payload/corerun MarshalBoolArrayTest.exe\n    Expected: 100\n    Actual: 134\n    END EXECUTION - FAILED\n    Test Harness Exitcode is : 1\n    \n    To run the test:\n    > set CORE_ROOT=/Users/dotnet-bot/dotnetbuild/work/1ae05bb1-a6e4-4794-b4eb-e2e67f29b8b4/Payload\n    > /Users/dotnet-bot/dotnetbuild/work/1ae05bb1-a6e4-4794-b4eb-e2e67f29b8b4/Work/b029dd58-4e41-4cac-9f2e-278a7d84fbaa/Unzip/BoolArray/MarshalBoolArrayTest/MarshalBoolArrayTest.sh\n    \n    Expected: True\n    Actual:   False\n\n        Stack Trace:\n\n        \nBuild : Master - 20171013.01 (Core Tests)\nFailing configurations:\n- osx.1012.amd64\n  - x64\n- ubuntu.1604.amd64\n  - x64\n- redhat.72.amd64\n  - x64\n- debian.82.amd64\n  - x64\n- ubuntu.1404.amd64\n  - x64\n- fedora.25.amd64\n  - x64\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171013.01/workItem/Interop.ArrayMarshalling.XUnitWrapper/analysis/xunit/Interop_ArrayMarshalling._BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_~2F_BoolArray_MarshalBoolArrayTest_MarshalBoolArrayTest_cmd"},{"Id":"6711283974","Type":"PullRequestEvent","CreatedAt":"2017-10-13T02:45:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14404","RelatedDescription":"Merged pull request \"Allow not to build SOS.NETCore.dll\" (#14404) at dotnet/coreclr","RelatedBody":"This commit allows developers to build S.P.CoreLib.dll without building SOS.NETCore.dll via running the following command:\r\n - build.cmd (arch) release windowsmscorlib -- /p:SkipSOS=true"},{"Id":"6711226008","Type":"IssuesEvent","CreatedAt":"2017-10-13T02:21:25","Actor":"ibocon","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14482","RelatedDescription":"Opened issue \"How to debug System.IO.FileNotFoundException in System.Private.CoreLib.dll?\" (#14482) at dotnet/coreclr","RelatedBody":"[StackOverFlow](https://stackoverflow.com/questions/46721530/c-sharp-net-core-how-to-debug-system-io-filenotfoundexception-in-system-private)\r\n\r\nWhen I run .NET Core Web API Application on VS 2017,\r\nIn Output's Debug panel, keep showing me Exception throw:\r\n\r\n'System.IO.FileNotFoundException' in System.Private.CoreLib.dll\r\n\r\nHowever, application runs well without stoping or malfunctioning.\r\nI know Exception always means somthing needs to be cared.\r\n\r\nSo, how can I search what File is Not Found when run CoreCLR?\r\n"},{"Id":"6711216262","Type":"PullRequestEvent","CreatedAt":"2017-10-13T02:17:24","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14481","RelatedDescription":"Opened pull request \"Fixed stack probing for RHEL 6.9 (Linux kernel 2.6.32)\" (#14481) at dotnet/coreclr","RelatedBody":"Fixed issue #13740.\r\n\r\nThe problem was about stack overflow check via probing for enormous frame size. RHEL6.9 uses 2.6.32 Linux kernel which maps new stack pages just in case they are already allocated (using rsp)  otherwise it produces SIGSEGV.\r\n\r\nThe fix preallocates required stack, performs SO check and deallocates stack after. "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6711390085","Type":"PullRequestEvent","CreatedAt":"2017-10-13T03:29:30","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7829","RelatedDescription":"Merged pull request \"Use temporary path for fake deps.json in test\" (#7829) at dotnet/cli","RelatedBody":"Porting from master to release/2.0.0 to let this propagate to the other branches.\r\n"},{"Id":"6711345396","Type":"IssuesEvent","CreatedAt":"2017-10-13T03:10:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7812","RelatedDescription":"Closed issue \"Failed to create prime the NuGet cache. new failed with: 5\" (#7812) at dotnet/cli","RelatedBody":"_From @Petermarcu on October 11, 2017 22:49_\n\n@dinjonya opened this here: https://github.com/dotnet/core/issues/1022\r\n\r\non macOs version is 10.13\r\n\r\ndotnet core install 1.04 & 2.0 \r\nmy prj use .net core 1.04\r\nwhen restore or build or run    console print\r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\r\n\r\nTelemetry\r\n--------------\r\nThe .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include command-line arguments. The data is collected by Microsoft andshared with the community.\r\nYou can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.\r\nYou can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.\r\n\r\nConfiguring...\r\n-------------------\r\nA command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.\r\nDecompressing 100% 4866 ms\r\nExpanding 100% 6208 ms\r\nFailed to create prime the NuGet cache. new failed with: 5   \r\n\n\n_Copied from original issue: NuGet/Home#6017_"},{"Id":"6711018472","Type":"PullRequestEvent","CreatedAt":"2017-10-13T00:54:45","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7830","RelatedDescription":"Opened pull request \"Merge release/2.0-vs into release/2.0.0\" (#7830) at dotnet/cli","RelatedBody":"Noticed that msbuild version was different. There were a few more checkins into release/2.0-vs than what was merged into release/2.0.0.\r\n\r\nThis was interfering with moving source-build forward without patches"},{"Id":"6710816213","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:33:43","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7829","RelatedDescription":"Opened pull request \"Use temporary path for fake deps.json in test\" (#7829) at dotnet/cli","RelatedBody":"Porting from master to release/2.0.0 to let this propagate to the other branches.\r\n"},{"Id":"6710804609","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:29:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7828","RelatedDescription":"Opened pull request \"Livarcocc patch 3\" (#7828) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6710794445","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:25:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7827","RelatedDescription":"Opened pull request \"Updating channel to dev/release/2.0\" (#7827) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli @nguerrera \r\n"},{"Id":"6710773282","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:18:05","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7826","RelatedDescription":"Opened pull request \"Use same build number for roslyn and F# satellites\" (#7826) at dotnet/cli","RelatedBody":""}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6709887129","Type":"IssuesEvent","CreatedAt":"2017-10-12T19:28:11","Actor":"virzak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/536","RelatedDescription":"Opened issue \"public interface IValueConverter\" (#536) at dotnet/standard","RelatedBody":"Should IValueConverter be part of the .NET Standard?\r\n\r\nIt seems so since it is identical in [WPF](https://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx), [UWP](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.data.ivalueconverter) and [Xamarin Forms](https://developer.xamarin.com/api/type/Xamarin.Forms.IValueConverter/)\r\n\r\n\r\n"},{"Id":"6709248377","Type":"PullRequestEvent","CreatedAt":"2017-10-12T17:06:27","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/535","RelatedDescription":"Merged pull request \"Add links to API browser\" (#535) at dotnet/standard","RelatedBody":"Seems like we should link to the docs as well :-)\r\n\r\n/cc @mairaw @dend "},{"Id":"6708924779","Type":"PullRequestEvent","CreatedAt":"2017-10-12T15:58:43","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/535","RelatedDescription":"Opened pull request \"Add links to API browser\" (#535) at dotnet/standard","RelatedBody":"Seems like we should link to the docs as well :-)\r\n\r\n/cc @mairaw @dend "},{"Id":"6706260803","Type":"IssuesEvent","CreatedAt":"2017-10-12T06:03:58","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/534","RelatedDescription":"Opened issue \"NuGet for System.Collections.Immutable has unresolved dependency towards netstandard\" (#534) at dotnet/standard","RelatedBody":"@robert-j-engdahl commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/954)\n\n# Issue Title\r\n\r\nInstalling the NuGet package System.Collections.Immutable v1.4.0 targeting .Net 4.6.1 does not include its dependency towards netstandard.\r\n\r\n# General\r\nAfter\r\n\r\n    install-package System.Collections.Immutable -ProjectName SomeProject\r\n\r\nAnd using ImmutableHashSet<long> in some class, Visual Studio is fine, but my TeamCity build fails with the following errors:\r\n\r\n    Analysis\\Recalculation\\Recursive\\RecursiveAnalysisRecalculatorTest.cs(89, 104): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nThis goes for other types I've been using for ages such as IEnumerable<> and ValueType. \r\n\r\n(And if this is not the right place to file such an issue, you might fix the link for the project site given here https://www.nuget.org/packages/System.Collections.Immutable/)\n\n---\n\n@robert-j-engdahl commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/954#issuecomment-328532756)\n\nThis could be caused by my test projects being 4.6.1 and my production being 4.6.  \r\n\r\nIt did, however, not help to\r\n\r\n    Install-Package NETStandard.Library -Version 2.0.0\r\n\r\nThere might be issues that concern the backwards compatibility of 4.6.1 that I am not aware of.\n\n---\n\n@wijays commented on [Wed Sep 13 2017](https://github.com/dotnet/core/issues/954#issuecomment-329176381)\n\nRunning into the same issue on 4.6.2.\n\n---\n\n@robertbaker commented on [Fri Sep 29 2017](https://github.com/dotnet/core/issues/954#issuecomment-333268953)\n\nYou will need to install the VS 2017 (MSBuild 2017) on your team city server. Additionally 4.6.0 won't work, you need at least 4.6.2.\r\n\r\nhttps://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15\r\n\r\nAdditionally, I would recommend changing your nuget's to package reference if you haven't already. Look for packages that were installed using an older .net framework version, you will need to reinstall those to ensure you get the correct versions.\r\n\r\nPlease close this issue as it's not related to .net/standard/core\n\n---\n\n@Petermarcu commented on [Wed Oct 11 2017](https://github.com/dotnet/core/issues/954#issuecomment-336029593)\n\nThere are some issues with 4.6.1's support of .NET Standard 2.0. For example netstandard.dll version 2.0.0 isn't there and needs to be present with the application (or test in this case). I'm going to move this issue to dotnet/standard because I do think there could be a problem here that we need to look into.\n\n"},{"Id":"6706232327","Type":"IssuesEvent","CreatedAt":"2017-10-12T05:52:51","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/533","RelatedDescription":"Opened issue \"Not able to create a project containing app.xaml using Dot Net Standard 2.0\" (#533) at dotnet/standard","RelatedBody":"@marcusts commented on [Thu Aug 17 2017](https://github.com/dotnet/core/issues/855)\n\nI have installed all of the components, and can indeed create new projects using Dot Ne Standard and compile them.\r\n\r\n*However* I am not allowed to create a *solution based on Dot Net Standard 2.0.   Only single class libraries. Is this as intended?  If so, could you state it as a headline in your blogs and announcements?\r\n\r\nNormal users want to create a solution using this new technology.  So we want to house app.xaml in a Dot Net Standard project.  This appears to be impossible.\r\n\r\nAre you really asking us to house our solution's application page in an old-style PCL?\n\n---\n\n@svick commented on [Thu Aug 17 2017](https://github.com/dotnet/core/issues/855#issuecomment-323056709)\n\nWhat would be the advantage of making the library that contains app.xaml a .Net Standard library? I don't think you would be able to to use that app.xaml from e.g. an ASP.NET Core application, so I think making that library a .Net Framework library (not even a PCL) makes sense.\r\n\r\nOr am I missing something?\n\n---\n\n@marcusts commented on [Thu Aug 17 2017](https://github.com/dotnet/core/issues/855#issuecomment-323198812)\n\nI am a client-sever guy, hence the nature of my request.  I am not a web developer.\n\n---\n\n@Petermarcu commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/855#issuecomment-334912977)\n\nWhich types of applications are you trying to share your app.xaml across? WPF and UWP? These are UI frameworks and a layer above .NET Standard. Just using a .NET Framework library would allow you to share across multiple WPF applications. Can you give more insight into what you are trying to share across?\n\n---\n\n@Petermarcu commented on [Sun Oct 08 2017](https://github.com/dotnet/core/issues/855#issuecomment-335051945)\n\n/cc @kieranmo \n\n"},{"Id":"6705349379","Type":"IssuesEvent","CreatedAt":"2017-10-11T23:42:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Closed issue \"Did the generic term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place to ask this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6711618544","Type":"PullRequestEvent","CreatedAt":"2017-10-13T05:18:52","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24636","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25813-00, beta-25813-00, respectively (master)\" (#24636) at dotnet/corefx","RelatedBody":""},{"Id":"6711508615","Type":"IssuesEvent","CreatedAt":"2017-10-13T04:24:52","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24635","RelatedDescription":"Opened issue \"NamedPipeClientStream not handling error cases correctly\" (#24635) at dotnet/corefx","RelatedBody":"According to the documentation this isn't correct:\r\n\r\n```C#\r\n// The timeout has expired.\r\nif (errorCode == Interop.Errors.ERROR_SUCCESS)\r\n{\r\n    if (cancellationToken.CanBeCanceled)\r\n    {\r\n    ...\r\n```\r\n\r\nIt should be checking ERROR_SEM_TIMEOUT.\r\n\r\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa365800.aspx\r\nhttps://msdn.microsoft.com/en-us/library/cc232125.aspx\r\n\r\n"},{"Id":"6711476061","Type":"PullRequestEvent","CreatedAt":"2017-10-13T04:08:24","Actor":"brianrob","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24405","RelatedDescription":"Merged pull request \"EventSource.Redist Nuget Package\" (#24405) at dotnet/corefx","RelatedBody":"Create a new Microsoft.Diagnostics.Tracing.EventSource.Redist nuget package targeting net46.  The following work items need to be completed before this PR is ready for merge:\r\n\r\n - [X] Create project and solution file for Microsoft.Diagnostics.Tracing.EventSource.Redist.\r\n - [x] Copy the code into CoreFX and make it build.\r\n - [X] Produce a nuget package.\r\n"},{"Id":"6711470886","Type":"PullRequestEvent","CreatedAt":"2017-10-13T04:05:53","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24633","RelatedDescription":"Merged pull request \"PerfCounter: Use Array.Empty\" (#24633) at dotnet/corefx","RelatedBody":""},{"Id":"6711408345","Type":"IssuesEvent","CreatedAt":"2017-10-13T03:37:29","Actor":"milenstack","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24634","RelatedDescription":"Opened issue \"How to Disabled Customer HttpHeader (x-ms-* header) with HttpClient?\" (#24634) at dotnet/corefx","RelatedBody":"How to Disabled Customer HttpHeader (x-ms-* header) with HttpClient?\r\n\r\n```\r\nx-ms-request-root-id: e3d90637-45d0d4c5cdb27076\r\nx-ms-request-id: |e3d90637-45d0d4c5cdb27076.1.\r\nRequest-Id: |e3d90637-45d0d4c5cdb27076.1.1.\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6711586649","Type":"IssuesEvent","CreatedAt":"2017-10-13T05:03:38","Actor":"amitsaini12345","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22685","RelatedDescription":"Opened issue \"want feature for Data Anonations in MVC\" (#22685) at dotnet/roslyn","RelatedBody":"**.NET Core 2.0**: \r\n\r\n**Steps to Reproduce**: IN MVC\r\n\r\n1. How i can i common class having Data Annotation attributes of each entity of our models because many of columns have the same data Annotation like max length 100 etc. so that no need to write data annotation for each entities.\r\n\r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n"},{"Id":"6710932729","Type":"PullRequestEvent","CreatedAt":"2017-10-13T00:19:01","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22684","RelatedDescription":"Opened pull request \"Move dev15.5.x to latest IOperation analyzers for dogfooding\" (#22684) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6711337550","Type":"PullRequestEvent","CreatedAt":"2017-10-13T03:06:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4717","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4717) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6711333802","Type":"PullRequestEvent","CreatedAt":"2017-10-13T03:05:20","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4717","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4717) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6710848848","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:46:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4593","RelatedDescription":"Closed pull request \"Remove lowlevel list\" (#4593) at dotnet/corert","RelatedBody":"As [suggested](https://github.com/dotnet/corert/pull/4440#issuecomment-326749719) remove LowLevelList*"},{"Id":"6710848222","Type":"PullRequestEvent","CreatedAt":"2017-10-12T23:45:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/3962","RelatedDescription":"Closed pull request \"Changes to inline the cheap part of statics helpers\" (#3962) at dotnet/corert","RelatedBody":"Initial Version: this is the corert part - changes to the JIT Interfaces to communicate the addresses of the GC and non-GC static Areas.\r\n\r\n"},{"Id":"6710641660","Type":"PullRequestEvent","CreatedAt":"2017-10-12T22:34:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4716","RelatedDescription":"Merged pull request \"Log type system exceptions thrown as warnings\" (#4716) at dotnet/corert","RelatedBody":"This is temporary until we fix issue #72, but the scope for that issue seems rather large."},{"Id":"6710503469","Type":"PullRequestEvent","CreatedAt":"2017-10-12T21:53:40","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4716","RelatedDescription":"Opened pull request \"Log type system exceptions thrown as warnings\" (#4716) at dotnet/corert","RelatedBody":"This is temporary until we fix #72, but the scope for that issue seems rather large."},{"Id":"6709001461","Type":"PullRequestEvent","CreatedAt":"2017-10-12T16:13:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4641","RelatedDescription":"Merged pull request \"[ILVerify] Instantiate constraints of generic parameters used as instantiation\" (#4641) at dotnet/corert","RelatedBody":"Currently checking the constraints using `TypeSystemConstraintsHelpers.CheckConstraints` of the field `instance` of the following sample code will return false even though it is a valid instantiation:\r\n```\r\nclass Generic<T, S> where T : IEnumerable<S>\r\n{\r\n    Generic<T, S> instance;\r\n}\r\n```\r\nThis is caused by the `CheckConstraints` method not instantiating the constraints of instantiation parameters, but the constraints they are compared to are being instantiated. In this example, it is checked whether `IEnumerable<!!1>` can be cast to `IEnumerable<S>`, which returns false.\r\n\r\nIn order to fix this I implemented the instantiation of the generic constraints of the instantiation parameter in case it is a generic parameter itself. If one of the instantiated constraints of the instantiation parameter can be cast to the constraint to be checked, then the instantiation parameter itself also fulfills this constraint.\r\n\r\nI also added a test case for this scenario to the `TypeSystem.Tests`."},{"Id":"6708974600","Type":"PullRequestEvent","CreatedAt":"2017-10-12T16:08:20","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4715","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4715) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6708903533","Type":"PullRequestEvent","CreatedAt":"2017-10-12T15:54:48","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4715","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4715) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6708741639","Type":"PullRequestEvent","CreatedAt":"2017-10-12T15:25:17","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4714","RelatedDescription":"Opened pull request \"[ILVerify] Implement tracking of 'this' pointer state\" (#4714) at dotnet/corert","RelatedBody":"The ECMA standard defines that:\r\n\r\n> the verification algorithm shall treat the `this` pointer as uninitialized unless the base class constructor has been called. No operations can be performed on an uninitialized `this` except for storing into and loading from the object's fields.\r\n\r\nI implemented the tracking of the `this` pointer state in order to be able to verify these rules.\r\n\r\nIn order to test this new implementation, I had to adapt our current test-framework to be able to also test methods with a special name, e.g. `.ctor`. Since the framework relies on the test method's name, it was not previously possible to test a type's constructor.\r\nI have implemented special test case handling in the test data loader and added documentation on how to add test cases for specialname methods in the Readme.md.\r\nBasically the specialname method is defined as usual and a separate method (which may stay empty) has to be added, which defines the test case in the accustomed manner and also defines the name of the special method that should actually be tested. The method tester then takes the test parameters of the dummy method, but tests the specialname method.\r\n\r\nI have added several test cases for tracking the `this` state this way."},{"Id":"6708584964","Type":"IssuesEvent","CreatedAt":"2017-10-12T14:58:20","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4713","RelatedDescription":"Closed issue \"[ARM32/RyuJIT] Not implemented GetReferencedAssemblies\" (#4713) at dotnet/corert","RelatedBody":"I tried to run some Xamarin app under Tizen. After some workarounds it successfully compiled and linked. Then I run and get crash:\r\n```\r\n#5  0x001f7dbc in S_P_CoreLib_System_SR__get_Arg_PlatformNotSupported () at CoreRT/bin/obj/Linux.armel.Debug/System.Private.CoreLib/SR.cs:2803\r\n#6  0x001dfdc6 in S_P_CoreLib_System_PlatformNotSupportedException___ctor () at CoreRT/src/System.Private.CoreLib/shared/System/PlatformNotSupportedException.cs:21\r\n#7  0x003ad114 in S_P_Reflection_Core_System_Reflection_Runtime_Assemblies_RuntimeAssembly__GetReferencedAssemblies () at CoreRT/src/System.Private.Reflection.Core/src/System/Reflection/Runtime/General/ThunkedApis.cs:66\r\n#8  0x001ba51a in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_TizenPlatformServices_AppDomain__RegisterAssemblyRecursively () at CoreRT/src/System.Private.CoreLib/shared/System/Reflection/IntrospectionExtensions.cs:17\r\n#9  0x001b7134 in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__SetupInit () at CoreRT/src/System.Private.CoreLib/src/System/GC.cs:110\r\n#10 0x0019e19a in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__Init_0 () at CoreRT/src/System.Private.CoreLib/src/System/UIntPtr.cs:179\r\n#11 0x0019cc02 in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__Init () at CoreRT/src/System.Private.CoreLib/src/System/Array.cs:149\r\n#12 0x0018d6fc in CrossTemplate1_Tizen_Mobile_CrossTemplate1_Tizen_Mobile_Program__Main ()\r\n    at CoreRT/src/System.Private.CoreLib/src/Internal/Runtime/Augments/EnvironmentAugments.cs:127\r\n#13 0x0018c480 in CrossTemplate1_Tizen_Mobile__Module___MainMethodWrapper () at <stdin>:16707566\r\n#14 0x00183d1a in CrossTemplate1_Tizen_Mobile__Module___StartupCodeMain () at <stdin>:16707566\r\n#15 0x00026f40 in main (argc=1, argv=0xbefffe14) at CoreRT/src/Native/Bootstrap/main.cpp:332\r\n```\r\nit's because GetReferencedAssemblies is not implemented. In some places I saw that it was not implemented because of the design. Are there plans to implement this? How can I do that? I saw some implementation in CoreCLR in the native part(src/vm/assemblynative.cpp). Can I try to port this to CoreRT?"},{"Id":"6706817852","Type":"IssuesEvent","CreatedAt":"2017-10-12T08:41:23","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4713","RelatedDescription":"Opened issue \"[ARM32/RyuJIT] Not implemented GetReferencedAssemblies\" (#4713) at dotnet/corert","RelatedBody":"I tried to run some Xamarin app under Tizen. After some workarounds it successfully compiled and linked. Then I run and get crash:\r\n```\r\n#5  0x001f7dbc in S_P_CoreLib_System_SR__get_Arg_PlatformNotSupported () at CoreRT/bin/obj/Linux.armel.Debug/System.Private.CoreLib/SR.cs:2803\r\n#6  0x001dfdc6 in S_P_CoreLib_System_PlatformNotSupportedException___ctor () at CoreRT/src/System.Private.CoreLib/shared/System/PlatformNotSupportedException.cs:21\r\n#7  0x003ad114 in S_P_Reflection_Core_System_Reflection_Runtime_Assemblies_RuntimeAssembly__GetReferencedAssemblies () at CoreRT/src/System.Private.Reflection.Core/src/System/Reflection/Runtime/General/ThunkedApis.cs:66\r\n#8  0x001ba51a in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_TizenPlatformServices_AppDomain__RegisterAssemblyRecursively () at CoreRT/src/System.Private.CoreLib/shared/System/Reflection/IntrospectionExtensions.cs:17\r\n#9  0x001b7134 in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__SetupInit () at CoreRT/src/System.Private.CoreLib/src/System/GC.cs:110\r\n#10 0x0019e19a in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__Init_0 () at CoreRT/src/System.Private.CoreLib/src/System/UIntPtr.cs:179\r\n#11 0x0019cc02 in Xamarin_Forms_Platform_Tizen_Xamarin_Forms_Platform_Tizen_Forms__Init () at CoreRT/src/System.Private.CoreLib/src/System/Array.cs:149\r\n#12 0x0018d6fc in CrossTemplate1_Tizen_Mobile_CrossTemplate1_Tizen_Mobile_Program__Main ()\r\n    at CoreRT/src/System.Private.CoreLib/src/Internal/Runtime/Augments/EnvironmentAugments.cs:127\r\n#13 0x0018c480 in CrossTemplate1_Tizen_Mobile__Module___MainMethodWrapper () at <stdin>:16707566\r\n#14 0x00183d1a in CrossTemplate1_Tizen_Mobile__Module___StartupCodeMain () at <stdin>:16707566\r\n#15 0x00026f40 in main (argc=1, argv=0xbefffe14) at CoreRT/src/Native/Bootstrap/main.cpp:332\r\n```\r\nit's because GetReferencedAssemblies is not implemented. In some places I saw that it was not implemented because of the design. Are there plans to implement this? How can I do that? I saw some implementation in CoreCLR in the native part(src/vm/assemblynative.cpp). Can I try to port this to CoreRT?"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":72,"FavoriteCount":47,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-10-13T05:30:19.9506051Z","RunDurationInMilliseconds":7369}