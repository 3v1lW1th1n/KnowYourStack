{"Data":{"Blog":{"FeedItems":[{"Title":"Add a Search Bar to Your Xamarin Apps in iOS 11","PublishedOn":"2018-02-12T20:00:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As described in the Go Large with iOS 11 post, view controllers in iOS 11 can use large titles to improve the clarity of an app&#8217;s user interface. To complement a view controller&#8217;s large...","Href":"https://blog.xamarin.com/add-search-bar-xamarin-ios-11/","RawContent":null},{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null},{"Title":"Add Languages to Your Xamarin Apps with Multilingual App Toolkit","PublishedOn":"2018-02-08T20:10:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With Xamarin, you can extend your cross-platform apps with support for native speakers, reaching markets that might otherwise be overlooked. However, managing multiple languages and keeping everything...","Href":"https://blog.xamarin.com/add-languages-to-your-apps-with-xamarin-and-multilingual-app-toolkit/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Building Your First Intelligent App with Xamarin and Microsoft Cognitive Services","PublishedOn":"2018-02-07T19:39:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today&#8217;s apps must be “intelligent” to win app users’ loyalty, whether for a consumer app or a business app. With Xamarin.Forms and Microsoft Cognitive Services, you can easily create your first...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-building-first-intelligent-app-xamarin-microsoft-cognitive-services/","RawContent":null},{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7241979822","Type":"PullRequestEvent","CreatedAt":"2018-02-14T04:47:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1302","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Fragments & CodeBehind\" (#1302) at xamarin/xamarin-android","RelatedBody":"While trying to repro Issue #1296, I had a brilliant idea: let's use\r\nthe new CodeBehind support from 7c31899b!\r\n\r\nEverything then fell apart.\r\n\r\nFor starters, Issue #1296 deals with Fragments, and 7c31899b didn't\r\nsupport the presence of `<fragment/>` within Layout files.\r\n\r\nPlumb support for that, by adding:\r\n\r\n\tpartial class MainActivity {\r\n\t  partial void OnLayoutFragmentNotFound<T> (int resourceId, ref T type)\r\n\t    where T : global::Android.App.Fragment;\r\n\t}\r\n\r\nAnother issue was noticed as well: all the line numbers in the `#line`\r\npragmas were always `1`. This was narrowed down to a bug in\r\n`GetLineInfo()`.\r\n\r\nThen there's an issue with where I was using the CodeBehind file:\r\nwithin the `src/Mono.Android/Test` project, which is in the\r\n`Xamarin.Android.RuntimeTests` namespace. This prompted all manner of\r\nnamespace resolution failures:\r\n\r\n\terror CS0234: The type or namespace name 'App' does not exist in the namespace 'Xamarin.Android' (are you missing an assembly reference?)\r\n\t...\r\n\r\nFix this by using `CodeTypeReferenceOptions.GlobalReference` as much\r\nas is practical (which isn't enough), and by \"kludging\" up the\r\n`CodeNamespaceImport` construction so that we instead emit:\r\n\r\n\tusing global::System;\r\n\r\nFinally, the generated codebehind had some weird nesting going on:\r\n\r\n\tpartial class MainActivity {\r\n\t  public __first_text_view_Views first_text_view {get;}\r\n\t  public sealed partial class __first_text_view_Views {\r\n\t    public __second_text_view_Views second_text_view {get;}\r\n\t    public sealed partial class __second_text_view_Views {\r\n\t      public sealed partial class __csharp_simple_fragment_Views {\r\n\t        public sealed partial class __csharp_partial_assembly_Views {\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t}\r\n\r\nIt was bizarre *and* unusable: the `second_text_view` property --\r\ncorresponding to `<TextView android:id=\"@+id/second_text_view\" />` --\r\nwas *nested within* a generated `MainActivity.__first_text_view_Views`\r\ntype, and I'm not sure why that existed. Furthermore, it *can't* work,\r\nas the generated\r\n`MainActivity.__first_text_view_Views.__CreateClass___second_text_view_Views()`\r\nmethod depends on a constructor which doesn't exist:\r\n\r\n\tprivate @__second_text_view_Views @__CreateClass___second_text_view_Views() {\r\n\t  // There *is* a __second_text_view_Views(Activity) constructor,\r\n\t  // but not __second_text_view_Views(__first_text_view_Views).\r\n\t  return new @__second_text_view_Views(this);\r\n\t}\r\n\r\nI \"solved\" (?) this by updating `LoadWidgets()` so that it always used\r\n`widgetRoot` for all recursive calls to `LoadWidgets()`, so that there\r\nis only ever one root. This removed all the nested types."},{"Id":"7241852261","Type":"PullRequestEvent","CreatedAt":"2018-02-14T03:51:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1301","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Fragments & Shorter acw-map\" (#1301) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1296\r\n\r\nXamarin.Android attempts to expose the Java-based Android API as a\r\n\".NET feeling\" API. This takes many forms, such as prefixing interface\r\nnames with `I`, mapping `get` and `set` methods to properties, mapping\r\nlistener interfaces to events, and PascalCasing method names.\r\n\r\nThis also affects Java package names and C# namespaces.\r\n\r\nWhen creating the `.apk` file, we philosophically need to go the\r\nopposite direction: PascalCased members need to be mapped to\r\n\"something appropriate\" within Java. For example, many Android\r\nResource ids *must* be all lowercase, and Android doesn't support\r\npackage names starting with an uppercase letter in all circumstances.\r\n\r\nAt one point, we tried mapping C# PascalCased namespaces to camelCased\r\nnamespaces, so e.g. `MyExampleNamespace` became the\r\n`myExampleNamesapce` Java package within Java Callable Wrappers.\r\n\r\nThis turned out to be a Terrible Mistake, particularly on\r\ncase-sensitive filesystems, as if casing was *inconsistent*\r\n(`MyExampleNamespace` vs `MyExamplenamespace`), files might not be\r\npackaged.\r\n\r\nBy Mono for Android 1.0, we settled on just lowercasing the namespace\r\nname to produce Java package names within Android Callable Wrappers.\r\n\r\nThis was not without it's own problems; in particular, the assembly\r\nname wasn't involved, so if the \"same\" type (namespace + type) were\r\npresent in two different assemblies and we needed to generate Android\r\nCallable Wrappers, they'd \"collide,\" the build would fail, and we'd\r\nhave some unhappy customers.\r\n\r\nThis was later addressed in Xamarin.Android 5.1 by changing the Java\r\npackage name generation algorithm to be an MD5SUM of the assembly name\r\nand namespace name, thus allowing types to have assembly identity.\r\n(This was not without its own problems.)\r\n\r\nThen it gets slightly more complicated: Android allows type names to\r\nappear in various locations, such as in layout View XML. These don't\r\nallow \"just\" using the type name; the package name is required for\r\ntypes outside the `android.widget` Java package.\r\n\r\nInitially, we did nothing, so developers had to directly use the\r\nAndroid Callable Wrapper names:\r\n\r\n\t<myexamplenamespace.MyCustomCSharpView android:id=\"@+id/yay_csharp\" .../>\r\n\t<fragment android:name=\"myexamplenamespace.MyCustomCSharpFragment\" ... />\r\n\r\nWith the change in Xamarin.Android 5.1, *this couldn't work*; those\r\ntypes didn't exist anymore.\r\n\r\nTo square this circle, we processed the resource files to \"fixup\"\r\nidentifiers and replace them with the actual Android Callable Wrapper\r\nnames. We'd replace any/all of:\r\n\r\n\tMyExampleNamespace.MyCustomCSharpView                           // Full name\r\n\tMyExampleNamespace.MyCustomCSharpView, MyAssembly               // Partial assembly-qualified name\r\n\tMyExampleNamespace.MyCustomCSharpView, MyAssembly, Version=...  // Full assembly qualified name\r\n\tmyexamplenamespace.MyCustomCSharpView                           // compatibility name\r\n\r\nwith the appropriate md5'd Android Callable Wrapper name.\r\n\r\nBrilliant as this was, there was a problem: [Bug #61073][61073].\r\nIf the assembly had a wildcard in the assembly version:\r\n\r\n[61073]: https://bugzilla.xamarin.com/show_bug.cgi?id=61073\r\n\r\n\t[assembly: AssemblyVersion (\"1.0.0.*\")]\r\n\r\nthen the \"Full assembly qualified name\" value would change on *every\r\nbuild*, which had numerious unintended knock-on effects.\r\n\r\nThis was fixed in commit e5b1c92c, which worked largely by just\r\nkilling the Full assembly qualified name version entirely.\r\nXamarin.Android doesn't support embedding two different versions of\r\nthe same assembly, so this was considered to be fine.\r\n\r\n...except for one compatibility case: `<fragment/>`s can contain\r\n~arbitrary strings, and we support replacing the entire Full assembly\r\nqualified name within them:\r\n\r\n\t<fragment\r\n\t    android:name=\"MyExampleNamespace.MyCustomCSharpFragment, MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\t\t\t...\r\n\t/>\r\n\r\nHowever, in a post e5b1c92c world, the above now fails to load on the\r\ndevice, because it's *not* being appropriately fixed up!\r\n\r\n\tFATAL EXCEPTION: main\r\n\tProcess: Mono.Samples.HelloTests, PID: 22977\r\n\tjava.lang.RuntimeException: Unable to start activity ComponentInfo{Mono.Samples.HelloTests/mono.samples.HelloApp}: android.view.InflateException: Binary XML file line #1: Binary XML file line #1: Error inflating class fragment\r\n\t\t...\r\n\tCaused by: android.view.InflateException: Binary XML file line #1: Binary XML file line #1: Error inflating class fragment\r\n\tCaused by: android.view.InflateException: Binary XML file line #1: Error inflating class fragment\r\n\tCaused by: android.app.Fragment$InstantiationException: Unable to instantiate fragment Mono.Samples.Hello.MyFragment, Hello, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null: make sure class name exists, is public, and has an empty constructor that is public\r\n\t\t...\r\n\tCaused by: java.lang.ClassNotFoundException: Didn't find class \"Mono.Samples.Hello.MyFragment, Hello, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" on path: DexPathList[[zip file \"/data/app/Mono.Samples.HelloTests-1/base.apk\"],nativeLibraryDirectories=[/data/app/Mono.Samples.HelloTests-1/lib/arm64, /system/fake-libs64, /data/app/Mono.Samples.HelloTests-1/base.apk!/lib/arm64-v8a, /system/lib64, /vendor/lib64]]\r\n\t\t...\r\n\r\nThe problem is that what Android \"sees\" *should* be\r\n\r\n\t<fragment\r\n\t    android:name=\"md5whatever.MyCustomCSharpFragment\"\r\n\t\t\t...\r\n\t/>\r\n\r\nwhere `md5whatever.MyCustomCSharpFragment` *is* a valid Java type that\r\nAndroid is able to load successfully, but because of e5b1c92c this\r\nreplacement was removed.\r\n\r\nThe fix: simplify the Full assembly-qualified name case to an already\r\nsupported example. If the `//fragment/@android:name` value contains a\r\n`,`, assume it's an assembly qualified name and compute the Full name\r\nfrom it, by stripping off the comma and everything after it, then use\r\nthe Full name to lookup the correct Android Callable Wrapper type."},{"Id":"7241737170","Type":"PullRequestEvent","CreatedAt":"2018-02-14T03:02:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1300","RelatedDescription":"Opened pull request \"[api-xml-adjuster] Fix rebuilds\" (#1300) at xamarin/xamarin-android","RelatedBody":"Ideally, project rebuilds when nothing has changed should be *fast*.\r\n\r\n`api-xml-adjuster` isn't:\r\n\r\n\t$ time (cd build-tools/api-xml-adjuster ; xbuild)\r\n\treal\t2m1.084s\r\n\tuser\t1m55.916s\r\n\tsys\t0m8.853s\r\n\r\n\t# and the rebuild!\r\n\t$ time (cd build-tools/api-xml-adjuster ; xbuild)\r\n\treal\t2m0.824s\r\n\tuser\t1m56.140s\r\n\tsys\t0m8.600s\r\n\r\nA *minimum* two minute+ rebuild -- when *nothing* has changed -- is a\r\nsurefire way to get really annoyed.\r\n\r\nWith diagnostic logging, we start to see the culprit:\r\n\r\n\tTarget _ClassParse needs to be built as input file '@(ApiFileDefinition -> /Volumes/Seagate4TB/work/xamarin-android/build-tools/api-xml-adjuster/../../src/Mono.Android/Profiles/api-27.params.txt)' does not exist.\r\n\r\nThis in turn causes `class-parse.exe` and `api-xml-adjuster.exe` to be\r\n*re-executed* on *every* `android.jar` on *every* build.\r\n\r\nFix this by correcting the `//Target/@Inputs` and `//Target/@Outputs`\r\nfor the `_ClassParse` and `_AdjustApiXml` tasks. After which,\r\nno-change rebuilds are *significantly* faster:\r\n\r\n\t$ time (cd build-tools/api-xml-adjuster ; xbuild)\r\n\treal\t0m5.308s\r\n\tuser\t0m6.042s\r\n\tsys\t0m1.237s"},{"Id":"7240191509","Type":"PullRequestEvent","CreatedAt":"2018-02-13T20:03:44","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1263","RelatedDescription":null,"RelatedBody":""},{"Id":"7240031197","Type":"IssuesEvent","CreatedAt":"2018-02-13T19:32:06","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1297","RelatedDescription":"Closed issue \"[Mono 2017-12] Encountering native crash during test instrumentation start up on devices running v4.4 and lower\" (#1297) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install src/Mono.Android/Test/Mono.Android-Tests.csproj to a v4.4 or lower target in release mode.\r\n2. Run the suite with instrumentation via the `/t:RunTests` msbuild target.\r\n\r\nAlternatively, I've uploaded the .apk file which can be installed via adb. I was able to reproduce with this .apk on a newly created v4.4 emulator.\r\n\r\n1. Download the .apk provided below, and `adb install` it.\r\n2. Launch the app, and click the Run Tests list view item.\r\n\r\n[Mono.Android_Tests-Signed.zip](https://github.com/xamarin/xamarin-android/files/1717794/Mono.Android_Tests-Signed.zip)\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nNUnitLite suites will start and run successfully via instrumentation.\r\n\r\n### Actual Behavior\r\nCrash on start up:\r\n```\r\nF/libc    ( 4571): Fatal signal 11 (SIGSEGV) at 0x00000000 (code=1), thread 4571 (o.Android_Tests)\r\nI/DEBUG   ( 1137): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\nI/DEBUG   ( 1137): Build fingerprint: 'generic_x86/google_sdk_x86/generic_x86:4.4.2/KK/4498769:eng/test-keys'\r\nI/DEBUG   ( 1137): Revision: '0'\r\nI/DEBUG   ( 1137): pid: 4571, tid: 4571, name: o.Android_Tests  >>> Mono.Android_Tests <<<\r\nI/DEBUG   ( 1137): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 00000000\r\nI/DEBUG   ( 1137):     eax bfb73b04  ebx b7779fcc  ecx 00000000  edx 00000008\r\nI/DEBUG   ( 1137):     esi 00000000  edi bfb7418c\r\nI/DEBUG   ( 1137):     xcs 00000073  xds 0000007b  xes 0000007b  xfs 00000000  xss 0000007b\r\nI/DEBUG   ( 1137):     eip b7727ce8  ebp bfb740a8  esp bfb73a10  flags 00210293\r\nI/DEBUG   ( 1137):\r\nI/DEBUG   ( 1137): backtrace:\r\nI/DEBUG   ( 1137):     #00  pc 00049ce8  /system/lib/libc.so (__vfprintf+232)\r\nI/DEBUG   ( 1137):     #01  pc 00047f3f  /system/lib/libc.so (vasprintf+143)\r\nI/DEBUG   ( 1137):     #02  pc 002a3bf3  /data/app-lib/Mono.Android_Tests-1/libmonosgen-2.0.so (monoeg_g_vasprintf+35)\r\nI/DEBUG   ( 1137):     #03  pc 0001e16f  [stack]\r\nI/DEBUG   ( 1137):     #04  pc 00018833  <unknown>\r\nI/DEBUG   ( 1137):     #05  pc 0000b603  <unknown>\r\nI/DEBUG   ( 1137):     #06  pc 0000b593  <unknown>\r\nI/DEBUG   ( 1137):     #07  pc 0000b49a  <unknown>\r\nI/DEBUG   ( 1137):     #08  pc 0000b1b5  <unknown>\r\nI/DEBUG   ( 1137):     #09  pc 0000ae7f  <unknown>\r\nI/DEBUG   ( 1137):     #10  pc 0000a015  <unknown>\r\nI/DEBUG   ( 1137):     #11  pc 00004553  <unknown>\r\nI/DEBUG   ( 1137):     #12  pc 000044d3  <unknown>\r\nI/DEBUG   ( 1137):     #13  pc 0000444f  <unknown>\r\nI/DEBUG   ( 1137):     #14  pc 000043f9  <unknown>\r\nI/DEBUG   ( 1137):     #15  pc 000103cf  <unknown>\r\nI/DEBUG   ( 1137):     #16  pc 00001527  <unknown>\r\nI/DEBUG   ( 1137):     #17  pc 0002a0eb  /system/lib/libdvm.so (dvmPlatformInvoke+79)\r\nI/DEBUG   ( 1137):     #18  pc 00006d9f  [heap]\r\nI/DEBUG   ( 1137):     #19  pc 0008688d  /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+285)\r\nI/DEBUG   ( 1137):     #20  pc 0004c0d2  /system/lib/libdvm.so (dvmCheckCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+66)\r\nI/DEBUG   ( 1137):     #21  pc 00176c18  /system/lib/libdvm.so\r\nI/DEBUG   ( 1137):     #22  pc 00005dcb  <unknown>\r\nI/DEBUG   ( 1137):     #23  pc 0003b582  /system/lib/libdvm.so (dvmMterpStd(Thread*)+66)\r\nI/DEBUG   ( 1137):     #24  pc 00036c49  /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+217)\r\nI/DEBUG   ( 1137):     #25  pc 000bbd46  /system/lib/libdvm.so (dvmInvokeMethod(Object*, Method const*, ArrayObject*, ArrayObject*, ClassObject*, bool)+1750)\r\nI/DEBUG   ( 1137):     #26  pc 000d1770  /system/lib/libdvm.so (Dalvik_java_lang_reflect_Method_invokeNative(unsigned int const*, JValue*)+288)\r\nI/DEBUG   ( 1137):     #27  pc 00176c18  /system/lib/libdvm.so\r\nI/DEBUG   ( 1137):     #28  pc 00005eff  <unknown>\r\nI/DEBUG   ( 1137):     #29  pc 0003b582  /system/lib/libdvm.so (dvmMterpStd(Thread*)+66)\r\nI/DEBUG   ( 1137):     #30  pc 00036c49  /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+217)\r\nI/DEBUG   ( 1137):     #31  pc 000bcba7  /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, char*)+759)\r\n```\r\n\r\n### Version Information\r\nOperating System: Microsoft Windows 10 Enterprise  64-bit\r\nProduct Name: Xamarin.Android\r\nBranch Name: mono-2017-12\r\nBuild Revision: d386c85d46cf4d3b877d6610de14ee2fb84c1b69\r\n[Device] Manufacturer: Motorola, Model: XT1031, Version: 4.4.4, ABI: armeabi-v7a, Timezone: America/Detroit\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttp://xqa.blob.core.windows.net/gist/log-987a151df49d49b59de3623f89ab9492.txt\r\n\r\nIntermediate build output:\r\nhttps://microsoft-my.sharepoint.com/:u:/p/pecolli/Ec25cWIk1wRMs0zHZRpQibEBLsHHzSokHV-hmf8TiEMDng?e=otuJEd\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7239557236","Type":"PullRequestEvent","CreatedAt":"2018-02-13T17:53:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1299","RelatedDescription":"Merged pull request \"[BCL-Tests] Remove '-s' from _GrantPermissions\" (#1299) at xamarin/xamarin-android","RelatedBody":"This argument is required for the majority of 'AdbTarget' usage already, and should be passed as part of 'AdbTarget'.\r\n\r\n"},{"Id":"7239385638","Type":"PullRequestEvent","CreatedAt":"2018-02-13T17:19:19","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1299","RelatedDescription":"Opened pull request \"[BCL-Tests] Remove '-s' from _GrantPermissions\" (#1299) at xamarin/xamarin-android","RelatedBody":"This argument is required for the majority of 'AdbTarget' usage already, and should be passed as part of 'AdbTarget'.\r\n\r\n"},{"Id":"7239072184","Type":"PullRequestEvent","CreatedAt":"2018-02-13T16:24:43","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1294","RelatedDescription":"Closed pull request \"[Xamarin.Android.Build.Tasks] Move DesignTime Designer to `$(BaseIntermediateOutputPath)`\" (#1294) at xamarin/xamarin-android","RelatedBody":"Fixes #1286\r\n\r\nOne of the problems we face with design time builds is MSBuild\r\nkeeps deleting our files. As a result the design time build keeps\r\nfailing. The main reason for this is `IncrementalClean` keeps\r\nremoving the files. But in addition to this the `Clean` target\r\nalso ends up deleting these files. However our existing `fix` does\r\nnot work since `IncrementalClean` is not called. So the code we\r\nhave to save the files is not called.\r\n\r\nOne solution is to move the generated files out from the\r\n`$(IntermediateOutputPath)` and into the `$(BaseIntermediateOutputPath)`.\r\nThe latter is not cleaned by the `IncrementalClean` target in\r\nMSBuild.\r\n\r\nThose does present a problem with our `xbuild` support. xbuild has\r\na target `CoreClean` which is called when `Clean` is called. However\r\nit also calls `_GetCleanFileWrites` which populates the `PreviousFileWrites`\r\nItemGroup with files in the `$(CleanFile)`. As a result xbuild deletes\r\nthe files even if they are in `$(BaseIntermediateOutputPath)`. This\r\nbehaviour is different from MSBuild.\r\n\r\nInterestingly `Xamarin.Android.Windows.targets` has some code in it already\r\nto determine if we are running under MSBuild or xbuild. It also contains\r\nthe code for dealing with the `IncrementalClean` target problems.\r\n\r\nSince we need some of those code on any platform that uses MSBuild\r\n(Windows, Mac and Linux) we should move some of that code into the\r\nmain `Xamarin.Android.Common.targets/props` and reuse some of it to\r\nhandle this problem.\r\n\r\nThe code to check if we are running on MSBuild or xbuild is now in\r\n`Xamarin.Android.Common.props`. The `_RegisterAndroidFilesWithFileWrites`\r\nis now in `Xamarin.Android.Common.targets` along side a new target\r\n`_OverrideXbuildCleanFileWrites` which will prevent the design time\r\nfiles from being deleted under xbuild.\r\n\r\nThe various tests have been updated to reflect this new setup. A new\r\ntest to make sure we never delete these files has been added."},{"Id":"7238951964","Type":"PullRequestEvent","CreatedAt":"2018-02-13T16:04:45","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1298","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Only report `ndk-bundle` if required.\" (#1298) at xamarin/xamarin-android","RelatedBody":"We should only list `ndk-bundle` in the AndroidDependencies if\r\nthe user is using Aot or MkBundle. Otherwise we will end up\r\ndownloading a ton of stuff we don't need.\r\n\r\nThis commit fixes the `CalculateProjectDependencies` to report\r\n`ndk-bundle` if needed. It also adds a unit test to make sure\r\nit is not included when it shouldn't be."},{"Id":"7238247924","Type":"PullRequestEvent","CreatedAt":"2018-02-13T14:02:15","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1298","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Only report `ndk-bundle` if required.\" (#1298) at xamarin/xamarin-android","RelatedBody":"We should only list `ndk-bundle` in the AndroidDependencies if\r\nthe user is using Aot or MkBundle. Otherwise we will end up\r\ndownloading a ton of stuff we don't need.\r\n\r\nThis commit fixes the `CalculateProjectDependencies` to report\r\n`ndk-bundle` if needed. It also adds a unit test to make sure\r\nit is not included when it shouldn't be."},{"Id":"7237033302","Type":"IssuesEvent","CreatedAt":"2018-02-13T09:37:56","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1261","RelatedDescription":"Closed issue \"Microsoft.CSharp conflict\" (#1261) at xamarin/xamarin-android","RelatedBody":"Hi,\r\n\r\nI'm facing Microsoft.CSharp conflict due to Newtonsoft.Json.10.0.3. I found this https://bugzilla.xamarin.com/show_bug.cgi?id=59600\r\nHere is the build log:\r\n\r\n```2> There was a conflict between \"Microsoft.CSharp, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2> \"Microsoft.CSharp, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n2> References which depend on \"Microsoft.CSharp, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Microsoft.CSharp.dll].\r\n2> C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Microsoft.CSharp.dll\r\n2> Project file item includes which caused reference \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\IDE\\ReferenceAssemblies\\Microsoft\\Framework\\MonoAndroid\\v1.0\\Microsoft.CSharp.dll\".\r\n2> Microsoft.CSharp\r\n2> References which depend on \"Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n2> C:\\Users\\mml\\Development\\test_app\\packages\\Newtonsoft.Json.10.0.3\\lib\\netstandard1.3\\Newtonsoft.Json.dll\r\n2> Project file item includes which caused reference \"C:\\Users\\mml\\Development\\test_app\\packages\\Newtonsoft.Json.10.0.3\\lib\\netstandard1.3\\Newtonsoft.Json.dll\".\r\n2> C:\\Users\\mml\\Development\\test_app\\tes_app\\bin\\Debug\\netstandard1.6\\test_app.dll\r\n2> Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL\r\n```\r\n\r\nIs there a way to fix this?\r\n\r\n(related Newtonsoft.Json issue)"},{"Id":"7235090119","Type":"PullRequestEvent","CreatedAt":"2018-02-12T22:59:00","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1295","RelatedDescription":"Merged pull request \"Bump to Java.Interop/master/10647a5e\" (#1295) at xamarin/xamarin-android","RelatedBody":"Fixes the `ObjectDisposedException` during process shutdown described\r\nin commit 0a9d1641.\r\n\r\nMoves the `ManagedPeer.Init()` invocation within the `JniRuntime`\r\nconstructor so that a `NullReferenceException` is avoided. (Instead, a\r\n*different*, more meaningful exception should be thrown.)\r\n\r\nBumps to cecil/mono-2017-12/1afa0668 for d15-7 harmonization."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7241521488","Type":"IssuesEvent","CreatedAt":"2018-02-14T01:41:25","Actor":"rachelmoor","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1879","RelatedDescription":"Opened issue \"Forms Picker is setting SelectedItem=null after switching ItemSource\" (#1879) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nThis bug https://bugzilla.xamarin.com/show_bug.cgi?id=57912 was not moved to GitHub.\r\n\r\nMy ViewModel is bound to a Xamarin Forms picker. When my Model updates the ViewModel with a new ItemSource and SelectedItem, the ItemSource is correctly set and the SelectedItem is set initially, and then there is an erroneous call setting the SelectedItem to null. Switching the order of the XAML did not fix this issue. My ItemSource is a List of type string.\r\n\r\nThis occurs on WPF and Android emulator. I did not check on IOS\r\n\r\npicker binding:\r\n\r\n              <Picker x:Name=\"ItemPickList\"\r\n                      BindingContext=\"{Binding Path=TestViewModel}\"\r\n                      ItemsSource=\"{Binding DisplayStrings}\"\r\n                      SelectedItem=\"{Binding SelectedItem}\"/>\r\n\r\n\r\nExample: \r\n\r\nPicker Bound to VM with Data Item 1\r\n       ItemSource = \"a\", \"b\", \"c\"    SelectedItem = \"a\"\r\n\r\nswitch Picker Binding to Data Item 2\r\n     ItemSouce = \"red\", \"orange\", \"yellow\"     SelectedItem =\"yellow\"\r\n\r\nswitch Picker Binding back to Data Item 1\r\nEXPECTED: ItemSource = \"a\", \"b\", \"c\"    SelectedItem = \"a\"\r\nACTUAL: ItemSource = \"a\", \"b\", \"c\"    SelectedItem = null\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Bind ViewModel to Xamarin.Forms Picker \r\n2.  Pick any SelectedItem\r\n3.  Switch ItemSource (Model) and selected new SelectedItem\r\n4.  Switch back to previous ItemSource (Model)\r\n5.  Selected Item will now be cleared in ViewModel\r\n\r\n### Expected Behavior\r\n\r\nThe Model's SelectedItem will update the Picker's SelectedItem after switching ItemSource. Switching one picker between multiple ItemSources will not clear corresponding ItemSources SelectedValue.\r\n\r\n### Actual Behavior\r\n\r\nThe SelectedItem in the Model is cleared upon switch back to a previous Model(item source)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.122203\r\n- Last known good version: none\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks:\r\n  - iOS:  N/A\r\n  - Android: 7.1\r\n  - UWP:  15063\r\n- Affected Devices: Android, UWP, not tested on IOS\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/13911774/36183150-ea646e7a-10e1-11e8-9431-81ca81c2b10e.png)\r\n\r\nIn the screenshot you can see in the emulator the selected item (first dropdown) is empty. In the Debug window you can see the new SelectedItem bound to the Picker is null. The SelectedItem of the Data is set to \"b\". If you look at the code, the only place where the ViewModel's SelectedItem is set is in the DataItem which is loaded before the ViewModel in the constructor, but the ViewModel's SelectedItem is still set to null. \r\n\r\n\r\n### Reproduction Link\r\n\r\nC# Code:\r\nhttps://github.com/rachelmoor/XamarinFormsPickerBug/blob/master/TestPickerBug/TestPickerBug/TestPickerBug/ViewModels/AboutViewModel.cs\r\n\r\nXAML Page:\r\nhttps://github.com/rachelmoor/XamarinFormsPickerBug/blob/master/TestPickerBug/TestPickerBug/TestPickerBug/Views/AboutPage.xaml"},{"Id":"7240639463","Type":"IssuesEvent","CreatedAt":"2018-02-13T21:38:57","Actor":"jcmanke","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1878","RelatedDescription":"Opened issue \"[UWP] Setting SearchBar.CancelButtonColor affects all SearchBars on page\" (#1878) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhile admittedly a questionable design choice (I only discovered it on a test page for a custom control), putting multiple search bars on a page with different CancelButtonColors results in only the value of the last SearchBar's CancelButtonColor being applied to every SearchBar on the page.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Make a page with several SearchBars\r\n2. Set the CancelButtonColor of at least one SearchBar to something besides Default\r\n\r\n### Expected Behavior\r\n\r\nEach SearchBar's Cancel button will be colored appropriately to its CancelButtonColor value.\r\n\r\n### Actual Behavior\r\n\r\nAll SearchBars on the page will have the CancelButtonColor of the last SearchBar on the page.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0\r\n- IDE: Visual Studio Enterprise 2017 version 15.5.6 \r\n- Platform Target Frameworks:\r\n  - UWP:  Windows 10 Creator's Update (10.0; Build 15063)\r\n- Nuget Packages:\r\n  - Xamarin.Forms v2.5.0.91635\r\n  - Microsoft.NETCore.UniversalWindowsPlatform 5.3.4\r\n  - (Still occurs with latest stable updates)\r\n"},{"Id":"7240582714","Type":"PullRequestEvent","CreatedAt":"2018-02-13T21:27:03","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1875","RelatedDescription":"Merged pull request \"[XamlC] Cache Resolve and ImportReference\" (#1875) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n[XamlC] Cache Resolve and ImportReference\r\n\r\nImportReference with System.Reflection based argument is notoriously\r\nslow on .NET. So we cache the results for those.\r\n\r\nWe do not cache the results for TypeReference, MethodReference or\r\nFieldReference calls, as those are already fast (passthrough if the\r\nreference was already imported), and they aren't valid as dictionary\r\nkeys (no concept of equatability).\r\n\r\nWhile we're at it, we shave another few ms from Resolve(TypeReference)\r\ncalls as well.\r\n\r\nAs, on good days, it shaves up to 40% of XamlC time, we can say that it fixes #1848\r\n\r\n### Bugs Fixed ###\r\n\r\n - fixes #1848\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"},{"Id":"7240582702","Type":"IssuesEvent","CreatedAt":"2018-02-13T21:27:03","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1848","RelatedDescription":"Closed issue \"Improve XAMLC Compilation performance\" (#1848) at xamarin/Xamarin.Forms","RelatedBody":"No idea how, stephane can figure that out. The goal is just to profile and improve XAMLC performance."},{"Id":"7240427984","Type":"IssuesEvent","CreatedAt":"2018-02-13T20:54:39","Actor":"dreeanic","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1877","RelatedDescription":"Opened issue \" [Android] Forms.Maps Memory Leak\" (#1877) at xamarin/Xamarin.Forms","RelatedBody":"On Android, Map instances don't seem to be completely destroyed. Easiest way to reproduce is to push a Page containing a Map and then move back and forth a number of times. \r\n\r\nThe behaviour is the same as the one described here: https://bugzilla.xamarin.com/show_bug.cgi?id=39489, but the out of memory crash happens after more iterations. For example, testing on a LGE Nexus 5 API 21 leads to the following results:\r\n- using Xamarin.Forms.Maps version \"2.3.3.193\" the sample app crashes on the 16th push of the Page containing the Map\r\n- using Xamarin.Forms.Maps version \"2.5.0.122203\" the sample app crashes after approx. 200 iterations. Once every 80 iterations or so, GC collects the pages and map instances (the finalizers are triggered), but the memory keeps increasing, as seen on the Profiler's Memory Allocations graph.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the sample app\r\n2. Press the \"Move to Map Loop\" button and wait. The page containing the map is pushed and popped programatically, on a timer. \r\n3. Observe the app crashing with an out of memory message (it takes 200 iterations on my phone, with this basic map)\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: \r\n  - Android: compiling against Android SDK  7.1 \r\n- Xamarin.Forms \"2.5.0.122203\"\r\n- Xamarin.Forms.Maps \"2.5.0.122203\"\r\n- Xamarin.GooglePlayServices.Maps \"42.1021.1\"\r\n\r\n### Screenshots\r\n\r\n![mapsprofile](https://user-images.githubusercontent.com/25563600/36173033-7779fb26-1110-11e8-9a1b-4ad197804e29.png)\r\n\r\n### Reproduction\r\n[test-map-leaks.zip](https://github.com/xamarin/Xamarin.Forms/files/1721638/test-map-leaks.zip)\r\n\r\n"},{"Id":"7240415637","Type":"IssuesEvent","CreatedAt":"2018-02-13T20:52:01","Actor":"VincentDondain","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1876","RelatedDescription":"Opened issue \"Xamarin.forms custom label do not refresh size on binding update in iOs\" (#1876) at xamarin/Xamarin.Forms","RelatedBody":"_From @Seekeer on February 13, 2018 18:15_\n\n### Steps to Reproduce\r\n\r\n1. Create custom label.\r\n2. Set binding to some text, which is inited afte constructor initialization.\r\n\r\n### Expected Behavior\r\nText displayed\r\n### Actual Behavior\r\nControl width/height isn't updated. Ordinary label works just fine with same binding.\r\n\r\n### Environment\r\niOs\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.3.3 (build 7)\r\nInstallation UUID: bb3198e6-34c2-4291-80ed-3f6b9274c460\r\nRuntime:\r\n\tMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 504010007\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.0/Sdks\r\nSDK Version: 2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.6.1.4 (Visual Studio Community)\r\nHash: db807ec9\r\nBranch: xcode9.2\r\nBuild date: 2018-01-10 16:45:48-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.1.5.0 (Visual Studio Community)\r\nAndroid SDK: /Users/administrator/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t5.1   (API level 22)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 26\r\nSDK Build Tools Version: 27.0.1\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.0.0.216 (Visual Studio Community)\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 703030007\r\nGit revision: 125911fb4accc4309b2cee5c81c970c7cff9b0e0\r\nBuild date: 2018-01-22 17:46:46-05\r\nXamarin addins: 463e21a6d9d4f6b57f923df376fff093a1dd9404\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.12.6\r\nDarwin 16.7.0 Darwin Kernel Version 16.7.0\r\n    Thu Jun 15 17:36:27 PDT 2017\r\n    root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n```\r\n\r\n\r\n### Example Project (If Possible)\r\n[IosLabelTest 2.zip](https://github.com/xamarin/xamarin-macios/files/1721088/IosLabelTest.2.zip)\r\n\r\n\n\n_Copied from original issue: xamarin/xamarin-macios#3472_"},{"Id":"7240043689","Type":"IssuesEvent","CreatedAt":"2018-02-13T19:34:19","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1495","RelatedDescription":"Closed issue \"[Android] PanGestureRecognizer occasionally neglects firing the Completed event\" (#1495) at xamarin/Xamarin.Forms","RelatedBody":"Migrated from https://bugzilla.xamarin.com/show_bug.cgi?id=39768\r\n\r\n### Description\r\n\r\nMigrated report; there are circumstances where panning slowly in Android can cause it to neglect firing the `Completed` event.\r\n\r\n### Steps to Reproduce\r\n\r\n1. You can utilize the [PanGesture](https://developer.xamarin.com/samples/xamarin-forms/WorkingWithGestures/PanGesture/) sample for this.\r\n2. Add debug logs/breakpoints in the Gesture.Completed case in the PanContainer.cs's OnPanUpdated method display.\r\n3. When running the application, start a pan, hold it for a moment or two, and release.\r\n\r\n### Expected Behavior\r\nThe completed state is reached.\r\n\r\n### Actual Behavior\r\nOccasionally/frequently, this state is not reached. On an S8 this is maybe occurring 20% of the time, but not clear of whether some aspect of the pan is causing it.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0\r\n- Affected Devices: (Tested with an S8)\r\n\r\n### Screenshots\r\n\r\n### Reproduction Link\r\n\r\nAs stated above, the [PanGesture](https://developer.xamarin.com/samples/xamarin-forms/WorkingWithGestures/PanGesture/) sample works for this.\r\n"},{"Id":"7239850277","Type":"PullRequestEvent","CreatedAt":"2018-02-13T18:53:55","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1867","RelatedDescription":"Merged pull request \"[Android] Don't assume casts to Activity from Context will be successful\" (#1867) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nPR #1561 for 15-5. fixes #1407\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7241322670","Type":"PullRequestEvent","CreatedAt":"2018-02-14T00:34:39","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3476","RelatedDescription":"Merged pull request \"[appkit] Change some NSOpenGL* types to be thread safe. Fixes #60826\" (#3476) at xamarin/xamarin-macios","RelatedBody":"Our thread safe checks ensure we're running on the main thread. This is\nnot the model used by OpenGL where the \"same thread\" must be used by\nthe context (but it does not need to be the main one)\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60826"},{"Id":"7240898533","Type":"PullRequestEvent","CreatedAt":"2018-02-13T22:35:19","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3476","RelatedDescription":"Opened pull request \"[appkit] Change some NSOpenGL* types to be thread safe. Fixes #60826\" (#3476) at xamarin/xamarin-macios","RelatedBody":"Our thread safe checks ensure we're running on the main thread. This is\nnot the model used by OpenGL where the \"same thread\" must be used by\nthe context (but it does not need to be the main one)\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60826"},{"Id":"7240849574","Type":"PullRequestEvent","CreatedAt":"2018-02-13T22:24:13","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3475","RelatedDescription":"Opened pull request \"[QuickLookUI] Fixes macOS xtro output\" (#3475) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7240461531","Type":"IssuesEvent","CreatedAt":"2018-02-13T21:01:47","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3441","RelatedDescription":"Closed issue \"Linking on Xamarin IOS apparently removes some EF Core 2.0 features\" (#3441) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\nRun on a real device. Haven´t testet on emulator.\r\nFix Info.plist certificates to you own \r\n\r\n1. Run sample project with Linker behavior \"Link SDK frameworks Only\". And deploy \r\n2. Run sample project with Linker behavior \"Dont link\"\r\n3. var test = context.Blogs.Include(x => x.Posts).ToList(); in app delegate fails i scenario 1) with [Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions] but works without linking\r\n\r\n\r\n[LinkEFSample.zip](https://github.com/xamarin/xamarin-macios/files/1710588/LinkEFSample.zip)\r\n\r\n\r\n"},{"Id":"7240415816","Type":"IssuesEvent","CreatedAt":"2018-02-13T20:52:03","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3472","RelatedDescription":"Closed issue \"Xamarin.forms custom label do not refresh size on binding update in iOs\" (#3472) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create custom label.\r\n2. Set binding to some text, which is inited afte constructor initialization.\r\n\r\n### Expected Behavior\r\nText displayed\r\n### Actual Behavior\r\nControl width/height isn't updated. Ordinary label works just fine with same binding.\r\n\r\n### Environment\r\niOs\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n=== Visual Studio Community 2017 for Mac ===\r\n\r\nVersion 7.3.3 (build 7)\r\nInstallation UUID: bb3198e6-34c2-4291-80ed-3f6b9274c460\r\nRuntime:\r\n\tMono 5.4.1.7 (2017-06/e66d9abbb27) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\r\n\tPackage version: 504010007\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.0.0/Sdks\r\nSDK Version: 2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.0\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.2 (13772)\r\nBuild 9C40b\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.6.1.4 (Visual Studio Community)\r\nHash: db807ec9\r\nBranch: xcode9.2\r\nBuild date: 2018-01-10 16:45:48-0500\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.1.5.0 (Visual Studio Community)\r\nAndroid SDK: /Users/administrator/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t4.0.3 (API level 15)\r\n\t\t4.4   (API level 19)\r\n\t\t5.0   (API level 21)\r\n\t\t5.1   (API level 22)\r\n\t\t6.0   (API level 23)\r\n\t\t7.0   (API level 24)\r\n\t\t7.1   (API level 25)\r\n\r\nSDK Tools Version: 25.2.5\r\nSDK Platform Tools Version: 26\r\nSDK Build Tools Version: 27.0.1\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.0.0.216 (Visual Studio Community)\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 703030007\r\nGit revision: 125911fb4accc4309b2cee5c81c970c7cff9b0e0\r\nBuild date: 2018-01-22 17:46:46-05\r\nXamarin addins: 463e21a6d9d4f6b57f923df376fff093a1dd9404\r\nBuild lane: monodevelop-lion-d15-5\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.12.6\r\nDarwin 16.7.0 Darwin Kernel Version 16.7.0\r\n    Thu Jun 15 17:36:27 PDT 2017\r\n    root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nInternet of Things (IoT) development (Preview) 7.1\r\n```\r\n\r\n\r\n### Example Project (If Possible)\r\n[IosLabelTest 2.zip](https://github.com/xamarin/xamarin-macios/files/1721088/IosLabelTest.2.zip)\r\n\r\n"},{"Id":"7240374835","Type":"PullRequestEvent","CreatedAt":"2018-02-13T20:43:18","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3474","RelatedDescription":"Opened pull request \"[Appkit] Fix xtro DesignatedInitializer output\" (#3474) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"963459759562199040","CreatedAt":"2018-02-13T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"CoreML Programming with Xamarin.Mac and F#: https://t.co/vI7JuxjkWa https://t.co/mH5kYVNNvT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":10,"RawContent":null},{"Id":"963145186711830528","CreatedAt":"2018-02-12T20:18:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/ZG5Y2IRf3r","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":19,"RawContent":null},{"Id":"963094603065937920","CreatedAt":"2018-02-12T16:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with the open source suite of SmartHotel360 reference #XamarinForms, Xamarin.iOS, and… https://t.co/5bwxwaCxyV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":118,"FavoriteCount":39,"RawContent":null},{"Id":"962828622875815936","CreatedAt":"2018-02-11T23:20:06+00:00","UserScreenname":"xamarinhq","Text":"Our own @jamesmontemagno shows you how to leverage the #Xamarin Live Player with your iOS applications:… https://t.co/389iYhDt9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":39,"RawContent":null},{"Id":"962480803748999168","CreatedAt":"2018-02-11T00:18:00+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/eJkPovjm0G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":15,"RawContent":null},{"Id":"962049464084062208","CreatedAt":"2018-02-09T19:44:00+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast, @JamesMontemagno and @pierceboggan talk rapid UI prototyping with Ink to Code, me… https://t.co/FTH39xKI1K","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":18,"RawContent":null},{"Id":"962005422142967809","CreatedAt":"2018-02-09T16:49:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0Fi4MU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":93,"FavoriteCount":34,"RawContent":null},{"Id":"961696657250443269","CreatedAt":"2018-02-08T20:22:05+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/pUb6M2pQLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":32,"RawContent":null},{"Id":"961642559880749056","CreatedAt":"2018-02-08T16:47:07+00:00","UserScreenname":"xamarinhq","Text":"Expand your app horizons by building your first #tvOS app with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/utcp887bgL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":11,"RawContent":null},{"Id":"961326059965870080","CreatedAt":"2018-02-07T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar with @XamarinU on building your first intelligent app with #Xamarin and Micro… https://t.co/lEsIH9mU1Q","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":41,"RawContent":null},{"Id":"961281908750635008","CreatedAt":"2018-02-07T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/48PO2bI3Mt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":18,"RawContent":null},{"Id":"960921785641455616","CreatedAt":"2018-02-06T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/OXIdlOPZyn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":13,"RawContent":null},{"Id":"960588991375511552","CreatedAt":"2018-02-05T19:00:37+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/sIDGF4Kcp0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":254,"FavoriteCount":128,"RawContent":null},{"Id":"960557379606794248","CreatedAt":"2018-02-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":14,"RawContent":null},{"Id":"960308752409923584","CreatedAt":"2018-02-05T00:27:02+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/ChPi6XDAGH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":18,"RawContent":null},{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":99,"FavoriteCount":29,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2018-02-14T05:30:37.4833341Z","RunDurationInMilliseconds":3955}