{"Data":{"GitHub":{"Issues":[{"Id":"495504223","IsPullRequest":false,"CreatedAt":"2019-09-18T23:44:36","Actor":"jwood803","Number":"4230","RawContent":null,"Title":"Error when retraining model","State":"open","Body":"### System information\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009632 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAttempted to retrain a linear regression model built in ML.NET\r\n- **What happened?**\r\nReceived the below error:\r\n```\r\nOptimizer unable to proceed with loss function yielding Infinity\r\n```\r\n\r\n### Source code / logs\r\nError occurred on the below code:\r\n```\r\nvar retrainedModel = context.Regression.Trainers.LbfgsPoissonRegression()\r\n                .Fit(newDataTransformed, originalModelParams);\r\n```\r\n\r\nFull code sample is [here](https://github.com/jwood803/MLNetExamples/blob/master/MLNetExamples/RetrainModel/Program.cs).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4230","RelatedDescription":"Open issue \"Error when retraining model\" (#4230)"},{"Id":"495477157","IsPullRequest":true,"CreatedAt":"2019-09-18T22:04:42","Actor":"codemzs","Number":"4229","RawContent":null,"Title":"WIP: Homomorphic encryption ","State":"open","Body":"PLEASE DO NOT REVIEW. THIS IS NOT CLOSE TO A REVIEW. WE ARE JUST REVIEWING THE CHANGES FROM SEAL TEAM.","Url":"https://github.com/dotnet/machinelearning/pull/4229","RelatedDescription":"Open PR \"WIP: Homomorphic encryption \" (#4229)"},{"Id":"495442166","IsPullRequest":true,"CreatedAt":"2019-09-18T20:36:52","Actor":"mstfbl","Number":"4228","RawContent":null,"Title":"Attempt on Issue #4169","State":"open","Body":"Attempt on Issue #4169\r\n\r\n- Added the necessary estimator pipeline for a KeyDataViewType string/value binding\r\n- Changed the Output Column types of the ImageClassificationEstimator and  the Mapper for future compatibility with KeyType composite values\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4228","RelatedDescription":"Open PR \"Attempt on Issue #4169\" (#4228)"},{"Id":"495298128","IsPullRequest":false,"CreatedAt":"2019-09-18T15:25:35","Actor":"nighotatul","Number":"4227","RawContent":null,"Title":"Using PFI with AutoML, possible?","State":"open","Body":" I have a trained model and now trying to retrieve the feature weights. None of the objects returned expose a LastTransformer then I want to get the PFI information and I get stuck. There appears no way to get the LastTransformer object from the trainedModel.\r\n\r\nThe following cast lets me access the LastTransformer, however I cannot use it for PFI until I provide a better type for predictor. Debugging I can see it is of type Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.IPredictorProducing> but I am unable to cast to that because Microsoft.ML.IPredictorProducing is not visible, so it seems like we're still stuck.\r\n\r\n//setup code similar to famschopman\r\nRegressionExperiment experiment = mlContext.Auto().CreateRegressionExperiment(experimentSettings);\r\n\r\nvar experimentResults = experiment.Execute(split.TrainSet, split.TestSet);\r\nvar predictor = ((TransformerChain)experimentResults.BestRun.Model).LastTransformer;\r\n\r\n//this will not compile.\r\nvar permutationMetrics = mlContext.Regression.PermutationFeatureImportance(predictor, transformedData, permutationCount: 30);\r\n\r\nThe following compile error is produced.\r\n\r\nThe type arguments for method 'PermutationFeatureImportanceExtensions.PermutationFeatureImportance(RegressionCatalog, ISingleFeaturePredictionTransformer, IDataView, string, bool, int?, int)' cannot be inferred from the usage. Try specifying the type arguments explicitly.\r\n\r\nhow we get bias and weight using PFI?","Url":"https://github.com/dotnet/machinelearning/issues/4227","RelatedDescription":"Open issue \"Using PFI with AutoML, possible?\" (#4227)"},{"Id":"494878674","IsPullRequest":false,"CreatedAt":"2019-09-17T22:14:47","Actor":"LittleLittleCloud","Number":"4226","RawContent":null,"Title":"`predictionEngine` breaks after saving/loading a Model","State":"open","Body":"### System information\r\n\r\n- **win 10**:\r\n- **1.3.1**: \r\n\r\nI was trying to create a PredictEngine using a saved model. I found out that if I directly use the `ITransformer` retrieve from `Pipeline.Fit`, the `CreatePredictionEngine` works well. But after I save/reload it, then it will give the following error\r\n![image](https://user-images.githubusercontent.com/16876986/65083420-5c958700-d95d-11e9-9b98-d4bf3d93736b.png)\r\n\r\nThe code for the pipeline is like this\r\n\r\n```\r\npublic static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n        {\r\n            // Data process configuration with pipeline data transformations \r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n                                      .Append(mlContext.Transforms.LoadImages(\"ImagePath_featurized\", @\"C:\\Users\\xiaoyuz\\Desktop\\machinelearning-samples\\datasets\\images\", \"ImagePath\"))\r\n                                      .Append(mlContext.Transforms.ResizeImages(\"ImagePath_featurized\", 224, 224, \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.ExtractPixels(\"ImagePath_featurized\", \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.DnnFeaturizeImage(\"ImagePath_featurized\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"ImagePath_featurized\" }))\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"))\r\n                                      .AppendCacheCheckpoint(mlContext);\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(mlContext.BinaryClassification.Trainers.AveragedPerceptron(labelColumnName: \"Label\", numberOfIterations: 10, featureColumnName: \"Features\"), labelColumnName: \"Label\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n            return trainingPipeline;\r\n        }\r\n```\r\n\r\nAnd `ModelInput` and `ModelOutput` class is like this\r\n```\r\n    public class ModelInput\r\n    {\r\n        [ColumnName(\"Label\"), LoadColumn(0)]\r\n        public string Label { get; set; }\r\n\r\n\r\n        [ColumnName(\"Title\"), LoadColumn(1)]\r\n        public string Title { get; set; }\r\n\r\n\r\n        [ColumnName(\"Url\"), LoadColumn(2)]\r\n        public string Url { get; set; }\r\n\r\n\r\n        [ColumnName(\"ImagePath\"), LoadColumn(3)]\r\n        public string ImagePath { get; set; }\r\n\r\n\r\n    }\r\n```\r\n\r\n```\r\npublic class ModelOutput\r\n    {\r\n        // ColumnName attribute is used to change the column name from\r\n        // its default value, which is the name of the field.\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public String Prediction { get; set; }\r\n        public float[] Score { get; set; }\r\n    }\r\n```\r\n\r\nIt's really wield though. And my description may not be that detailed. If you need further information, please let me know\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4226","RelatedDescription":"Open issue \"`predictionEngine` breaks after saving/loading a Model\" (#4226)"},{"Id":"494867997","IsPullRequest":false,"CreatedAt":"2019-09-17T21:46:45","Actor":"oliverw","Number":"4225","RawContent":null,"Title":"Porting scikit-learn text classification pipeline to ML.Net","State":"open","Body":"I'm trying to port the below scikit-learn pipeline to ML.Net and I have trouble with the `TruncatedSVD` transformer. Is there an equivalent for it in ML.Net and if not, would it be possible to just consume a pre-trained ONNX model?\r\n\r\n```python\r\nfrom sklearn.pipeline import Pipeline, FeatureUnion\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.decomposition import TruncatedSVD\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom xgboost import XGBClassifier\r\n\r\nclassifier = Pipeline([\r\n    ('features', FeatureUnion([\r\n        ('text', Pipeline([\r\n            ('colext', TextSelector('Text')),\r\n            ('tfidf', TfidfVectorizer(tokenizer=Tokenizer, stop_words=stop_words,\r\n                     min_df=.0025, max_df=0.25, ngram_range=(1,3))),\r\n            ('svd', TruncatedSVD(algorithm='randomized', n_components=300)), #for XGB\r\n        ])),\r\n        ('words', Pipeline([\r\n            ('wordext', NumberSelector('TotalWords')),\r\n            ('wscaler', StandardScaler()),\r\n        ])),\r\n    ])),\r\n    ('clf', XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.1)),\r\n    ])\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4225","RelatedDescription":"Open issue \"Porting scikit-learn text classification pipeline to ML.Net\" (#4225)"},{"Id":"494827761","IsPullRequest":false,"CreatedAt":"2019-09-17T20:10:27","Actor":"tbombach","Number":"4224","RawContent":null,"Title":"Ignored columns appear in InputModel from CodeGenerator","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Any\r\n- **.NET Version (eg., dotnet --info)**:  Any\r\n\r\n### Issue\r\nWhen the user specifies ignored columns for CodeGenerator, they should not appear in the InputModel (or PredictProgram output). If the user uses the generated code to train the model again, they will have a different input set and generated model than the first training session.","Url":"https://github.com/dotnet/machinelearning/issues/4224","RelatedDescription":"Open issue \"Ignored columns appear in InputModel from CodeGenerator\" (#4224)"},{"Id":"494783312","IsPullRequest":true,"CreatedAt":"2019-09-17T18:30:20","Actor":"KsenijaS","Number":"4223","RawContent":null,"Title":"Fix memory leak in TensorflowTransform","State":"open","Body":"This PR fixes two memory leaks:\r\n1. After executing the graph, input tensor are not being freed\r\n2. When running multiple pipelines (sessions), graphs are not being freed.\r\n\r\nThis fixes #4134\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4223","RelatedDescription":"Open PR \"Fix memory leak in TensorflowTransform\" (#4223)"},{"Id":"492481673","IsPullRequest":true,"CreatedAt":"2019-09-17T17:42:16","Actor":"ashbhandare","Number":"4205","RawContent":null,"Title":"Upgrade TF.Net version from 0.10.10 to 0.11.3","State":"closed","Body":"Fixes #4204\r\n\r\nIncludes a few API changes necessary to upgrade TF.Net version.\r\nVerified that ML.Samples  and Tests run.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4205","RelatedDescription":"Closed or merged PR \"Upgrade TF.Net version from 0.10.10 to 0.11.3\" (#4205)"},{"Id":"492480232","IsPullRequest":false,"CreatedAt":"2019-09-17T17:42:16","Actor":"ashbhandare","Number":"4204","RawContent":null,"Title":"Need to move from TF.NET version 0.10.10 to 0.11.3","State":"closed","Body":"\r\n- ML.Net currently runs with Tensorflow.Net version 0.10.10, but there is a newer stable version of Tensorflow.Net 0.11.3 with improvements :https://www.nuget.org/packages/TensorFlow.NET/0.11.3\r\n- **What happened?**\r\nThere are build errors with TF.Net 0.11.3\r\n- **What did you expect?**\r\nNeed the required API changes to make ML.Net compatible with TF.Net 0.11.3\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4204","RelatedDescription":"Closed issue \"Need to move from TF.NET version 0.10.10 to 0.11.3\" (#4204)"},{"Id":"493472059","IsPullRequest":true,"CreatedAt":"2019-09-17T17:21:31","Actor":"Lynx1820","Number":"4214","RawContent":null,"Title":"fixing scenerio 3 of issue #3995","State":"closed","Body":"This fixes the issue #3995 scenario 3 \r\nI'm waiting to see what can be done about scenario 1(desired behavior not decided yet) and 2( can't replicate). Scenario 4 is not part of our code base. \r\n\r\nIn this commit, I have made the error comment more clear and switched the exception from an System.ArgumentOutOfRangeException to System.ArgumentNullException. ArgumentOutOfRangeException are reserved for signaling bad function parameters and thus doesn't make sense to use for signaling a missing column value. \r\n\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4214","RelatedDescription":"Closed or merged PR \"fixing scenerio 3 of issue #3995\" (#4214)"},{"Id":"494733076","IsPullRequest":false,"CreatedAt":"2019-09-17T16:40:57","Actor":"zHaytam","Number":"4222","RawContent":null,"Title":"Predict multiple rows","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0.100-preview9-014004\r\n\r\n### Issue\r\n\r\n- **What did you do?** Trained a simple K-Means model\r\n- **What happened?** I wanted to predict multiple rows, but `Predict` only takes 1 instance\r\n- **What did you expect?** An overload that gives this possiblity\r\n\r\n### Source code / logs\r\n\r\n```csharp\r\nvar pipeline = ...;\r\nvar model = pipeline.Fit(data);\r\nvar predictor = mlContext.Model.CreatePredictionEngine<PixelEntry, ClusterPrediction>(model);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4222","RelatedDescription":"Open issue \"Predict multiple rows\" (#4222)"},{"Id":"494510005","IsPullRequest":false,"CreatedAt":"2019-09-17T09:32:08","Actor":"mohsinnasir","Number":"4221","RawContent":null,"Title":"ML.Net Source not building when build.cmd is executed","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0 Preview\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRun Build.cmd\r\n- **What happened?**\r\nD:\\SCM\\machinelearning\\src\\Native>build.cmd\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.2.2\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\n[vcvarsall.bat] Environment initialized for: 'x86_x64'\r\nCommencing native build of dotnet/machinelearning\r\n\r\nCalling \"D:\\SCM\\machinelearning\\src\\Native\\\\gen-buildsys-win.bat\" \"D:\\SCM\\machinelearning\\src\\Native\\\" \"16 2019\" x64\r\nCMake Error: The source directory \"D:/SCM/machinelearning/bin/obj/x64.Debug/Native/2019  -A x64 -B./ -HD:/SCM/machinelearning/src/Native\"\" does not exist.\r\nSpecify --help for usage, or press the help button on the CMake GUI.\r\nFailed to generate native component build project!\r\n- **What did you expect?**\r\nSuccessful completion of build\r\n\r\n### Source code / log\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4221","RelatedDescription":"Open issue \"ML.Net Source not building when build.cmd is executed\" (#4221)"},{"Id":"494446866","IsPullRequest":true,"CreatedAt":"2019-09-17T07:18:02","Actor":"tbombach","Number":"4220","RawContent":null,"Title":"Adding code generation logic to skip generating properties for ignored columns","State":"open","Body":"Adding code generation logic to skip generating properties for ignored columns in the Input Model. Ignored columns are specified by the code gen caller in the `ColumnInferenceResults.ColumnInformation` that is passed to the CodeGenerator.\r\n\r\n- Adding unit tests to verify that ignored columns do not generate properties.\r\n\r\n**Note - I also verified that this change works as expected with a fully generated project.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/4224","Url":"https://github.com/dotnet/machinelearning/pull/4220","RelatedDescription":"Open PR \"Adding code generation logic to skip generating properties for ignored columns\" (#4220)"},{"Id":"494290176","IsPullRequest":true,"CreatedAt":"2019-09-16T21:39:10","Actor":"harishsk","Number":"4219","RawContent":null,"Title":"Added onnx export support for CopyColumns","State":"open","Body":"Fixes #4218 ","Url":"https://github.com/dotnet/machinelearning/pull/4219","RelatedDescription":"Open PR \"Added onnx export support for CopyColumns\" (#4219)"},{"Id":"494283836","IsPullRequest":false,"CreatedAt":"2019-09-16T21:22:22","Actor":"harishsk","Number":"4218","RawContent":null,"Title":"CopyColumns does not support saving to Onnx","State":"open","Body":"- **What did you do?**\r\nCreated a pipeline from with CopyColumns and tried to export it to Onnx with ConvertToOnnxProtobuf.\r\n\r\n- **What happened?**\r\nThe transform wasn't saved in the onnx graph\r\n\r\n- **What did you expect?**\r\nThe transform should be saved in the onnx graph\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4218","RelatedDescription":"Open issue \"CopyColumns does not support saving to Onnx\" (#4218)"},{"Id":"493504395","IsPullRequest":true,"CreatedAt":"2019-09-16T17:56:52","Actor":"eerhardt","Number":"4215","RawContent":null,"Title":"Remove unused parameter in BinarySaver.","State":"closed","Body":"I noticed this parameter is not being used when looking at this code. Removing it to clean it up.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4215","RelatedDescription":"Closed or merged PR \"Remove unused parameter in BinarySaver.\" (#4215)"},{"Id":"493955684","IsPullRequest":false,"CreatedAt":"2019-09-16T10:03:53","Actor":"FedericoBinda","Number":"4217","RawContent":null,"Title":"exampleWeightColumn with separate weights for each feature","State":"open","Body":"Hi\r\n\r\nI have a model with 2 features. In my data, each of these features is a measurement with an uncertainty associated to it. I was hoping to be able to set the weights column so that each feature has its own weight based on the uncertainty, but it does not seem possible, since only 1 weight per data point is allowed. Is this something that could be possibly implemented?  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4217","RelatedDescription":"Open issue \"exampleWeightColumn with separate weights for each feature\" (#4217)"},{"Id":"493792406","IsPullRequest":false,"CreatedAt":"2019-09-15T22:09:36","Actor":"CESARDELATORRE","Number":"4216","RawContent":null,"Title":"PFI (Permutation Feature Importance) API needs to be simpler to use","State":"open","Body":"PFI (Permutation Feature Importance) API needs to be simpler to use\r\n\r\n**1. First**, it is awkward to need to access to the LastTransformer method from the model (Chain of Transformers). In addition, if you are using additional methods to structure your training, evaluation and PFI calculation and try to pass the model as an ITransformer (the usual way) you need to cast it back to the concrete type of transformer chain (such as `TransformerChain<RegressionPredictionTransformer<LightGbmRegressionModelParameters>>`), which then requires a hard reference to the type of algorithm used. \r\n\r\nThis is the code to calculate the PFI metrics:\r\n\r\n```\r\n// Make predictions (Transform the dataset)\r\nIDataView transformedData = trainedModel.Transform(trainingDataView);\r\n\r\n// Extract the trainer (last transformer in the model)\r\nvar singleLightGbmModel = (trainedModel as TransformerChain<RegressionPredictionTransformer<LightGbmRegressionModelParameters>>).LastTransformer;\r\n\r\n// or simpler if the trainedModel was 'var' right after the call to Fit(): \r\n// var singleLightGbmModel = trainedModel.LastTransformer;\r\n\r\n//Calculate Feature Permutation\r\nImmutableArray<RegressionMetricsStatistics> permutationMetrics =\r\n                                mlContext\r\n                                    .Regression.PermutationFeatureImportance(predictionTransformer: singleLightGbmModel,\r\n                                                                                data: transformedData,\r\n                                                                                labelColumnName: \"fare_amount\",  \r\n                                                                                numberOfExamplesToUse: 100,\r\n                                                                                permutationCount: 1);\r\n```\r\n\r\nNeeding to only use/provide the last transformer feels a bit convoluted... \r\nThe API should be simpler to use here and make such a thing transparent to the user?\r\n\r\n**2. Second,** once you get the permutation metrics (such as `ImmutableArray<RegressionMetricsStatistics> permutationMetrics`), you only get the values based on the indexes, but you don't have the names of the input columns. It is then not straightforward to correlate it to the input column names since you need to use the indexes to be used across two separated arrays that , if sorted previously, it won't match...\r\n\r\nYou need to do something like the following or comparable loops driven by the indexes in the permutationMetrics array:\r\n\r\nFirst, obtain all the column names used in the PFI process and exclude the ones not used:\r\n\r\n```\r\nvar usedColumnNamesInPFI = dataView.Schema\r\n                    .Where(col => (col.Name != \"SamplingKeyColumn\") && (col.Name != \"Features\") && (col.Name != \"Score\"))\r\n                    .Select(col => col.Name);\r\n```\r\n\r\nThen you need to correlate and find the column names based on the indexes in the permutationMetrics:\r\n\r\n```\r\n            var results = usedColumnNamesInPFI\r\n                .Select((t, i) => new FeatureImportance\r\n                {\r\n                    Name = t,\r\n                    RSquaredMean = Math.Abs(permutationMetrics[i].RSquared.Mean)\r\n                })\r\n                .OrderByDescending(x => x.RSquaredMean);\r\n```\r\n\r\nThis should be directly provided by the API and you'd simply need to access it and show it.\r\nThe current code feels very much convoluted...\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4216","RelatedDescription":"Open issue \"PFI (Permutation Feature Importance) API needs to be simpler to use\" (#4216)"},{"Id":"493438608","IsPullRequest":false,"CreatedAt":"2019-09-13T17:30:29","Actor":"julianobd","Number":"4213","RawContent":null,"Title":"Error when trying to execute a sample test - MLNET-CLI","State":"open","Body":"### System information\r\n\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.1.508\r\n Commit:    9ba8583e91\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.508\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.12\r\n  Commit:  ccea2e606d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n### Issue\r\n\r\nI tried to execute one sample using MLNET-CLI\r\n`mlnet auto-train --task regression --dataset taxi-fare-train.csv --test-dataset taxi-fare-test.csv --label-column-name fare_amount --max-exploration-time 1000`\r\n\r\nreturns a error:\r\n```\r\nBest quality(RSquared): 0,9440, Best Algorithm: LightGbmRegression, Last Algorithm: FastTreeTweedieRegression\r\n00:01:37 Exception occured while exploring pipelines:\r\nAll instances skipped due to missing features.\r\nPlease see the log file for more info.\r\n```\r\n\r\n### Source code / logs\r\nLog: \r\n[debug_log.txt](https://github.com/dotnet/machinelearning/files/3611149/debug_log.txt)\r\n\r\nDatasets: \r\n[teste.zip](https://github.com/dotnet/machinelearning/files/3611150/teste.zip)\r\n\r\n#Update\r\nI've also tryied using single datasets:\r\n\r\ncommands used:\r\n`mlnet auto-train --task regression --dataset taxi-fare-test.csv --label-column-name fare_amount --max-exploration-time 1000`\r\n\r\n`mlnet auto-train --task regression --dataset taxi-fare-train.csv --label-column-name fare_amount --max-exploration-time 1000`\r\n\r\nlogs:\r\n\r\n[train_dataset_debug_log.txt](https://github.com/dotnet/machinelearning/files/3611873/train_dataset_debug_log.txt)\r\n[test_dataset_debug_log.txt](https://github.com/dotnet/machinelearning/files/3611874/test_dataset_debug_log.txt)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4213","RelatedDescription":"Open issue \"Error when trying to execute a sample test - MLNET-CLI\" (#4213)"},{"Id":"492093533","IsPullRequest":false,"CreatedAt":"2019-09-13T14:20:19","Actor":"gerjanvl","Number":"4201","RawContent":null,"Title":"InvalidOperationException: Invalid TValue in GetGetter: 'Microsoft.ML.Data.VBuffer`1[System.Single]'","State":"closed","Body":"### System information\r\n\r\n- Windows 10:\r\n- netcoreapp 2.2\r\n \r\n### Packages\r\nMicrosoft.ML 1.4.0-preview\r\nMicrosoft.ML.OnnxRuntime 0.5.0\r\nMicrosoft.ML.OnnxTransformer 1.4.0-preview\r\n\r\n### Issue\r\n\r\n- Used onnx model to create a prediction engine.\r\n- I get an exception when creating the prediction engine: InvalidOperationException: Invalid TValue in GetGetter: 'Microsoft.ML.Data.VBuffer`1[System.Single]'\r\n- I was expecting it to work everything looks right, the exception doesn't make it clear what's actually wrong. I could not debug the source code because it's inside a lambda function. \r\n\r\n### Source Code: \r\nhttps://github.com/GerjanVlot/BERT-ML.NET\r\n\r\n### Callstack:\r\n```\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.GenerateSetter(DataViewRow input, Int32 index, Column column, Delegate poke, Delegate peek)\r\n   at Microsoft.ML.Data.TypedCursorable`1.TypedRowBase..ctor(TypedCursorable`1 parent, DataViewRow input, String channelMessage)\r\n   at Microsoft.ML.Data.TypedCursorable`1.GetRow(DataViewRow input)\r\n   at Microsoft.ML.PredictionEngineBase`2.PredictionEngineCore(IHostEnvironment env, InputRow`1 inputRow, IRowToRowMapper mapper, Boolean ignoreMissingColumns, SchemaDefinition outputSchemaDefinition, Action& disposer, IRowReadableAs`1& outputRow)\r\n   at Microsoft.ML.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine[TSrc,TDst](ITransformer transformer, IHostEnvironment env, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at ML.BERT.TestApp.Onnx.OnnxModelConfigurator`1.GetMlNetPredictionEngine[T]() in ML.BERT.TestApp\\Onnx\\OnnxModelConfigurator.cs:line 34\r\n   at ML.BERT.TestApp.Program.Main(String[] args) in ML.BERT.TestApp\\Program.cs:line 22\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4201","RelatedDescription":"Closed issue \"InvalidOperationException: Invalid TValue in GetGetter: 'Microsoft.ML.Data.VBuffer`1[System.Single]'\" (#4201)"},{"Id":"493243192","IsPullRequest":true,"CreatedAt":"2019-09-13T10:07:58","Actor":"zHaytam","Number":"4212","RawContent":null,"Title":"Sanitize OutputName using dots to handle spaces in namespaces and project files","State":"open","Body":"This fixes the issue with generating namespaces and project files with spaces in them.\r\nFixes #3792.\r\n\r\nThe `Utils.Sanitize` method now takes an extra (optional) parameter, `replacement`, which is the char to replace non letters/digits with. Default value: `_`.  \r\nI thought it's better and easier to sanitize the `OutputName` in the settings directly, since it's used in all the places that needs to be changed (namespaces, project files).\r\n\r\nIn order to try it, I used the same command/dataset from the issue, the output is:\r\n- Analyzing Categorical Data\r\n  - Analyzing.Categorical.Data.ConsoleApp\r\n    - Analyzing.Categorical.Data.ConsoleApp.csproj\r\n    - ModelBuilder.cs\r\n    - Program.cs\r\n  - Analyzing.Categorical.Data.Model\r\n    - Analyzing.Categorical.Data.Model.csproj\r\n    - DataModels\r\n      - ConsumeModel.cs\r\n      - ModelInput.cs\r\n      - ModelOutput.cs\r\n    - MLModel.zip\r\n  - logs\r\n  - Analyzing.Categorical.Data.sln\r\n\r\nAnd the base namespace is `Analyzing.Categorical.Data`.\r\n\r\n---\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4212","RelatedDescription":"Open PR \"Sanitize OutputName using dots to handle spaces in namespaces and project files\" (#4212)"},{"Id":"493081360","IsPullRequest":true,"CreatedAt":"2019-09-13T00:04:23","Actor":"antoniovs1029","Number":"4211","RawContent":null,"Title":"Fixes #3992 and corner cases of inputColumnNames on FeaturizeText","State":"open","Body":"Fixes #3992 , where FeaturizeText is used with an options object, but no inputColumnNames is provided, thus expecting the inputColumnName to be defaulted to the outputColumnName.\r\n\r\nIt also covers the corner cases where the user uses FeaturizeText with an options object along with a 'null' or an empty string as inputColumnNames.\r\n\r\nThree different tests are provided to cover those 3 cases. It is verified that the text is featurized correctly and the features are saved in a column with the same name as the input column. They are all based on the TextFeaturizerWithWordFeatureExtractorTest, but without using a PredictionEngine because the output column hides the input column, and thus instead getting the rows of the dataview to verify their values.\r\n\r\nA small fix to the documentation of FeaturizeText is added.","Url":"https://github.com/dotnet/machinelearning/pull/4211","RelatedDescription":"Open PR \"Fixes #3992 and corner cases of inputColumnNames on FeaturizeText\" (#4211)"},{"Id":"493060897","IsPullRequest":false,"CreatedAt":"2019-09-12T22:38:09","Actor":"natke","Number":"4210","RawContent":null,"Title":"TensorFlow scoring sample should pass an empty dataview","State":"open","Body":"This sample is calling Fit() with a dataview generated from one sample: https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/TensorFlow/TextClassification.cs\r\n\r\nThe pipeline contains a pre-trained TensorFlow model, so there is not need (and is misleading) to call Fit with data.\r\n\r\nIn other places where no dataview is required, we generate an empty one.\r\n\r\nRelated to #3795 \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4210","RelatedDescription":"Open issue \"TensorFlow scoring sample should pass an empty dataview\" (#4210)"},{"Id":"492921853","IsPullRequest":false,"CreatedAt":"2019-09-12T16:56:01","Actor":"codemzs","Number":"4209","RawContent":null,"Title":"ImageType needs to be savable","State":"open","Body":"ImageType does not implement codecs for saving/reading. Implement them so that image type can be used in model schemas for saving/loading models.","Url":"https://github.com/dotnet/machinelearning/issues/4209","RelatedDescription":"Open issue \"ImageType needs to be savable\" (#4209)"},{"Id":"492761084","IsPullRequest":false,"CreatedAt":"2019-09-12T12:01:40","Actor":"aslotte","Number":"4208","RawContent":null,"Title":"Question: Roadmap for JupyterNotebook + ML.NET","State":"open","Body":"This is a question/enhancement suggestion.\r\n\r\nAs there is now support for transfer learning of DNN's, that means training has become a lot more computational expensive. This may push users to have to provision a VM in Azure or other to be able to train their deep neural networks. \r\n\r\n**Question**: How does the road map look for adding support for ML.NET in a Jupyter Notebook? \r\nI know there is a C# kernel available to install, is it possible to use that in Azure Machine Learning Service? It would be neat to be able to run ML.NET in a Jupyter Notebook as we then can quickly provision a compute resource required. That would also open up the path to additional summary statistics and plotting etc. \r\n\r\n**If** Jupyter Notebooks are not in the plans, are there plans of creating a VM image or suggest other ways of training a deep neural network in ML.NET in the cloud, in case a user does not have a strong enough computer locally?","Url":"https://github.com/dotnet/machinelearning/issues/4208","RelatedDescription":"Open issue \"Question: Roadmap for JupyterNotebook + ML.NET\" (#4208)"},{"Id":"492758774","IsPullRequest":false,"CreatedAt":"2019-09-12T11:56:52","Actor":"aslotte","Number":"4207","RawContent":null,"Title":"Summary Statistics","State":"open","Body":"It would be great to have the possibility to add a data exploration API to quickly get a feel of the data, e.g.\r\n\r\n- Shape of the date\r\n- Do we have NaNs etc.\r\n- How balanced is the data?\r\n\r\nThis can certainly be done through LinQ queries on the IDataView I'm sure, but would be cool to wrap some common methods as an extension method on the IDataView","Url":"https://github.com/dotnet/machinelearning/issues/4207","RelatedDescription":"Open issue \"Summary Statistics\" (#4207)"},{"Id":"492757889","IsPullRequest":false,"CreatedAt":"2019-09-12T11:54:42","Actor":"aslotte","Number":"4206","RawContent":null,"Title":"Graphs/Plots of Evaluation Metrics","State":"open","Body":"It would be beneficial to have some kind of plotting mechanism of sorts to display evaluation metrics after training.\r\n\r\n- Confusion matrix\r\n- ROC graph\r\n- Precision-recall graph\r\n\r\nIt would also be neat to have a default ToString() method to output the metrics object to the console.","Url":"https://github.com/dotnet/machinelearning/issues/4206","RelatedDescription":"Open issue \"Graphs/Plots of Evaluation Metrics\" (#4206)"},{"Id":"492467529","IsPullRequest":false,"CreatedAt":"2019-09-11T21:07:27","Actor":"OmarJay1","Number":"4203","RawContent":null,"Title":"App Store","State":"open","Body":"Hello, I'm wondering if there's any intention of ML.NET working in Microsoft app store apps. I'm getting this error message when I run the App Cert Kit.\r\n\r\nI believe that these DLLs have to do with ML.NET because the error goes away when I don't use ML.NET.  Thanks.\r\n\r\n      <MESSAGES>\r\n          <MESSAGE TEXT=\"File C:\\Program Files\\WindowsApps\\AppName\\CpuMathNative.dll has failed the AppContainerCheck check.\" />\r\n          <MESSAGE TEXT=\"File C:\\Program Files\\WindowsApps\\AppName\\LdaNative.dll has failed the AppContainerCheck check.\" />\r\n        </MESSAGES>\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4203","RelatedDescription":"Open issue \"App Store\" (#4203)"},{"Id":"492461153","IsPullRequest":false,"CreatedAt":"2019-09-11T20:52:32","Actor":"harishsk","Number":"4202","RawContent":null,"Title":"RankingEvaluatorOptions has OutputGroupSummary as an internal field","State":"open","Body":"- **What happened?**\r\nThe OutputGroupSummary field of RankingEvaluatorOptions is marked as an internal field and and related RankingMetrics class does not include data resulting from turning on that option. \r\n\r\n- **What did you expect?**\r\nRankingMetrics should include the data from OutputGroupSummary and the options should support turning on that option.","Url":"https://github.com/dotnet/machinelearning/issues/4202","RelatedDescription":"Open issue \"RankingEvaluatorOptions has OutputGroupSummary as an internal field\" (#4202)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-09-19T05:30:41.4824499Z","RunDurationInMilliseconds":733}