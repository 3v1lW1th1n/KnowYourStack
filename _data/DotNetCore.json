{"Data":{"Blog":{"FeedItems":[{"Title":"Explore CosmosDB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7504725120","Type":"PullRequestEvent","CreatedAt":"2018-04-10T05:29:00","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17492","RelatedDescription":"Opened pull request \"Use non-inlineable overload for rare CompareOrdinalIgnoreCase path\" (#17492) at dotnet/coreclr","RelatedBody":"This fixes regression introduced in #17237."},{"Id":"7504611031","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:46:11","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17477","RelatedDescription":"Merged pull request \"Fix trigger for tier 1 call counting delay\" (#17477) at dotnet/coreclr","RelatedBody":"The trigger was taking into account all non-tier-1 JIT invocations to delay call counting, even for those methods that are not eligible for tiering. In the AllReady benchmark, some dynamic methods were being jitted frequently enough to not allow tier 1 call counting to begin. Fixed to count only eligible methods jitted at tier 0, such that methods not eligible for tiering don't interfere with the tiering heuristics."},{"Id":"7504495451","Type":"PullRequestEvent","CreatedAt":"2018-04-10T03:59:20","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17491","RelatedDescription":"Opened pull request \"Optimize the span property by using a local to store the _object field and using Unsafe.As\" (#17491) at dotnet/coreclr","RelatedBody":"Following the approach from https://github.com/dotnet/coreclr/pull/17471.\r\n\r\n![image](https://user-images.githubusercontent.com/6527137/38535553-da80a3ca-3c38-11e8-9521-e923582ff301.png)\r\n\r\ncc @GrabYourPitchforks, @stephentoub, @davidfowl, @pakrym  "},{"Id":"7504074583","Type":"IssuesEvent","CreatedAt":"2018-04-10T01:30:21","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17490","RelatedDescription":"Opened issue \"Remove JIT LEGACY_BACKEND code\" (#17490) at dotnet/coreclr","RelatedBody":"Remove the obsolete JIT `LEGACY_BACKEND` code.\r\n\r\nThis was only ever supported for x86 and arm32. The x86 `LEGACY_BACKEND` path has not been built for tested for several months. For arm32, `LEGACY_BACKEND` is currently still built and can be tested, but RyuJIT/arm32 (the non-`LEGACY_BACKEND` code) has been the default for many months.\r\n\r\nAlso, delete the legacy backed support in netci.groovy, and other places.\r\n\r\nThis will _drastically_ simplify the JIT source code, and will complete our multi-year transition to the RyuJIT architecture."},{"Id":"7504061849","Type":"IssuesEvent","CreatedAt":"2018-04-10T01:25:53","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/4204","RelatedDescription":"Closed issue \"ARM softFP in the JIT\" (#4204) at dotnet/coreclr","RelatedBody":"# Problem\n\nHave JIT generate ARM32 code without using floating-point registers, aka softFP. Floating-point operations will happen via helper calls. The resulting code can run on platforms without floating-point hardware.\n# Questions\n1. Is this feature actually needed?\n2. Who is going to use this feature, if implemented?\n3. Who is planning to work on this feature?\n4. Would the JIT be built in a special mode (that is, with a special `#ifdef`) to enable this? Or would determining whether to generate softFP code happen dynamically?\n5. How important is floating-point performance? Does the JIT optimizer need to optimize floating-point operations, or can it just treat all floating-point operations as opaque calls? Presumably, if a platform doesn't have floating-point hardware, then floating-point performance is not important.\n6. Do software and hardware floating-point implementations, if both available on a platform, need to return identical results?\n# Goals for JIT implementation\n1. It works for LEGACY_BACKEND, which is what will be used in the short term for ARM32 code generation.\n2. It works without changing the legacy backend, or without making many changes to it. As described by the name, this code is legacy, and any work done here is throwaway work on the way to a real, RyuJIT backend port. A RyuJIT implementation might not use the same mechanism.\n3. The changes are simple, isolated, and don't interact, as much as possible, with the rest of the JIT.\n# Options for implementation\n\nIt turns out that there already is code in the JIT to do this under `#if !CPU_HAS_FP_SUPPORT`. It has not been used for a while, and it doesn't currently compile, so it would need to be updated.\n1. It morphs floating-point operations to helper calls. In particular, see `Compiler::fgMorphToEmulatedFP()`.\n2. It was implemented with the legacy backend, so that support is at least partially there.\n3. The helper calls would need to be defined and implemented.\n"},{"Id":"7503863051","Type":"PullRequestEvent","CreatedAt":"2018-04-10T00:15:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17489","RelatedDescription":"Opened pull request \"Update PgoData to release-20180409-1659 (release/2.1)\" (#17489) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7503797349","Type":"PullRequestEvent","CreatedAt":"2018-04-09T23:52:26","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17471","RelatedDescription":"Merged pull request \"Avoid Unsafe.As usage in ValueTask that can break type safety\" (#17471) at dotnet/coreclr","RelatedBody":"Unsafe.As yields a performance improvement over using a normal cast, and it's fine when ValueTask is used correctly, but if the ValueTask instance were to be stored into a field and multiple threads incorrectly raced to access it, a torn read/write could result in violating type safety due to ObjectIsTask reading the wrong value for the associated object.\r\n\r\nContributes to https://github.com/dotnet/coreclr/issues/17470\r\ncc: @jkotas, @GrabYourPitchforks, @kouvel "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7503973999","Type":"PullRequestEvent","CreatedAt":"2018-04-10T00:55:01","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9031","RelatedDescription":"Merged pull request \"Fixing build-break in AllLinuxDistrosNativeInstallers; CLI:master\" (#9031) at dotnet/cli","RelatedBody":"Fixing typos...\r\nshould be: \"InputFiles\" and \"DestinationFiles\"\r\n\r\n\r\n**Build break:**\r\nbuild/package/Installer.RPM.targets(115,26): warning MSB4064: The \"InputFile\" parameter is not supported by the \"ReplaceFileContents\" task. Verify the parameter exists on the task, and it is a settable public instance property.\r\n\r\n**First VSO break instance:**\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1560139\r\n\r\n**Commit:**\r\nhttps://github.com/dotnet/cli/commit/c3a1fecd995dc611f275a78cbfd3150245f94f5a\r\nInstaller.RPM.targets \r\n\r\n"},{"Id":"7503679685","Type":"PullRequestEvent","CreatedAt":"2018-04-09T23:13:16","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/9031","RelatedDescription":null,"RelatedBody":"Fixing typos...\r\nshould be: \"InputFiles\" and \"DestinationFiles\"\r\n\r\n\r\n**Build break:**\r\nbuild/package/Installer.RPM.targets(115,26): warning MSB4064: The \"InputFile\" parameter is not supported by the \"ReplaceFileContents\" task. Verify the parameter exists on the task, and it is a settable public instance property.\r\n\r\n**First VSO break instance:**\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1560139\r\n\r\n**Commit:**\r\nhttps://github.com/dotnet/cli/commit/c3a1fecd995dc611f275a78cbfd3150245f94f5a\r\nInstaller.RPM.targets \r\n\r\n"},{"Id":"7503679269","Type":"PullRequestEvent","CreatedAt":"2018-04-09T23:13:10","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9031","RelatedDescription":"Closed pull request \"Fixing build-break in AllLinuxDistrosNativeInstallers; CLI:master\" (#9031) at dotnet/cli","RelatedBody":"Fixing typos...\r\nshould be: \"InputFiles\" and \"DestinationFiles\"\r\n\r\n\r\n**Build break:**\r\nbuild/package/Installer.RPM.targets(115,26): warning MSB4064: The \"InputFile\" parameter is not supported by the \"ReplaceFileContents\" task. Verify the parameter exists on the task, and it is a settable public instance property.\r\n\r\n**First VSO break instance:**\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1560139\r\n\r\n**Commit:**\r\nhttps://github.com/dotnet/cli/commit/c3a1fecd995dc611f275a78cbfd3150245f94f5a\r\nInstaller.RPM.targets \r\n\r\n"},{"Id":"7503537603","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:32:08","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9032","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-rtm.5077 into cli\" (#9032) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5077 into cli release/2.1.2xx branch"},{"Id":"7503520799","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:27:36","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9031","RelatedDescription":"Opened pull request \"Fixing build-break in AllLinuxDistrosNativeInstallers; CLI:master\" (#9031) at dotnet/cli","RelatedBody":"Fixing typos...\r\nshould be: \"InputFiles\" and \"DestinationFiles\"\r\n\r\n\r\n**Specific error:**\r\nbuild/package/Installer.RPM.targets(115,26): warning MSB4064: The \"InputFile\" parameter is not supported by the \"ReplaceFileContents\" task. Verify the parameter exists on the task, and it is a settable public instance property.\r\n\r\n**First VSO break instance:**\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1560139\r\n\r\n**Commit:**\r\nhttps://github.com/dotnet/cli/commit/c3a1fecd995dc611f275a78cbfd3150245f94f5a\r\nInstaller.RPM.targets \r\n\r\n"},{"Id":"7503464264","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:12:57","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9030","RelatedDescription":"Opened pull request \"[WIP] Update the template engine bits in the 2.1.2xx CLI\" (#9030) at dotnet/cli","RelatedBody":"Updating the engine bits to latest. @seancpeters please confirm that these are ones we'd like to ship."},{"Id":"7503456490","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:11:02","Actor":"mlorbetske","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9029","RelatedDescription":"Opened pull request \"[WIP] Update the template engine bits in the 2.1.1xx CLI\" (#9029) at dotnet/cli","RelatedBody":"Updating the engine bits to latest. @seancpeters please confirm that these are ones we'd like to ship."},{"Id":"7503384365","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:53:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9028","RelatedDescription":"Opened pull request \"Updating the description of add/remove nuget packages and references and list\" (#9028) at dotnet/cli","RelatedBody":"Updating the description of add/remove nuget packages and references and list. Also updating the parameter placeholder for add/remove reference.\r\n\r\nFixes https://github.com/dotnet/cli/issues/8816\r\n"},{"Id":"7503211937","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:15:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9024","RelatedDescription":"Merged pull request \"Updating the dev-certs message displayed in the first run experience.\" (#9024) at dotnet/cli","RelatedBody":"Fixes https://github.com/dotnet/cli/issues/9008\r\n"},{"Id":"7503210920","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:15:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9025","RelatedDescription":"Merged pull request \"Update to ASP.NET Core 2.0.7 build 231\" (#9025) at dotnet/cli","RelatedBody":"Update to 2.0.7, take 3. 🎬 "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7494259493","Type":"IssuesEvent","CreatedAt":"2018-04-07T07:16:24","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/703","RelatedDescription":"Opened issue \"Dependency trees, or: why is System.Drawing.Primitives being deployed in a console app?\" (#703) at dotnet/standard","RelatedBody":"I've got a console app that I've turned on linking and trimming for. A complete standalone version targetting win-x64 is about 40MB, which isn't too bad I guess.\r\n\r\nWhat I can't work out is *why* some of the runtime is being included in a simple app, e.g.\r\n\r\n* System.Security.Claims.dll (unused)\r\n\r\n* System.IO.Compression.dll (unused)\r\n\r\n* System.Drawing.Primitives.dll (System.Drawing is removed by linking/trimming but this one isn't)\r\n\r\nI'd like to be able to see *why* certain assemblies are being pulled in, and if they're not needed, get rid of them completely."},{"Id":"7493163502","Type":"PullRequestEvent","CreatedAt":"2018-04-06T21:02:10","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Merged pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7489176150","Type":"IssuesEvent","CreatedAt":"2018-04-06T06:21:59","Actor":"RajeshBalakrishnan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/702","RelatedDescription":"Opened issue \".Net Standard - Directory Services\" (#702) at dotnet/standard","RelatedBody":"Greetings,\r\n\r\nWe are migrating ,net code to ,net standard 2.0. We see \"PrincipalContext\", \"ConnectionOptions\", \"ManagementPath\", \"ObjectQuery\", \"ManagementObjectSearcher\", and \"ManagementObject\" classes are mssing in .Net standard 2.0.\r\n\r\n1. We have used \"PrincipalContext\" class to authenciate Windows user credentials. Can you let us know how to authenciate the user credentials in .Net standard??? Is there any API available???\r\n\r\n2. We have used \"WMI\" query to read the \"Manufacturer\" and \"Model\" details. Can you let us know how to read the same in .Net standard??? Is there any API available???\r\n\r\nThank you"},{"Id":"7487635910","Type":"PullRequestEvent","CreatedAt":"2018-04-05T21:08:50","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Opened pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7504697191","Type":"IssuesEvent","CreatedAt":"2018-04-10T05:18:45","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28969","RelatedDescription":"Opened issue \"Add GetPinnableReference back to Span and ReadOnlySpan\" (#28969) at dotnet/corefx","RelatedBody":"### Proposed Api\r\n\r\n```csharp\r\npublic readonly ref partial struct ReadOnlySpan<T>\r\n{\r\n    [EditorBrowsable(EditorBrowsableState.Never)]\r\n    public readonly ref T GetPinnableReference<T>();\r\n}\r\n\r\npublic readonly ref partial struct Span<T>\r\n{\r\n    [EditorBrowsable(EditorBrowsableState.Never)]\r\n    public ref T GetPinnableReference<T>();\r\n}\r\n```\r\n\r\n### Rational\r\n\r\nSo C#7.3 is outish now https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-preview-relnotes#csharp and it supports:\r\n```\r\nCustom `fixed` statement:\r\n Types that implement a suitable `GetPinnableReference` can be used in a `fixed` statement.\r\n```\r\nHowever, this method on span has been moved to `MemoryMarshal.GetReference` so span cannot participate directly in a `fixed` statement.\r\n\r\nTo allow direct using a fixed statement the methods should be returned; **with the caveat** of adding the attribute `[EditorBrowsable(EditorBrowsableState.Never)]` so the route for a user getting a reference remaining via `MemoryMarshal`\r\n\r\ncc @davidfowl, @GrabYourPitchforks, @stephentoub, @KrzysztofCwalina, @pakrym, @ahsonkhan @jkotas "},{"Id":"7504668661","Type":"IssuesEvent","CreatedAt":"2018-04-10T05:07:55","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28968","RelatedDescription":"Opened issue \"Random hang/timeout in  System.Net.Http.Functional.Tests in CI\" (#28968) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/pull/28962\r\n\r\nhttps://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a206cf92c713b91e74bf786ef3f980ce29c2b4bb/workItem/System.Net.Http.Functional.Tests/wilogs\r\nWindows.7.Amd64.Open-x64:Debug\r\n\r\n```text\r\n2018-04-10 03:37:43,569: INFO: proc(54): run_and_log_output: Output: \r\n2018-04-10 03:37:43,631: INFO: proc(54): run_and_log_output: Output: Discovering: System.Net.Http.Functional.Tests\r\n2018-04-10 03:37:43,960: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Net.Http.Functional.Tests\r\n2018-04-10 03:37:44,210: INFO: proc(54): run_and_log_output: Output: Starting:    System.Net.Http.Functional.Tests\r\n2018-04-10 03:37:44,740: INFO: proc(54): run_and_log_output: Output:    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientMiniStress.ManyClients_ManyPosts_Async [SKIP]\r\n2018-04-10 03:37:44,740: INFO: proc(54): run_and_log_output: Output:       Condition(s) not met: \\\"IsStressModeEnabled\\\"\r\n\r\n```\r\n...\r\n```text\r\n2018-04-10 03:57:16,631: INFO: servicebusrepository(84): renew_workitem_lock: Entering renew_workitem_lock for https://nethelix.servicebus.windows.net/windows.7.amd64.open/messages/42002763/01e87693-ce18-4c7c-9e80-042ff46d0dd7\r\n2018-04-10 03:57:16,740: INFO: saferequests(90): request_with_retry: Response complete with status code '200'\r\n2018-04-10 03:57:16,740: INFO: servicebusrepository(97): renew_workitem_lock: renew_workitem_lock Status Code: 200\r\n2018-04-10 03:57:43,053: ERROR: job(44): kill: Job running for too long. Killing...\r\n2018-04-10 03:57:43,053: ERROR: executor(399): _execute_command: Executor timed out after 1200 seconds and was killed.\r\n2018-04-10 03:57:43,053: INFO: event(43): send: Sending event type WorkItemTimeout\r\n2018-04-10 03:57:43,898: INFO: saferequests(90): request_with_retry: Response complete with status code '201'\r\n2018-04-10 03:57:43,898: INFO: executor(418): _execute_command: Finished _execute_command, exit code: -3\r\n```\r\n\r\ncc @davidsh, @wfurt, @caesar1995, @rmkerr, @karelz"},{"Id":"7504659699","Type":"PullRequestEvent","CreatedAt":"2018-04-10T05:04:37","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28967","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#28967) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7504648435","Type":"PullRequestEvent","CreatedAt":"2018-04-10T05:00:23","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28958","RelatedDescription":"Closed pull request \"Mirror changes from dotnet/coreclr\" (#28958) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7504647993","Type":"PullRequestEvent","CreatedAt":"2018-04-10T05:00:15","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28880","RelatedDescription":"Merged pull request \"Fix MemoryManager ctor, add unit and perf tests, and improve performance\" (#28880) at dotnet/corefx","RelatedBody":"- Check for manager == null in the constructor\r\n- ~Add and use Span.DangerousCreate in the Memory.Span property getter (to remove unnecessary bounds checks).~\r\n- Add unit and performance tests.\r\n\r\n!~[image](https://user-images.githubusercontent.com/6527137/38406289-26920f14-3929-11e8-865e-4f0ecaf05acf.png)~\r\n\r\nDepends on coreclr PR to go through for CI to be green: https://github.com/dotnet/coreclr/pull/17452\r\n\r\ncc @dotnet/corefxlab-contrib, @jkotas, @pakrym, @davidfowl, @stephentoub  "},{"Id":"7504566632","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:28:13","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28966","RelatedDescription":"Opened pull request \"Make X509_store_add_crl throw on unexpected errors\" (#28966) at dotnet/corefx","RelatedBody":"Fixes #3063 and ipart 2 of #25676: clear error queue on X509_store_add_crl failures (X509StoreAddCrl)."},{"Id":"7504547682","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:20:16","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28965","RelatedDescription":"Opened pull request \"Fix perf hit from WinHttpGetProxyForUrl\" (#28965) at dotnet/corefx","RelatedBody":"WinHttpGetIEProxyConfigForCurrentUser has returned settings where \"Use automatic configuration script\" and\r\n\"Automatically detect settings\" are unchecked. It means that WPAD protocol shouldn't be used, and there is\r\nno explicit PAC file set. We can avoid calling WinHttpGetProxyForUrl for each request.\r\n\r\nFix: #28543"},{"Id":"7504515116","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:06:58","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28964","RelatedDescription":"Opened pull request \"propagate default credentials so we can pick up default kerberos ticket\" (#28964) at dotnet/corefx","RelatedBody":"fixes #28963 \r\n\r\nThis duplicates code from Windows counter part. \r\nThis makes SocketsHttpHandler behave like curl.\r\n\r\nNote there is no unit test yet. Kerberos setup will need some more work. \r\nThis was tested manually:\r\n\r\n> ~/latest/dotnet run http://toweinfu-iis/test/auth/negotiate/Showidentity.ashx\r\n> result1=StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.HttpConnection+HttpConnectionResponseContent, Headers:\r\n> {\r\n>   Cache-Control: private\r\n>   Server: Microsoft-IIS/10.0\r\n>   X-AspNet-Version: 4.0.30319\r\n>   Persistent-Auth: true\r\n>   X-Powered-By: ASP.NET\r\n>   WWW-Authenticate: Negotiate oRQwEqADCgEAoQsGCSqGSIb3EgECAg==\r\n>   Date: Tue, 10 Apr 2018 03:58:37 GMT\r\n>   Content-Type: application/json; charset=utf-8\r\n>   Content-Length: 60\r\n> }\r\n> result1 lenght = System.Threading.Tasks.Task\r\n> {\r\n>   \"Authenticated\": \"True\",\r\n>   \"User\": \"pri\\testuser\"\r\n> }\r\n\r\n\r\n"},{"Id":"7504498964","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:00:37","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28859","RelatedDescription":"Closed pull request \"Fix perf hit from WinHttpGetProxyForUrl\" (#28859) at dotnet/corefx","RelatedBody":"This PR optimizes some scenarios which we need to call `WinHttpGetProxyForUrl`.\r\n\r\n1. Introduce the `WinHttpDetectAutoProxyConfigUrl` function, which implements a subset of the WPAD protocol: it attempts to auto-detect the URL for the proxy auto-config file, without downloading or executing the PAC file.\r\n\r\n- If not able to find the script location. It is possible that there is no proxy auto-configuration file because the client has a direct Internet connection, and does not need a proxy server. Or a proxy server may be required, but the local network may not support WPAD. In both cases, the proxy configuration has to be obtained from the user or found somewhere on the client machine. We will use the information from calling into `WinHttpGetIEProxyConfigForCurrentUser` to see whether a proxy server is listed in Internet Explorer's settings. Cache the information.\r\n\r\n- If able to find the script location, the AutoDetect setting has precedence over the other settings. So if there is already a automatic configuration script location (from `WinHttpGetIEProxyConfigForCurrentUser`), this value will be overridden. We will cache the related information and provide it to `WinHttpGetProxyForUrl`.\r\n\r\n2. If there is no proxy, the information has been cached from the above procedures, we will stop calling into `WinHttpGetProxyForUrl`.\r\n\r\nWe have exhaustive test cases verifying behaviors with different proxy settings. Please let me know if there are special cases we care about, and I will add tests for them.\r\n\r\nhttps://github.com/dotnet/corefx/blob/85062446c4e5af0c205f646e0ae720e160b20e85/src/System.Net.Http.WinHttpHandler/tests/UnitTests/WinHttpHandlerTest.cs#L641-L832\r\n\r\nFix: #28543"},{"Id":"7504439022","Type":"PullRequestEvent","CreatedAt":"2018-04-10T03:37:42","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28949","RelatedDescription":"Merged pull request \" Clear SSL error queue after SSL_shutdown calls\" (#28949) at dotnet/corefx","RelatedBody":"Part 1 of separating PR #28862 into smaller parts. This one covers the calls to SSL_shutdown explicitly made in CoreFx sources.\r\n\r\nThe other location of [SSL_shutdown call](https://github.com/dotnet/corefx/blob/275752f322defe4e4d0d6e9ccb4330df146d57f1/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Unix.cs#L242-261) is already covered by the SSL_ERROR_SSL case. "},{"Id":"7504434140","Type":"IssuesEvent","CreatedAt":"2018-04-10T03:35:53","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28963","RelatedDescription":"Opened issue \"SocketsHttpHandler: unable to use pre-authenticated kerberos ticket for auth on Unix\" (#28963) at dotnet/corefx","RelatedBody":"This is fllow-up on #27876\r\n\r\nI have setup where Linux machine joined domain (using MIT krb5)\r\n\r\n> clruser@CLRPERFTST003:$ kinit\r\n> Password for clradmin@COREFX.NET:\r\n> clruser@CLRPERFTST003:$ klist\r\n> Ticket cache: FILE:/tmp/krb5cc_1000\r\n> Default principal: clradmin@COREFX.NET\r\n> \r\n> Valid starting Expires Service principal\r\n> 2018-03-08 14:16:54 2018-03-09 00:16:54 krbtgt/COREFX.NET@COREFX.NET\r\n> renew until 2018-03-09 14:16:48\r\n> 2018-03-08 14:37:52 2018-03-09 00:16:54 HTTP/clrperftst003.corefx.net@COREFX.NET\r\n> renew until 2018-03-09 14:16:48\r\n> \r\n\r\nUnlike curl handler, SocketsHttpHandler is not able to use it for authentication. \r\nExplicit authentication works when specified in user@FQDN and DNS is configured properly. \r\n(not that for Kerberos time and name services are essential) \r\n\r\n"},{"Id":"7504409392","Type":"PullRequestEvent","CreatedAt":"2018-04-10T03:26:51","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28957","RelatedDescription":"Merged pull request \"Update CoreClr, CoreSetup to preview3-26410-02, preview3-26409-05, respectively (master)\" (#28957) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7504623886","Type":"IssuesEvent","CreatedAt":"2018-04-10T04:50:57","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25930","RelatedDescription":"Closed issue \"[xUnit] [ERROR] - The result file Roslyn.Services.Editor.UnitTests.dll.xml for the metric 'xUnit.Net' is empty. \" (#25930) at dotnet/roslyn","RelatedBody":"The following error appeared in 2 runs. Will update this issue if the same test fails again.\r\n\r\n[xUnit] [ERROR] - The result file 'D:\\j\\workspace\\windows_relea---c796cf20\\Binaries\\Release\\UnitTests\\EditorServicesTest\\xUnitResults\\Roslyn.Services.Editor.UnitTests.dll.xml' for the metric 'xUnit.Net' is empty. The result file has been skipped.\r\n\r\nhttps://ci.dot.net/job/dotnet_roslyn/view/Official%20Builds/job/dev15.7.x/job/windows_release_unit32/229/\r\n\r\nhttps://ci.dot.net/job/dotnet_roslyn/view/Official%20Builds/job/dev15.7.x/job/windows_release_unit64/227/"},{"Id":"7504622393","Type":"PullRequestEvent","CreatedAt":"2018-04-10T04:50:25","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26047","RelatedDescription":"Merged pull request \"Avoid IForegroundNotificationService interaction from tests that can't use it\" (#26047) at dotnet/roslyn","RelatedBody":"Fixes #25930\r\n\r\nThis is a weaker form of #25938, but is a test-only change that we can bring in earlier branches."},{"Id":"7504606744","Type":"IssuesEvent","CreatedAt":"2018-04-10T04:44:30","Actor":"msbasanth","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26059","RelatedDescription":"Opened issue \"Unable to retrieve whether assembly is C# assembly or C++/CLI assembly\" (#26059) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nRoslyn - v2.6.0\r\nVS2017 15.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. I have a C++/CLI assembly where I am exposing few APIs\r\n2. I am referring the same from a C# assembly and analyzer the MemberAccessExpressionSyntax\r\n3. I got IMethodSymbol by using semanticModel.GetSymbolInfo(memberAccessExpressionNode).Symbol\r\n\r\n**Expected Behavior**:\r\nThe property methodSymbol.Language should show C# in the IMethod Symbol and also in the methodSymbol.ContainingAssembly.Language.\r\n\r\n**Actual Behavior**:\r\nIn both methodSymbol and methodSymbol.ContainingAssembly Language property shows C# not C++/CLI.\r\n\r\nI wanted to skip analyzing C++/CLI member access in my analyzer. How can I identify whether I am analyzing C# assembly or C++/CLI assembly?\r\n\r\nRegards\r\nBasanth\r\n"},{"Id":"7504556102","Type":"IssuesEvent","CreatedAt":"2018-04-10T04:23:45","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26058","RelatedDescription":"Opened issue \"VB: Multiple issues with LIKE operator in portable class libraries.\" (#26058) at dotnet/roslyn","RelatedBody":"**Version Used**:\r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nCreate a VB portable class library targeting the .NET Standard 2.0 and type in the following code in the `Class1.vb` file created by default:\r\n\r\n```vb\r\nPublic Class Class1\r\n  Public Sub New()\r\n    Dim test = \"eric\" Like \"e*c\"\r\n  End Sub\r\nEnd Class\r\n```\r\n\r\n**The first problem is that when you build that library the build fails but the Error List window remains completely blank.** In fact the only way to know the build has failed is that the Visual Studio status bar says `Build failed`.\r\n\r\nNow in the same solution, add a VB console project and then add a reference to the portable library so you have something like this:\r\n\r\n![vs_like_operator_1](https://user-images.githubusercontent.com/20465797/38534690-27ddbd0c-3c88-11e8-94cc-b1cb5a14d778.png)\r\n\r\nThis time when you build, the build fails and the Error List window says `could not find library`:\r\n\r\n![vs_like_operator_2](https://user-images.githubusercontent.com/20465797/38534772-a6cec5a2-3c88-11e8-8747-b786e7557d00.png)\r\n\r\n**The second problem is that the build dependency system should probably NOT attempt to build a project X that depends on a project Y, if said project Y failed to build.** In this case the console project depends on the portable library and an attempt was made to build the console project even though the portable library failed to build. In a large solution, this behaviour leads to a large number of cascading failures in the build with the Error List showing many cases of `could not find library`.\r\n\r\n**Expected Behavior**:\r\n\r\nThe `LIKE` operator is VB-specific and as such its implementation lives in `Microsoft.VisualBasic.dll` (Reflector shows it to be in class `Microsoft.VisualBasic.CompilerServices.LikeOperator`). When you use it in a non-portable project (e.g. a VB console project) it works just fine so I have a feeling that whatever magic is used to make VB-specific stuff work in portable libraries, has not been applied to the code behind the `LIKE` operator which is why the build fails (in fact there appear to be [tests](https://github.com/dotnet/roslyn/blob/0a6bc67a45627fa828ed935a862111a775939cd6/src/Compilers/VisualBasic/Test/Semantic/Semantics/MissingRuntimeHelpers.vb#L175) in the Rosyln code to verify NON-support for this operator).\r\n\r\n**Naturally, one expects that a fundamental aspect of the language such as an operator would work in all project types so the expected behaviour is to add said support** :smile: \r\n\r\n**In the interim, it would be handy if the error handling related to this issue could be improved**. Something to the effect of `LIKE operator is not supported for current project type` (in fact there appears to be an [error handler](https://github.com/dotnet/roslyn/blob/c4e412913d754cdfa9e140f5c8370746bfc6033e/src/Compilers/VisualBasic/Portable/Binding/Binder_Expressions.vb#L2497) for this scenario in the VB compiler, as well as a [template message](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/VBResources.Designer.vb,9328) with that exact wording. I was able to track this because sometimes, for a brief moment, the Error List **does** show a message like that, but then it is \"pushed out\" by those `could not find library` messages that flood the list in a large solution).\r\n\r\n**PS**: it has been YEARS since I touched the LIKE operator in any real project, but recently I found it handy to implement search patterns similar to those you would pass to functions like [DirectoryInfo.EnumerateDirectories](https://docs.microsoft.com/en-us/dotnet/api/system.io.directoryinfo.enumeratedirectories?view=netstandard-2.0#System_IO_DirectoryInfo_EnumerateDirectories_System_String_). I was attempting to do this in portable class library which is how I came across the problems reported above. Since it's broken for now I think I may have to resort to using regexes (which, though overkill for this use case, are thankfully supported in .NET Standard 2.0).\r\n\r\n**PPS**: many thanks to the people who worked hard to bring support for .NET Standard 2.0 to VB. I realise this is made challenging by VB-isms like the LIKE operator, but given how well it has worked so far, I am super confident minor edge cases like this one will be fixed too :+1: :+1: "},{"Id":"7504132421","Type":"PullRequestEvent","CreatedAt":"2018-04-10T01:50:50","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26057","RelatedDescription":"Opened pull request \"VB: Debugger Bug when using type Date Properties in Classes in .NET Core Projects\" (#26057) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/25018\r\n\r\nTests are already there: http://source.roslyn.io/#Roslyn.ExpressionEvaluator.VisualBasic.ResultProvider.UnitTests/ValueFormatterTests.vb,568\r\n\r\nPlease advise if we can specifically run those tests under .NET Core.\r\n\r\nTagging @r-ramesh for review\r\n\r\n"},{"Id":"7504121558","Type":"IssuesEvent","CreatedAt":"2018-04-10T01:46:53","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25018","RelatedDescription":"Reopened issue \"VB: Debugger Bug when using type Date Properties in Classes in .NET Core Projects\" (#25018) at dotnet/roslyn","RelatedBody":"This is tested with 15.5.6 and with 15.6.5.\r\n\r\n1. Create a new Visual Basic .NET Core Command Line App.\r\n2. Insert this Code:\r\n\r\n```\r\nModule Program\r\n    Sub Main(args As String())\r\n        Console.WriteLine(\"Hello World!\")\r\n\r\n        Dim t As New FurchtBar With {.Foo = \"Test\",\r\n                                     .Bar = 5,\r\n                                     .FurchtBar = #2012-12-12#}\r\n\r\n        If Debugger.IsAttached Then\r\n            Debugger.Break()\r\n        End If\r\n    End Sub\r\nEnd Module\r\n\r\nPublic Class FurchtBar\r\n    Public Property Foo As String\r\n    Public Property Bar As Integer\r\n    Public Property FurchtBar As Date\r\nEnd Class\r\n\r\n```\r\n\r\n**Expected Behavior**:\r\nDebugger should display the values of t, when you hover over the variable.\r\n\r\n**Actual Behavior**:\r\nDebugger displays '?' instead for each value.\r\n\r\n![image](https://user-images.githubusercontent.com/9663150/36587481-99b9ab7e-1885-11e8-8326-a8650283d44c.png)\r\n\r\nWhen you get rid of the Furchtbar Property (Date) in the class, values are displayed correctly."},{"Id":"7504059377","Type":"PullRequestEvent","CreatedAt":"2018-04-10T01:25:03","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26056","RelatedDescription":"Opened pull request \"Effects Of #26034 StringComparer Usage Changes.\" (#26056) at dotnet/roslyn","RelatedBody":"Issue #26034. **Test Failures Are To Be Expected**\r\n\r\nChange some usage of `StringComparer.OrdinalIgnoreCase` and `CaseInse…nsitiveComparison.Comparer`\r\nTo `CaseInsensitiveComparison`\r\n\r\n"},{"Id":"7504053495","Type":"PullRequestEvent","CreatedAt":"2018-04-10T01:22:55","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25322","RelatedDescription":"Closed pull request \"Add initial support for object creation initializers.\" (#25322) at dotnet/roslyn","RelatedBody":"Adds initial support for object creation initializers. Support has been added for object collection initializers only right now, collection support will be a follow up PR. @AlekseyTs @dotnet/roslyn-compiler for initial review."},{"Id":"7504049662","Type":"PullRequestEvent","CreatedAt":"2018-04-10T01:21:30","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26055","RelatedDescription":"Opened pull request \"Added InstanceReferenceKind to IInstanceReferenceOperation for tellin…\" (#26055) at dotnet/roslyn","RelatedBody":"…g between this. usage and initializer usage.\r\n\r\nSplit out part of https://github.com/dotnet/roslyn/pull/25322 to reduce the resulting size of the PR, and update the base to current features/dataflow. I've addressed initial relevant comments from that review."},{"Id":"7503835693","Type":"IssuesEvent","CreatedAt":"2018-04-10T00:05:29","Actor":"AlexanderMorou","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26054","RelatedDescription":"Opened issue \"DebuggerDisplayAttribute\" (#26054) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio 15.6.5\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an enum\r\n2. Add Debugger Display that uses `{this}` or `{this.ToString()}`\r\n3. Attempt to view variable or property which uses a reference to the enum.\r\n\r\n**Expected Behavior**:\r\nDebugger Display correctly executes and displays the result when you hover over the relevant variable or property in break mode.\r\n\r\n**Actual Behavior**:\r\nDebugger indicates the following in the result:\r\n`The debugger is unable to evaluate this expression`\r\n\r\n**A Simple Example**\r\n```\r\n[DebuggerDisplay(\"Testing Debugger Display: {this.ToString()}\")]\r\npublic enum MyTest\r\n{\r\n    Item1,\r\n    Item2,\r\n}\r\n```\r\n\r\nThis used to work in previous versions of Visual Studio.  It was useful to send the value to a method of some kind in the event that you wanted to manipulate the result"},{"Id":"7503791833","Type":"IssuesEvent","CreatedAt":"2018-04-09T23:50:30","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26053","RelatedDescription":"Opened issue \"[VB] #If. Then. .. #Else.. #End If don't work\" (#26053) at dotnet/roslyn","RelatedBody":"#If DEBUG Then\n    &lt;WebMethod()&gt;\n#Else\n    &lt;WebMethod(CacheDuration:=86400)&gt;\n#End If\n\nSignals a BC30012 (missing #End If)\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/179853/vb-ifthenelseend-if-dont-work.html\nVSTS ticketId: 549666_\n_These are the original issue comments:_\n\nJinu Joseph [MSFT] on 1/14/2018, 03:53 PM (84 days ago): <p>Thank you for your feedback! </p><p>Tried with simple example </p><p><br></p><p>Dim x As Double</p><p><br></p><p>#If DEBUG Then</p><p>    x = 1</p><p>#Else</p><p>    x= 0</p><p>#End If</p><p><br></p><p>Could it be possible that your attribute selection is not compiling.</p><p><br></p><p>We look forward to hearing from you!</p>\n\nLino Barreca on 1/15/2018, 00:03 AM (84 days ago): <p>Try with this instead.</p><pre>#If DEBUG Then<br> &lt;WebMethod()&gt;<br>#Else<br> &lt;WebMethod(CacheDuration:=86400)&gt;<br>#End If\nPublic Function SomeFunction() As String\n Return \"Ciao\"\nEnd Function </pre><p>Logic is pretty simple: If I'm compiling for debug I want to apply one attribute to the method, if I'm compiling for release I want to apply the other.</p><p>The problem is related to #if and method attributes. compiler syntax analyzer expects the line after the attribute to be the method definition and not the \"#end if\" keyword.</p><p>Proof of the above statement is that THIS one below compiles correctly but is very bad because I have to define the method twice even if it's the same.</p><pre>#If DEBUG Then\n &lt;WebMethod()&gt;\n Public Function SomeFunction() As String\n#Else\n &lt;WebMethod(CacheDuration:=86400)&gt;\n Public Function SomeFunction() As String\n#End If\n Return \"Ciao\"\nEnd Function</pre>\n\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7504048627","Type":"PullRequestEvent","CreatedAt":"2018-04-10T01:21:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5669","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7503857913","Type":"PullRequestEvent","CreatedAt":"2018-04-10T00:13:24","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5669","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5669) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7503823014","Type":"PullRequestEvent","CreatedAt":"2018-04-10T00:01:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5668","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5668) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7503794149","Type":"PullRequestEvent","CreatedAt":"2018-04-09T23:51:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5667","RelatedDescription":"Merged pull request \"New ObjectWriter NuGet packaging scripts\" (#5667) at dotnet/corert","RelatedBody":"Contributes to #5177. The packages are building successfully on Linux and OSX. It needs more work on Windows."},{"Id":"7503611495","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:52:37","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5668","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5668) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7503383458","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:53:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5651","RelatedDescription":"Merged pull request \"Quality of Life improvements to CoreFX testing infra\" (#5651) at dotnet/corert","RelatedBody":"Also fixes a linking issue in Linux connected to gss (similar to #5644 for OSX) .\r\nImproves brittleness of the framework and brings up some inconsistencies across platforms. "},{"Id":"7503372964","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:51:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5667","RelatedDescription":"Opened pull request \"New ObjectWriter NuGet packaging scripts\" (#5667) at dotnet/corert","RelatedBody":"Contributes to #5177. The packages are building successfully on Linux and OSX. It needs more work on Windows."},{"Id":"7503301818","Type":"PullRequestEvent","CreatedAt":"2018-04-09T21:34:36","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5666","RelatedDescription":"Merged pull request \"Change section of RuntimeMethodHandle/RuntimeFieldHandle\" (#5666) at dotnet/corert","RelatedBody":"These have pointers in them and `ld` doesn't like that in a read only section.\r\n\r\nSaw the `PIE disabled. Absolute addressing (perhaps -mdynamic-no-pic) not allowed in code signed PIE` warning in a screenshot that someone posted on Twitter and this is an easy fix..."},{"Id":"7503108381","Type":"PullRequestEvent","CreatedAt":"2018-04-09T20:54:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5666","RelatedDescription":"Opened pull request \"Change section of RuntimeMethodHandle/RuntimeFieldHandle\" (#5666) at dotnet/corert","RelatedBody":"These have pointers in them and `ld` doesn't like that in a read only section.\r\n\r\nSaw the `PIE disabled. Absolute addressing (perhaps -mdynamic-no-pic) not allowed in code signed PIE` warning in a screenshot that someone posted on Twitter and this is an easy fix..."},{"Id":"7501978843","Type":"PullRequestEvent","CreatedAt":"2018-04-09T17:11:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5665","RelatedDescription":"Merged pull request \"Disable type equality optimizations\" (#5665) at dotnet/corert","RelatedBody":"When I was investigating #5661 yesterday I found we're asserting RyuJIT when compiling `System.IO.BinaryReader:.ctor(ref,ref,bool)`. This works around the issue.\r\n\r\nNo new bug filed since we track this in  #5180.\r\n\r\nJitDump: [jitdump.txt](https://github.com/dotnet/corert/files/1889979/jitdump.txt)\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7503704339","Type":"PullRequestEvent","CreatedAt":"2018-04-09T23:21:01","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2126","RelatedDescription":"Opened pull request \"Don't include files with source extension in None item by default\" (#2126) at dotnet/sdk","RelatedBody":"Fixes #1157"},{"Id":"7503537577","Type":"PullRequestEvent","CreatedAt":"2018-04-09T22:32:08","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2125","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.7.0-rtm.5077 into sdk\" (#2125) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5077 into sdk release/2.1.2xx branch"},{"Id":"7502717142","Type":"IssuesEvent","CreatedAt":"2018-04-09T19:37:38","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2124","RelatedDescription":"Opened issue \"Enable test Inbox_version_of_assembly_is_loaded_over_applocal_version once framework deps.json has runtime file versions\" (#2124) at dotnet/sdk","RelatedBody":"#2118 fixes #1847, however, the end-to-end scenario still doesn't work because the Framework deps.json file needs to also have these values.  Once that happens, we should enable the end-to-end test which covers this: `Inbox_version_of_assembly_is_loaded_over_applocal_version`"},{"Id":"7502640524","Type":"PullRequestEvent","CreatedAt":"2018-04-09T19:21:55","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2123","RelatedDescription":"Opened pull request \"Produce 2 'symbols.nupkg'; SDK\" (#2123) at dotnet/sdk","RelatedBody":"Produce 2 'symbols.nupkg':\r\n'Microsoft.NET.Build.Extensions'\r\n'Microsoft.NET.Sdk'\r\n\r\n\r\nAs RepoToolset v=1.0.0-beta-62615-02 uses the glob:\r\n`\"artifacts\\**\\*.nupkg\"`\r\nin 'PipeBuild.Publish.proj'; publishing to ProdCon should also follow.\r\n\r\n"},{"Id":"7502204099","Type":"IssuesEvent","CreatedAt":"2018-04-09T17:56:17","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2122","RelatedDescription":"Opened issue \"Add a switch to control publishing files to the refs directory - PreserveCompilationReferences\" (#2122) at dotnet/sdk","RelatedBody":"Related issues - https://github.com/dotnet/sdk/issues/2092, https://github.com/dotnet/sdk/issues/2121\r\n\r\n`PreserveCompilationContext` is used in two places today \r\n\r\n1. To determine if compilation content goes in the deps file \r\n2. If reference assemblies need to be copied to the `bin\\refs` and `publish\\refs` directories.\r\n\r\nPrior to 2.1.0, the Web Sdk always set `PreserveCompilationContext=true`. This resulted in increased deployment sizes even when the app did not require these files due to design time compilation of views. In 2.1.0-preview2, we tried conditionally setting this value in the WebSdk based on the presence of Razor files. This broke Mvc's runtime capabilities which relies on being able to inspect the deps file to query dependencies. There's more information about it here - https://github.com/dotnet/sdk/issues/2092#issue-309192033.\r\n\r\nWhat we care about, is the ability to suppress publishing the refs directory for most applications. In lieu of solving https://github.com/dotnet/sdk/issues/2092, which seems like a much more involved issue, it would be easier if we could have a different switch (suggestion `PreserveCompilationReferences`) that is used to determine if the refs directory gets emitted. Here are the two places we'd use this switch in lieu of  `PreserveCompilationContext`:\r\n\r\n* https://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PreserveCompilationContext.targets#L45-L46\r\n* https://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PreserveCompilationContext.targets#L84-L85\r\n\r\nThe Web.Sdk \\ Razor.Sdk would be responsible for setting the default value of this property as also initializing it if the user explicitly specified `PreserveCompilationContext` in their project files.\r\n"},{"Id":"7502159910","Type":"IssuesEvent","CreatedAt":"2018-04-09T17:47:47","Actor":"weshaggard","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2119","RelatedDescription":"Closed issue \"Target Multi-TFM net461 and netcoreapp2.1, restore failed.\" (#2119) at dotnet/sdk","RelatedBody":"**## Repro Steps:**\r\n1. In CLI/VS create a new C# .net core console app.\r\n2. Change frameworks to `<TargetFrameworks>net461;netcoreapp2.1</TargetFrameworks>`.\r\n3. Restore failed with the errors as below:\r\n![image](https://user-images.githubusercontent.com/24784908/38466661-23e6b976-3b5f-11e8-959f-64b45ffa9b0b.png)\r\n5. After adding dotnet-core package source: https://dotnet.myget.org/F/dotnet-core/api/v3/index.json , restore still failed with the errors as below:\r\n![image](https://user-images.githubusercontent.com/24784908/38466678-80b1a710-3b5f-11e8-9f26-a5bf57ae0166.png)\r\n\r\n**## Test Environment:**\r\nD15.6/27428.200 + CLI/SDK [2.1.300-preview2-008530](https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180406-05/final/assets/Sdk/2.1.300-preview2-008530/dotnet-sdk-2.1.300-preview2-008530-win-x64.exe)\r\nor D15.7/27604.00 + CLI/SDK [2.1.300-preview2-008530](https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180406-05/final/assets/Sdk/2.1.300-preview2-008530/dotnet-sdk-2.1.300-preview2-008530-win-x64.exe)\r\ndotnet --info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008530\r\n Commit:    822ae6d43a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008530\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008530 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n```\r\n\r\n"},{"Id":"7502117945","Type":"PullRequestEvent","CreatedAt":"2018-04-09T17:39:29","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2102","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#2102) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7502092531","Type":"IssuesEvent","CreatedAt":"2018-04-09T17:34:17","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2121","RelatedDescription":"Opened issue \"Building an app with PreserveCompilationContext=true causes files from the shared runtime to be copied to bin\\refs directory\" (#2121) at dotnet/sdk","RelatedBody":"This is a regression (?) in 2.1.0-preview2 sdk. Repro steps:\r\n\r\n1) Acquire preview1 Sdk - https://www.microsoft.com/net/download/dotnet-core/sdk-2.1.300-preview1\r\n2) `dotnet new mvc`\r\n3) `dotnet build`\r\n\r\nExamine the bin\\Debug\\netcoreapp2.1 directory and notice all it has is the app's binaries.\r\n\r\n4) Clean the bin directory and run `dotnet build` using the preview2 Sdk (I used `2.1.300-preview2-008367`)\r\n\r\nThe bin directory has a refs directory that contains 300+ files from shared runtimes."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"983487812107304960","CreatedAt":"2018-04-09T23:32:21+00:00","UserScreenname":"dotnet","Text":"Curious which analyzers/fixers (“Quick Actions”) @roslyn provides? @kuhlenhuth has the answer. https://t.co/nawR22r6jz","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2018-04-10T05:30:20.5575313Z","RunDurationInMilliseconds":7955}