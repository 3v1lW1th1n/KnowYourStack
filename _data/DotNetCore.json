{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":243,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":54,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7668388862","Type":"PullRequestEvent","CreatedAt":"2018-05-14T05:23:28","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17982","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26514-01, preview1-26514-01, respectively (master)\" (#17982) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7668231383","Type":"IssuesEvent","CreatedAt":"2018-05-14T04:11:30","Actor":"ArtBlnd","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17984","RelatedDescription":"Opened issue \"Bad side-effect check code generation with fixed pointers\" (#17984) at dotnet/coreclr","RelatedBody":"There is something wired side-effect check code generation on fixed pointers.\r\nI don't know its because of Roslyn generates wrong MSIL. but first. I am writing here.\r\n\r\nExample here.\r\n```\r\nstatic unsafe int Test(int[] arr)\r\n{\r\n    int total = 0;\r\n\r\n    fixed (int* pArr = arr)\r\n    {\r\n        for (int i = 0; i < 4; ++i)\r\n        {\r\n            total += pArr[i];\r\n        }\r\n    }\r\n\r\n    return total;\r\n}\r\n```\r\nThis code generates some odd check codes. here is disassembles.\r\n```\r\n    12:             int total = 0;\r\n00007FFC545304E2 EC                   in          al,dx  \r\n00007FFC545304E3 28 33                sub         byte ptr [rbx],dh  \r\n00007FFC545304E5 C0 48 89 44          ror         byte ptr [rax-77h],44h  \r\n00007FFC545304E9 24 20                and         al,20h  \r\n00007FFC545304EB 33 C0                xor         eax,eax  \r\n    13: \r\n    14:             fixed (int* pArr = arr)\r\n00007FFC545304ED 48 89 4C 24 20       mov         qword ptr [rsp+20h],rcx  \r\n00007FFC545304F2 48 85 C9             test        rcx,rcx  \r\n00007FFC545304F5 74 0B                je          00007FFC54530502  \r\n00007FFC545304F7 48 8B 54 24 20       mov         rdx,qword ptr [rsp+20h]  \r\n00007FFC545304FC 83 7A 08 00          cmp         dword ptr [rdx+8],0  \r\n00007FFC54530500 75 04                jne         00007FFC54530506  \r\n00007FFC54530502 33 D2                xor         edx,edx  \r\n00007FFC54530504 EB 14                jmp         00007FFC5453051A  \r\n00007FFC54530506 48 8B 54 24 20       mov         rdx,qword ptr [rsp+20h]  \r\n00007FFC5453050B 83 7A 08 00          cmp         dword ptr [rdx+8],0  \r\n00007FFC5453050F 76 25                jbe         00007FFC54530536  \r\n00007FFC54530511 48 8B 54 24 20       mov         rdx,qword ptr [rsp+20h]  \r\n00007FFC54530516 48 83 C2 10          add         rdx,10h  \r\n    15:             {\r\n    16:                 for (int i = 0; i < 4; ++i)\r\n00007FFC5453051A 33 C9                xor         ecx,ecx  \r\n    17:                 {\r\n    18:                     total += pArr[i];\r\n00007FFC5453051C 4C 63 C1             movsxd      r8,ecx  \r\n00007FFC5453051F 42 03 04 82          add         eax,dword ptr [rdx+r8*4]  \r\n    16:                 for (int i = 0; i < 4; ++i)\r\n00007FFC54530523 FF C1                inc         ecx  \r\n00007FFC54530525 83 F9 04             cmp         ecx,4  \r\n00007FFC54530528 7C F2                jl          00007FFC5453051C  \r\n00007FFC5453052A 33 D2                xor         edx,edx  \r\n00007FFC5453052C 48 89 54 24 20       mov         qword ptr [rsp+20h],rdx  \r\n00007FFC54530531 48 83 C4 28          add         rsp,28h  \r\n00007FFC54530535 C3                   ret  \r\n00007FFC54530536 E8 05 50 C4 5F       call        00007FFCB4175540  \r\n00007FFC5453053B CC                   int         3  \r\n```\r\nAs you can see. its double checking object.\r\nand also generates check code when its null.\r\n\r\nBut this code. generates as I excepted.\r\n```\r\nstatic unsafe int Test(int[] arr)\r\n{\r\n    int total = 0;\r\n\r\n    fixed (int* pArr = &arr[0])\r\n    {\r\n        for (int i = 0; i < 4; ++i)\r\n        {\r\n            total += pArr[i];\r\n        }\r\n    }\r\n\r\n    return total;\r\n}\r\n```\r\n\r\n```\r\n    12:             int total = 0;\r\n00007FFC545604E2 EC                   in          al,dx  \r\n00007FFC545604E3 28 33                sub         byte ptr [rbx],dh  \r\n00007FFC545604E5 C0 48 89 44          ror         byte ptr [rax-77h],44h  \r\n00007FFC545604E9 24 20                and         al,20h  \r\n00007FFC545604EB 33 C0                xor         eax,eax  \r\n00007FFC545604ED 83 79 08 00          cmp         dword ptr [rcx+8],0  \r\n00007FFC545604F1 76 2A                jbe         00007FFC5456051D  \r\n00007FFC545604F3 48 83 C1 10          add         rcx,10h  \r\n00007FFC545604F7 48 89 4C 24 20       mov         qword ptr [rsp+20h],rcx  \r\n    13: \r\n    14:             fixed (int* pArr = &arr[0])\r\n00007FFC545604FC 48 8B 54 24 20       mov         rdx,qword ptr [rsp+20h]  \r\n    15:             {\r\n    16:                 for (int i = 0; i < 4; ++i)\r\n00007FFC54560501 33 C9                xor         ecx,ecx  \r\n    17:                 {\r\n    18:                     total += pArr[i];\r\n00007FFC54560503 4C 63 C1             movsxd      r8,ecx  \r\n00007FFC54560506 42 03 04 82          add         eax,dword ptr [rdx+r8*4]  \r\n    16:                 for (int i = 0; i < 4; ++i)\r\n00007FFC5456050A FF C1                inc         ecx  \r\n00007FFC5456050C 83 F9 04             cmp         ecx,4  \r\n00007FFC5456050F 7C F2                jl          00007FFC54560503  \r\n00007FFC54560511 33 D2                xor         edx,edx  \r\n00007FFC54560513 48 89 54 24 20       mov         qword ptr [rsp+20h],rdx  \r\n00007FFC54560518 48 83 C4 28          add         rsp,28h  \r\n00007FFC5456051C C3                   ret  \r\n00007FFC5456051D E8 1E 50 C1 5F       call        00007FFCB4175540  \r\n00007FFC54560522 CC                   int         3  \r\n```"},{"Id":"7667919455","Type":"IssuesEvent","CreatedAt":"2018-05-14T01:51:58","Actor":"ArtBlnd","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17983","RelatedDescription":"Closed issue \"Odd code generation with fixed keyword\" (#17983) at dotnet/coreclr","RelatedBody":"there is strange code generation when its using fixed as `fixed (int* pArr = arr)` not `fixed (int* pArr = &arr[0])`\r\n\r\nHere is example.\r\n```\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\n        static unsafe int Test(int[] arr)\r\n        {\r\n            \r\n            int total = 0;\r\n\r\n            fixed (int* pArr = arr)\r\n            {\r\n                for (int i = 0; i < 4; ++i)\r\n                {\r\n                    total += pArr[i];\r\n                }\r\n            }\r\n\r\n            return total;\r\n        }\r\n```\r\n\r\n\r\n```\r\nG_M46070_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      qword ptr [rsp+20H], rax\r\n\r\nG_M46070_IG02:\r\n       48894C2420           mov      gword ptr [rsp+20H], rcx\r\n       4885C9               test     rcx, rcx\r\n       740B                 je       SHORT G_M46070_IG03\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7504                 jne      SHORT G_M46070_IG04\r\n\r\nG_M46070_IG03:\r\n       33C0                 xor      rax, rax\r\n       EB14                 jmp      SHORT G_M46070_IG05\r\n\r\nG_M46070_IG04:\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7622                 jbe      SHORT G_M46070_IG07\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       4883C010             add      rax, 16\r\n\r\nG_M46070_IG05:\r\n       8B10                 mov      edx, dword ptr [rax]\r\n       035004               add      edx, dword ptr [rax+4]\r\n       035008               add      edx, dword ptr [rax+8]\r\n       03500C               add      edx, dword ptr [rax+12]\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      gword ptr [rsp+20H], rax\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M46070_IG06:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M46070_IG07:\r\n       E8FA5DBB5E           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3 \r\n```\r\n\r\nand here is useless copy and checks\r\n```\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      qword ptr [rsp+20H], rax\r\n\r\nG_M46070_IG02:\r\n       48894C2420           mov      gword ptr [rsp+20H], rcx\r\n       4885C9               test     rcx, rcx\r\n```\r\nits testing that `rcx` is null.\r\nbut if its null this will just emit **access violation** over here. not even needs to check its over range.\r\n\r\nas you can see. range check processes here, on `G_M46070_IG02`, `G_M46070_IG04` . even its null.\r\nand funny things its even double checked as not-equal, blow-equal.\r\n```\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7504                 jne      SHORT G_M46070_IG04\r\n```\r\n```\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7621                 jbe      SHORT G_M46070_IG07\r\n```\r\n\r\nAnd here is example with `fixed(int* pArr = &arr[0])`\r\n```\r\nG_M46070_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      qword ptr [rsp+20H], rax\r\n\r\nG_M46070_IG02:\r\n       83790800             cmp      dword ptr [rcx+8], 0\r\n       7626                 jbe      SHORT G_M46070_IG04\r\n       4883C110             add      rcx, 16\r\n       48894C2420           mov      bword ptr [rsp+20H], rcx\r\n       488B442420           mov      rax, bword ptr [rsp+20H]\r\n       8B00                 mov      eax, dword ptr [rax]\r\n       8BD0                 mov      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      bword ptr [rsp+20H], rax\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M46070_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M46070_IG04:\r\n       E8145EBB5E           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3   \r\n```\r\n\r\nAs I expected, it generates normally\r\n\r\n***PS) I don't know how to explain this. this is just **REALL ODD** code. just see my comments as reference. everyone who resolving this issues please see original disassemblies to solve this.***"},{"Id":"7667828361","Type":"IssuesEvent","CreatedAt":"2018-05-14T01:04:20","Actor":"ArtBlnd","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17983","RelatedDescription":"Opened issue \"Strange code generation with fixed keyword\" (#17983) at dotnet/coreclr","RelatedBody":"there is strange range-check generation when its using fixed as `fixed (int* pArr = arr)` not `fixed (int* pArr = &arr[0])`\r\n\r\nHere is example.\r\n```\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\n        static unsafe int Test(int[] arr)\r\n        {\r\n            \r\n            int total = 0;\r\n\r\n            fixed (int* pArr = arr)\r\n            {\r\n                for (int i = 0; i < 4; ++i)\r\n                {\r\n                    total += pArr[i];\r\n                }\r\n            }\r\n\r\n            return total;\r\n        }\r\n```\r\n\r\n\r\n```\r\nG_M46070_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      qword ptr [rsp+20H], rax\r\n\r\nG_M46070_IG02:\r\n       48894C2420           mov      gword ptr [rsp+20H], rcx\r\n       4885C9               test     rcx, rcx\r\n       740B                 je       SHORT G_M46070_IG03\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7504                 jne      SHORT G_M46070_IG04\r\n\r\nG_M46070_IG03:\r\n       33C0                 xor      rax, rax\r\n       EB14                 jmp      SHORT G_M46070_IG05\r\n\r\nG_M46070_IG04:\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7621                 jbe      SHORT G_M46070_IG07\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       4883C010             add      rax, 16\r\n\r\nG_M46070_IG05:\r\n       8B00                 mov      eax, dword ptr [rax]\r\n       8BD0                 mov      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      gword ptr [rsp+20H], rax\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M46070_IG06:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M46070_IG07:\r\n       E8FB5DB85E           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3 \r\n```\r\n\r\nAs you see. first range check processes here, on G_M46070_IG02\r\n```\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7504                 jne      SHORT G_M46070_IG04\r\n```\r\nsecond range check processes here, on G_M46070_IG04\r\n```\r\n       488B442420           mov      rax, gword ptr [rsp+20H]\r\n       83780800             cmp      dword ptr [rax+8], 0\r\n       7621                 jbe      SHORT G_M46070_IG07\r\n```\r\n\r\nthe control-flow will be G_M46070_IG02 -> G_M46070_IG04\r\nso its doing double check with no reason.\r\n\r\nAnd here is example with `fixed(int* pArr = &arr[0])`\r\n```\r\nG_M46070_IG01:\r\n       4883EC28             sub      rsp, 40\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      qword ptr [rsp+20H], rax\r\n\r\nG_M46070_IG02:\r\n       83790800             cmp      dword ptr [rcx+8], 0\r\n       7626                 jbe      SHORT G_M46070_IG04\r\n       4883C110             add      rcx, 16\r\n       48894C2420           mov      bword ptr [rsp+20H], rcx\r\n       488B442420           mov      rax, bword ptr [rsp+20H]\r\n       8B00                 mov      eax, dword ptr [rax]\r\n       8BD0                 mov      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       03D0                 add      edx, eax\r\n       33C0                 xor      rax, rax\r\n       4889442420           mov      bword ptr [rsp+20H], rax\r\n       8BC2                 mov      eax, edx\r\n\r\nG_M46070_IG03:\r\n       4883C428             add      rsp, 40\r\n       C3                   ret      \r\n\r\nG_M46070_IG04:\r\n       E8145EBB5E           call     CORINFO_HELP_RNGCHKFAIL\r\n       CC                   int3   \r\n```\r\n\r\nAs I expected, it generates range check once."},{"Id":"7667798233","Type":"PullRequestEvent","CreatedAt":"2018-05-14T00:46:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17982","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26514-01 (master)\" (#17982) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7667604359","Type":"PullRequestEvent","CreatedAt":"2018-05-13T22:27:30","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17974","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26513-04, preview1-26513-04, respectively (master)\" (#17974) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7667372397","Type":"IssuesEvent","CreatedAt":"2018-05-13T19:56:02","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17980","RelatedDescription":"Closed issue \"What's data stored in method handle?\" (#17980) at dotnet/coreclr","RelatedBody":"```\r\nMethodInfo mi=...;\r\nint data = Marshal.ReadInt32(mi.MethodHandle.Value);\r\nint mask=0xffff;//how to set the mask?\r\nint order=data&mask;\r\nMethodInfo method=module.ResolveMethod(0x06000000+order);\r\n```\r\n\r\nI know, the lower bits is the order number of a method, but I don't know which position is the first bit.\r\n\r\nWhat's the meaning of all the bits?"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7668365628","Type":"IssuesEvent","CreatedAt":"2018-05-14T05:13:44","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9269","RelatedDescription":"Closed issue \"dotnet pack with multiple TFM not working\" (#9269) at dotnet/cli","RelatedBody":"My idea is to have both global tool, and regular application, so non developers could be targeted with app running full framework\r\n\r\n## Steps to reproduce\r\n1. Create global tool, and add support for multiple target frameworks\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <PackAsTool>true</PackAsTool>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp2.1;net462</TargetFrameworks>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n2. run `dotnet pack`\r\n\r\n## Expected  behavior\r\nGenerate pack only for `netcoreapp2.1` or provide ability to select which TFM target\r\n\r\n## Actual behavior\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.PackTool.targets(42,5): error : only supports .NET Core. [XXX.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7665303550","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:38:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9270","RelatedDescription":"Closed issue \"dotnet install tool with additional feed resolution problem\" (#9270) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nFollowing instructions from https://natemcmaster.com/blog/2018/05/12/dotnet-global-tools/\r\n1. `dotnet pack --output ./`\r\n2. ` dotnet tool install -g bwbot-cli --source-feed ./`\r\n\r\n## Expected  behavior\r\nResolution of feed path should be relative to current directory where command is executed.\r\n\r\n## Actual behavior\r\nCurrently, path `./` resolved to some temporary location where created `restore.csproj`. Something like `C:\\Users\\user\\AppData\\Local\\Temp\\y33whrud.znw\\restore.csproj`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nСреда выполнения:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7665276275","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:20:27","Actor":"TonyValenti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/725","RelatedDescription":"Opened issue \".NET Standard and System.Net.Http\" (#725) at dotnet/standard","RelatedBody":"Hello .NET Standard Team,\r\nI'm not sure the right way/place to ask this question but I'm hoping you can help me out or point me in the right direction.\r\n\r\nMy understanding is that .NET standard is a set of APIs that, if a .NET runtime implements, we can be sure that it will run on any implementation that of that standard.\r\n\r\nI notice that System.Net.Http.dll seems to be part of the .NET standard, however, when I try to use the latest nuget package on Xamarin/Mac, I get errors because it relies on internal classes within System.dll, namely, System.Net.Logging.\r\n\r\nWhat is the best/right way to deal with an assembly such as that?  Can internals be made part of the standard so that they are guaranteed to work?\r\n\r\n"},{"Id":"7662579315","Type":"IssuesEvent","CreatedAt":"2018-05-11T18:00:51","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/724","RelatedDescription":"Opened issue \"Consider a more open-ended compatibilty mapping with .NET Framework\" (#724) at dotnet/standard","RelatedBody":"@Petermarcu suggested that we might desire a more open ended behavior rather than what we currently have (.NET 4.6.1).  Opening this on his behalf."},{"Id":"7656799964","Type":"PullRequestEvent","CreatedAt":"2018-05-10T17:30:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/723","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02810-01 (master)\" (#723) at dotnet/standard","RelatedBody":""},{"Id":"7652677945","Type":"PullRequestEvent","CreatedAt":"2018-05-09T23:15:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02808-01 (master)\" (#721) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7668361673","Type":"PullRequestEvent","CreatedAt":"2018-05-14T05:11:54","Actor":"mmitche","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28660","RelatedDescription":"Closed pull request \"[master] Change esrp signing flag to legacy signing\" (#28660) at dotnet/corefx","RelatedBody":""},{"Id":"7668347371","Type":"PullRequestEvent","CreatedAt":"2018-05-14T05:05:38","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29681","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-26514-01, preview1-26514-01, preview1-26513-04, beta-26514-00, beta-26514-00, respectively (master)\" (#29681) at dotnet/corefx","RelatedBody":""},{"Id":"7667832072","Type":"PullRequestEvent","CreatedAt":"2018-05-14T01:06:29","Actor":"WonyoungChoi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29684","RelatedDescription":"Opened pull request \"Add missing RIDs for Tizen\" (#29684) at dotnet/corefx","RelatedBody":"This adds missing RIDs of Tizen platform. Currently only tizen.4.0.0-armel is defined in runtime.json, but 5.0.0 (It will released officially in this month) and x86 architecture of all Tizen version are needed.\r\n"},{"Id":"7667241478","Type":"IssuesEvent","CreatedAt":"2018-05-13T18:30:10","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29683","RelatedDescription":"Opened issue \"System.IO.Pipelines.ReadResult should be readonly\" (#29683) at dotnet/corefx","RelatedBody":"So it can be efficiently passed with `in`\r\n```csharp\r\npublic readonly struct ReadResult\r\n{\r\n\tinternal readonly ReadOnlySequence<byte> _resultBuffer;\r\n\tinternal readonly ResultFlags _resultFlags;\r\n}\r\n```\r\n\r\n/cc @davidfowl @pakrym "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7668372505","Type":"IssuesEvent","CreatedAt":"2018-05-14T05:16:36","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26836","RelatedDescription":"Opened issue \"Unexpected warning on null-coalescing operator on generic type\" (#26836) at dotnet/roslyn","RelatedBody":"```C#\r\npublic class C<T> \r\n{\r\n    T? _value = default;\r\n    public int M() \r\n    {\r\n        return _value?.ToString() == \"hello\" ? 1 : 2; // warning CS8602: Possible dereference of a null reference.\r\n    }\r\n}\r\n```\r\nTagging @cston. Feel free to close if this is a known issue or work item."},{"Id":"7668306773","Type":"IssuesEvent","CreatedAt":"2018-05-14T04:46:54","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26835","RelatedDescription":"Opened issue \"Consider colorizing the suppression operator `!` to make it more visible\" (#26835) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/12466233/39978730-0d033960-56f7-11e8-9964-bbcf81ec4cfe.png)\r\n"},{"Id":"7668247707","Type":"IssuesEvent","CreatedAt":"2018-05-14T04:19:26","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26834","RelatedDescription":"Opened issue \"Unhelpful diagnostic when using null in user-defined operator ==\" (#26834) at dotnet/roslyn","RelatedBody":"The diagnostic give no hint that the problem with with the `operator==`.\r\n\r\n```C#\r\npublic class C \r\n{\r\n    public void M() \r\n    {\r\n        _ = this == null; // warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n    }\r\n    public static bool operator==(C one, C two) => throw null;\r\n    public static bool operator!=(C one, C two) => throw null;\r\n}\r\n```"},{"Id":"7668111793","Type":"IssuesEvent","CreatedAt":"2018-05-14T03:17:32","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26833","RelatedDescription":"Opened issue \"Nullability fixer for interface implementations\" (#26833) at dotnet/roslyn","RelatedBody":"When a declaration and an implementation disagree on nullability, a warning is produced.\r\nGiven It would be convenient to have a one-click solution to either:\r\n- change the declaration to match this implementation (this would be especially convenient because navigating to the declaration isn't easy at the moment),\r\n- change this implementation to match the declaration.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/39976813-9d0bee9c-56ea-11e8-8865-0bc00b4f2279.png)\r\n\r\nNote: this fixer should not have a FixAll."},{"Id":"7667662473","Type":"IssuesEvent","CreatedAt":"2018-05-13T23:09:20","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26752","RelatedDescription":"Closed issue \"Unable to consume C# 7.2 stack-only types in VB 15.5\" (#26752) at dotnet/roslyn","RelatedBody":"Porting over from VB language repo. ([issue](https://github.com/dotnet/vblang/issues/297))\r\n\r\n> @Nukepayload2\r\n> If I use stack only type in my VB code, error BC30668 will block compilation. I'm using VS2017 15.6.7.\r\n> \r\n> **Steps to reproduce:**\r\n> Create a .NET Core VB Console project.\r\n> Edit the .vbproj file, add <LangVersion>Latest</LangVersion> in <PropertyGroup>.\r\n> Create a .NET Standard 2.0 C# class library.\r\n> Create a new C# code file, and add public ref struct StackOnlyType {} in that .cs file.\r\n> Upgrade the C# project to 7.2 .\r\n> In the VB console app, add reference to that C# project.\r\n> Add Dim errorType As StackOnlyType to Sub Main.\r\n> Build the whole solution.\r\n> \r\n> **Expected behavior:**\r\n> The code should compile, because I'm not trying to put a stack-only variable on the heap.\r\n> \r\n> **Actual behavior:**\r\n> Error: BC30668 \"Types with embedded references are not supported in this version of your compiler\""},{"Id":"7667553396","Type":"IssuesEvent","CreatedAt":"2018-05-13T21:52:10","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26832","RelatedDescription":"Opened issue \"Error message for nullability difference in OHI should give more details\" (#26832) at dotnet/roslyn","RelatedBody":"It would be very useful if the message showed the signature of the overridden member.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/39972118-12f0bb0c-56bd-11e8-99e5-c6e62ff8f8c2.png)\r\n"},{"Id":"7667445051","Type":"IssuesEvent","CreatedAt":"2018-05-13T20:42:37","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26831","RelatedDescription":"Opened issue \"EE: No locals displayed on unhandled exception with UseReferencedAssembliesOnly=1\" (#26831) at dotnet/roslyn","RelatedBody":"With `HKEY_CURRENT_USER\\Software\\Microsoft\\ExpressionEvaluator` registry setting `UseReferencedAssembliesOnly=1`, debug the following and catch unhandled exceptions.\r\n```\r\nusing System.Linq;\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        string[] s = null;\r\n        s.FirstOrDefault();\r\n    }\r\n}\r\n```\r\nResult: The Locals window is empty in `Main`. In the Watch window, it's possible to evaluate `s`, but evaluating `$exception` reports `Internal error in the C# compiler`"},{"Id":"7667380945","Type":"IssuesEvent","CreatedAt":"2018-05-13T20:01:24","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26830","RelatedDescription":"Opened issue \"QuickInfo doesn't display nullability on properties\" (#26830) at dotnet/roslyn","RelatedBody":"Seems like I only fixed the problem for methods, but not other kinds of API.\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/39971304-9ac61564-56ad-11e8-96fd-11598a6a55d9.png)\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/26648"},{"Id":"7667310263","Type":"PullRequestEvent","CreatedAt":"2018-05-13T19:16:22","Actor":"jhinder","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26829","RelatedDescription":"Opened pull request \"Show parameter documentation for delegates in Signature Help\" (#26829) at dotnet/roslyn","RelatedBody":"This is the second PR for #26713.\r\n\r\nWith this PR, Signature Help will show documentation for delegate parameters.\r\n\r\nPreviously `ISymbolExtensions2.GetDocumentation` would pick the documentation tags of the symbol containing the parameter. However, for delegates this symbol would be the `Invoke` method, which does not have documentation.  \r\nNow we check whether the symbol containing the parameter's containing symbol (i.e. the parameter's \"grandparent\" symbol) is a delegate, and if so, take the documentation of that symbol.  \r\nThe behaviour for all other parameters is not changed."},{"Id":"7667241271","Type":"PullRequestEvent","CreatedAt":"2018-05-13T18:30:04","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26828","RelatedDescription":"Opened pull request \"Fix out var behavior, including with NotNullWhenTrue/False\" (#26828) at dotnet/roslyn","RelatedBody":"The driving scenario for this PR is `TryGetValue`.\r\n\r\nThis PR is not ready for review until the previous PR (https://github.com/dotnet/roslyn/pull/26656) is merged.\r\n\r\nThis PR does the following:\r\n- removes the warnings for misused attributes (see issue https://github.com/dotnet/roslyn/issues/26783)\r\n- adds `NotNullWhenTrue` attribute\r\n- fixes the behavior of `out var`s with the flow attributes (`NullableWalker.VisitCall` had a bug with `out var`s) and fixing some pre-existing issues to make that work (initial binding should account for nullability in `VariablesPendingInference`; the type of `out var`s should not contribute to re-inference on methods; and the nullability resulting from re-inference should coerce `out var`s instead).\r\n\r\nThis PR leaves the following issues (marked with PROTOTYPE markers):\r\n\r\nIn `var s = Copy(nullableString);` with a generic `Copy` method, initial binding infers the `T` and `var` types to be `string!` instead of `string?`. The same happens with `Copy(nullableString, out var s)`.\r\nThe reason for this is that method inference uses the types from the arguments to infer the method signature, but `BoundExpression` only has a `TypeSymbol` (no `TypeSymbolWithAnnotations`).\r\nThis does not affect diagnostics produced, since `NullableWalker` re-infers methods and `var` locals.\r\n\r\nAlso, there is a small issue that needs confirmation regarding the result type of a suppressed expression."},{"Id":"7667117144","Type":"IssuesEvent","CreatedAt":"2018-05-13T17:11:57","Actor":"mwpowellhtx","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26827","RelatedDescription":"Opened issue \"Q: How would I generate partial class for decorated target class\" (#26827) at dotnet/roslyn","RelatedBody":"I have a goal in mind: identify a *Target Class* with known *Attribute* decoration, then generate a partial class aligned within the *Target Class Namespace*.\r\n\r\nIn the past this might be considered an ``MSBuild`` target, which it still may be given the relative newness of ``Roslyn API``. But I think ``Roslyn`` has the potential to be a pretty good fit for the solution I have in mind.\r\n\r\nThe chief barrier I am encountering is an apparently rocky road on the migration path from ``Framework 4.x`` (i.e. ``4.6.2``) into the ``Core`` / ``Standard`` domain.\r\n\r\nThe next barrier I am encountering now are obscure naming conventions of the ``Roslyn API``, sparse documentation, if documented at all, identifying the desired language syntax, keywords, etc.\r\n\r\nFor instance, assuming ``KnownBase`` class.\r\n\r\n```C#\r\nclass abstract KnownBase<T>\r\n    where T : KnownBase<T>\r\n{\r\n    protected T SomeOp(T a, T b)\r\n    {\r\n        // do SomeOp involving a and b operands and return a new T\r\n    }\r\n}\r\n\r\nclass KnownAttribute : Attribute\r\n{\r\n}\r\n```\r\n\r\nAnd an end user usage of that class:\r\n\r\n```C#\r\nnamespace Some.Name.Space\r\n{\r\n    [Known]\r\n    class TargetClass : KnownBase<TargetClass>\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThen generate the facade:\r\n\r\n```C#\r\nnamespace Some.Name.Space\r\n{\r\n    class partial TargetClass\r\n    {\r\n        /* TODO: this is for illustrative purposes only;\r\n         yes, I know, '#' is not an operator, per se; sub in operator(s) of interest... */\r\n        public static TargetClass operator #(TargetClass a, TargetClass b)\r\n        {\r\n            return SomeOp(a, b);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCouple of nuances I expect to handle are:\r\n\r\n1. Alignment to ``TargetClass`` ``Namespace``; may or may not preclude nesting within a class\r\n1. Responding to refactor requests, i.e. to rename ``TargetClass``, and all that this implies, such as renaming/replacing generated code file\r\n1. Should add the partial class to the ``TargetClass`` project, if possible as a child element of ``TargetClass``\r\n1. And on from there...\r\n\r\nI am building upon ``CodeGeneration.Roslyn``, but this is only a minor facade to the deeper ``Roslyn`` related questions.\r\n\r\nFurther, at least at the moment, I am also running in ``VS2015`` targeting ``NET Framework 4.6.2`` as at least a first draft. Potentially on a migration path into ``NET Standard``, but not right now, or at least not until Core/Standard is more proven."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7667753538","Type":"PullRequestEvent","CreatedAt":"2018-05-14T00:15:37","Actor":"Tigger2014","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5806","RelatedDescription":"Opened pull request \"Fix case sensitive gss for osx linker\" (#5806) at dotnet/corert","RelatedBody":"if filesystem is case sensitive gss must be GSS."},{"Id":"7665694130","Type":"PullRequestEvent","CreatedAt":"2018-05-12T22:08:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5805","RelatedDescription":"Opened pull request \"Start building System.Private.TypeLoader.Native\" (#5805) at dotnet/corert","RelatedBody":"And remove workaround that was trying to avoid dependency on `ConstrainedCallSupport_GetStubs`."},{"Id":"7665640698","Type":"PullRequestEvent","CreatedAt":"2018-05-12T21:26:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5799","RelatedDescription":"Merged pull request \"Add support for setting AppContext switches \" (#5799) at dotnet/corert","RelatedBody":"Two commits:\r\n\r\n* Adds an `--appcontextswitch` argument to the compiler (and accompanying `AppContextSwitchOverrides` MSBuild `ItemGroup`) to influence class library behaviors. This is a general purpose feature that Project N has, but we didn't have it yet.\r\n* Add possibility to opt out of strict `Enum.GetValues` semantic and use it in CoreFX test runner. This fixes 39 CoreFX System.Collections tests."},{"Id":"7665639944","Type":"IssuesEvent","CreatedAt":"2018-05-12T21:25:52","Actor":"Willovent","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5804","RelatedDescription":"Opened issue \"StackOverflowException using Configuration Builder with .net framework\" (#5804) at dotnet/corert","RelatedBody":"Hello,\r\n\r\nThis is what I get when a try to build a simple console application with a ConfigurationBuilder : \r\n```\r\n>dotnet publish -c release -r win-x64 /flp:v=diag;logfile=log.txt\r\nMicrosoft (R) Build Engine version 15.7.11.29948 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\...\\Whatever.csproj...\r\n  Restore completed in 748.25 ms for C:\\..\\Whatever.csproj.\r\n  Whatever -> C:\\...\\Whatever\\bin\\release\\net471\\win-x64\\Whatever.exe\r\n  Generating native code\r\n\r\n  Process is terminating due to StackOverflowException.\r\n```\r\nHere is the log : [log.txt](https://github.com/dotnet/corert/files/1997939/log.txt)\r\nHere is the minimal code to reproduce : \r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Whatever\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var configuration = new ConfigurationBuilder()\r\n                .AddJsonFile(\"appsettings.json\")\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nWith those two package in the csproj: \r\n```xml\r\n...\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n...\r\n```\r\nThis only happen targeting .net framework (net472). It seems to be ok with  netcoreapp2.0"},{"Id":"7665440784","Type":"PullRequestEvent","CreatedAt":"2018-05-12T19:06:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5803","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5803) at dotnet/corert","RelatedBody":""},{"Id":"7665122620","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:45:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5803","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5803) at dotnet/corert","RelatedBody":""},{"Id":"7665117036","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:42:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5802","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5802) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7665108653","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:36:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5802","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5802) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7663894041","Type":"IssuesEvent","CreatedAt":"2018-05-12T00:05:50","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5682","RelatedDescription":"Closed issue \"Question: Is there a way to catch native exceptions in other threads?\" (#5682) at dotnet/corert","RelatedBody":"In our production macOS app (which has been built on corert since April 2017 !) we are sometimes experiencing bugs that come from native exceptions being thrown on other threads, or native exceptions that we somehow miss to catch in other ways.\r\n\r\nSince our logging and error handling infrastructure is in C#, it would be great if there was a way to deal with these native exceptions somehow - without them causing the process to exit.\r\nIs there already support for this in CoreRT or would it be possible for us to inject some custom logic?\r\n\r\nAnother thing we're seeing is that when our CoreRT console process is launched by another process, which is then killed, the CoreRT process hangs with CPU usage around 100%.\r\nI'm not entirely sure how to debug this - my first look at the \"Sample\" in Activity Monitor didn't reveal anything that I could see problematic, but would that be helpful for you to help find the bug?\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7663668809","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:29:30","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2240","RelatedDescription":"Opened issue \"GenerateDeps.proj should be protected against Directory.Build.props/.targets from outside the installation folder\" (#2240) at dotnet/sdk","RelatedBody":"The SDK has a `GenerateDeps.proj` file which is used to support `DotNetCliToolReference`.  When we build this project, we should prevent Directory.Build.props or Directory.Build.targets from being imported.\r\n\r\nI encountered this now that the stage 0 SDK is installed in `<Repo root>\\.dotnet`, when I tried to use `dotnet xunit` on a project which had a `DotNetCliToolReference` to `dotnet-xunit`, it failed because it was picking up the repo's Directory.Build.props which was causing it to fail."},{"Id":"7663603680","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:07:26","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2239","RelatedDescription":"Opened pull request \"WIP Generate shim with PackAsTool\" (#2239) at dotnet/sdk","RelatedBody":""},{"Id":"7663588721","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:02:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2238","RelatedDescription":"Closed pull request \"WIP Generate shim in PackAsTool\" (#2238) at dotnet/sdk","RelatedBody":""},{"Id":"7663556791","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:52:50","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2234","RelatedDescription":"Merged pull request \"Let EmbedAppNameInHost task call the csharp class\" (#2234) at dotnet/sdk","RelatedBody":"Prerequisite for https://github.com/dotnet/sdk/pull/2230\r\n\r\nThat csharp class was extracted and copied to CLI first. Doing so can help reduce the duplication of cli and sdk work in the future https://github.com/dotnet/cli/issues/9027\r\n\r\nAlso, Shim generation on PackAsTool need to use the EmbedAppNameInHostUtil, since compared to the original task, it can embed relative path, not just a file name. https://github.com/dotnet/sdk/pull/2230/files#diff-a19564bd6fa2c5ce365c212cb5b11fb7R80\r\n"},{"Id":"7663542553","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:48:32","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2226","RelatedDescription":"Closed issue \"[2.1-rc1] dotnet clean fails when obj folder is missing\" (#2226) at dotnet/sdk","RelatedBody":"**How to reproduce**\r\n* Run `dotnet new classlib` in an empty folder\r\n* Delete the obj folder\r\n* Run `dotnet clean`\r\n\r\n**What happens**\r\n* Clean fails\r\n* obj folder is created with empty folders\r\n\r\n**What should happen**\r\n* Nothing, project is already clean\r\n\r\nThis is an issue on our CI server, where we run `dotnet clean` as the first step of every build, and then run `dotnet restore` as the second step. It now fails on the initial build, when it clones the repo and there is no obj folder."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"994438149693620225","CreatedAt":"2018-05-10T04:45:05+00:00","UserScreenname":"dotnet","Text":"Bye bye! See you next year for #MSBuild 👋 https://t.co/IwcXQwKarV","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":105,"FavoriteCount":10,"RawContent":null},{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":34,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-14T05:30:25.0956283Z","RunDurationInMilliseconds":9480}