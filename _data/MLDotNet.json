{"Data":{"GitHub":{"Issues":[{"Id":"342549622","IsPullRequest":true,"CreatedAt":"2018-07-23T22:45:09","Actor":"Ivanidzo4ka","Number":"555","RawContent":null,"Title":"Don't fail in case of const field in Collection source and extended support for type conversion","State":"closed","Body":"Fixes  #537.\r\nAdds support for multiple basic C# types to convert Dataview <-> collection.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/555","RelatedDescription":"Closed or merged PR \"Don't fail in case of const field in Collection source and extended support for type conversion\" (#555)"},{"Id":"343821858","IsPullRequest":true,"CreatedAt":"2018-07-23T22:43:22","Actor":"Ivanidzo4ka","Number":"575","RawContent":null,"Title":"Pass fold index to cross validation metrics.","State":"open","Body":"Fixes #570\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/575","RelatedDescription":"Open PR \"Pass fold index to cross validation metrics.\" (#575)"},{"Id":"343799130","IsPullRequest":true,"CreatedAt":"2018-07-23T21:45:17","Actor":"safern","Number":"574","RawContent":null,"Title":"Fix Linux CI to actually run inside a docker container","State":"closed","Body":"Current CI was not running under a docker container. Use a different approach using a vsts variable to run under the container.\r\n\r\ncc: @eerhardt @Ivanidzo4ka \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/574","RelatedDescription":"Closed or merged PR \"Fix Linux CI to actually run inside a docker container\" (#574)"},{"Id":"343762766","IsPullRequest":false,"CreatedAt":"2018-07-23T19:23:17","Actor":"taddison","Number":"573","RawContent":null,"Title":"Leveraging Evaluators with custom Predictors","State":"open","Body":"I'd like to leverage the evaluators with custom predictors (specifically a `PredictionModel` not built from ML.Net), though right now that isn't possible as `PredictionModel`'s constructor is internal.\r\n\r\n## Scenario\r\n\r\nWe have a number of what I think are great scenario fits for ML.Net (lot of C# experience, a few models based on static rules currently deployed), but as both a pedagogical aid and a way of comparing any new work vs. existing work I'd like to plug some of our existing models into the ML.Net ecosystem, specifically doing something along the following lines:\r\n\r\n- Model the input, predicted datasets\r\n- Write the code to pull various sets of data\r\n- Instantiate my own `PredictionModel` (with predict ranging from something as simple as returning a hardcoded value, to calling an existing prediction endpoint we have)\r\n- Evaluate the model using one of the existing ML.Net validators, probably saving results\r\n- Evaluate the model using a custom evaluator specific to our projects (though re-usable within the ML.Net ecosystem)\r\n\r\nIteration could then take place on building a model & training it with ML.Net components.\r\n\r\nIs this a workflow that you think is best performed in some other manner, or is it a scenario you'd like to support with ML.Net?  We can evaluate models without using ML.Net, though the more we can keep things in the same ecosystem, the stronger the internal network effect is likely to be (particularly when targeting an engineering team almost exclusively comprised of devs and not data scientists).","Url":"https://github.com/dotnet/machinelearning/issues/573","RelatedDescription":"Open issue \"Leveraging Evaluators with custom Predictors\" (#573)"},{"Id":"343736053","IsPullRequest":true,"CreatedAt":"2018-07-23T18:02:38","Actor":"Zruty0","Number":"572","RawContent":null,"Title":"Schema comprehension doc","State":"open","Body":"Added a document that describe typed schema comprehension.\r\n\r\nFixes #554 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/572","RelatedDescription":"Open PR \"Schema comprehension doc\" (#572)"},{"Id":"343253617","IsPullRequest":true,"CreatedAt":"2018-07-23T16:38:22","Actor":"safern","Number":"566","RawContent":null,"Title":"Move Windows and Linux CI to VSTS","State":"closed","Body":"cc: @eerhardt \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/566","RelatedDescription":"Closed or merged PR \"Move Windows and Linux CI to VSTS\" (#566)"},{"Id":"342139971","IsPullRequest":true,"CreatedAt":"2018-07-23T16:33:57","Actor":"codemzs","Number":"550","RawContent":null,"Title":"Ensure ONNX export is compatible with Windows RS5","State":"closed","Body":"fixes #549 by testing ONNX models on Windows RS5 machine.","Url":"https://github.com/dotnet/machinelearning/pull/550","RelatedDescription":"Closed or merged PR \"Ensure ONNX export is compatible with Windows RS5\" (#550)"},{"Id":"342139834","IsPullRequest":false,"CreatedAt":"2018-07-23T16:33:56","Actor":"codemzs","Number":"549","RawContent":null,"Title":"Ensure ONNX export is Windows RS5 compatible.","State":"closed","Body":"Added more tests for ONNX export and ran the model on RS5 machine to ensure model loads and evaluates.","Url":"https://github.com/dotnet/machinelearning/issues/549","RelatedDescription":"Closed issue \"Ensure ONNX export is Windows RS5 compatible.\" (#549)"},{"Id":"343364747","IsPullRequest":false,"CreatedAt":"2018-07-22T00:05:08","Actor":"MrCSharp22","Number":"571","RawContent":null,"Title":"Unsupervised learning in ML.NET and association rules","State":"open","Body":"Hi All,\r\nI was looking at the available trainers in ML.NET on the Microsoft docs website and couldn't find anything for unsupervised learning with association rules.\r\nIs this currently available? If not, do you have plans of adding support for association rules as it is something very interesting to work with.\r\n\r\nThank you","Url":"https://github.com/dotnet/machinelearning/issues/571","RelatedDescription":"Open issue \"Unsupervised learning in ML.NET and association rules\" (#571)"},{"Id":"343325259","IsPullRequest":false,"CreatedAt":"2018-07-21T13:05:09","Actor":"jwood803","Number":"570","RawContent":null,"Title":"CrossValidation RegressionMetrics has two more entries than number of folds","State":"open","Body":"I might be incorrect on this, but wouldn't the number of `RegressionMetrics` be the same as the number of folds specified in the `CrossValidator`?\r\n\r\n### System information\r\n- Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n```\r\n.NET Command Line Tools (2.1.202)\r\n\r\nProduct Information:\r\n Version:            2.1.202\r\n Commit SHA-1 hash:  281caedada\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.202\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.9\r\n  Build    : 1632fa1589b0eee3277a8841ce1770e554ece037\r\n```\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan cross validation against a pipeline.\r\n- **What happened?**\r\nThe `RegressionMetrics` count is two more than the number of folds specified.\r\n- **What did you expect?**\r\nThe `RegressionMetrics` count to be the same as the number of folds.\r\n\r\n### Source code / logs\r\n```csharp\r\nvar pipeline = new LearningPipeline\r\n{\r\n    new TextLoader(dataset).CreateFrom<SalaryData>(useHeader: true, separator: ','),\r\n    new ColumnConcatenator(\"Features\", \"YearsExperience\"),\r\n    new GeneralizedAdditiveModelRegressor()\r\n};\r\n\r\nvar crossValidator = new CrossValidator()\r\n{\r\n    Kind = MacroUtilsTrainerKinds.SignatureRegressorTrainer,\r\n    NumFolds = 2\r\n};\r\nvar crossValidatorOutput = crossValidator.CrossValidate<SalaryData, SalaryPrediction>(pipeline);\r\n\r\ncrossValidatorOutput.RegressionMetrics.ForEach(m => Console.WriteLine(m.Rms));\r\n```\r\n\r\n![2018-07-20 14_44_23-clipboard](https://user-images.githubusercontent.com/1578160/43036237-6c8bf9a8-8ccb-11e8-8a79-82f45ccd18cc.png)\r\n\r\n![2018-07-20 14_45_12-clipboard](https://user-images.githubusercontent.com/1578160/43036238-73ff4eb0-8ccb-11e8-9f3b-e4c3b71cbbf9.png)\r\n\r\nLooking at `sklearn`, it seems to have the same number of results as the number of folds:\r\n\r\n```python\r\nfrom sklearn.model_selection import cross_val_score\r\n\r\ncross_val_score(lin_reg, train_set, train_labels, cv=3)\r\n```\r\n\r\n```bash\r\narray([0.96044449, 0.97351702, 0.92777218])\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/570","RelatedDescription":"Open issue \"CrossValidation RegressionMetrics has two more entries than number of folds\" (#570)"},{"Id":"343305250","IsPullRequest":false,"CreatedAt":"2018-07-21T07:14:55","Actor":"HowardvanRooijen","Number":"569","RawContent":null,"Title":"Hosting a pre-trained ML Model in Azure Functions","State":"open","Body":"Hi,\r\n\r\nML.NET + Azure Functions seems like the perfect combination. There's only one problem; ML.NET is x64 and Functions is x86. There is an x64 version of Functions available https://github.com/Azure/azure-functions-core-tools/releases but there is no documentation on how to set it up locally or configure it in Azure.\r\n\r\nI have many scenarios where we'd like to process incoming data / files using ML.NET pre-trained models (I've been working on a sample that combines Cognitive Services OCR to extract bank transactions from screengrabs, and then uses a ML.NET model for classifying the bank transactions into spend categories, but it all falls down when you try and host the model in Functions). when you combine them with Function Bindings to automatically run when new data is added.\r\n\r\nHave you ever tried this hosting scenario? Can you reach out to the Functions team internally (I've raised the question, but have got no response)?\r\n\r\nIt seems like the perfect combination of technologies - but frustratingly it just doesn't work (yet).","Url":"https://github.com/dotnet/machinelearning/issues/569","RelatedDescription":"Open issue \"Hosting a pre-trained ML Model in Azure Functions\" (#569)"},{"Id":"343298325","IsPullRequest":false,"CreatedAt":"2018-07-21T05:08:15","Actor":"justinormont","Number":"568","RawContent":null,"Title":"Temporary filename collision","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows Server 2016\r\n\r\n### Issue\r\n\r\nWhen running simultaneous sweeps (multiple processes), one process tried to open a new temp file which already exists. \r\n\r\n`Unexpected exception: The file 'C:\\Users\\jormont\\AppData\\Local\\Temp\\2\\TLC_25553D77\\0' already exists`\r\n\r\n- **What did you do?**\r\nRunning an AutoML macro sweep w/ four processes on the same machine. \r\n\r\nPerhaps our temporary path names aren't unique enough? \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/211c0439aa7bec33747536a273f90b1718ead24a/src/Microsoft.ML.Data/Model/Repository.cs#L507\r\n\r\nUnsure which call is used to create the `TLC_...` folder, but could be this one:\r\nhttps://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.Core/Environment/TlcEnvironment.cs#L398\r\n\r\n\r\n### Source code / logs\r\n\r\nError:\r\n```\r\nUnexpected exception: The file 'C:\\Users\\jormont\\AppData\\Local\\Temp\\2\\TLC_25553D77\\0' already exists., 'System.IO.IOException'\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at System.IO.Compression.ZipFileExtensions.ExtractToFile(ZipArchiveEntry source, String destinationFileName, Boolean overwrite)\r\n   at Microsoft.ML.Runtime.Model.RepositoryReader.OpenEntryOrNull(String dir, String name) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\Model\\Repository.cs:line 507\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\Model\\ModelLoading.cs:line 55\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\Model\\ModelLoading.cs:line 89\r\n   at Microsoft.ML.Runtime.Data.ApplyTransformUtils.ApplyTransformToData(IHostEnvironment env, IDataTransform transform, IDataView newSource) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\Utilities\\ApplyTransformUtils.cs:line 47\r\n   at Microsoft.ML.Runtime.Data.ApplyTransformUtils.ApplyAllTransformsToData(IHostEnvironment env, IDataView chain, IDataView newSource, IDataView oldSource) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\Utilities\\ApplyTransformUtils.cs:line 101\r\n   at Microsoft.ML.Runtime.EntryPoints.TransformModel..ctor(IHostEnvironment env, IDataView result, IDataView input) in D:\\TLC\\OpenSource\\src\\Microsoft.ML.Data\\EntryPoints\\TransformModel.cs:line 62\r\n   at Microsoft.ML.Runtime.Data.TextAnalytics.TextTransform(IHostEnvironment env, Arguments input) in D:\\TLC\\source\\TextAnalytics\\TextTransform.cs:line 549\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/568","RelatedDescription":"Open issue \"Temporary filename collision\" (#568)"},{"Id":"343255171","IsPullRequest":false,"CreatedAt":"2018-07-20T21:39:06","Actor":"justinormont","Number":"567","RawContent":null,"Title":"Sweep Range of L2RegularizerWeight in AveragedPerceptron","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nAutoML macro sweep using the AveragedPerceptron learner\r\n\r\n- **What happened?**\r\nCrashed due to the AutoML sweeper picking exactly 0.5 for L2RegularizerWeight.\r\n\r\n**Error**:\r\n```\r\n  must be in range [0, 0.5)\r\n  Parameter name: L2RegularizerWeight\r\n```\r\n\r\nThe hyperparameter range need to be changed to exclude 0.5 from its range:\r\nhttps://github.com/dotnet/machinelearning/blob/c023727b76970ab913ec1ce38276508835c17bcf/src/Microsoft.ML.StandardLearners/Standard/Online/AveragedLinear.cs#L39\r\n","Url":"https://github.com/dotnet/machinelearning/issues/567","RelatedDescription":"Open issue \"Sweep Range of L2RegularizerWeight in AveragedPerceptron\" (#567)"},{"Id":"343186556","IsPullRequest":true,"CreatedAt":"2018-07-20T21:20:25","Actor":"safern","Number":"565","RawContent":null,"Title":"Add build steps to  test it works fine","State":"closed","Body":"Changes CI system to use VSTS\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/565","RelatedDescription":"Closed or merged PR \"Add build steps to  test it works fine\" (#565)"},{"Id":"343126820","IsPullRequest":false,"CreatedAt":"2018-07-20T14:22:41","Actor":"atotalnoob","Number":"564","RawContent":null,"Title":"ML.net timeline on NLP tasks","State":"open","Body":"I see in the roadmap there are a lot of NLP things coming soon. \r\n\r\nAny approximate timeline? Or what version they should be in? ","Url":"https://github.com/dotnet/machinelearning/issues/564","RelatedDescription":"Open issue \"ML.net timeline on NLP tasks\" (#564)"},{"Id":"343109861","IsPullRequest":false,"CreatedAt":"2018-07-20T13:34:58","Actor":"HowardvanRooijen","Number":"563","RawContent":null,"Title":"Infer.NET","State":"open","Body":"Are there any plans to include Infer.NET (from Microsoft Research) in ML.NET? http://infernet.azurewebsites.net/","Url":"https://github.com/dotnet/machinelearning/issues/563","RelatedDescription":"Open issue \"Infer.NET\" (#563)"},{"Id":"343000052","IsPullRequest":true,"CreatedAt":"2018-07-20T07:22:05","Actor":"briancylui","Number":"562","RawContent":null,"Title":"Port C# hardware intrinsics APIs for SSE from SIMD native algorithms","State":"open","Body":"- with unit tests and performance tests for two target frameworks: .NET Core App 3.0 and .NET Standard 2.0.\r\n- .NET Core App 3.0 gets the new C# hardware intrinsics APIs, while .NET Standard 2.0 gets the original native SIMD algorithms.\r\n- Several things have made this multi-targeting feature possible.\r\n   1. The new CpuMathUtils class that contains the new APIs is implemented as a partial class with method definitions split into two separate files (src\\Microsoft.ML.CpuMath\\CpuMathUtils.[target].cs), only one of which is compiled based on the target framework.\r\n   2. The Microsoft.ML.CpuMath.csproj file makes the switching decision to compile the right files based on the target framework.\r\n\r\n### Structure:\r\n1. All new hardware intrinsics APIs are contained in src\\Microsoft.ML.CpuMath.\r\n2. Unit tests for the two target frameworks live in test\\Microsoft.ML.CpuMath.UnitTests.[target], and contain the same content except for the target framework in .csproj.\r\n3. Performance tests live in test\\Microsoft.ML.CpuMath.PerformanceTests.\r\n\r\n### Changes to users:\r\n1. Originally, users call intrinsics APIs via the SseUtils class in src\\Microsoft.ML.CpuMath\\Sse.cs, but now they call them via the new CpuMathUtils class, which will handle switching between SSE and AVX in the future.\r\n2. CpuMathUtils methods and SseUtils methods share the same signature, but CpuMathUtils methods additionally call a new helper class (SseIntrinsics) for C# implementations of SSE operations.\r\n\r\n### Note for reviews:\r\n1. Thank you for your feedback, and please feel free to ignore the src/Native/CpuMath folder for the moment.  It is a folder I created as my initial separate working folder, and is now deprecated.  None of the functions in IntrinsicsUtils are called, and the unit tests and performance tests inside are not used.  Sorry for any inconvenience caused, and thank you for your understanding.\r\n\r\n### Update (July 23):\r\n1. I have modified the files for most comments and recorded any items needed for future changes.  There are the following TODOs on my end:\r\n- Add comments to explain `<None Include=...>` and modify for the corresponding note\r\n- Modify the `Store4` private function\r\n- Fix a `Bitconverter`-related issue\r\n- Use `CoreCLR` seeds in performance tests\r\n- Hard-code unit tests\r\n2. I have pinged reviewers again for the above bullet points for their further comments.  Thank you.","Url":"https://github.com/dotnet/machinelearning/pull/562","RelatedDescription":"Open PR \"Port C# hardware intrinsics APIs for SSE from SIMD native algorithms\" (#562)"},{"Id":"342913050","IsPullRequest":false,"CreatedAt":"2018-07-19T22:37:32","Actor":"eerhardt","Number":"561","RawContent":null,"Title":"API to create a TextLoader from class metadata","State":"open","Body":"In the `LearningPipeline` API, we have the ability to create a TextLoader object using metadata applied to a regular C# class:\r\n\r\n```C#\r\npipeline.Add(new TextLoader(dataPath).CreateFrom<HousePriceData>(useHeader: true, separator: ','));\r\n\r\npublic class HousePriceData\r\n{\r\n    [Column(ordinal: \"0\")]\r\n    public string Id;\r\n    [Column(ordinal: \"1\")]\r\n    public string Date;\r\n    [Column(ordinal: \"2\", name: \"Label\")]\r\n    public float Price;\r\n    [Column(ordinal: \"3\")]\r\n    public float Bedrooms;\r\n    [Column(ordinal: \"4\")]\r\n    public float Bathrooms;\r\n    [Column(ordinal: \"5\")]\r\n    public float SqftLiving;\r\n    [Column(ordinal: \"6\")]\r\n    public float SqftLot;\r\n    ...\r\n```\r\n\r\nI find it more intuitive to have a class decorated with metadata to use to load data instead of imperatively building up a schema in code, like the following:\r\n\r\n```C#\r\nprivate static TextLoader.Column ScalarCol(string name, int ordinal, DataKind kind = DataKind.Num)\r\n    => new TextLoader.Column() { Name = name, Type = kind, Source = new[] { new TextLoader.Range() { Min = ordinal, Max = ordinal } } };\r\n\r\nvar loader = new TextLoader(env, new TextLoader.Arguments()\r\n{\r\n    HasHeader = true,\r\n    SeparatorChars = new char[] { ',' },\r\n    // These column declarations are meant to mirror those that appear in HousePriceData.\r\n    Column = new[] {\r\n        ScalarCol(\"Id\", 0, DataKind.Text),\r\n        ScalarCol(\"Date\", 1, DataKind.Text),\r\n        ScalarCol(\"Label\", 2),\r\n        ScalarCol(\"Bedrooms\", 3),\r\n        ScalarCol(\"Bathrooms\", 4),\r\n        ScalarCol(\"SqftLiving\", 5),\r\n        ScalarCol(\"SqftLot\", 6),\r\n}, new MultiFileSource(dataPath));\r\n```\r\n\r\nThis issue is being opened to ensure we preserve this behavior with the new direct access API design proposed in #371 (possibly using a different API design, but preserving the functionality).\r\n\r\n/cc @ericstj @TomFinley @Zruty0 @terrajobst ","Url":"https://github.com/dotnet/machinelearning/issues/561","RelatedDescription":"Open issue \"API to create a TextLoader from class metadata\" (#561)"},{"Id":"342909287","IsPullRequest":false,"CreatedAt":"2018-07-19T22:20:27","Actor":"eerhardt","Number":"560","RawContent":null,"Title":"Simple API to go from a trainer to something that can make predictions","State":"open","Body":"With the API proposal change in https://github.com/dotnet/machinelearning/issues/371, the current proposed API looks something like:\r\n\r\n```C#\r\n... // load data and make transforms\r\n\r\n// Train.\r\nvar trainer = new SdcaRegressionTrainer(env, new SdcaRegressionTrainer.Arguments());\r\nvar cached = new CacheDataView(env, trans, prefetch: null);\r\nvar trainRoles = TrainUtils.CreateExamples(cached, label: \"Label\", feature: \"Features\");\r\nvar pred = trainer.Train(trainRoles);\r\n\r\n// Score.\r\nIDataView scoredData = ScoreUtils.GetScorer(pred, trainRoles, env, trainRoles.Schema);\r\n\r\n// Do a simple prediction.\r\nvar engine = env.CreatePredictionEngine<HousePriceData, HousePricePrediction>(scoredData);\r\n\r\nHousePricePrediction prediction = engine.Predict(new HousePriceData()\r\n....\r\n```\r\n\r\nCompare and contrast the similar code what what we have in the LearningPipeline API:\r\n\r\n```C#\r\n... // load data and make transforms\r\n\r\npipeline.Add(new StochasticDualCoordinateAscentRegressor());\r\n\r\nPredictionModel<HousePriceData, HousePricePrediction> model = pipeline.Train<HousePriceData, HousePricePrediction>();\r\n\r\nHousePricePrediction prediction = model.Predict(new HousePriceData()\r\n....\r\n```\r\n\r\nYou can see the proposed API has what feels like boilerplate code (create a cache data view, create examples, call train, get a scorer, create an engine).  Where the LearningPipeline API simplifies this into roughly one call: call train, get something that can make predictions.\r\n\r\nI don't think our simplest API example should have so many concepts in it.  In my mind, the main concepts a new user needs to know about are:\r\n\r\n* Load data\r\n* Do transforms\r\n* Pick a learning algorithm\r\n* Train\r\n* Predict\r\n\r\nHowever, in the current proposed API, they also need to think/learn about:\r\n\r\n* Whether or not they need a cached data view\r\n* Creating roles/examples\r\n    - I'm not sure which is it. The type is `RoleMappedData`, but the method is named `CreateExamples`.\r\n* An IPredictor object\r\n    - which doesn't make predictions\r\n* Calling `GetScorer`, which returns an `IDataView` that we call `scoredData`.\r\n    - Is this object really data, or is it something that does `scoring` as implied by the method name: `GetScorer`?\r\n\r\nIn my opinion, this API is too complex and non-intuitive for first time users. We should investigate ways to make it simpler and see if we can come up with a design with less concepts to learn when first interacting with ML.NET.\r\n\r\n/cc @ericstj @TomFinley @Zruty0 @terrajobst ","Url":"https://github.com/dotnet/machinelearning/issues/560","RelatedDescription":"Open issue \"Simple API to go from a trainer to something that can make predictions\" (#560)"},{"Id":"342846651","IsPullRequest":false,"CreatedAt":"2018-07-19T18:48:09","Actor":"Anipik","Number":"559","RawContent":null,"Title":"LoadTransform and LinearClassificationTrainer doesnot work in AzureFunctions","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: \r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-009063\r\n Commit:    dd0179a67c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.400-preview-009063\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n```\r\n### Issue\r\n\r\n- **What did you do?**\r\nI am trying to use the ML.net package in azure functions. I am running this https://github.com/dotnet/machinelearning-samples/tree/master/samples/end-to-end-apps/github-labeler inside an azure function.\r\n\r\n- **What happened?**\r\nThe entry point map for these  ```Microsoft.ML.Runtime.Data.LoadTransform``` and ```Microsoft.ML.Runtime.Learners.LinearClassificationTrainer```  types are not getting loaded properly. As a result I am not able to train or test using ML.net inside the Azure Function.\r\n\r\nErrors\r\n```\r\nSystem.Private.CoreLib: Exception while executing function: GithubIssueLabeler. Microsoft.ML.Data: Couldn't load model: 'DataLoaderModel\\Transform_001\r\nSystem.Private.CoreLib: Exception while executing function: GithubIssueLabeler. System.Private.CoreLib: Exception has been thrown by the target of an invocation. Microsoft.ML.Data: Couldn't load model: 'DataLoaderModel\\Transform_020\\SchemaBindableMapper\\InnerMapper\\Predictor'.\r\n```\r\n- **What did you expect?**\r\nExpect to work properly.\r\n\r\n### Source code / logs\r\n``` C#\r\n        [FunctionName(\"GithubIssueLabeler\")]\r\n        public static async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)]HttpRequest req, TraceWriter log)\r\n        {\r\n            //var type = typeof(Microsoft.ML.Runtime.Data.LoadTransform);\r\n            //var type1 = typeof(Microsoft.ML.Runtime.Learners.LinearClassificationTrainer);\r\n            log.Info(\"Http Issue Webhook Request is Being Processed\");\r\n\r\n            string requestBody = new StreamReader(req.Body).ReadToEnd();\r\n            dynamic data = JsonConvert.DeserializeObject(requestBody);\r\n\r\n            string Action = data?.action;\r\n            dynamic issue = data?.issue;\r\n            dynamic labels = issue?.labels;\r\n\r\n            if (Action == \"opened\" && labels.Count == 0)\r\n            {\r\n                string title = issue?.title;\r\n                int number = issue?.number;\r\n                string body = issue?.body;\r\n                log.Info($\"A {number.ToString()} issue with {title} has been opened.\");\r\n\r\n                Configuration = new ConfigurationBuilder()\r\n                    .SetBasePath(Directory.GetCurrentDirectory())\r\n                    .AddJsonFile(\"appsettings.json\").Build();\r\n\r\n                var labeler = new Labeler(Configuration[\"GitHubRepoOwner\"], Configuration[\"GitHubRepoName\"], Configuration[\"GitHubToken\"]);\r\n                await labeler.PredictAndApplyLabelAsync(number, title, body, log); // can do training or prediting using already load model\r\n                log.Info(\"Labeling completed\");\r\n            }\r\n            else\r\n            {\r\n                log.Info(\"The issue is already opened or it already has a label\");\r\n            }\r\n\r\n            Console.ReadLine();\r\n            log.Info($\"Issue Label request handled\");\r\n            return Action != null\r\n                ? (ActionResult)new OkObjectResult($\"Issue Label request handled\")\r\n                : new BadRequestObjectResult(\"Please pass a name on the query string or in the request body\");\r\n        }\r\n```\r\n# WorkArounds\r\n\r\nAdding these lines to the function helps the app to run perfectly fine.\r\n```\r\nvar type = typeof(Microsoft.ML.Runtime.Data.LoadTransform);\r\nvar type1 = typeof(Microsoft.ML.Runtime.Learners.LinearClassificationTrainer);\r\n```\r\n\r\ncc @eerhardt \r\n","Url":"https://github.com/dotnet/machinelearning/issues/559","RelatedDescription":"Open issue \"LoadTransform and LinearClassificationTrainer doesnot work in AzureFunctions\" (#559)"},{"Id":"342719538","IsPullRequest":false,"CreatedAt":"2018-07-19T13:04:46","Actor":"bzn7","Number":"558","RawContent":null,"Title":"Invalid type ('Vec<R4>') error on Training.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 17134.165\r\n- **.NET Version (eg., dotnet --info)**: 4.7.03056\r\n\r\n### Issue\r\nI'm getting this exception while Train. Couldn't find any tip, please help.\r\n\r\n`ArgumentOutOfRangeException: Source column 'Features' has invalid type ('Vec<R4>'): Expected known size vector.`\r\n\r\n- **What did you do?**\r\nCopied some code from iris sample to my project.\r\n- **What happened?**\r\nCouldn't train my model.\r\n\r\n\r\n### Source code / logs\r\n\r\n\r\n        public class IrisData\r\n        {\r\n            [Column(\"0\")] public float[] param1 = new float[1];\r\n            [Column(\"1\")] public float[] param2 = new float[1000];\r\n            [Column(\"2\")] public float[] param3 = new float[1000];\r\n            [Column(\"3\")] public float[] param4 = new float[1000];\r\n            [Column(\"4\")] public float[] param5 = new float[1000];\r\n            [Column(\"5\", name: \"Label\")] public string Label;\r\n        }\r\n\r\n        public class IrisPrediction\r\n        {\r\n            [ColumnName(\"PredictedLabel\")]\r\n            public string PredictedLabels;\r\n        }\r\n\r\n        //Program adds some irisData to this list while working\r\n        public static List<IrisData> History = new List<IrisData>()  { };\r\n        \r\n        private static PredictionModel<IrisData,IrisPrediction> readyModel;\r\n\r\n\r\nWorking code\r\n\r\n        public static async void Learn()\r\n        {\r\n            readyModel = await TrainAsync();\r\n        }\r\n\r\n        internal static async Task<PredictionModel<IrisData, IrisPrediction>> TrainAsync()\r\n        {\r\n            var pipeline = new LearningPipeline();\r\n            var data = History;\r\n            var collection = CollectionDataSource.Create(data);\r\n\r\n            pipeline.Add(collection);\r\n            pipeline.Add(new ColumnConcatenator(\"Features\", \"param1\", \"param2\", \"param3\", \"param4\", \"param5\"));\r\n            pipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\n\r\n            var model = pipeline.Train<IrisData, IrisPrediction>();\r\n            return model;\r\n        }\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/558","RelatedDescription":"Open issue \"Invalid type ('Vec<R4>') error on Training.\" (#558)"},{"Id":"342605196","IsPullRequest":true,"CreatedAt":"2018-07-19T07:11:14","Actor":"TomFinley","Number":"557","RawContent":null,"Title":"Initial code analyzer for Microsoft.ML","State":"open","Body":"Fixes #553.\r\n\r\nSome WIP items:\r\n- [x] Fix issue with `new` declarations on members not being properly handled by accessibility modifier check.\r\n- [x] Enable checking in all source projects, not just `Microsoft.ML.Core`. (Done only there for now just to validate approach.)\r\n\r\nAdds code analysis initially for correct usage of common Contracts.Except/Check patterns, naming conventions, variable usage and initializations, access modifiers, and other idioms used throughout the Microsoft.ML codebase. Enables analysis on Microsoft.ML projects.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/557","RelatedDescription":"Open PR \"Initial code analyzer for Microsoft.ML\" (#557)"},{"Id":"342556761","IsPullRequest":true,"CreatedAt":"2018-07-19T02:30:07","Actor":"codemzs","Number":"556","RawContent":null,"Title":"WIP Port SymSGD","State":"open","Body":"This PR depends on the MKL nuget for native code and hence it won't compile at the moment. I will be updating it with tests and documentation as MKL PR comes up. I have also upgraded SymSGD trainer to use ITrainer interface that returns a predictor.","Url":"https://github.com/dotnet/machinelearning/pull/556","RelatedDescription":"Open PR \"WIP Port SymSGD\" (#556)"},{"Id":"342531912","IsPullRequest":false,"CreatedAt":"2018-07-18T23:59:17","Actor":"Zruty0","Number":"554","RawContent":null,"Title":"Need a doc on Type-to-DataView schema mapping","State":"open","Body":"We should have a doc that describes exactly how we go from \r\n```(csharp)\r\n        public class IrisData\r\n        {\r\n            [Column(\"0\")]\r\n            public float Label;\r\n\r\n            [Column(\"1\")]\r\n            public float SepalLength;\r\n\r\n            [Column(\"2\")]\r\n            public float SepalWidth;\r\n\r\n            [Column(\"3\")]\r\n            public float PetalLength;\r\n\r\n            [Column(\"4\")]\r\n            public float PetalWidth;\r\n        }\r\n```\r\nto the schema of the data view. It should cover:\r\n* Why field types are important, and how they are used\r\n* What exactly is `ColumnAttribute`, `ColumnNameAttribute`\r\n* Handling of vectors and `VectorTypeAttribute`\r\n* Handling of key types and `KeyTypeAttribute`\r\n* `SchemaDefinition` as a means of runtime schema hints.\r\n* Limitations / what can not be done.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/554","RelatedDescription":"Open issue \"Need a doc on Type-to-DataView schema mapping\" (#554)"},{"Id":"342469916","IsPullRequest":false,"CreatedAt":"2018-07-18T19:57:21","Actor":"TomFinley","Number":"553","RawContent":null,"Title":"Introduce code analyzer","State":"open","Body":"Like most sufficiently large codebases the ML.NET project is guilty of having acquired a set of idioms. Internally we had a code analyzer, to help catch some of the most common issues that tended to come up in PRs, but sometimes we don't do this, and need to fix issues later (e.g., #271, #442, #478). I want to migrate that analyzer to the open source repository, to hopefully automate some of this.\r\n\r\nThere are of course other things we could do with an analyzer, once we have one.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/machinelearning/issues/553","RelatedDescription":"Open issue \"Introduce code analyzer\" (#553)"},{"Id":"342443150","IsPullRequest":false,"CreatedAt":"2018-07-18T18:33:04","Actor":"briancylui","Number":"552","RawContent":null,"Title":"Port native SIMD algorithms for SSE to managed code","State":"open","Body":"### Summary (July 19)\r\n1. Finished preparation work to check in code to ML.NET repo, with:\r\n* [C# implementations](https://github.com/briancylui/machinelearning/blob/SseKey/src/Microsoft.ML.CpuMath/CpuMathUtils.DotNetCoreApp.cs) of [SSE intrinsics](https://github.com/briancylui/machinelearning/blob/SseKey/src/Microsoft.ML.CpuMath/SseIntrinsics.cs) living in [src/Microsoft.ML.CpuMath](https://github.com/briancylui/machinelearning/tree/SseKey/src/Microsoft.ML.CpuMath)\r\n* [Unit tests](https://github.com/briancylui/machinelearning/blob/SseKey/test/Microsoft.ML.CpuMath.UnitTests/UnitTests.cs) and [performance tests](https://github.com/briancylui/machinelearning/blob/SseKey/test/Microsoft.ML.CpuMath.PerformanceTests/SsePerformanceTests.cs) living in [test/Microsoft.ML.CpuMath.[Unit/Performance]Tests](https://github.com/briancylui/machinelearning/tree/SseKey/test)\r\n2. Resolved multi-targeting issue of targeting two different frameworks: .NET Core App 3.0 and .NET Standard 2.0\r\n3. Added additional unit tests\r\n4. Link to working repo (forked): https://github.com/briancylui/machinelearning\r\n5. Link to original issue page for 12-week timeline: https://github.com/briancylui/machinelearning/issues/1\r\n\r\n### Goals\r\n1.\tPort ML.NET C++ SIMD algorithms for SSE to C#\r\n2.\tEnsure C# Hardware Intrinsics feature for SSE meets the needs of ML.NET\r\n3.\tUnit test all functions and get performance benchmark numbers for before and after changes\r\n4.\t(Stretch) Provide software fallback implementations to support more architectures\r\n\r\n[Keeping only the relevant, high-level details below from original [progress](https://github.com/briancylui/machinelearning/issues/1) page to give a general sense of progress]\r\n### Progress\r\n\r\n**Week 2 (Jun 25-29): Port SIMD operations in .NET to managed code outside of ML.NET**\r\n- [x] Implement SSE support and software fallbacks in managed code for all key intrinsics\r\n- [x] Comply with coding style standard\r\n- [x] Implement working unit tests for all key intrinsics\r\n- [x] Implement working performance tests for all key intrinsics using [BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet) ([slides](https://microsoft.sharepoint.com/:p:/r/teams/netfx/corefx/_layouts/15/Doc.aspx?sourcedoc=%7Bf4cdc660-09d2-40ae-a099-4c6bf213bec1%7D&action=default) and [recording](https://microsoft.sharepoint.com/teams/netfx/corefx/Documents/Forms/AllItems.aspx?id=%2Fteams%2Fnetfx%2Fcorefx%2FDocuments%2FModern%20BCL%2Fmodern%20BCL%20talk%20series%20%2D%20Benchmark%2ENET%204%2027%202018%2Emp4&parent=%2Fteams%2Fnetfx%2Fcorefx%2FDocuments%2FModern%20BCL&p=true&slrid=1efa769e-e056-0000-7f34-41a0941dbef8))\r\n- [x] Present performance results in a table ([SsePerf-report-github.pdf](https://github.com/briancylui/machinelearning/files/2157186/SsePerf-report-github.pdf))\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.15063.1155 (1703/CreatorsUpdate/Redstone2)\r\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\r\nFrequency=3515623 Hz, Resolution=284.4446 ns, Timer=TSC\r\n.NET Core SDK=2.1.300\r\n  [Host]     : .NET Core 2.1.0 (CoreCLR 4.6.26515.07, CoreFX 4.6.26515.06), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.1.0 (CoreCLR 4.6.26515.07, CoreFX 4.6.26515.06), 64bit RyuJIT\r\n\r\n\r\n```\r\n|                    Method |       Mean |      Error |     StdDev |\r\n|-------------------------- |-----------:|-----------:|-----------:|\r\n|            NativeDotUPerf |   363.2 us |  7.7293 us | 18.8143 us |\r\n|                MyDotUPerf |   340.2 us |  6.7218 us |  8.0018 us |\r\n|           NativeDotSUPerf | 2,178.3 us | 43.4641 us | 40.6563 us |\r\n|               MyDotSUPerf | 2,144.7 us | 19.1638 us | 16.0027 us |\r\n|          NativeSumSqUPerf |   540.6 us |  3.0299 us |  2.8342 us |\r\n|              MySumSqUPerf |   538.8 us |  2.5507 us |  2.3859 us |\r\n|            NativeAddUPerf |   313.9 us |  2.5163 us |  2.3537 us |\r\n|                MyAddUPerf |   303.3 us |  4.5125 us |  4.2210 us |\r\n|           NativeAddSUPerf | 2,691.8 us | 29.4588 us | 27.5558 us |\r\n|               MyAddSUPerf | 2,658.1 us | 51.3336 us | 64.9206 us |\r\n|       NativeAddScaleUPerf |   300.0 us |  5.5529 us |  5.1941 us |\r\n|           MyAddScaleUPerf |   309.8 us |  5.3974 us |  4.7846 us |\r\n|      NativeAddScaleSUPerf | 2,550.9 us | 21.8322 us | 20.4218 us |\r\n|          MyAddScaleSUPerf | 2,805.3 us | 20.5171 us | 19.1917 us |\r\n|          NativeScaleUPerf |   131.4 us |  0.6347 us |  0.5626 us |\r\n|              MyScaleUPerf |   130.7 us |  1.2159 us |  1.1373 us |\r\n|           NativeDist2Perf |   336.4 us |  2.0555 us |  1.9227 us |\r\n|               MyDist2Perf |   335.2 us |  8.3427 us | 11.4196 us |\r\n|         NativeSumAbsUPerf |   258.0 us |  1.6470 us |  1.5406 us |\r\n|            MySumAbsqUPerf |   258.9 us |  0.9447 us |  0.7889 us |\r\n| NativeMulElementWiseUPerf |   466.4 us |  1.9625 us |  1.6388 us |\r\n|     MyMulElementWiseUPerf |   467.2 us |  4.3560 us |  4.0747 us |\r\n\r\n\r\n**Week 3-5 (Jul 2-20): Port algo to C#, write unit tests and performance tests, check in code**\r\n- [x] Apply real data to test implemented managed code using BenchmarkDotNet\r\n- [x] Integrate local code into ML.NET repo to prepare for checking in code, including:\r\n* C# implementations of intrinsics\r\n* Unit tests\r\n* Performance tests\r\n- [x] Implement additional unit tests to test the complete code paths for two different target frameworks\r\n- [x] Enable multi-targeting\r\n- [x] Make the switch to turn on or off implemented code at will with the UseIntrinsics build attribute\r\n- [x] Check in code with PR #562 \r\n- [ ] Scale up implementation, unit tests, and performance tests to cover all SSE intrinsics\r\n\r\n**Week 6 (Jul 23-27)**\r\n- [ ] Write blog post on how ML.NET is taking advantage of .NET Core hardware intrinsics\r\n\r\n**Week 7-9 (Jul 30-Aug 17)**\r\n- [ ] Write AVX implementations \r\n- [ ] Performance test before and after. We should see some perf gains here.\r\n- [ ] Write blog post on AVX vs SSE comparisons (both implementation and runtime perf)\r\n- [ ] Check in code to ML.NET\r\n\r\n**Week 10-11 (Aug 20-31) (Stretch)**\r\n- [ ] Provide software fallback implementations\r\n\r\n**Week 12 (Sept 3-7)**\r\n- [ ] Clean up, presentation, close out remaining issues","Url":"https://github.com/dotnet/machinelearning/issues/552","RelatedDescription":"Open issue \"Port native SIMD algorithms for SSE to managed code\" (#552)"},{"Id":"342210925","IsPullRequest":false,"CreatedAt":"2018-07-18T07:36:13","Actor":"StanislavChankov","Number":"551","RawContent":null,"Title":"Score column is missing. Parameter name ScoreColumn.","State":"open","Body":"### Issue\r\nThrows an exception \r\n- **What did you do?**\r\n![image](https://user-images.githubusercontent.com/35253870/42866807-475cd2a8-8a76-11e8-9509-d8d147534fa7.png)\r\n\r\n- **What happened?**\r\n![image](https://user-images.githubusercontent.com/35253870/42866529-6e75a5d2-8a75-11e8-8aaf-b4a609affc96.png)\r\n\r\n- **What did you expect?**\r\nTo train without errors or warnings like I have.\r\n### Source code / logs\r\n**ML.NET Version: 0.3.0**\r\n![image](https://user-images.githubusercontent.com/35253870/42866497-59a16876-8a75-11e8-80c8-dfe0ca695d56.png)\r\n![image](https://user-images.githubusercontent.com/35253870/42866716-0f85de24-8a76-11e8-8da4-8cd233d3f7d3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/35253870/42866191-96d304a8-8a74-11e8-99da-4eb762792eb0.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/551","RelatedDescription":"Open issue \"Score column is missing. Parameter name ScoreColumn.\" (#551)"},{"Id":"342119690","IsPullRequest":true,"CreatedAt":"2018-07-17T23:04:51","Actor":"zeahmed","Number":"548","RawContent":null,"Title":"Fixed the TextTransform bug where chargrams where being computed differently when using with/without word tokenizer.","State":"open","Body":"This PR fixes #530. The cause of the problem was `word tokenizer` being applied before `char tokenizer` causing scalar valued text (e.g. `This is a cat`) to become vector (e.g. <This, is, a, cat>). \r\n\r\nPreviously, char tokenizer treated every vector item as separate text item (e.g. computing chargrams on each item by placing start and end markers `<STX>token<ETX>` instead of taking `This is a cat` as single text item).\r\n\r\nThe fix is in CharTokenizeTransform. The CharTokenizeTransform can take either a scalar or vector column as input. The processing of chargrams are done as follows.\r\n\r\n- If the input column is a scalar with text type then chargrams are computed by prepending `<STX>` and appending `<ETX>` characters at the start and at the end of the text respectively.  For example, if the input is `This is a cat` then chargrams will be computed on `<STX>This is a cat<ETX>`.\r\n\r\n- If the input column is a vector with text type (it could be a result of concatenation of several text columns together or application of word tokenizer before char tokenizer) then chargrams will be computed by prepending `<STX>` and appending `<ETX>` characters at start and at the end of the vector respectively. Also, <US> characters are inserted after every item in the vector. For example, if the input is `<This, is, a, cat>` then chargrams will be computed on `<STX>This<US>is<US>a<US>cat<ETX>`.\r\n\r\n- To be backward compatible, CharTokenizerTransform version was bumped up and the support for loading models saved with previous version is added.\r\n\r\nMoving forward, the chargrams will be computed as follows\r\n\r\n- if `stop word removal` is request, chargrams will be computed after `StopwordRemovalTransform` is applied e.g. `<STX>This<US>is<US>a<US>cat<ETX>`.\r\n- otherwise, raw text after text normalization will be used for chargram computing e.g. `This is a cat`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/548","RelatedDescription":"Open PR \"Fixed the TextTransform bug where chargrams where being computed differently when using with/without word tokenizer.\" (#548)"},{"Id":"342110400","IsPullRequest":false,"CreatedAt":"2018-07-17T22:22:50","Actor":"Ivanidzo4ka","Number":"547","RawContent":null,"Title":"ColumnType not properly implements IEquatable","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Core/Data/ColumnType.cs\r\nAccording to https://msdn.microsoft.com/en-us/library/ms131190(v=vs.110).aspx (see Notes to Implementers:) we suppose to also override GetHashCode which we don't do.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/547","RelatedDescription":"Open issue \"ColumnType not properly implements IEquatable\" (#547)"},{"Id":"342077809","IsPullRequest":false,"CreatedAt":"2018-07-17T20:45:02","Actor":"Ivanidzo4ka","Number":"546","RawContent":null,"Title":"Rename tlcresources in Resource manager","State":"open","Body":"```\r\n        private const string DefaultUrl = \"https://aka.ms/tlc-resources/\";\r\n      \r\n        private static string TlcResourcesUrl\r\n```\r\nwe have this TLC mentions in https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs\r\nand it would be nice to rename them to something ml.net specific.\r\n\r\nIn same time we need to make sure default url should point to valid location (we can't just rename it in code, we also need to update aka.ms)","Url":"https://github.com/dotnet/machinelearning/issues/546","RelatedDescription":"Open issue \"Rename tlcresources in Resource manager\" (#546)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-24T05:30:37.9174175Z","RunDurationInMilliseconds":1115}