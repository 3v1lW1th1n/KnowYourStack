{"Data":{"GitHub":{"Issues":[{"Id":"519021863","IsPullRequest":false,"CreatedAt":"2019-11-07T03:57:22","Actor":"luisquintanilla","Number":"4452","RawContent":null,"Title":"[Image Classification API] Bottleneck phase values always computed","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 2.1\r\n- **ML.NET Version (eg., dotnet --info)**: 1.4.0\r\n\r\n### Issue\r\n\r\nSetting `ReuseTrainSetBottleneckCachedValues` and `ReuseValidationSetBottleneckCachedValues` parameters in `ImageClassificationTrainer.Options` to `true`, does the bottleneck computation on subsequent runs. I believe once the bottleneck values are computed on the first run, by setting both of those parameters to `true`, bottleneck computation should be skipped and the model should go directly into the training phase.  Is this no longer the case?\r\n\r\n### Source code / logs\r\n\r\nSee sample source code at this link: https://github.com/luisquintanilla/machinelearning-samples/blob/33f87d226f350fb36552dd8b1cee6a7c3f12da89/samples/csharp/getting-started/DeepLearning_ImageClassification_Binary/DeepLearning_ImageClassification_Binary/Program.cs#L53","Url":"https://github.com/dotnet/machinelearning/issues/4452","RelatedDescription":"Closed issue \"[Image Classification API] Bottleneck phase values always computed\" (#4452)"},{"Id":"518988708","IsPullRequest":true,"CreatedAt":"2019-11-07T01:41:13","Actor":"harishsk","Number":"4451","RawContent":null,"Title":"Added onnx export support for WordTokenizingTransformer and NgramExtractingTransformer","State":"open","Body":"PR contents:\r\n* Onnx export support for for WordTokenizingTransformer and NgramExtractingTransformer\r\n* Related bug fixes in ValueToKeyMappingTransformer\r\n* Bug fixes for string handling in OnnxUtils.cs\r\n* Related unit tests\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4451","RelatedDescription":"Open PR \"Added onnx export support for WordTokenizingTransformer and NgramExtractingTransformer\" (#4451)"},{"Id":"518978102","IsPullRequest":false,"CreatedAt":"2019-11-07T01:04:54","Actor":"LittleLittleCloud","Number":"4450","RawContent":null,"Title":"[AutoML v0.16.0] Multiclass classification score sum doesn't alwasy equals 1","State":"open","Body":"when I try AutoML v0.16.0 multi-classification, sometimes I get prediction score <0, and the summation of all scores doesn't equal to 1. which is unexpected. Maybe some trainer's output doesn't normalize.\r\n\r\n![image](https://user-images.githubusercontent.com/16876986/68351051-2a7be800-00b7-11ea-97fc-2622dcc659e3.png)\r\n\r\nI publish a mini-reproducible project in this [repo](https://github.com/LittleLittleCloud/AutoMLMultiClassificationBug) for facilitating debug.","Url":"https://github.com/dotnet/machinelearning/issues/4450","RelatedDescription":"Open issue \"[AutoML v0.16.0] Multiclass classification score sum doesn't alwasy equals 1\" (#4450)"},{"Id":"518968133","IsPullRequest":false,"CreatedAt":"2019-11-07T00:27:57","Actor":"benquan","Number":"4449","RawContent":null,"Title":"System.FormatException: Tensorflow exception triggered while loading model.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWin10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.net core\r\n\r\n### Issue\r\nI upgraded from ML.NET 1.3.1 to 1.4.0. Everything worked fine in 1.3.1 but after upgrading I get the following error:\r\n\r\n```\r\nSystem.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n   at Tensorflow.c_api.TF_NewGraph()\r\n   at Tensorflow.Graph..ctor()\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog catalog, String modelLocation)\r\n   at ImageClassification.ModelScorer.TFModelScorer.LoadModel(String dataLocation, String imagesFolder, String modelLocation) in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\ModelScorer\\TFModelScorer.cs:line 94\r\n   at ImageClassification.ModelScorer.TFModelScorer.Score() in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\ModelScorer\\TFModelScorer.cs:line 80\r\n   at ImageClassification.Program.Main(String[] args) in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\Program.cs:line 22\r\n```\r\n\r\n\r\n\r\n- **What did you do?**\r\nupgraded from ML.NET 1.3.1 to 1.4.0\r\n- **What happened?**\r\nError\r\n- **What did you expect?**\r\nThe program ran just fine before\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4449","RelatedDescription":"Open issue \"System.FormatException: Tensorflow exception triggered while loading model.\" (#4449)"},{"Id":"518887333","IsPullRequest":true,"CreatedAt":"2019-11-06T22:32:41","Actor":"Lynx1820","Number":"4448","RawContent":null,"Title":"Fixes onnx exports for regression trainers","State":"open","Body":"\r\nThis PR fixes the issues with exporting the following regression trainers to onnx:\r\n- LbfgsPoissonRegression\r\n- FastTreeTweedie\r\n- FastForest\r\n\r\nAnd adds onnx conversion tests for the following regression trainers: \r\n- FastTree\r\n- OnlineGradientDescent\r\n- Ols\r\n- LightGbm\r\n- Sdca","Url":"https://github.com/dotnet/machinelearning/pull/4448","RelatedDescription":"Open PR \"Fixes onnx exports for regression trainers\" (#4448)"},{"Id":"518695258","IsPullRequest":true,"CreatedAt":"2019-11-06T19:47:08","Actor":"harshithapv","Number":"4447","RawContent":null,"Title":"Modified Tensorflow ImageClassification tests to make them faster","State":"open","Body":"1. Added a IClassFixture to create a workspace path only once before all the tests are run.\r\n2. Allow re-use of cached values wherever possible.","Url":"https://github.com/dotnet/machinelearning/pull/4447","RelatedDescription":"Open PR \"Modified Tensorflow ImageClassification tests to make them faster\" (#4447)"},{"Id":"518688777","IsPullRequest":true,"CreatedAt":"2019-11-06T19:34:33","Actor":"bpstark","Number":"4446","RawContent":null,"Title":"Stabilize the LR test","State":"open","Body":"Found issue with how we were using random for our\r\nImageClassificationTrainer. This caused instability in our unit test, as\r\nwe were not able to control the random seed. Modified the code to now\r\nuse the same random object throughout, the trainer, thus allowing us to\r\ncontrol the seed and therefor have predictable output.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4446","RelatedDescription":"Open PR \"Stabilize the LR test\" (#4446)"},{"Id":"518627588","IsPullRequest":false,"CreatedAt":"2019-11-06T17:41:28","Actor":"justinormont","Number":"4445","RawContent":null,"Title":"Hotlinking to blob store","State":"open","Body":"We need aka.ms links to the CDN instead of direct link to blob store:\r\n* https://github.com/dotnet/machinelearning/blob/cc0b7869d50df819783f30b3f7da4d5c3725bb8f/test/Microsoft.ML.Tests/ScenariosWithDirectInstantiation/TensorflowTests.cs#L1902-L1903\r\n* https://github.com/dotnet/machinelearning/blob/9215ba9e0ee8caa1e97e2666743644baf8c8139c/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/ImageClassification/LearningRateSchedulingCifarResnetTransferLearning.cs#L263\r\n\r\nThe unit test and sample will stop working in a month as we close down that blob store.\r\n\r\nWe should add a check-in test to ensure that no blob-store links are added in the future. All links should be an aka.ms link to the CDN.","Url":"https://github.com/dotnet/machinelearning/issues/4445","RelatedDescription":"Open issue \"Hotlinking to blob store\" (#4445)"},{"Id":"517921979","IsPullRequest":true,"CreatedAt":"2019-11-06T16:08:44","Actor":"codemzs","Number":"4439","RawContent":null,"Title":"Remove duplicate lines from project file.","State":"closed","Body":"fixes #4427\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4439","RelatedDescription":"Closed or merged PR \"Remove duplicate lines from project file.\" (#4439)"},{"Id":"515925439","IsPullRequest":false,"CreatedAt":"2019-11-06T16:08:44","Actor":"RussKie","Number":"4427","RawContent":null,"Title":"Duplicate lines in Microsoft.ML.StableApi.csproj","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/365ccf292789ba1f14d80b13e44daaf951517fff/tools-local/Microsoft.ML.StableApi/Microsoft.ML.StableApi.csproj#L26-L28\r\n\r\nLines 26 and 28 are duplicated.","Url":"https://github.com/dotnet/machinelearning/issues/4427","RelatedDescription":"Closed issue \"Duplicate lines in Microsoft.ML.StableApi.csproj\" (#4427)"},{"Id":"518255830","IsPullRequest":true,"CreatedAt":"2019-11-06T05:55:46","Actor":"frank-dong-ms","Number":"4444","RawContent":null,"Title":"nightly build pipeline","State":"open","Body":"new nightly build pipeline:\r\n\r\n1. add new nightly build pipeline project, disable project build from solution\r\n2. add NuGet package version updater project\r\n3. add new Azure nightly build pipeline and template file\r\n4. TestFrameworkCommon project use conditional reference to source code:\r\n    a. when reference from functional test, use project reference\r\n    b. when reference from nightly build test, use package reference\r\n5. process of nightly build pipeline:\r\n    a. get latest NuGet package version from public NuGet feed\r\n    b. update version to .props file\r\n    c. build nightly build project\r\n    d. run nightly build tests, which is functional test for now\r\n    e. output test results\r\n6. a sample test pipeline can be seems here: https://dev.azure.com/dnceng/public/_build?definitionId=644&_a=summary ","Url":"https://github.com/dotnet/machinelearning/pull/4444","RelatedDescription":"Open PR \"nightly build pipeline\" (#4444)"},{"Id":"517447238","IsPullRequest":true,"CreatedAt":"2019-11-06T05:23:17","Actor":"frank-dong-ms","Number":"4437","RawContent":null,"Title":"Nightly build pipeline","State":"closed","Body":"new nightly build pipeline:\r\n\r\n1. add new nightly build pipeline project, disable project build from solution\r\n2. add NuGet package version updater project\r\n3. add new Azure nightly build pipeline and template file\r\n4. TestFrameworkCommon project use conditional reference to source code:\r\n     a. when reference from functional test, use project reference\r\n     b. when reference from nightly build test, use package reference\r\n5. process of nightly build pipeline:\r\n     a. get latest NuGet package version from public NuGet feed\r\n     b. update version to .props file\r\n     c. build nightly build project\r\n     d. run nightly build tests, which is functional test for now\r\n     e. output test results\r\n6. a sample test pipeline can be seems here: https://dev.azure.com/dnceng/public/_build?definitionId=644&_a=summary\r\n7. have issue in Ubuntu platform, disable for now, will continue investigate and send out update later\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4437","RelatedDescription":"Closed or merged PR \"Nightly build pipeline\" (#4437)"},{"Id":"518035830","IsPullRequest":true,"CreatedAt":"2019-11-05T21:12:21","Actor":"codemzs","Number":"4443","RawContent":null,"Title":"Hash Transform API that takes in advanced options.","State":"open","Body":"fixes #4422\r\n\r\nNeeded by a 1P customer.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4443","RelatedDescription":"Open PR \"Hash Transform API that takes in advanced options.\" (#4443)"},{"Id":"517961406","IsPullRequest":false,"CreatedAt":"2019-11-05T18:51:09","Actor":"daholste","Number":"4442","RawContent":null,"Title":"TimeSeriesImputer to use multiple imputation strategies","State":"open","Body":"For imputed rows, this is a feature request for TimeSeriesImputer to be able to support multiple imputation strategies across different columns. For instance, numeric feature columns could be imputed by median, date feature columns by forward fill, and target column by median.","Url":"https://github.com/dotnet/machinelearning/issues/4442","RelatedDescription":"Open issue \"TimeSeriesImputer to use multiple imputation strategies\" (#4442)"},{"Id":"517960117","IsPullRequest":false,"CreatedAt":"2019-11-05T18:48:29","Actor":"daholste","Number":"4441","RawContent":null,"Title":"TimeSeriesImputer to error if dataset has grains with different frequencies","State":"open","Body":"This is a feature request for TimeSeriesImputer to raise an error if a dataset has grains with different frequencies.\r\n\r\nFor instance, another time series imputer (one used by Azure AutoML) raises the error:\r\n“More than one series is in the input data, and their frequencies differ. Please separate series by frequency and build separate models. If frequencies were incorrectly inferred, please fill in gaps in series.”\r\n\r\nAlso, in TimeSeriesImputer today, if grains grains have frequencies that are relatively prime, this appears to lead to odd behavior","Url":"https://github.com/dotnet/machinelearning/issues/4441","RelatedDescription":"Open issue \"TimeSeriesImputer to error if dataset has grains with different frequencies\" (#4441)"},{"Id":"517957259","IsPullRequest":false,"CreatedAt":"2019-11-05T18:42:09","Actor":"daholste","Number":"4440","RawContent":null,"Title":"TimeSeriesImputer to accept datetime format","State":"open","Body":"This is a request for TimeSeriesImputer to accept datetime format for both:\r\n* time series column, and\r\n* input value columns to impute","Url":"https://github.com/dotnet/machinelearning/issues/4440","RelatedDescription":"Open issue \"TimeSeriesImputer to accept datetime format\" (#4440)"},{"Id":"517453542","IsPullRequest":true,"CreatedAt":"2019-11-04T23:53:54","Actor":"codemzs","Number":"4438","RawContent":null,"Title":"Recreate workspace directory when fit() is called, fix documentation, free up unmanaged memory.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4438","RelatedDescription":"Closed or merged PR \"Recreate workspace directory when fit() is called, fix documentation, free up unmanaged memory.\" (#4438)"},{"Id":"517003700","IsPullRequest":true,"CreatedAt":"2019-11-04T15:28:18","Actor":"adamsitnik","Number":"4435","RawContent":null,"Title":"update the CI feed url","State":"closed","Body":"While working on https://github.com/dotnet/performance/pull/988 I've realized that readme points to an old CI feed (last update in March)\r\n\r\n/cc @eerhardt ","Url":"https://github.com/dotnet/machinelearning/pull/4435","RelatedDescription":"Closed or merged PR \"update the CI feed url\" (#4435)"},{"Id":"517037972","IsPullRequest":true,"CreatedAt":"2019-11-04T09:40:18","Actor":"frank-dong-ms","Number":"4436","RawContent":null,"Title":"Nightly build pipeline","State":"closed","Body":"new nightly build pipeline:\r\n\r\n1. add new nightly build pipeline project, disable project build from solution\r\n2. add NuGet package version updater project\r\n3. add new Azure nightly build pipeline and template file\r\n4. TestFrameworkCommon project use conditional reference to source code:\r\n        a. when reference from functional test, use project reference\r\n        b. when reference from nightly build test, use package reference\r\n5. process of nightly build pipeline:\r\n        a. get latest NuGet package version from public NuGet feed\r\n        b. update version to .props file\r\n        c. build nightly build project\r\n        d. run nightly build tests, which is functional test for now\r\n        e. output test results\r\n6. have issue in Ubuntu platform, disable for now\r\n7. a sample test pipeline can be seems here: https://dev.azure.com/dnceng/public/_build?definitionId=644&_a=summary\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4436","RelatedDescription":"Closed or merged PR \"Nightly build pipeline\" (#4436)"},{"Id":"516875652","IsPullRequest":false,"CreatedAt":"2019-11-03T19:19:59","Actor":"ericjohannsen","Number":"4434","RawContent":null,"Title":"Can't specify categorical columns","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\nThe AutoML API Getting Started [documentation](https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/how-to-use-the-automl-api) states:\r\n\r\n> Explore other overloads for Execute() if you want to pass in validation data, column information indicating the column purpose, or prefeaturizers.\r\n\r\nOne overload accepts `ColumnInformation`. However, most of the properties of that class including `CategoricalColumnNames` are get-only. If domain information dictates that a column contains categorical data, how do I provide that insight to AutoML?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4434","RelatedDescription":"Open issue \"Can't specify categorical columns\" (#4434)"},{"Id":"516873493","IsPullRequest":false,"CreatedAt":"2019-11-03T19:07:23","Actor":"t-smirnov","Number":"4433","RawContent":null,"Title":"[Feature] Markov chains","State":"closed","Body":"First of all, there aren't any libraries for text processing\r\nMaybe someone wants to deal with Markov chains for example.  Or it'll be better not to include some of these things to ml lib?","Url":"https://github.com/dotnet/machinelearning/issues/4433","RelatedDescription":"Closed issue \"[Feature] Markov chains\" (#4433)"},{"Id":"516871759","IsPullRequest":false,"CreatedAt":"2019-11-03T18:48:54","Actor":"ericjohannsen","Number":"4432","RawContent":null,"Title":"Trailing comma in header crashes AutoML wizard & VS 2019","State":"open","Body":"### System information\r\n\r\n- Windows 10\r\n- .NET Core 3.0.\r\n\r\n### Issue\r\n\r\n- Used the AutoML plugin in VS2019 (right-click project/Add/Machine learning)\r\n- VS2019 crashed to the desktop\r\n- The wizard did its thing.\r\n\r\n### Source code / logs\r\n\r\nThe issue is caused by a trailing comma in the header. Our data extraction tool created a CSV header like:\r\n\r\nC1, C2, C3,..CMany,Label,\r\n\r\nRemoving the trailing comma (in a text editor, or by opening the CSV in Excel and saving it) corrects the issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4432","RelatedDescription":"Open issue \"Trailing comma in header crashes AutoML wizard & VS 2019\" (#4432)"},{"Id":"515781131","IsPullRequest":false,"CreatedAt":"2019-11-01T23:13:46","Actor":"ashbhandare","Number":"4426","RawContent":null,"Title":"[Image Classification] Error running Transfer learning example with InceptionV3 ","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nMicrosoft.ML: 1.4.0-preview3-28230-4\r\nMicrosoft.ML.ImageAnalytics : 1.4.0-preview3-28230-4\r\nMicrosoft.ML.Vision: 1.4.0-preview3-28230-4\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to run the ImageClassification.Train sample at https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_Training \r\nwith Architecture InceptionV3\r\n- **What happened?**\r\nException : \r\nTensorflow.TensorflowException\r\n  HResult=0x80131500\r\n  Message=NewRandomAccessFile failed to Create/Open: ./tfhub_modules/d765412e8955a7067e9c0031f60783359e0e5c3f/variables/variables.data-00000-of-00001 : The system cannot find the path specified.\r\n; No such process\r\n\t [[{{node checkpoint_initializer_32}}]]\r\n  Source=Microsoft.ML.TensorFlow\r\n  StackTrace:\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.Runner.Run()\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.InitializeTrainingGraph(IDataView input)\r\n   at Microsoft.ML.Vision.ImageClassificationTrainer.TrainModelCore(TrainContext trainContext)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at ImageClassification.Train.Program.Main() in C:\\Users\\aibhanda\\luis-machinelearning-samples\\samples\\csharp\\getting-started\\DeepLearning_ImageClassification_Training\\ImageClassification.Train\\Program.cs:line 80\r\n\r\n\r\n- **What did you expect?**\r\nSample should run, as other architectures run without exception.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[1.4.0_RC-1_InceptionV3.log](https://github.com/dotnet/machinelearning/files/3796015/1.4.0_RC-1_InceptionV3.log)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4426","RelatedDescription":"Closed issue \"[Image Classification] Error running Transfer learning example with InceptionV3 \" (#4426)"},{"Id":"516374191","IsPullRequest":false,"CreatedAt":"2019-11-01T22:16:26","Actor":"codemzs","Number":"4431","RawContent":null,"Title":"Cleanup residual from passing validation set to ImageClassification API in AutoML","State":"open","Body":"Pursuant to https://github.com/dotnet/machinelearning/pull/4430#discussion_r341755273\r\n\r\nCC: @justinormont ","Url":"https://github.com/dotnet/machinelearning/issues/4431","RelatedDescription":"Open issue \"Cleanup residual from passing validation set to ImageClassification API in AutoML\" (#4431)"},{"Id":"516338397","IsPullRequest":true,"CreatedAt":"2019-11-01T22:02:04","Actor":"codemzs","Number":"4430","RawContent":null,"Title":"Do not pass validation set and metrics callback to Image Classification API.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4430","RelatedDescription":"Closed or merged PR \"Do not pass validation set and metrics callback to Image Classification API.\" (#4430)"},{"Id":"515647305","IsPullRequest":true,"CreatedAt":"2019-11-01T22:01:23","Actor":"bpstark","Number":"4424","RawContent":null,"Title":"Modified how data is saved to disk","State":"closed","Body":"pre-trained meta files are now stored in one location always, this\r\nallows multiple runs to re-use the same meta file without having to\r\nredownload.\r\n\r\nAdditionally added the ability to cleanup the temporary workspace used\r\nto train the model. This should prevent issues of running out of disk\r\nspace when running multiple training session sequentially.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4424","RelatedDescription":"Closed or merged PR \"Modified how data is saved to disk\" (#4424)"},{"Id":"516277052","IsPullRequest":false,"CreatedAt":"2019-11-01T18:26:01","Actor":"antoniovs1029","Number":"4429","RawContent":null,"Title":"LoadImages not warning that input column is empty and ignoring imageFolder parameter in such a case","State":"open","Body":"I don't know if this is actually an issue, but it's something that I noticed when working with the LoadImages method, and perhaps it is necessary to warn the user that this could happen, whether at runtime, or in the documentation.\r\n\r\n### Issue\r\nAs I show in the source code I provide below, if all the values of the input column of a LoadImages transform are empty when fitting a pipeline, then the code will still run and not give any warning whatsoever, even though no image is actually loaded to train the model. The transform would also appear to work when transforming an input Data View which uses an empty column as input of the LoadImages, and, in the example I provide, the pipeline would still assign a predicted label to each row of the input data view bein transformed, even if no image was actually loaded.\r\n\r\nI show this by exemplifying two main cases in which this could happen:\r\n1. When the user loads its data through a method such as LoadFromTextFile, with an input file that only has 2 columns, but the user specifies that the ImagePath column (to be used as input column of the LoadImages method) is the 3rd column inside of the file.  This kind of scenario could happen if the user makes a typo in the ModelInput class, or if the user (perhaps mistakenly) passes an input file that doesn't contain an image path column.\r\n\r\n2. When the user loads its data through a method such as LoadFromEnumerable from an array where all of the objects provide either a null or an empty string value to the ImagePath column.\r\n\r\nAlso notice in my code that in both cases the LoadImages transform **also ignores whatever is passed as the imageFolder parameter**, since because there are actually no ImagePaths, it will never _try_ to load images. If there was at least one ImagePath in the input dataview, then LoadImages would actually try to load that image using the imageFolder parameter, and an exception is correctly thrown if the folder doesn't exist.\r\n\r\n### **Why is this a problem?**\r\n- I would understand this behavior happening if the input data view doesn't provide an image path for _some_ of the rows, specially when working with big datasets. But I think it becomes a problem if there's actually no image loaded, and the whole thing appears to work without a warning, like in the example I provided. If a user unknowingly makes a mistake that leads to this problem, then s/he might believe that the model was actually correctly trained with actual images, or that it actually transformed an input where no imagePath was provided. This problem might be harder to spot in more complex pipelines or input files.\r\n\r\n- Also the fact that the imageFolder parameter gets ignored in this case seems odd to me, as I would have expected an exception to be thrown if a user passes an inexistent folder path to the LoadImages transformer, regardless of the content of the ImagePath column.\r\n\r\n### Source code and input file\r\nhttps://gist.github.com/antoniovs1029/997ca183411f173e81a131f09722b092\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4429","RelatedDescription":"Open issue \"LoadImages not warning that input column is empty and ignoring imageFolder parameter in such a case\" (#4429)"},{"Id":"516267001","IsPullRequest":false,"CreatedAt":"2019-11-01T18:06:06","Actor":"CESARDELATORRE","Number":"4428","RawContent":null,"Title":"[Image Classification] Very long time to warm-up when doing the first prediction","State":"open","Body":"I'd like to know if we can do anything to improve the first prediction's needed time when using the new Image Classification model based on DNN (TensorFlow).\r\n\r\nThis behavior/times happen when using the default DNN architecture which is **ResnetV250**.\r\n\r\nWhen using the CPU, the first prediction takes something in between 7 to 12 seconds depending on the model and environment.\r\nThen, upcoming predictions using the same PredictionEngine only need around 200 mlSecs if using CPU.\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/68045426-b09ec580-fc96-11e9-9a38-506089a32cc7.png)\r\n\r\nWhen using a GPU the difference is even larger. Around 15 secs for the first prediction, then a lot less for the next predictions (in this case, something in between 40 mlsecs and 100 mlSecs)\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/68045597-1e4af180-fc97-11e9-859e-66ef707f59fc.png)\r\n\r\nBasically, after the first prediction, it behaves good, with CPU and even better with GPU, but the first prediction needs a huge amount of time to probably initialize internally?\r\n\r\nCould that initialization be improved or happen before calling .Predict()?\r\nI'd like to know if we can do anything to improve the behavior/perf of the first prediction like initializing in advanced when creating the prediction engine instead of when predicting the first time?\r\n\r\n@codemzs - Thoughts?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4428","RelatedDescription":"Open issue \"[Image Classification] Very long time to warm-up when doing the first prediction\" (#4428)"},{"Id":"515691361","IsPullRequest":false,"CreatedAt":"2019-10-31T19:34:30","Actor":"eerhardt","Number":"4425","RawContent":null,"Title":"CodeGenerator throws a bad error when StablePackageVersion isn't set","State":"open","Body":"With the addition of https://github.com/dotnet/machinelearning/pull/4391, we added two new string properties to `CodeGeneratorSettings`:\r\n\r\n* StablePackageVersion\r\n* UnstablePackageVersion\r\n\r\nThese properties are required to be set, if you don't code gen fails. But even worse, it fails in a way that isn't immediately obvious to what you did wrong.\r\n\r\nWe should make these properties required when creating a `CodeGeneratorSettings` object. That way callers of CodeGen know they need to set it.","Url":"https://github.com/dotnet/machinelearning/issues/4425","RelatedDescription":"Open issue \"CodeGenerator throws a bad error when StablePackageVersion isn't set\" (#4425)"},{"Id":"515117636","IsPullRequest":false,"CreatedAt":"2019-10-31T02:44:05","Actor":"ashalogic","Number":"4423","RawContent":null,"Title":"UnauthorizedAccessException in UWP App","State":"open","Body":"### Issue\r\nSystem.Net.WebException: 'An exception occurred during a WebClient request.'\r\nwhen trying to create new mlContext.Model.ImageClassification() in **UWP App**\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/42332369/67914016-f5940080-fb9f-11e9-8af0-afedf07f6700.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4423","RelatedDescription":"Open issue \"UnauthorizedAccessException in UWP App\" (#4423)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-11-07T05:30:41.2208866Z","RunDurationInMilliseconds":956}