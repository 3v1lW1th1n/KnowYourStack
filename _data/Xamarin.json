{"Data":{"Blog":{"FeedItems":[{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many high-performance libraries primarily developed using C or C++. This article, &#8220;Use C/C++ Libraries With Xamarin&#8220;, walks through the technique of separating the concerns of...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null},{"Title":"Mobile & .NET Developer Community Events in February","PublishedOn":"2019-02-01T17:31:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Fall in love with building your next mobile application by networking with local user groups to learn about new and exciting releases, tooling, or updates with Xamarin and .NET related technologies!...","Href":"https://blog.xamarin.com/mobile-net-developer-community-events-in-february/","RawContent":null},{"Title":"Complex UI with FastGrid for Xamarin.Forms","PublishedOn":"2019-01-30T17:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff (Principal Engineer at Binwell,  Microsoft MVP, Xamarin Certified Mobile Developer), Artem Tischenko (Xamarin developer at Binwell) and Kirill...","Href":"https://blog.xamarin.com/complex-ui-with-fastgrid-for-xamarin-forms/","RawContent":null},{"Title":"Android’s D8 dexer and R8 shrinker","PublishedOn":"2019-01-28T18:10:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is quite a bit of complexity to packaging an Android application. Xamarin.Android has to run through the same build pipeline as Android apps built in Android Studio&#8211;with the addition of...","Href":"https://blog.xamarin.com/androids-d8-dexer-and-r8-shrinker/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019 Preview 2","PublishedOn":"2019-01-23T20:22:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, Visual Studio 2019 Preview 2 was released and includes many improvements for mobile developers in Visual Studio. This release, we focused on key areas to make you more productive when authoring...","Href":"https://blog.xamarin.com/whats-new-for-xamarin-developers-in-visual-studio-2019-preview-2/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: New Year – New Pod!","PublishedOn":"2019-01-18T18:59:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. This episode includes a discussion of...","Href":"https://blog.xamarin.com/visual-studio-mobile-developer-podcast-new-year-new-pod/","RawContent":null},{"Title":"Introducing the .NET Community Standup Series","PublishedOn":"2019-01-17T16:57:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We love our amazing .NET community that is filled with amazing developers writing fantastic blogs, libraries, presentations, and pull requests every week. We are always looking for ways to highlight...","Href":"https://blog.xamarin.com/introducing-the-net-community-standup-series/","RawContent":null},{"Title":"Xamarin.Forms 3.5: A Little Bindable Love","PublishedOn":"2019-01-11T18:06:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Andrei Nitescu, a mobile developer since 2013 and frequent contributor to Xamarin.Forms. He shares about his experiences with other developers on his blog, and...","Href":"https://blog.xamarin.com/xamarin-forms-3-5-a-little-bindable-love/","RawContent":null},{"Title":"Hackathon Superweapon: F# and Fabulous","PublishedOn":"2019-01-10T20:27:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, I participated in Hack for the Sea, a weekend devoted to applying tech to marine conservation. One of our local challenges was a “cross-platform mobile app for reporting marine debris.” A...","Href":"https://blog.xamarin.com/hackathon-superweapon-f-and-fabulous/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9023083216","Type":"PullRequestEvent","CreatedAt":"2019-02-07T05:20:55","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2710","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Improve Android NDK validation errors\" (#2710) at xamarin/xamarin-android","RelatedBody":"Backport of: https://github.com/xamarin/xamarin-android/pull/2709\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2708\r\n\r\nMove the check for a `null` or empty `AndroidNdkDirectory` from\r\n`MakeBundleNativeCodeExternal.Execute()` into\r\n`NdkUtil.ValidateNdkPlatform()`, and update the error message.  Make\r\n`ValidateNdkPlatform()` fail with that same error if it cannot get the\r\nversion of the NDK.  That way, the `MakeBundleNativeCodeExternal` and\r\n`Aot` tasks will both hit that new updated error first before they try\r\nto call any other methods from `NdkUtil`.  This solves the problems from\r\nthe linked issue.  In short, the two tasks were each producing a\r\ndifferent error message when invoked with an invalid or missing\r\n`AndroidNdkDirectory`, and neither message suggested how to resolve the\r\nerror.\r\n\r\nAlso remove a related piece of dead code from the `Aot` task."},{"Id":"9023076279","Type":"PullRequestEvent","CreatedAt":"2019-02-07T05:18:22","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2709","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Improve Android NDK validation errors\" (#2709) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2708\r\n\r\nMove the check for a `null` or empty `AndroidNdkDirectory` from\r\n`MakeBundleNativeCodeExternal.Execute()` into\r\n`NdkUtil.ValidateNdkPlatform()`, and update the error message.  Make\r\n`ValidateNdkPlatform()` fail with that same error if it cannot get the\r\nversion of the NDK.  That way, the `MakeBundleNativeCodeExternal` and\r\n`Aot` tasks will both hit that new updated error first before they try\r\nto call any other methods from `NdkUtil`.  This solves the problems from\r\nthe linked issue.  In short, the two tasks were each producing a\r\ndifferent error message when invoked with an invalid or missing\r\n`AndroidNdkDirectory`, and neither message suggested how to resolve the\r\nerror."},{"Id":"9022954925","Type":"IssuesEvent","CreatedAt":"2019-02-07T04:34:34","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2708","RelatedDescription":"Opened issue \"For missing or invalid Android NDK path, MakeBundleNativeCodeExternal and Aot tasks produce two different errors, and neither mentions \"AndroidNdkDirectory\" or \"Android SDK Manager\"\" (#2708) at xamarin/xamarin-android","RelatedBody":"Additional background context: https://github.com/xamarin/xamarin-android/issues/2694\r\n\r\n### Steps to Reproduce\r\n\r\nAdd the following test to the Xamarin.Android.Build.Tests solution and run it:\r\n\r\n```csharp\r\nusing Microsoft.Build.Framework;\r\nusing NUnit.Framework;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Xamarin.Android.Tasks;\r\n\r\nnamespace Xamarin.Android.Build.Tests {\r\n\r\n\t[TestFixture]\r\n\tpublic class MakeBundleNativeCodeExternalTests : BaseTest {\r\n\t\tList<BuildErrorEventArgs> errors;\r\n\t\tList<BuildWarningEventArgs> warnings;\r\n\t\tList<BuildMessageEventArgs> messages;\r\n\t\tMockBuildEngine engine;\r\n\t\tstring path;\r\n\r\n\t\t[SetUp]\r\n\t\tpublic void Setup ()\r\n\t\t{\r\n\t\t\tengine = new MockBuildEngine (TestContext.Out,\r\n\t\t\t\terrors: errors = new List<BuildErrorEventArgs> (),\r\n\t\t\t\twarnings: warnings = new List<BuildWarningEventArgs> (),\r\n\t\t\t\tmessages: messages = new List<BuildMessageEventArgs> ());\r\n\r\n\t\t\tpath = Path.Combine (Root, \"temp\", TestName);\r\n\t\t\tTestContext.CurrentContext.Test.Properties [\"Output\"] = new string [] { path };\r\n\t\t}\r\n\r\n\t\t[TestCase (null)]\r\n\t\t[TestCase (\"\")]\r\n\t\t[TestCase (\"DoesNotExist\")]\r\n\t\tpublic void XA5101AndroidNdkNotFound (string androidNdkDirectory)\r\n\t\t{\r\n\t\t\tvar task1 = new MakeBundleNativeCodeExternal {\r\n\t\t\t\tBuildEngine = engine,\r\n\t\t\t\tAndroidNdkDirectory = androidNdkDirectory,\r\n\t\t\t\tAssemblies = new ITaskItem [0],\r\n\t\t\t\tSupportedAbis = \"armeabi-v7a\",\r\n\t\t\t\tTempOutputPath = path,\r\n\t\t\t\tToolPath = \"\",\r\n\t\t\t\tBundleApiPath = \"\"\r\n\t\t\t};\r\n\r\n\t\t\tAssert.IsFalse (task1.Execute (), \"Task should fail!\");\r\n\t\t\tvar error1 = errors [0];\r\n\t\t\tAssert.AreEqual (\"XA5101\", error1.Code);\r\n\t\t\tStringAssert.Contains (\" NDK \", error1.Message);\r\n\t\t\tStringAssert.Contains (\"AndroidNdkDirectory\", error1.Message);\r\n\t\t\tStringAssert.Contains (\"SDK Manager\", error1.Message);\r\n\r\n\t\t\tvar task2 = new Aot {\r\n\t\t\t\tBuildEngine = engine,\r\n\t\t\t\tAndroidNdkDirectory = androidNdkDirectory,\r\n\t\t\t\tAndroidAotMode = \"normal\",\r\n\t\t\t\tAndroidApiLevel = \"28\",\r\n\t\t\t\tResolvedAssemblies = new ITaskItem [0],\r\n\t\t\t\tSupportedAbis = \"armeabi-v7a\",\r\n\t\t\t\tAotOutputDirectory = path,\r\n\t\t\t\tIntermediateAssemblyDir = path\r\n\t\t\t};\r\n\r\n\t\t\tAssert.IsFalse (task2.Execute (), \"Task should fail!\");\r\n\t\t\tvar error2 = errors [1];\r\n\t\t\tAssert.AreEqual (error1.Message, error2.Message, \"Aot and MakeBundleNativeCodeExternal should produce the same error messages.\");\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Expected Behavior\r\n\r\nAll 3 `TestCase` values pass, meaning that the `Aot` and `MakeBundleNativeCodeExternal` always produce error messages that mention \" NDK \", \"AndroidNdkDirectory\", and \"SDK Manager\", and that the error messages from both tasks are always the same.\r\n\r\n### Actual Behavior\r\n\r\nThe tests fail. The `Aot` task produces the following error in all cases. The message does not mention \"AndroidNdkDirectory\" or \"SDK Manager\":\r\n\r\n```txt\r\nerror XA5101: Missing Android NDK toolchains directory '\\toolchains'. Please install the Android NDK.\r\n```\r\n\r\nThe `MakeBundleNativeCodeExternal` task produces the following error in the `\"DoesNotExist\"` case:\r\n\r\n```txt\r\nCould not find a part of the path 'C:\\platforms'.\r\n```\r\n\r\n`MakeBundleNativeCodeExternal` produces a more instructive error message in the `\"\"` and `null` cases, but that older message doesn't yet mention the Android SDK Manager:\r\n\r\n```txt\r\nerror XA5101: Could not locate Android NDK. Please make sure to configure path to NDK in SDK Locations or set via /p:AndroidNdkDirectory in the MSBuild/xbuild argument.\r\n```\r\n\r\nOn top of that, this last error message is not currently used during Xamarin.Android app builds because the `AndroidNdkDirectory` is adjusted earlier in the build to contain at least a trailing `\\` character, so it is never empty or null."},{"Id":"9021853818","Type":"PullRequestEvent","CreatedAt":"2019-02-06T23:04:58","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2707","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] use NDKMinimumApiAvailable for minSdkVersion warning\" (#2707) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2698\r\n\r\nIn #2698, we added a new build warning for projects using a\r\n`//uses-sdk/@android:minSdkVersion` lower than Xamarin.Android\r\nsupports. This change checking for API-9 was appropriate for 16.0, but\r\nnot 16.1/master.\r\n\r\nWe should instead use `XABuildConfig.NDKMinimumApiAvailable` to decide\r\nto show these warnings or not. I updated the relevant test &\r\nwarning code documentation about this as well.\r\n\r\n## Other changes ##\r\n\r\nWhile using `XABuildConfig` in `Xamarin.Android.Build.Tests`, I\r\nnoticed a compiler warning. It seems the type was found twice, since\r\nit has a reference to `Xamarin.Android.Build.Tasks`. We can remove the\r\n`<Compile/>` item for `XABuildConfig.cs` in this project."},{"Id":"9021350864","Type":"PullRequestEvent","CreatedAt":"2019-02-06T21:33:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2695","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Provide file.encoding for dx tool\" (#2695) at xamarin/xamarin-android","RelatedBody":"Fixes #2685\r\n\r\nIn commit 8571a7f we switched the `CompileToDalvik` task over\r\nto use the `--input-list` argument. This helped reduce the\r\noverall length of the command line arguments passed. It\r\nhad a side effect of causing a problem if the path\r\ncontained non-ASCII characters. We end up with the\r\nfollowing error\r\n\r\n\tjava.io.FileNotFoundException: C:\\Temp\\Scratch.├£ml├ñ├╝ts\\Scratch.├£ml├ñ├╝ts\\obj\\Debug\\90\\android\\bin\\classes.zip (The system cannot find the path specified)\r\n\r\nThis is because while the `input-list` file is fine,\r\nthe paths within it might contain non-ASCII characters.\r\nSo we need to let java know that, we can do that via the\r\n\r\n\tfile.encoding=UTF8\r\n\r\nargument. `CompileToDalvik` can be run in two modes, the first\r\nis just invoking the `dx` executable. The second is invoking\r\nthe `dx.jar` via `java`. Both of these need to be supported.\r\n\r\nFor the normal `java` invocation we can just pass the argument\r\nas normal via `-Dfile.encoding=UTF8`. However for `dx` that is\r\nnot a valid argument. We instead need to provide it via\r\n\r\n\t-JDfile.encoding=UTF8\r\n\r\nThe `-J` tells `dx` that this is a `java` argument. `dx` will then\r\ntake everything after the `-J` , prepend a `-` and pass that to\r\n`java`.\r\n\r\nOne of the unit tests has been updated to include non-ASCII\r\ncharacters."},{"Id":"9021179751","Type":"PullRequestEvent","CreatedAt":"2019-02-06T21:03:58","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2706","RelatedDescription":"Opened pull request \"[tests] don't enable $(AndroidGenerateJniMarshalMethods) on Windows\" (#2706) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build?definitionId=7212\r\nContext: http://build.devdiv.io/2391004\r\n\r\nWe are in the process of switching the Windows build on Azure DevOps\r\nto build in `Release` `$(Configuration)`. This will more closely match\r\nwhat we are doing on Jenkins for other platforms.\r\n\r\nUnfortunately we get the following build failure in `Release`:\r\n\r\n    >.\\bin\\Release\\bin\\xabuild Xamarin.Android-Tests.sln /p:Configuration=Release\r\n    ...\r\n    bin\\Release\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2193,5): error MSB4018: The \"LinkAssemblies\" task failed unexpectedly.\r\n    System.NullReferenceException: Object reference not set to an instance of an object.\r\n        at MonoDroid.Tuner.MonoDroidMarkStep.UpdateMarshalTypes()\r\n        at MonoDroid.Tuner.MonoDroidMarkStep.Process(LinkContext context)\r\n        at Mono.Linker.Pipeline.Process(LinkContext context)\r\n        at MonoDroid.Tuner.Linker.Process(LinkerOptions options, ILogger logger, LinkContext& context)\r\n        at Xamarin.Android.Tasks.LinkAssemblies.Execute(DirectoryAssemblyResolver res)\r\n        at Xamarin.Android.Tasks.LinkAssemblies.Execute()\r\n        at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n        at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [tests\\Xamarin.Forms-Performance-Integration\\Droid\\Xamarin.Forms.Performance.Integration.Droid.csproj]\r\n\r\nIt looks like these two projects are enabling\r\n`$(AndroidGenerateJniMarshalMethods)`:\r\n\r\n* Mono.Android-Tests.csproj\r\n* Xamarin.Forms.Performance.Integration.Droid.csproj\r\n\r\nSince `$(AndroidGenerateJniMarshalMethods)` isn't supported yet on\r\nWindows (and apparently Linux?), I've switched the projects to only\r\nenable the option on macOS."},{"Id":"9020222023","Type":"IssuesEvent","CreatedAt":"2019-02-06T18:26:05","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2705","RelatedDescription":"Opened issue \"org.apache.http.* package removed since Android 6.0\" (#2705) at xamarin/xamarin-android","RelatedBody":"Context: https://developer.android.com/about/versions/marshmallow/android-6.0-changes#behavior-apache-http-client\r\n\r\nSince Android 6.0, the `org.apache.http.*` package was moved out of `android.jar` into `$(AndroidSdkDirectory)\\platforms\\android-$(AndroidApiLevel)\\optional\\org.apache.http.legacy.jar`.\r\n\r\nWe have various reports on the fallout of this change:\r\n- https://developercommunity.visualstudio.com/content/problem/443262/failed-resolution-of-lorgapachehttpprotocolversion.html\r\n- https://github.com/xamarin/xamarin-android/issues/2693\r\n\r\n### Short Term\r\n\r\nFor 16.1, we should just add `org.apache.http.legacy.jar` to the list of Java libraries we include by default.\r\n\r\nIn cases if:\r\n- API level is > 23\r\n- The `org.apache.http.legacy.jar` file exists\r\n\r\n### Long Term\r\n\r\nWe need a more elaborate plan.\r\n\r\nSome ideas:\r\n- Move the bindings to a new assembly: you can call `org.apache.http.*` from C# at the moment. The referenced binding would automatically add the required Java library.\r\n- Consider a new MSBuild property comparable to what you do in gradle:\r\n\r\n```\r\nandroid {\r\n    useLibrary 'org.apache.http.legacy'\r\n}\r\n```\r\n\r\nThis would probe the `optional` directory in the Android SDK for the specified Java library.\r\n\r\n"},{"Id":"9020044157","Type":"PullRequestEvent","CreatedAt":"2019-02-06T17:57:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2682","RelatedDescription":"Merged pull request \"[monodroid] Make it possible to measure jit times\" (#2682) at xamarin/xamarin-android","RelatedBody":"Get more information with `debug.mono.log` property set to `timing`.\r\n\r\nIt hooks up to the profiler's `jit_begin` and `jit_done` events and\r\nprints the method JIT begin and done times to `methods.txt`\r\n\r\nExample output:\r\n\r\n    JIT method begin: Android.Runtime.JNIEnv:Initialize (Android.Runtime.JnienvInitializeArgs*) elapsed: 0s:97::383916\r\n    JIT method begin: Android.Runtime.JNIEnv:.cctor () elapsed: 0s:99::500999\r\n    JIT method  done: Android.Runtime.JNIEnv:.cctor () elapsed: 0s:99::626468\r\n    JIT method begin: (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr) elapsed: 0s:99::695999\r\n    JIT method  done: (wrapper runtime-invoke) object:runtime_invoke_void (object,intptr,intptr,intptr) elapsed: 0s:99::913551\r\n    JIT method begin: Android.Runtime.JNIEnv/<>c:.cctor () elapsed: 0s:100::263916\r\n    JIT method  done: Android.Runtime.JNIEnv/<>c:.cctor () elapsed: 0s:100::326989\r\n    JIT method begin: Android.Runtime.JNIEnv/<>c:.ctor () elapsed: 0s:100::341312\r\n    JIT method  done: Android.Runtime.JNIEnv/<>c:.ctor () elapsed: 0s:100::388082\r\n    JIT method  done: Android.Runtime.JNIEnv:Initialize (Android.Runtime.JnienvInitializeArgs*) elapsed: 0s:102::238083"},{"Id":"9019699931","Type":"PullRequestEvent","CreatedAt":"2019-02-06T17:05:02","Actor":"alexischr","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2704","RelatedDescription":"Opened pull request \"[mono-2018-10] Bundle libmono-native\" (#2704) at xamarin/xamarin-android","RelatedBody":"This is based on https://github.com/xamarin/xamarin-android/pull/2658#issuecomment-458784895, amended for some intricacies of libmono-native building.\r\n\r\nThis produced fully jumbled output such as (while in `bin/Release/lib/xamarin.android/xbuild/Xamarin/Android/lib`):\r\n\r\n```\r\n➜  file host-Darwin/libmono-native.dylib\r\nhost-Darwin/libmono-native.dylib: ELF 32-bit LSB pie executable Intel 80386, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker, with debug_info, not stripped\r\n➜  file armeabi-v7a/libmono-native.so\r\narmeabi-v7a/libmono-native.so: Mach-O 64-bit dynamically linked shared library x86_64\r\n```\r\n\r\nwhile at the same time (in `external/mono/sdks/out`):\r\n```\r\n➜  file android-host-Darwin-release/lib/libmono-native-unified.dylib\r\nandroid-host-Darwin-release/lib/libmono-native-unified.dylib: Mach-O 64-bit dynamically linked shared library x86_64\r\n➜  out:file android-armeabi-v7a-release/lib/libmono-native.so\r\nandroid-armeabi-v7a-release/lib/libmono-native.so: ELF 32-bit LSB pie executable ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /system/bin/linker, with debug_info, not stripped\r\n```\r\n\r\n/cc @jonp @marek-safar "},{"Id":"9019597113","Type":"IssuesEvent","CreatedAt":"2019-02-06T16:50:50","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2703","RelatedDescription":"Opened issue \"[DevCom] Issue in using JNI to call activity from android AAR file\" (#2703) at xamarin/xamarin-android","RelatedBody":"Developer Community issue: https://developercommunity.visualstudio.com/content/problem/333500/issue-in-using-jni-to-call-activity-from-android-a.html\r\n\r\nOriginal post:\r\n\r\n```\r\nHi I am facing using AAR file in xamarin android project . I have added android AAR file in my xamarin android and set its build type to \"AndroidAarLibrary\" .\r\nFollowing is c# code used in xamarin to call activity that is defined in AAR file.\r\n\r\nvar clsName = Java.Lang.Class.ForName(\"com.dsphotoeditor.sdk.activity.DsPhotoEditorActivity\");\r\nvar innt = new Intent(this, clsName);\r\ninnt.SetData(inputImageUri); //Set image uri\r\ninnt.PutExtra(\"ds_photo_editor_api_key\", \"26c479d17c220131bec7b6e29e070ad89f3e6cf4\");\r\ninnt.PutExtra(\"ds_photo_editor_output_directory\", \"ds_photo_editor_sample\");\r\nStartActivityForResult(innt, DS_PHOTO_EDITOR_REQUEST_CODE);\r\n\r\nNow corresponding activity is called successfully and UI showing image editor property. But when clicking filter options in UI then it throw error and application\r\ngets closed with follwing error message:\r\n\r\nCheckJNI: method to register \"rsnScriptReduce\" not in the given class. This is slow, consider changing your RegisterNatives calls.\r\nFailed to register native method android.support.v8.renderscript.RenderScript.rsnScriptReduce(JJI[JJ[I)V in /data/app/mono.samples.jnitest-1/base.apk\r\n----- class 'Landroid/support/v8/renderscript/RenderScript;' cl=0x32c07070 -----\r\n\r\nI think some classes not included while apk generation or not accessible. Please let me know if I am doing anything or if anyone have used this approach before.\r\nThis is google drive link to corresponding xamarin project https://drive.google.com/open?id=13r5FPLhbf75ERBqJI858kubmVARitZ74\r\n\r\nLink of full log file of xamarin output : https://drive.google.com/open?id=1doDkuUR7P25TfBfGz_QHn3m_TsGQ3MNo\r\n\r\nNote:I am want to use photo-editor AAR library from https://www.dsphotoeditor.com\r\n```\r\n"},{"Id":"9019431450","Type":"IssuesEvent","CreatedAt":"2019-02-06T16:28:28","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2702","RelatedDescription":"Opened issue \"[DevCom][DTB] AXML Layout takes a long time\" (#2702) at xamarin/xamarin-android","RelatedBody":"Developer Community issue: https://developercommunity.visualstudio.com/content/problem/334566/axml-layout-118080318720057.html\r\n\r\nOriginal post:\r\n\r\n```\r\nProblem in Layout edition for Android devices. When saving XML , aplication takes so long that even freeze for a few seconds\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9022894421","Type":"IssuesEvent","CreatedAt":"2019-02-07T04:11:38","Actor":"EmilAlipiev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5153","RelatedDescription":"Opened issue \"UWP- titleView causes Pimary ToolbarItems being secondary\" (#5153) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nWhen i use titelView in UWP, all my primary toolbaritems becomes secondary, it is regardless of page implements titleview but also on all other pages\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download attached repro\r\n2. ItemsListpage has titleview, select and item in the list\r\n3. You will be redirect to ItemDetailsPage which has toolbaritem as Search.png, you can see that this toolbar item although primary is, it displays as secondary as in the screenshot below. \r\n4. simply remove the titleview in the Itemspage and run again to see that it is working as primary toolbaritem.\r\n\r\nproblem might not occur for big screen sizes. But i can simply reproduce it on any screen size smaller than 14 inch. I am guessing that it somehow causes OverFlow although there is plenty of space on the screen still. I played around with new [feature SetToolbarDynamicOverflowEnabled](https://github.com/xamarin/Xamarin.Forms/pull/4022) on 3.5 but it didnt help\r\n\r\n![untitled](https://user-images.githubusercontent.com/10422347/52389974-6d604f00-2a96-11e9-813e-25a0d3f331f2.png)\r\n\r\n[App3.zip](https://github.com/xamarin/Xamarin.Forms/files/2839288/App3.zip)\r\n\r\n "},{"Id":"9022641115","Type":"IssuesEvent","CreatedAt":"2019-02-07T02:40:18","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5152","RelatedDescription":"Opened issue \"XAMLC is failing on valid StringFormat\" (#5152) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI upgraded the FormsGallery from 3.4.0 to 3.6-pre1 and it now throws the XAMLC error:\r\n\r\n<img width=\"1029\" alt=\"screen shot 2019-02-06 at 8 17 14 pm\" src=\"https://user-images.githubusercontent.com/41873/52387230-fe133c80-2a4e-11e9-935a-3cae649ad09b.png\">\r\n\r\nThis is happening everywhere StringFormat is being used, such as:\r\n\r\n```\r\n<Label Text=\"{Binding Birthday, StringFormat='Born {0:d}'}\" />\r\n```\r\n\r\nStringFormat from the docs:\r\nhttps://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/string-formatting#the-stringformat-property\r\n\r\nWhen I disabled XAMLC the app runs fine.\r\n\r\n### Expected Behavior\r\n\r\nXAMLC passes\r\n\r\n### Actual Behavior\r\n\r\nXAMLC produces the above error.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6-pre1\r\n- Last known good version:  3.4.0 (I didn't test  3.5)\r\n\r\n### Reproduction Link\r\n\r\nhttps://developer.xamarin.com/samples/xamarin-forms/FormsGallery/\r\n"},{"Id":"9022315860","Type":"PullRequestEvent","CreatedAt":"2019-02-07T01:00:03","Actor":"mattleibow","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5079","RelatedDescription":"Merged pull request \"[Android Material] Linear Progress Indicator\" (#5079) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nfixes Linear Progress Indicator\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #5008\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\n- run [Material] ProgressBar Gallery\r\n- check Visual Gallery\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9021830171","Type":"IssuesEvent","CreatedAt":"2019-02-06T22:59:59","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5148","RelatedDescription":"Closed issue \"Null UIKit.FontDescriptor crashes XF 3.4/3.5\" (#5148) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nIn Xaml if the descriptor is null, Forms will crash\r\n### Steps to Reproduce\r\n\r\n1.  \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\nNot crash\r\n### Actual Behavior\r\nCrash\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: Unknown\r\n- IDE: VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:   Any\r\n \r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/112916/52362279-0e96c900-29f5-11e9-9bab-dc9857472bc0.png)\r\n\r\nNote: Descriptor is null and not checked for Null\r\n \r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"9021809949","Type":"IssuesEvent","CreatedAt":"2019-02-06T22:55:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5151","RelatedDescription":"Closed issue \"PanGestureRecognizer PanUpdated is not fired with StatusType.Completed\" (#5151) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nPanGestureRecognizer PanUpdated is not fired with StatusType.Completed when I swipe out of the view bounds. \r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a PanGestureRecognizer to ListView cell\r\n2. Start swiping the item and swipe out of cell bounds\r\n3. Release the finger when out of bounds\r\n4. Tap the cell\r\n\r\n### Expected Behavior\r\n\r\nSwiping out of cell bounds should fire PanUpdated with StatusType.Completed\r\n\r\n### Actual Behavior\r\n\r\nSwiping out of cell bounds doesn't fire PanUpdated with StatusType.Completed. It fires the PanUpdated with StatusType.Completed when I swipe out of bounds, release the finger and tap the cell\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks:\r\n  - Android: 7.0\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/RedasP/PanGestureRecognizerDemo\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9022813421","Type":"PullRequestEvent","CreatedAt":"2019-02-07T03:40:32","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5565","RelatedDescription":"Merged pull request \"Bump maccore to head of master\" (#5565) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9021935654","Type":"PullRequestEvent","CreatedAt":"2019-02-06T23:22:58","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5565","RelatedDescription":"Opened pull request \"Bump maccore to head of master\" (#5565) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9021615037","Type":"PullRequestEvent","CreatedAt":"2019-02-06T22:18:47","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5561","RelatedDescription":"Merged pull request \"[d16-0] Bump mono to head of 2018-08\" (#5561) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@163f45d81ce [corlib] Fix GetFrames_AsyncCalls test not to block\n* mono/mono@208d5a5f1b2 Avoid recursive extracting redundant frames from captured traces.\n* mono/mono@bcc1b83e822 Add back missing stack frames to mono MERP reports (#12741)\n* mono/mono@7a3ce9849ff Bump corert\n* mono/mono@13204572a40 [arm/ios] workaround for faulty vcmp.f64 insn\n* mono/mono@2359cba40e9 [coop] Fix deadlock when unwinding\n\nDiff: https://github.com/mono/mono/compare/a4956c837e18da4980df2e2903bfca91f7ddae5b...163f45d81ced56e0d359f35564ed217e9c0b00de\n\nSupercede https://github.com/xamarin/xamarin-macios/pull/5544"},{"Id":"9021438492","Type":"PullRequestEvent","CreatedAt":"2019-02-06T21:48:11","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5554","RelatedDescription":"Merged pull request \"[AVFAudio] Xcode 10.2 Beta 2\" (#5554) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":41,"FavoriteCount":21,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":33,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":67,"FavoriteCount":38,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":65,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":96,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":70,"FavoriteCount":28,"RawContent":null},{"Id":"1088179823762161664","CreatedAt":"2019-01-23T21:01:02+00:00","UserScreenname":"xamarinhq","Text":"Just released: #VS2019 Preview 2 which includes tons of improvements for mobile devs to make you more productive wh… https://t.co/j4LgiuYkgc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":74,"RawContent":null},{"Id":"1086352280604065792","CreatedAt":"2019-01-18T19:59:01+00:00","UserScreenname":"xamarinhq","Text":"New Year – New podcast. Now on the Visual Studio Mobile Developer Podcast: Office Hours, Hockey App moving to… https://t.co/QtObsRI6av","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":20,"RawContent":null},{"Id":"1085961073902129152","CreatedAt":"2019-01-17T18:04:30+00:00","UserScreenname":"xamarinhq","Text":"As the .NET community expands so should the community standups... We are pleased to introduce the expansion of the… https://t.co/EDO0vChQlR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":22,"RawContent":null},{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":104,"FavoriteCount":45,"RawContent":null},{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":22,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":270,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":153,"FavoriteCount":69,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null}]}},"RunOn":"2019-02-07T05:31:17.8787362Z","RunDurationInMilliseconds":3137}