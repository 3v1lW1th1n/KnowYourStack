{"Data":{"Blog":{"FeedItems":[{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7842979621","Type":"PullRequestEvent","CreatedAt":"2018-06-19T02:52:02","Actor":"hsharber","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18535","RelatedDescription":"Opened pull request \"Issue 18420\" (#18535) at dotnet/coreclr","RelatedBody":"Remove dead strings from corerror.xml and mscorrc.rc\r\n\r\nRemoved strings in mscorrc.rc that appear only in mscorrc\\mscorrc.rc and mscorrc\\resource.h.\r\nAnd removed strings in \\inc\\corerror.xml that appear only in corerror.xml and coreerror.h \r\n\r\nFix #18420"},{"Id":"7842909516","Type":"IssuesEvent","CreatedAt":"2018-06-19T02:25:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18525","RelatedDescription":"Closed issue \"Possible JIT \\ cross-gen bug in xplat in 2.2.0-preview1-26614-02 of shared runtime\" (#18525) at dotnet/coreclr","RelatedBody":"We started seeing errors during runtime Razor view compilation once we upgraded to build `2.2.0-preview1-26614-02` of Microsoft.NETCore.App. Downgrading to `2.2.0-preview1-26612-04` resolves this error. We're targeting the RTM (2.8.0) version of Roslyn that hasn't changed for a while now.\r\n\r\nBuilds with failures:: \r\nhttps://ci3.dot.net/job/aspnet_Mvc/job/dev/job/osx-Configuration_Release_prtest/319/console\r\nhttps://ci3.dot.net/job/aspnet_Mvc/job/dev/job/linux-Configuration_Release_prtest/323/console\r\n\r\nThe error stack trace:\r\n\r\n```\r\n08:59:23    System.IndexOutOfRangeException : Index was outside the bounds of the array.\r\n08:59:23   Stack Trace:\r\n08:59:23      at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.SwitchBucket.MergeIsAdvantageous(SwitchBucket bucket1, SwitchBucket bucket2) in /_/src/Compilers/Core/Portable/CodeGen/SwitchIntegralJumpTableEmitter.SwitchBucket.cs:line 282\r\n08:59:23      at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.GenerateSwitchBuckets(Int32 startLabelIndex, Int32 endLabelIndex) in /_/src/Compilers/Core/Portable/CodeGen/SwitchIntegralJumpTableEmitter.cs:line 200\r\n08:59:23      at Microsoft.CodeAnalysis.CodeGen.SwitchIntegralJumpTableEmitter.EmitJumpTable() in /_/src/Compilers/Core/Portable/CodeGen/SwitchIntegralJumpTableEmitter.cs:line 125\r\n08:59:23      at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSwitchHeader(BoundSwitchStatement switchStatement, BoundExpression expression, KeyValuePair`2[] switchCaseLabels, LabelSymbol fallThroughLabel) in /_/src/Compilers/CSharp/Portable/CodeGen/EmitStatement.cs:line 1174\r\n08:59:23      at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitSwitchStatement(BoundSwitchStatement switchStatement) in /_/src/Compilers/CSharp/Portable/CodeGen/EmitStatement.cs:line 1113\r\n08:59:23      at Microsoft.CodeAnalysis.CSharp.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement) in /_/src/Compilers/CSharp/Portable/CodeGen/EmitStatement.cs:line 73\r\n```\r\n\r\nWe've usually seen these sort of errors on account due to bugs in cross-gen \\ JIT."},{"Id":"7842550585","Type":"PullRequestEvent","CreatedAt":"2018-06-19T00:12:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18534","RelatedDescription":"Opened pull request \"PInvoke calli support for CoreRT\" (#18534) at dotnet/coreclr","RelatedBody":"In CoreCLR, PInvoke calli is implemented via a assembly helper that does a lot of heavy lifting (compares signatures, etc.). This heavy lifting is hard to replicate in CoreRT.\r\n\r\nThis change introduces an alternative path for calli instruction that is full AOT friendly. When the JIT runs into PInvoke calli, the JIT asks the EE for a regular method to replace it with.\r\n\r\nI have also cleaned up a few related things that I have run into along the way (see commit descriptions for details).\r\n\r\nContributes to https://github.com/dotnet/corert/issues/5587"},{"Id":"7842549208","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:12:23","Actor":"mtaron","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18533","RelatedDescription":"Opened issue \"EventSource ActivityIds not present in Release UWP (.NET Native) traces\" (#18533) at dotnet/","RelatedBody":"The attached UWP app ([ActivityIdUwp.zip](https://github.com/dotnet/coreclr/files/2113339/ActivityIdUwp.zip)) has a simple self-describing EventSource.\r\n\r\n```\r\npublic sealed class TestEventSource : EventSource\r\n{​\r\npublic static TestEventSource Log = new TestEventSource();​\r\n​\r\nprivate TestEventSource()​\r\n : base(\"TestEventSource\")​\r\n{​\r\n}​\r\n​\r\nprivate const string Test = \"Test\";​\r\npublic void TestStart() => Write(Test, new EventSourceOptions { Opcode = EventOpcode.Start });​\r\npublic void TestStop() => Write(Test, new EventSourceOptions { Opcode = EventOpcode.Stop });​\r\n}\r\n```\r\n\r\nWhen you take a trace of a **debug** build of the app, you will that ActivityIds are automatically computed for the stop and start events.\r\n\r\nEvent Name | Time MSec | Process Name | Rest\r\n-- | -- | -- | --\r\nTestEventSource/Test/Start | 13,081.954 | ActivityIdUwp (10460) | ThreadID=\"31,964\" ProcessorNumber=\"1\" ActivityID=\"/#10460/1/1/\"\r\nTestEventSource/Test/Stop | 13,237.359 | ActivityIdUwp (10460) | ThreadID=\"31,964\" ProcessorNumber=\"1\" DURATION_MSEC=\"155.405\" ActivityID=\"/#10460/1/1/\"\r\n\r\nBut when you take a trace of a **release** build of the app, the activities are **not present**.\r\n\r\nEvent Name | Time MSec | Process Name | Rest\r\n-- | -- | -- | --\r\nTestEventSource/Test/Start | 9,952.188 | ActivityIdUwp (25548) | ThreadID=\"30,972\" ProcessorNumber=\"0\"\r\nTestEventSource/Test/Stop | 9,958.760 | ActivityIdUwp (25548) | ThreadID=\"30,972\" ProcessorNumber=\"0\" DURATION_MSEC=\"6.573\"\r\n\r\n@brianrob since this could be related to issue [#18319 Classic EventSources don't work in Release builds using .NET Native (UWP)](https://github.com/dotnet/coreclr/issues/18319).\r\n\r\n"},{"Id":"7842549208","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:12:23","Actor":"mtaron","Repository":"dotnet/","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18533","RelatedDescription":"Opened issue \"EventSource ActivityIds not present in Release UWP (.NET Native) traces\" (#18533) at dotnet/","RelatedBody":"The attached UWP app ([ActivityIdUwp.zip](https://github.com/dotnet/coreclr/files/2113339/ActivityIdUwp.zip)) has a simple self-describing EventSource.\r\n\r\n```\r\npublic sealed class TestEventSource : EventSource\r\n{​\r\npublic static TestEventSource Log = new TestEventSource();​\r\n​\r\nprivate TestEventSource()​\r\n : base(\"TestEventSource\")​\r\n{​\r\n}​\r\n​\r\nprivate const string Test = \"Test\";​\r\npublic void TestStart() => Write(Test, new EventSourceOptions { Opcode = EventOpcode.Start });​\r\npublic void TestStop() => Write(Test, new EventSourceOptions { Opcode = EventOpcode.Stop });​\r\n}\r\n```\r\n\r\nWhen you take a trace of a **debug** build of the app, you will that ActivityIds are automatically computed for the stop and start events.\r\n\r\nEvent Name | Time MSec | Process Name | Rest\r\n-- | -- | -- | --\r\nTestEventSource/Test/Start | 13,081.954 | ActivityIdUwp (10460) | ThreadID=\"31,964\" ProcessorNumber=\"1\" ActivityID=\"/#10460/1/1/\"\r\nTestEventSource/Test/Stop | 13,237.359 | ActivityIdUwp (10460) | ThreadID=\"31,964\" ProcessorNumber=\"1\" DURATION_MSEC=\"155.405\" ActivityID=\"/#10460/1/1/\"\r\n\r\nBut when you take a trace of a **release** build of the app, the activities are **not present**.\r\n\r\nEvent Name | Time MSec | Process Name | Rest\r\n-- | -- | -- | --\r\nTestEventSource/Test/Start | 9,952.188 | ActivityIdUwp (25548) | ThreadID=\"30,972\" ProcessorNumber=\"0\"\r\nTestEventSource/Test/Stop | 9,958.760 | ActivityIdUwp (25548) | ThreadID=\"30,972\" ProcessorNumber=\"0\" DURATION_MSEC=\"6.573\"\r\n\r\n@brianrob since this could be related to issue [#18319 Classic EventSources don't work in Release builds using .NET Native (UWP)](https://github.com/dotnet/coreclr/issues/18319).\r\n\r\n"},{"Id":"7842548084","Type":"PullRequestEvent","CreatedAt":"2018-06-19T00:11:57","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18499","RelatedDescription":"Merged pull request \"genPutArgStk needs to check for FIELD_LIST first\" (#18499) at dotnet/coreclr","RelatedBody":"When a struct is passed on the stack using `FIELD_LIST`, the type of the `FIELD_LIST` is the type of its first field. If that type was a struct type (i.e. a SIMD type), `genPutArgStk` would assume that it was the non-`FIELD_LIST` case.\r\n\r\nFix #18497"},{"Id":"7842548071","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:11:57","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18497","RelatedDescription":"Closed issue \"[PMI] Assertion failed 'tree->gtHasReg()' in System.Private.CoreLib.dll\" (#18497) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7842794772","Type":"IssuesEvent","CreatedAt":"2018-06-19T01:46:10","Actor":"mikeharder","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9511","RelatedDescription":"Opened issue \"NuGetFallbackFolder created by Installer contains more package versions than folder created by Binaries\" (#9511) at dotnet/cli","RelatedBody":"The customer impact may be minimal, but I was surprised to find the NuGetFallbackFolder created by the installer (.exe) contains more package versions than the NuGetFallbackFolder created by the binaries (.zip).  I assumed the folders would be identical.\r\n\r\n## Steps to reproduce\r\n1. Install SDK 2.1.300, both the \"x64 Installer\" (.exe) and \"x64 Binaries\" (.zip)\r\n2. Run `dotnet new --list` for the \"x64 Binaries\" installation to create the NuGetFallbackFolder\r\n3. Compare the contents of the two NuGetFallbackFolders\r\n\r\n## Expected  behavior\r\nSame content\r\n\r\n## Actual behavior\r\n```\r\nInstaller: microsoft.netcore.app 2.0.0, 2.0.3, 2.1.0\r\nBinaries: microsoft.netcore.app 2.1.0\r\n```\r\n\r\nCC: @JunTaoLuo, @joeloff "},{"Id":"7842653200","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:53:04","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9510","RelatedDescription":"Opened issue \"dotnet should warn users if preferring DOTNET_CLI_HOME over HOME or USERPROFILE.\" (#9510) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nUsing 2.1.4xx:\r\n\r\n1. `DOTNET_CLI_HOME=/tmp/foo dotnet tool install -g dotnetsay`\r\n\r\n## Expected  behavior\r\n\r\n`dotnet` should print a message saying it is respecting `DOTNET_CLI_HOME` over `HOME` or `USERPROFILE`.\r\n\r\nSee https://github.com/NuGet/Home/issues/6989#issuecomment-393704026.\r\n\r\n## Actual behavior\r\n\r\n`dotnet` does not print any such message.\r\n\r\n## Environment data\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-009009\r\n Commit:    d3787295e2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.400-preview-009009/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1-servicing-26605-02\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400-preview-009009 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1-rtm-30818 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1-rtm-30818 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.1-servicing-26605-02 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7841784150","Type":"PullRequestEvent","CreatedAt":"2018-06-18T20:46:21","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9465","RelatedDescription":"Closed pull request \"Remove xml encoding\" (#9465) at dotnet/cli","RelatedBody":"fix https://github.com/dotnet/cli/issues/9413\r\nRely on CommandSpecFactory for the quoting\r\n\r\nThis fix can resolve the problem when the user has Non ASCII character in their $HOME directory. However, it will **not** resolve all the case when there is control character in folder name like “alexander, the great”. It will keep the “same level” with `dotnet build -o` which should be acceptable. Please see the detail in the issue. Since this goes to 2.1.3xx. I try to keep the change minimal. The existing escaping is far from ideal. I hope to keep investigating into this issue and find a general solution for 2.1.4xx."},{"Id":"7841770040","Type":"PullRequestEvent","CreatedAt":"2018-06-18T20:43:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9509","RelatedDescription":"Opened pull request \"Pass BaseIntermediateOutputPath via xml\" (#9509) at dotnet/cli","RelatedBody":"Instead of command line to avoid escaping problem.\r\n\r\nIt can support most of the character including surrogate char. It cannot\r\nsupport semicolon. However, semicolon is not allow to be part of the\r\nuser name.\r\n\r\nPort 2.1.4xx fix 0251f677ede571b61a47ca24f38df8e09038277d while keep\r\nBaseIntermediateOutputPath instead of MsBuildProjectExtensionsPath to\r\nminimize the change.\r\n\r\n"},{"Id":"7841628740","Type":"IssuesEvent","CreatedAt":"2018-06-18T20:16:18","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6237","RelatedDescription":"Closed issue \"dotnet new console, publish, makes a dll not an exe\" (#6237) at dotnet/cli","RelatedBody":"```\r\nC:\\PLAy\\asdf>dotnet --version\r\n2.0.0-preview1-005694\r\n\r\nC:\\PLAy\\asdf>dotnet new console\r\nThe template \"Console Application\" was created successfully.\r\n\r\nC:\\PLAy\\asdf>dotnet restore\r\n\r\n...\r\nC:\\PLAy\\asdf>dotnet run\r\nHello World!\r\n\r\nC:\\PLAy\\asdf>dotnet publish\r\nMicrosoft (R) Build Engine version 15.2.47.30403\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  asdf -> C:\\PLAy\\asdf\\bin\\Debug\\netcoreapp2.0\\asdf.dll\r\n```\r\n\r\nShouldn't I have a console .exe? How do I run this dll?"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7839045747","Type":"PullRequestEvent","CreatedAt":"2018-06-18T12:31:13","Actor":"d-dizhevsky","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/776","RelatedDescription":"Opened pull request \"Update release notes link\" (#776) at dotnet/standard","RelatedBody":"fix for #775 "},{"Id":"7830571777","Type":"IssuesEvent","CreatedAt":"2018-06-15T12:14:03","Actor":"panost","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/770","RelatedDescription":"Closed issue \"[Question] Nullable Ref Types\" (#770) at dotnet/standard","RelatedBody":"I don't ask if are they plans for it, but if it is possible (for technological POV) to support Nullable Ref Types (C# 8.0) annotations even if none of the supported frameworks has them?\r\n\r\nFor example String.Replace to be defined in .NET Standard as \r\n\r\n> public string String.Replace(string oldValue,string? newValue);\r\n\r\neven if none of the supported frameworks has this annotation ?\r\n"},{"Id":"7828631070","Type":"IssuesEvent","CreatedAt":"2018-06-15T02:45:19","Actor":"gongdo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/476","RelatedDescription":"Closed issue \"Unit Test project(.NET 4.7) cannot load System.ValueTuple\" (#476) at dotnet/standard","RelatedBody":"> (The original issue was reported by Gyuwon Yi from here: https://developercommunity.visualstudio.com/content/problem/102236/unit-test-projectnet-47-cannot-load-systemvaluetup.html )\r\n\r\nUnit Test project(.NET 4.7) referencing .NET Core library using value tuple cannot load System.ValueTuple assembly.\r\nBut console client application works correctly.\r\nYou can repro with code from https://github.com/gyuwon/ValueTypeTestingProblem\r\n\r\nThe whole message:\r\n\r\n> Test Name: Bar_returns_value_tuple_correctly\r\n> Test FullName: ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly\r\n> Test Source: c:\\users\\gyuwon\\Documents\\Projects\\ValueTupleTesting\\ValueTupleTestsNet47\\FooService_specs.cs : line 16\r\n> Test Outcome: Failed\r\n> Test Duration: 0:00:00.0261781 Result StackTrace: at ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly()\r\n> Result Message: \r\n> Test method ValueTupleTestsNet47.FooService_specs.Bar_returns_value_tuple_correctly threw exception: \r\n> System.IO.FileLoadException: Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nAs I replied on the original issue, it can be solved by making library project to target multiple frameworks.\r\nBut it's just a work-around, not a solution.\r\nI think it's not a single ValueTuple problem. There's some referencing issue on .NET Standard 2.0.\r\nFor example this issue on Azure Function(Web Job) project with .NET Standard 2.0 library, looks like similar: https://github.com/Azure/azure-webjobs-sdk-script/issues/1792"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7843190422","Type":"IssuesEvent","CreatedAt":"2018-06-19T04:19:20","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29899","RelatedDescription":"Reopened issue \"Microsoft.Windows.Compatibility.Shims shims targeting 2.1 but supports 2.0\" (#29899) at dotnet/corefx","RelatedBody":"Looks like we are taking the live shims https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.Windows.Compatibility.Shims/Microsoft.Windows.Compatibility.Shims.pkgproj#L7. However we are putting them in 2.0 folder in package https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.Windows.Compatibility.Shims/Microsoft.Windows.Compatibility.Shims.pkgproj#L32. This is likely going to cause problems with folks using these shims on 2.0 because we moved some types down in 2.1. I'm not sure how big of an issue this is right now but we should do a diff and decide what to do about this and decide whether or not we want to cross-compile the shims or something else.\r\n\r\ncc @ericstj @safern\r\n\r\n"},{"Id":"7843016872","Type":"IssuesEvent","CreatedAt":"2018-06-19T03:05:49","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30503","RelatedDescription":"Opened issue \"Introduce a Utf8String type\" (#30503) at dotnet/corefx","RelatedBody":"This is the API proposal for `Utf8String`, an immutable, heap-allocated representation of UTF-8 string data. See https://github.com/dotnet/corefxlab/issues/2368 for the scenarios and design philosophy behind this proposal.\r\n\r\nTo timebox discussion, the APIs under consideration here are just `Utf8String` and `UnicodeScalar`. There will be a different issue opened for consideration of span-based APIs, other helper types, and additions to existing types.\r\n\r\n```cs\r\n// n.b. System namespace\r\nnamespace System\r\n{\r\n    // Represents a string whose internal representation consists of UTF-8 subsequences.\r\n    // Like the String class, developers are *strongly discouraged* from creating instances of\r\n    // this type that have invalid UTF-8 subsequences (and our APIs try to encourage good hygiene\r\n    // in this regard), but instances of this type are *not guaranteed* to consist only of well-\r\n    // formed UTF-8 subsequences. The APIs hanging off this type have well-defined, predictable\r\n    // behavior regardless of whether the UTF-8 string contains invalid subsequences.\r\n    //\r\n    // The class isn't directly indexable or enumerable, instead relying on the developer to\r\n    // go through one of the AsBytes / AsScalars / AsSpan APIs.\r\n    //\r\n    // Whenever length / index / offset / count / etc. occurs in these APIs, it's in terms of number\r\n    // of Char8 elements. (Or, \"byte length\" if you prefer.)\r\n    public sealed unsafe class Utf8String : IComparable<Utf8String>, IConvertible, IEquatable<Utf8String>\r\n    {\r\n        /*\r\n         * CONSTRUCTORS\r\n         * All public ctors are validating ctors.\r\n         * Complexity is O(n) for memcpy and O(n) for validation.\r\n         * Behavior given invalid input: bad sequences replaced with U+FFFD.\r\n         * Scroll down further in the file for static factories that suppress validation.\r\n         */\r\n\r\n        // For null-terminated UTF-8 and UTF-16 sequences.\r\n        // If not null-terminated, wrap (ptr, length) in a Span and call the Span-based ctors.\r\n        public Utf8String(byte* value) => throw null;\r\n        public Utf8String(Char8* value) => throw null;\r\n        public Utf8String(char* value) => throw null;\r\n\r\n        // For non null-terminated UTF-8 and UTF-16 sequences.\r\n        public Utf8String(ReadOnlySpan<byte> value) => throw null;\r\n        public Utf8String(ReadOnlySpan<Char8> value) => throw null;\r\n        public Utf8String(ReadOnlySpan<char> value) => throw null;\r\n\r\n        // For discoverability / ease of use, equivalent to ROS<char>-based ctor\r\n        public Utf8String(String value) => throw null;\r\n\r\n        /*\r\n         * COMPARISON\r\n         * All equality / comparison methods which don't explicitly take a StringComparison\r\n         * are ordinal by default. This differs slightly from System.String but is self-consistent\r\n         * within the Utf8String class.\r\n         */\r\n\r\n        public static bool operator ==(Utf8String a, Utf8String b) => throw null;\r\n        public static bool operator !=(Utf8String a, Utf8String b) => throw null;\r\n\r\n        public int CompareTo(Utf8String other) => throw null; // for IComparable<Utf8String>\r\n\r\n        public int Compare(Utf8String a, Utf8String b, StringComparison comparisonType) => throw null;\r\n        public int CompareOrdinal(Utf8String a, Utf8String b) => throw null;\r\n\r\n        /*\r\n         * PROJECTION\r\n         * n.b. No implicit or explicit cast from Utf8String <-> String.\r\n         * Reason for this is that the cast would have O(n) complexity, which would be\r\n         * potentially surprising for developers. Use ToString() / ToUtf8String() instead.\r\n         */\r\n\r\n        public ReadOnlySpan<byte> AsBytes() => throw null;\r\n        public ReadOnlyMemory<Char8> AsMemory() => throw null;\r\n        public ScalarSequence AsScalars() => throw null; // custom struct enumerable\r\n        public ReadOnlySpan<Char8> AsSpan() => throw null;\r\n\r\n        // static readonly field, not property or const, to match String.Empty\r\n        public static readonly Utf8String Empty;\r\n\r\n        // Length (in Char8s)\r\n        public int Length { get => throw null; }\r\n\r\n        /*\r\n         * CONCAT\r\n         * This set of overloads may change based on how language and compiler support for '+' works\r\n         * with Utf8String instances, including whether struct-based builder types come online.\r\n         * Let's go with this for now pending how those other features shake out.\r\n         */\r\n\r\n        public static Utf8String Concat(IEnumerable<Utf8String> values) => throw null;\r\n        public static Utf8String Concat(Utf8String str0, Utf8String str1) => throw null;\r\n        public static Utf8String Concat(Utf8String str0, Utf8String str1, Utf8String str2) => throw null;\r\n        public static Utf8String Concat(Utf8String str0, Utf8String str1, Utf8String str2, Utf8String str3) => throw null;\r\n        public static Utf8String Concat(params Utf8String[] values) => throw null;\r\n\r\n        // If we had a language feature which allowed Concat(params ReadOnlySpan<...>) as a parameter, we'd\r\n        // probably have an overload for that as well. We'd probably also want that on the String type.\r\n\r\n        public static Utf8String Concat(ReadOnlySpan<Char8> str0, ReadOnlySpan<Char8> str1) => throw null;\r\n        public static Utf8String Concat(ReadOnlySpan<Char8> str0, ReadOnlySpan<Char8> str1, ReadOnlySpan<Char8> str2) => throw null;\r\n        public static Utf8String Concat(ReadOnlySpan<Char8> str0, ReadOnlySpan<Char8> str1, ReadOnlySpan<Char8> str2, ReadOnlySpan<Char8> str3) => throw null;\r\n\r\n        // First overload is ordinal; all other overloads require an explicit comparison to be specified.\r\n        // Open question: String.Contains has no overload which takes a ROS<> parameter - do we need one?\r\n\r\n        public bool Contains(UnicodeScalar value) => throw null;\r\n        public bool Contains(UnicodeScalar value, StringComparison comparisonType) => throw null;\r\n        public bool Contains(Utf8String value, StringComparison comparisonType) => throw null;\r\n        public bool Contains(ReadOnlySpan<Char8> value, StringComparison comparisonType) => throw null;\r\n\r\n        // \"CreateFromBytes\" is renamed so that type inference doesn't fail if the developer\r\n        // passes an untyped lambda as the third parameter. O(n) for memcpy + O(n) for validation.\r\n        // Behavior given invalid input: fixes up invalid sequences on-the-fly.\r\n\r\n        public static Utf8String Create<TState>(int length, TState state, SpanAction<Char8, TState> action) => throw null;\r\n        public static Utf8String CreateFromBytes<TState>(int length, TState state, SpanAction<byte, TState> action) => throw null;\r\n\r\n        // Non-validating factory method. O(n) for memcpy.\r\n        // Developers should exercise caution when calling this API, taking into account such considerations as\r\n        // (a) whether the input came from a trustworthy source,\r\n        // (b) which component the constructed instance will be passed to, and\r\n        // (c) the behavior such component might exhibit if faced with invalid sequences.\r\n        //\r\n        // As an example of such a scenario that requires further scrutiny, consider a forum that allows users to\r\n        // sign up for new accounts and post messages. Forum administrators use a web interface to perform such\r\n        // tasks as deleting abusive accounts, moving messages, and so forth. If a malicious user attempts to sign\r\n        // up with a username that contains an invalid UTF-8 sequence, and if such sequence round-trips through the\r\n        // messages database, the username that appears in the page's HTML (as a string) might be different than the\r\n        // username that actually exists in the database (as an arbitrary byte sequence). One potential consequence\r\n        // of this is that if such user starts posting abusive messages, admins will be powerless to do anything via\r\n        // the web interface since the \"delete account\" API will return \"user does not exist\", instead requiring the\r\n        // IT administrator to go directly to the database and purge the abuser's account.\r\n\r\n        public static Utf8String CreateWithoutValidation<TState>(int length, TState state, SpanAction<Char8, TState> action) => throw null;\r\n        public static Utf8String CreateWithoutValidation<TState>(ReadOnlySpan<byte> Char8) => throw null;\r\n        public static Utf8String CreateFromBytesWithoutValidation<TState>(int length, TState state, SpanAction<byte, TState> action) => throw null;\r\n        public static Utf8String CreateFromBytesWithoutValidation<TState>(ReadOnlySpan<byte> value) => throw null;\r\n\r\n        public bool EndsWith(UnicodeScalar value) => throw null;\r\n        public bool EndsWith(Utf8String value, StringComparison comparisonType) => throw null;\r\n        public bool EndsWith(ReadOnlySpan<Char8> value, StringComparison comparisonType) => throw null;\r\n\r\n        // When transcoding is required, comparison is by ordinal scalar, and invalid subsequences immediately return failure.\r\n        // Example: the UTF-8 string [ C1 80 ] will *never* match any UTF-16 string.\r\n\r\n        public override bool Equals(object value) => throw null;\r\n        public bool Equals(Utf8String value) => throw null;\r\n        public bool Equals(string value) => throw null;\r\n        public static bool Equals(Utf8String a, Utf8String b) => throw null;\r\n        public static bool Equals(Utf8String a, Utf8String b, StringComparison comparisonType) => throw null;\r\n\r\n        public override int GetHashCode() => throw null;\r\n        public int GetHashCode(StringComparison comparisonType) => throw null;\r\n\r\n        // Used for pinning. Typed as 'byte' instead of 'Char8' because the scenario for calling this\r\n        // is p/invoke, and we don't want to require a reinterpret_cast.\r\n\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public ref readonly byte GetPinnableReference() => throw null;\r\n\r\n        public int IndexOf(UnicodeScalar value) => throw null;\r\n        public int IndexOf(UnicodeScalar value, int startIndex) => throw null;\r\n        public int IndexOf(UnicodeScalar value, int startIndex, int count) => throw null;\r\n        public int IndexOf(Utf8String value, StringComparison comparisonType) => throw null;\r\n        public int IndexOf(Utf8String value, int startIndex, StringComparison comparisonType) => throw null;\r\n        public int IndexOf(Utf8String value, int startIndex, int count, StringComparison comparisonType) => throw null;\r\n\r\n        // n.b. String.IndexOfAny takes char[], we take span (to avoid allocations)\r\n        public int IndexOfAny(ReadOnlySpan<UnicodeScalar> value) => throw null;\r\n        public int IndexOfAny(ReadOnlySpan<UnicodeScalar> value, int startIndex) => throw null;\r\n        public int IndexOfAny(ReadOnlySpan<UnicodeScalar> value, int startIndex, int count) => throw null;\r\n\r\n        public Utf8String Insert(int startIndex, Utf8String value) => throw null;\r\n\r\n        public static bool IsNullOrEmpty(Utf8String value) => throw null;\r\n        public static bool IsNullOrWhiteSpace(Utf8String value) => throw null;\r\n\r\n        public static Utf8String Join<T>(UnicodeScalar separator, IEnumerable<T> values) => throw null;\r\n        public static Utf8String Join<T>(UnicodeScalar separator, ReadOnlySpan<T> values) => throw null;\r\n        public static Utf8String Join<T>(Utf8String separator, IEnumerable<T> values) => throw null;\r\n        public static Utf8String Join<T>(Utf8String separator, ReadOnlySpan<T> values) => throw null;\r\n\r\n        public int LastIndexOf(UnicodeScalar value) => throw null;\r\n        public int LastIndexOf(UnicodeScalar value, int startIndex) => throw null;\r\n        public int LastIndexOf(UnicodeScalar value, int startIndex, int count) => throw null;\r\n        public int LastIndexOf(Utf8String value, StringComparison comparisonType) => throw null;\r\n        public int LastIndexOf(Utf8String value, int startIndex, StringComparison comparisonType) => throw null;\r\n        public int LastIndexOf(Utf8String value, int startIndex, int count, StringComparison comparisonType) => throw null;\r\n\r\n        public int LastIndexOfAny(ReadOnlySpan<UnicodeScalar> value) => throw null;\r\n        public int LastIndexOfAny(ReadOnlySpan<UnicodeScalar> value, int startIndex) => throw null;\r\n        public int LastIndexOfAny(ReadOnlySpan<UnicodeScalar> value, int startIndex, int count) => throw null;\r\n\r\n        // There's a risk Normalize / IsNormalized will fall below the cutline due to time constraints, but here's what\r\n        // it would look like if we implemented them.\r\n\r\n        public bool IsNormalized() => throw null;\r\n        public bool IsNormalized(NormalizationForm normalizationForm) => throw null;\r\n        public Utf8String Normalize() => throw null;\r\n        public Utf8String Normalize(NormalizationForm normalizationForm) => throw null;\r\n\r\n        // n.b. Padding takes Char8 instead of UnicodeScalar. This prevents a situation where the amount of padding\r\n        // required isn't wholly divisible by the number of code units in the padding character.\r\n\r\n        public Utf8String PadLeft(int totalWidth) => throw null;\r\n        public Utf8String PadLeft(int totalWidth, Char8 paddingChar) => throw null;\r\n\r\n        public Utf8String PadRight(int totalWidth) => throw null;\r\n        public Utf8String PadRight(int totalWidth, Char8 paddingChar) => throw null;\r\n\r\n        public Utf8String Remove(int startIndex) => throw null;\r\n        public Utf8String Remove(int startIndex, int count) => throw null;\r\n\r\n        public Utf8String Replace(UnicodeScalar oldValue, UnicodeScalar newValue) => throw null;\r\n        public Utf8String Replace(Utf8String oldValue, Utf8String newValue, StringComparison comparisonType) => throw null;\r\n\r\n        // n.b. Utf8String.Split returns its results in an array, just like String.Split. There will be non-allocating\r\n        // Split APIs hanging off of ROM<Char8> / ROS<Char8> and other types for more advanced use cases.\r\n\r\n        public Utf8String[] Split(UnicodeScalar separator) => throw null;\r\n        public Utf8String[] Split(UnicodeScalar separator, int count) => throw null;\r\n        public Utf8String[] Split(UnicodeScalar separator, int count, StringSplitOptions options) => throw null;\r\n        public Utf8String[] Split(ReadOnlySpan<UnicodeScalar> separator) => throw null;\r\n        public Utf8String[] Split(ReadOnlySpan<UnicodeScalar> separator, int count) => throw null;\r\n        public Utf8String[] Split(ReadOnlySpan<UnicodeScalar> separator, int count, StringSplitOptions options) => throw null;\r\n        public Utf8String[] Split(Utf8String separator) => throw null;\r\n        public Utf8String[] Split(Utf8String separator, int count) => throw null;\r\n        public Utf8String[] Split(Utf8String separator, int count, StringSplitOptions options) => throw null;\r\n\r\n        public bool StartsWith(UnicodeScalar value) => throw null;\r\n        public bool StartsWith(Utf8String value, StringComparison comparisonType) => throw null;\r\n\r\n        // The natural way to use Substring is first to call IndexOf(...), then to substring on the index\r\n        // that is returned. Since the parameter passed to IndexOf is generally a literal or some other value\r\n        // under the developer's control, this means that the natural way of calling Substring shouldn't\r\n        // inadvertently lead to splitting the string in the middle of a UTF-8 sequence. (This same argument\r\n        // holds for the String class.)\r\n        //\r\n        // If the developer wants to go out of their way to substring a valid string in such a way that the\r\n        // result is invalid UTF-8, we won't stop them.\r\n\r\n        public Utf8String Substring(int startIndex) => throw null;\r\n        public Utf8String Substring(int startIndex, int length) => throw null;\r\n\r\n        // No ToLower() method - method name contains 'invariant' or culture must be specified\r\n        public Utf8String ToLowerInvariant() => throw null;\r\n        public Utf8String ToLower(CultureInfo culture) => throw null;\r\n\r\n        public override string ToString() => throw null;\r\n        public string ToString(IFormatProvider provider) => throw null;\r\n\r\n        public Utf8String ToUpperInvariant() => throw null;\r\n        public Utf8String ToUpper(CultureInfo culture) => throw null;\r\n\r\n        public Utf8String Trim() => throw null;\r\n        public Utf8String Trim(UnicodeScalar trimScalar) => throw null;\r\n        public Utf8String Trim(ReadOnlySpan<UnicodeScalar> trimScalars) => throw null;\r\n\r\n        public Utf8String TrimEnd() => throw null;\r\n        public Utf8String TrimEnd(UnicodeScalar trimScalar) => throw null;\r\n        public Utf8String TrimEnd(ReadOnlySpan<UnicodeScalar> trimScalars) => throw null;\r\n\r\n        public Utf8String TrimStart() => throw null;\r\n        public Utf8String TrimStart(UnicodeScalar trimScalar) => throw null;\r\n        public Utf8String TrimStart(ReadOnlySpan<UnicodeScalar> trimScalars) => throw null;\r\n\r\n        TypeCode IConvertible.GetTypeCode() => throw null;\r\n        bool IConvertible.ToBoolean(IFormatProvider provider) => throw null;\r\n        byte IConvertible.ToByte(IFormatProvider provider) => throw null;\r\n        char IConvertible.ToChar(IFormatProvider provider) => throw null;\r\n        DateTime IConvertible.ToDateTime(IFormatProvider provider) => throw null;\r\n        decimal IConvertible.ToDecimal(IFormatProvider provider) => throw null;\r\n        double IConvertible.ToDouble(IFormatProvider provider) => throw null;\r\n        short IConvertible.ToInt16(IFormatProvider provider) => throw null;\r\n        int IConvertible.ToInt32(IFormatProvider provider) => throw null;\r\n        long IConvertible.ToInt64(IFormatProvider provider) => throw null;\r\n        sbyte IConvertible.ToSByte(IFormatProvider provider) => throw null;\r\n        float IConvertible.ToSingle(IFormatProvider provider) => throw null;\r\n        object IConvertible.ToType(Type conversionType, IFormatProvider provider) => throw null;\r\n        ushort IConvertible.ToUInt16(IFormatProvider provider) => throw null;\r\n        uint IConvertible.ToUInt32(IFormatProvider provider) => throw null;\r\n        ulong IConvertible.ToUInt64(IFormatProvider provider) => throw null;\r\n\r\n        public readonly struct ScalarSequence : IEnumerable<UnicodeScalar>\r\n        {\r\n            public ScalarEnumerator GetEnumerator() => throw null;\r\n\r\n            IEnumerator<UnicodeScalar> IEnumerable<UnicodeScalar>.GetEnumerator() => throw null;\r\n            IEnumerator IEnumerable.GetEnumerator() => throw null;\r\n        }\r\n\r\n        // If the enumerator sees an invalid UTF-8 subsequence, it returns U+FFFD\r\n        // and moves on to the next subsequence. There are separate APIs to distinguish\r\n        // between \"U+FFFD due to invalid data\" and \"the string really contained U+FFFD.\"\r\n        public struct ScalarEnumerator : IEnumerator<UnicodeScalar>\r\n        {\r\n            public UnicodeScalar Current => throw null;\r\n            public void Dispose() => throw null;\r\n            public bool MoveNext() => throw null;\r\n            public void Reset() => throw null;\r\n\r\n            object IEnumerator.Current => throw null;\r\n        }\r\n    }\r\n}\r\n\r\nnamespace System.Text\r\n{\r\n    // Represents a Unicode scalar value ([ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive).\r\n    // This type's ctors are guaranteed to validate the input, and consumers can call the APIs assuming\r\n    // that the input is well-formed.\r\n    //\r\n    // This type's ctors validate, but that shouldn't be a terrible imposition because very few components\r\n    // are going to need to create instances of this type. UnicodeScalar instances will almost always be\r\n    // created as a result of enumeration over a UTF-8 or UTF-16 sequence, or instances will be created\r\n    // by the compiler from known good constants in source. In both cases validation can be elided, which\r\n    // means that there's *no runtime check at all* - not in the ctors nor in the instance methods hanging\r\n    // off this type. This gives improved performance over APIs which require the consumer to call an\r\n    // IsValid method before operating on instances of this type, and it means that we can get away without\r\n    // potentially expensive branching logic in many of our property getters.\r\n    public readonly struct UnicodeScalar : IComparable<UnicodeScalar>, IEquatable<UnicodeScalar>\r\n    {\r\n        public UnicodeScalar(byte b) => throw null; // from UTF-8 code unit (must be ASCII)\r\n        public UnicodeScalar(Char8 ch) => throw null; // from UTF-8 code unit (must be ASCII)\r\n        public UnicodeScalar(char ch) => throw null; // from UTF-16 code unit (must not be surrogate)\r\n        public UnicodeScalar(int scalarValue) => throw null;\r\n        public UnicodeScalar(uint scalarValue) => throw null;\r\n        public static bool operator ==(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public static bool operator !=(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public static bool operator <(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public static bool operator <=(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public static bool operator >(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public static bool operator >=(UnicodeScalar a, UnicodeScalar b) => throw null;\r\n        public bool IsAscii { get => throw null; } // = (Value < 0x80)\r\n        public bool IsBmp { get => throw null; } // = (Value < 0x10000)\r\n        public int Plane { get => throw null; } // = (Value >> 16)\r\n        public static UnicodeScalar ReplacementChar { get => throw null; } // = U+FFFD\r\n        public int Utf16SequenceLength { get => throw null; } // = 1..2\r\n        public int Utf8SequenceLength { get => throw null; } // = 1..4\r\n        public uint Value { get => throw null; }\r\n        public int CompareTo(UnicodeScalar other) => throw null;\r\n\r\n        // Allows constructing a Unicode scalar value from an arbitrary 32-bit integer without\r\n        // validation. It is the caller's responsibility to have performed manual validation\r\n        // before calling this method. If a UnicodeScalar instance is forcibly constructed\r\n        // from invalid input, the APIs on this type have undefined behavior, potentially including\r\n        // introducing a security hole in the consuming application.\r\n        //\r\n        // An example of a security hole resulting from an invalid UnicodeScalar value:\r\n        //\r\n        // public int GetUtf8Marvin32HashCode(UnicodeScalar s) {\r\n        //   Span<Char8> buffer = stackalloc Char8[s.Utf8SequenceLength];\r\n        //   s.ToUtf8(buffer);\r\n        //   return Marvin32.ComputeHash(buffer.AsBytes());\r\n        // }\r\n\r\n        [EditorBrowsable(EditorBrowsableState.Never)]\r\n        public static UnicodeScalar DangerousCreateWithoutValdation(uint scalarValue) => throw null;\r\n\r\n        public override bool Equals(object obj) => throw null;\r\n        public bool Equals(UnicodeScalar other) => throw null;\r\n        public override int GetHashCode() => throw null;\r\n\r\n        // Determines whether an arbitrary integer is a valid Unicode scalar value.\r\n        // Not an instance method becuase we always assume 'this' is valid.\r\n        public static bool IsValid(int value) => throw null;\r\n\r\n        public override string ToString() => throw null;\r\n        public int ToUtf16(Span<char> output) => throw null;\r\n        public int ToUtf8(Span<Char8> output) => throw null;\r\n        public Utf8String ToUtf8String() => throw null;\r\n        public static bool TryCreate(int value, out UnicodeScalar result) => throw null;\r\n        public static bool TryCreate(uint value, out UnicodeScalar result) => throw null;\r\n\r\n        // These are analogs of APIs on System.Char\r\n\r\n        public static double GetNumericValue(UnicodeScalar s) => throw null;\r\n        public static UnicodeCategory GetUnicodeCategory(UnicodeScalar s) => throw null;\r\n        public static bool IsControl(UnicodeScalar s) => throw null;\r\n        public static bool IsDigit(UnicodeScalar s) => throw null;\r\n        public static bool IsLetter(UnicodeScalar s) => throw null;\r\n        public static bool IsLetterOrDigit(UnicodeScalar s) => throw null;\r\n        public static bool IsLower(UnicodeScalar s) => throw null;\r\n        public static bool IsNumber(UnicodeScalar s) => throw null;\r\n        public static bool IsPunctuation(UnicodeScalar s) => throw null;\r\n        public static bool IsSeparator(UnicodeScalar s) => throw null;\r\n        public static bool IsSymbol(UnicodeScalar s) => throw null;\r\n        public static bool IsUpper(UnicodeScalar s) => throw null;\r\n        public static bool IsWhiteSpace(UnicodeScalar s) => throw null;\r\n        public static char ToLower(UnicodeScalar s, CultureInfo culture) => throw null;\r\n        public static char ToLowerInvariant(UnicodeScalar s) => throw null;\r\n        public static char ToUpper(UnicodeScalar s, CultureInfo culture) => throw null;\r\n        public static char ToUpperInvariant(UnicodeScalar s) => throw null;\r\n    }\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7843321316","Type":"IssuesEvent","CreatedAt":"2018-06-19T05:16:36","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27975","RelatedDescription":"Opened issue \"Nuget package .net.compilers 5x slower than built in compiler\" (#27975) at dotnet/roslyn","RelatedBody":"We have a largish solution - 180+ projects, 300k lines.\n\nDue to issues with our TFS build server (still using TFS 2013) we have referenced the .NET Compiler package in all C# projects (currently V2.8.2).\n\nOn a new desktop machine (Intel 8700K) the solution initially took 2 min 30 secs to rebuild all.\n\nThen something changed - I have been unable to discover what, or replicate this on other machines but the build started to take 1 minute.  I thought it may be due to ngen'ing csc.exe in the compiler tools folder but this doesn't help on other machines.\n\nAfter removing the .NET compiler package from all projects the build now takes 30 seconds.  \nI've replicated this on an older machine (Intel 2700K), where the build changed from 5+ minutes to 57 seconds.\n\n1) why is the compiler package so much (5x) slower than the same thing built into VS?\n\n2) is there currently any way through configuration or msbuild step to only run the .NET compiler package on the build server?\nV2 of Microsoft.CodeDom.Providers.DotNetCompilerPlatform has configuration to specify which compiler to use.  Can we have the same thin for the Microsof.NET.Compilers package?\n\n3) Any ideas how/why I'm getting a faster build time while still referencing the package (e.g the 1 minute time)?\n\n4) Should I post these question on the Roslyn forums?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/273289/nuget-package-netcompilers-5x-slower-than-built-in.html\nVSTS ticketId: 633452_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n\nLee, Philip solved on 6/16/2018, 04:30 PM (2 days ago), 0 votes: \n<p>A solution for me, and answer to point 2), is to set the environment variable 'UseSharedCompilation' to 'true' on my dev machine. This means the VS compiler is used for building locally, but I can still use the Nuget package on the build server.</p>\n<p>5x difference in speed is surprising.</p> \n\nAndy Gocke [MSFT] on 6/18/2018, 10:16 PM (35 sec ago): \n<p>Sorry you ran into this -- I can see why this would be surprising. Note that <code>UseSharedCompilation</code> is affecting the NuGet package here, so what's actually happening is you're using the package, but with the performance improvement from the compiler server.</p>\n<p>We've historically resisted turning this on by default exactly because of the ASP.NET package you referenced. By using the compiler server, the bin/ directory will be locked, since the ASP.NET process will launch the compiler server. Now that ASP.NET has more fine-grained control over the compiler usage, I'll transfer this bug over to Github to track us enabling UseSharedCompilation by default in our packages.</p> \n"},{"Id":"7842976817","Type":"IssuesEvent","CreatedAt":"2018-06-19T02:51:01","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27974","RelatedDescription":"Opened issue \"Document the behavior specification and test plan for the Code Cleanup \"gold bar\"\" (#27974) at dotnet/roslyn","RelatedBody":"This new feature should have a clear behavior specification and test plan. Since we are changing the default behavior of a long-standing feature (Format Document), we want to make sure users are aware of the change and how to restore the original behavior if they choose to do so."},{"Id":"7842924904","Type":"PullRequestEvent","CreatedAt":"2018-06-19T02:31:14","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27898","RelatedDescription":"Merged pull request \"Cleaner test accessor\" (#27898) at dotnet/roslyn","RelatedBody":"This pull request contains the production code cleanup change extracted from #27838.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7842834746","Type":"PullRequestEvent","CreatedAt":"2018-06-19T01:58:56","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27973","RelatedDescription":"Opened pull request \"Stop calling IVsHerarchy.ParseCanonicalName if we don't need it\" (#27973) at dotnet/roslyn","RelatedBody":"We were calling IVsHierarchy.ParseCanonicalName to get the item ID of a file, to then turn around and use that to get the folder names. In some cases, we already had the folder names so this was just silly.\r\n\r\nNote: I update a compatibility overload for TypeScript here. They had since moved off of the compatibility overload, so updating it and repurposing it is safe to do.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>"},{"Id":"7842563604","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:17:45","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27972","RelatedDescription":"Opened issue \"Escape scope errors are not consistent for different parameter types\" (#27972) at dotnet/roslyn","RelatedBody":"Escape scope errors are not consistent for different parameter types. Example:\r\n\r\n```csharp\r\nclass C\r\n{\r\n    void M(ref int arg)\r\n    {\r\n        int local = default;\r\n        arg = ref local;   // error CS8374: Cannot ref-assign 'local' to 'arg' because 'local' has a narrower escape scope than 'arg'.\r\n\r\n    }\r\n    \r\n    void M(ref string arg)\r\n    {\r\n        string local = default;\r\n        arg = ref local;   // error CS8374: Cannot ref-assign 'local' to 'arg' because 'local' has a narrower escape scope than 'arg'.\r\n    }\r\n    \r\n    void M(ref S arg)\r\n    {\r\n        S local = default;\r\n        arg = ref local;   // No errors\r\n    }\r\n}\r\n\r\nref struct S { }\r\n```"},{"Id":"7842521572","Type":"IssuesEvent","CreatedAt":"2018-06-19T00:01:49","Actor":"gundermanc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/27971","RelatedDescription":"Opened issue \"Suggestion: 'cycle format' command\" (#27971) at dotnet/roslyn","RelatedBody":"One or more command(s) that toggle expressions, lines, and parameters between all on one line and various styles of wrapping, initialization, and whitespace... I'm constantly finding myself wrapping long lines by hand, adding signature items, converting methods from expression-bodied, to braced, and properties from auto to explicit, all of which, require by-hand tweaking.\r\n\r\nThink of this as analgous _clipboard ring_ but for common per-member formatting styles that frequently are used interchangeably. As opposed to the lightbulb, this can freely toggle between them irrespective of _editorconfig_ settings so long as we keep the number of stops small (3-5) and it can support whitespace changes, which are not currently supported by lightbulb, and don't fit its 'fix/refactor' metaphor well.\r\n\r\nSome possible method definition, method call, and property, and expression formats:\r\n\r\n*Single line:*\r\n  - `void Foo(int bar, string baz, float bam)`\r\n  - `this.Foo(3, \"Four\", 5.0);`\r\n  - `int X { get; private set; }`\r\n\r\nUnwraps and puts everything on one line.\r\n\r\n*Wrapped when too long:*\r\n\r\n```\r\nvoid Foo(int bar, string baz,\r\n       float bam)\r\n```\r\n```\r\nthis.Foo(3, \"Four\",\r\n        5.0)\r\n```\r\n\r\n*On each line:*\r\n```\r\nvoid Foo(\r\n    int bar,\r\n    string baz,\r\n    float bam)\r\n```\r\n```\r\nthis.Foo(\r\n    3,\r\n    \"Four\",\r\n    5.0)\r\n```\r\n```\r\nint X\r\n{\r\n    get;\r\n    private set;\r\n}\r\n```\r\n\r\n@kuhlenh FYI, ported from IM.\r\n"},{"Id":"7842488773","Type":"PullRequestEvent","CreatedAt":"2018-06-18T23:49:53","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/27970","RelatedDescription":"Opened pull request \"add publish data for feature branch sharwell-async-package\" (#27970) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7842563655","Type":"PullRequestEvent","CreatedAt":"2018-06-19T00:17:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5960","RelatedDescription":"Opened pull request \"PInvoke calli\" (#5960) at dotnet/corert","RelatedBody":"- Enable JIT to replace PInvoke calli with a regular call to a stub\r\n- Implement plumbing required to generate the calli stub\r\n\r\nImplement PInvoke calli by allowing\r\n\r\nContributes to #5587"},{"Id":"7842309183","Type":"PullRequestEvent","CreatedAt":"2018-06-18T22:50:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5959","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5959) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7842041258","Type":"PullRequestEvent","CreatedAt":"2018-06-18T21:40:47","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5959","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5959) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7841739205","Type":"IssuesEvent","CreatedAt":"2018-06-18T20:38:01","Actor":"JaggerJo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5956","RelatedDescription":"Closed issue \"OutOfMemoryException when compiling UWP App with .Net Native\" (#5956) at dotnet/corert","RelatedBody":"### Problem:\r\nI am trying to compile a UWP Project using the .Net Native Tool-chain (Because its required for publishing in the Windows Store).\r\n\r\n### What I've tried:\r\n- changing the architecture x86 | x64 | ARM\r\n- removing \"<Assembly Name=\"*Application*\" Dynamic=\"Required All\" />\" (results in run time crashes due to missing type information)\r\n- always compile with x64 tools\r\n- add explicit reference to .net native\r\n\r\n### Project dependency's:\r\nVoyonic.Client\r\n![image](https://user-images.githubusercontent.com/13090415/41533967-fbb78932-72fc-11e8-986d-4dee90f17274.png)\r\n\r\nVoyonic.Client.Lib\r\n![image](https://user-images.githubusercontent.com/13090415/41534010-389936fc-72fd-11e8-8db1-60f5b6c89435.png)\r\n\r\nVoyonic.Client.Models\r\n![image](https://user-images.githubusercontent.com/13090415/41534047-64554894-72fd-11e8-9cb0-65116fb5634f.png)\r\n\r\nVoyonic.Shared.CommService\r\n![image](https://user-images.githubusercontent.com/13090415/41534112-9ff3a24c-72fd-11e8-9afb-e760d8e26599.png)\r\n\r\nVoyonic.Shared\r\n![image](https://user-images.githubusercontent.com/13090415/41534090-8618604c-72fd-11e8-981d-0c67da23e7ad.png)\r\n\r\n### Versions:\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.7.3\r\nVisualStudio.15.Release/15.7.3+27703.2026\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2026\r\nDotNet Core 2.1.300\r\n"},{"Id":"7841261865","Type":"PullRequestEvent","CreatedAt":"2018-06-18T19:00:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5950","RelatedDescription":"Merged pull request \"Delete PinnableBufferCache\" (#5950) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/18360 to CoreRT and reduce diffs in Overlapped."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7842870343","Type":"IssuesEvent","CreatedAt":"2018-06-19T02:11:12","Actor":"mikeharder","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2344","RelatedDescription":"Opened issue \"dotnet build -r runtime --no-restore fails in 2.1.301\" (#2344) at dotnet/sdk","RelatedBody":"# Repro Steps\r\n1. `dotnet new console --no-restore`\r\n2. `dotnet restore -r win-x64`\r\n3. `dotnet build -r win-x64 --no-restore`\r\n\r\nThese steps work as expected in CLI 2.1.300.  However, in CLI 2.1.301 the build step fails:\r\n\r\n```\r\nC:\\Temp\\foo\\foo.csproj : error : The project was restored using Microsoft.NETCore.App version 2.1.0, but with current settings,\r\nversion 2.1.1 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent\r\noperations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish\r\nbut not during restore.\r\n```\r\n\r\nThe error message is misleading, since the `RuntimeIdentifier (-r)` **is** set during both restore and build.\r\n\r\nA workaround is to remove the `--no-restore` from the `dotnet build` command:\r\n\r\n```\r\n  Restoring packages for C:\\Temp\\foo\\foo.csproj...\r\n  Installing runtime.win-x64.Microsoft.NETCore.DotNetAppHost 2.1.1.\r\n  Installing runtime.win-x64.Microsoft.NETCore.DotNetHostResolver 2.1.1.\r\n  Installing runtime.win-x64.Microsoft.NETCore.DotNetHostPolicy 2.1.1.\r\n  Installing runtime.win-x64.Microsoft.NETCore.App 2.1.1.\r\n  Generating MSBuild file C:\\Temp\\foo\\obj\\foo.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Temp\\foo\\obj\\foo.csproj.nuget.g.targets.\r\n  Restore completed in 24.89 sec for C:\\Temp\\foo\\foo.csproj.\r\n  foo -> C:\\Temp\\foo\\bin\\Debug\\netcoreapp2.1\\win-x64\\foo.dll\r\n```\r\n\r\nIs this a bug or by design?  Is it expected that `dotnet build -r runtime --no-restore` should always work after `dotnet restore -r runtime`?\r\n\r\nCC: @JunTaoLuo "},{"Id":"7842314555","Type":"PullRequestEvent","CreatedAt":"2018-06-18T22:52:31","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2311","RelatedDescription":"Closed pull request \"Merge release/2.1.4xx to master\" (#2311) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7842005808","Type":"IssuesEvent","CreatedAt":"2018-06-18T21:32:53","Actor":"jceddy","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2338","RelatedDescription":"Closed issue \"Since installing SDK 2.1.3, getting GenerateDepsFile error\" (#2338) at dotnet/sdk","RelatedBody":"Since I installed the 2.1.3 SDK, I have started getting this error when building a solution that previously built correctly:\r\n\r\n> Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\n> Error\tMSB4018\tThe \"GenerateDepsFile\" task failed unexpectedly.\r\n> System.ArgumentException: Can not add property Company.Product.Server.Core/3.1.2.0 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.\r\n>    at Newtonsoft.Json.Linq.JObject.ValidateToken(JToken o, JToken existing)\r\n>    at Newtonsoft.Json.Linq.JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck)\r\n>    at Newtonsoft.Json.Linq.JContainer.Add(Object content)\r\n>    at Newtonsoft.Json.Linq.JObject..ctor(Object content)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTarget(IReadOnlyList`1 libraries)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargets(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context)\r\n>    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context, Stream stream)\r\n>    at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore()\r\n>    at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tOATI.webVision.Server.Core\tC:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\t128\t\r\n\r\nI've looked around the web and haven't been able to find any kind of solution. Is this a known issue?"},{"Id":"7841751603","Type":"IssuesEvent","CreatedAt":"2018-06-18T20:40:26","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1905","RelatedDescription":"Closed issue \"Non-selfcontained RID-specific app should copy host executable to build output\" (#1905) at dotnet/sdk","RelatedBody":"TL;DR\r\nCombination of `RuntimeIdentifier` + `SelfContained=false` doesn't work well for development work (`dotnet run`, visual studio F5).\r\n```xml\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifier>win-x86</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n```\r\n\r\nScenario / Repro steps:\r\n\r\n* Create  a console app\r\n* Add native 32-bit dlls to PInvoke into\r\n* Realize you now need to make sure you run 32bit only and are locked into a RID\r\n  * add `<RuntimeIdentifier>win-x86</RuntimeIdentifier>` to the csproj\r\n* `dotnet run` works just fine now since there is a 32 bit host executable copied to the output directory which resolves the 32bit runtime. Visual Studio also runs the app just fine.\r\n* Publish once and realize you don't need to publish self-contained. Or have problems using `dotnet publish --self-contained` because it is passed as a global parameter to all reference projects and some may error out (https://github.com/dotnet/sdk/issues/1834)\r\n  * Put `<SelfContained>false</SelfContained>` into the csproj file.\r\n* `dotnet run` and Visual Studio run no longer work because it falls back to calling `dotnet the.dll` which fails to load 32-bit (native) assemblies.\r\n\r\nCan the generation of the native host be turned on even though `SelfContained` is false for build output only?\r\n\r\nThere may be some additional advantages in also copying this host without the self-contained framework for publish - (https://github.com/dotnet/cli/issues/6237)\r\n\r\nThe advantage of this host is that it launches with the right bitness and there is no need to put the 32bit `dotnet.exe` on the `PATH` or use a 32bit SDK."},{"Id":"7840910067","Type":"IssuesEvent","CreatedAt":"2018-06-18T17:52:59","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2343","RelatedDescription":"Closed issue \"Target .Netcore 2.1 on Mac\" (#2343) at dotnet/sdk","RelatedBody":"How do I target .Net Core 2.1 on a Mac? When I change the .csproj content to target netstandard2.1 I get the following error\r\n\r\n/`usr/local/share/dotnet/sdk/2.1.300/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(150,5): error : The current .NET SDKdoes not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1. [/Users/user/Documents/Projects/vsCode/DotNet/AlexaDemo/data/data.csproj]`\r\n\r\nDotnet --info returns\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```"},{"Id":"7840876383","Type":"IssuesEvent","CreatedAt":"2018-06-18T17:46:31","Actor":"habsfanongit","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2343","RelatedDescription":"Opened issue \"Target .Netcore 2.1 on Mac\" (#2343) at dotnet/sdk","RelatedBody":"How do I target .Net Core 2.1 on a Mac? When I change the .csproj content to target netstandard2.1 I get the following error\r\n\r\n/`usr/local/share/dotnet/sdk/2.1.300/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(150,5): error : The current .NET SDKdoes not support targeting .NET Standard 2.1. Either target .NET Standard 2.0 or lower, or use a version of the .NET SDK that supports .NET Standard 2.1. [/Users/user/Documents/Projects/vsCode/DotNet/AlexaDemo/data/data.csproj]`\r\n\r\nDotnet --info returns\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```"},{"Id":"7838518979","Type":"IssuesEvent","CreatedAt":"2018-06-18T10:31:18","Actor":"cjlapao","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2341","RelatedDescription":"Closed issue \"Unable to run dotnet applications after windows 10 update\" (#2341) at dotnet/sdk","RelatedBody":"After a weekend update i am now unable to run any of my dotnet core 2 web applications on the development machine.\r\n\r\nWhen trying to run i get the following error.\r\n\r\nUsing launch settings from F:\\Projects\\Api's\\EmailMarketing\\EmailsMarketing\\Properties\\launchSettings.json...\r\nError:\r\n  An assembly specified in the application dependencies manifest (Microsoft.NETCore.App.deps.json) was not found:\r\n    package: 'runtime.win-x64.Microsoft.NETCore.App', version: '2.0.7'\r\n    path: 'runtimes/win-x64/lib/netcoreapp2.0/System.Reflection.Emit.Lightweight.dll'\r\n\r\nI've checked and I have even reinstalled the new SDK and the runtime."},{"Id":"7838475495","Type":"IssuesEvent","CreatedAt":"2018-06-18T10:21:33","Actor":"benPearce1","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2342","RelatedDescription":"Opened issue \"PackageDefinition metadata seems to be missing\" (#2342) at dotnet/sdk","RelatedBody":"Before upgrading to DotNet Core 2.1.3, the following minimal example worked as expected:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FSharp.Compiler.Tools\" Version=\"4.0.0.1\"/>\r\n  </ItemGroup>\r\n <Target Name=\"GetToolFiles\">\r\n    <CreateItem Include=\"@(PackageDefinitions)\" Condition=\"'%(Name)' == 'FSharp.Compiler.Tools'\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"FSharpCompilerToolsRef\"/>\r\n    </CreateItem>\r\n    <PropertyGroup>\r\n      <FSharpCompilerTools>@(FSharpCompilerToolsRef->'%(ResolvedPath)')/tools/*.*</FSharpCompilerTools>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n      <FSharpFiles Include=\"$(FSharpCompilerTools)\"/>\r\n    </ItemGroup>\r\n  </Target>\r\n  <Target Name=\"CopyToolsAfterBuild\" AfterTargets=\"Build\" DependsOnTargets=\"GetToolFiles\">\r\n    <Copy SourceFiles=\"@(FSharpFiles)\" DestinationFolder=\"$(OutDir)/FSharp/\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe expected output would be the contents of the `Tools` directory under the `FSharp.Compiler.Tools` would be copied to `Debug/netcoreapp2.0/FSharp`. \r\nSince upgrading to `2.1.3`, the `%(ResolvedPath)` metadata attribute is not being populated with a value, and the result would copy files located in a tools folder off the root of the current drive if one exists. \r\nThe following lines are written to a detailed output:\r\n`Copying file from \"/tools\\file1.txt\" to \"bin\\Debug\\netcoreapp2.0\\/FSharp/file1.txt\".`\r\n\r\nModifiying the SDK version using either `global.json` or uninstalling the most recent versions of DotnetCore (2.1.300), results in the expected files being copied from the source package reference.\r\n`Copying file from \"C:\\Users\\username\\.nuget\\packages\\fsharp.compiler.tools\\4.0.0.1\\tools\\fsc.exe\" to \"bin\\Debug\\netcoreapp2.0\\\\FSharp\\fsc.exe\". `\r\n\r\nI have tested this issue using SDK version `2.1.300` and `2.1.400` and get the same missing metadata, any earlier version seems set the `ResolvedPath` value to the correct value for the `PackageReference`"},{"Id":"7838156520","Type":"IssuesEvent","CreatedAt":"2018-06-18T09:15:42","Actor":"cjlapao","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2341","RelatedDescription":"Opened issue \"Unable to run dotnet applications after windows 10 update\" (#2341) at dotnet/sdk","RelatedBody":"After a weekend update i am now unable to run any of my dotnet core 2 web applications on the development machine.\r\n\r\nWhen trying to run i get the following error.\r\n\r\nUsing launch settings from F:\\Projects\\Api's\\EmailMarketing\\EmailsMarketing\\Properties\\launchSettings.json...\r\nError:\r\n  An assembly specified in the application dependencies manifest (Microsoft.NETCore.App.deps.json) was not found:\r\n    package: 'runtime.win-x64.Microsoft.NETCore.App', version: '2.0.7'\r\n    path: 'runtimes/win-x64/lib/netcoreapp2.0/System.Reflection.Emit.Lightweight.dll'\r\n\r\nI've checked and I have even reinstalled the new SDK and the runtime."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1008787534451638272","CreatedAt":"2018-06-18T19:04:25+00:00","UserScreenname":"dotnet","Text":"Staying up-to-date with .NET Container Images https://t.co/09vnrG5uqh /cc @aspnet @Docker @DockerCon","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":65,"RawContent":null},{"Id":"1008746685697150976","CreatedAt":"2018-06-18T16:22:06+00:00","UserScreenname":"dotnet","Text":"Building distributed applications with Orleans https://t.co/GgWRQHcdPP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":58,"FavoriteCount":20,"RawContent":null},{"Id":"1007054749512814592","CreatedAt":"2018-06-14T00:18:57+00:00","UserScreenname":"dotnet","Text":"Using .NET and Docker Together – DockerCon 2018 Update https://t.co/ZYju7lEGqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":146,"FavoriteCount":77,"RawContent":null},{"Id":"1007012327353454594","CreatedAt":"2018-06-13T21:30:22+00:00","UserScreenname":"dotnet","Text":"Join @csharpfritz tomorrow to learn how to use @AppInsights with your #ASP.NET Core project. https://t.co/pSofjdde2Y","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"1005426264029753345","CreatedAt":"2018-06-09T12:27:55+00:00","UserScreenname":"dotnet","Text":"Tune in today at 10a ET / 7a PT / 14:00 UTC / 8p IST and learn about global tools along with Jeff. https://t.co/hqxNjfqPMq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1005082168442449920","CreatedAt":"2018-06-08T13:40:37+00:00","UserScreenname":"dotnet","Text":"Tune in with Jeff as he works through the tutorials to learn F#.  Ask questions, and learn along with him https://t.co/rntL0szWYX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-06-19T05:30:33.978083Z","RunDurationInMilliseconds":8366}