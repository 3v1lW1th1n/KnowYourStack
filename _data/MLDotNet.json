{"Data":{"GitHub":{"Issues":[{"Id":"398506488","IsPullRequest":true,"CreatedAt":"2019-01-12T01:25:05","Actor":"wschin","Number":"2135","RawContent":null,"Title":"Add a test to make sure example pipeline can run","State":"open","Body":"An [example](https://github.com/dotnet/machinelearning-samples/blob/16acc2f55880808bd34f3465e3eec4571565cb89/samples/csharp/getting-started/MatrixFactorization_MovieRecommendation/MovieRecommendation/Program.cs#L48) built with 0.7 doesn't work anymore because we reorder a function's arguments. Therefore, I'd like add a test for preventing it from happening again.","Url":"https://github.com/dotnet/machinelearning/pull/2135","RelatedDescription":"Open PR \"Add a test to make sure example pipeline can run\" (#2135)"},{"Id":"398491210","IsPullRequest":false,"CreatedAt":"2019-01-11T23:40:25","Actor":"CESARDELATORRE","Number":"2134","RawContent":null,"Title":"Support for \"Multi target regression models\" (MTR)","State":"open","Body":"This feature request started from a particular customer feedback (see feedback at the end of the comment).\r\n\r\nContext/explanation:\r\n\r\nMost Machine Learning models targeting a regression problem usually support a single target variable to predict, which for the case of a regression is a numeric value.\r\n\r\nHowever, other machine learning frameworks also provide \"Multi target regression models\" (MTR) like explained in the post link below:\r\n\r\nhttps://towardsdatascience.com/regression-models-with-multiple-target-variables-8baa75aacd \r\n\r\nHowever, ML.NET currently doesn't have a built-in multi-output regression learner/trainer.\r\n\r\nCurrently, by just using ML.NET, you need to use a different trained model per each target variable/prediction. If you want to predict 5 different target or dependent variables , you'd need to create 5 different models for that, instead of a single model predicting 5 target variables. \r\n\r\nFEATURE:\r\n\r\nThe implementation of this feature would allow ML.NET to support \"Multi target regression models\" (MTR), built-in in ML.NET without needing external frameworks like TensorFlow.\r\n\r\n--------------------------------------------------------------------------------------------------------\r\nCUSTOMER FEEDBACK:\r\n--------------------------------------------------------------------------------------------------------\r\nta.speot.is\r\nHi, thanks for improving ML.NET. I’ve spent a little bit of time with it and it’s nice to have a first-class .NET API for Machine Learning.\r\n\r\nRight now I’m using ML.NET very much like described in “Tutorial: Predict New York taxi fares using a regression learner with ML.NET” but I’m wondering how to build on it. Presently I’m predicting one attribute (in the tutorial’s case: the taxi fare) but I have more complicated scenarios I want to predict that involve multiple attributes (using the tutorial’s domain it would be predicting, say, taxi fare AND a surge charging multiple e.g. 1.0x, 1.5x).\r\n\r\nTrying to make “Score” an array of floats didn’t work (the glossary on MSDN says regression is “the output is a real value, for example, double” i.e. one value so that it didn’t work was to be expected).\r\n\r\n**Obviously I could train 10 models for the 10 attributes I want to predict but I feel like there’s a better way.** \r\n\r\nIf anybody has any thoughts I’d appreciate any suggestions!\r\n\r\n--------------------------------------------------------------------------------------------------------\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2134","RelatedDescription":"Open issue \"Support for \"Multi target regression models\" (MTR)\" (#2134)"},{"Id":"398485238","IsPullRequest":false,"CreatedAt":"2019-01-11T23:12:10","Actor":"sfilipi","Number":"2133","RawContent":null,"Title":"Command-line oriented arguments, that have more suitable alternatives for the API should be made internal","State":"open","Body":"In the arguments classes there are several arguments that get translated to the same parameter for the estimators/transforms. \r\n\r\nOne of the variant is  a convenience for the command line version of ML.Net. \r\n\r\nI think those can be made internal, and kept away from the user for v1. \r\n\r\nExample:\r\n\r\n[ValueToKeyMappingTransformer.ArgumentsBase](https://github.com/dotnet/machinelearning/blob/312f9e4c71953bee701ea2a63be3cb4d2d276d20/src/Microsoft.ML.Data/Transforms/ValueToKeyMappingTransformer.cs#L53)\r\n\r\n```csharp\r\npublic abstract class ArgumentsBase : TransformInputBase\r\n{\r\n     [Argument(ArgumentType.AtMostOnce, HelpText = \"Maximum number of terms to keep per column when auto-training\", ShortName = \"max\", SortOrder = 5)]\r\n      public int MaxNumTerms = ValueToKeyMappingEstimator.Defaults.MaxNumTerms;\r\n\r\n      [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n      public string Terms;\r\n\r\n      [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n      public string[] Term;\r\n```\r\n\r\nI don't think our API users should see the first \r\n\r\n`public string Terms`","Url":"https://github.com/dotnet/machinelearning/issues/2133","RelatedDescription":"Open issue \"Command-line oriented arguments, that have more suitable alternatives for the API should be made internal\" (#2133)"},{"Id":"398482437","IsPullRequest":true,"CreatedAt":"2019-01-11T22:59:12","Actor":"wschin","Number":"2132","RawContent":null,"Title":"Remove ISchema in TreeEnsembleFeaturizer","State":"open","Body":"New member of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2132","RelatedDescription":"Open PR \"Remove ISchema in TreeEnsembleFeaturizer\" (#2132)"},{"Id":"398465288","IsPullRequest":true,"CreatedAt":"2019-01-11T22:57:37","Actor":"eerhardt","Number":"2128","RawContent":null,"Title":"Publish test trx files on failure","State":"closed","Body":"There are times when the tests fail, but we don't know why. Publish the trx files as well during test failures.","Url":"https://github.com/dotnet/machinelearning/pull/2128","RelatedDescription":"Closed or merged PR \"Publish test trx files on failure\" (#2128)"},{"Id":"398480598","IsPullRequest":true,"CreatedAt":"2019-01-11T22:50:42","Actor":"eerhardt","Number":"2131","RawContent":null,"Title":"Remove \"VectorType\" specific members on ColumnType.","State":"open","Body":"Remove the following members from ColumnType:\r\n\r\n- IsVector\r\n- ItemType\r\n- IsKnownSizeVector\r\n- VectorSize\r\n- ValueCount\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.","Url":"https://github.com/dotnet/machinelearning/pull/2131","RelatedDescription":"Open PR \"Remove \"VectorType\" specific members on ColumnType.\" (#2131)"},{"Id":"398476760","IsPullRequest":true,"CreatedAt":"2019-01-11T22:34:47","Actor":"yaeldekel","Number":"2130","RawContent":null,"Title":"Fix bug with order of pixels in the Interleave=true case","State":"open","Body":"Fixes #2129.","Url":"https://github.com/dotnet/machinelearning/pull/2130","RelatedDescription":"Open PR \"Fix bug with order of pixels in the Interleave=true case\" (#2130)"},{"Id":"398476524","IsPullRequest":false,"CreatedAt":"2019-01-11T22:33:54","Actor":"yaeldekel","Number":"2129","RawContent":null,"Title":"ImagePixelExtractor bug when interleave=true","State":"open","Body":"The outer for loop is over x and the inner loop is over y, causing the results to be inconsistent with the interleave=false case, which loops over y first and x second.","Url":"https://github.com/dotnet/machinelearning/issues/2129","RelatedDescription":"Open issue \"ImagePixelExtractor bug when interleave=true\" (#2129)"},{"Id":"398434532","IsPullRequest":false,"CreatedAt":"2019-01-11T20:07:14","Actor":"CESARDELATORRE","Number":"2127","RawContent":null,"Title":"Allow multiple numeric data types in pipeline and estimators, plus allow different datatypes in the Concat estimator","State":"open","Body":"Related to this issue at the ML.NET Samples repo with feedback from a customer: https://github.com/dotnet/machinelearning-samples/issues/198\r\n\r\nMost of our algorithms expect floating point values as input. You need to either read your input as floats (DataKind.R4 or DataKind.R8) or convert ints to floats later in the pipeline.\r\n\r\nThis is a typical problem that customers might have when starting with new datasets where data could initially be Integer, etc. and since DataKind enum has more than just float and double it can be misleading and create trouble when getting started.\r\n\r\nIt's definitely unclear to beginners why integer only wouldn't work, etc. \r\n\r\nPROPOSALS:\r\n\r\n- 1. Expand API so it'd accept additional numeric data types like Integer. Do conversions/cast internally?\r\n\r\n- 2. Expand Concat estimator API to accept multiple/different numeric column types for the multiple columns being being concatenated. So I could concatenate an integer column with a double column and so forth. Again, it might need conversions, but it probably could be done internally?\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2127","RelatedDescription":"Open issue \"Allow multiple numeric data types in pipeline and estimators, plus allow different datatypes in the Concat estimator\" (#2127)"},{"Id":"398417494","IsPullRequest":false,"CreatedAt":"2019-01-11T19:15:47","Actor":"taohu88","Number":"2126","RawContent":null,"Title":"Please add vector distance transform","State":"open","Body":"### Issue\r\n- **What did you do?**\r\nWhen I used SSWE WordEmbedding, I'd like to have VectorDistanceTranform to compute similarity score between two sentiment vectors. In my use case,  I don't need to maintain two sentiment vectors beyond the similarity score.\r\n\r\n- **What did you expect?**\r\nI would like to have VectorDistanceTransform to compute similarity score.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2126","RelatedDescription":"Open issue \"Please add vector distance transform\" (#2126)"},{"Id":"398404049","IsPullRequest":true,"CreatedAt":"2019-01-11T18:33:21","Actor":"najeeb-kazmi","Number":"2125","RawContent":null,"Title":"Rename CreateTextReader to CreateTextLoader","State":"open","Body":"Fixes #1690 \r\n\r\nRename `CreateTextReader` to `CreateTextLoader` to conform to the return type:\r\n\r\n```csharp\r\nTextLoader textLoader = mlContext.Data.CreateTextLoader(new TextLoader.Arguments() ...\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/2125","RelatedDescription":"Open PR \"Rename CreateTextReader to CreateTextLoader\" (#2125)"},{"Id":"398398054","IsPullRequest":true,"CreatedAt":"2019-01-11T18:14:31","Actor":"najeeb-kazmi","Number":"2124","RawContent":null,"Title":"[WIP] Make array argument names plural","State":"open","Body":"Fixes #2040 \r\n\r\nMakes array argument names plural where they were singular.\r\n\r\nIn three places, we had arguments `string Terms`, a comma separated list of terms, visible to command line only and `string[] Term` visible to entry points only. Here, the array argument could not be named `Terms` without a conflict, so I also renamed `string Terms` to `string TermsList`.\r\n\r\nThat is to say this:\r\n```csharp\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n            public string Terms;\r\n\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n            public string[] Term;\r\n```\r\n\r\nbecame this:\r\n```csharp\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"Comma separated list of terms\", Name = \"Terms\", SortOrder = 105, Visibility = ArgumentAttribute.VisibilityType.CmdLineOnly)]\r\n            public string TermsList;\r\n\r\n            [Argument(ArgumentType.AtMostOnce, HelpText = \"List of terms\", SortOrder = 106, Visibility = ArgumentAttribute.VisibilityType.EntryPointsOnly)]\r\n            public string[] Terms;\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/2124","RelatedDescription":"Open PR \"[WIP] Make array argument names plural\" (#2124)"},{"Id":"397637203","IsPullRequest":true,"CreatedAt":"2019-01-11T17:42:46","Actor":"najeeb-kazmi","Number":"2108","RawContent":null,"Title":"Added <Link> to CommonPackage.props for native DLLs","State":"closed","Body":"Fixes #1851 \r\n\r\nI built the nugets locally and tested in a new solution to verify that the issue described in #1851 was resolved.","Url":"https://github.com/dotnet/machinelearning/pull/2108","RelatedDescription":"Closed or merged PR \"Added <Link> to CommonPackage.props for native DLLs\" (#2108)"},{"Id":"398383243","IsPullRequest":true,"CreatedAt":"2019-01-11T17:28:11","Actor":"wschin","Number":"2123","RawContent":null,"Title":"Remove ISchema in TensorflowUtils.cs and polish its shape translation","State":"open","Body":"As title. Party member of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2123","RelatedDescription":"Open PR \"Remove ISchema in TensorflowUtils.cs and polish its shape translation\" (#2123)"},{"Id":"397987439","IsPullRequest":true,"CreatedAt":"2019-01-11T17:18:28","Actor":"Ivanidzo4ka","Number":"2112","RawContent":null,"Title":"Tensorflow GetModelSchema should support unfrozen models","State":"closed","Body":"Fix https://github.com/dotnet/machinelearning/issues/2102","Url":"https://github.com/dotnet/machinelearning/pull/2112","RelatedDescription":"Closed or merged PR \"Tensorflow GetModelSchema should support unfrozen models\" (#2112)"},{"Id":"398225244","IsPullRequest":false,"CreatedAt":"2019-01-11T10:24:55","Actor":"rauhs","Number":"2122","RawContent":null,"Title":"New StaticPipe nuget should be mentioned in release notes","State":"open","Body":"Title says it all. I just spend way too much time on this issue.","Url":"https://github.com/dotnet/machinelearning/issues/2122","RelatedDescription":"Open issue \"New StaticPipe nuget should be mentioned in release notes\" (#2122)"},{"Id":"398118616","IsPullRequest":false,"CreatedAt":"2019-01-11T03:36:11","Actor":"CESARDELATORRE","Number":"2121","RawContent":null,"Title":"ImageLoadingEstimator for TensorFlow scoring should allow in-memory image streams as input in addition to images from files on drive ","State":"open","Body":"Right now the only way for ML.NET to load images is via ImageLoadingEstimator, which can load them *only* from disk files (as confirmed by @yaeldekel and Pete a few weeks ago).\r\n\r\nHowever, it is a very common scenario in applications, such as a web app, where users submit images through Http, then the DataView/pipeline would load in-memory image streams (either BitMap, byte[], Image) instead of loading images from files in a folder on a disk/drive. \r\n\r\nThat's the right way to do it for many scenarios in web apps and services (Web APIs).\r\nAnd for instance, you can do that when using TensorFlowSharp in C#. But we cannot in ML.NET, as of today.\r\n\r\nWhen implementing this feature improvement in ML.NET, there could be the following two approaches:\r\n\r\n- Modify schema comprehension to be able to map Bitmap fields/properties to Image columns of a data view.\r\n\r\n- Add another version of ImageLoading transformer that loads/decodes the image from a byte vector, rather than from a disk file identified by path.\r\n\r\nIn any case, this is an important scenario to implement because not being able to load images from in-memory streams and only from files can be a big handicap in performance for on-line scenarios like the ones mentioned.\r\n\r\nWith the current implementation in ML.NET, the only workaround is to save the upcoming image from http and in-memory into a temporary file on the disk and load it from there. But that is a very \"coarse/poor\" workaround, not performant at all for a real application in production. \r\n\r\nThe following is a sample app I created for this online scenario where the user uploads an image from the browser into a service (Web API) and ultimately you get it as an in-memory image stream.\r\n\r\nSEE CODE HERE:\r\n\r\nhttps://github.com/CESARDELATORRE/TensorFlowImageClassificationWebAPI\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/51009187-00dc4980-1504-11e9-866d-2c69bbd0db74.png)\r\n\r\n- That web form uploads the image through Http into a service (Web API) in the server-side. At that point, the image is an in-memory image stream.\r\n\r\n- In this implementation the sample app works because I implemented a workaround so the submitted image is temporarily stored as a file, then loaded from the file into the DataView through the pipeline...)\r\n\r\nBasically, when the C# method in the Web API gets the image as an in-memory stream it should be able to load it directly in the DataView. The following code is an example:\r\n\r\n```cs\r\n        // Controller's method from Web API \r\n        [HttpPost]\r\n        [ProducesResponseType(200)]\r\n        [ProducesResponseType(400)]\r\n        [Route(\"classifyimage\")]\r\n        public async Task<IActionResult> ClassifyImage(IFormFile imageFile)\r\n        {\r\n                if (imageFile.Length == 0)\r\n                    return BadRequest();\r\n\r\n                // WORKAROUND: Save image into a temporal file\r\n                //Save the temp image image into the temp-folder \r\n                string fileName = await _imageWriter.UploadImageAsync(imageFile, _imagesTmpFolder);\r\n                string imageFilePath = Path.Combine(_imagesTmpFolder, fileName);\r\n\r\n                // Use image filename as the workaround...\r\n                // Rest of the implementation with ML.NET API for scoring TensorFlow model...\r\n                // ...\r\n           \r\n        }\r\n```\r\n\r\nTo sum up:\r\n\r\nI believe it is \"a must\" for ML.NET to be able to load in-memory image streams into the DataView to use those images when scoring TensorFlow models (in addition \"from files\") because of the mentioned on-line and in-memory scenarios that are pretty common.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2121","RelatedDescription":"Open issue \"ImageLoadingEstimator for TensorFlow scoring should allow in-memory image streams as input in addition to images from files on drive \" (#2121)"},{"Id":"398096620","IsPullRequest":false,"CreatedAt":"2019-01-11T01:54:03","Actor":"wschin","Number":"2120","RawContent":null,"Title":"Several functions in FCC scorer not used/tested","State":"open","Body":"As title. The functions below have zero reference counts.\r\n```csharp\r\n        private static IDataScorerTransform Create(IHostEnvironment env, Arguments args, IDataView data, ISchemaBoundMapper mapper, RoleMappedSchema trainSchema)\r\n        {\r\n            Contracts.CheckValue(env, nameof(env));\r\n            env.CheckValue(data, nameof(data));\r\n            env.CheckValue(mapper, nameof(mapper));\r\n            if (args.Top< 0)\r\n                throw env.Except($\"Number of top contribution must be non negative\");\r\n            if (args.Bottom < 0)\r\n                throw env.Except($\"Number of bottom contribution must be non negative\");\r\n\r\n            var contributionMapper = mapper as RowMapper;\r\n            env.CheckParam(mapper != null, nameof(mapper), \"Unexpected mapper\");\r\n\r\n            var scorer = ScoreUtils.GetScorerComponent(env, contributionMapper);\r\n            var scoredPipe = scorer.CreateComponent(env, data, contributionMapper, trainSchema);\r\n            return scoredPipe;\r\n        }\r\n\r\n        // Factory method for SignatureBindableMapper.\r\n        private static ISchemaBindableMapper Create(IHostEnvironment env, Arguments args, IPredictor predictor)\r\n        {\r\n            Contracts.CheckValue(env, nameof(env));\r\n            env.CheckValue(predictor, nameof(predictor));\r\n            var pred = predictor as IFeatureContributionMapper;\r\n            env.CheckParam(pred != null, nameof(predictor), \"Predictor doesn't support getting feature contributions\");\r\n            return new BindableMapper(env, pred, args.Top, args.Bottom, args.Normalize, args.Stringify);\r\n        }\r\n\r\n        // Factory method for SignatureLoadModel.\r\n        private static ISchemaBindableMapper Create(IHostEnvironment env, ModelLoadContext ctx)\r\n            => new BindableMapper(env, ctx);\r\n```\r\nI further commented out the whole `FeatureContributionCalculation.cs`, rebuilt my solution, and ran all tests starting with `FeatureCont`. Surprisingly, all tests passed.","Url":"https://github.com/dotnet/machinelearning/issues/2120","RelatedDescription":"Open issue \"Several functions in FCC scorer not used/tested\" (#2120)"},{"Id":"397636654","IsPullRequest":true,"CreatedAt":"2019-01-11T01:39:15","Actor":"wschin","Number":"2107","RawContent":null,"Title":"Make ScoreMapperSchema and its relatives not ISchema","State":"closed","Body":"1. Remove ScoreMapperSchema and its relatives entirely\r\n2. Create static functions to generate commonly-used Schema\r\n\r\nThis PR wants to join the march of #1501.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2107","RelatedDescription":"Closed or merged PR \"Make ScoreMapperSchema and its relatives not ISchema\" (#2107)"},{"Id":"398087933","IsPullRequest":true,"CreatedAt":"2019-01-11T01:15:34","Actor":"wschin","Number":"2119","RawContent":null,"Title":"Remove ISchema in FCC","State":"open","Body":"Again a part of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2119","RelatedDescription":"Open PR \"Remove ISchema in FCC\" (#2119)"},{"Id":"398077662","IsPullRequest":true,"CreatedAt":"2019-01-11T00:30:32","Actor":"sfilipi","Number":"2118","RawContent":null,"Title":"swapping the order or arguments on the constructors of the ConversionExtensionsCatalog. Internalizing the constructors.","State":"open","Body":"Working towards resolving #2064 by swapping the order or arguments on the constructors of the ConversionExtensions Catalog. Internalizing the constructors.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2118","RelatedDescription":"Open PR \"swapping the order or arguments on the constructors of the ConversionExtensionsCatalog. Internalizing the constructors.\" (#2118)"},{"Id":"398070768","IsPullRequest":true,"CreatedAt":"2019-01-11T00:30:21","Actor":"Anipik","Number":"2117","RawContent":null,"Title":"Adding netfx configurations to the directory.props","State":"closed","Body":"This change was missed while adding the new build configuration \r\nThis address the issue @Ivanidzo4ka and others are facing with the sln files i.e \"-netfx\" getting replaces by \"-intrinsics\"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2117","RelatedDescription":"Closed or merged PR \"Adding netfx configurations to the directory.props\" (#2117)"},{"Id":"398066225","IsPullRequest":true,"CreatedAt":"2019-01-10T23:44:58","Actor":"codemzs","Number":"2116","RawContent":null,"Title":"WIP Code coverage support","State":"open","Body":"This is a WIP PR that adds code coverage support. This change contains code that generates code coverage files. In the next iteration I will add code to upload code coverage files to CodeCov once I know builds pass and a way to disable code coverage if needed.","Url":"https://github.com/dotnet/machinelearning/pull/2116","RelatedDescription":"Open PR \"WIP Code coverage support\" (#2116)"},{"Id":"398065880","IsPullRequest":true,"CreatedAt":"2019-01-10T23:43:40","Actor":"singlis","Number":"2115","RawContent":null,"Title":"Adds string support for ValueMappingEstimator","State":"open","Body":"This adds support for strings to be used for keys and values for the ValueMappingEstimator (as opposed to ReadOnlyMemory<char>).\r\n\r\nThis also converts all tests to use string types as well as adds an\r\nadditional test for string vector values.\r\n\r\nFixes #2114","Url":"https://github.com/dotnet/machinelearning/pull/2115","RelatedDescription":"Open PR \"Adds string support for ValueMappingEstimator\" (#2115)"},{"Id":"398041725","IsPullRequest":false,"CreatedAt":"2019-01-10T22:23:27","Actor":"singlis","Number":"2114","RawContent":null,"Title":"ValueMappingTransform does not handle type string for keys and values","State":"open","Body":"ValueMappingTransform does handle ReadOnlyMemory<char> for values and keys, it does not handle strings. \r\n\r\nThis should be updated as users will naturally want to use strings for the data type. With this support, the following should work:\r\n```\r\n            var educationKeys = new List<string>()\r\n            {\r\n                \"0-5yrs\",\r\n                \"6-11yrs\",\r\n                \"12+yrs\"\r\n            };\r\n\r\n            var educationValues = new List<string>()\r\n            {\r\n                \"Cat1\",\r\n                \"Cat2\", \r\n                \"Cat3\"\r\n            };\r\n\r\n            var pipeline = new ValueMappingEstimator<string, string>(ml, educationKeys, educationValues, (\"Education\", \"EducationCategory\"));\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2114","RelatedDescription":"Open issue \"ValueMappingTransform does not handle type string for keys and values\" (#2114)"},{"Id":"398018101","IsPullRequest":true,"CreatedAt":"2019-01-10T22:04:15","Actor":"shmoradims","Number":"2113","RawContent":null,"Title":"Allow NimbusML to access some internals","State":"closed","Body":"Added NimbusML's DotNetBridge to ML.Core/Data/Entrypoints. \r\n\r\nThis closes #2062, closes #1957, closes #1958, closes #1959","Url":"https://github.com/dotnet/machinelearning/pull/2113","RelatedDescription":"Closed or merged PR \"Allow NimbusML to access some internals\" (#2113)"},{"Id":"397980813","IsPullRequest":true,"CreatedAt":"2019-01-10T19:31:16","Actor":"wschin","Number":"2111","RawContent":null,"Title":"Say good-bye to transpose ISchema","State":"open","Body":"We make `ITransposeSchema` no longer an `ISchema` but still carrying slot types for transposed `IDataView`. Therefore, we rename `ITransposeSchema` to `ITransposeSlotTypeHolder` and change variables in other places accordingly. Several derived classes' `ISchema` members are removed because they are not used at all.\r\n\r\nParty of #1501 continues.","Url":"https://github.com/dotnet/machinelearning/pull/2111","RelatedDescription":"Open PR \"Say good-bye to transpose ISchema\" (#2111)"},{"Id":"397689221","IsPullRequest":true,"CreatedAt":"2019-01-10T06:25:52","Actor":"sfilipi","Number":"2110","RawContent":null,"Title":"fixing the AdultData LoadColumn, and IrisWithAllFeatures class.","State":"open","Body":"Fixing errors regarding data loading,  spotted in the cookbook. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2110","RelatedDescription":"Open PR \"fixing the AdultData LoadColumn, and IrisWithAllFeatures class.\" (#2110)"},{"Id":"397646245","IsPullRequest":true,"CreatedAt":"2019-01-10T02:29:20","Actor":"Anipik","Number":"2109","RawContent":null,"Title":"Added Dry job for benchmarks CI","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2002\r\n\r\nThis PR will run all the benchmarks in the ci atleast one. This will ensure that the commits have not broken any of the benchmarks","Url":"https://github.com/dotnet/machinelearning/pull/2109","RelatedDescription":"Open PR \"Added Dry job for benchmarks CI\" (#2109)"},{"Id":"397636627","IsPullRequest":false,"CreatedAt":"2019-01-10T01:37:22","Actor":"Anipik","Number":"2106","RawContent":null,"Title":"Onnxruntime not working properly for netfx","State":"open","Body":"I am trying to run the test SimpleEndToEndOnnxConversionTest on netfx\r\n\r\nI get this is as an error\r\n```C#\r\n[xUnit.net 00:00:08.31]     Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest [FAIL]\r\nFailed   Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest\r\nError Message:\r\n System.DllNotFoundException : Unable to load DLL 'onnxruntime.dll': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\nStack Trace:\r\n   at Microsoft.ML.OnnxRuntime.NativeMethods.OrtCreateSessionOptions()\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions..ctor()\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions.MakeSessionOptionWithMklDnnProvider()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at Microsoft.ML.OnnxRuntime.InferenceSession..ctor(String modelPath)\r\n   at Microsoft.ML.Transforms.OnnxModel..ctor(String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxUtils.cs:line 101\r\n   at Microsoft.ML.Transforms.OnnxTransform..ctor(IHostEnvironment env, Arguments args, Byte[] modelBytes) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 190\r\n   at Microsoft.ML.Transforms.OnnxTransform..ctor(IHostEnvironment env, String modelFile, String[] inputColumns, String[] outputColumns, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 273\r\n   at Microsoft.ML.Transforms.OnnxScoringEstimator..ctor(IHostEnvironment env, String modelFile, String[] inputColumns, String[] outputColumns, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 560\r\n   at Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest() in C:\\git\\machinelearning\\test\\Microsoft.ML.Tests\\OnnxConversionTest.cs:line 74\r\n```\r\n\r\nAlthough I looked at the output folder, I saw there was a dll named as Microsost.ML.OnnxRuntime.dll(not sure if it is similar to onnxruntime.dll)\r\nI renamed it to onnxruntime.dll, and then I was getting\r\n\r\n```C#\r\n[xUnit.net 00:00:07.41]     Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest [FAIL]\r\nFailed   Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest\r\nError Message:\r\n System.EntryPointNotFoundException : Unable to find an entry point named 'OrtCreateSessionOptions' in DLL 'onnxruntime.dll'.\r\nStack Trace:\r\n   at Microsoft.ML.OnnxRuntime.NativeMethods.OrtCreateSessionOptions()\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions..ctor()\r\n   at Microsoft.ML.OnnxRuntime.SessionOptions.MakeSessionOptionWithMklDnnProvider()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at Microsoft.ML.OnnxRuntime.InferenceSession..ctor(String modelPath)\r\n   at Microsoft.ML.Transforms.OnnxModel..ctor(String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxUtils.cs:line 101\r\n   at Microsoft.ML.Transforms.OnnxTransform..ctor(IHostEnvironment env, Arguments args, Byte[] modelBytes) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 190\r\n   at Microsoft.ML.Transforms.OnnxTransform..ctor(IHostEnvironment env, String modelFile, String[] inputColumns, String[] outputColumns, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 273\r\n   at Microsoft.ML.Transforms.OnnxScoringEstimator..ctor(IHostEnvironment env, String modelFile, String[] inputColumns, String[] outputColumns, Nullable`1 gpuDeviceId, Boolean fallbackToCpu) in C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs:line 560\r\n   at Microsoft.ML.Tests.OnnxConversionTest.SimpleEndToEndOnnxConversionTest() in C:\\git\\machinelearning\\test\\Microsoft.ML.Tests\\OnnxConversionTest.cs:line 74\r\n```\r\n\r\n@eerhardt @danmosemsft @shauheen @TomFinley @jignparm ","Url":"https://github.com/dotnet/machinelearning/issues/2106","RelatedDescription":"Open issue \"Onnxruntime not working properly for netfx\" (#2106)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-12T05:30:45.3256806Z","RunDurationInMilliseconds":925}