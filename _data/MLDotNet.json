{"Data":{"GitHub":{"Issues":[{"Id":"498574293","IsPullRequest":true,"CreatedAt":"2019-09-25T23:37:41","Actor":"eerhardt","Number":"4247","RawContent":null,"Title":"Fix NgramExtractingTransformer GetSlotNames to not allocate a new delegate on every invoke.","State":"open","Body":"This was showing up as allocating a huge number of delegates for no reason.\r\n\r\nI removed the delegate all together and just pass the VBuffer in.","Url":"https://github.com/dotnet/machinelearning/pull/4247","RelatedDescription":"Open PR \"Fix NgramExtractingTransformer GetSlotNames to not allocate a new delegate on every invoke.\" (#4247)"},{"Id":"498520195","IsPullRequest":true,"CreatedAt":"2019-09-25T20:57:50","Actor":"LittleLittleCloud","Number":"4246","RawContent":null,"Title":"WIP - AutoML Add Recommendation Task","State":"open","Body":"What's already be done in this PR\r\n- [x] added `Recommendation` task and experiment in `AutoML`\r\n- [x] added `MatrixFactorization` as `MatrixFactorizationExtension`\r\n- [x] added a new Column Purpose (`LabelFeature`) and it's corresponding TransformerExtension (`LabelCategorical`) so that `AutoML` can construct the pre-process pipeline for `MatrixFactorizationExtension` correctly\r\n- [x] added a new recommendation example (with rating only) in `AutoML.Example`, and you can play with that!\r\n\r\nWhat's need to be done (Feel Free to CRUD)\r\n- [ ] figuring out how to do sweepParams for `MatrixFactorization`, the current one seems to have some bugs and it's never stop! (maybe SMACSweeper does not converge?)\r\n- [ ] figuring out how to accelerate and properly presenting the training process. Seems that `MatrixFactorization` requires more time to train a round, and the algorithm for sweeping params requires to train many rounds to find out the best parameter. It's time costy and customers might not like that.\r\n- [ ] Corresponding `CodeGen` part\r\n- [ ] Test case!\r\n- [ ] Better Naming and code style\r\n- [ ] Enable support for multiple feature trainers in `AutoML` (it requires some refactor works and shouldn't be done in this PR. But it's important)","Url":"https://github.com/dotnet/machinelearning/pull/4246","RelatedDescription":"Open PR \"WIP - AutoML Add Recommendation Task\" (#4246)"},{"Id":"497293022","IsPullRequest":true,"CreatedAt":"2019-09-23T19:48:34","Actor":"jamessantiago","Number":"4245","RawContent":null,"Title":"[Example Only] Anomaly detection example for extending AutoML features to non-experiment types","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nThis is for issue #4244 as an example.  Not sure the proper way to go about achieving the same result so this is just for discussion.","Url":"https://github.com/dotnet/machinelearning/pull/4245","RelatedDescription":"Open PR \"[Example Only] Anomaly detection example for extending AutoML features to non-experiment types\" (#4245)"},{"Id":"497291598","IsPullRequest":false,"CreatedAt":"2019-09-23T19:45:31","Actor":"jamessantiago","Number":"4244","RawContent":null,"Title":"[AutoML] Extend use of AutoML inferrence workflow for non-experiment types","State":"open","Body":"I've got a desire here to use some of the transformer inference and other cool things from AutoML but obviously doesn't fit as an experiment without a proper estimator.  I've mocked up adding anomaly detection as an experiment base by faking the estimator.  Looks like too much of AutoML is internal for me to extend it like this.  Any thoughts on how I should go about achieving the same results?  Maybe I should setup a pull request to change the appropriate protection levels for the items needed to implement the experimentbase class?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4244","RelatedDescription":"Open issue \"[AutoML] Extend use of AutoML inferrence workflow for non-experiment types\" (#4244)"},{"Id":"497255848","IsPullRequest":false,"CreatedAt":"2019-09-23T18:27:30","Actor":"aslotte","Number":"4243","RawContent":null,"Title":"ML.NET support in Azure Machine Learning Service","State":"open","Body":"First of all, big thanks for the initial support of ML.NET in Jupyter Notebooks. It's a fantastic addition.\r\n\r\nBased on this, I'm wondering if, when and how it will be possible to install the .NET kernel in Azure Machine Learning Service to be able to take full advantage of the cloud?","Url":"https://github.com/dotnet/machinelearning/issues/4243","RelatedDescription":"Open issue \"ML.NET support in Azure Machine Learning Service\" (#4243)"},{"Id":"497235087","IsPullRequest":true,"CreatedAt":"2019-09-23T17:41:14","Actor":"harshithapv","Number":"4242","RawContent":null,"Title":"Changed Image classification API to accept Image as VBuffer<byte>","State":"open","Body":"Changed Image classification API to accept Image as V Buffer<byte>. Also, added a few optimizations to re-use the buffer for performance gains.\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4242","RelatedDescription":"Open PR \"Changed Image classification API to accept Image as VBuffer<byte>\" (#4242)"},{"Id":"497032201","IsPullRequest":false,"CreatedAt":"2019-09-23T11:08:17","Actor":"bjoped","Number":"4241","RawContent":null,"Title":"Exception in AutoML regression experiment","State":"open","Body":"Windows 10 v. 1809\r\n\r\nUpgraded From v.0.14 v. 0.15 and got ArgumentOutOfRangeException in CrossValSummaryRunner.suggestedPipelineRunDetail.\r\nBestResultUtil.GetIndexOfBestScore returns -1. \r\n\r\nCode works as expected in v.0.14. tried to upgrade to v.0.15 and v0.16 preview and both fail with the Exception.\r\n\r\n> System.ArgumentOutOfRangeException\r\n  HResult=0x80131502\r\n  Message=Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n  Source=mscorlib\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)\r\n   at System.Collections.Generic.List`1.get_Item(Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.ML.AutoML.CrossValSummaryRunner`1.Run(SuggestedPipeline pipeline, DirectoryInfo modelDirectory, Int32 iterationNum) in C:\\Data\\Dev\\machinelearning\\src\\Microsoft.ML.AutoML\\Experiment\\Runners\\CrossValSummaryRunner.cs:line 74","Url":"https://github.com/dotnet/machinelearning/issues/4241","RelatedDescription":"Open issue \"Exception in AutoML regression experiment\" (#4241)"},{"Id":"496816763","IsPullRequest":false,"CreatedAt":"2019-09-22T18:41:35","Actor":"RicardoGonzagaBR","Number":"4240","RawContent":null,"Title":"[AutoML] Not Really a Issue | Any plans to include on AUTO a way to insert/change initial weights or retrain a model?using a experiment?","State":"open","Body":"Auto dont have a way to retrain a existing model or use a pre existing set of weights as starting point.  Its a suggestion, not really a issue. I think this is a wanted feature not only by me :-)","Url":"https://github.com/dotnet/machinelearning/issues/4240","RelatedDescription":"Open issue \"[AutoML] Not Really a Issue | Any plans to include on AUTO a way to insert/change initial weights or retrain a model?using a experiment?\" (#4240)"},{"Id":"496801320","IsPullRequest":false,"CreatedAt":"2019-09-22T16:26:49","Actor":"oliverw","Number":"4239","RawContent":null,"Title":"Consuming a simple ONNX model for text classification","State":"open","Body":"I'm trying to consume a trained scikit learn model that was converted to ONNX. Attempting to load the model with:\r\n\r\n```c#\r\nvar pipeline = ctx.Transforms.ApplyOnnxModel(\r\n    new[] { \"label\", \"probabilities\" }, new[] { \"input\" }, \"test.onnx\");\r\n```\r\n\r\nResults in the following exception:\r\n\r\n> System.ArgumentOutOfRangeException: 'dim (Parameter 'Dimension { } in ONNX tensor cannot exceed the maximum of 32-bit signed integer.')\r\n> Actual value was 0.'\r\n> \r\n\r\n**Update:**\r\n\r\nSaving the model with `target_opset = 9` results in:\r\n\r\n> [ErrorCode:Fail] Load model from ..\\..\\..\\..\\..\\Data\\MLModel\\test.onnx failed:Fatal error: StringNormalizer is not a registered function/op\r\n\r\n\r\n**Model creation in python:**\r\n\r\n```python\r\nimport os\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.svm import LinearSVC\r\nfrom skl2onnx import convert_sklearn\r\nfrom skl2onnx.common.data_types import StringTensorType\r\nimport pandas as pd\r\nfrom onnxmltools import save_model\r\n\r\ndata = pd.read_csv('training_data.csv', sep='\\t')\r\n\r\npipeline = Pipeline([\r\n  ('tfidf', TfidfVectorizer()),\r\n  ('clf', LinearSVC()),\r\n])\r\n\r\npipeline.fit(data[\"Keywords\"], data[\"Label\"])\r\n\r\nonnx = convert_sklearn(pipeline, name='test_predictor',\r\n  initial_types=[('input', StringTensorType([1, 1]))])\r\n\r\nsave_model(onnx, \"test.onnx\")\r\n\r\n```\r\n\r\n**Netron:**\r\n\r\n![image](https://user-images.githubusercontent.com/51688/65391096-6fe19180-dd65-11e9-965a-3eab334533a6.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4239","RelatedDescription":"Open issue \"Consuming a simple ONNX model for text classification\" (#4239)"},{"Id":"496657603","IsPullRequest":false,"CreatedAt":"2019-09-21T13:44:53","Actor":"nighotatul","Number":"4238","RawContent":null,"Title":"How to Draw Auto ML Statisctics Graph using XPlot.Plotly library in c#","State":"open","Body":"Hi \r\n\r\nWe are using AutoML tool\r\n\r\nAs we got statistics of binary classification of\r\n\r\nAUC\r\nConfusion Matrix\r\nRoc\r\n\r\nHow we can draw the graph based on Matrix by using XPlot.plotly library in C#\r\n\r\nwe are not found any example in github in ML.net repository\r\n\r\nPlease provide sample\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4238","RelatedDescription":"Open issue \"How to Draw Auto ML Statisctics Graph using XPlot.Plotly library in c#\" (#4238)"},{"Id":"496578497","IsPullRequest":true,"CreatedAt":"2019-09-20T23:06:26","Actor":"ashbhandare","Number":"4237","RawContent":null,"Title":"Adding Early stopping feature in ImageClassification ","State":"open","Body":"Fixes #4236\r\n\r\nModeled after https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4237","RelatedDescription":"Open PR \"Adding Early stopping feature in ImageClassification \" (#4237)"},{"Id":"496561537","IsPullRequest":false,"CreatedAt":"2019-09-20T21:54:28","Actor":"ashbhandare","Number":"4236","RawContent":null,"Title":"Need Early Stopping feature in Image Classification ","State":"open","Body":"### Issue\r\nNeed the Early stopping feature in ML .NET so that number of epochs do not need to be set/predefined for Image Classification training.\r\nSaid feature available as a Keras callback: https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4236","RelatedDescription":"Open issue \"Need Early Stopping feature in Image Classification \" (#4236)"},{"Id":"496504070","IsPullRequest":false,"CreatedAt":"2019-09-20T19:07:33","Actor":"Kavignon","Number":"4235","RawContent":null,"Title":"Support for OpenAI Gym?","State":"open","Body":"I'm wondering if it'll be possible to have native support for OpenAI gym directly from ML.NET?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4235","RelatedDescription":"Open issue \"Support for OpenAI Gym?\" (#4235)"},{"Id":"496483608","IsPullRequest":false,"CreatedAt":"2019-09-20T18:13:45","Actor":"luisquintanilla","Number":"4234","RawContent":null,"Title":"[Image Classification API] TensorFlow exception triggered: input ended unexpectedly in the middle of a field","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nTried to train an image classification DNN model using the Image Classification API on the [Intel Image Classification](https://www.kaggle.com/puneet6060/intel-image-classification) dataset.\r\n\r\n- **What happened?**\r\n\r\nThe following exception was raised\r\n\r\n```text\r\nWhile parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nThe model to train.\r\n\r\n### Source code / logs\r\n\r\n#### Source Code\r\n\r\n```csharp\r\npublic static IEnumerable<ImageInput> LoadImagesFromDirectory(string folder, bool useFolderNameasLabel = true)\r\n{\r\n    var files = Directory.GetFiles(folder, \"*\",\r\n        searchOption: SearchOption.AllDirectories);\r\n\r\n    foreach (var file in files)\r\n    {\r\n        if ((Path.GetExtension(file) != \".jpg\") && (Path.GetExtension(file) != \".png\"))\r\n            continue;\r\n\r\n        var label = Path.GetFileName(file);\r\n        if (useFolderNameasLabel)\r\n            label = Directory.GetParent(file).Name;\r\n        else\r\n        {\r\n            for (int index = 0; index < label.Length; index++)\r\n            {\r\n                if (!char.IsLetter(label[index]))\r\n                {\r\n                    label = label.Substring(0, index);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        yield return new ImageInput()\r\n        {\r\n            ImagePath = file,\r\n            Label = label\r\n        };\r\n\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\nMLContext mlContext = new MLContext();\r\n\r\nIEnumerable<ImageInput> train = LoadImagesFromDirectory(trainRelativePath, true).Take(10).ToArray();\r\nIEnumerable<ImageInput> test = LoadImagesFromDirectory(testRelativePath, true).Take(10).ToArray();\r\n\r\nIDataView trainSet = mlContext.Data.LoadFromEnumerable(train);\r\nIDataView testSet = mlContext.Data.LoadFromEnumerable(test);\r\n\r\nvar mapLabelTransform = mlContext.Transforms.Conversion.MapValueToKey\r\n  (outputColumnName: \"LabelAsKey\",\r\n   inputColumnName: \"Label\",\r\n   keyOrdinality: ValueToKeyMappingEstimator.KeyOrdinality.ByValue);\r\n\r\nvar trainingPipeline = \r\n    mapLabelTransform\r\n   .Append(mlContext.Model.ImageClassification(\r\n       \"ImagePath\",\r\n       \"LabelAsKey\",\r\n       arch: ImageClassificationEstimator.Architecture.ResnetV2101,\r\n       epoch: 100,\r\n       batchSize: 150,\r\n       metricsCallback: (metrics) => Console.WriteLine(metrics)));\r\n\r\nITransformer trainedModel = trainingPipeline.Fit(trainSet);\r\n```\r\n\r\n#### Logs\r\n\r\n```text\r\nSystem.FormatException\r\n  HResult=0x80131537\r\n  Message=Tensorflow exception triggered while loading model.\r\n  Source=Microsoft.ML.Dnn\r\n  StackTrace:\r\n   at Microsoft.ML.Transforms.Dnn.DnnUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.DnnCatalog.ImageClassification(ModelOperationsCatalog catalog, String featuresColumnName, String labelColumnName, String scoreColumnName, String predictedLabelColumnName, Architecture arch, Int32 epoch, Int32 batchSize, Single learningRate, ImageClassificationMetricsCallback metricsCallback, Int32 statisticFrequency, DnnFramework framework, String modelSavePath, String finalModelPrefix, IDataView validationSet, Boolean testOnTrainSet, Boolean reuseTrainSetBottleneckCachedValues, Boolean reuseValidationSetBottleneckCachedValues, String trainSetBottleneckCachedValuesFilePath, String validationSetBottleneckCachedValuesFilePath)\r\n   at ImageClassificationAPIMLNETSample.Program.Main(String[] args) in C:\\Users\\luquinta.REDMOND\\source\\repos\\ImageClassificationAPIMLNETSample\\ImageClassificationAPIMLNETSample\\Program.cs:line 59\r\n\r\nInner Exception 1:\r\nInvalidProtocolBufferException: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.\r\n```\r\n\r\nAdditional output to the console:\r\n\r\n```text\r\nGoogle.Protobuf.InvalidProtocolBufferException: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.\r\n   at Google.Protobuf.CodedInputStream.RefillBuffer(Boolean mustSucceed)\r\n   at Google.Protobuf.CodedInputStream.ReadRawBytes(Int32 size)\r\n   at Google.Protobuf.CodedInputStream.ReadBytes()\r\n   at Tensorflow.TensorProto.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\n   at Tensorflow.AttrValue.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\n   at Google.Protobuf.FieldCodec.<>c__DisplayClass16_0`1.<ForMessage>b__0(CodedInputStream input)\r\n   at Google.Protobuf.Collections.MapField`2.Codec.MessageAdapter.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\n   at Google.Protobuf.Collections.MapField`2.AddEntriesFrom(CodedInputStream input, Codec codec)\r\n   at Tensorflow.NodeDef.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\n   at Google.Protobuf.FieldCodec.<>c__DisplayClass16_0`1.<ForMessage>b__0(CodedInputStream input)\r\n   at Google.Protobuf.Collections.RepeatedField`1.AddEntriesFrom(CodedInputStream input, FieldCodec`1 codec)\r\n   at Tensorflow.GraphDef.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\n   at Tensorflow.MetaGraphDef.MergeFrom(CodedInputStream input)\r\n   at Google.Protobuf.MessageExtensions.MergeFrom(IMessage message, Byte[] data)\r\n   at Google.Protobuf.MessageParser`1.ParseFrom(Byte[] data)\r\n   at Tensorflow.saver._import_meta_graph_with_return_elements(String meta_graph_or_file, Boolean clear_devices, String import_scope, String[] return_elements)\r\n   at Microsoft.ML.Transforms.Dnn.DnnUtils.<>c__DisplayClass5_0.<LoadMetaGraph>b__0(Graph graph)\r\n   at Tensorflow.Python.tf_with[TIn,TOut](TIn py, Func`2 action)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4234","RelatedDescription":"Open issue \"[Image Classification API] TensorFlow exception triggered: input ended unexpectedly in the middle of a field\" (#4234)"},{"Id":"496250715","IsPullRequest":false,"CreatedAt":"2019-09-20T09:36:17","Actor":"Jenscaasen","Number":"4233","RawContent":null,"Title":"AutoML Fails due to FastTree GetProcessInformation UWP","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nI used AutoML for a Forecast problem in an UWP App. newest version of ML.NET. Letting the training run for more than 2 Minutes. Even when trying to not include trainers named \"*Tree*\" in the \"RegressionExperimentSettings\" it still arises. No idea why it would try to get ProcessInformation. Can you please remove that \"GetProcessInfos\" from FastTree?\r\n\r\n- **What happened?**\r\nThis Exception arises: \r\n\r\n ```\r\n  at System.Diagnostics.NtProcessInfoHelper.GetProcessInfos(Predicate`1 processIdFilter)\r\n   at System.Diagnostics.ProcessManager.GetProcessInfo(Int32 processId, String machineName)\r\n   at System.Diagnostics.Process.EnsureState(State state)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeTrainerBase`3.PrintMemoryStats(IChannel ch)\r\n   at Microsoft.ML.Trainers.FastTree.FastTreeTrainerBase`3.TrainCore(IChannel ch)\r\n   at Microsoft.ML.Trainers.FastTree.FastForestRegressionTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.AutoML.SmacSweeper.FitModel(IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.SmacSweeper.ProposeSweeps(Int32 maxSweeps, IEnumerable`1 previousRuns)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.SampleHyperparameters(MLContext context, SuggestedTrainer trainer, IEnumerable`1 history, Boolean isMaximizingMetric)\r\n   at Microsoft.ML.AutoML.PipelineSuggester.GetNextInferredPipeline(MLContext context, IEnumerable`1 history, DatasetColumnInfo[] columns, TaskKind task, Boolean isMaximizingMetric, CacheBeforeTrainer cacheBeforeTrainer, IEnumerable`1 trainerWhitelist)\r\n   at Microsoft.ML.AutoML.Experiment`2.Execute()\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(ColumnInformation columnInfo, DatasetColumnInfo[] columns, IEstimator`1 preFeaturizer, IProgress`1 progressHandler, IRunner`1 runner)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.ExecuteCrossValSummary(IDataView[] trainDatasets, ColumnInformation columnInfo, IDataView[] validationDatasets, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, ColumnInformation columnInformation, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at Microsoft.ML.AutoML.ExperimentBase`2.Execute(IDataView trainData, String labelColumnName, String samplingKeyColumn, IEstimator`1 preFeaturizer, IProgress`1 progressHandler)\r\n   at MLAtHome.Helpers.AutoMLHelper.<BuildTrainEvaluateAndSaveModel>d__8.MoveNext() in C:\\Users\\caasen\\source\\repos\\MLAtHome\\MLAtHome\\Helpers\\AutoMLHelper.cs:line 70\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[...]\r\n```\r\n\r\n### Source code / logs\r\n\r\n```\r\n//Excluding \"FastTree\" here in the settings\r\n     RegressionExperiment experiment=  mlContext.Auto().CreateRegressionExperiment(experimentSettings);\r\n            \r\n            ExperimentResult<RegressionMetrics> experimentResult = experiment.Execute(myview, Statics.CurrentModel.LabelName, progressHandler: progressHandler);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4233","RelatedDescription":"Open issue \"AutoML Fails due to FastTree GetProcessInformation UWP\" (#4233)"},{"Id":"496078228","IsPullRequest":true,"CreatedAt":"2019-09-20T00:00:28","Actor":"najeeb-kazmi","Number":"4232","RawContent":null,"Title":"Add entrypoint for PFI","State":"open","Body":"Fixes #4231 \r\n\r\nEntrypoint is needed to add PFI to NimbusML\r\nmicrosoft/NimbusML#92","Url":"https://github.com/dotnet/machinelearning/pull/4232","RelatedDescription":"Open PR \"Add entrypoint for PFI\" (#4232)"},{"Id":"496077025","IsPullRequest":false,"CreatedAt":"2019-09-19T23:54:59","Actor":"najeeb-kazmi","Number":"4231","RawContent":null,"Title":"Add Entry Point for Permutation Feature Importance","State":"open","Body":"Needed to add PFI to NimbusML.\r\n\r\nmicrosoft/NimbusML#92","Url":"https://github.com/dotnet/machinelearning/issues/4231","RelatedDescription":"Open issue \"Add Entry Point for Permutation Feature Importance\" (#4231)"},{"Id":"495504223","IsPullRequest":false,"CreatedAt":"2019-09-18T23:44:36","Actor":"jwood803","Number":"4230","RawContent":null,"Title":"Error when retraining model","State":"open","Body":"### System information\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-alpha1-009632 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAttempted to retrain a linear regression model built in ML.NET\r\n- **What happened?**\r\nReceived the below error:\r\n```\r\nOptimizer unable to proceed with loss function yielding Infinity\r\n```\r\n\r\n### Source code / logs\r\nError occurred on the below code:\r\n```\r\nvar retrainedModel = context.Regression.Trainers.LbfgsPoissonRegression()\r\n                .Fit(newDataTransformed, originalModelParams);\r\n```\r\n\r\nFull code sample is [here](https://github.com/jwood803/MLNetExamples/blob/master/MLNetExamples/RetrainModel/Program.cs).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4230","RelatedDescription":"Open issue \"Error when retraining model\" (#4230)"},{"Id":"495477157","IsPullRequest":true,"CreatedAt":"2019-09-18T22:04:42","Actor":"codemzs","Number":"4229","RawContent":null,"Title":"WIP: Homomorphic encryption ","State":"open","Body":"PLEASE DO NOT REVIEW. THIS IS NOT CLOSE TO A REVIEW. WE ARE JUST REVIEWING THE CHANGES FROM SEAL TEAM.","Url":"https://github.com/dotnet/machinelearning/pull/4229","RelatedDescription":"Open PR \"WIP: Homomorphic encryption \" (#4229)"},{"Id":"495442166","IsPullRequest":true,"CreatedAt":"2019-09-18T20:36:52","Actor":"mstfbl","Number":"4228","RawContent":null,"Title":"Attempt on Issue #4169","State":"open","Body":"Attempt on Issue #4169\r\n\r\n- Added the necessary estimator pipeline for a KeyDataViewType string/value binding\r\n- Changed the Output Column types of the ImageClassificationEstimator and  the Mapper for future compatibility with KeyType composite values\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4228","RelatedDescription":"Open PR \"Attempt on Issue #4169\" (#4228)"},{"Id":"495298128","IsPullRequest":false,"CreatedAt":"2019-09-18T15:25:35","Actor":"nighotatul","Number":"4227","RawContent":null,"Title":"Using PFI with AutoML, possible?","State":"open","Body":" I have a trained model and now trying to retrieve the feature weights. None of the objects returned expose a LastTransformer then I want to get the PFI information and I get stuck. There appears no way to get the LastTransformer object from the trainedModel.\r\n\r\nThe following cast lets me access the LastTransformer, however I cannot use it for PFI until I provide a better type for predictor. Debugging I can see it is of type Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.IPredictorProducing> but I am unable to cast to that because Microsoft.ML.IPredictorProducing is not visible, so it seems like we're still stuck.\r\n\r\n//setup code similar to famschopman\r\nRegressionExperiment experiment = mlContext.Auto().CreateRegressionExperiment(experimentSettings);\r\n\r\nvar experimentResults = experiment.Execute(split.TrainSet, split.TestSet);\r\nvar predictor = ((TransformerChain)experimentResults.BestRun.Model).LastTransformer;\r\n\r\n//this will not compile.\r\nvar permutationMetrics = mlContext.Regression.PermutationFeatureImportance(predictor, transformedData, permutationCount: 30);\r\n\r\nThe following compile error is produced.\r\n\r\nThe type arguments for method 'PermutationFeatureImportanceExtensions.PermutationFeatureImportance(RegressionCatalog, ISingleFeaturePredictionTransformer, IDataView, string, bool, int?, int)' cannot be inferred from the usage. Try specifying the type arguments explicitly.\r\n\r\nhow we get bias and weight using PFI?","Url":"https://github.com/dotnet/machinelearning/issues/4227","RelatedDescription":"Open issue \"Using PFI with AutoML, possible?\" (#4227)"},{"Id":"494878674","IsPullRequest":false,"CreatedAt":"2019-09-17T22:14:47","Actor":"LittleLittleCloud","Number":"4226","RawContent":null,"Title":"`predictionEngine` breaks after saving/loading a Model","State":"open","Body":"### System information\r\n\r\n- **win 10**:\r\n- **1.3.1**: \r\n\r\nI was trying to create a PredictEngine using a saved model. I found out that if I directly use the `ITransformer` retrieve from `Pipeline.Fit`, the `CreatePredictionEngine` works well. But after I save/reload it, then it will give the following error\r\n![image](https://user-images.githubusercontent.com/16876986/65083420-5c958700-d95d-11e9-9b98-d4bf3d93736b.png)\r\n\r\nThe code for the pipeline is like this\r\n\r\n```\r\npublic static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n        {\r\n            // Data process configuration with pipeline data transformations \r\n            var dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n                                      .Append(mlContext.Transforms.LoadImages(\"ImagePath_featurized\", @\"C:\\Users\\xiaoyuz\\Desktop\\machinelearning-samples\\datasets\\images\", \"ImagePath\"))\r\n                                      .Append(mlContext.Transforms.ResizeImages(\"ImagePath_featurized\", 224, 224, \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.ExtractPixels(\"ImagePath_featurized\", \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.DnnFeaturizeImage(\"ImagePath_featurized\", m => m.ModelSelector.ResNet18(mlContext, m.OutputColumn, m.InputColumn), \"ImagePath_featurized\"))\r\n                                      .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"ImagePath_featurized\" }))\r\n                                      .Append(mlContext.Transforms.NormalizeMinMax(\"Features\", \"Features\"))\r\n                                      .AppendCacheCheckpoint(mlContext);\r\n            // Set the training algorithm \r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(mlContext.BinaryClassification.Trainers.AveragedPerceptron(labelColumnName: \"Label\", numberOfIterations: 10, featureColumnName: \"Features\"), labelColumnName: \"Label\")\r\n                                      .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n            return trainingPipeline;\r\n        }\r\n```\r\n\r\nAnd `ModelInput` and `ModelOutput` class is like this\r\n```\r\n    public class ModelInput\r\n    {\r\n        [ColumnName(\"Label\"), LoadColumn(0)]\r\n        public string Label { get; set; }\r\n\r\n\r\n        [ColumnName(\"Title\"), LoadColumn(1)]\r\n        public string Title { get; set; }\r\n\r\n\r\n        [ColumnName(\"Url\"), LoadColumn(2)]\r\n        public string Url { get; set; }\r\n\r\n\r\n        [ColumnName(\"ImagePath\"), LoadColumn(3)]\r\n        public string ImagePath { get; set; }\r\n\r\n\r\n    }\r\n```\r\n\r\n```\r\npublic class ModelOutput\r\n    {\r\n        // ColumnName attribute is used to change the column name from\r\n        // its default value, which is the name of the field.\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public String Prediction { get; set; }\r\n        public float[] Score { get; set; }\r\n    }\r\n```\r\n\r\nIt's really wield though. And my description may not be that detailed. If you need further information, please let me know\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4226","RelatedDescription":"Open issue \"`predictionEngine` breaks after saving/loading a Model\" (#4226)"},{"Id":"494867997","IsPullRequest":false,"CreatedAt":"2019-09-17T21:46:45","Actor":"oliverw","Number":"4225","RawContent":null,"Title":"Porting scikit-learn text classification pipeline to ML.Net","State":"open","Body":"I'm trying to port the below scikit-learn pipeline to ML.Net and I have trouble with the `TruncatedSVD` transformer. Is there an equivalent for it in ML.Net and if not, would it be possible to just consume a pre-trained ONNX model?\r\n\r\n```python\r\nfrom sklearn.pipeline import Pipeline, FeatureUnion\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.decomposition import TruncatedSVD\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom xgboost import XGBClassifier\r\n\r\nclassifier = Pipeline([\r\n    ('features', FeatureUnion([\r\n        ('text', Pipeline([\r\n            ('colext', TextSelector('Text')),\r\n            ('tfidf', TfidfVectorizer(tokenizer=Tokenizer, stop_words=stop_words,\r\n                     min_df=.0025, max_df=0.25, ngram_range=(1,3))),\r\n            ('svd', TruncatedSVD(algorithm='randomized', n_components=300)), #for XGB\r\n        ])),\r\n        ('words', Pipeline([\r\n            ('wordext', NumberSelector('TotalWords')),\r\n            ('wscaler', StandardScaler()),\r\n        ])),\r\n    ])),\r\n    ('clf', XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.1)),\r\n    ])\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4225","RelatedDescription":"Open issue \"Porting scikit-learn text classification pipeline to ML.Net\" (#4225)"},{"Id":"494827761","IsPullRequest":false,"CreatedAt":"2019-09-17T20:10:27","Actor":"tbombach","Number":"4224","RawContent":null,"Title":"Ignored columns appear in InputModel from CodeGenerator","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Any\r\n- **.NET Version (eg., dotnet --info)**:  Any\r\n\r\n### Issue\r\nWhen the user specifies ignored columns for CodeGenerator, they should not appear in the InputModel (or PredictProgram output). If the user uses the generated code to train the model again, they will have a different input set and generated model than the first training session.","Url":"https://github.com/dotnet/machinelearning/issues/4224","RelatedDescription":"Open issue \"Ignored columns appear in InputModel from CodeGenerator\" (#4224)"},{"Id":"494783312","IsPullRequest":true,"CreatedAt":"2019-09-17T18:30:20","Actor":"KsenijaS","Number":"4223","RawContent":null,"Title":"Fix memory leak in TensorflowTransform","State":"open","Body":"This PR fixes two memory leaks:\r\n1. After executing the graph, input tensor are not being freed\r\n2. When running multiple pipelines (sessions), graphs are not being freed.\r\n\r\nThis fixes #4134\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4223","RelatedDescription":"Open PR \"Fix memory leak in TensorflowTransform\" (#4223)"},{"Id":"494733076","IsPullRequest":false,"CreatedAt":"2019-09-17T16:40:57","Actor":"zHaytam","Number":"4222","RawContent":null,"Title":"Predict multiple rows","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0.100-preview9-014004\r\n\r\n### Issue\r\n\r\n- **What did you do?** Trained a simple K-Means model\r\n- **What happened?** I wanted to predict multiple rows, but `Predict` only takes 1 instance\r\n- **What did you expect?** An overload that gives this possiblity\r\n\r\n### Source code / logs\r\n\r\n```csharp\r\nvar pipeline = ...;\r\nvar model = pipeline.Fit(data);\r\nvar predictor = mlContext.Model.CreatePredictionEngine<PixelEntry, ClusterPrediction>(model);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4222","RelatedDescription":"Open issue \"Predict multiple rows\" (#4222)"},{"Id":"494510005","IsPullRequest":false,"CreatedAt":"2019-09-17T09:32:08","Actor":"mohsinnasir","Number":"4221","RawContent":null,"Title":"ML.Net Source not building when build.cmd is executed","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0 Preview\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRun Build.cmd\r\n- **What happened?**\r\nD:\\SCM\\machinelearning\\src\\Native>build.cmd\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.2.2\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\n[vcvarsall.bat] Environment initialized for: 'x86_x64'\r\nCommencing native build of dotnet/machinelearning\r\n\r\nCalling \"D:\\SCM\\machinelearning\\src\\Native\\\\gen-buildsys-win.bat\" \"D:\\SCM\\machinelearning\\src\\Native\\\" \"16 2019\" x64\r\nCMake Error: The source directory \"D:/SCM/machinelearning/bin/obj/x64.Debug/Native/2019  -A x64 -B./ -HD:/SCM/machinelearning/src/Native\"\" does not exist.\r\nSpecify --help for usage, or press the help button on the CMake GUI.\r\nFailed to generate native component build project!\r\n- **What did you expect?**\r\nSuccessful completion of build\r\n\r\n### Source code / log\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4221","RelatedDescription":"Open issue \"ML.Net Source not building when build.cmd is executed\" (#4221)"},{"Id":"494446866","IsPullRequest":true,"CreatedAt":"2019-09-17T07:18:02","Actor":"tbombach","Number":"4220","RawContent":null,"Title":"Adding code generation logic to skip generating properties for ignored columns","State":"open","Body":"Adding code generation logic to skip generating properties for ignored columns in the Input Model. Ignored columns are specified by the code gen caller in the `ColumnInferenceResults.ColumnInformation` that is passed to the CodeGenerator.\r\n\r\n- Adding unit tests to verify that ignored columns do not generate properties.\r\n\r\n**Note - I also verified that this change works as expected with a fully generated project.\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\nFixes https://github.com/dotnet/machinelearning/issues/4224","Url":"https://github.com/dotnet/machinelearning/pull/4220","RelatedDescription":"Open PR \"Adding code generation logic to skip generating properties for ignored columns\" (#4220)"},{"Id":"494290176","IsPullRequest":true,"CreatedAt":"2019-09-16T21:39:10","Actor":"harishsk","Number":"4219","RawContent":null,"Title":"Added onnx export support for CopyColumns","State":"open","Body":"Fixes #4218 ","Url":"https://github.com/dotnet/machinelearning/pull/4219","RelatedDescription":"Open PR \"Added onnx export support for CopyColumns\" (#4219)"},{"Id":"494283836","IsPullRequest":false,"CreatedAt":"2019-09-16T21:22:22","Actor":"harishsk","Number":"4218","RawContent":null,"Title":"CopyColumns does not support saving to Onnx","State":"open","Body":"- **What did you do?**\r\nCreated a pipeline from with CopyColumns and tried to export it to Onnx with ConvertToOnnxProtobuf.\r\n\r\n- **What happened?**\r\nThe transform wasn't saved in the onnx graph\r\n\r\n- **What did you expect?**\r\nThe transform should be saved in the onnx graph\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4218","RelatedDescription":"Open issue \"CopyColumns does not support saving to Onnx\" (#4218)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-09-26T05:30:45.4577491Z","RunDurationInMilliseconds":938}