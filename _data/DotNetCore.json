{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":7,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. Security This release contains the following security changes. CVE-2017-8759 &#124; .NET Framework Remote Code Execution Vulnerability A remote code execution vulnerability exists... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null},{"Title":"Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance","PublishedOn":"2017-08-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on &#8220;Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance&#8220;. Just as a reminder, the four introductory blog posts of this series are (or... <a aria-label=\"read more about Mobile Apps with Xamarin.Forms: Architecture and Patterns guidance\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/xamarin-patterns/","RawContent":null},{"Title":"The week in .NET – Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!","PublishedOn":"2017-08-23T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previous posts: .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore Visual Studio extension of the week: Project File Tools The Project File Tools Visual Studio extension provides package name and version IntelliSense, tooltips for... <a aria-label=\"read more about The week in .NET &#8211; Project File Tools, Maira Wenzel, Mixed Reality in Miami, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/23/the-week-in-net-project-file-tools-maira-wenzel-mixed-reality-in-miami-and-links/","RawContent":null},{"Title":".NET Framework Update for AppContext","PublishedOn":"2017-08-18T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"A new update for .NET Framework is now available for the AppContext class. The behavior of the AppContext class was recently regressed. The update returns the class to the correct behavior. This update affects the .NET Framework 4.6 and later. The update is not required on Windows 10. The AppContext class was introduced in the... <a aria-label=\"read more about .NET Framework Update for AppContext\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/18/net-framework-update-for-appcontext/","RawContent":null},{"Title":".NET Framework August 2017 Preview of Quality Rollup","PublishedOn":"2017-08-16T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The August 2017 Preview of Quality Rollup is now available. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Values added to System.Web.Cache expire immediately, with .NET Framework 4.7. [452228] Also reported at ASP.NET Forums #2123507 ASP.NET site running on Sitefinity broken, with .NET Framework 4.7. [457739] CLR CRWLock::StaticAcquireWriterLock() never returns if... <a aria-label=\"read more about .NET Framework August 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/16/net-framework-august-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"The week in .NET – .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!","PublishedOn":"2017-08-15T00:00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Previous posts: Rezoom.SQL, Protobuf in Orlando Nuke, Warden.NET, .NET in Bangalore MIST, F# in NYC .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, and Visual Studio 2017 Update 3 launched! This is a week to celebrate for the .NET community, as .NET Core 2.0, ASP.NET Core 2.0, and Entity Framework 2.0 shipped! We&#8217;re also... <a aria-label=\"read more about The week in .NET &#8211; .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston, and links!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/15/the-week-in-net-net-core-2-0-asp-net-core-2-0-entity-framework-2-0-visual-studio-2017-update-3-enterprise-entity-framework-core-in-boston-and-links/","RawContent":null},{"Title":"F# and .NET Core Roadmap Update","PublishedOn":"2017-08-14T00:00:00","CommentsCount":58,"FacebookCount":0,"Summary":"Now that .NET Core 2.0 has been released, we wanted to take some time to talk about F# and .NET Core. F# and .NET Core 1.0 F# has been supported on .NET Core and .NET Standard since their 1.0 releases. In the months leading up to the release of .NET Core 1.0, Enrico Sada from... <a aria-label=\"read more about F# and .NET Core Roadmap Update\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/14/f-and-net-core-roadmap-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6564921419","Type":"WatchEvent","CreatedAt":"2017-09-08T05:25:54","Actor":"jenniemanphonsy","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6543428196","Type":"ForkEvent","CreatedAt":"2017-09-02T22:28:07","Actor":"ZeroInfinite","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/ZeroInfinite/home-1","RelatedDescription":"Forked dotnet/home to ZeroInfinite/home-1","RelatedBody":null},{"Id":"6542231534","Type":"WatchEvent","CreatedAt":"2017-09-02T02:40:26","Actor":"babtsoualiaksandr","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6532786398","Type":"WatchEvent","CreatedAt":"2017-08-31T01:32:12","Actor":"billpratt","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6530853179","Type":"IssueCommentEvent","CreatedAt":"2017-08-30T16:28:40","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-326045444","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@brentschmaltz I'll send you an email with who to contact."},{"Id":"6530532162","Type":"IssueCommentEvent","CreatedAt":"2017-08-30T15:24:07","Actor":"brentschmaltz","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-326025900","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon we do not.  Can you point us to instructions."},{"Id":"6519322260","Type":"ForkEvent","CreatedAt":"2017-08-28T12:18:48","Actor":"mazong1123","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/mazong1123/home","RelatedDescription":"Forked dotnet/home to mazong1123/home","RelatedBody":null},{"Id":"6517294485","Type":"WatchEvent","CreatedAt":"2017-08-27T21:20:16","Actor":"devdivision","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6515896969","Type":"PushEvent","CreatedAt":"2017-08-26T22:20:19","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/home/compare/a180fed6a0ac6524d36997d505f5f18edfa7c7c9...c37f5bcba25e1389d6683587458c97e6545bd747","RelatedDescription":"Pushed to refs/heads/master at dotnet/home","RelatedBody":null},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896523","Type":"PushEvent","CreatedAt":"2017-08-26T22:19:50","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/home/compare/9ba029eb55a7a9a599829445da338d3b624a4222...a180fed6a0ac6524d36997d505f5f18edfa7c7c9","RelatedDescription":"Pushed to refs/heads/master at dotnet/home","RelatedBody":null},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6508801939","Type":"IssueCommentEvent","CreatedAt":"2017-08-24T18:13:58","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-324714399","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@brentschmaltz - does your team upload symbols for the IdentityModel packages?"},{"Id":"6494201609","Type":"IssueCommentEvent","CreatedAt":"2017-08-21T20:41:20","Actor":"JaredShaver","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323847415","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon It looks like the symbols for ASP.NET Core 2 release are loading now, thank you for getting it sorted out.\r\n\r\nIdentityModel symbols are still missing though, I'm guessing that is another team's responsibility...  Examples:\r\n- Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\r\n- Microsoft.IdentityModel.Tokens.dll\r\n- System.IdentityModel.Tokens.Jwt.dll\r\n- Microsoft.IdentityModel.Logging.dll\r\n- Microsoft.IdentityModel.Protocols.dll"},{"Id":"6487140317","Type":"WatchEvent","CreatedAt":"2017-08-20T03:52:33","Actor":"kopelli","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6483200800","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T19:58:45","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/86#issuecomment-323447413","RelatedDescription":"Commented on issue \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":"\r\n@gep13,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6482114918","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T17:12:14","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323409836","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"Indeed, it appears there might be a problem with the uploaded symbols - we are investigating."},{"Id":"6480034319","Type":"IssueCommentEvent","CreatedAt":"2017-08-18T12:23:43","Actor":"tiandian","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-323339493","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"I tried with the asp.net core 2.1.0-preview1-26636, but it doesn't work, no symbols found."},{"Id":"6477914043","Type":"WatchEvent","CreatedAt":"2017-08-18T05:58:15","Actor":"freeradius-xx","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6470627673","Type":"IssueCommentEvent","CreatedAt":"2017-08-17T09:29:43","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/85#issuecomment-323018168","RelatedDescription":"Commented on issue \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"__@stefanov-stefan__, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\r\n<br />_Thanks, .NET Foundation Pull Request Bot_"},{"Id":"6470589805","Type":"IssueCommentEvent","CreatedAt":"2017-08-17T09:24:17","Actor":"dnfclas","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/pull/85#issuecomment-323016919","RelatedDescription":"Commented on issue \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"\r\n@__stefanov-stefan__,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\n\nIt will cover your contributions to all .NET Foundation-managed open source projects.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6470589367","Type":"PullRequestEvent","CreatedAt":"2017-08-17T09:24:13","Actor":"stefanov-stefan","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Opened pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6466917727","Type":"IssueCommentEvent","CreatedAt":"2017-08-16T20:30:37","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322889774","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver - I believe the ASP.NET/EF Core 2.0.0 symbols should be up now. Please give it a try and let us know. (Please note that source links were not enabled in this build, that's something that's still in our plans for future releases.)"},{"Id":"6466893027","Type":"WatchEvent","CreatedAt":"2017-08-16T20:27:21","Actor":"eallage","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/home","RelatedBody":null},{"Id":"6449908252","Type":"IssueCommentEvent","CreatedAt":"2017-08-14T18:02:06","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322263094","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver the symbols for ASP.NET/EF Core 2.0.0 are being processed, I'll try to update this thread when they're ready."},{"Id":"6449660432","Type":"IssueCommentEvent","CreatedAt":"2017-08-14T16:59:15","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-322246639","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@JaredShaver we're working on it today for ASP.NET Core 2, sorry for the delay!"},{"Id":"6443210301","Type":"IssueCommentEvent","CreatedAt":"2017-08-11T20:33:14","Actor":"JaredShaver","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/home/issues/69#issuecomment-321912151","RelatedDescription":"Commented on issue \"What is the link to debug symbols server of .NET Core?\" (#69) at dotnet/home","RelatedBody":"@Eilon will the symbols be published for ASP.NET Core 2 by the time it releases?  I was unable to download them from the Microsoft symbol server or the http://srv.symbolsource.org/pdb/Public or http://srv.symbolsource.org/pdb/MyGet servers using ASP.NET Core 2 preview 2.  Being able to step into the source was invaluable when implementing OpenID Connect OWIN middleware and I was hoping I could do the same with ASP.NET Core when implementing the new services/middleware pipeline."},{"Id":"6404144202","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:09:52","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/84","RelatedDescription":"Opened issue \"How can we embed images into the .NET foundation website?\" (#84) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding images. I'd prefer to _not to adjust CSP_ policy to add the reactiveui.net and instead have some way to pull-request images into this repository.\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"},{"Id":"6404140964","Type":"IssuesEvent","CreatedAt":"2017-08-07T01:08:17","Actor":"ghuntley","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/83","RelatedDescription":"Opened issue \"Modify CSP policy to allow embedding of youtube videos\" (#83) at dotnet/home","RelatedBody":"The CSP policy on https://dotnetfoundation.org/reactiveui is preventing embedding the ReactiveUI video.\r\n\r\nhttps://developers.google.com/web/fundamentals/security/csp/\r\n\r\n```\r\nchild-src lists the URLs for workers and embedded frame contents. For example: child-src https://youtube.com would enable embedding videos from YouTube but not from other origins. Use this in place of the deprecated frame-src directive.\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/127353/29008831-a28cfee4-7b60-11e7-81e4-46342b074d4b.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6589880144","Type":"WatchEvent","CreatedAt":"2017-09-14T10:35:11","Actor":"jarnmo","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6577489981","Type":"WatchEvent","CreatedAt":"2017-09-12T01:16:42","Actor":"mishrsud","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6573613380","Type":"WatchEvent","CreatedAt":"2017-09-11T09:27:49","Actor":"rmunn","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6571466603","Type":"WatchEvent","CreatedAt":"2017-09-10T14:47:49","Actor":"hszczepanski","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6564889310","Type":"WatchEvent","CreatedAt":"2017-09-08T05:09:28","Actor":"jenniemanphonsy","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6555647773","Type":"WatchEvent","CreatedAt":"2017-09-06T11:09:35","Actor":"naiwenchi","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6553539545","Type":"WatchEvent","CreatedAt":"2017-09-05T23:15:42","Actor":"mrshanahan","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6549938970","Type":"WatchEvent","CreatedAt":"2017-09-05T09:04:22","Actor":"aleksd","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6548382819","Type":"WatchEvent","CreatedAt":"2017-09-04T21:21:41","Actor":"artur-s","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546827410","Type":"WatchEvent","CreatedAt":"2017-09-04T12:09:50","Actor":"bitnot","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546637777","Type":"WatchEvent","CreatedAt":"2017-09-04T11:14:13","Actor":"exoteric","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546520344","Type":"WatchEvent","CreatedAt":"2017-09-04T10:40:20","Actor":"goh-chunlin","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546261556","Type":"WatchEvent","CreatedAt":"2017-09-04T09:33:22","Actor":"mwolicki","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6546221110","Type":"WatchEvent","CreatedAt":"2017-09-04T09:23:28","Actor":"rizamarhaban","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6545815520","Type":"WatchEvent","CreatedAt":"2017-09-04T07:35:41","Actor":"DudePascalou","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6544960980","Type":"WatchEvent","CreatedAt":"2017-09-03T23:42:08","Actor":"jingeno","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6543650373","Type":"WatchEvent","CreatedAt":"2017-09-03T03:03:58","Actor":"bej-syan","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6541935607","Type":"IssuesEvent","CreatedAt":"2017-09-01T22:57:04","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Opened issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https:/github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to [https://github.com/dotnet/standard/issues/481]"},{"Id":"6541854262","Type":"WatchEvent","CreatedAt":"2017-09-01T22:19:59","Actor":"Doomjunky","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6540381488","Type":"WatchEvent","CreatedAt":"2017-09-01T15:13:24","Actor":"aleksejkozin","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6539447659","Type":"WatchEvent","CreatedAt":"2017-09-01T11:16:54","Actor":"SmithsonianDSP","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6538252963","Type":"WatchEvent","CreatedAt":"2017-09-01T04:42:53","Actor":"wrummler","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537795842","Type":"WatchEvent","CreatedAt":"2017-09-01T01:00:15","Actor":"Valyansky","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537750611","Type":"WatchEvent","CreatedAt":"2017-09-01T00:38:31","Actor":"arleypadua","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537728265","Type":"WatchEvent","CreatedAt":"2017-09-01T00:27:54","Actor":"eknowledger","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6537297844","Type":"WatchEvent","CreatedAt":"2017-08-31T21:46:11","Actor":"MathieuDSTP","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6536807371","Type":"WatchEvent","CreatedAt":"2017-08-31T19:39:09","Actor":"tpayne84","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6536471484","Type":"WatchEvent","CreatedAt":"2017-08-31T18:16:56","Actor":"crowchirp","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6535562842","Type":"WatchEvent","CreatedAt":"2017-08-31T15:00:05","Actor":"vai","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null},{"Id":"6535318229","Type":"WatchEvent","CreatedAt":"2017-08-31T14:14:58","Actor":"rarrarrarr","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/announcements","RelatedBody":null}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6593973870","Type":"IssuesEvent","CreatedAt":"2017-09-15T05:19:16","Actor":"cscer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13968","RelatedDescription":"Closed issue \"cn-win7 ,error on load System.Private.CoreLib\" (#13968) at dotnet/coreclr","RelatedBody":"Assert Failure\r\nExpression: [Recursive resource lookup bug]\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib. This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names. Resource name: Argument_AbsolutePathRequired\r\nStack Trace:\r\nat System.SR.InternalGetResourceString(String key)\r\nat System.SR.GetResourceString(String resourceKey, String defaultString)\r\nat System.Reflection.Assembly.LoadFile(String path)\r\n\r\nwhere is the file System.Private.CoreLib.resource"},{"Id":"6593971268","Type":"PushEvent","CreatedAt":"2017-09-15T05:17:55","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/443380c17b36344781fe3081e722e6dca09e92e8...39b88c3878a41bc226139348c9a648228f75923e","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6593970990","Type":"PullRequestEvent","CreatedAt":"2017-09-15T05:17:46","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13976","RelatedDescription":"Merged pull request \"Change delegation in {Unmanaged}MemoryStream.Read/WriteAsync(Memory)\" (#13976) at dotnet/coreclr","RelatedBody":"Read/WriteAsync(Memory) on MemoryStream and UnmanagedMemoryStream need to delegate to one of the existing virtual methods, in case an existing stream has overridden the virtuals in order to change or augment the behavior (e.g. checking on each write to ensure the length doesn't exceed some amount).  Currently these delegate to the synchronous Read/Write(Span) methods.  The problem with that is, for exactly the case where there is a derived class, Read/Write(Span) themselves need to delegate to Read/Write(byte[]), which means they use ArrayPool and copy.  But with a {ReadOnly}Memory, we may already have access to the underlying array, in which case we're going from an array to a span and back to different rented array along with an unnecessary copy.  To address that, this commit changes the delegation to prefer Read/Write(byte[],...) if possible, falling back to Read/Write(Span) only if we couldn't get an array from the Memory.\r\n\r\ncc: @KrzysztofCwalina, @ahsonkhan, @jkotas "},{"Id":"6593964105","Type":"WatchEvent","CreatedAt":"2017-09-15T05:14:22","Actor":"yovanycunha","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/coreclr","RelatedBody":null},{"Id":"6593942570","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:03:18","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13942#issuecomment-329682139","RelatedDescription":"Commented on issue \"[Arm64/Unix] Crossgen Microsoft.CodeAnalysis.dll segmentation fault\" (#13942) at dotnet/coreclr","RelatedBody":"Yeah, this is code I added recently. Will take a look."},{"Id":"6593932947","Type":"PushEvent","CreatedAt":"2017-09-15T04:58:21","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/ee12aaff992267334598c02b92eeaa78c6f9d284...443380c17b36344781fe3081e722e6dca09e92e8","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6593932713","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:58:13","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13988","RelatedDescription":"Merged pull request \"JIT: Use AllocObj for box allocations\" (#13988) at dotnet/coreclr","RelatedBody":"Model box object allocations using the AllocObj tree node. Update\r\nthe box deconstruction utility to compensate.\r\n\r\nAlso set the OMF_HAS_NEWOBJ flag when we generate Box IR; this both\r\nfixes an oversight from before and is a necessary step to trigger the\r\nmorphing of AllocObj into a helper call.\r\n\r\nNo diffs.\r\n\r\nCloses #13905."},{"Id":"6593932711","Type":"IssuesEvent","CreatedAt":"2017-09-15T04:58:13","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13905","RelatedDescription":"Closed issue \"Stack alloc prototype missed converting the newobjs from boxes\" (#13905) at dotnet/coreclr","RelatedBody":"The work in #6653 to encapsulate object heap allocation in the JIT IR missed one important case: the new objects created by boxing.\r\n\r\nThere should be a call to `gtNewAllocObjNode` in `impImportAndPushBox` in place of the generic `gtNewHelperCallNode`."},{"Id":"6593886957","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:36:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14006","RelatedDescription":"Opened pull request \"Move List to shared partition\" (#14006) at dotnet/coreclr","RelatedBody":""},{"Id":"6593878046","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:32:25","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14005#issuecomment-329678695","RelatedDescription":"Commented on issue \"Delete JitHelpers.UnsafeCast\" (#14005) at dotnet/coreclr","RelatedBody":"Thanks!"},{"Id":"6593849924","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:17:48","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14005","RelatedDescription":"Opened pull request \"Delete JitHelpers.UnsafeCast\" (#14005) at dotnet/coreclr","RelatedBody":"Second occurrence; follow up to https://github.com/dotnet/coreclr/pull/13963\r\n\r\n/cc @jkotas "},{"Id":"6593839123","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:12:13","Actor":"mjsabby","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/12714#issuecomment-329676207","RelatedDescription":"Commented on issue \"calli with default cc should not be prevented from being considered as an inline candidate\" (#12714) at dotnet/coreclr","RelatedBody":"Sorry for not responding here ealirer, had to get some family stuff sorted out. the dynamic check was there because it seemed like calling findSig on the dynamic method failed with an ASSERT. But I suppose things are good if it passed desktop testing."},{"Id":"6593823537","Type":"PushEvent","CreatedAt":"2017-09-15T04:04:02","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/coreclr/compare/a125c235c58f935c7bca27c7b0616be2e647a7e1...ee12aaff992267334598c02b92eeaa78c6f9d284","RelatedDescription":"Pushed to refs/heads/master at dotnet/coreclr","RelatedBody":null},{"Id":"6593823263","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:03:54","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974","RelatedDescription":"Merged pull request \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"This is makes it work for CoreRT, and faster for everybody (avoids JIT/EE call)."},{"Id":"6593822409","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:03:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329674787","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"@hqueue Thank you!"},{"Id":"6593818048","Type":"WatchEvent","CreatedAt":"2017-09-15T04:01:18","Actor":"zhaobingwang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/coreclr","RelatedBody":null},{"Id":"6593813650","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:59:21","Actor":"hqueue","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329673981","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"Following tests are PASSED with RyuJIT arm.\r\n```\r\n    --testDir=JIT/CodeGenBringUpTests/ \\\r\n    --testDir=JIT/jit64/hfa/main/testA/ \\\r\n    --testDir=JIT/Methodical/tailcall_v4/ \\\r\n    --testDir=JIT/Methodical/Invoke/ \\\r\n    --testDir=Interop/ \\\r\n    --testDir=CoreMangLib/system/ \\\r\n    --testDir=JIT/Regression/JitBlue/ \\\r\n```"},{"Id":"6593791774","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:49:07","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14004#issuecomment-329672823","RelatedDescription":"Commented on issue \"Disable tiered compilation for dynamic methods\" (#14004) at dotnet/coreclr","RelatedBody":"LGTM, modulo any CI issues. "},{"Id":"6593782955","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:44:57","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329672335","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"@dotnet-bot test Ubuntu x64 Formatting please"},{"Id":"6593748300","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:28:49","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/issues/7447#issuecomment-329670320","RelatedDescription":"Commented on issue \"RyuJit: avoid conditional jumps using cmov and similar instructions\" (#7447) at dotnet/coreclr","RelatedBody":"> You jumped in and suggested something that defies the standard language behavior and is not really needed.\r\n\r\nI would say that it is needed, in order to produce more performant code, for the cases it is necessary (or desired).\r\n\r\nThe JIT has its own rules for safety (null checks, range checks, etc). There are certainly ways around this (such as using unsafe code), but the JIT already has trouble generating optimal code in a timely manner and some of the analysis will be impossible to do in the timeframe allotted. Doing things that are \"out of the ordinary\" probably won't help with generating optimal code.\r\n\r\nThe general response to this is to use AOT (which isn't always available) or write it in native code (which has its own overhead for p/invoke, or can have other issues if you are writing pure native code). Adding new IL instructions is also not very \"viable\" as it sets a new bar, breaks back-compat, requires compiler support to generate the code, etc.\r\n\r\nSo the remaining options are:\r\n* Just live with it\r\n* Provide special intrinsic functionality\r\n\r\nI'd rather not \"Just live with it\", so to me, that just leaves providing special intrinsics. Doing this, is not a new concept, many modern compilers provide some form of intrinsics or compiler hints to help produce better codegen.\r\n\r\nToday, we provide several intrinsics, but they are intrinsic via implementation detail rather than intrinsic via contract (`Math.Sqrt` is implementation detail, `Sse2.Sqrt` will be by contract). We also provide `hints` in the form of `MethodImplOptions`, but that is really only used for forcing or preventing inlining (and, as a hint, it isn't always respected).\r\n\r\nAs most intrinsics and hints, they would end up producing \"unsafe\" code that does not necessarily follow the language spec. Instead, they are designed for performance and place the burden on the end-user to ensure that what they are doing is \"safe\".\r\n\r\nSomething like a `Select` method or `ElideBoundsChecks` hint are just the type of things that would allow `condition ? a[5] : b[6]` to be emitted as\r\n```asm\r\nadd     rdx, 20\r\nlea     rax, qword ptr [r8 + 24]\r\ntest    cl,  cl\r\ncmovne  rax, rdx\r\nmov     eax, dword ptr [rax]\r\nret     0\r\n```\r\n\r\nrather than as:\r\n```asm\r\n00007FFA2B0F0570  sub         rsp,28h  \r\n00007FFA2B0F0574  test        cl,cl  \r\n00007FFA2B0F0576  jne         00007FFA2B0F0588  \r\n00007FFA2B0F0578  cmp         dword ptr [r8+8],6  \r\n00007FFA2B0F057D  jbe         00007FFA2B0F0596  \r\n00007FFA2B0F057F  mov         eax,dword ptr [r8+28h]  \r\n00007FFA2B0F0583  add         rsp,28h  \r\n00007FFA2B0F0587  ret\r\n00007FFA2B0F0588  cmp         dword ptr [rdx+8],5  \r\n00007FFA2B0F058C  jbe         00007FFA2B0F0596  \r\n00007FFA2B0F058E  mov         eax,dword ptr [rdx+24h]  \r\n00007FFA2B0F0591  add         rsp,28h  \r\n00007FFA2B0F0595  ret\r\n00007FFA2B0F0596  call        00007FFA8AD264D0  \r\n00007FFA2B0F059B  int         3\r\n```\r\n\r\nor worse, as:\r\n```asm\r\n00007FFA2B0D0500  sub         rsp,28h  \r\n00007FFA2B0D0504  cmp         dword ptr [rdx+8],5  \r\n00007FFA2B0D0508  jbe         00007FFA2B0D0527  \r\n00007FFA2B0D050A  mov         eax,dword ptr [rdx+24h]  \r\n00007FFA2B0D050D  cmp         dword ptr [r8+8],6  \r\n00007FFA2B0D0512  jbe         00007FFA2B0D0527  \r\n00007FFA2B0D0514  mov         edx,dword ptr [r8+28h]  \r\n00007FFA2B0D0518  test        cl,cl  \r\n00007FFA2B0D051A  jne         00007FFA2B0D051E  \r\n00007FFA2B0D051C  jmp         00007FFA2B0D0520  \r\n00007FFA2B0D051E  mov         edx,eax  \r\n00007FFA2B0D0520  mov         eax,edx  \r\n00007FFA2B0D0522  add         rsp,28h  \r\n00007FFA2B0D0526  ret  \r\n00007FFA2B0D0527  call        00007FFA8AD264D0  \r\n00007FFA2B0D052C  int         3\r\n```\r\n\r\nNOTE: The last block here is actually generated when inlining a select call (which does `return condition ? trueValue : falseValue`) into a method that does `return Select(condition, a[5], b[6])`, when the first block should probably be generated instead. The difference being, whether both range checks are done first, or whether only one range check is done, and only when it is actually neeeded. The former works for null a (on false) or null b (on true). The latter fails for null a or null b, regardless of condition. It is also worth noting that the former is generated when the select call is manually inlined.\r\n\r\nNow this is almost turning (if it hasn't already) into new proposal territory, so I'll take my grumbling elsewhere"},{"Id":"6593738228","Type":"WatchEvent","CreatedAt":"2017-09-15T03:24:21","Actor":"saifnoorprottoy","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/coreclr","RelatedBody":null},{"Id":"6593662344","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:49:49","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14004#issuecomment-329664903","RelatedDescription":"Commented on issue \"Disable tiered compilation for dynamic methods\" (#14004) at dotnet/coreclr","RelatedBody":"@janvorli @brianrob @davmason - quick review?"},{"Id":"6593660984","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:49:12","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14004","RelatedDescription":"Opened pull request \"Disable tiered compilation for dynamic methods\" (#14004) at dotnet/coreclr","RelatedBody":"Fixing an oversight from earlier, tiered compilation isn't designed to handle dynamic methods yet because of their limited lifetime. There may be other issues but a basic one would be having the method get collected while its MethodDesc is in the tiered compilation queue which results in use after free memory issues."},{"Id":"6593643763","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T02:41:38","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14003#discussion_r139053119","RelatedDescription":"Commented on pull request \"Fix test StackCommitCommon\" (#14003) at dotnet/coreclr","RelatedBody":"You may wan to throw no-inline here for a good measure as well."},{"Id":"6593632372","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:36:39","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14003#issuecomment-329662334","RelatedDescription":"Commented on issue \"Fix test StackCommitCommon\" (#14003) at dotnet/coreclr","RelatedBody":"@RussKeldorph @davmason @adityamandaleeka - could someone kindly review this?\r\n\r\nIts another issue I found while running our tests under minopts jitting mode."},{"Id":"6593627881","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:34:40","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14003","RelatedDescription":"Opened pull request \"Fix test StackCommitCommon\" (#14003) at dotnet/coreclr","RelatedBody":"This test will hang if run with non-optimized jitted code because it takes a dependency on exactly when locally allocated objects go out of scope. Although I doubt CLI spec guarantees the new code will always work either, it does work with the runtime/JIT as currently implemented."},{"Id":"6593568559","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:08:35","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13998#issuecomment-329657884","RelatedDescription":"Commented on issue \"Fix devdiv 491210\" (#13998) at dotnet/coreclr","RelatedBody":"Ubuntu failures are CI related. Will test locally."},{"Id":"6593566408","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:07:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329657762","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"`Possible issue connecting to GitHub or cloning the repository. This could be caused by a lack of network connectivity or a lack of disk space. Please email netciadmin. Error cloning remote repo 'origin'`\r\n\r\ncc @dotnet/dnceng "},{"Id":"6593561241","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:05:37","Actor":"hqueue","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329657505","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"@jkotas I see.  I will run some tests locally and let you know before whole tests finishes."},{"Id":"6593556737","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:03:43","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/coreclr/pull/13974#issuecomment-329657273","RelatedDescription":"Commented on issue \"Update logic in arm CodeGen::genCallInstruction to match xarch version\" (#13974) at dotnet/coreclr","RelatedBody":"@dotnet-bot test Tizen armel Cross Debug Build please"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6593943927","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:04:00","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7662#issuecomment-329682214","RelatedDescription":"Commented on issue \"Replace with all linux distros badge\" (#7662) at dotnet/cli","RelatedBody":"@dotnet-bot test Ubuntu16.04 x64 Debug Build "},{"Id":"6593861419","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:23:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7662","RelatedDescription":"Opened pull request \"Replace with all linux distros badge\" (#7662) at dotnet/cli","RelatedBody":"CheckIfAllBuildsHavePublished need to be change accordingly due to the all linux distro lag change"},{"Id":"6593633175","Type":"PushEvent","CreatedAt":"2017-09-15T02:37:00","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/cli/compare/f6fda26ec8c070b7528f12515f65ea7ed635d2b7...7c64ef6b0e8a1330a5164fe1d80085d2f06a69bf","RelatedDescription":"Pushed to refs/heads/master at dotnet/cli","RelatedBody":null},{"Id":"6593633086","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:36:58","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7660","RelatedDescription":"Merged pull request \"Move badge prop to target\" (#7660) at dotnet/cli","RelatedBody":"To have the correct IsBuildingAndPublishingAllLinuxDistrosNativeInstallers value\r\n"},{"Id":"6593586305","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:16:12","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7606#issuecomment-329659510","RelatedDescription":"Commented on issue \"Update CoreSetup to preview1-25714-02 (master)\" (#7606) at dotnet/cli","RelatedBody":"No it doesn't.\r\nWe just got a CoreCLR build out with @JosephTremoulet's change an hour ago.  I just merged that into core-setup https://github.com/dotnet/core-setup/pull/3222.\r\n\r\nSo the next build of core-setup should have the fix.\r\n"},{"Id":"6593576497","Type":"WatchEvent","CreatedAt":"2017-09-15T02:12:00","Actor":"YukiYamashina","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/cli","RelatedBody":null},{"Id":"6593559633","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:04:56","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7660#issuecomment-329657437","RelatedDescription":"Commented on issue \"Move badge prop to target\" (#7660) at dotnet/cli","RelatedBody":"@dotnet-bot test Windows_NT x86 Debug Build "},{"Id":"6593557946","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:04:15","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7660#issuecomment-329657336","RelatedDescription":"Commented on issue \"Move badge prop to target\" (#7660) at dotnet/cli","RelatedBody":"@dotnet-bot test Linux x64 Release Build "},{"Id":"6593455340","Type":"IssuesEvent","CreatedAt":"2017-09-15T01:17:56","Actor":"kkpoon","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7661","RelatedDescription":"Opened issue \"Mac version generates files with Windows newline\" (#7661) at dotnet/cli","RelatedBody":"it will mess up while the git enables autocrlf\r\n\r\n## Steps to reproduce\r\n\r\ndotnet new sln\r\n\r\n## Expected  behavior\r\n\r\na solution file with git friendly newline\r\n\r\n## Actual behavior\r\n\r\na solution file with windows newline\r\n\r\n```diff\r\n Microsoft Visual Studio Solution File, Format Version 12.00\r\n-# Visual Studio 2012\r\n-Project(\"{f2a71f9b-5d33-465a-a702-920d77279786}\") = \"HelloService\", \"HelloService\\HelloService.fsproj\", \"{35F4CAAD-FB1C-4904-8835-5E531737311E}\"\r\n+# Visual Studio 15^M\r\n+VisualStudioVersion = 15.0.26124.0^M\r\n+MinimumVisualStudioVersion = 15.0.26124.0^M\r\n+Project(\"{6EC3EE1D-3C4E-46DD-8F32-0CC8E7565705}\") = \"HelloService\", \"HelloService\\HelloService.fsproj\", \"{B7559ADD-77E4-4914-9A35-F1ECD66A4985}\"^M\r\n EndProject\r\n Global\r\n        GlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n                Debug|Any CPU = Debug|Any CPU\r\n+               Debug|x64 = Debug|x64^M\r\n+               Debug|x86 = Debug|x86^M\r\n                Release|Any CPU = Release|Any CPU\r\n+               Release|x64 = Release|x64^M\r\n+               Release|x86 = Release|x86^M\r\n+       EndGlobalSection^M\r\n+       GlobalSection(SolutionProperties) = preSolution^M\r\n+               HideSolutionNode = FALSE^M\r\n        EndGlobalSection\r\n        GlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n-               {35F4CAAD-FB1C-4904-8835-5E531737311E}.Release|Any CPU.Build.0 = Release|Any CPU\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|Any CPU.ActiveCfg = Debug|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|Any CPU.Build.0 = Debug|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x64.ActiveCfg = Debug|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x64.Build.0 = Debug|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x86.ActiveCfg = Debug|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Debug|x86.Build.0 = Debug|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|Any CPU.ActiveCfg = Release|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|Any CPU.Build.0 = Release|Any CPU^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x64.ActiveCfg = Release|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x64.Build.0 = Release|x64^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x86.ActiveCfg = Release|x86^M\r\n+               {B7559ADD-77E4-4914-9A35-F1ECD66A4985}.Release|x86.Build.0 = Release|x86^M\r\n        EndGlobalSection\r\n EndGlobal\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"6593345574","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:26:51","Actor":"ahsonkhan","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7606#issuecomment-329643978","RelatedDescription":"Commented on issue \"Update CoreSetup to preview1-25714-02 (master)\" (#7606) at dotnet/cli","RelatedBody":"Does `<CLI_SharedFrameworkVersion>2.1.0-preview1-25714-02</CLI_SharedFrameworkVersion>` have @JosephTremoulet's JIT fix? F# tests are still failing."},{"Id":"6593310990","Type":"PullRequestEvent","CreatedAt":"2017-09-15T00:10:59","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7660","RelatedDescription":"Opened pull request \"Move badge prop to target\" (#7660) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"6593308000","Type":"IssuesEvent","CreatedAt":"2017-09-15T00:09:45","Actor":"Eilon","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7656","RelatedDescription":"Closed issue \"dotnet run with windows authentication and without httpsys or weblistener\" (#7656) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Start a new dotnet 2.0 project with windows authentication.\r\n2. dotnet run\r\n\r\n## Expected  behavior\r\nShould authenticate user.\r\n\r\nIs windows authentication not supported without httpsys or weblistener?\r\nHow are you supposed to develop locally when you deploy your app in IIS without httpsys or weblistener. Am I forced to use iis express?! :(\r\n\r\n## Actual behavior\r\nShould authenticate user! ;)\r\n\r\n## Environment data\r\n2.0"},{"Id":"6593307997","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:09:45","Actor":"Eilon","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7656#issuecomment-329641949","RelatedDescription":"Commented on issue \"dotnet run with windows authentication and without httpsys or weblistener\" (#7656) at dotnet/cli","RelatedBody":"This issue was moved to aspnet/Security#1432"},{"Id":"6593214190","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T23:31:07","Actor":"jp2masa","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7536#issuecomment-329636366","RelatedDescription":"Commented on issue \"Added dotnet list package command\" (#7536) at dotnet/cli","RelatedBody":"I only translated one of the strings, I translated the languages I know, for the other ones I used google translator and compared with other similar strings to get the most accurate translation possible. Also, there were two small innacuracies in languages I know, which I fixed, but I'll revert the translation changes because it really makes sense to focus on one issue per PR."},{"Id":"6593189554","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T23:21:14","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/pull/7536#issuecomment-329634893","RelatedDescription":"Commented on issue \"Added dotnet list package command\" (#7536) at dotnet/cli","RelatedBody":"Hi @jp2masa sorry for the delay. yes, you will need to revert all change in .xlf files (including new xlf)\r\n\r\nThese xlf file will have right \"need translate here\" and be hand over to localisation team later. (Just curious you translated to all these language yourself?) "},{"Id":"6593153686","Type":"PullRequestEvent","CreatedAt":"2017-09-14T23:07:14","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7659","RelatedDescription":"Opened pull request \"Checkin corefx editorconfig\" (#7659) at dotnet/cli","RelatedBody":"https://github.com/dotnet/corefx/blob/master/.editorconfig\r\n\r\nThe suggestion from VS can be much better. And I removed the rule of static type need s_ in the beginning"},{"Id":"6593084670","Type":"PushEvent","CreatedAt":"2017-09-14T22:42:13","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/cli/compare/221ab0534645df7208cf936e20c7764b81e9fbee...f6fda26ec8c070b7528f12515f65ea7ed635d2b7","RelatedDescription":"Pushed to refs/heads/master at dotnet/cli","RelatedBody":null},{"Id":"6593084601","Type":"PullRequestEvent","CreatedAt":"2017-09-14T22:42:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7658","RelatedDescription":"Merged pull request \"Fix missing Badges\" (#7658) at dotnet/cli","RelatedBody":"By setting IsBuildingAndPublishingAllLinuxDistrosNativeInstallers in right order"},{"Id":"6593058394","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:33:15","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3124","RelatedDescription":"Closed issue \"Install tooling preview for visual studio 2015 enterprice\" (#3124) at dotnet/cli","RelatedBody":"error:\nProduct: Microsoft .NET Core Tools 2015 (Preview 1) - Visual Studio 2015 -- Error 1335. The cabinet file 'VisualStudioDotNetToolsSetup.cab' required for this installation is corrupt and cannot be used. This could indicate a network error, an error reading from the CD-ROM, or a problem with this package.\n\nwhy?help me please.\n"},{"Id":"6593056951","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:32:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3173","RelatedDescription":"Closed issue \"dotnet-test-xunit aborts after failure\" (#3173) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\nSetup a test project with some _failing_ tests and some passing tests.\n\n``` json\n    \"frameworks\": {\n        \"netcoreapp1.0\": {\n            \"imports\": [ \"dnxcore50\", \"portable-net45+win8\" ],\n            \"dependencies\": {\n                \"xunit\": \"2.1.0\",\n                \"dotnet-test-xunit\": \"1.0.0-rc2-192208-24\"\n            }\n        }\n    },\n\n    \"testRunner\": \"xunit\",\n\n    \"runtimes\": {\n        \"ubuntu.14.04-x64\": { },\n        \"centos.7.1-x64\": { },\n        \"win7-x64\": { },\n        \"win81-x64\": { },\n        \"win10-x64\": { },\n        \"osx.10.11-x64\": { }\n    }\n```\n\n``` sh\ndotnet restore\ndotnet test -xml results.xml -parallel none\n```\n## Expected  behavior\n\n1) The failing tests (plural) to be reported as such\n2) The passing tests to be be reported as such\n3) the XML report file to be created\n## Actual behavior\n\nThe runner aborts with `SUMMARY: Total: 1 targets, Passed: 0, Failed: 1.` but does not say which test(s) failed, nor does it create the requested XML report.\n\n_Everything works as expected if all the tests pass._\n\nUsing the `-verbose` switch, it is clear that the runner executes tests, and as soon as it has executed the first failing test, it stops executing tests.\n## Environment data\n\n`dotnet --info` output:\n\n```\n.NET Command Line Tools (1.0.0-rc2-002538)\n\nProduct Information:\n Version:     1.0.0-rc2-002538\n Commit Sha:  b98bc1289d\n\nRuntime Environment:\n OS Name:     ubuntu\n OS Version:  14.04\n OS Platform: Linux\n RID:         ubuntu.14.04-x64\n```\n\n/cc @livarcocc \n"},{"Id":"6593054987","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:32:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3360","RelatedDescription":"Closed issue \"An item with the same key has already been added. Key: System.Runtime Unspecified\" (#3360) at dotnet/cli","RelatedBody":"## Steps to reproduce\n\nInstall the following Serilog packages into a web project targeting `net451` (from file/new) is fine:\n\n```\n\"Serilog.Settings.Configuration\": \"2.0.0-rc-8\",\n```\n## Expected  behavior\n\nA better error message would be handy. There was a bit of trouble figuring out how to fix the issue with in another serilog project. See https://github.com/serilog/serilog-extensions-logging/issues/38\n## Actual behavior\n\nBuild fails with `An item with the same key has already been added. Key: System.Runtime Unspecified`\n## Environment data\n\n`dotnet --info` output:\n\n```\n.NET Command Line Tools (1.0.0-preview1-002702)\n\nProduct Information:\n Version:     1.0.0-preview1-002702\n Commit Sha:  6cde21225e\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n```\n"},{"Id":"6593054943","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:32:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/3360#issuecomment-329626918","RelatedDescription":"Commented on issue \"An item with the same key has already been added. Key: System.Runtime Unspecified\" (#3360) at dotnet/cli","RelatedBody":"Closing since we haven't heard back in a long time."},{"Id":"6593052838","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:31:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/3391","RelatedDescription":"Closed issue \"Exclude folder from deploy\" (#3391) at dotnet/cli","RelatedBody":"I want to exclude a folder for deployment and I cant find a way to do so.\n\nI have a folder 'logs' that I dont want to delete/update/add when i deploy, but i want to delete/update/add everything else.\n\nRight now because in my publish doesnt exist the folder 'logs'(is excluded in publish) it will delete the folder in the server when deployed.\n\nThanks for your time.\n"},{"Id":"6593052821","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:31:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/3391#issuecomment-329626800","RelatedDescription":"Commented on issue \"Exclude folder from deploy\" (#3391) at dotnet/cli","RelatedBody":"This issue was moved to aspnet/websdk#239"},{"Id":"6593047059","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:29:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6619","RelatedDescription":"Closed issue \"Fail to restore a dotnet netstandard 2.0 classlib with latest preview 2 build (6082)\" (#6619) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall the latest toolset 2.0.0-preview2-006082 using the windows installer.\r\nOpen a command line prompt and type:\r\n * dotnet new classlib\r\n * dotnet restore\r\n\r\n## Expected  behavior\r\nExpected behavior is that the restore should succeed with no errors\r\n\r\n## Actual behavior\r\nRestore fails with the following error:\r\nRunning 'dotnet restore' on C:\\source\\dev\\test\\test.csproj...\r\nRestore failed.\r\nOutput from command:\r\n  Restoring packages for C:\\source\\dev\\test\\test.csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006082\\NuGet.targets(98,5): error : Unable to resolve 'NETStandard.Library (>= 2.0.0-preview2-25303-01)' for '.NETStandard,Version=v2.0'. [C:\\source\\dev\\test\\test.csproj]\r\n  Generating MSBuild file C:\\source\\dev\\test\\obj\\test.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\source\\dev\\test\\obj\\test.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\source\\dev\\test\\obj\\project.assets.json\r\n  Restore failed in 284.7 ms for C:\\source\\dev\\test\\test.csproj.\r\n\r\n  Errors in C:\\source\\dev\\test\\test.csproj\r\n      Unable to resolve 'NETStandard.Library (>= 2.0.0-preview2-25303-01)' for '.NETStandard,Version=v2.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\(xxxUserxxx)\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\Users\\(xxxUserxxx)\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nC:\\source\\dev\\test>dotnet --info\r\n.NET Command Line Tools (2.0.0-preview2-006082)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006082\r\n Commit SHA-1 hash:  6453cb4e15\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006082\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25309-07\r\n  Build    : 41f5fc94eedc889f086800c23f35bf14a8c75a9f\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6593023995","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:22:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6858","RelatedDescription":"Closed issue \"Latest bits on OSX crash for dotnet test\" (#6858) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nRun `dotnet test` on a project, it will crash with \r\n```\r\nUnhandled Exception: System.BadImageFormatException: \r\nCould not load file or assembly '/usr/local/share/dotnet/sdk/2.1.0-preview1-006329/vstest.console.dll'. \r\nAn attempt was made to load a program with an incorrect format.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.0-preview1-006329)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-006329\r\n Commit SHA-1 hash:  defa3c3973\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.0-preview1-006329/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview2-25407-01\r\n  Build    : 40c565230930ead58a50719c0ec799df77bddee9\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6593023975","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:22:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/6858#issuecomment-329625101","RelatedDescription":"Commented on issue \"Latest bits on OSX crash for dotnet test\" (#6858) at dotnet/cli","RelatedBody":"This should be fixed now. We are running that multiple times from our own builds in master. Please, re-activate or comment if you run into this again.\r\n\r\nThough, the error you are reporting above, usually indicate the wrong bitness between the host and the app being run."},{"Id":"6593004633","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:16:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7654","RelatedDescription":"Closed issue \"dotnet fails with error: api-ms-win-crt-runtime-l1-1-0.dll is missing.\" (#7654) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nStart with a clean machine configured with: Win 8.1 x64 ESN OS\r\nInstall CLI 2.0 RTW\r\n\r\n## Expected  behavior\r\ndotnet commands execute properly.\r\n\r\n## Actual behavior\r\nRunning dotnet with any (or no) options fails, pops up an error dialog containing: \"The program can not start because api-ms-win-crt-runtime-l1-1-0.dll is missing on the computer. Try reinstalling the program to correct this problem.\"\r\n\r\n![image](https://user-images.githubusercontent.com/20912881/30446835-26e7846a-993f-11e7-9129-127732ccb614.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nN/A - running `dotnet --info` fails with the same error.\r\n\r\n\r\n\r\n\r\n"},{"Id":"6593004616","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:16:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7654#issuecomment-329623983","RelatedDescription":"Commented on issue \"dotnet fails with error: api-ms-win-crt-runtime-l1-1-0.dll is missing.\" (#7654) at dotnet/cli","RelatedBody":"This issue was moved to dotnet/core-setup#3220"},{"Id":"6592998808","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:14:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/cli/issues/7657#issuecomment-329623657","RelatedDescription":"Commented on issue \"dotnet.exe should support response files like csc.exe, msbuild.exe\" (#7657) at dotnet/cli","RelatedBody":"We can not get this is for 15.5, but we will take the feature into consideration for a future release.\r\n\r\ncc @KathleenDollard "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6593262849","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T23:51:04","Actor":"johnstairs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/439#issuecomment-329639247","RelatedDescription":"Commented on issue \".NET Standard 2.0 is final\" (#439) at dotnet/standard","RelatedBody":"@skorunka, you need to use nuget 4.3.0. You can have VSTS use it by including the \"Nuget Tool Installer\" task before the nuget restore task."},{"Id":"6592952439","Type":"IssuesEvent","CreatedAt":"2017-09-14T22:00:23","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Closed issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app, but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nPlease know we also tried different combinations of including the System.Runtime package, without result.  \r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6592952426","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T22:00:23","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/493#issuecomment-329620937","RelatedDescription":"Commented on issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"Fellow Geeks,\r\n\r\nI was able to correct this problem by removing the existing references to MSTest and adding the following (prerelease) packages:\r\n- Microsoft.NET.Test.Sdk\r\n- MSTest.TestAdapter\r\n- MSTest.TestFramework\r\n\r\nSee [https://github.com/dotnet/sdk/issues/901](url) and [https://stackoverflow.com/questions/42861930/unit-tests-not-discovered-in-visual-studio-2017/44338786#44338786](url) for additional information.  \r\n\r\nNOTE: adding <RestoreProjectStyle>PackageReference</RestoreProjectStyle> as described in the first link did not solve the problem.\r\n\r\nThanks,\r\n\r\nStephen\r\n"},{"Id":"6592453949","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T19:56:45","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329591542","RelatedDescription":"Commented on issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"I'm not ignoring the questions, I was still focusing on data gathering mode. Code isn't quite ready to be consumed. I can try your changes today.\n\nFrom: Eric StJohn<mailto:notifications@github.com>\nSent: Friday, September 15, 2017 1:58 AM\nTo: dotnet/standard<mailto:standard@noreply.github.com>\nCc: David Kean<mailto:David.Kean@microsoft.com>; Mention<mailto:mention@noreply.github.com>\nSubject: Re: [dotnet/standard] Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time (#442)\n\n\n@davkean<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdavkean&data=02%7C01%7CDavid.Kean%40microsoft.com%7Cd06f228a7a6f498c1e5f08d4fb897861%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636410015230316233&sdata=82ssCgIC9IrfO001kSUvIJi5ZYK5s2kCvIBVf%2FlJ%2Fss%3D&reserved=0> you need to either provide this tool or test the proposed fix to tell us if it resolves the issue. Note that the fix I've provided also addresses the last item.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fstandard%2Fissues%2F442%23issuecomment-329528112&data=02%7C01%7CDavid.Kean%40microsoft.com%7Cd06f228a7a6f498c1e5f08d4fb897861%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636410015230316233&sdata=ZJFVOiOLyXH5XElXJ9R9RyfEfhi72gqDuWbFNpAjZn8%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FABDYIp4Vpm-l2ie0K4KvgxreJeUJ9UX1ks5siU0wgaJpZM4O3N24&data=02%7C01%7CDavid.Kean%40microsoft.com%7Cd06f228a7a6f498c1e5f08d4fb897861%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636410015230316233&sdata=QUC23UpMm7fahsU%2FIqumoz4FYIjUsdIKzJuDhGK6E7Q%3D&reserved=0>.\n"},{"Id":"6592432642","Type":"IssuesEvent","CreatedAt":"2017-09-14T19:51:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Closed issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nNote: This is the most expensive condition in the entire build and give it only runs for .NET Standard projects it's overhead will be higher for a solution containing only .NET Standard projects.\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6592432639","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T19:51:36","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/494#issuecomment-329590326","RelatedDescription":"Commented on issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"Dup of #442 and already fixed by proposed solution: https://github.com/ericstj/standard/commit/1a062782ac9151bb46f5fef9c23f5b50c87f70d2"},{"Id":"6592240672","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T19:03:25","Actor":"rlordcardano","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/476#issuecomment-329578768","RelatedDescription":"Commented on issue \"Unit Test project(.NET 4.7) cannot load System.ValueTuple\" (#476) at dotnet/standard","RelatedBody":"Perhaps helpful: steps above didn't work for me with VS 2017 15.3.3, but started working with VS 2017 15.3.4."},{"Id":"6592165527","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T18:46:07","Actor":"osblue13","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/481#issuecomment-329574312","RelatedDescription":"Commented on issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#481) at dotnet/standard","RelatedBody":"I am using Visual Studio 2017 15.3.4 and .NET Core 2.0 SDK.\r\nMy solution consists of:\r\n\r\n- Project A - .NET 4.6.1 web api 2 referencing a .NET standard library\r\n- Project B - .NET 4.6.1 unit test project; referencing A\r\n\r\nI enabled automatic binding redirects and those were added to the web.config in Project A and app.config in Project B.\r\n\r\nProject A works fine but I cannot see any of my tests in Project B.  I added the following to my unit test project but it hasn't helped.\r\n\r\n```\r\n<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects> \r\n<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n```\r\nAm I missing any steps here? Why can't I see my tests in project B?"},{"Id":"6591650102","Type":"IssuesEvent","CreatedAt":"2017-09-14T16:47:02","Actor":"prakashnandshukla","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/495","RelatedDescription":"Opened issue \" Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:  Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \" (#495) at dotnet/standard","RelatedBody":"Hi \r\n\r\nI am working on MS Dynamics CRM integration project with box.com, I have added Box.V2 .dll file as a reference assemble and I am using properties these assembly to generate token using JWT authentication.\r\nWhen I am creating any record I am getting this exception/error.\r\n Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:\r\n Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \r\n\r\nThanks\r\n[Box SDK exception.txt](https://github.com/dotnet/standard/files/1303750/Box.SDK.exception.txt)\r\n"},{"Id":"6591418392","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T15:58:19","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329528112","RelatedDescription":"Commented on issue \"Adding .NET Standard/.NET Framework  facades assemblies is consuming 11% of build time\" (#442) at dotnet/standard","RelatedBody":"@davkean you need to either provide this tool or test the proposed fix to tell us if it resolves the issue.  Note that the fix I've provided also addresses the last item."},{"Id":"6590207887","Type":"WatchEvent","CreatedAt":"2017-09-14T11:59:52","Actor":"muh00mad","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6589544767","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T09:19:06","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329424372","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"Here's another view by inclusive time: https://gist.github.com/davkean/ca084b63636e5eac0544088f2ceb8ad2."},{"Id":"6589200351","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T07:59:11","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329404849","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"Note, I filed https://github.com/dotnet/standard/issues/494 to track the last one."},{"Id":"6589113085","Type":"IssuesEvent","CreatedAt":"2017-09-14T07:36:24","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/494","RelatedDescription":"Opened issue \"Calculating whether a .NET Standard library ref is a facade costs 0.5% of solution-wide design time build\" (#494) at dotnet/standard","RelatedBody":"See: https://github.com/dotnet/sdk/issues/1586\r\n\r\nPass|File|Line #|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|#|Bug\r\n---|---|---:|---|---:|---:|---:|---:|---:|---\r\nTotal Evaluation||||6159|100%|54|0.9%||\r\nProperties (Pass 1)||||3312|53.8%|9|0.1%||\r\nItemDefinitionGroup (Pass 2)||||14|0.2%|2|0%||\r\nItems (Pass 3)||||566|9.2%|24|0.4%||\r\nLazy Items (Pass 3.1)||||1826|29.6%|158|2.6%||\r\nUsingTasks (Pass 4)||||59|1%|59|1%||\r\nTargets (Pass 5)||||327|5.3%|208|3.4%||\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|33|0.5%|33|0.5%|43|\r\n\r\nThis line: https://github.com/dotnet/standard/blob/master/netstandard/pkg/targets/NETStandard.Library.targets#L12"},{"Id":"6588820607","Type":"IssueCommentEvent","CreatedAt":"2017-09-14T06:03:54","Actor":"davkean","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/442#issuecomment-329382472","RelatedDescription":"Commented on issue \"Adding .NET Standard reference assemblies is consuming 20% of a single design-time build, 9% of a solution design-time build \" (#442) at dotnet/standard","RelatedBody":"Here's an update with the finaly \r\n\r\nTotal build time: 13140 ms\r\nTotal evaluation time: 6060 ms\r\n\r\nPass|File|Line Number|Expression|Inc (ms)|Inc (%)|Exc (ms)|Exc (%)|Call Count\r\n---|---|---:|---|---:|---:|---:|---:|---:\r\nTotal Evaluation||||6060|100%|52|1%|\r\nProperties (Pass 1)||||3343|55%|8|0%|\r\nItemDefinitionGroup (Pass 2)||||14|0%|2|0%|\r\nItems (Pass 3)||||477|8%|19|0%|\r\nLazy Items (Pass 3.1)||||1795|30%|156|3%|\r\nUsingTasks (Pass 4)||||64|1%|64|1%|\r\nTargets (Pass 5)||||314|5%|177|3%|\r\nLazy Items (Pass 3.1)|NETStandard.Library.NETFramework.targets|3|`<_NETStandardLibraryNETFrameworkReference Include=\"$(MSBuildThisFileDirectory)\\ref\\*.dll\" Exclude=\"@...`|587|10%|587|10%|126\r\nLazy Items (Pass 3.1)|NETStandard.Library.NETFramework.targets|6|`<_NETStandardLibraryNETFrameworkLib Include=\"$(MSBuildThisFileDirectory)\\lib\\*.dll\" Exclude=\"@(_NETS...`|527|9%|527|9%|126\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|7|`<Reference Condition=\"'$(_NetStandardLibraryRefPath)' != ''\" Include=\"$(_NetStandardLibraryRefPath)*...`|322|5%|284|5%|43\r\nProperties (Pass 1)|Microsoft.Common.CurrentVersion.targets|114|`<Import Project=\"$(CommonTargetsPath)\"  />`|2105|35%|145|2%|223\r\nProperties (Pass 1)|Microsoft.Managed.DesignTime.targets|46|`<ManagedXamlResourcesDirectory Condition=\"!Exists('$(ManagedXamlResourcesDirectory)')\" >$(MSBuildThi...`|108|2%|106|2%|223\r\nProperties (Pass 1)|Microsoft.CSharp.CurrentVersion.targets|27|`<Import Project=\"$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.CSharp.targets\\Import...`|177|3%|56|1%|223\r\nProperties (Pass 1)|Microsoft.Common.CurrentVersion.targets|92|`<TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\" >$([Microsoft.Build.Utilities.To...`|57|1%|56|1%|223\r\nProperties (Pass 1)|Microsoft.Common.props|77|`<Import Project=\"$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Imports\\Microsoft.Common.props\\...`|100|2%|55|1%|223\r\nProperties (Pass 1)|Microsoft.Common.CurrentVersion.targets|83|`<FrameworkPathOverride Condition=\"'$(FrameworkPathOverride)' == ''\" >$([Microsoft.Build.Utilities.To...`|50|1%|49|1%|223\r\nProperties (Pass 1)|Microsoft.Common.CurrentVersion.targets|5821|`<Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfte...`|624|10%|48|1%|223\r\nLazy Items (Pass 3.1)|Microsoft.Common.CurrentVersion.targets|369|`<_DebugSymbolsOutputPath Include=\"@(_DebugSymbolsIntermediatePath-&gt;'$(OutDir)%(Filename)%(Extensi...`|43|1%|43|1%|223\r\nProperties (Pass 1)|Microsoft.NET.Build.Extensions.targets|18|`<_TargetFrameworkVersionWithoutV Condition=\"$(TargetFrameworkVersion.StartsWith('v'))\" >$(TargetFram...`|45|1%|42|1%|223\r\nProperties (Pass 1)|Microsoft.Common.props|78|`<Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Imports\\Microsoft.Common.props\\Impo...`|79|1%|41|1%|223\r\nLazy Items (Pass 3.1)|NETStandard.Library.targets|12|`Condition=\"'%(FileName)' != 'netstandard'\")`|39|1%|39|1%|43\r\n\r\nIn summary, for this mixed solution, all .NETStandard.Library.* accounts for 25% of all evaluation time, or 11% of total build time."},{"Id":"6588449512","Type":"WatchEvent","CreatedAt":"2017-09-14T03:13:35","Actor":"hacbq","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6588391660","Type":"WatchEvent","CreatedAt":"2017-09-14T02:49:41","Actor":"orf53975","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/standard","RelatedBody":null},{"Id":"6588098595","Type":"IssuesEvent","CreatedAt":"2017-09-14T00:45:49","Actor":"stephenvfoster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/493","RelatedDescription":"Opened issue \"Unable to Unit Test (MSTEST) F# .NET Standard Library in VS2017\" (#493) at dotnet/standard","RelatedBody":"I'm upgrading a rather large F# solution with PCL libraries to .Net Standard libraries with VS2017.  \r\n\r\nThe F# .Net Standard libraries work fine when tested from a console app), but unit tests fail with the error System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI have attached a minimal solution to demonstrate the issue; it contains 3 projects;\r\n- NetStandardLibrary: a F# library targeting netstandard1.6\r\n- NetStandardTests: a C# unit test targeting net462  (unit test fails)\r\n- NetStandardConsole: a C# console app targeting net462 (runs fine)\r\n\r\nCan someone please help us out!  We'd really like to upgrade to vs2017 and .Net Standard ASAP.\r\n\r\nVery much appreciated,\r\n\r\nStephen\r\n\r\nP.S.  We've tried netstandard2.0 with net7 -- but this fails to compile accessors on the F# type.  :-/\r\n\r\nP.S.S.  I'm a long-term .net guy (decades), but new to this forum so please let me know if this isn't the right place for this question.  :-)\r\n[NetStandardTests.zip](https://github.com/dotnet/standard/files/1301337/NetStandardTests.zip)\r\n"},{"Id":"6587834191","Type":"PushEvent","CreatedAt":"2017-09-13T22:58:13","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/standard/compare/fe9e738eeabadb6117ac398e4bc4338c67e9891a...b7f182415927d3b98445d043e1680c56b9d1f17c","RelatedDescription":"Pushed to refs/heads/release/2.0.0 at dotnet/standard","RelatedBody":null},{"Id":"6587834164","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:58:12","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Merged pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."},{"Id":"6587833243","Type":"PushEvent","CreatedAt":"2017-09-13T22:57:52","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/standard/compare/ca46b353af975e59dd04bca115579b145e07883d...fe9e738eeabadb6117ac398e4bc4338c67e9891a","RelatedDescription":"Pushed to refs/heads/release/2.0.0 at dotnet/standard","RelatedBody":null},{"Id":"6587833217","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:57:52","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/491","RelatedDescription":"Merged pull request \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nFixing Netstandard.Library package and reving up the package version to 2.0.1"},{"Id":"6587761582","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:32:54","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#discussion_r138757056","RelatedDescription":"Commented on pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"I see, I thought it was required, I can remove that change if we don't need it for marking this stable"},{"Id":"6587756399","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-13T22:31:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#discussion_r138756704","RelatedDescription":"Commented on pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"Not sure we want to update the baseline here but also don't know that it really affects anything because nothing consumes it. "},{"Id":"6587751287","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:29:42","Actor":"dnfclas","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/492#issuecomment-329315361","RelatedDescription":"Commented on issue \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"\r\n@joperezr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6587751094","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:29:38","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/492","RelatedDescription":"Opened pull request \"Marking 2.0.1 package as stable\" (#492) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nOnce PR #491 is merged, this PR will mark that package as stable."},{"Id":"6587678730","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T22:07:36","Actor":"dnfclas","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/pull/491#issuecomment-329311058","RelatedDescription":"Commented on issue \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"\r\n@joperezr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\n_Thanks,\n.NET Foundation Pull Request Bot_"},{"Id":"6587678529","Type":"PullRequestEvent","CreatedAt":"2017-09-13T22:07:32","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/491","RelatedDescription":"Opened pull request \"Update uap10.1 TFM to uap10.0.15138 and rev up Netstandard package version\" (#491) at dotnet/standard","RelatedBody":"cc: @weshaggard @Petermarcu @ericstj @joshfree \r\n\r\nFixing Netstandard.Library package and reving up the package version to 2.0.1"},{"Id":"6587608777","Type":"ForkEvent","CreatedAt":"2017-09-13T21:48:23","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/joperezr/standard","RelatedDescription":"Forked dotnet/standard to joperezr/standard","RelatedBody":null},{"Id":"6586786059","Type":"IssueCommentEvent","CreatedAt":"2017-09-13T18:34:32","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/standard/issues/489#issuecomment-329257771","RelatedDescription":"Commented on issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"@amasoumi NETStandard.Library.NETFramework is about .NET Framework and not UWP some of it might work but there will definitely be some issues with it as you start to use more of the types from netstandard.\r\n\r\n@daveh101 You will need to use a 6.0.0 version of the Microsoft.NETCore.UniversalWindowsPlatform package to be able to correctly consume .NET Standard 2.0 assets. It doesn't look like we have a preview of it on nuget yet but we do have a version on our dev build myget feed. https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.NETCore.UniversalWindowsPlatform/6.0.0"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6593987511","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:26:08","Actor":"hqueue","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24049#issuecomment-329684937","RelatedDescription":"Commented on issue \"Cannot build Core FX tests on Linux\" (#24049) at dotnet/corefx","RelatedBody":"In Linux cross build environment for ARM, I faced this same problem after resolving #24029.\r\n"},{"Id":"6593983506","Type":"IssuesEvent","CreatedAt":"2017-09-15T05:24:14","Actor":"cscer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24031","RelatedDescription":"Closed issue \"cn-win7 , error on load assembly System.Private.CoreLib\" (#24031) at dotnet/corefx","RelatedBody":"Assert Failure\r\nExpression: [Recursive resource lookup bug]\r\nDescription: Infinite recursion during resource lookup within System.Private.CoreLib.  This may be a bug in System.Private.CoreLib, or potentially in certain extensibility points such as assembly resolve events or CultureInfo names.  Resource name: Argument_AbsolutePathRequired\r\nStack Trace:\r\n   at System.SR.InternalGetResourceString(String key)\r\n   at System.SR.GetResourceString(String resourceKey, String defaultString)\r\n   at System.Reflection.Assembly.LoadFile(String path)\r\n\r\nwhere is the file System.Private.CoreLib.resource \r\n\r\n"},{"Id":"6593983482","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:24:13","Actor":"cscer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24031#issuecomment-329684658","RelatedDescription":"Commented on issue \"cn-win7 , error on load assembly System.Private.CoreLib\" (#24031) at dotnet/corefx","RelatedBody":"set  UICulture to 1033  ,it works"},{"Id":"6593952075","Type":"WatchEvent","CreatedAt":"2017-09-15T05:08:11","Actor":"JosefPihrt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"started","RelatedUrl":null,"RelatedDescription":"Starred dotnet/corefx","RelatedBody":null},{"Id":"6593951348","Type":"IssuesEvent","CreatedAt":"2017-09-15T05:07:51","Actor":"JosefPihrt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24062","RelatedDescription":"Opened issue \"ObsoleteAttribute does not cause error when message is null\" (#24062) at dotnet/corefx","RelatedBody":"```csharp\r\nprivate static void Foo()\r\n{\r\n    Foo1(); // warning CS0612\r\n    Foo2(); // error CS0619\r\n}\r\n\r\n[Obsolete(null, error: true)]\r\nprivate static void Foo1()\r\n{\r\n}\r\n\r\n[Obsolete(\"\", error: true)]\r\nprivate static void Foo2()\r\n{\r\n}\r\n```\r\nTested with .NET Core 1.1.0\r\n\r\nWhere is this behaviour documented?\r\n"},{"Id":"6593945938","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:05:04","Actor":"clegendre","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24031#issuecomment-329682350","RelatedDescription":"Commented on issue \"cn-win7 , error on load assembly System.Private.CoreLib\" (#24031) at dotnet/corefx","RelatedBody":"Hello, \r\nWe ran into the same issue.\r\nSee here for the workaround. https://github.com/dotnet/corefx/issues/23608\r\n\r\nTested, it works..."},{"Id":"6593847563","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:16:35","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24055#issuecomment-329676940","RelatedDescription":"Commented on issue \"Ignore unhandled exceptions from ManagedWebSocket keep-alive pings\" (#24055) at dotnet/corefx","RelatedBody":"@mellinoe, drawing seg fault on Ubuntu:\r\nhttps://ci3.dot.net/job/dotnet_corefx/job/master/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/3460/"},{"Id":"6593825260","Type":"PullRequestEvent","CreatedAt":"2017-09-15T04:04:55","Actor":"hseok-oh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24061","RelatedDescription":"Opened pull request \"Fix building rootfs for tizen armel\" (#24061) at dotnet/corefx","RelatedBody":"Use standard one to fetch packages for rootfs.\r\nSame commit on CoreCLR dotnet/coreclr#13854"},{"Id":"6593739357","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:24:51","Actor":"nathan-alden","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/14273#issuecomment-329669858","RelatedDescription":"Commented on issue \"Feedback on ClaimsPrincipal handling of arrays and complex types\" (#14273) at dotnet/corefx","RelatedBody":"I've long since accepted that ASP.NET Core MVC is a substantial regression from the well-thought-out Web API 2. Any projects I create from here on out use NancyFx, which I think is a much better HTTP abstraction."},{"Id":"6593700492","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:07:01","Actor":"zhenlan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24050#issuecomment-329667671","RelatedDescription":"Commented on issue \"Generate ThisAssembly.cs to get Package Version.\" (#24050) at dotnet/corefx","RelatedBody":"Cool 👍 "},{"Id":"6593689317","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:01:47","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/17681#issuecomment-329667051","RelatedDescription":"Commented on issue \"Test failure: System.Net.Sockets.Tests.DualModeConnectionlessReceiveFrom/ReceiveFromV6BoundToAnyV6_Success\" (#17681) at dotnet/corefx","RelatedBody":"This issue is repro on UWP F5 Tests, detail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fuwp~2F/build/20170915.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.DualModeConnectionlessReceiveFrom~2FReceiveFromV4BoundToAnyV6_Success"},{"Id":"6593671257","Type":"PushEvent","CreatedAt":"2017-09-15T02:53:44","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/corefx/compare/a16368dc4694c0334a8794107a9e868020f0bed5...4854f643d8cc7448faa59511fe1c88a8da2ea49b","RelatedDescription":"Pushed to refs/heads/master at dotnet/corefx","RelatedBody":null},{"Id":"6593671030","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:53:38","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24060","RelatedDescription":"Merged pull request \"Refactoring code. No changes made to logic.\" (#24060) at dotnet/corefx","RelatedBody":"Applying code review comments requested from pr #24060 \r\n\r\ncc: @danmosemsft @safern @joperezr "},{"Id":"6593670668","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:53:28","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24060#issuecomment-329665726","RelatedDescription":"Commented on issue \"Refactoring code. No changes made to logic.\" (#24060) at dotnet/corefx","RelatedBody":"Thanks!"},{"Id":"6593654734","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:46:31","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/14673#issuecomment-329664273","RelatedDescription":"Commented on issue \"SendRecvPollSync_TcpListener_Socket outerloop test is flaky\" (#14673) at dotnet/corefx","RelatedBody":"failed again: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20170914.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.SendReceiveApm~2FSendRecvPollSync_TcpListener_Socket(listenAt:%20127.0.0.1,%20pollBeforeOperation:%20True)\r\n\r\nThe test `System.Net.Sockets.Tests.SendReceiveApm/SendRecvPollSync_TcpListener_Socket(listenAt: 127.0.0.1, pollBeforeOperation: True)` has failed.\r\n\r\nSystem.AggregateException : One or more errors occurred. (An existing connection was forcibly closed by the remote host)\\r\r\n    ---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host\r\n\r\n        Stack Trace:\r\n\r\n           at System.ThrowHelper.ThrowAggregateException(List`1 exceptions)\r\n       at System.Threading.Tasks.Task.WaitAll(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n       at System.Net.Sockets.Tests.SendReceive.SendRecvPollSync_TcpListener_Socket(IPAddress listenAt, Boolean pollBeforeOperation)\r\n    ----- Inner Stack Trace -----\r\n       at System.Net.Sockets.Tests.SendReceive.<>c__DisplayClass25_1.<<SendRecvPollSync_TcpListener_Socket>b__0>d.MoveNext()\r\nBuild : 2.0.0 - 20170914.01 (Core Tests)\r\nFailing configurations:\r\n- windows.10.nanolatest.amd64-x64\r\n  - Release\r\n"},{"Id":"6593647684","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:43:18","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/20024#issuecomment-329663319","RelatedDescription":"Commented on issue \"ReadAsStreamAsync_ValidServerResponse_Success failed with System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response \" (#20024) at dotnet/corefx","RelatedBody":"failed again in 2.0.0 branch, detail: https://mc.dot.net/#/product/netcore/200/source/official~2Fcorefx~2Frelease~2F2.0.0~2F/type/test~2Ffunctional~2Fcli~2F/build/20170914.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.ResponseStreamTest~2FReadAsStreamAsync_ValidServerResponse_Success(transferType:%20ContentLength,%20transferError:%20None)"},{"Id":"6593613763","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:28:26","Actor":"hseok-oh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24049#issuecomment-329661213","RelatedDescription":"Commented on issue \"Cannot build Core FX tests on Linux\" (#24049) at dotnet/corefx","RelatedBody":"IMO, it seems that `-SkipTests` argument is not working. \r\nMaybe `Microsoft.XmlSerializer.Generator.Tests` is the first running test in linux."},{"Id":"6593528487","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T01:51:08","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/24060#discussion_r139049118","RelatedDescription":"Commented on pull request \"Refactoring code. No changes made to logic.\" (#24060) at dotnet/corefx","RelatedBody":"Delete the whole else block and move the comment `// sometimes process is null: tracked by #24048` to the `if (px != null)` line. Maybe put it inline or above.  "},{"Id":"6593494542","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T01:36:02","Actor":"hqueue","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/pull/23978#issuecomment-329653311","RelatedDescription":"Commented on issue \"Re-enable XmlSerializer.Generator tests\" (#23978) at dotnet/corefx","RelatedBody":"> In a nutshell this re-enables the tests and ensures they run on the test framework rather than the tool framework.\r\n\r\nThere is a problem in cross build environment, because we can't run on the test framework when we are cross-building corefx tests. I've opened the issue #24029 and PR #24030.\r\n"},{"Id":"6593466157","Type":"PullRequestEvent","CreatedAt":"2017-09-15T01:23:04","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24060","RelatedDescription":"Opened pull request \"Refactoring code. No changes made to logic.\" (#24060) at dotnet/corefx","RelatedBody":"Applying code review comments requested from pr 24017\r\n\r\ncc: @danmosemsft @safern @joperezr "},{"Id":"6593461498","Type":"IssuesEvent","CreatedAt":"2017-09-15T01:20:53","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23969","RelatedDescription":"Closed issue \"Check if we can open the directory on Linux when UseShellExecute is set\" (#23969) at dotnet/corefx","RelatedBody":"I am creating this issue to track if we can open the directory on Linux when having ShellExecute is set. \r\n\r\n- Ideally we would want to throw exception only when UseShellExecute option was false. \r\n\r\n- In OSX, the program \"open\" successfully opens folder using \"finder\".  \r\n\r\n- But Linux needs extra effort to be able to open a folder here. In Linux, xdg-open cannot open folder, so I decided to throw when startInfo.FileName is a directory, regardless of UseShellExecute option being true or false. \r\nProbably the failure happens when the OS doesnt have the installed libraries to open.\r\nThe current behavior in Linux is captured [here](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs#L67L71) \r\n\r\nPart of this goal is to keep a consistent behavior with Windows.\r\n\r\n- When UseShellExecute is set on windows desktop, Process Start opens directory using File Explorer.\r\n\r\n- Also, the current behavior in Windows running on .NET Core is captured [here](https://github.com/dotnet/corefx/blob/e670fd396d1c2a6ae99f2bb0ec24a81e30c668e7/src/System.Diagnostics.Process/tests/ProcessTests.cs#L134-L149\r\n) \r\n\r\nCode Sample:\r\n```\r\nvar startInfo = new ProcessStartInfo { UseShellExecute = true, FileName = Environment.CurrentDirectory };\r\n                using (var px = Process.Start(startInfo)) { ... }\r\n```\r\n@tarekgh "},{"Id":"6593456919","Type":"PushEvent","CreatedAt":"2017-09-15T01:18:40","Actor":"davidwrighton","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/corefx/compare/d16051d8f0d343ffea4151ac7a38d000602ccf4d...5061720b16b8b1fcabf19abfc8933e50ad2fd530","RelatedDescription":"Pushed to refs/heads/dev/defaultintf at dotnet/corefx","RelatedBody":null},{"Id":"6593455236","Type":"PullRequestEvent","CreatedAt":"2017-09-15T01:17:53","Actor":"davidwrighton","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24059","RelatedDescription":"Merged pull request \"Merge master to dev/defaultintf\" (#24059) at dotnet/corefx","RelatedBody":""},{"Id":"6593453954","Type":"PullRequestEvent","CreatedAt":"2017-09-15T01:17:18","Actor":"davidwrighton","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24059","RelatedDescription":"Opened pull request \"Merge master to dev/defaultintf\" (#24059) at dotnet/corefx","RelatedBody":""},{"Id":"6593412456","Type":"PullRequestEvent","CreatedAt":"2017-09-15T00:58:29","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24058","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-25715-01, preview1-25714-02, respectively (master)\" (#24058) at dotnet/corefx","RelatedBody":""},{"Id":"6593405910","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:55:19","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24040#issuecomment-329647400","RelatedDescription":"Commented on issue \"NamedPipeServerStream: Provide support for WRITE_DAC\" (#24040) at dotnet/corefx","RelatedBody":"I hate to make a .NET Core specific API, as it basically only helps Jared."},{"Id":"6593404894","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:54:50","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24040#issuecomment-329647333","RelatedDescription":"Commented on issue \"NamedPipeServerStream: Provide support for WRITE_DAC\" (#24040) at dotnet/corefx","RelatedBody":"Ugh, that constructor also needs PipeSecurity. I guess in theory we could move that down also, potentially using reflection to not pull all of S.IO.Pipes.AccessControl with it."},{"Id":"6593398418","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:51:48","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/24040#issuecomment-329646967","RelatedDescription":"Commented on issue \"NamedPipeServerStream: Provide support for WRITE_DAC\" (#24040) at dotnet/corefx","RelatedBody":"What about moving `PipeAccessRights` down so that we could consume just that one enum? That way we could bring the constructor back and code would not need to be written specifically for .NET Core. That wouldn't help anyone targeting .NET Standard but then neither would the new constructor proposed above."},{"Id":"6593389085","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T00:47:21","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/corefx/issues/23279#issuecomment-329646395","RelatedDescription":"Commented on issue \"Core Tests (2.0.0): All work items have fireball issue for RHEL69\" (#23279) at dotnet/corefx","RelatedBody":"@smile21prc  ? "},{"Id":"6593388837","Type":"IssuesEvent","CreatedAt":"2017-09-15T00:47:14","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24057","RelatedDescription":"Opened issue \"Add logging to ManagedWebSocket\" (#24057) at dotnet/corefx","RelatedBody":"We currently don't do any logging with NetEventSource. We should."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6593979321","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:22:05","Actor":"justcla","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10272#issuecomment-329684407","RelatedDescription":"Commented on issue \"Offer code fix to add usings for pasted code snippets\" (#10272) at dotnet/roslyn","RelatedBody":"In IntelliJ, the shortcut is Ctrl+Alt+O to organize imports.\r\nThey use Alt+Enter to import missing usings (one by one). But unlike other refactorings, this one pops up pro-actively as a suggestion."},{"Id":"6593973898","Type":"PushEvent","CreatedAt":"2017-09-15T05:19:17","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":null,"RelatedUrl":"https://github.com/dotnet/roslyn/compare/58f44c39048032c6b823ddeedddd20fa589912f5...401e5e25adecdf8adf9d4cae38022780c01ee865","RelatedDescription":"Pushed to refs/heads/master at dotnet/roslyn","RelatedBody":null},{"Id":"6593972594","Type":"PullRequestEvent","CreatedAt":"2017-09-15T05:18:33","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22119","RelatedDescription":"Merged pull request \"Add MonoDevelopGtk synchronization context as consumption of Roslyn i…\" (#22119) at dotnet/roslyn","RelatedBody":"…n VS for Mac uses this context.\r\n\r\n**Customer scenario**\r\n\r\nIn VS for Mac, the foreground thread kind will be unknown, which causes issues at least in debug code.\r\n\r\n**Bugs this fixes:**\r\n\r\nN/A\r\n\r\n**Workarounds, if any**\r\n\r\nN/A\r\n\r\n**Risk**\r\n\r\nLow, as this only changes the VS for Mac behavior to not fall under the Unknown synchronization context path.\r\n\r\n**Performance impact**\r\n\r\nNone, the change is trivial.\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nConsumption of Roslyn in VS for Mac is being used in new ways.\r\n\r\n**How was the bug found?**\r\n\r\nTried running chk Roslyn bits in VS for Mac\r\n\r\n**Test documentation updated?**\r\n\r\nN/A\r\n"},{"Id":"6593961205","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T05:12:50","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21754#issuecomment-329683278","RelatedDescription":"Commented on issue \"Restore.cmd: exception thrown when trying to run in some cases.\" (#21754) at dotnet/roslyn","RelatedBody":"@dezsiszabi Of course! Go right ahead. :-)"},{"Id":"6593847338","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:16:28","Actor":"DustinCampbell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10272#issuecomment-329676927","RelatedDescription":"Commented on issue \"Offer code fix to add usings for pasted code snippets\" (#10272) at dotnet/roslyn","RelatedBody":"Of course. I just wanted to clarify what you meant."},{"Id":"6593844381","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:14:55","Actor":"danroth27","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10272#issuecomment-329676684","RelatedDescription":"Commented on issue \"Offer code fix to add usings for pasted code snippets\" (#10272) at dotnet/roslyn","RelatedBody":"The point is not the specific keyboard shortcut, but the functionality it provides. "},{"Id":"6593828093","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:06:20","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22137#issuecomment-329675257","RelatedDescription":"Commented on issue \"Add InternalsVisibleTo\" (#22137) at dotnet/roslyn","RelatedBody":"Tagging @Pilchie for ask mode approval"},{"Id":"6593825359","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T04:04:58","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22137#issuecomment-329675014","RelatedDescription":"Commented on issue \"Add InternalsVisibleTo\" (#22137) at dotnet/roslyn","RelatedBody":"cc @dotnet/testimpact @peterwald"},{"Id":"6593690062","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T03:02:07","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21967#discussion_r139054932","RelatedDescription":"Commented on pull request \"Type inference with nullable reference types\" (#21967) at dotnet/roslyn","RelatedBody":">TypeSymbolWithAnnotations.Create(e.Type) [](start = 62, length = 40)\r\n\r\nShould we infer nullability here?"},{"Id":"6593686173","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T03:00:22","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13360#issuecomment-329666853","RelatedDescription":"Commented on issue \"VS2015 crash due to unhandled System.InvalidCastException (Nightly Build 2.0.0.6082601)\" (#13360) at dotnet/roslyn","RelatedBody":"Is this reproducible with a recent VS2017?"},{"Id":"6593677167","Type":"IssuesEvent","CreatedAt":"2017-09-15T02:56:19","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11637","RelatedDescription":"Closed issue \"[Bug]  VS 2015 can't remove first method of dll when use IL Support extesion.\" (#11637) at dotnet/roslyn","RelatedBody":"Microsoft Visual Studio Community 2015\nVersion 14.0.25123.00 Update 2\nMicrosoft .NET Framework\nVersion 4.6.01038\nInstalled Version: Community\nVisual Basic 2015   00322-20000-00000-AA234\n\n**Extension in use:**\n- IL Support extension 2.2\n\n**Steps to Reproduce**:\n1. Create a new project of class library with IL Support.\n2. Compile and you will get an error about duplicate method.\n3. Create any method before first method.\n4. Finally compile without an error.\n\n<img src=\"http://i.imgur.com/5EjKdHk.png\"></img>\n**Expected Behavior**:\nFrom above picture, Anarchy.Common should not show any method because I set method implement to FowardRef.\n\n**Actual Behavior**:\nAs you see in the picture, _Dummy method didn't get rid as it should be.\n\n**Is it error from extension ?**\nI don't think so; I check regex code in vbproj, it's still the same code as I use in VS 2013.\n"},{"Id":"6593677156","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:56:19","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11637#issuecomment-329666300","RelatedDescription":"Commented on issue \"[Bug]  VS 2015 can't remove first method of dll when use IL Support extesion.\" (#11637) at dotnet/roslyn","RelatedBody":"I loaded your project and I don't see any errors, so there are no errors that disappear when the dummy method is added.\r\n\r\nPlease provide a repro and reopen."},{"Id":"6593676282","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T02:55:55","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21967#discussion_r139054379","RelatedDescription":"Commented on pull request \"Type inference with nullable reference types\" (#21967) at dotnet/roslyn","RelatedBody":">upleOrDeconstructedTypes = type.TupleElementTypes.SelectAsArray(TypeMap.AsTypeSymbol); [](start = 17, length = 86)\r\n\r\nAre we dropping nullability information? Perhaps a PROTOTYPE comment?"},{"Id":"6593666848","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T02:51:47","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21967#discussion_r139053988","RelatedDescription":"Commented on pull request \"Type inference with nullable reference types\" (#21967) at dotnet/roslyn","RelatedBody":">return true; [](start = 16, length = 12)\r\n\r\nShould we return false if constant isn't null?"},{"Id":"6593655160","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:46:42","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/9323#issuecomment-329664312","RelatedDescription":"Commented on issue \"Make the Proprietary Test Resources portable\" (#9323) at dotnet/roslyn","RelatedBody":"@agocke @jaredpar What is the next step for this issue? What milestone should we assign it to?"},{"Id":"6593651885","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:45:15","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/7971#issuecomment-329663890","RelatedDescription":"Commented on issue \"Invalid cyclical TypeSpec in referenced assembly causes stack overflow\" (#7971) at dotnet/roslyn","RelatedBody":"The compilers have not been hardened against broken metadata. This should be fixed in the context of a (hypothetical) effort to harden the compilers against different kinds of broken metadata."},{"Id":"6593644346","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T02:41:53","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21967#discussion_r139053137","RelatedDescription":"Commented on pull request \"Type inference with nullable reference types\" (#21967) at dotnet/roslyn","RelatedBody":">IsNullable [](start = 30, length = 10)\r\n\r\nIt doesn't look like this method takes into account any suppression for nullable modifiers except the SuppressNullableWarningExpression (assembly/symbol level). Have we decided to not support any of those suppressions/opt out mechanisms?  "},{"Id":"6593621768","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:31:54","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22131#issuecomment-329661690","RelatedDescription":"Commented on issue \"SyntaxGenerator Tools should throw exceptions.\" (#22131) at dotnet/roslyn","RelatedBody":"I would prefer that the syntax generator print a nice error message."},{"Id":"6593605753","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:24:54","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22127#issuecomment-329660688","RelatedDescription":"Commented on issue \"Make method single threaded with \"lock\" keyword.\" (#22127) at dotnet/roslyn","RelatedBody":"We are now taking language feature discussion in other repositories:\r\n- https://github.com/dotnet/csharplang for C# specific issues\r\n- https://github.com/dotnet/vblang for VB-specific features\r\n- https://github.com/dotnet/csharplang for features that affect both languages\r\n\r\nFeatures that are under active design or development, or which are \"championed\" by someone on the language design team, have already been moved either as issues or as checked-in design documents. For example, the proposal in this repo \"Proposal: Partial interface implementation a.k.a. Traits\" (issue 16139 and a few other issues that request the same thing) are now tracked by the language team at issue 52 in https://github.com/dotnet/csharplang/issues, and there is a draft spec at https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md and further discussion at issue 288 in https://github.com/dotnet/csharplang/issues. Prototyping of the compiler portion of language features is still tracked here; see, for example, https://github.com/dotnet/roslyn/tree/features/DefaultInterfaceImplementation and issue 17952.\r\n\r\nIn order to facilitate that transition, we have started closing language design discussions from [the roslyn repo](https://github.com/dotnet/roslyn) with a note briefly explaining why. When we are aware of an existing discussion for the feature already in the new repo, we are adding a link to that. But we're not adding new issues to the new repos for existing discussions in this repo that the language design team does not currently envision taking on. Our intent is to eventually close the language design issues in the Roslyn repo and encourage discussion in one of the new repos instead.\r\n\r\nOur intent is not to shut down discussion on language design - you can still continue discussion on the closed issues if you want - but rather we would like to encourage people to move discussion to where we are more likely to be paying attention (the new repo), or to abandon discussions that are no longer of interest to you.\r\n\r\nIf you happen to notice that one of the closed issues has a relevant issue in the new repo, and we have not added a link to the new issue, we would appreciate you providing a link from the old to the new discussion. That way people who are still interested in the discussion can start paying attention to the new issue.\r\n\r\nAlso, we'd welcome any ideas you might have on how we could better manage the transition. Comments and discussion about closing and/or moving issues should be directed to https://github.com/dotnet/roslyn/issues/18002. Comments and discussion about this issue can take place here or on an issue in the relevant repo.\r\n\r\n-----------------\r\n\r\nI have not moved this feature request to the csharplang repo because I don't believe it would ever rise in priority over other requests to be something we would ever do in any particular release. However, you are welcome to move discussion to the new repo if this still interests you."},{"Id":"6593605749","Type":"IssuesEvent","CreatedAt":"2017-09-15T02:24:54","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22127","RelatedDescription":"Closed issue \"Make method single threaded with \"lock\" keyword.\" (#22127) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.3.4\r\n\r\n**Expected Behavior**:\r\n\r\n    lock void Method()\r\n    {\r\n        DoSomething();\r\n    }\r\n\r\nwill be equivalent to\r\n\r\n    private object _obj = new object();\r\n    void Method()\r\n    {\r\n        lock(_obj)\r\n        {\r\n           DoSomething();\r\n        }\r\n    }\r\n\r\nfor each method with lock keyword, individual object is created. for each static methods individual static object is created.\r\n"},{"Id":"6593603520","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:23:54","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22103#issuecomment-329660539","RelatedDescription":"Commented on issue \"Operation tree/bound nodes getting dropped for foreach statement with errors\" (#22103) at dotnet/roslyn","RelatedBody":"This is a dup of https://github.com/dotnet/roslyn/issues/15759"},{"Id":"6593598270","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:21:37","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22126#issuecomment-329660212","RelatedDescription":"Commented on issue \"Make variable decelaration of \"Pattern matching\" implicit  (instead of explicit)\" (#22126) at dotnet/roslyn","RelatedBody":"We are now taking language feature discussion in other repositories:\r\n- https://github.com/dotnet/csharplang for C# specific issues\r\n- https://github.com/dotnet/vblang for VB-specific features\r\n- https://github.com/dotnet/csharplang for features that affect both languages\r\n\r\nFeatures that are under active design or development, or which are \"championed\" by someone on the language design team, have already been moved either as issues or as checked-in design documents. For example, the proposal in this repo \"Proposal: Partial interface implementation a.k.a. Traits\" (issue 16139 and a few other issues that request the same thing) are now tracked by the language team at issue 52 in https://github.com/dotnet/csharplang/issues, and there is a draft spec at https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md and further discussion at issue 288 in https://github.com/dotnet/csharplang/issues. Prototyping of the compiler portion of language features is still tracked here; see, for example, https://github.com/dotnet/roslyn/tree/features/DefaultInterfaceImplementation and issue 17952.\r\n\r\nIn order to facilitate that transition, we have started closing language design discussions from [the roslyn repo](https://github.com/dotnet/roslyn) with a note briefly explaining why. When we are aware of an existing discussion for the feature already in the new repo, we are adding a link to that. But we're not adding new issues to the new repos for existing discussions in this repo that the language design team does not currently envision taking on. Our intent is to eventually close the language design issues in the Roslyn repo and encourage discussion in one of the new repos instead.\r\n\r\nOur intent is not to shut down discussion on language design - you can still continue discussion on the closed issues if you want - but rather we would like to encourage people to move discussion to where we are more likely to be paying attention (the new repo), or to abandon discussions that are no longer of interest to you.\r\n\r\nIf you happen to notice that one of the closed issues has a relevant issue in the new repo, and we have not added a link to the new issue, we would appreciate you providing a link from the old to the new discussion. That way people who are still interested in the discussion can start paying attention to the new issue.\r\n\r\nAlso, we'd welcome any ideas you might have on how we could better manage the transition. Comments and discussion about closing and/or moving issues should be directed to https://github.com/dotnet/roslyn/issues/18002. Comments and discussion about this issue can take place here or on an issue in the relevant repo.\r\n\r\n-----------------\r\n\r\nI have not moved this feature request to the csharplang repo because it would change the behavior of existing programs (e.g. where a field of the given name is already in scope).\r\n"},{"Id":"6593593520","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:19:28","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22136#issuecomment-329659930","RelatedDescription":"Commented on issue \"Support more flexible new( ) generic type constraint\" (#22136) at dotnet/roslyn","RelatedBody":"We are now taking language feature discussion in other repositories:\r\n- https://github.com/dotnet/csharplang for C# specific issues\r\n- https://github.com/dotnet/vblang for VB-specific features\r\n- https://github.com/dotnet/csharplang for features that affect both languages\r\n\r\nFeatures that are under active design or development, or which are \"championed\" by someone on the language design team, have already been moved either as issues or as checked-in design documents. For example, the proposal in this repo \"Proposal: Partial interface implementation a.k.a. Traits\" (issue 16139 and a few other issues that request the same thing) are now tracked by the language team at issue 52 in https://github.com/dotnet/csharplang/issues, and there is a draft spec at https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md and further discussion at issue 288 in https://github.com/dotnet/csharplang/issues. Prototyping of the compiler portion of language features is still tracked here; see, for example, https://github.com/dotnet/roslyn/tree/features/DefaultInterfaceImplementation and issue 17952.\r\n\r\nIn order to facilitate that transition, we have started closing language design discussions from [the roslyn repo](https://github.com/dotnet/roslyn) with a note briefly explaining why. When we are aware of an existing discussion for the feature already in the new repo, we are adding a link to that. But we're not adding new issues to the new repos for existing discussions in this repo that the language design team does not currently envision taking on. Our intent is to eventually close the language design issues in the Roslyn repo and encourage discussion in one of the new repos instead.\r\n\r\nOur intent is not to shut down discussion on language design - you can still continue discussion on the closed issues if you want - but rather we would like to encourage people to move discussion to where we are more likely to be paying attention (the new repo), or to abandon discussions that are no longer of interest to you.\r\n\r\nIf you happen to notice that one of the closed issues has a relevant issue in the new repo, and we have not added a link to the new issue, we would appreciate you providing a link from the old to the new discussion. That way people who are still interested in the discussion can start paying attention to the new issue.\r\n\r\nAlso, we'd welcome any ideas you might have on how we could better manage the transition. Comments and discussion about closing and/or moving issues should be directed to https://github.com/dotnet/roslyn/issues/18002. Comments and discussion about this issue can take place here or on an issue in the relevant repo.\r\n\r\n-----------------\r\n\r\nThe answer to your question is Yes: such constraints are not representable in metadata.\r\n\r\nSee https://github.com/dotnet/csharplang/issues/110 for one proposed solution.\r\n"},{"Id":"6593593503","Type":"IssuesEvent","CreatedAt":"2017-09-15T02:19:27","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22136","RelatedDescription":"Closed issue \"Support more flexible new( ) generic type constraint\" (#22136) at dotnet/roslyn","RelatedBody":"Is there anything fundamental preventing the new( ) constraint from being enhanced to include a set of types?\r\n\r\ne.g.\r\n\r\n```\r\nwhere T : new(int,int)\r\nwhere T : new(string[])\r\n```\r\nand so on. The benefits are plain but I do not know if there is some deep linguistics reason why we only have new ( ).\r\n\r\nThanks\r\n\r\n"},{"Id":"6593589630","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:17:40","Actor":"DustinCampbell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10272#issuecomment-329659709","RelatedDescription":"Commented on issue \"Offer code fix to add usings for pasted code snippets\" (#10272) at dotnet/roslyn","RelatedBody":"Specifically Ctrl+shift+O? I think that's a global VS \"open project\" shortcut "},{"Id":"6593565394","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:07:13","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22125#issuecomment-329657691","RelatedDescription":"Commented on issue \"Constant value binding problem for default(bool?)\" (#22125) at dotnet/roslyn","RelatedBody":"Here is a simple repro of the issue:\r\n\r\n``` c#\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        bool? b = null;\r\n        switch (b) { case (bool?)null: break; }    // no error\r\n        switch (b) { case default(bool?): break; } // error\r\n    }\r\n}\r\n```\r\n"},{"Id":"6593557380","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T02:04:00","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22137#issuecomment-329657302","RelatedDescription":"Commented on issue \"Add InternalsVisibleTo\" (#22137) at dotnet/roslyn","RelatedBody":"@heejaechang I think these are the only IVTs we will need (including for OOP). I copied the ones that LUT already has - but let me know if I don't need some of these..."},{"Id":"6593551908","Type":"PullRequestEvent","CreatedAt":"2017-09-15T02:01:35","Actor":"shyamnamboodiripad","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22137","RelatedDescription":"Opened pull request \"Add InternalsVisibleTo\" (#22137) at dotnet/roslyn","RelatedBody":"Need IVT to implement source based test discovery component as an incremental analyzer."},{"Id":"6593537499","Type":"IssueCommentEvent","CreatedAt":"2017-09-15T01:55:15","Actor":"danroth27","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10272#issuecomment-329656051","RelatedDescription":"Commented on issue \"Offer code fix to add usings for pasted code snippets\" (#10272) at dotnet/roslyn","RelatedBody":"The shortcut everyone uses to organize and add missing imports in Java is ctrl-shift-O. The request here is for the same feature for C#."},{"Id":"6593526697","Type":"PullRequestReviewCommentEvent","CreatedAt":"2017-09-15T01:50:24","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"created","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21967#discussion_r139049060","RelatedDescription":"Commented on pull request \"Type inference with nullable reference types\" (#21967) at dotnet/roslyn","RelatedBody":">var [](start = 12, length = 3)\r\n\r\nPlease spell out the type."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"908559275990982656","CreatedAt":"2017-09-15T05:13:06+00:00","UserScreenname":"dotnet","Text":"Announcing SignalR for https://t.co/iOiV9qNspl Core 2.0 https://t.co/quJIZyhUdB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":18,"RawContent":null},{"Id":"908126010171834368","CreatedAt":"2017-09-14T00:31:27+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 https://t.co/iOiV9qNspl and Configuration features https://t.co/6LCtKp9gfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":68,"RawContent":null},{"Id":"907775139210715137","CreatedAt":"2017-09-13T01:17:13+00:00","UserScreenname":"dotnet","Text":".NET Framework September 2017 Security and Quality Rollup https://t.co/1yk2xwnrvP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":26,"RawContent":null},{"Id":"906146140000841728","CreatedAt":"2017-09-08T13:24:09+00:00","UserScreenname":"dotnet","Text":"Getting Started with Windows Containers https://t.co/UnRPIRZySp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":183,"FavoriteCount":108,"RawContent":null},{"Id":"903669794150506500","CreatedAt":"2017-09-01T17:24:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf - streaming live directly to your favorite device. Don't miss out.\n\nIs it on your calendar yet?… https://t.co/SK3CUqUkrs","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":122,"FavoriteCount":100,"RawContent":null},{"Id":"902942589053108224","CreatedAt":"2017-08-30T17:14:23+00:00","UserScreenname":"dotnet","Text":"Introducing .NET IL Linker https://t.co/ji9Uhlalw2","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":299,"FavoriteCount":203,"RawContent":null},{"Id":"902581598876459009","CreatedAt":"2017-08-29T17:19:56+00:00","UserScreenname":"dotnet","Text":"The Week in .NET: Let's Encrypt WebApp Renewer, CodeCamp Seattle 2017, and links!\nhttps://t.co/Mssa964piA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":42,"RawContent":null}]}},"RunOn":"2017-09-15T05:30:17.3617291Z","RunDurationInMilliseconds":5823}