{"Data":{"Blog":{"FeedItems":[{"Title":"Iterate Faster with the Xamarin Live Player and iOS Coded User Interface","PublishedOn":"2017-12-13T17:25:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Live Player is a fantastic tool to rapidly iterate and develop Xamarin applications without ever having to compile. One can easily update an application&#8217;s user interface and business...","Href":"https://blog.xamarin.com/iterate-faster-xamarin-live-player-ios-coded-user-interface/","RawContent":null},{"Title":"Updates to the Xamarin iOS Designer","PublishedOn":"2017-12-12T18:00:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Designer for iOS is a visual designer that allows you to edit Storyboard and Xib files directly in Visual Studio and Visual Studio for Mac. Crafting your UI with a designer instead of...","Href":"https://blog.xamarin.com/updates-xamarin-ios-designer/","RawContent":null},{"Title":"Introduction to tvOS","PublishedOn":"2017-12-11T20:03:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, Apple announced the AppleTV 4K, an improved version of the AppleTV launched in 2015, which brought us a new platform to develop for in tvOS. With the touch-enabled Siri remote, we have a new...","Href":"https://blog.xamarin.com/introduction-to-tvos/","RawContent":null},{"Title":"Native Forms is Polished and Shiny in Xamarin.Forms 2.5.0","PublishedOn":"2017-12-08T20:37:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since we previewed Native Forms in June, we’ve been working to smooth the rough edges and polish it up for Xamarin.Forms 2.5.0 by fixing bugs and integrating the excellent feedback from the community....","Href":"https://blog.xamarin.com/native-forms-polished-shiny-xamarin-forms-2-5-0/","RawContent":null},{"Title":"Even Easier iOS App Provisioning in Visual Studio for Mac ","PublishedOn":"2017-12-07T19:10:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS provisioning is a notoriously hard concept to grasp; even the best developers can be stumped by a signing identity. As a content developer at Xamarin, I’ve created thorough documentation on the...","Href":"https://blog.xamarin.com/even-easier-ios-app-provisioning-visual-studio-mac/","RawContent":null},{"Title":"Get Your Azure Mobile Badge from Xamarin University!","PublishedOn":"2017-12-06T18:38:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re excited to introduce the Azure Mobile badge, our first non-certification badge, offered exclusively through Xamarin University! Unlock this badge by completing the Xamarin University Azure...","Href":"https://blog.xamarin.com/get-azure-mobile-badge-xamarin-university/","RawContent":null},{"Title":"￼Fidelity Mobile Unites Brazilian Citizens and Elected Officials with Real-Time Chat Apps","PublishedOn":"2017-12-05T20:11:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Real-time messaging apps are becoming commonplace, allowing us to communicate immediately or asynchronously with individuals and groups. Inspired by chat apps’ success with consumer businesses,...","Href":"https://blog.xamarin.com/%ef%bf%bcfidelity-mobile-unites-brazilian-citizens-elected-officials-real-time-chat-apps/","RawContent":null},{"Title":"See What’s New in Visual Studio 2017 Version 15.5","PublishedOn":"2017-12-04T19:54:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we&#8217;re releasing Visual Studio 2017 version 15.5 into stable. This release includes many improvements for mobile developers, including enhancements to XAML editing, the Xamarin Live...","Href":"https://blog.xamarin.com/whats-new-visual-studio-2017-version-15-5/","RawContent":null},{"Title":"Podcast: Xamarin.Forms 2.5.0, Live Player, and What’s New in Visual Studio for Mac","PublishedOn":"2017-12-01T21:48:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover the latest news for mobile developers from Microsoft Connect(); 2017, including Xamarin.Forms 2.5.0 and awesome updates to the Live...","Href":"https://blog.xamarin.com/podcast-xamarin-forms-2-5-0-live-player-whats-new-visual-studio-mac/","RawContent":null},{"Title":"Xamarin Developer Events in December","PublishedOn":"2017-12-01T18:16:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET developer community is vastly expanding, so there&#8217;s more opportunity than ever to network with local user groups and learn about new and exciting releases, tooling, and updates to...","Href":"https://blog.xamarin.com/xamarin-developer-events-december/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6986341641","Type":"PullRequestEvent","CreatedAt":"2017-12-14T02:49:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1102","RelatedDescription":"Merged pull request \"[linker] Drop remaining System.xml preserve list\" (#1102) at xamarin/xamarin-android","RelatedBody":"The original System.xml was copied from monotouch\r\n(monodroid/e5859791fc33dfcc88dca42de70b07f7f4191313). Xamarin.iOS\r\ndoesn't have it any more and we have equal dynamic code to preserve\r\nAPI from System assembly (minus preservation of System.ComponentModel\r\nconverters for Activator.CreateInstance, which we don't use IIRC)\r\n\r\nThe only addition from\r\nmonodroid/a055f1c498f7c4d5960cd1651c950604e9d9e6cc is handled by the\r\nabove mentioned code.\r\n\r\nSo we should be safe by removing this description XML file and save\r\nsome more space."},{"Id":"6984932498","Type":"PullRequestEvent","CreatedAt":"2017-12-13T20:10:13","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1102","RelatedDescription":"Opened pull request \"[linker] Drop remaining System.xml preserve list\" (#1102) at xamarin/xamarin-android","RelatedBody":"The original System.xml was copied from monotouch\r\n(monodroid/e5859791fc33dfcc88dca42de70b07f7f4191313). Xamarin.iOS\r\ndoesn't have it any more and we have equal dynamic code to preserve\r\nAPI from System assembly (minus preservation of System.ComponentModel\r\nconverters for Activator.CreateInstance, which we don't use IIRC)\r\n\r\nThe only addition from\r\nmonodroid/a055f1c498f7c4d5960cd1651c950604e9d9e6cc is handled by the\r\nabove mentioned code.\r\n\r\nSo we should be safe by removing this description XML file and save\r\nsome more space."},{"Id":"6984024205","Type":"PullRequestEvent","CreatedAt":"2017-12-13T16:57:36","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1101","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/e65bf00e\" (#1101) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=56727\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60545\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60545\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60771"},{"Id":"6983706317","Type":"IssuesEvent","CreatedAt":"2017-12-13T16:01:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1099","RelatedDescription":"Closed issue \"bcl-tests are crashing on startup against a system install in release mode \" (#1099) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nFrom a clean install, on macOS, run the following:\r\n1. `msbuild build-tools/xa-prep-tasks/xa-prep-tasks.csproj /p:Configuration=Release /p:HostOS=Darwin`\r\n2. `msbuild build-tools/remap-assembly-ref/remap-assembly-ref.csproj /p:Configuration=Release`\r\n3. `msbuild /t:Install tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj /p:FrameworkPathOverride=/Library/Frameworks/Xamarin.Android.framework/Versions/Current/lib/xbuild-frameworks/MonoAndroid/v1.0/mscorlib.dll`\r\n4. `msbuild /t:RunTests tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj /p:AndroidSdkDirectory=~/Library/Developer/Xamarin/android-sdk-macosx`\r\n\r\nor use the .apk file linked below:\r\n\r\nhttps://microsoft-my.sharepoint.com/:u:/p/pecolli/EcpjRIgbIAZPgOVwrmlF9v4B2KGPRFNMZQEmqTQCHEpV2Q?e=80773f529fa64e058d696b473620f19e\r\n\r\n### Expected Behavior\r\nTests should execute successfully as expected.\r\n\r\n### Actual Behavior\r\nTest run crashes on startup with the following:\r\n```\r\n12-12 16:10:32.727 13007 13007 I MonoDroid: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n```\r\n\r\n### Version Information\r\nmonodroid/master/036e6d9d\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n```\r\n12-12 16:10:32.717 13007 13007 I MonoDroid: UNHANDLED EXCEPTION:\r\n12-12 16:10:32.727 13007 13007 I MonoDroid: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000c1] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00015] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00038] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (System.Reflection.Assembly assembly) [0x00037] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.TestSuiteActivity.AddTest (System.Reflection.Assembly assembly) [0x00005] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.BclTests.MainActivity.OnCreate (Android.OS.Bundle bundle) [0x00019] in <731bde1ea7674d189c9bb47b53a31706>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x0000f] in <6a1b6a0768bc4e74b762836246a0d4b5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at (wrapper dynamic-method) System.Object.a028ea48-bb62-4d53-88b2-bb4efad88e7b(intptr,intptr,intptr)\r\n12-12 16:10:32.731 13007 13007 W zygote64: JNI RegisterNativeMethods: attempt to register 0 native methods for android.runtime.JavaProxyThrowable\r\n12-12 16:10:32.732 13007 13007 D AndroidRuntime: Shutting down VM\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: FATAL EXCEPTION: main\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: Process: Xamarin.Android.Bcl_Tests, PID: 13007\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: android.runtime.JavaProxyThrowable: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000c1] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00015] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00038] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (System.Reflection.Assembly assembly) [0x00037] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.TestSuiteActivity.AddTest (System.Reflection.Assembly assembly) [0x00005] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.BclTests.MainActivity.OnCreate (Android.OS.Bundle bundle) [0x00019] in <731bde1ea7674d189c9bb47b53a31706>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x0000f] in <6a1b6a0768bc4e74b762836246a0d4b5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at (wrapper dynamic-method) System.Object.a028ea48-bb62-4d53-88b2-bb4efad88e7b(intptr,intptr,intptr)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat xamarin.android.bcltests.MainActivity.n_onCreate(Native Method)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat xamarin.android.bcltests.MainActivity.onCreate(MainActivity.java:29)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Activity.performCreate(Activity.java:6999)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Activity.performCreate(Activity.java:6990)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1214)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2731)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.os.Handler.dispatchMessage(Handler.java:106)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.os.Looper.loop(Looper.java:164)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.main(ActivityThread.java:6494)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat java.lang.reflect.Method.invoke(Native Method)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\r\n12-12 16:10:32.737  1140  5035 W ActivityManager:   Force finishing activity Xamarin.Android.Bcl_Tests/xamarin.android.bcltests.MainActivity\r\n12-12 16:10:32.740 13007 13007 I Process : Sending signal. PID: 13007 SIG: 9\r\n12-12 16:10:32.758  1140  1668 I ActivityManager: Process Xamarin.Android.Bcl_Tests (pid 13007) has died: cch  CEM \r\n12-12 16:10:32.758  1140  1173 W zygote64: kill(-13007, 9) failed: No such process\r\n12-12 16:10:32.759  1140  1173 I zygote64: Successfully killed process cgroup uid 10152 pid 13007 in 0ms\r\n```\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"6980070338","Type":"PullRequestEvent","CreatedAt":"2017-12-12T23:37:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1100","RelatedDescription":"Opened pull request \"Bump to LibZipSharp/master/b7aab1e26\" (#1100) at xamarin/xamarin-android","RelatedBody":"Fixes: https://devdiv.visualstudio.com/DevDiv/Release%20Dashboard/_workitems?id=534477&_a=edit\r\n\r\nOn Xamarin.Android 8.1 on Windows, we are experiencing problems with\r\nfile sharing causing build errors:\r\n\r\n\terror while writing anim: obj\\Debug\\android\\bin\\classes\\android\\support\\design\\R$anim.class (The process cannot access the file because it is being used by another process)\r\n\r\nBump to LibZipSharp/b7aab1e2 so that we don't need to rely on the GC\r\nfinalizing object instances to close `FileStream` instances.\r\n\r\nThis deterministic closing of files in turn means that\r\n`ZipArchiveEx.Flush()` no longer needs to call `GC.Collect()`, which\r\nwasn't a reliable fix anyway..."},{"Id":"6979522431","Type":"IssuesEvent","CreatedAt":"2017-12-12T21:21:21","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1099","RelatedDescription":"Opened issue \"bcl-tests are crashing on startup against a system install in release mode \" (#1099) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nFrom a clean install, on macOS, run the following:\r\n1. `msbuild build-tools/xa-prep-tasks/xa-prep-tasks.csproj /p:Configuration=Release /p:HostOS=Darwin`\r\n2. `msbuild build-tools/remap-assembly-ref/remap-assembly-ref.csproj /p:Configuration=Release`\r\n3. `msbuild /t:Install tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj /p:FrameworkPathOverride=/Library/Frameworks/Xamarin.Android.framework/Versions/Current/lib/xbuild-frameworks/MonoAndroid/v1.0/mscorlib.dll`\r\n4. `msbuild /t:RunTests tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj /p:AndroidSdkDirectory=~/Library/Developer/Xamarin/android-sdk-macosx`\r\n\r\nor use the .apk file linked below:\r\n\r\nhttps://microsoft-my.sharepoint.com/:u:/p/pecolli/EcpjRIgbIAZPgOVwrmlF9v4B2KGPRFNMZQEmqTQCHEpV2Q?e=80773f529fa64e058d696b473620f19e\r\n\r\n### Expected Behavior\r\nTests should execute successfully as expected.\r\n\r\n### Actual Behavior\r\nTest run crashes on startup with the following:\r\n```\r\n12-12 16:10:32.727 13007 13007 I MonoDroid: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n```\r\n\r\n### Version Information\r\nmonodroid/master/036e6d9d\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n```\r\n12-12 16:10:32.717 13007 13007 I MonoDroid: UNHANDLED EXCEPTION:\r\n12-12 16:10:32.727 13007 13007 I MonoDroid: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000c1] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00015] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00038] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (System.Reflection.Assembly assembly) [0x00037] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.NUnitLite.TestSuiteActivity.AddTest (System.Reflection.Assembly assembly) [0x00005] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Xamarin.Android.BclTests.MainActivity.OnCreate (Android.OS.Bundle bundle) [0x00019] in <731bde1ea7674d189c9bb47b53a31706>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x0000f] in <6a1b6a0768bc4e74b762836246a0d4b5>:0 \r\n12-12 16:10:32.727 13007 13007 I MonoDroid:   at (wrapper dynamic-method) System.Object.a028ea48-bb62-4d53-88b2-bb4efad88e7b(intptr,intptr,intptr)\r\n12-12 16:10:32.731 13007 13007 W zygote64: JNI RegisterNativeMethods: attempt to register 0 native methods for android.runtime.JavaProxyThrowable\r\n12-12 16:10:32.732 13007 13007 D AndroidRuntime: Shutting down VM\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: FATAL EXCEPTION: main\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: Process: Xamarin.Android.Bcl_Tests, PID: 13007\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: android.runtime.JavaProxyThrowable: System.ArgumentException: An item with the same key has already been added. Key: MonoTests.System.Security.Cryptography.CryptoConfigTest\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000c1] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <efaafba8c16043b198532214e63a585b>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00015] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (NUnit.Framework.Internal.TestSuite suite) [0x00038] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.AndroidRunner.AddTest (System.Reflection.Assembly assembly) [0x00037] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.NUnitLite.TestSuiteActivity.AddTest (System.Reflection.Assembly assembly) [0x00005] in <6dcf6e10f5614546aabd56bb3afb32e5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Xamarin.Android.BclTests.MainActivity.OnCreate (Android.OS.Bundle bundle) [0x00019] in <731bde1ea7674d189c9bb47b53a31706>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x0000f] in <6a1b6a0768bc4e74b762836246a0d4b5>:0 \r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime:   at (wrapper dynamic-method) System.Object.a028ea48-bb62-4d53-88b2-bb4efad88e7b(intptr,intptr,intptr)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat xamarin.android.bcltests.MainActivity.n_onCreate(Native Method)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat xamarin.android.bcltests.MainActivity.onCreate(MainActivity.java:29)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Activity.performCreate(Activity.java:6999)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Activity.performCreate(Activity.java:6990)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1214)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2731)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.os.Handler.dispatchMessage(Handler.java:106)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.os.Looper.loop(Looper.java:164)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat android.app.ActivityThread.main(ActivityThread.java:6494)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat java.lang.reflect.Method.invoke(Native Method)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n12-12 16:10:32.733 13007 13007 E AndroidRuntime: \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\r\n12-12 16:10:32.737  1140  5035 W ActivityManager:   Force finishing activity Xamarin.Android.Bcl_Tests/xamarin.android.bcltests.MainActivity\r\n12-12 16:10:32.740 13007 13007 I Process : Sending signal. PID: 13007 SIG: 9\r\n12-12 16:10:32.758  1140  1668 I ActivityManager: Process Xamarin.Android.Bcl_Tests (pid 13007) has died: cch  CEM \r\n12-12 16:10:32.758  1140  1173 W zygote64: kill(-13007, 9) failed: No such process\r\n12-12 16:10:32.759  1140  1173 I zygote64: Successfully killed process cgroup uid 10152 pid 13007 in 0ms\r\n```\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6986466973","Type":"IssuesEvent","CreatedAt":"2017-12-14T03:38:03","Actor":"wjk","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1398","RelatedDescription":"Opened issue \"Proposal: Keyboard (tab) navigation\" (#1398) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nAdd support for navigating to and from controls (mainly input controls in practice, but any control can be supported in theory) using the Tab key on the keyboard. This would be done using the platform-specific tab-navigation functionality (e.g. `nextKeyView` on Cocoa). This would only be applicable for desktop platforms (WPF/GTK/MacOS).\r\n\r\n## API Changes\r\n\r\nI would suggest the following additions:\r\n\r\n```csharp\r\npublic class View {\r\n    // I'm not sure if these should be bindable properties or not.\r\n    public int TabIndex { get; set; }\r\n    public bool TabVisible { get; set; }\r\n}\r\n```\r\n\r\nIf `TabVisible == false`, then the control should be ignored by the tab-navigation infrastructure (and the `TabIndex` value is also ignored). The controls should be tabbed through in ascending order of `TabIndex`, wrapping around to the beginning once the end of the list is reached.\r\n\r\nIf a `Layout` or subclass thereof has `TabVisible == true`, then the behavior changes slightly. The layout itself is not placed into the tab order; rather, the platform subsystem makes it so that the direct child of the layout that has the lowest `TabIndex` (and `TabVisible == true`) is placed after the previous sibling of the `Layout` in tab-order; and the direct child of the layout with the highest `TabIndex` (and `TabVisible == true`) would be placed before the next sibling of the `Layout` in tab-order. The intent is that tab navigation can go \"into\" and \"out of\" the layout container without any impact to the user.\r\n\r\nIf a control has `IsVisible == false`, then it should be skipped by the tabbing mechanism (although I'm pretty sure that the platforms already do that for us).\r\n\r\nOn mobile platforms (where tab navigation generally makes no sense), the existence and values of these two properties should be silently ignored.\r\n\r\n## Intended Use Case\r\nTo enable programmer-controllable tabbing back and forth between input controls (and possibly others as well) on desktop platforms.\r\n\r\n## Notes\r\nThis is my first time proposing a change to the Xamarin.Forms core. In addition, I'm pretty sure that there is no way to accomplish this without modifying the core itself. (I could in theory vendor the platform libraries into my solution and modify them, making them reference an additional assembly containing the XAML-visible code, but then the common code might as well go into the core anyway.) If there is a way to accomplish this without modifying the core, please let me know; I have not been able to find any. Thanks!"},{"Id":"6986235601","Type":"PullRequestEvent","CreatedAt":"2017-12-14T02:09:49","Actor":"rookiejava","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1397","RelatedDescription":"Opened pull request \"Use GlobalAssemblyInfo on tizen backend\" (#1397) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis PR is for using `GlobalAssemblyInfo` on `Xamarin.Forms.Platform.Tizen.csproj` and `Xamarin.Forms.Maps.Tizen.csproj`.\r\n\r\n### Bugs Fixed ###\r\n\r\nNone\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nTizen backend asssembly version will be detemined by GlobalAssemblyInfo\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of master at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"},{"Id":"6985811027","Type":"IssuesEvent","CreatedAt":"2017-12-13T23:43:13","Actor":"xamoulin","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1396","RelatedDescription":"Opened issue \"Label HorizontalTextAlignment (Center or End) is not kept when navigating back to a page\" (#1396) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThe horizontal text alignment of a label is lost on Android when navigating to another page and coming back. It's not updated until the text is updated (via binding). It's the same erroneous behavior whether the Label is in a Grid or a StackLayout. It works as expected on iOS and I haven't tested other platforms.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Have a label with HorizontalTextAlignment = Center or End\r\n2. Navigate to another page\r\n3. Come back\r\n\r\n### Expected Behavior\r\n\r\nThe text is aligned center or right as configured.\r\n\r\n### Actual Behavior\r\n\r\nThe text is aligned left until the text is updated (via binding).\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- IDE: Rider\r\n- Platform Target Frameworks: \r\n  - Android: 7.1.1 \r\n- Android Support Library Version: 26.1.01\r\n- Affected Devices: Android simulator\r\n\r\n### Related\r\n\r\nIt seems to be the same bug as described here : https://stackoverflow.com/questions/43147929/xamarin-label-losing-text-alignment-when-page-returned-to. Sadly, I can't use the proposed workaround which is to set HorizontalOptions=EndAndExpand or End because the Label flicker when its size changes because of text changes."},{"Id":"6985590434","Type":"IssuesEvent","CreatedAt":"2017-12-13T22:41:17","Actor":"SlaKul","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1395","RelatedDescription":"Opened issue \"Xamarin.Forms Grid Measure and Layout bug\" (#1395) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI attached a simple xaml to reproduce the problem and screenshots. There are four labels \"Begin t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 end\" which I am not able to show in the correct way without clipping.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks:\r\n  - UWP:  16299\r\n\r\n### Screenshots\r\n\r\nDuring windows resize\r\n\r\n- ![b1](https://user-images.githubusercontent.com/14055723/33965950-17b5f948-e05e-11e7-9003-660d2c948e86.PNG)\r\n\r\n- ![b2](https://user-images.githubusercontent.com/14055723/33965978-1fa20d68-e05e-11e7-8293-a9973f7ab0da.PNG)\r\n\r\n- ![b3](https://user-images.githubusercontent.com/14055723/33965979-1fba3adc-e05e-11e7-93b4-648cf4e40474.PNG)\r\n\r\nWhen I removed the row with Height=\"*\" from the main grid\r\n\r\n- ![bx1](https://user-images.githubusercontent.com/14055723/33965976-1f71a63c-e05e-11e7-8d5a-d6942275eda5.PNG)\r\n\r\n### Reproduction Link\r\n\r\n[TestPage2.zip](https://github.com/xamarin/Xamarin.Forms/files/1557359/TestPage2.zip)\r\n"},{"Id":"6984308459","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:54:56","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1394","RelatedDescription":"Merged pull request \"[Xaml] open the api for loading xaml from string\" (#1394) at xamarin/Xamarin.Forms","RelatedBody":"This should never ever be used as a mechanism for loading your application screens.\r\n\r\nIt might be used if you're writing tools and IDE that generates xaml."},{"Id":"6984104326","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:12:36","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1197","RelatedDescription":"Merged pull request \"[Android] Prevent a custom Entry/Editor Drawable from modifying non-custom ones\" (#1197) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUsing a custom renderer for an `Entry`/`Editor` which uses a modified `Drawable` as the first one on the page affects the others (in the report, it refers to the tint that changes the underline's color). Utilizing [`DrawableCompat.Wrap(Drawable drawable)`](https://developer.android.com/reference/android/support/v4/graphics/drawable/DrawableCompat.html#wrap(android.graphics.drawable.Drawable)) adjusts its state in a manner so that a custom renderers won't interfere with the default appearance. \r\n\r\nBefore:\r\n![before](https://user-images.githubusercontent.com/1251024/31516711-7c9b03bc-af67-11e7-92d2-91f6454c48de.JPG)\r\n\r\nAfter:\r\n![after](https://user-images.githubusercontent.com/1251024/31516714-809a991e-af67-11e7-9d2a-a6ed3fe2b27f.JPG)\r\n\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59457\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nBased on the screenshots above, side-effects don't seem apparent, and any subsequent changes in overriding `OnElementChanged` (such as with the custom renderer in this example) should still be respected.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6983457333","Type":"PullRequestEvent","CreatedAt":"2017-12-13T15:20:00","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1394","RelatedDescription":"Opened pull request \"[Xaml] open the api for loading xaml from string\" (#1394) at xamarin/Xamarin.Forms","RelatedBody":"A big part of me is dying\r\n\r\nThis should never ever be used as a mechanism for loading your application screens.\r\n\r\nIt might be used if you're writing tools and IDE that generates xaml."}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6986276787","Type":"PullRequestEvent","CreatedAt":"2017-12-14T02:25:14","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3098","RelatedDescription":"Opened pull request \"Bump maccore and guiunit to HEAD\" (#3098) at xamarin/xamarin-macios","RelatedBody":"There's a separate PR for mono\nhttps://github.com/xamarin/xamarin-macios/pull/3082"},{"Id":"6985786906","Type":"PullRequestEvent","CreatedAt":"2017-12-13T23:35:39","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3097","RelatedDescription":"Opened pull request \"Update API diff references with xcode92 data\" (#3097) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6984709220","Type":"PullRequestEvent","CreatedAt":"2017-12-13T19:21:30","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3096","RelatedDescription":"Opened pull request \"Remove PMCS processing of availability attributes\" (#3096) at xamarin/xamarin-macios","RelatedBody":"- This PR is part of the \"remove\" PMCS workset, this one focusing on all availability attribute processing.\r\n- As part of the PR involves touching a massive number of files, looking at each individual commit may be useful. In particular \"Remove PMCS preprocessing of attributes\"\r\n- This PR is _IN WORK_. It commits, but let's not ship it yet."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"940998780735901697","CreatedAt":"2017-12-13T17:36:06+00:00","UserScreenname":"xamarinhq","Text":"Our own @jamesmontemagno shows you how to leverage the #Xamarin Live Player with your iOS applications:… https://t.co/S9D0tIvHrH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"940986925623758850","CreatedAt":"2017-12-13T16:49:00+00:00","UserScreenname":"xamarinhq","Text":"Last call! Join us now for our webinar on how to \"Get the Most out of Android 8 Oreo with #VisualStudio Tools for… https://t.co/N6AGPhXuJD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null},{"Id":"940644784422707200","CreatedAt":"2017-12-12T18:09:27+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the #Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/0Mcb5bx9j6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":42,"FavoriteCount":29,"RawContent":null},{"Id":"940613212508184576","CreatedAt":"2017-12-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Register for one or register for both, but don't miss this week's webinars on updating your #Xamarin apps to get th… https://t.co/9Xtm5gjLw8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"940313518418661377","CreatedAt":"2017-12-11T20:13:07+00:00","UserScreenname":"xamarinhq","Text":"Expand your app horizons by building your first #tvOS app with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/IcA9ZV1nmN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":21,"RawContent":null},{"Id":"940264162273439744","CreatedAt":"2017-12-11T16:57:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":43,"RawContent":null},{"Id":"940013259083735041","CreatedAt":"2017-12-11T00:20:00+00:00","UserScreenname":"xamarinhq","Text":"Register now for this week's webinars on how to update your #Xamarin apps to get the most out of Android 8 Oreo (12… https://t.co/ARs0FVWV0P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":10,"RawContent":null},{"Id":"939540900635607041","CreatedAt":"2017-12-09T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/xWBM7qo6ZK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":23,"RawContent":null},{"Id":"939234630691180549","CreatedAt":"2017-12-08T20:46:00+00:00","UserScreenname":"xamarinhq","Text":"#NativeForms is all polished and ready for you in #XamarinForms 2.5.0. Get started: https://t.co/8ZTIbOktJX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":111,"FavoriteCount":68,"RawContent":null},{"Id":"939193776089772032","CreatedAt":"2017-12-08T18:03:40+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSAppCenter: https://t.co/XHMCHeVNSB https://t.co/pEYDruWIGp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":13,"RawContent":null},{"Id":"938851228209033219","CreatedAt":"2017-12-07T19:22:30+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/Ei8f1vdY4X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":86,"FavoriteCount":38,"RawContent":null},{"Id":"938814862695849984","CreatedAt":"2017-12-07T16:58:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":25,"RawContent":null},{"Id":"938480168515055617","CreatedAt":"2017-12-06T18:48:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing the #Azure Mobile Badge from @XamarinU! Get started today: https://t.co/iirsQ3UrwL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":73,"FavoriteCount":26,"RawContent":null},{"Id":"938450714149445637","CreatedAt":"2017-12-06T16:51:00+00:00","UserScreenname":"xamarinhq","Text":"Don't forget to register for next week's webinars on updating your #Xamarin apps to get the most out of Android 8 O… https://t.co/1dK9RFJUEq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":22,"RawContent":null},{"Id":"938141429167198208","CreatedAt":"2017-12-05T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"See how ￼Fidelity Mobile is uniting Brazilian citizens and their elected officials using real-time chat apps built… https://t.co/z6zRiQICHR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":12,"RawContent":null},{"Id":"938089332048564224","CreatedAt":"2017-12-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":10,"RawContent":null},{"Id":"937774983811616774","CreatedAt":"2017-12-04T20:05:53+00:00","UserScreenname":"xamarinhq","Text":"See what’s new in #VisualStudio 2017 version 15.5: https://t.co/wdtvE6HR1g https://t.co/ASOjIPtCt6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":174,"FavoriteCount":143,"RawContent":null},{"Id":"937729008883699712","CreatedAt":"2017-12-04T17:03:12+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/XFAEcWNh5K","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"937507246317203457","CreatedAt":"2017-12-04T02:22:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to embed any #XamarinForms ContentPage into your #Xamarin iOS and Android projects: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2017-12-14T05:30:43.366618Z","RunDurationInMilliseconds":4166}