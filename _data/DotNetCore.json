{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)","PublishedOn":"2018-05-24T01:49:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)","PublishedOn":"2018-05-21T22:44:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update). Quality and Reliability This release contains the following quality and reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup for Windows 10","PublishedOn":"2018-05-17T17:20:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup for Windows 10 1703 (Creators Update) and Windows 10 1607 (Anniversary Update). Quality and Reliability This release contains the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/","RawContent":null},{"Title":".NET Framework May 2018 Preview of Quality Rollup","PublishedOn":"2018-05-15T18:10:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Resolves an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":289,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7697516495","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:04:23","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Merged pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"},{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7732818725","Type":"IssuesEvent","CreatedAt":"2018-05-26T02:48:08","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18137","RelatedDescription":"Opened issue \"Create a profiler API that appends to the TPA list\" (#18137) at dotnet/coreclr","RelatedBody":"This is a more distilled design proposal that solves issues raised in #3894. The idea is to add a new profiler API such as:\r\n\r\n    ICorProfilerInfo10::AddTrustedAssemblyPath(AppDomainID appDomainId, WCHAR* pAssemblyPath)\r\n\r\nwhich will add a path to list of assemblies that the runtime probes to resolve assembly references. This allows profilers to instrument managed code and include assembly references to a new assembly that was deployed by the profiler rather than being deployed as part of the application.\r\n\r\n\r\n**Background info to assist implementors**\r\n\r\nProbably the hardest part of the problem is creating a testable repro scenario (assuming you don't already have your own IL instrumenting profiler handy). There is an example instrumenting profiler here: https://github.com/Microsoft/clr-samples/tree/master/ProfilingAPI/ReJITEnterLeaveHooks that has most of what is necessary. However this example instruments using a CALLI instruction:\r\nhttps://github.com/Microsoft/clr-samples/blob/master/ProfilingAPI/ReJITEnterLeaveHooks/ILRewriter.cpp#L746\r\n\r\nTo reproduce the problem here the profiler instead needs to:\r\n1) Include with the profiler a new managed assembly that has the implementation of some simple callback within it. Lets call this ManagedInstrumentation.dll.\r\n\r\n```\r\n     public static class ManagedCallbackFunctions\r\n     {\r\n         public static void OnMethodEnter(int functionId)\r\n         {\r\n              Console.WriteLine(\"Function \" + functionId + \" was called\");\r\n         }\r\n     }\r\n```\r\n\r\n2) Use IMetaDataAssemblyEmit::DefineAssemblyRef to create an AssemblyRef token that refers to the ManagedInstrumentation.dll assembly.\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/metadata/imetadataassemblyemit-defineassemblyref-method\r\n3) Use IMetaDataEmit::DefineTypeRefByName and DefineMemberRef \r\nhttps://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/metadata/imetadataemit-definetyperefbyname-method\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/metadata/imetadataemit-definememberref-method\r\nto create a MemberRef token that refers to ManagedCallbackFunctions.OnMethodEnter\r\n4) Change the instrumentation to use an IL CALL opcode with the ManagedCallbackFunctions.OnMethodEnter token\r\n\r\nRunning an application with this profiler should fail because ManagedInstrumentation.dll can't be located.\r\n\r\n5) To test the new API you will need to handle the AppDomainCreationFinished callback. In the handler QI for ICorProfilerInfo10 and then invoke AddTrustedAssemblyPath(domainId, path_to_ManagedInstrumentation.dll). Initially the QI will fail, but once the feature is implemented this call should succeed at modifying the assembly list. Later the compilation of instrumented methods should also succeed because the runtime will find ManagedInstrumentation.dll and load it.\r\n\r\nTo implement the feature:\r\n1) Add the new API to https://github.com/dotnet/coreclr/blob/master/src/inc/corprof.idl\r\n2) Add an implementation to \r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/proftoeeinterfaceimpl.h\r\nhttps://github.com/dotnet/coreclr/blob/master/src/vm/proftoeeinterfaceimpl.cpp\r\n\r\nThe implementation of the method needs to change the TPA list which is stored here: \r\nhttps://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/binder/inc/applicationcontext.inl#L74\r\n\r\nNavigating to that datastructure should be something like:\r\n\r\n    BaseDomain* pDomain = (BaseDomain *) appDomainId;\r\n    pDomain->GetTPABinderContext()->GetAppContext()->GetTpaList();\r\n\r\n\r\nMore background docs about CLR and profiling:\r\nhttps://github.com/dotnet/coreclr/tree/master/Documentation/botr\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/profiling.md\r\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/botr/profilability.md\r\n\r\nWhere the TPA list normally gets set from without using a profiler:\r\nhttps://github.com/dotnet/coreclr/blob/ef88a92215a8f90fe0bd8b0327c16bb889902105/src/vm/corhost.cpp#L820\r\nInside the pProfilerNames/Values there is a property named TRUSTED_PLATFORM_ASSEMBLIES with a list of assembly paths. The runtime host constructs this list however they want (dotnet.exe assembles it from some .json configuration files like app.deps.json) and then the runtime stores it.\r\n\r\n"},{"Id":"7732725650","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:30:10","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18136","RelatedDescription":"Opened pull request \"R2RDump - Commandline interface\" (#18136) at dotnet/coreclr","RelatedBody":""},{"Id":"7732723754","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:28:34","Actor":"acmyu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18108","RelatedDescription":"Closed pull request \"R2RDump - Commandline interface\" (#18108) at dotnet/coreclr","RelatedBody":""},{"Id":"7732716753","Type":"IssuesEvent","CreatedAt":"2018-05-26T01:22:46","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15033","RelatedDescription":"Closed issue \"Null reference in JITCompilationFinished\" (#15033) at dotnet/coreclr","RelatedBody":"@sillyousu reported a crash in the profiler in thread #445 - I am creating a new issue for that discussion here.\r\n\r\nMy suggestion to investigate this is either to manually map the disassembly to source, or to build your own coreclr with symbols so the debugger will do it for you. The function where it failed is fairly small so if you are familiar with disassembly it shouldn't be too bad:\r\nhttps://github.com/dotnet/coreclr/blob/67a66156d0307b49522a13618522d289268bc1f9/src/vm/eetoprofinterfaceimpl.cpp#L3184\r\n\r\nThat will narrow the issue from the method to the particular operation that encountered the NULL.\r\n"},{"Id":"7732667287","Type":"PullRequestEvent","CreatedAt":"2018-05-26T00:45:15","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18135","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26526-01 (master)\" (#18135) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7731385459","Type":"PullRequestEvent","CreatedAt":"2018-05-25T18:04:43","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/754","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02824-02 (master)\" (#754) at dotnet/standard","RelatedBody":""},{"Id":"7729089441","Type":"IssuesEvent","CreatedAt":"2018-05-25T10:17:49","Actor":"VitalickS","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/755","RelatedDescription":"Opened issue \"Assembly incapsulation mechanizm not implemented\" (#755) at dotnet/standard","RelatedBody":"Hi. It was surprise for me, that I cannot use standard incapsulation in new dotnet core. I want separate 3 standard architecture layers for DAL, BLL, WebClient, but when I referenced it, I can see and call DAL methods in WebClient. Google has no answer, but it seems like you don't care about it. Can you help me with my problem?\r\n\r\nIn short words I attach simple image \r\n![3 layers](https://user-images.githubusercontent.com/10177561/40539622-f6b851d8-601d-11e8-9660-84dadd7aff3c.png)\r\n"},{"Id":"7725722906","Type":"PullRequestEvent","CreatedAt":"2018-05-24T18:51:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/754","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02824-02 (master)\" (#754) at dotnet/standard","RelatedBody":""},{"Id":"7725600325","Type":"PullRequestEvent","CreatedAt":"2018-05-24T18:29:40","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/753","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02824-01 (master)\" (#753) at dotnet/standard","RelatedBody":""},{"Id":"7724780186","Type":"PullRequestEvent","CreatedAt":"2018-05-24T15:57:25","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/753","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02824-01 (master)\" (#753) at dotnet/standard","RelatedBody":""},{"Id":"7720571229","Type":"PullRequestEvent","CreatedAt":"2018-05-23T23:54:41","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/748","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02823-01 (master)\" (#748) at dotnet/standard","RelatedBody":""},{"Id":"7713238279","Type":"IssuesEvent","CreatedAt":"2018-05-22T20:23:23","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/737","RelatedDescription":"Closed issue \"Misc build failures in 'official/standard/master/' - '20180517.01'\" (#737) at dotnet/standard","RelatedBody":"@dotnet-mc-bot commented on [Thu May 17 2018](https://github.com/dotnet/core-eng/issues/3507)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1696522\r\n  - **Agent:** DDVSOWINAGE021\r\n  - **Error log:** ##[error]Process completed with exit code 1....\r\n\r\n@jcagme, @markwilkie\r\n\n\n---\n\n@weshaggard commented on [Thu May 17 2018](https://github.com/dotnet/core-eng/issues/3507#issuecomment-389922476)\n\n@wtgodbe this looks like your issue. Apparently calling Tools/msbuild.cmd directly will not work because that doesn't initialize VS. You would need to make sure you go through run.cmd which does initialize VS. \n\n---\n\n@jcagme commented on [Thu May 17 2018](https://github.com/dotnet/core-eng/issues/3507#issuecomment-389925626)\n\nMoving this to standard repo\n\n"},{"Id":"7713136600","Type":"PullRequestEvent","CreatedAt":"2018-05-22T20:03:26","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/752","RelatedDescription":"Merged pull request \"Get access to build.common.targets in publish.msbuild in 2.0.0\" (#752) at dotnet/standard","RelatedBody":"Without this, builds fail in signing because they don't have access to the SignFiles target. Importing dir.targets gets us build.common.targets from buildtools, which we need to run the Signing targets. Pattern here matches what is already in the other repos."},{"Id":"7713135711","Type":"PullRequestEvent","CreatedAt":"2018-05-22T20:03:16","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/752","RelatedDescription":"Opened pull request \"Get access to build.common.targets in publish.msbuild in 2.0.0\" (#752) at dotnet/standard","RelatedBody":"Without this, builds fail in signing because they don't have access to the SignFiles target. Importing dir.targets gets us build.common.targets from buildtools, which we need to run the Signing targets. Pattern here matches what is already in the other repos."},{"Id":"7713134617","Type":"PullRequestEvent","CreatedAt":"2018-05-22T20:03:03","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/751","RelatedDescription":"Merged pull request \"Get access to build.common.targets in publish.msbuild in master\" (#751) at dotnet/standard","RelatedBody":"Without this, builds fail in signing because they don't have access to the `SignFiles` target. Importing dir.targets gets us build.common.targets from buildtools, which we need to run the Signing targets. Pattern here matches what is already in the other repos."},{"Id":"7713133002","Type":"PullRequestEvent","CreatedAt":"2018-05-22T20:02:45","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/751","RelatedDescription":"Opened pull request \"Get access to build.common.targets in publish.msbuild in master\" (#751) at dotnet/standard","RelatedBody":"Without this, builds fail in signing because they don't have access to the `SignFiles` target. Importing dir.targets gets us build.common.targets from buildtools, which we need to run the Signing targets. Pattern here matches what is already in the other repos."},{"Id":"7712974928","Type":"PullRequestEvent","CreatedAt":"2018-05-22T19:31:13","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/750","RelatedDescription":"Merged pull request \" Rename config.json task to avoid confusing run.cmd\" (#750) at dotnet/standard","RelatedBody":"For https://github.com/dotnet/standard/issues/737"},{"Id":"7712974322","Type":"PullRequestEvent","CreatedAt":"2018-05-22T19:31:07","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/749","RelatedDescription":"Merged pull request \"Rename config.json task to avoid confusing run.cmd in master\" (#749) at dotnet/standard","RelatedBody":"For https://github.com/dotnet/standard/issues/737"},{"Id":"7712973222","Type":"PullRequestEvent","CreatedAt":"2018-05-22T19:30:53","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/750","RelatedDescription":"Opened pull request \" Rename config.json task to avoid confusing run.cmd\" (#750) at dotnet/standard","RelatedBody":"For https://github.com/dotnet/standard/issues/737"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7732666607","Type":"PullRequestEvent","CreatedAt":"2018-05-26T00:44:47","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29933","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26526-01, preview1-26525-04, respectively (master)\" (#29933) at dotnet/corefx","RelatedBody":""},{"Id":"7732573386","Type":"PullRequestEvent","CreatedAt":"2018-05-25T23:49:49","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29520","RelatedDescription":"Merged pull request \"Update main Win10 CI machine to RS4\" (#29520) at dotnet/corefx","RelatedBody":"Per https://github.com/dotnet/core-eng/issues/3420 this is now available.\r\n\r\n@dotnet-bot test ci please"},{"Id":"7732571835","Type":"PullRequestEvent","CreatedAt":"2018-05-25T23:48:59","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29930","RelatedDescription":"Merged pull request \"Disable downloading coreclr symbols when building from source\" (#29930) at dotnet/corefx","RelatedBody":"We try to download symbols from the blob feed URL using the coreclr dependency version. In source-build this version is the one recently built locally so it will never find the symbols package with that version in the feed.\r\n\r\ncc: @weshaggard "},{"Id":"7732554913","Type":"PullRequestEvent","CreatedAt":"2018-05-25T23:40:04","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29918","RelatedDescription":"Merged pull request \"Dispose sockets from failed static Socket.ConnectAsync calls with non-DnsEndPoints\" (#29918) at dotnet/corefx","RelatedBody":"The static Socket.ConnectAsync manufactures a Socket instance and only hands it back to the developer via the SocketAsyncEventArgs if the operation completes successfully.  If it instead fails, Socket.ConnectAsync should be disposing the instance, to avoid waiting for finalizer to clean up eventually.  It was doing so in the case of a DnsEndPoint, but not for other end points.  This fixes that.\r\n\r\nI don't love the fix, but given the APIs exposed, I'm not aware of a better approach.  There's no test here as I'm not aware of a good automated way to verify it, but I did verify it's fixed using PerfView and ETW events emitted for finalized objects.  Using this repro:\r\n```C#\r\nusing System;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    public static void Main()\r\n    {\r\n        Task[] tasks = Enumerable.Range(0, 100).Select(async _ =>\r\n        {\r\n            var tcs = new TaskCompletionSource<bool>();\r\n            using (var e = new SocketAsyncEventArgs())\r\n            {\r\n                e.RemoteEndPoint = new IPEndPoint(IPAddress.Loopback, 12345);\r\n                e.Completed += delegate { tcs.SetResult(true); };\r\n                if (Socket.ConnectAsync(SocketType.Stream, ProtocolType.Tcp, e)) await tcs.Task;\r\n            }                \r\n        }).ToArray();\r\n        try { Task.WaitAll(tasks); } catch { }\r\n        GC.Collect();\r\n        GC.WaitForPendingFinalizers();\r\n    }\r\n}\r\n```\r\nbefore the fix I see this in PerfView for finalized objects:\r\n\r\n| Type | Count |\r\n| -- | -- |\r\n| System.Net.Sockets.Socket | 100 |\r\n| System.Net.Sockets.SafeCloseSocket | 100 |\r\n| Microsoft.Win32.SafeHandles.SafeRegistryHandle | 1 |\r\n| System.Gen2GcCallback | 1 |\r\n\r\nand after:\r\n\r\n| Type | Count |\r\n| -- | -- |\r\n| Microsoft.Win32.SafeHandles.SafeRegistryHandle | 1 |\r\n| System.Gen2GcCallback | 1 |\r\n\r\nFixes https://github.com/dotnet/corefx/issues/29285\r\nI fixed this now as I expect it'll be important for https://github.com/dotnet/corefx/pull/29792.\r\ncc: @davidsh, @geoffkizer, @rmkerr "},{"Id":"7732554902","Type":"IssuesEvent","CreatedAt":"2018-05-25T23:40:04","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29285","RelatedDescription":"Closed issue \"Socket.ConnectAsync with an IPAddress and a failed connection leaves a Socket for finalization\" (#29285) at dotnet/corefx","RelatedBody":"The static Socket.ConnectAsync method creates one or more Sockets to use to establish the connection, and that Socket is then returned when the connection is made successfully.  When the connection fails, it's supposed to Dispose of the created Socket(s).  But it's failing to do so when something other than a DnsEndPoint is supplied, hitting this code path:\r\nhttps://github.com/dotnet/corefx/blob/4fc38265fb35fd6bfc982b8e35a2545502e596b3/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L3975-L3976\r\nthat creates the Socket but then uses the public `ConnectAsync(SocketAsyncEventArgs)`, which can't Dispose of the Socket because it doesn't know that it's one internally created (since it's a public method and the caller owns the Socket instance).  This ends up leaking a socket handle / file descriptor until the Socket / SafeHandle's finalizer runs to close it, eventually.\r\n\r\nThis issue exists in both .NET Core and .NET Framework, and appears to have existed for a long time.  However, it's showing up as an issue for SocketsHttpHandler, due to this optimization:\r\nhttps://github.com/dotnet/corefx/blob/4fc38265fb35fd6bfc982b8e35a2545502e596b3/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs#L57-L59\r\nwhere SocketsHttpHandler is trying to take the more optimized IPEndPoint path when an IP address is supplied.  This then means that HttpClient failed connects end up leaking a handle / file descriptor similarly until the finalizer runs, which if lots of requests are being made, could result in \"too many open files\" errors on Unix.\r\n\r\nI'm marking this as a 2.1 issue just for the SocketsHttpHandler fix, as it's a new issue in 2.1.  The Sockets issue should be addressed, but it's long-standing and can be deferred to 2.2."},{"Id":"7732507732","Type":"PullRequestEvent","CreatedAt":"2018-05-25T23:17:46","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29931","RelatedDescription":"Merged pull request \"Disable multicast socket tests on Nano\" (#29931) at dotnet/corefx","RelatedBody":"See: #29929"},{"Id":"7732442668","Type":"IssuesEvent","CreatedAt":"2018-05-25T22:50:07","Actor":"fujiy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29932","RelatedDescription":"Opened issue \"Socket Pool\" (#29932) at dotnet/corefx","RelatedBody":"There is several performance critical scenarios that can benefit from Socket reuse through pooling.\r\n\r\nHave you considered it?\r\n\r\nI'm not sure about the API, if it would be a new class (with Rent and Return), or a implementation in Socket itself (like SqlConnection).\r\n\r\nHere we have a sample, but based on TcpClient: https://www.codeproject.com/Articles/35011/NET-TCP-Connection-Pooling. It is very simple and uses lock."},{"Id":"7732391989","Type":"PullRequestEvent","CreatedAt":"2018-05-25T22:30:22","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29931","RelatedDescription":"Opened pull request \"Disable multicast socket tests on Nano\" (#29931) at dotnet/corefx","RelatedBody":"See: #29929"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7732702348","Type":"PullRequestEvent","CreatedAt":"2018-05-26T01:11:26","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5860","RelatedDescription":"Opened pull request \"Enable OSX and Linux CoreFX CI tests\" (#5860) at dotnet/corert","RelatedBody":"This is a staging commit for a limited set of CoreFX tests to be run on MacOS and Linux on every PR."},{"Id":"7732589701","Type":"PullRequestEvent","CreatedAt":"2018-05-25T23:58:37","Actor":"maryamariyan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5859","RelatedDescription":"Opened pull request \"[JustForView] visualizing diff needed in corert for Stackframe to go to shared\" (#5859) at dotnet/corert","RelatedBody":"Related to PR dotnet/coreclr#18134 which moves common StackFrame logic to shared"},{"Id":"7731440244","Type":"PullRequestEvent","CreatedAt":"2018-05-25T18:16:53","Actor":"crummel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5858","RelatedDescription":"Opened pull request \"Use new Helix queue for Windows CI builds.\" (#5858) at dotnet/corert","RelatedBody":"Skip CI please."},{"Id":"7730398290","Type":"IssuesEvent","CreatedAt":"2018-05-25T14:43:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3776","RelatedDescription":"Closed issue \"ObjWriter for armel tizen\" (#3776) at dotnet/corert","RelatedBody":"We tried to build ObjWriter for armel tizen from the current version of https://github.com/dotnet/llilc. But we found that it is too old, in particular there are some sections in CoreRT that are not processed by ObjWriter from this repository. Where can we take more up-to-date version of it with the appropriate building instructions?"},{"Id":"7729586995","Type":"IssuesEvent","CreatedAt":"2018-05-25T12:11:14","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5857","RelatedDescription":"Opened issue \"Alpine Linux CI job\" (#5857) at dotnet/corert","RelatedBody":"For Linux x64, there is ObjectWriter package published at: https://dotnet.myget.org/feed/dotnet-core/package/nuget/runtime.linux-x64.Microsoft.DotNet.ObjectWriter, produced by https://github.com/dotnet/corert/blob/e874d6c/pkg/Microsoft.DotNet.ObjectWriter/Microsoft.DotNet.ObjectWriter.pkgproj#L23. Same goes for Microsoft.DotNet.ILCompiler.\r\n\r\nToday, the RID for Alpine Linux expect to have `runtime.linux-musl-x64.Microsoft.DotNet.ObjectWriter`.\r\n\r\nCould there be a CI job configured for Linux with musl-libc, that will produce such a package? In CoreCLR and CoreFX, there is are dedicated CI jobs to produce native packages for Alpine Linux."},{"Id":"7728973241","Type":"PullRequestEvent","CreatedAt":"2018-05-25T09:54:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5856","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5856) at dotnet/corert","RelatedBody":""},{"Id":"7728972152","Type":"PullRequestEvent","CreatedAt":"2018-05-25T09:54:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5856","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5856) at dotnet/corert","RelatedBody":""},{"Id":"7727622627","Type":"IssuesEvent","CreatedAt":"2018-05-25T03:51:37","Actor":"KyleGobel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5855","RelatedDescription":"Opened issue \"Exception during deserialization\" (#5855) at dotnet/corert","RelatedBody":"Hey,\r\n\r\nJust wanted to give this a shot on a fairly simple CLI app.  When attempting to run I get this error:\r\n\r\nFollowed one of your examples and ran\r\n> `dotnet publish -r win-x64 -c Release`\r\n\r\nWhen attempting to run my app I get:\r\n\r\n```\r\n(Line: 1, Col: 1, Idx: 0) - (Line: 1, Col: 1, Idx: 0): Exception during deserialization\r\n```\r\nI'm not really sure where this message is coming from.  Any pointers debugging this?  There is a little json deserialization going in there, does this essentially mean one of my the dependencies i'm using is doing something unsupported?"},{"Id":"7727159970","Type":"PullRequestEvent","CreatedAt":"2018-05-25T00:50:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5853","RelatedDescription":"Merged pull request \"Use sysconf(_SC_NPROCESSORS_CONF) to get number of processors\" (#5853) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/18053/"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"999498830528696320","CreatedAt":"2018-05-24T03:54:25+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803) https://t.co/U6TCTrPkfb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"998698514065510400","CreatedAt":"2018-05-21T22:54:15+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update) https://t.co/a0E1oZkvk2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-05-26T05:30:23.0627192Z","RunDurationInMilliseconds":7136}