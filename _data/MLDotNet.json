{"Data":{"GitHub":{"Issues":[{"Id":"509336351","IsPullRequest":false,"CreatedAt":"2019-10-18T22:23:13","Actor":"CESARDELATORRE","Number":"4352","RawContent":null,"Title":"[Microsoft.Extensions.ML] Update Microsoft.Extensions.ML from 0.16.0-preview2 to 1.4","State":"open","Body":"@eerhardt \r\n\r\nWe need to update Microsoft.Extensions.ML from 0.16.0-preview2 to 1.4 so it'll be ready for 1.4 GA.\r\n\r\nThis is mostly related to the .NET Integration package implementing the PredictionEnginePool for multi-threaded apps such as ASP.NET Core apps/services.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4352","RelatedDescription":"Open issue \"[Microsoft.Extensions.ML] Update Microsoft.Extensions.ML from 0.16.0-preview2 to 1.4\" (#4352)"},{"Id":"509319807","IsPullRequest":true,"CreatedAt":"2019-10-18T21:31:42","Actor":"ashbhandare","Number":"4351","RawContent":null,"Title":"Add support for Mobilenet v2 in Image Classification transfer learning","State":"open","Body":"The base MobileNetV2 model is from https://github.com/tensorflow/models/tree/master/research/slim/nets/mobilenet . Checkpoint file used: https://storage.googleapis.com/mobilenet_v2/checkpoints/mobilenet_v2_1.4_224.tgz\r\n\r\nBenchmarked transfer learning on the Cats V/s Dogs dataset at:\r\nhttps://www.microsoft.com/en-us/download/details.aspx?id=54765\r\n\r\nTrained last layer for 10 epochs with 0.0001f learning rate with batch size 32.\r\nFinal accuracy on eval set:\r\n Micro-accuracy: 0.980959936533122,macro-accuracy = 0.980874311779911\r\nComparable Tensorflow acuracy for same task: \r\nhttps://www.tensorflow.org/tutorials/images/transfer_learning#train_the_model","Url":"https://github.com/dotnet/machinelearning/pull/4351","RelatedDescription":"Open PR \"Add support for Mobilenet v2 in Image Classification transfer learning\" (#4351)"},{"Id":"509277396","IsPullRequest":true,"CreatedAt":"2019-10-18T19:46:25","Actor":"ashbhandare","Number":"4350","RawContent":null,"Title":"Add try catch block to skip bad(failing to read) images","State":"open","Body":"Fixes #4348\r\nWhile computing the bottleneck values, if an image errors out and throws TensorflowException, this change skips the particular image and continues training.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4350","RelatedDescription":"Open PR \"Add try catch block to skip bad(failing to read) images\" (#4350)"},{"Id":"508685625","IsPullRequest":true,"CreatedAt":"2019-10-18T19:31:37","Actor":"CESARDELATORRE","Number":"4345","RawContent":null,"Title":"Minor updates of the GPU installation guide so it is clearer for users","State":"closed","Body":"Minor updates of the GPU installation so it is clearer\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4345","RelatedDescription":"Closed or merged PR \"Minor updates of the GPU installation guide so it is clearer for users\" (#4345)"},{"Id":"509248221","IsPullRequest":true,"CreatedAt":"2019-10-18T18:37:29","Actor":"bpstark","Number":"4349","RawContent":null,"Title":"Added support for resnet50 architecture for image classification","State":"open","Body":"Created a sample to show usage of resnet50 V2.\r\nTested against Tensorflow we can see there is a definitive discrepancy\r\nin accuracy.\r\n\r\nTraining for ~136 epochs (TF uses steps rather than epochs) we are able\r\nto achieve an accuracy of 78.7% in Tensorflow, compared to our accuracy\r\nwhich was 54.6%. This discrepancy can be accounted for due to the way in\r\nwhich TF adjusts the learning rate over time. We have already begun to\r\nmake those changes to our code, and will be added in a separate change.","Url":"https://github.com/dotnet/machinelearning/pull/4349","RelatedDescription":"Open PR \"Added support for resnet50 architecture for image classification\" (#4349)"},{"Id":"509242925","IsPullRequest":false,"CreatedAt":"2019-10-18T18:25:31","Actor":"ashbhandare","Number":"4348","RawContent":null,"Title":"[Image Classification API] Error when running ResnetV2101 transfer learning sample with Cats Vs Dogs dataset.","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nRan the ResnetV2101TransferLearningTrainTestSplit sample with the Cats Vs Dogs dataset at https://www.microsoft.com/en-us/download/details.aspx?id=54765.\r\n\r\n- **What happened?**\r\nWhen computing bottleneck values, run aborted with the error message:\r\n2 root error(s) found.\r\n  (0) Invalid argument: Expected image (JPEG, PNG, or GIF), got unknown format starting with 'BM^\\357\\n\\000\\000\\000\\000\\0006\\000\\000\\000(\\000'\r\n         [[{{node DecodeJpeg}}]]\r\n         [[DecodeJpeg/_1]]\r\n  (1) Invalid argument: Expected image (JPEG, PNG, or GIF), got unknown format starting with 'BM^\\357\\n\\000\\000\\000\\000\\0006\\000\\000\\000(\\000'\r\n         [[{{node DecodeJpeg}}]]\r\n0 successful operations.\r\n0 derived errors ignored.\r\nTensorflow.TensorflowException: 2 root error(s) found.\r\n  (0) Invalid argument: Expected image (JPEG, PNG, or GIF), got unknown format starting with 'BM^\\357\\n\\000\\000\\000\\000\\0006\\000\\000\\000(\\000'\r\n         [[{{node DecodeJpeg}}]]\r\n         [[DecodeJpeg/_1]]\r\n  (1) Invalid argument: Expected image (JPEG, PNG, or GIF), got unknown format starting with 'BM^\\357\\n\\000\\000\\000\\000\\0006\\000\\000\\000(\\000'\r\n         [[{{node DecodeJpeg}}]]\r\n0 successful operations.\r\n0 derived errors ignored.\r\n   at Tensorflow.Status.Check(Boolean throwException)\r\n   at Microsoft.ML.Transforms.Dnn.DnnUtils.Runner.Run() in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Dnn\\DnnUtils.cs:line 453\r\n   at Microsoft.ML.Transforms.ImageClassificationTransformer.ImageProcessor.ProcessImage(VBuffer`1& imageBuffer) in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Dnn\\ImageClassificationTransform.cs:line 244\r\n   at Microsoft.ML.Transforms.ImageClassificationTransformer.CacheFeaturizedImagesToDisk(IDataView input, String labelColumnName, String imageColumnName, ImageProcessor imageProcessor, String inputTensorName, String outputTensorName, String cacheFilePath, Dataset dataset, ImageClassificationMetricsCallback metricsCallback) in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Dnn\\ImageClassificationTransform.cs:line 284\r\n   at Microsoft.ML.Transforms.ImageClassificationTransformer..ctor(IHostEnvironment env, Options options, DnnModel tensorFlowModel, IDataView input) in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Dnn\\ImageClassificationTransform.cs:line 169\r\n   at Microsoft.ML.Transforms.ImageClassificationEstimator.Fit(IDataView input) in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Dnn\\ImageClassificationTransform.cs:line 1517\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input) in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\EstimatorChain.cs:line 67\r\n   at Samples.Dynamic.ResnetV2101TransferLearningTrainTestSplit.Example() in C:\\Users\\aibhanda\\source\\repos\\ashbhandare-machinelearning\\docs\\samples\\Microsoft.ML.Samples\\Dynamic\\ImageClassification\\ResnetV2101TransferLearningTrainTestSplit.cs:line 87\r\n\r\n- **What did you expect?**\r\nThere should be a way to either identify the bad images so that they can be removed, or the run should continue by skipping these images or both.\r\n\r\n### Source code / logs\r\n[ResnetV2101_CatsVDogs.txt.txt](https://github.com/dotnet/machinelearning/files/3745204/ResnetV2101_CatsVDogs.txt.txt)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4348","RelatedDescription":"Open issue \"[Image Classification API] Error when running ResnetV2101 transfer learning sample with Cats Vs Dogs dataset.\" (#4348)"},{"Id":"506334961","IsPullRequest":false,"CreatedAt":"2019-10-18T15:34:31","Actor":"PaulDMendoza","Number":"4328","RawContent":null,"Title":"How do I convert topics to words?","State":"closed","Body":"The example is missing the step where the topics identified are converted to a high level word that describes the topics for each document. Can you add that bit to the example?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 87b08415-641d-4246-280f-b19e3baa8857\n* Version Independent ID: 30d278f5-27f7-eee4-141f-d05dc1d34bfa\n* Content: [TextCatalog.LatentDirichletAllocation(TransformsCatalog+TextTransforms, String, String, Int32, Single, Single, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Boolean) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.latentdirichletallocation?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4328","RelatedDescription":"Closed issue \"How do I convert topics to words?\" (#4328)"},{"Id":"508752289","IsPullRequest":true,"CreatedAt":"2019-10-17T22:27:22","Actor":"harishsk","Number":"4347","RawContent":null,"Title":"Devproperties","State":"open","Body":"@eerhardt I am creating this draft pull request to initiate a discussion about this. \r\n\r\nMichael and I are running into similar issues where we would like to do our daily development against unstable and unreleased nugets from other sources and then merge our daily working branches into master when our dependent nugets are stable. \r\n\r\nThe current approach is to modify Directory.Build.Props and Dependencies.props appropriately and keep those files checked out. \r\n\r\nWhat do you think of optionally importing DevProperties.props from Directory.Build.props which would override those variables? (The DevProperties.props file would never be checked in and would be added to the .gitignore file if you are okay with this approach).\r\n\r\n@michaelgsharp I have verified that this approach works. Let me know if this works for you as well.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4347","RelatedDescription":"Open PR \"Devproperties\" (#4347)"},{"Id":"508707259","IsPullRequest":true,"CreatedAt":"2019-10-17T20:35:48","Actor":"frank-dong-ms","Number":"4346","RawContent":null,"Title":"Extract TestFrameworkCommon Project, remove dependency of TestFramework from FT","State":"open","Body":"1. Extract TestFrameworkCommon from TestFramework\r\n   a. Extract CommonUtilities method, move some utilities from BaseTestClass to CommonUtilities\r\n   b. Move some test attributes from TestFramework to TestFrameworkCommon\r\n   c. Move TestDataset from TestFramework to TestFrameworkCommon and fix corresponding \r\nreference\r\n   d. Move some schema compare method from TestDataPipeBase to CommonUtilities\r\n   e. TestFrameworkCommon only have public dependency, no internal class dependency\r\n2. Remove dependency of TestFramework from FT\r\n   a. Remove dependency of TestFramework from FT, now FT dependent on TestFrameworkCommon\r\n   b. Remove unnecessary dependency of Maml from FT\r\n3. Remove duplicate CompareVec method, also fix bug in CompareVec method\r\n   a. Remove duplicate CompareVec method from CoreBaseTestClass, TestDataPipeBase and \r\nCopyColumnEstimatorTests, move CompareVec method to CommonUtilities and fix reference\r\n   b. Fix bug in CompareVec method from CoreBaseTestClass class, original line 125 seems problematic. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4346","RelatedDescription":"Open PR \"Extract TestFrameworkCommon Project, remove dependency of TestFramework from FT\" (#4346)"},{"Id":"508585522","IsPullRequest":true,"CreatedAt":"2019-10-17T18:57:48","Actor":"eerhardt","Number":"4344","RawContent":null,"Title":"Update .NET Core SDK to 3.0 GA","State":"closed","Body":"Updating the SDK to the officially released version.\r\n\r\nI also took this opportunity to update the building docs to be up-to-date.","Url":"https://github.com/dotnet/machinelearning/pull/4344","RelatedDescription":"Closed or merged PR \"Update .NET Core SDK to 3.0 GA\" (#4344)"},{"Id":"506060969","IsPullRequest":false,"CreatedAt":"2019-10-17T18:29:50","Actor":"CESARDELATORRE","Number":"4325","RawContent":null,"Title":"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2","State":"closed","Body":"The NuGet package 'Microsoft.ML.Dnn 0.16.0-preview2' is including a dependency on the CPU-based `SciSharp.TensorFlow.Redist` package: \r\n\r\n![image](https://user-images.githubusercontent.com/1712635/66684962-1a93f400-ec30-11e9-96a2-fdb675fa9e20.png)\r\n\r\nTherefore the user cannot reference and use the `SciSharp.TensorFlow.Redist-Windows-GPU` package because the CPU version has preference, afaik.  \r\n\r\nThe NuGet package `Microsoft.ML.Dnn 0.16.0-preview2` must not reference any of those, so depending on what SciSharp TensorFlow redist (CPU vs. GPU) the user is referencing from his code, it'll use CPU or GPU.\r\n\r\nI know this is being fixed in the ML.NET source code repo with this PR after my heads-up:\r\nhttps://github.com/dotnet/machinelearning/pull/4324\r\n\r\n**But users mostly use the NuGet packages so we probably need to publish a new fix-patch-release for that package like the following?**:\r\n\r\n`Microsoft.ML.Dnn 0.16.1-preview2` ?\r\n\r\nAny other solution so users can try Image Classification with GPU when using the NuGet packages?","Url":"https://github.com/dotnet/machinelearning/issues/4325","RelatedDescription":"Closed issue \"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2\" (#4325)"},{"Id":"507278615","IsPullRequest":true,"CreatedAt":"2019-10-17T18:08:59","Actor":"eerhardt","Number":"4337","RawContent":null,"Title":"Update OnnxRuntime to latest version.","State":"closed","Body":"OnnxRuntime supports win-x86, so start running tests on the win-x86 leg.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4337","RelatedDescription":"Closed or merged PR \"Update OnnxRuntime to latest version.\" (#4337)"},{"Id":"507501005","IsPullRequest":true,"CreatedAt":"2019-10-17T00:29:27","Actor":"eerhardt","Number":"4338","RawContent":null,"Title":"Remove TensorFlow.Redist since we no longer use it.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4338","RelatedDescription":"Closed or merged PR \"Remove TensorFlow.Redist since we no longer use it.\" (#4338)"},{"Id":"508150229","IsPullRequest":false,"CreatedAt":"2019-10-16T23:25:06","Actor":"CESARDELATORRE","Number":"4343","RawContent":null,"Title":"[Planning] Explore GAN (Generative Adversarial Networks) implementation in ML.NET + TensorFlow","State":"open","Body":"For future features planning it'd be worth to explore possibilities in ML.NET enabling GAN (Generative Adversarial Networks) implementation in ML.NET + TensorFlow.\r\n\r\nMost popular use cases are related to images generation, such as this cool prototype app:\r\n\r\nhttps://github.com/microsoft/GenStudio \r\nhttps://gen.studio/\r\n\r\nHowever, GAN can also be applied to data and very interesting cases are related to **synthetic data generation** from a generative adversarial network (GAN) designed to approximate any original training data distribution. For instance, you have a Time Series dataset of just a couple of years and want to generate a larger synthetic dataset, or any other synthetic data generation.\r\n\r\nMany more use cases:\r\nhttps://github.com/nashory/gans-awesome-applications \r\n \r\nQuestion for anyone in the community reading this issue, can you answer this issue with your thoughts about GAN (Generative Adversarial Networks), your own business scenarios and possibilities you might see in ML.NET?","Url":"https://github.com/dotnet/machinelearning/issues/4343","RelatedDescription":"Open issue \"[Planning] Explore GAN (Generative Adversarial Networks) implementation in ML.NET + TensorFlow\" (#4343)"},{"Id":"508001220","IsPullRequest":true,"CreatedAt":"2019-10-16T22:28:23","Actor":"tannergooding","Number":"4342","RawContent":null,"Title":"Moving the DatabaseLoader support into Microsoft.ML.Data","State":"closed","Body":"This resolves https://github.com/dotnet/machinelearning/issues/4323","Url":"https://github.com/dotnet/machinelearning/pull/4342","RelatedDescription":"Closed or merged PR \"Moving the DatabaseLoader support into Microsoft.ML.Data\" (#4342)"},{"Id":"505538543","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:23","Actor":"eerhardt","Number":"4323","RawContent":null,"Title":"Move DatabaseLoader from the Experimental package","State":"closed","Body":"We want to mark the DatabaseLoader as a \"stable API\" when we ship 1.4. However, it is currently in the Experimental package, which will never be marked as stable.\r\n\r\nWe should move the DatabaseLoader to a stable package.\r\n\r\nIf I get a vote, my vote would be to add it to the core `Microsoft.ML` package, next to TextLoader. DatabaseLoader adds no extra dependencies, so I think it is completely fine to add it to the `Microsoft.ML` package.","Url":"https://github.com/dotnet/machinelearning/issues/4323","RelatedDescription":"Closed issue \"Move DatabaseLoader from the Experimental package\" (#4323)"},{"Id":"507743109","IsPullRequest":true,"CreatedAt":"2019-10-16T14:54:01","Actor":"aniketmahure","Number":"4341","RawContent":null,"Title":"Update run.cmd","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4341","RelatedDescription":"Closed or merged PR \"Update run.cmd\" (#4341)"},{"Id":"507703086","IsPullRequest":true,"CreatedAt":"2019-10-16T08:41:36","Actor":"harshithapv","Number":"4340","RawContent":null,"Title":"Added LearningRateScheduler interface and GradientDescentOptimizerTensor class","State":"open","Body":"1. Added LearningRateScheduler interface which will be implemented for various learning rate scheduling algorithms. \r\n2.  GradientDescentOptimizerTensor Class that allows learning rate as Tensor for gradient descent optimization. A temporary fix until TF .Net makes that necessary fixes to allow a learning rate tensor input.\r\n3. Made all the necessary changes to allow ImageClassificationTransformer to use LearningRateScheduler. ","Url":"https://github.com/dotnet/machinelearning/pull/4340","RelatedDescription":"Open PR \"Added LearningRateScheduler interface and GradientDescentOptimizerTensor class\" (#4340)"},{"Id":"506936790","IsPullRequest":true,"CreatedAt":"2019-10-16T05:19:03","Actor":"harshithapv","Number":"4336","RawContent":null,"Title":"Added learning rate scheduling for cifar and options for using resnet_v2_50 model","State":"closed","Body":"The following has been added:\r\n1. Added learning rate scheduling for CIFAR-10.\r\n2. Added a custom class called GradientDescentOptimizerTensor that takes learning rate as a tensor. A temporary fix until TF .Net updates their function to take learning rate as tensor.\r\n3. Modied code to take resnet_v2_50 model.\r\n4. Addressed most of Yael's comments from PR #4242.","Url":"https://github.com/dotnet/machinelearning/pull/4336","RelatedDescription":"Closed or merged PR \"Added learning rate scheduling for cifar and options for using resnet_v2_50 model\" (#4336)"},{"Id":"506853848","IsPullRequest":false,"CreatedAt":"2019-10-14T21:58:41","Actor":"NeoXtreem","Number":"4333","RawContent":null,"Title":"Appending to an empty estimator results in ArgumentOutOfRangeException during Evaluate","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362\r\n- **.NET Version (eg., dotnet --info)**: 3.0.100\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n```\r\nvar mlContext = new MLContext(0);\r\nvar trainTestData = mlContext.Data.TrainTestSplit(mlContext.Data.LoadFromEnumerable(data));\r\nvar pipeline = new EstimatorChain<TransformerChain<RegressionPredictionTransformer<FastTreeRegressionModelParameters>>>();\r\n\r\npipeline.Append(mlContext.Transforms.CopyColumns(\"Label\", \"Foo\")\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"Bar\", \"Baz\"))\r\n    .Append(mlContext.Regression.Trainers.FastTree()));\r\n\r\nvar model = pipeline.Fit(trainTestData.TrainSet);\r\nmlContext.Regression.Evaluate(model.Transform(trainTestData.TestSet));\r\n```\r\n\r\n- **What happened?**\r\n`Evaluate` throws `ArgumentOutOfRangeException`:\r\n> Label column 'Label' not found (Parameter 'schema')\r\n\r\n- **What did you expect?**\r\nTo behave the same as this code:\r\n```\r\nvar mlContext = new MLContext(0);\r\nvar trainTestData = mlContext.Data.TrainTestSplit(mlContext.Data.LoadFromEnumerable(data));\r\n\r\nvar pipeline = mlContext.Transforms.CopyColumns(\"Label\", \"Foo\")\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"Bar\", \"Baz\"))\r\n    .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\nvar model = pipeline.Fit(trainTestData.TrainSet);\r\nmlContext.Regression.Evaluate(model.Transform(trainTestData.TestSet));\r\n```\r\n...which indeed of course doesn't throw an exception.  Instantiating a new `EstimatorChain` object should create an empty estimator chain as indicated by the summary for the default constructor.  I would then expect to just be able to append estimators to it as if I had started with creating one from a concrete estimator that I then appended further estimators to.","Url":"https://github.com/dotnet/machinelearning/issues/4333","RelatedDescription":"Closed issue \"Appending to an empty estimator results in ArgumentOutOfRangeException during Evaluate\" (#4333)"},{"Id":"506894336","IsPullRequest":false,"CreatedAt":"2019-10-14T21:56:58","Actor":"Dmitry-A","Number":"4335","RawContent":null,"Title":"API for loading ONNX model lacks access to input schema and is not consistent with regular model loading API","State":"open","Body":"Current API for loading models is as follows:\r\n            ITransformer mlModel = mlContext.Model.Load(path, out DataViewSchema inputSchema);\r\n\r\nNote you have a transformer back and the input schema, plus transformer gives access to output schema as well.\r\nFor ONNX the same functionality will look something like this:\r\n            var estimator = mlContext.Transforms.ApplyOnnxModel(path);\r\n            var dataView = mlContext.Data.LoadFromEnumerable<ModelInput>(new ModelInput[] { });\r\n            // Fit() will check the input schema of the model against the input dataview you're passing in\r\n            var transformer = estimator.Fit(dataView);\r\n\r\nNote there's no way to get the input schema, you have to know it before you can do anything with the model.  Also Fit() call is confusing and inconsistent with the much cleaner API above, it doesn't actually do anything other than verify the [unavailable from public interface] input schema against the schema that got loaded with the model.\r\n\r\nThe fix is to bring ONNX model loading API in line with what we have for regular ML.NET models.","Url":"https://github.com/dotnet/machinelearning/issues/4335","RelatedDescription":"Open issue \"API for loading ONNX model lacks access to input schema and is not consistent with regular model loading API\" (#4335)"},{"Id":"506877053","IsPullRequest":true,"CreatedAt":"2019-10-14T21:13:00","Actor":"NeoXtreem","Number":"4334","RawContent":null,"Title":"Add non-generic IEstimator interface to be more SOLID","State":"open","Body":"This is a fairly trivial change, but makes the `IEstimator` interface comply with SOLID more, particularly interface segregation.  It is useful in that code need only declare a variable of `IEstimator` type (instead of `IEstimator<ITransformer>`) if they wish only to access `GetOutputSchema` which does not require the generic type parameter `TTransformer`.  Or where they only need to cast to an `IEstimator` where the generic is unimportant such as the usage of the null-coalescing operator in the following example: \r\n```\r\nIEstimator<ITransformer> pipeline = null;\r\n\r\nforeach (var label in new[] {\"Foo1\", \"Foo2\"})\r\n{\r\n    var estimator = mlContext.Transforms.CopyColumns(\"Label\", label)\r\n        .Append(mlContext.Transforms.Concatenate(\"Features\", \"Baz\", \"Bar\"))\r\n        .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n    pipeline = pipeline?.Append(estimator) ?? (IEstimator)estimator;\r\n}\r\n```\r\n\r\nAlso fixed a couple of typos in `EstimatorChain` that I noticed.","Url":"https://github.com/dotnet/machinelearning/pull/4334","RelatedDescription":"Open PR \"Add non-generic IEstimator interface to be more SOLID\" (#4334)"},{"Id":"506717531","IsPullRequest":false,"CreatedAt":"2019-10-14T16:57:17","Actor":"gagoole","Number":"4332","RawContent":null,"Title":"How to update model in ml .net every day?","State":"closed","Body":"Hi every body.\r\nHow to update model in ml .net every day to increase accuracy?","Url":"https://github.com/dotnet/machinelearning/issues/4332","RelatedDescription":"Closed issue \"How to update model in ml .net every day?\" (#4332)"},{"Id":"506652457","IsPullRequest":false,"CreatedAt":"2019-10-14T13:25:57","Actor":"PeterPann23","Number":"4331","RawContent":null,"Title":"Not sample how to call this, also fit normaly takes only 1 argument...","State":"open","Body":"The following code does not allow to call fit using the pipeline\n            var dataProcessPipeline = GeneratePipelin(data, out var trainingDataView, out var testDataView );\n\n            var options = new LightGbmBinaryTrainer.Options\n            {\n                NumberOfIterations=100\n                , LearningRate=0.2281511\n                , NumberOfLeaves=46\n                , MinimumExampleCountPerLeaf=10\n                , UseCategoricalSplit=false\n                , HandleMissingValue=true\n                , MinimumExampleCountPerGroup=200\n                , MaximumCategoricalSplitPointCount=8\n                , CategoricalSmoothing=10\n                , L2CategoricalRegularization=0.5                \n                , EvaluationMetric = LightGbmBinaryTrainer.Options.EvaluateMetricType.Error\n                , LabelColumnName=nameof(BinaryModelInput.Trend)\n            };\n\n            var trainer = mlContext.BinaryClassification.Trainers.LightGbm(options);\n            //.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\n\n            var trainingPipeline =dataProcessPipeline.Append(trainer);\n            var model = trainingPipeline.Fit(trainingDataView,testDataView);\nthe training pipeline is of type \n EstimatorChain&lt;BinaryPredictionTransformer&lt;Microsoft.ML.Calibrators.CalibratedModelParametersBase&lt;LightGbmBinaryModelParameters, Microsoft.ML.Calibrators.PlattCalibrator&gt;&gt;&gt;\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: fb3687e4-d6ed-52df-b362-de76c9c302c5\n* Version Independent ID: cba9caf7-2b90-28c3-5cfe-ad1b34c3c5eb\n* Content: [LightGbmBinaryTrainer.Fit(IDataView, IDataView) Method (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmbinarytrainer.fit?view=ml-dotnet#Microsoft_ML_Trainers_LightGbm_LightGbmBinaryTrainer_Fit_Microsoft_ML_IDataView_Microsoft_ML_IDataView_)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4331","RelatedDescription":"Open issue \"Not sample how to call this, also fit normaly takes only 1 argument...\" (#4331)"},{"Id":"506484258","IsPullRequest":false,"CreatedAt":"2019-10-14T07:16:22","Actor":"PeterPann23","Number":"4330","RawContent":null,"Title":"Would be nice to know the defaults","State":"open","Body":"When tuning it's important to know something about the defaults as the number of possible combinations is rather large and not knowing where one starts is rather a poor first step trying to optimize a model\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: c16a2948-f15c-1e3a-d6c0-1cfaae544d57\n* Version Independent ID: 0447cd1a-a1a3-76da-2ea3-c9f9efc051c1\n* Content: [LightGbmMulticlassTrainer.Options Class (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmmulticlasstrainer.options?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4330","RelatedDescription":"Open issue \"Would be nice to know the defaults\" (#4330)"},{"Id":"506463281","IsPullRequest":false,"CreatedAt":"2019-10-14T06:05:53","Actor":"PeterPann23","Number":"4329","RawContent":null,"Title":"If normalisation is required why does the sample not do this","State":"open","Body":"The trainer is stated to be needing normalisation, the sample does not show this in the pipeline, how is normalisation done?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 98e5fc20-effa-58e7-0271-2380fdb73bd9\n* Version Independent ID: 71cdb61f-ae25-9a4d-3c19-16d17ab81694\n* Content: [StandardTrainersCatalog.LinearSvm Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.standardtrainerscatalog.linearsvm?view=ml-dotnet#Microsoft_ML_StandardTrainersCatalog_LinearSvm_Microsoft_ML_BinaryClassificationCatalog_BinaryClassificationTrainers_Microsoft_ML_Trainers_LinearSvmTrainer_Options_)\n* Content Source: [dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4329","RelatedDescription":"Open issue \"If normalisation is required why does the sample not do this\" (#4329)"},{"Id":"505984007","IsPullRequest":true,"CreatedAt":"2019-10-13T23:39:16","Actor":"bpstark","Number":"4324","RawContent":null,"Title":"Fix nuget dependency for Dnn","State":"closed","Body":"With change to allow users to support GPU, need to remove the dependency\r\non TF redist from nuget. It will now be up to the user to add a\r\ndependency on the correct nuget, such that they can choose to use either\r\nthe GPU or the CPU.\r\n\r\nfixes #4325","Url":"https://github.com/dotnet/machinelearning/pull/4324","RelatedDescription":"Closed or merged PR \"Fix nuget dependency for Dnn\" (#4324)"},{"Id":"506265611","IsPullRequest":false,"CreatedAt":"2019-10-13T02:55:23","Actor":"CBrauer","Number":"4327","RawContent":null,"Title":" ML.NET aborted with \"Training cancelled\"","State":"open","Body":"I tried to do a regression model using the latest ML.NET and Visual Studio 2019.\r\nHere is a screen shot:\r\n\r\n### Issue\r\n![image](https://user-images.githubusercontent.com/1317234/66710251-75f5dd00-ed29-11e9-8716-e715a96650bd.png)\r\n\r\nMy dataset is located at:\r\nhttps://github.com/CBrauer/CypressPoint.github.io/blob/master/rocket-train-regress.zip.\r\n\r\nI don't know where the log file is.  It's not my my Project directory.  Why not?\r\n\r\nCharles\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4327","RelatedDescription":"Open issue \" ML.NET aborted with \"Training cancelled\"\" (#4327)"},{"Id":"506062597","IsPullRequest":false,"CreatedAt":"2019-10-11T21:23:51","Actor":"CESARDELATORRE","Number":"4326","RawContent":null,"Title":"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA","State":"closed","Body":"We want to mark the ImageClassification DNN based as a \"stable API\" when we ship 1.4 GA.\r\n\r\nHowever, it is currently in the Experimental package `Microsoft.ML.Dnn 0.16.0-preview2`, (**0.16**).\r\n\r\nWe should move the ImageClassification DNN to a stable package.\r\n\r\nOr we could also maintain the `Microsoft.ML.Dnn` package and simply change the version to 1.4. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4326","RelatedDescription":"Closed issue \"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA\" (#4326)"},{"Id":"507537183","IsPullRequest":false,"CreatedAt":"2019-10-09T21:54:38","Actor":"briacht","Number":"4339","RawContent":null,"Title":"Can't find label when file header start with #","State":"open","Body":"Using VS 2019 (16.2.5).\r\n\r\nI selected the multi-class classification scenario and used the [iris-train.txt dataset](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/MulticlassClassification_Iris/IrisClassification/Data/iris-train.txt). I had to change \"#Label\" column header to \"Label\" for it to Train properly.\r\n\r\n![image](https://user-images.githubusercontent.com/10437687/66523316-82b5cf00-eaa4-11e9-8ccd-654341964ed9.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4339","RelatedDescription":"Open issue \"Can't find label when file header start with #\" (#4339)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-19T05:30:40.9726146Z","RunDurationInMilliseconds":708}