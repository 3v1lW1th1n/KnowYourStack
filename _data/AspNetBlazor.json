{"Data":{"GitHubIssues":{"Issues":[{"Id":"343258359","IsPullRequest":true,"CreatedAt":"2018-07-20T23:51:59","Actor":"eskaufel","Number":"1162","RawContent":null,"Title":"Update CONTRIBUTING.md","State":"closed","Body":"Changed CODE_OF_CONDUCT link to relative (absolute link was dead) and changed target branch for aspnet in \"Contributing code and content\" section to master since the dev branch no longer exist.","Url":"https://github.com/aspnet/Blazor/pull/1162","RelatedDescription":"Closed or merged PR \"Update CONTRIBUTING.md\" (#1162)"},{"Id":"343256804","IsPullRequest":false,"CreatedAt":"2018-07-20T21:46:36","Actor":"mrpmorris","Number":"1161","RawContent":null,"Title":"NullReferenceException when calling StateHasChanged from Javascript","State":"open","Body":"https://github.com/mrpmorris/blazor-fluxor/tree/feature/flight-finder-demo\r\n\r\n1. Install Redux Tools extension for Chrome \r\n2. Run the FlightFinder sample\r\n3. Open Dev Tools\r\n4. Click Search\r\n5: Add a flight to the short list\r\n6: Flick through the time line in the Dev Tools\r\n\r\nThis will trigger a callback that will invoke StateHasChanged. At this point a NullReferenceException is encountered...\r\n\r\n```\r\nMonoPlatform.ts:70 Uncaught Error: System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at FlightFinder.Client.Components.Shortlist.BuildRenderTree (:59912/Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1e07e88 + 0x00058> in <5589bddb96e64f64bb0e27875fbeec39>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b91b70 + 0x0006c> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b91718 + 0x00040> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b90e20 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (:59912/System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8dcf8 + 0x00068> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (:59912/Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8d9e0 + 0x00036> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b8d8e8 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Blazor.Fluxor.Feature`1+<>c[TState].<TriggerStateChangedCallbacks>b__15_0 (:59912/System.Action callback) <0x1fe7048 + 0x00010> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at System.Collections.Generic.List`1[T].ForEach (:59912/System.Action`1[T] action) <0x1b49f90 + 0x00054> in <a02c7d9644e84620838bef876532992f>:0 \r\n  at :59912/Blazor.Fluxor.Feature`1[TState].TriggerStateChangedCallbacks () <0x1b46970 + 0x0011c> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].set_State (:59912/TState value) <0x1b1c510 + 0x00056> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].RestoreState (:59912/System.Object value) <0x20f5420 + 0x00018> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsMiddleware.OnJumpToState (:59912/System.Object sender, Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback e) <0x2051f28 + 0x00156> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.OnJumpToState (:59912/Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback jumpToStateCallback) <0x2051868 + 0x00020> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.DevToolsCallback (:59912/System.String messageAsJson) <0x1e09ca8 + 0x000b6> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at FlightFinder.Client.Components.Shortlist.BuildRenderTree (:59912/Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder) <0x1e07e88 + 0x00058> in <5589bddb96e64f64bb0e27875fbeec39>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b91b70 + 0x0006c> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (:59912/Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1b91718 + 0x00040> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1b90e20 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (:59912/System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8dcf8 + 0x00068> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (:59912/Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1b8d9e0 + 0x00036> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at :59912/Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1b8d8e8 + 0x00048> in <72270648a3b54698885c6ba1c18107cc>:0 \r\n  at Blazor.Fluxor.Feature`1+<>c[TState].<TriggerStateChangedCallbacks>b__15_0 (:59912/System.Action callback) <0x1fe7048 + 0x00010> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at System.Collections.Generic.List`1[T].ForEach (:59912/System.Action`1[T] action) <0x1b49f90 + 0x00054> in <a02c7d9644e84620838bef876532992f>:0 \r\n  at :59912/Blazor.Fluxor.Feature`1[TState].TriggerStateChangedCallbacks () <0x1b46970 + 0x0011c> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].set_State (:59912/TState value) <0x1b1c510 + 0x00056> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.Feature`1[TState].RestoreState (:59912/System.Object value) <0x20f5420 + 0x00018> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsMiddleware.OnJumpToState (:59912/System.Object sender, Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback e) <0x2051f28 + 0x00156> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.OnJumpToState (:59912/Blazor.Fluxor.ReduxDevTools.CallbackObjects.JumpToStateCallback jumpToStateCallback) <0x2051868 + 0x00020> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n  at Blazor.Fluxor.ReduxDevTools.ReduxDevToolsInterop.DevToolsCallback (:59912/System.String messageAsJson) <0x1e09ca8 + 0x000b6> in <23c61ea74e5f4ee4afc2e800c444bbfe>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at fluxorDevTools.subscribe (<anonymous>:18:21)\r\n    at <anonymous>:1:74328\r\n    at <anonymous>:1:70919\r\n    at Array.forEach (<anonymous>)\r\n    at <anonymous>:1:70899\r\n    at Array.forEach (<anonymous>)\r\n    at handleMessages (<anonymous>:1:70825)\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1161","RelatedDescription":"Open issue \"NullReferenceException when calling StateHasChanged from Javascript\" (#1161)"},{"Id":"343192647","IsPullRequest":false,"CreatedAt":"2018-07-20T17:45:13","Actor":"NTaylorMullen","Number":"1160","RawContent":null,"Title":"Blazor tooling crashes VS after pasting code with doc type","State":"open","Body":"Original issue: https://developercommunity.visualstudio.com/content/problem/294284/visual-studio-crashes-after-pasting-cshtml-content.html?childToView=297537\r\n\r\n### Repro\r\n1. Clone https://github.com/dcb99/WebApplication5.git\r\n2. Open solution and past the following into `_Layout.cshtml` (to override the current contents): `<!DOCTYPE html>`\r\n3. VS crashes with the following exception:\r\n![image](https://user-images.githubusercontent.com/2008729/43017143-f26a94a2-8c09-11e8-8c17-eb3169a4eef4.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1160","RelatedDescription":"Open issue \"Blazor tooling crashes VS after pasting code with doc type\" (#1160)"},{"Id":"342893398","IsPullRequest":false,"CreatedAt":"2018-07-20T02:08:25","Actor":"Lupusa87","Number":"1158","RawContent":null,"Title":"SVG can't load image","State":"closed","Body":"I am trying to load image inside svg. \r\nI want my canvas based [clock component](https://lupusablazordemos.azurewebsites.net/) to rewrite on svg and compare results.\r\n\r\nI was generating svg tags inside blazor component, for now all tested svg elements are working properly, only image has problem.\r\n\r\nBlazor not displays expected image, in index.html it is loading normally, in index.cshtml not.\r\n\r\nFor test I tried this [example](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image#Example) from mozilla:\r\n```\r\n<svg width=200 height=200 \r\n     xmlns=\"http://www.w3.org/2000/svg\" \r\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">       \r\n  <image xlink:href=\"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png\" height=\"200\" width=\"200\"/>    \r\n</svg>\r\n```\r\n\r\n### **On image we can see that the same code snippet is working outside blazor and doesn't work inside.**\r\nThe same in all my browsers (firefox, chome, edge).\r\n\r\n\r\n![untitled1](https://user-images.githubusercontent.com/40779557/42970069-47806302-8b76-11e8-87c2-431c65aea32d.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1158","RelatedDescription":"Closed issue \"SVG can't load image\" (#1158)"},{"Id":"342903406","IsPullRequest":false,"CreatedAt":"2018-07-19T21:56:38","Actor":"carlsteen","Number":"1159","RawContent":null,"Title":"Component constructor injection","State":"open","Body":"I would love it if Blazor would allow constructor injection when composing components with base classes that requires injection of services (to make the DI system more consistent with how it works when composing services).\r\n\r\nIf this is a feature you would consider I would not mind creating a PR with the functionality to help out\r\n","Url":"https://github.com/aspnet/Blazor/issues/1159","RelatedDescription":"Open issue \"Component constructor injection\" (#1159)"},{"Id":"342883905","IsPullRequest":true,"CreatedAt":"2018-07-19T20:48:41","Actor":"thild","Number":"1157","RawContent":null,"Title":"Fixed exporting platform to window object","State":"open","Body":"Recently versions are not exporting platform to window object correctly.\r\nWhen GlobalExports.ts gets called, platform from Enviroment.ts is undefined and gets set only when Environment.setPlatform(monoPlatform) is called on boot.","Url":"https://github.com/aspnet/Blazor/pull/1157","RelatedDescription":"Open PR \"Fixed exporting platform to window object\" (#1157)"},{"Id":"342863104","IsPullRequest":false,"CreatedAt":"2018-07-19T19:40:52","Actor":"thild","Number":"1156","RawContent":null,"Title":"Publish failing","State":"open","Body":"Hi, I'm trying to publish a blazolib and I'm getting this error.\r\n```\r\n error : The assembly at obj/Debug/netstandard2.0/BlazorFileReader.dll has no specified entry point.\r\n```\r\nAs project OutputType is Library, the assembly is not suppose to have an entry point.\r\n\r\nSteps:\r\n```\r\n$ dotnet new blazorlib -o mylib\r\n// Replace RegisteredFunction.Invoke to JSRuntime.Current.InvokeAsync\r\n//Update packages to 0.5.0-preview1-10349\r\n$ dotnet publish -c Debug\r\n\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 30.69 ms for /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj.\r\n  Restore completed in 62.85 ms for /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj.\r\n  BlazorFileReader -> /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/bin/Debug/netstandard2.0/BlazorFileReader.dll\r\n  Blazor Build result -> 0 files in /mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/bin/Debug/netstandard2.0/dist\r\nEXEC : error : The assembly at obj/Debug/netstandard2.0/BlazorFileReader.dll has no specified entry point. [/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj]\r\n     at Microsoft.AspNetCore.Blazor.Build.BootJsonWriter.GetAssemblyEntryPoint(String assemblyPath) in /_/src/Microsoft.AspNetCore.Blazor.Build/Core/BootJsonWriter.cs:line 56\r\n     at Microsoft.AspNetCore.Blazor.Build.BootJsonWriter.WriteFile(String assemblyPath, String[] assemblyReferences, String[] embeddedResourcesSources, Boolean linkerEnabled, String outputPath) in /_/src/Microsoft.AspNetCore.Blazor.Build/Core/BootJsonWriter.cs:line 24\r\n     at Microsoft.AspNetCore.Blazor.Build.Cli.Commands.WriteBootJsonCommand.<>c__DisplayClass0_0.<Command>b__0() in /_/src/Microsoft.AspNetCore.Blazor.Build/Cli/Commands/WriteBootJsonCommand.cs:line 57\r\n/home/tony/.nuget/packages/microsoft.aspnetcore.blazor.build/0.5.0-preview1-10349/targets/Blazor.MonoRuntime.targets(635,5): error MSB3073: The command \"dotnet \"/home/tony/.nuget/packages/microsoft.aspnetcore.blazor.build/0.5.0-preview1-10349/targets/../tools/Microsoft.AspNetCore.Blazor.Build.dll\" write-boot-json obj/Debug/netstandard2.0/BlazorFileReader.dll --references \"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/bootjson-references.txt\" --embedded-resources\"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/embedded.resources.txt\"  --output \"/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/obj/Debug/netstandard2.0/blazor/blazor.boot.json\"\" exited with code 1. [/mnt/docs/dev/dotnet-playground/BlazorComponents/BlazorFileReader/BlazorFileReader.csproj]\r\n```\r\n\r\nDev environment:\r\n```\r\nblazor version: 0.5.0-preview1-10349\r\n\r\n$ dotnet --info\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     opensuse\r\n OS Version:  20170721\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.302/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.302 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n$ cat /etc/os-release \r\nNAME=\"openSUSE Tumbleweed\"\r\n# VERSION=\"20170721\"\r\nID=opensuse\r\nID_LIKE=\"suse\"\r\nVERSION_ID=\"20170721\"\r\nPRETTY_NAME=\"openSUSE Tumbleweed\"\r\nANSI_COLOR=\"0;32\"\r\nCPE_NAME=\"cpe:/o:opensuse:tumbleweed:20170721\"\r\nBUG_REPORT_URL=\"https://bugs.opensuse.org\"\r\nHOME_URL=\"https://www.opensuse.org/\"\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1156","RelatedDescription":"Open issue \"Publish failing\" (#1156)"},{"Id":"342828861","IsPullRequest":false,"CreatedAt":"2018-07-19T18:12:20","Actor":"uwefms","Number":"1155","RawContent":null,"Title":"<summary> / <details> Tag not working","State":"closed","Body":"Trying to use summary / details Tags produced the following error message: (in Firefox / Chrome)\r\n\r\nError: System.InvalidOperationException: Object of type 'ShowRaum.Client.Pages.Summary' does not have a property matching the name 'ChildContent'.\r\n\r\nI know, it is not (yet) supported in Edge.\r\n\r\nTo reproduce:\r\n\r\nJust add\r\n\r\n\t<details>\r\n\t\t<summary>Some text</summary>\r\n\t\t<p>Another text</p>\r\n\t</details>\r\n\r\nto Counter.cshtml.\r\n\r\n  regards\r\n\r\n      Uwe\r\n","Url":"https://github.com/aspnet/Blazor/issues/1155","RelatedDescription":"Closed issue \"<summary> / <details> Tag not working\" (#1155)"},{"Id":"342656184","IsPullRequest":true,"CreatedAt":"2018-07-19T17:57:18","Actor":"SteveSandersonMS","Number":"1153","RawContent":null,"Title":"Run E2E tests under both WebAssembly and server-side execution modes","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1153","RelatedDescription":"Closed or merged PR \"Run E2E tests under both WebAssembly and server-side execution modes\" (#1153)"},{"Id":"342818909","IsPullRequest":true,"CreatedAt":"2018-07-19T17:21:51","Actor":"vertonghenb","Number":"1154","RawContent":null,"Title":"Overload UriHelper to forceLoad the page even if it's not a Blazor defined Route.","State":"open","Body":"**PR issued to solve**\r\n* Add UrlHelper.NavigateTo overload that forces a full page reload #979\r\n* Handle FileResult from controller service #962 \r\n* Combine MVC razor pages with Blazor pages #1069 \r\n* Helps with Routing enhancements #293\r\n\r\nBasically when you have a MVC Server that serves the Blazor Client and on the other hand sends File Downloads (for example). It was not possible to load the MVC Uri outside of Blazor's internal routing. \r\nWith this PR, it's now possible to use the following block of code to load a Uri outside of Blazor's routing:\r\n\r\n```csharp\r\n@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper\r\n<button onclick=@GoToMvcRoute>Navigate to Controller Action!</button>\r\n<button onclick=@DontGoToMvcRoute>Don't Navigate to Controller Action!</button>\r\n\r\n@functions {\r\n    void GoToMvcRoute()\r\n    {\r\n        UriHelper.NavigateTo(\"/controller/action\", forceLoad: true);\r\n\r\n    }\r\n    void DontGoToMvcRoute()\r\n    {\r\n        UriHelper.NavigateTo(\"/controller/action\");\r\n\r\n    }\r\n}\r\n````\r\n\r\n**Tests**\r\nNot really sure how to test this in the current suite, maybe add an additional AspNetHosted project with \r\na server that also serves via MVC? I simply tested on \"my machine\" to make sure it's loading the page. \r\n\r\n\r\n**Caveats**\r\nThe mapping of the controllers still have to happen on Startup.cs (which is normal):\r\n````csharp\r\n            app.UseMvcWithDefaultRoute();\r\n            app.UseBlazor<Client.Program>();\r\n````\r\n**Impact**\r\nNo impact on current usages of IUriHelper (default parameter)\r\n\r\nIf you know a better name for the parameter, I'm all ears! \r\n* byPassInternalRouting?","Url":"https://github.com/aspnet/Blazor/pull/1154","RelatedDescription":"Open PR \"Overload UriHelper to forceLoad the page even if it's not a Blazor defined Route.\" (#1154)"},{"Id":"342615808","IsPullRequest":false,"CreatedAt":"2018-07-19T07:47:47","Actor":"dataCore","Number":"1152","RawContent":null,"Title":"Passing Server Configuration (appsettings.json) to the Blazor Client","State":"open","Body":"Is there a way to passing the Server Configuration (ASP.Net Core MVC WebApp with an appsettings.json) to the Client Project to be used by the Blazor Client? I try to pass e.g. the API-Url and I don't want to e.g. Hard-Code it in the Program.cs of the Blazor Client. Also cool would be if the appsettings.development.json would work too.\r\n\r\nCurrently I Hard-Code it into my Blazor Client:\r\n```csharp\r\npublic class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var serviceProvider = new BrowserServiceProvider(services =>\r\n            {\r\n                // Add Blazor.Extensions.Logging.BrowserConsoleLogger\r\n                services.AddLogging(builder => builder\r\n                    .AddBrowserConsole() // Register the logger with the ILoggerBuilder\r\n                    .SetMinimumLevel(LogLevel.Debug) // Set the minimum log level to Information\r\n                );\r\n\r\n                services.Configure<HttpClientExtensionForMYAPIOptions>(options =>\r\n                {\r\n                    options.Url = new Uri(\"https://MYAPI.MYDOMAIN.ch\");\r\n                });\r\n                services.AddSingleton<HttpClientExtensionForMYAPI>();\r\n            });\r\n            \r\n            new BrowserRenderer(serviceProvider).AddComponent<App>(\"app\");\r\n        }\r\n    }\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1152","RelatedDescription":"Open issue \"Passing Server Configuration (appsettings.json) to the Blazor Client\" (#1152)"},{"Id":"342565385","IsPullRequest":false,"CreatedAt":"2018-07-19T03:23:28","Actor":"dustgrinder","Number":"1151","RawContent":null,"Title":"One single route is reported as 'The following routes are ambiguous'","State":"open","Body":"I repeatedly get errors such as this:\r\n\r\n`Error: System.InvalidOperationException: Failed to compare two elements in the array. --->` `System.InvalidOperationException: The following routes are ambiguous:`\r\n`'admin/product/{ProductUrl}' in 'X.Client.AdminWide.UpdateProduct'`\r\n`'admin/product/{ProductUrl}' in 'X.Client.AdminWide.UpdateProduct'`\r\n\r\nI have only one route 'admin/product/{ProductUrl}' in that page. Also, that page has been working for a while, but only shows that errors after I create a new page with a dynamic url (\"/user/{UserName}/orders\"), which really has nothing related to it.\r\n\r\nThe error only happens if the url is like \"/admin/product\" and doesn't happen when it's \"/admin\".\r\n\r\nThe oddest thing is, *sometimes* I would edit the route of a wholly unrelated page into \"/x/y\" and a random other page would break.\r\n\r\nWhat could be the case here?","Url":"https://github.com/aspnet/Blazor/issues/1151","RelatedDescription":"Open issue \"One single route is reported as 'The following routes are ambiguous'\" (#1151)"},{"Id":"342491812","IsPullRequest":true,"CreatedAt":"2018-07-18T21:05:34","Actor":"Suchiman","Number":"1150","RawContent":null,"Title":"Polyfill for TextDecoder","State":"open","Body":"I was toying around with server side blazor and the first culprit i run into was the lack of Edge support 😉 \r\nI've extracted the least amount of Polyfil necessary from https://github.com/samthor/fast-text-encoding/blob/master/text.js#L137 which worked for my experiments and still uses the native TextDecoder in other browsers.\r\nNot sure if this is acceptable or how / where i need to attribute this.\r\n\r\nFixes #1131\r\n","Url":"https://github.com/aspnet/Blazor/pull/1150","RelatedDescription":"Open PR \"Polyfill for TextDecoder\" (#1150)"},{"Id":"342437114","IsPullRequest":false,"CreatedAt":"2018-07-18T20:43:54","Actor":"Lupusa87","Number":"1149","RawContent":null,"Title":"Any plans to support System.Drawing.Common?","State":"closed","Body":"Maybe it is not so important to have this support on early development phase, but it's interesting if it can be supported and how high importance will it have.\r\n\r\nIt is based on mono, so maybe can be easy implemented.\r\n\r\nhttps://www.nuget.org/packages/System.Drawing.Common\r\nhttps://www.nuget.org/packages/Microsoft.Windows.Compatibility\r\nhttps://github.com/CoreCompat/CoreCompat\r\n\r\n![untitled](https://user-images.githubusercontent.com/40779557/42899160-2852c026-8a93-11e8-9425-ce7b5c7ec947.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1149","RelatedDescription":"Closed issue \"Any plans to support System.Drawing.Common?\" (#1149)"},{"Id":"342414783","IsPullRequest":false,"CreatedAt":"2018-07-18T20:42:50","Actor":"doggy8088","Number":"1148","RawContent":null,"Title":"CPU High issue report","State":"closed","Body":"I made a sample project to reproduce this problem.  Please check this out: https://github.com/doggy8088/TodoMVC_Blazor/tree/CPUHighBug\r\n\r\nAfter clone my code, switch to `CPUHighBug` branch.  Open with Visual Studio 2017, then hit `Ctrl+F5`, then you will see the CPU high problem in Chrome.\r\n\r\nIf you need to turn off the Tab in Chrome, please hit `Shift+ESC` to open **Chrome Task Manager**, then Close the high cpu tab.","Url":"https://github.com/aspnet/Blazor/issues/1148","RelatedDescription":"Closed issue \"CPU High issue report\" (#1148)"},{"Id":"342311061","IsPullRequest":false,"CreatedAt":"2018-07-18T20:42:07","Actor":"malibVB","Number":"1147","RawContent":null,"Title":"favicon.ico is not displayed in browser tab","State":"closed","Body":"How to set the favico.ico for an blazor app created with vscode?\r\n\r\nThis is not working:\r\n `<link href=\"favicon.ico\" rel=\"icon\" type=\"image/x-icon\" />`\r\n\r\nI also tried to copy the icon to the path of index.html\r\nIt's also not working.","Url":"https://github.com/aspnet/Blazor/issues/1147","RelatedDescription":"Closed issue \"favicon.ico is not displayed in browser tab\" (#1147)"},{"Id":"342135577","IsPullRequest":true,"CreatedAt":"2018-07-18T00:37:21","Actor":"rynowak","Number":"1146","RawContent":null,"Title":"Add HTML Block rewriting","State":"open","Body":"/cc @SteveSandersonMS - handing this off for you to do the runtime piece.\r\n\r\nRewrites HTML-only subtrees of the IR in an HTML 'block' node with simple string content. \r\n\r\nThis will rely on new runtime/rendertree support in order to work E2E.\r\n","Url":"https://github.com/aspnet/Blazor/pull/1146","RelatedDescription":"Open PR \"Add HTML Block rewriting\" (#1146)"},{"Id":"341651385","IsPullRequest":true,"CreatedAt":"2018-07-17T22:18:42","Actor":"rynowak","Number":"1139","RawContent":null,"Title":"Fix Blazor tooling on 15.8","State":"closed","Body":"/cc @SteveSandersonMS ","Url":"https://github.com/aspnet/Blazor/pull/1139","RelatedDescription":"Closed or merged PR \"Fix Blazor tooling on 15.8\" (#1139)"},{"Id":"342108094","IsPullRequest":false,"CreatedAt":"2018-07-17T22:13:18","Actor":"gnpretorius","Number":"1145","RawContent":null,"Title":"Redirecting between pages (parent> child) but UI is not updating","State":"open","Body":"Not sure if this is a bug or if I'm using it the wrong way. Let me try and explain what I'm trying to do. \r\n\r\n**In the Vue world**\r\nTypically I would have the following components: \r\n\r\n- **App** (the main component page with a ```router-view```)\r\n- - **List** (a component with a list of items and a  ```router-view```)\r\n- - - **Create** (a component with the create details on)\r\n\r\nThis means I could deep link into the create page i.e.\r\n\r\n- root.com/items (The list of items)\r\n- root.com/items/create (This list of items with the create dialog visible)\r\n\r\nNavigating between the two pages would simply show / hide the create section\r\n\r\ne.g. **root.com/items**\r\n```\r\n-------------------------\r\n| Item A | Create | Edit | \r\n| Item B | Create | Edit | \r\n| Item B | Create | Edit | \r\n-------------------------\r\n```\r\ne.g. **root.com/items/create**\r\n```\r\n-------------------------\r\n|                        |\r\n| Name:     ======       |\r\n| Type:      ======      |\r\n|                        |\r\n| Item A | Create | Edit | \r\n| Item B | Create | Edit | \r\n| Item B | Create | Edit | \r\n-------------------------\r\n```\r\n\r\n**In the Blazor world**\r\n\r\nI tried the same in Blazor. The only way to achieve the nested routing was to have the following: \r\n\r\n- MainLayout (inherits from BlazorLayoutComponent)\r\n- - List Page (Has a page directive with the url \"/\" and inherits from BlazorLayoutComponent)\r\n- - - Create Page (Has a page directive with the url \"/create\")\r\n\r\nI have a link on each page linking between them i.e. ```list``` -> ```new``` and ```new``` -> ```list```. \r\n\r\n**The bug**\r\n\r\nWhen I go from the ```list``` page to the ```new``` page, the control shows and everything is fine, however when I navigate back, the UI does not update. The URL does update, just not the UI.\r\n\r\nIs this type of nested routing supported in Blazor? Is it a future consideration? The multi-level child routing in Vue is pretty cool and would be good to see some of this in Blazor 😄 \r\n\r\nThanks and shout if it's not clear. \r\nG\r\n","Url":"https://github.com/aspnet/Blazor/issues/1145","RelatedDescription":"Open issue \"Redirecting between pages (parent> child) but UI is not updating\" (#1145)"},{"Id":"341998941","IsPullRequest":false,"CreatedAt":"2018-07-17T16:47:16","Actor":"Stuart88","Number":"1144","RawContent":null,"Title":"Blank page when running preview app","State":"closed","Body":"Downloaded the latest Blazor Language Services from [here](https://marketplace.visualstudio.com/items?itemName=aspnet.blazor) and have gone through the official guide for getting things going.\r\n\r\nThe example app, upon starting a new asp.net blazor project, just shows 'Loading...' in the top left corner, then eventually ends with a white screen.\r\n\r\nThis happens in Firefox and IE, both on the latest versions.\r\n\r\nHelp!\r\n\r\nCheers.","Url":"https://github.com/aspnet/Blazor/issues/1144","RelatedDescription":"Closed issue \"Blank page when running preview app\" (#1144)"},{"Id":"341813701","IsPullRequest":false,"CreatedAt":"2018-07-17T14:52:07","Actor":"Daendel","Number":"1143","RawContent":null,"Title":"Cannot call a method without parameters from JavaScript to C#","State":"closed","Body":"When I try to call a method without parameters:\r\n\r\n```\r\nvar method = Blazor.platform.findMethod(\"TransactionTypeCreator.Client\",\r\n                \"TransactionTypeCreator.Client.Services\",\r\n                \"AppState\",\r\n                \"UploadInput\");\r\n\r\nBlazor.platform.callMethod(method, null, null);\r\n```\r\n\r\nI get an error in MonoPlatform.ts (line 51): \r\n`if (args.length > 4) {     <- Uncaught TypeError: Cannot read property 'length' of null`\r\n\r\nWhy do I need to pass parameters?","Url":"https://github.com/aspnet/Blazor/issues/1143","RelatedDescription":"Closed issue \"Cannot call a method without parameters from JavaScript to C#\" (#1143)"},{"Id":"341798341","IsPullRequest":false,"CreatedAt":"2018-07-17T07:30:52","Actor":"MarekPokornyOva","Number":"1142","RawContent":null,"Title":"Idea: Startup argument","State":"open","Body":"Hi,\r\nI was experimenting with hosting Blazor (version 0.4) on a page - to integrate with a CMS single pages (server side driven routing) instead on SPA as is supposed Blazor setup.\r\n\r\n**Changes:**\r\nblazor.js\r\n```\r\n\tline 344: var allScriptElems, thisScriptElem, ..., ex_1, bootArgs;\r\n\tline 366: bootArgs = thisScriptElem.getAttribute('args');\r\n\tline 378: Environment_1.platform.callEntryPoint(entryPointAssemblyName, entryPointMethod, [Environment_1.platform.toDotNetString(bootArgs)]);\r\n\r\n```\r\nProgram.cs (in client project)\r\n```\r\nstatic void MainWithArgs(string args)\r\n{\r\n\tvar serviceProvider = new BrowserServiceProvider(services =>\r\n\t{\r\n\t\t// Add any custom services here\r\n\t});\r\n\r\n\tstring[] args2 = ParseArgs(args);\r\n\tnew BrowserRenderer(serviceProvider).AddComponent(Type.GetType(args2[0]), args2[1]);\r\n}\r\n\r\n```\r\nUsage example in MVC razor view (server side project):\r\n`<script src=\"_framework/blazor.js\" main=\"MvcSite01.Client.dll\" entrypoint=\"MvcSite01.Client.Program::MainWithArgs\" args='/component:\"MvcSite01.Client.Pages.@(Model.ClientScript), MvcSite01.Client\" /element:\"app\"' references=\"MvcSite01.Shared.dll,Microsoft.AspNetCore.Blazor.Browser.dll,Microsoft.AspNetCore.Blazor.dll,Microsoft.Extensions.DependencyInjection.Abstractions.dll,Microsoft.Extensions.DependencyInjection.dll,mscorlib.dll,netstandard.dll,System.Core.dll,System.dll,System.Net.Http.dll\" linker-enabled=\"true\"></script>\r\n`\r\n\r\nThe startup argument was useful to drive inserted component during the experiment but it can be used any way a developer like, of course.","Url":"https://github.com/aspnet/Blazor/issues/1142","RelatedDescription":"Open issue \"Idea: Startup argument\" (#1142)"},{"Id":"341735673","IsPullRequest":true,"CreatedAt":"2018-07-17T05:43:30","Actor":"WaiChungK","Number":"1141","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Hello, this is my first time contributing to an open source project. I noticed that your contribution link does not link to the correct contribution page. I have made changes to fix the url","Url":"https://github.com/aspnet/Blazor/pull/1141","RelatedDescription":"Closed or merged PR \"Update README.md\" (#1141)"},{"Id":"341733144","IsPullRequest":true,"CreatedAt":"2018-07-17T01:43:56","Actor":"WaiChungK","Number":"1140","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Hello, this is my first time contributing to an open source project. I noticed that your contribution link does not link to the correct contribution page. I have made changes to fix the url","Url":"https://github.com/aspnet/Blazor/pull/1140","RelatedDescription":"Closed or merged PR \"Update README.md\" (#1140)"},{"Id":"341516151","IsPullRequest":false,"CreatedAt":"2018-07-16T15:13:42","Actor":"vertonghenb","Number":"1138","RawContent":null,"Title":"Visual Studio for mac not supported","State":"closed","Body":"Apparently  Visual Studio for Mac doesn't Support C# 7.3 thus not able to build a blazor app.\r\n\r\nDotnet 2.1.300 installed (and possible to build/run blazor apps on mac via CLI), but Visual Studio For Mac is not. \r\n\r\n`Error: CSC : error CS1617: Invalid option '7.3' for /langversion. Use '/langversion:?' to list supported values.`","Url":"https://github.com/aspnet/Blazor/issues/1138","RelatedDescription":"Closed issue \"Visual Studio for mac not supported\" (#1138)"},{"Id":"341248672","IsPullRequest":false,"CreatedAt":"2018-07-16T13:06:27","Actor":"Lupusa87","Number":"1134","RawContent":null,"Title":"Improve js interop with dynamic content execution","State":"closed","Body":"My experimental [project](http://lupusablazordemos.azurewebsites.net/) is working **very slow** right now.\r\n\r\nSo I think about optimization strategies and hope will achieve better performance. This strategies are different but I think this one is interesting not only for my project.\r\n\r\nI am using **canvas** and manipulating it via js interop, it means I do heavy operations with interop, many calls, passing parameters, maintain large code etc.\r\n\r\nLet's imagine I have **30 js registered function** (draw line, rect, arc etc) and mixing them (as will be required from projects logic) and let's say I **100 times** call, pass parameters, receive results from/to js. And it is repeating on every redraw (one second or less interval for smooth clock)!\r\n\r\nThis 30 js functions are like underlying level to access html5 canvas, it can be also referenced nuget package.\r\n\r\nAll this actions: call, passing params, return results have **time cost** and **probably is one reason for slow performance**.\r\n\r\nSo this question popups logically - can we reduce calls amount? For example collect all js functions and **call one time all this commands**.\r\n\r\nI think it is possible, because js allows us (with many ways) to **evalute code** (execute string containing js script).\r\n\r\nSo I can use string builder, collect all necessary js logic and call it one time. Please note that in most case **I don't need results from js**, if I need only to pass in another js function.\r\n\r\nAs I mentioned there is **many ways** to execute dynamic js scripts, first option is **evil()** function but I don't want now to go in details with way is better.\r\nI did **small research** and there can be found optimal way to do this (technique not matters for now).\r\nThere are security, debuging, preformance issues but let's forget about them for now.\r\n\r\nI try to **model theoretical structure** to improve js interop, it to become more dynamic and interoperable. Because as it seems we can't escape from js for next months/years and we need to find ways to use it in efficient way.\r\n\r\nWe can make parallel to **sql queries**, where we can build any query and then server will execute it.\r\n\r\nOk, I think it sounds good, less js functions, less calls, more flexibility and custom approach.\r\nNo one denies me to do it myself, maybe not perfectly but to try :)\r\n\r\n**Why I open this issue?**\r\n First I want to hear what people think about this;\r\n Second I think this improvement  (if it has sense) not should do all developers separately, we can say that someone will implement it and share as nuget package, but I think it's better to do blazor itself because we expect **more competentive people** in blazor team, **built-in feature** will be better and community always can contribute any improvement.\r\n\r\nI will be happy if you think about this and measure does it have perspective or not, is this no sense or **real way for some improvement**.\r\n\r\nHope text is understandable, for now it is **only theoretical** but if there will be interes or I will do it myself I will share my code and results about performance.\r\n\r\nThank you, **waiting for your activity** :)\r\n\r\nI know there are many open issues and many things to think and to do, but IMHO this issue can be useful too.\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1134","RelatedDescription":"Closed issue \"Improve js interop with dynamic content execution\" (#1134)"},{"Id":"341280865","IsPullRequest":false,"CreatedAt":"2018-07-16T13:02:43","Actor":"danroth27","Number":"1136","RawContent":null,"Title":"Minify blazor.server.js","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1136","RelatedDescription":"Closed issue \"Minify blazor.server.js\" (#1136)"},{"Id":"341484363","IsPullRequest":false,"CreatedAt":"2018-07-16T12:10:43","Actor":"uwbwsvd","Number":"1137","RawContent":null,"Title":"empty sreen","State":"closed","Body":"At first I'm not very familiar with all these things but interested.\r\nI tried this:\r\nhttps://blazor.net/docs/get-started.html\r\nAt Point 4 the browser opened: Loading ... Then an empty screen.\r\nI can't find any error messages.\r\nI have installed Visual Studio Community (Windows 10 Pro 1803)  and Blazor today.","Url":"https://github.com/aspnet/Blazor/issues/1137","RelatedDescription":"Closed issue \"empty sreen\" (#1137)"},{"Id":"341253517","IsPullRequest":false,"CreatedAt":"2018-07-14T23:51:56","Actor":"YandyZaldivar","Number":"1135","RawContent":null,"Title":"WebSockets support","State":"closed","Body":"There is this issue #20 tracking SignalR client support.\r\n\r\nI am opening this to follow a standard client WebSockets implementation. Maybe it comes from Mono making `System.Net.WebSockets` available, a separate package/api using JavaScript interop or a new API for Blazor.\r\n\r\nIs there any projection on this already?","Url":"https://github.com/aspnet/Blazor/issues/1135","RelatedDescription":"Closed issue \"WebSockets support\" (#1135)"},{"Id":"341244787","IsPullRequest":false,"CreatedAt":"2018-07-14T15:37:33","Actor":"Lupusa87","Number":"1133","RawContent":null,"Title":"Change standalone web.config to use Cache-Control headers","State":"open","Body":"I published updated [project](http://lupusablazordemos.azurewebsites.net) to azure.\r\nWhen I navigate to site Chrome was showing old version, Firefox got error. Edge showed new version but I am not sure there was loaded and cashed previous version.\r\n**I manually cleared browsers cache**, Chrome and Firefox downloaded updated files and run site as expected.\r\n\r\nOf course we need user to see new version for after all new publishing.\r\n\r\nShould I trigger this somehow from my code or should blazor do it automatically?","Url":"https://github.com/aspnet/Blazor/issues/1133","RelatedDescription":"Open issue \"Change standalone web.config to use Cache-Control headers\" (#1133)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-21T05:30:02.5816413Z","RunDurationInMilliseconds":1272}