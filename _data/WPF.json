{"Data":{"GitHub":{"Issues":[{"Id":"391322913","IsPullRequest":true,"CreatedAt":"2018-12-21T00:33:28","Actor":"walterlv","Number":"173","RawContent":null,"Title":"Use nameof keyword instead of hard coded parameter names","State":"closed","Body":"It's better for method refactoring.","Url":"https://github.com/dotnet/wpf/pull/173","RelatedDescription":"Closed or merged PR \"Use nameof keyword instead of hard coded parameter names\" (#173)"},{"Id":"393214681","IsPullRequest":false,"CreatedAt":"2018-12-20T21:17:00","Actor":"onovotny","Number":"197","RawContent":null,"Title":"MS.Internal.FontCache.Util' threw an exception. ---> System.UriFormatException: Invalid URI: The format of the URI could not be determined.","State":"open","Body":"From Telemetry\r\n\r\n.NET Core 3.0 Preview 1\r\nWindows 7: Microsoft Windows 6.1.7601 Service Pack 1\r\nlocale: en-US\r\n\r\n\r\n```\r\nSystem.Windows.Markup.XamlParseException: Set property 'System.Windows.ResourceDictionary.DeferrableContent' threw an exception. ---> System.TypeInitializationException: The type initializer for 'System.Windows.FrameworkElement' threw an exception. ---> System.TypeInitializationException: The type initializer for 'System.Windows.Documents.TextElement' threw an exception. ---> System.TypeInitializationException: The type initializer for 'MS.Internal.FontCache.Util' threw an exception. ---> System.UriFormatException: Invalid URI: The format of the URI could not be determined.\r\n   at System.Uri.CreateThis(string uri, bool dontEscape, UriKind uriKind)\r\n   at System.Uri..ctor(string uriString, UriKind uriKind)\r\n   at MS.Internal.FontCache.Util..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at MS.Internal.FontCache.Util.get_Dpi()\r\n   at System.Windows.SystemParameters.get_Dpi()\r\n   at System.Windows.SystemFonts.ConvertFontHeight(int height)\r\n   at System.Windows.SystemFonts.get_MessageFontSize()\r\n   at System.Windows.Documents.TextElement..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.FrameworkElement..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.FrameworkElement.FindResourceFromAppOrSystem(object resourceKey, out object source, bool disableThrowOnResourceNotFound, bool allowDeferredResourceReference, bool mustReturnDeferredResourceReference)\r\n   at System.Windows.StaticResourceExtension.FindResourceInAppOrSystem(IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)\r\n   at System.Windows.StaticResourceExtension.FindResourceInEnviroment(IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)\r\n   at System.Windows.StaticResourceExtension.TryProvideValueImpl(IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)\r\n   at System.Windows.StaticResourceExtension.TryProvideValueInternal(IServiceProvider serviceProvider, bool allowDeferredReference, bool mustReturnDeferredResourceReference)\r\n   at System.Windows.ResourceDictionary.SetOptimizedStaticResources(IList<T> staticResources, IServiceProvider serviceProvider, StaticResourceExtension staticResourceWorker)\r\n   at System.Windows.ResourceDictionary.SetKeys(IList<T> keyCollection, IServiceProvider serviceProvider)\r\n   at System.Windows.ResourceDictionary.SetDeferrableContent(DeferrableContent deferrableContent)\r\n   at System.Windows.ResourceDictionary.set_DeferrableContent(DeferrableContent value)\r\n   at System.Windows.Baml2006.WpfSharedBamlSchemaContext+<>c.<Create_BamlProperty_ResourceDictionary_DeferrableContent>b__297_0(object target, object value)\r\n   at System.Windows.Baml2006.WpfKnownMemberInvoker.SetValue(object instance, object value)\r\n   at MS.Internal.Xaml.Runtime.ClrObjectRuntime.SetValue(XamlMember member, object obj, object value)\r\n   at MS.Internal.Xaml.Runtime.ClrObjectRuntime.SetValue(object inst, XamlMember property, object value)\r\n   --- End of inner exception stack trace ---\r\n   at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\r\n   at System.Windows.Markup.WpfXamlLoader.Load(XamlReader xamlReader, IXamlObjectWriterFactory writerFactory, bool skipJournaledProperties, object rootObject, XamlObjectWriterSettings settings, Uri baseUri)\r\n   at System.Windows.Markup.WpfXamlLoader.LoadBaml(XamlReader xamlReader, bool skipJournaledProperties, object rootObject, XamlAccessLevel accessLevel, Uri baseUri)\r\n   at System.Windows.Markup.XamlReader.LoadBaml(Stream stream, ParserContext parserContext, object parent, bool closeStream)\r\n   at System.Windows.Application.LoadComponent(object component, Uri resourceLocator)\r\n   at PackageExplorer.App.InitializeComponent() in PackageExplorer\\App.xaml:line 1\r\n   at PackageExplorer.App.Main()\r\n```","Url":"https://github.com/dotnet/wpf/issues/197","RelatedDescription":"Open issue \"MS.Internal.FontCache.Util' threw an exception. ---> System.UriFormatException: Invalid URI: The format of the URI could not be determined.\" (#197)"},{"Id":"393083570","IsPullRequest":true,"CreatedAt":"2018-12-20T15:02:34","Actor":"hughbe","Number":"196","RawContent":null,"Title":"Move files to the right directory","State":"open","Body":"And some minor associated code cleanup","Url":"https://github.com/dotnet/wpf/pull/196","RelatedDescription":"Open PR \"Move files to the right directory\" (#196)"},{"Id":"393038022","IsPullRequest":true,"CreatedAt":"2018-12-20T13:09:01","Actor":"dotnet-maestro[bot]","Number":"195","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18619.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/195","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#195)"},{"Id":"392970471","IsPullRequest":false,"CreatedAt":"2018-12-20T10:00:29","Actor":"Jogge","Number":"194","RawContent":null,"Title":"Click event is not raised when using touch","State":"open","Body":"* .NET Core Version:\r\n3.0.100-preview-009812\r\n* Windows version:\r\nVersion 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?:\r\nYes\r\n\r\n **Problem description:**\r\nClick event is not always raised when using touch in new windows.\r\n \r\n **Actual behavior:**\r\n Touching (clicking) the button does nothing the first 10 times. 11th time the click event is raised.\r\n\r\n **Expected behavior:**\r\nClick event on button should be raised on first touch.\r\n\r\n **Minimal repro:**\r\n[Touch.zip](https://github.com/dotnet/wpf/files/2698305/Touch.zip)\r\n***MainWindow.xaml:***\r\n```\r\n<Window \r\n    x:Class=\"Touch.MainWindow\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    Height=\"400\" Width=\"400\">\r\n    <StackPanel>\r\n        <TextBox Text=\"{Binding Integer}\" FontSize=\"48\" />\r\n        <TextBox Text=\"{Binding Integer}\" FontSize=\"48\" />\r\n    </StackPanel>\r\n</Window>\r\n```\r\n***MainWindow.xaml.cs:***\r\n```\r\npublic partial class MainWindow\r\n{\r\n    public MainWindow()\r\n    {\r\n        InitializeComponent();\r\n\r\n        DataContext = new ViewModel();\r\n    }\r\n}\r\n```\r\n***ViewModel.cs:***\r\n```\r\npublic class ViewModel\r\n{\r\n    private int _integer;\r\n\r\n    public int Integer\r\n    {\r\n        get => _integer;\r\n        set\r\n        {\r\n            _integer = value;\r\n            new DialogWindow().ShowDialog();\r\n        }\r\n    }\r\n}\r\n```\r\n***DialogWindow.xaml:***\r\n```\r\n<Window\r\n    x:Class=\"Touch.DialogWindow\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    Height=\"200\" Width=\"200\">\r\n    <Grid>\r\n        <Button Content=\"Close\" Click=\"OnClick\" />\r\n    </Grid>\r\n</Window>\r\n```\r\n***DialogWindow.xaml.cs:***\r\n```\r\npublic partial class DialogWindow\r\n{\r\n    public DialogWindow()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n    private void OnClick(object sender, RoutedEventArgs e)\r\n    {\r\n        Close();\r\n    }\r\n}\r\n```\r\n\r\nWhen one of the textboxes has content changed, and you uses touch to focus the other textbox, the  `DialogWindow` will pop up. Now the problem occurs, and we have to press (touch) the close button multiple times (etc. 11 times on one of our devices) before the click event happens and the dialog closes.\r\n\r\n`TouchDown` event works properly. We're also experincing this on other elements than `Button`, for example `TextBox`. It is therefore not a solution to switch to `TouchDown` event. Everyhing in the new window seems to be buggy.\r\n\r\nRelated links:\r\nhttps://stackoverflow.com/questions/53851382/wpf-click-event-is-not-raised-on-touch-screen\r\nhttps://stackoverflow.com/questions/28441538/touching-a-wpf-button-does-sometimes-not-invoke-the-click-handler-under-windows","Url":"https://github.com/dotnet/wpf/issues/194","RelatedDescription":"Open issue \"Click event is not raised when using touch\" (#194)"},{"Id":"392592656","IsPullRequest":true,"CreatedAt":"2018-12-19T13:09:18","Actor":"dotnet-maestro[bot]","Number":"193","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/193","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#193)"},{"Id":"391584785","IsPullRequest":false,"CreatedAt":"2018-12-19T11:57:41","Actor":"johannes-schmitt","Number":"183","RawContent":null,"Title":"[Question] Windows Platform Support","State":"closed","Body":"Which platforms will WPF support?\r\n\r\n.NET Core 3 will support Windows 7, 8.1, 10 (1607+) and Windows Server 2012 R2 SP1+ (see [official announcement](https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/)), but does this also hold true for WPF?","Url":"https://github.com/dotnet/wpf/issues/183","RelatedDescription":"Closed issue \"[Question] Windows Platform Support\" (#183)"},{"Id":"392409046","IsPullRequest":false,"CreatedAt":"2018-12-19T01:55:43","Actor":"John0King","Number":"192","RawContent":null,"Title":"Make WPF on .net core always have an  exposed entrypoint?","State":"open","Body":"*Copied from  https://github.com/dotnet/core/issues/2045*\r\n\r\nAFAIK `App.Xaml` hide the entry-point in WPF .\r\nCould the template of WPF always has the `public static void Main()` entry-point (Do not generate a entrypoint for `App.Xaml`)?\r\n```C#\r\npublic static void Main(string[] args)\r\n{\r\n    var app = new MyApp.App();\r\n    //app.InitializeComponent();  call this in App's constructor\r\n    app.Run();\r\n}\r\n```\r\nthis will let developer know how Xaml app start, and customize app start easily (control start as command line app or UI app).","Url":"https://github.com/dotnet/wpf/issues/192","RelatedDescription":"Open issue \"Make WPF on .net core always have an  exposed entrypoint?\" (#192)"},{"Id":"392341923","IsPullRequest":false,"CreatedAt":"2018-12-18T21:24:29","Actor":"hughbe","Number":"191","RawContent":null,"Title":"XamlLoadPermission.FromXml for element without `class` attribute throws NRE","State":"open","Body":"```cs\r\n\r\n\r\n[Fact]\r\npublic void FromXml_NoClassAttribute_ThrowsArgumentException()\r\n{\r\n    var permission = new XamlLoadPermission(PermissionState.None);\r\n    var elem = new SecurityElement(\"IPermission\");\r\n    Assert.Throws<ArgumentException>(\"elem\", () => permission.FromXml(elem));\r\n}\r\n```\r\n\r\nExpected: throws `ArgumentException`\r\nActual: throws `NullReferenceException`","Url":"https://github.com/dotnet/wpf/issues/191","RelatedDescription":"Open issue \"XamlLoadPermission.FromXml for element without `class` attribute throws NRE\" (#191)"},{"Id":"392273107","IsPullRequest":true,"CreatedAt":"2018-12-18T19:51:32","Actor":"rladuca","Number":"190","RawContent":null,"Title":"Adding d3d_compiler dependency to known issues","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/190","RelatedDescription":"Closed or merged PR \"Adding d3d_compiler dependency to known issues\" (#190)"},{"Id":"392271757","IsPullRequest":false,"CreatedAt":"2018-12-18T18:02:13","Actor":"rladuca","Number":"189","RawContent":null,"Title":"Handle d3d_compiler.dll dependency","State":"open","Body":"Since .NET Framework 4.7, WPF has had a dependency on d3d_compiler.dll.  On Windows 7 SP1, Windows Server 2008 R2, and Windows Server 2008 R2 SP1, this is not necessarily installed.\r\n\r\nWe need to possibly redist d3d_compiler.dll with the WindowsDesktop SDK.  Installer chaining/blocking will probably not work here due to self contained application publishing.","Url":"https://github.com/dotnet/wpf/issues/189","RelatedDescription":"Open issue \"Handle d3d_compiler.dll dependency\" (#189)"},{"Id":"392156703","IsPullRequest":false,"CreatedAt":"2018-12-18T13:28:39","Actor":"dvdbot","Number":"188","RawContent":null,"Title":"When using Dotnet Core 3.0 Preview 1 \"Design in Blend...\" option missing from XAML file","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\nVersion:   3.0.100-preview-009812\r\n* Windows version: (`winver`)\r\nOS Version:  10.0.18298\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nNot tested - only have dotNet Core workflow and dotNet Framework 4.7.x installed\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nIn dotNet Framework 4.7.x when you right click a XAML file you've got an option for \"Design in Blend...\"\r\nWhen using a dotNet Core 3.x based project (dotnet new WPF) this option is missing.\r\nAlso I'm unable to start any kind of graphical designer for any xaml window/page/user control \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nJust no option and no designer \r\n\r\n **Expected behavior:**\r\nHave the option and designer \r\n\r\n **Minimal repro:**\r\n it's as easy as creating a folder and running `dotnet new wpf` to create a project.\r\nOpen this project and try to use Blend or any other designer\r\n\r\nps: I just probably missed an announcement stating that the designers are not available yet but better to ask than to not\r\n","Url":"https://github.com/dotnet/wpf/issues/188","RelatedDescription":"Open issue \"When using Dotnet Core 3.0 Preview 1 \"Design in Blend...\" option missing from XAML file\" (#188)"},{"Id":"392147725","IsPullRequest":true,"CreatedAt":"2018-12-18T13:09:55","Actor":"dotnet-maestro[bot]","Number":"187","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/187","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#187)"},{"Id":"391831646","IsPullRequest":true,"CreatedAt":"2018-12-17T20:07:10","Actor":"rladuca","Number":"186","RawContent":null,"Title":"Set IsShipping as per Arcade guidance for XLIFF generation","State":"closed","Body":"Removing custom localization targets and setting IsShipping where app…ropriate to enable XLIFF generation.\r\n\r\nSee [Arcade issue](https://github.com/dotnet/arcade/issues/1591) for reasoning.\r\n\r\nFixes #171 ","Url":"https://github.com/dotnet/wpf/pull/186","RelatedDescription":"Closed or merged PR \"Set IsShipping as per Arcade guidance for XLIFF generation\" (#186)"},{"Id":"391293508","IsPullRequest":false,"CreatedAt":"2018-12-17T20:07:10","Actor":"rladuca","Number":"171","RawContent":null,"Title":"Start generating XLIFF data from System.Xaml","State":"closed","Body":"We are not currently setup to generate XLIFF data.\r\n\r\nWe need to configure the repo to do so as a first step in the localization pipeline.","Url":"https://github.com/dotnet/wpf/issues/171","RelatedDescription":"Closed issue \"Start generating XLIFF data from System.Xaml\" (#171)"},{"Id":"391819329","IsPullRequest":false,"CreatedAt":"2018-12-17T17:39:07","Actor":"hughbe","Number":"185","RawContent":null,"Title":"XamlLoadPermission(IEnumerable<XamlLoadAccess>) duplicates all items in the array","State":"open","Body":"```cs\r\n\r\npublic static IEnumerable<object[]> Ctor_XamlAccessLevels_TestData()\r\n{\r\n    yield return new object[] { new XamlAccessLevel[0] };\r\n    yield return new object[] { new XamlAccessLevel[] { XamlAccessLevel.PrivateAccessTo(typeof(int)) } };\r\n    yield return new object[] { new XamlAccessLevel[] { XamlAccessLevel.PrivateAccessTo(typeof(int)), XamlAccessLevel.PrivateAccessTo(typeof(int)) } };\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(Ctor_XamlAccessLevels_TestData))]\r\npublic void Ctor_XamlAccessLevels(IEnumerable<XamlAccessLevel> allowedAccess)\r\n{\r\n    var permission = new XamlLoadPermission(allowedAccess);\r\n    Assert.False(permission.IsUnrestricted());\r\n    Assert.Equal(allowedAccess.Length, permission.AllowedAccess.Count);\r\n}\r\n```\r\n\r\nExpected: the count of `permission.AllowedAccess` is equal to the count of the input array.\r\nActual: the count of `permission.AllowedAccess` is *double* the count of the input array","Url":"https://github.com/dotnet/wpf/issues/185","RelatedDescription":"Open issue \"XamlLoadPermission(IEnumerable<XamlLoadAccess>) duplicates all items in the array\" (#185)"},{"Id":"391702939","IsPullRequest":true,"CreatedAt":"2018-12-17T13:09:22","Actor":"dotnet-maestro[bot]","Number":"184","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/184","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#184)"},{"Id":"391583531","IsPullRequest":false,"CreatedAt":"2018-12-17T07:10:30","Actor":"trodent83","Number":"182","RawContent":null,"Title":"Avaible size based DataTemplate selection","State":"open","Body":"It would be more then useful to be able to define a datatemplate depending on the avaible size, as in somecases the Region on which we want to display data can Change dramaticly.\r\nIf we could do something like this:\r\n\r\n`\r\n <MultiDisplayDataTemplate>\r\n            <MultiDisplayDataTemplate.DisplayModes>\r\n                <DisplayMode>\r\n                    <TextBox/>\r\n                </DisplayMode>\r\n                <DisplayMode MinWidth =\"50\"\r\n                             MinHeigh =\"50\">\r\n                    <DockPanel>\r\n                        <Label/>\r\n                        <TextBox/>\r\n                    </DockPanel>\r\n                </DisplayMode>\r\n            </MultiDisplayDataTemplate.DisplayModes>\r\n        </MultiDisplayDataTemplate>\r\n`\r\nThis would leave the current behaviour more or less intakt but would make it possible to make a more resiliant UI where I can use the place that I have quite optimal.","Url":"https://github.com/dotnet/wpf/issues/182","RelatedDescription":"Open issue \"Avaible size based DataTemplate selection\" (#182)"},{"Id":"391504160","IsPullRequest":false,"CreatedAt":"2018-12-16T20:55:28","Actor":"rladuca","Number":"181","RawContent":null,"Title":"Ensure explicit references in WPF product projects","State":"open","Body":"SDK projects generally bring in all the references for the particular SDK that is being used.  This presents an issue in WPF as there are some binaries we would not like to add as references (see #106).  Having these references available gives the wrong impression as to what types developers can use and what changes need to be considered very carefully.\r\n\r\nWe need to create a way of restricting the initial set of references so that they must be added explicitly.  This will server as a warning to developers and a red flag to reviewers that a deeper consideration of the change is needed.\r\n\r\n@vatsan-madhavan has some ideas on this that we can use to implement the change.\r\n","Url":"https://github.com/dotnet/wpf/issues/181","RelatedDescription":"Open issue \"Ensure explicit references in WPF product projects\" (#181)"},{"Id":"391497865","IsPullRequest":false,"CreatedAt":"2018-12-16T19:36:04","Actor":"rladuca","Number":"180","RawContent":null,"Title":"Create a public test plan","State":"open","Body":"We need a public test plan that includes the following:\r\n\r\n- A roadmap for test porting\r\n  - DRT porting\r\n  - Feature test porting\r\n  - Engineering system work (Helix, etc)\r\n- A description of the various test pieces in WPF and how they interact with the CI build\r\n  - DRTs and relation to CI\r\n  - Feature tests and relation to PR validation\r\n- Guidance on porting and adding new test pieces in DRT or Feature Tests\r\n- Guidance on utilizing the various tests in order to validate a PR\r\n- A test matrix including OS and general system requirements\r\n\r\n\r\nNot all of these pieces need to be fully described immediately, but we should at least have some semblance of a road map and contributing guide.  Work like #138 should be unblocked ASAP.","Url":"https://github.com/dotnet/wpf/issues/180","RelatedDescription":"Open issue \"Create a public test plan\" (#180)"},{"Id":"391490452","IsPullRequest":false,"CreatedAt":"2018-12-16T18:01:02","Actor":"Neme12","Number":"179","RawContent":null,"Title":"Visual styles are off by default","State":"open","Body":"The experience when creating a new WPF app and showing a message box is that we get the old-school UI because visual styles are off by default:\r\n![image](https://user-images.githubusercontent.com/11444821/50056931-d3e68200-0163-11e9-9570-5e47c2228a94.png)\r\n\r\ncompare that to the equivalent code from a new Windows Forms app:\r\n![image](https://user-images.githubusercontent.com/11444821/50056921-b5808680-0163-11e9-9876-5e844874c905.png)\r\n\r\nIt has always bothered me that the default experience when using WPF is *worse* than for Windows Forms even though WPF is the newer technology. It gives a really bad impression and makes WPF seem unpolished.\r\n\r\nNot only that, but it seems like the best workaround is adding some XML in an extra file: https://stackoverflow.com/questions/5289328/wpf-messagebox-window-style\r\n\r\nIn my opinion the best case scenario would be that this would just work by default, without any code required to opt-in; if anything, there would be an opt-out. However if compatibility is a concern, then there should be a new API introduced to enable this similar to Windows Forms' `Application.EnableVisualStyles` (perhaps a property on `Application`) which would be enabled for all new created projects by including this in the template, just like Windows Forms does.","Url":"https://github.com/dotnet/wpf/issues/179","RelatedDescription":"Open issue \"Visual styles are off by default\" (#179)"},{"Id":"391465324","IsPullRequest":true,"CreatedAt":"2018-12-16T13:08:25","Actor":"dotnet-maestro[bot]","Number":"178","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/178","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#178)"},{"Id":"391448609","IsPullRequest":false,"CreatedAt":"2018-12-16T09:10:34","Actor":"lindexi","Number":"177","RawContent":null,"Title":"Make the SplashScreen support Gif and custom image","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWe may use SplashScreen to show the advertisement. But the SplashScreen only support the Resource Image that we can not show the image download from the internet in SplashScreen.\r\n\r\nAnd the dynamic images make it easier to engage users that we want to show the gif in SplashScreen.\r\n\r\nhttps://github.com/Microsoft/WPF-Samples/issues/61","Url":"https://github.com/dotnet/wpf/issues/177","RelatedDescription":"Open issue \"Make the SplashScreen support Gif and custom image\" (#177)"},{"Id":"391431729","IsPullRequest":false,"CreatedAt":"2018-12-16T03:28:13","Actor":"a44281071","Number":"176","RawContent":null,"Title":"LinearGradientBrush in Multi-language text element bug.","State":"open","Body":"```xaml\r\n  <Window.Resources>\r\n    <LinearGradientBrush x:Key=\"brush1\" StartPoint=\"0,0.5\" EndPoint=\"1,0.5\">\r\n      <GradientStop Offset=\"0\" Color=\"Red\" />\r\n      <GradientStop Offset=\"1\" Color=\"blue\" />\r\n    </LinearGradientBrush>\r\n  </Window.Resources> \r\n  <TextBlock Foreground=\"{StaticResource brush1}\" Text=\"我是abcdefg文本わたしは\" /> \r\n```\r\nDisplay result in view ↓ (bad):\r\n![bad image](https://social.msdn.microsoft.com/Forums/getfile/1370019)\r\nThis is default font (MS YaHei) in zh-cn OS. ","Url":"https://github.com/dotnet/wpf/issues/176","RelatedDescription":"Open issue \"LinearGradientBrush in Multi-language text element bug.\" (#176)"},{"Id":"391376543","IsPullRequest":true,"CreatedAt":"2018-12-15T13:08:33","Actor":"dotnet-maestro[bot]","Number":"175","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/175","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#175)"},{"Id":"391334197","IsPullRequest":false,"CreatedAt":"2018-12-15T02:08:28","Actor":"lindexi","Number":"174","RawContent":null,"Title":"We can change the dispatcher in dependency property recursively.","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nSometime, we may write the code cross thread to improve performance. But we are hard to share the dependency property to other thread.\r\n\r\nAs we know the DependencyObject is inherited from DispatcherObject in WPF. And the WPF use DispatcherObject.CheckAccess to check the calling thread and the creating thread. Some of the dependency property will call the DispatcherObject.DetachFromDispatcher to set their dispatcher to null to share the dependency property to other threads.\r\n\r\nBut I need to change all of the DependencyObject in a control that I want to share it with other threads. I hope we can use some method like Freeze to freeze some control to share it with other threads. Or we can set the dispatcher in dependency property recursively.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/174","RelatedDescription":"Open issue \"We can change the dispatcher in dependency property recursively.\" (#174)"},{"Id":"391293884","IsPullRequest":true,"CreatedAt":"2018-12-14T22:09:56","Actor":"rladuca","Number":"172","RawContent":null,"Title":"Enabling XLIFF generation","State":"closed","Body":"Generates XLIFF files via a copy of the Arcade localization targets that doesn't require IsShipping to be true.\r\nFixes #171 ","Url":"https://github.com/dotnet/wpf/pull/172","RelatedDescription":"Closed or merged PR \"Enabling XLIFF generation\" (#172)"},{"Id":"391148006","IsPullRequest":false,"CreatedAt":"2018-12-14T15:10:07","Actor":"YannikZ12","Number":"170","RawContent":null,"Title":"Make MarkupExtension an interface","State":"open","Body":"I believe that making MarkupExtension an interface enables developers to work with (Static/Dynamic)Resources more flexibly. In my case it has hurt the creation of ResourceDictionaries with simple types like Double (e.g. font sizes or the like) or fonts in general. \r\n\r\nThe implementation of the class is already really close to that of an interface so it should not be too much work to make the change.\r\n\r\nExample:\r\n```\r\n<TypeOfIMarkupExtension x:Key=\"GlobalFontSize\" Value=\"{Binding BindingToMyClass}\"/>\r\n\r\n<TextBlock FontSize=\"{StaticResource GlobalFontSize}\"/>\r\n```\r\n","Url":"https://github.com/dotnet/wpf/issues/170","RelatedDescription":"Open issue \"Make MarkupExtension an interface\" (#170)"},{"Id":"391103096","IsPullRequest":true,"CreatedAt":"2018-12-14T13:08:57","Actor":"dotnet-maestro[bot]","Number":"169","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/169","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#169)"},{"Id":"390844871","IsPullRequest":false,"CreatedAt":"2018-12-13T20:22:50","Actor":"legistek","Number":"168","RawContent":null,"Title":"Thread Safe DependencyProperty Setting/Getting","State":"open","Body":"I'm gonna say at the outset I don't pretend to know all the reasons why setting  `DependencyProperty`s is not threadsafe (in other words, they always must be set on the UI thread), but I do know that it can be a gigantic pain to build responsive multithreaded UIs while dealing with this issue .This is particularly true in the MVVM pattern where we have `DependencyProperty`'s data bound to view model properties, and we would like to change those view model properties in worker threads.\r\n\r\nI do realize one major problem is that you can't have properties that might affect layout / measure being changed by other threads during the layout pass, and using thread locking to prevent this would mean that worker threads could get blocked by UI updates, which tends to defeat the purpose of multithreading. \r\n\r\nOne possibility, however, might be to allow the `SetValue` (or more frequently binding source property updates) to succeed when triggered in a worker thread, but internally to use the dispatcher to handle the property change. _Basically do transparently what we now have to do manually._ Until the dispatcher gets to the actual change there would be a slight disconnect between what the viewmodel thinks the value is and what the UI thinks it is, but again we have to deal with this now when using the dispatcher (i.e. we don't know when the effect of property changes will actually propagate to the UI if they occur on a worker thread). \r\n\r\nI could easily be overlooking other difficulties, as well as other possible solutions. Either way I didn't see this among any of the issues opened since the open source announcement and thought I'd raise it to for discussion.","Url":"https://github.com/dotnet/wpf/issues/168","RelatedDescription":"Open issue \"Thread Safe DependencyProperty Setting/Getting\" (#168)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-21T05:31:04.8406596Z","RunDurationInMilliseconds":925}