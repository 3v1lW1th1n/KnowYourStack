{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-rc1 now available","PublishedOn":"2018-05-07T18:00:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today we’re happy to announce the first release candidate of ASP.NET Core 2.1! This release should be very close to the final stable release of ASP.NET Core 2.1 and includes primarily bug fixes and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/07/asp-net-core-2-1-0-rc1-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Introduction","PublishedOn":"2018-05-02T23:01:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you ever needed to quickly stand up a web site, or web API app that was publicly available? Is your team or organization thinking about moving to the cloud but aren’t sure the best place to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/exploring-azure-app-service-introduction/","RawContent":null},{"Title":"Blazor 0.3.0 experimental release now available","PublishedOn":"2018-05-02T19:50:50+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Blazor 0.3.0 is now available! This release includes important bug fixes and many new feature enhancements. New features in this release (details below): Project templates updated to use Bootstrap 4...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/blazor-0-3-0-experimental-release-now-available/","RawContent":null},{"Title":"Announcing ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-05-02T19:35:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this release in the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/02/announcing-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"Cosmos DB Solves Common Data Challenges in App Development","PublishedOn":"2018-04-27T17:35:54+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"When considering how to implement your application with a relational database, it can change how you build it dramatically. Some of these challenges include adding an abstract implementation of the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/27/cosmos-db-solves-common-data-challenges/","RawContent":null},{"Title":"Publish Improvements in Visual Studio 2017 version 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 version 15.7. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about, including: Ability...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7646663136","Type":"IssuesEvent","CreatedAt":"2018-05-08T23:12:53","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3033","RelatedDescription":"Closed issue \"Flaky test: TokensFiredForNewDirectoryContentsOnRename sometimes fails on Windows 10\" (#3033) at aspnet/Home","RelatedBody":"_From @jbagga on March 21, 2017 18:33_\n\n[TokensFiredForNewDirectoryContentsOnRename](https://github.com/aspnet/FileSystem/blob/dev/test/Microsoft.Extensions.FileProviders.Physical.Tests/PhysicalFileProviderTests.cs#L1138) failed on the CI a few times in the past week.\r\n\r\ncc @muratg \n\n_Copied from original issue: aspnet/FileSystem#263_"},{"Id":"7645579375","Type":"IssuesEvent","CreatedAt":"2018-05-08T19:05:03","Actor":"halter73","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3125","RelatedDescription":"Closed issue \"An existing connection was forcibly closed by the remote host\" (#3125) at aspnet/Home","RelatedBody":"Using ASP.NET Core 2.1 RC1 the process is killed after an hour or so and we see these logs:\r\n\r\n```\r\nApplication: dotnet.exe\r\nCoreCLR Version: 4.6.26426.2\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.AggregateException: One or more errors occurred. (An existing connection was forcibly closed by the remote host) ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.Shutdown(SocketShutdown how)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Shutdown()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Abort()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.Abort(Exception ex)\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\r\n```\r\n\r\n```\r\nFaulting application name: dotnet.exe, version: 2.1.26426.3, time stamp: 0x5ae1770d\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.2189, time stamp: 0x5abdad60\r\nException code: 0xe0434352\r\nFault offset: 0x0000000000033c58\r\nFaulting process id: 0x2e90\r\nFaulting application start time: 0x01d3e6aa48e5f5c6\r\nFaulting application path: C:\\Program Files\\dotnet\\dotnet.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: f10816d3-b0de-49bc-9745-60f9b7dea199\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\nBTW we're using web sockets without SignalR."},{"Id":"7645294080","Type":"IssuesEvent","CreatedAt":"2018-05-08T18:08:29","Actor":"shirhatti","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3015","RelatedDescription":"Closed issue \"Error! After Installation of AspNetCore and dotnet core the IIS Handler Mappings - aspNetCore is not installed \" (#3015) at aspnet/Home","RelatedBody":"Error! After Installation of AspNetCore and dotnet core the IIS Handler Mappings - aspNetCore is not installed \r\n\r\nWindows 10 Pro \r\nAspNetCore.2.0.5.RuntimePackageStore_x64 \r\ndotnet-runtime-2.0.5-win-x64\r\nI also tried AspNetCore.2.0.6.RuntimePackageStore_x64\r\ndotnet-runtime-2.0.6-win-x64 \r\n![image](https://user-images.githubusercontent.com/36566794/38177309-4543984c-35cd-11e8-99d6-5df0a460196b.png)\r\n\r\nWorked on another Windows 10 computer, but had the same issue. I installed, repaired, uninstalled, rebooted.  \r\n\r\nThere were other similar posts on this back in December 2017. The issue was the installer did not correctly register the aspNetCore dll. \r\n\r\nThank you\r\nDennis Aubrey\r\n\r\n  \r\n"},{"Id":"7642794297","Type":"IssuesEvent","CreatedAt":"2018-05-08T10:25:44","Actor":"sepehr1014","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3125","RelatedDescription":"Opened issue \"An existing connection was forcibly closed by the remote host\" (#3125) at aspnet/Home","RelatedBody":"Using ASP.NET Core 2.1 RC1 the process is killed after an hour or so and we see these logs:\r\n\r\n```\r\nApplication: dotnet.exe\r\nCoreCLR Version: 4.6.26426.2\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.AggregateException: One or more errors occurred. (An existing connection was forcibly closed by the remote host) ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.Shutdown(SocketShutdown how)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Shutdown()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Abort()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.Abort(Exception ex)\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\r\n```\r\n\r\n```\r\nFaulting application name: dotnet.exe, version: 2.1.26426.3, time stamp: 0x5ae1770d\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.2189, time stamp: 0x5abdad60\r\nException code: 0xe0434352\r\nFault offset: 0x0000000000033c58\r\nFaulting process id: 0x2e90\r\nFaulting application start time: 0x01d3e6aa48e5f5c6\r\nFaulting application path: C:\\Program Files\\dotnet\\dotnet.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: f10816d3-b0de-49bc-9745-60f9b7dea199\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\nBTW we're using web sockets without SignalR."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7647442597","Type":"PullRequestEvent","CreatedAt":"2018-05-09T04:00:48","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2231","RelatedDescription":"Opened pull request \"Update Issue Template\" (#2231) at aspnet/SignalR","RelatedBody":"We changed some of the logging APIs and I decided it would be better to just write a Wiki page with a full diagnostics guide to refer to from the template. We can also link to the guide when we need to ask for more information (logs, traces, etc.).\r\n\r\nSee the diagnostics guide here: https://github.com/aspnet/SignalR/wiki/Diagnostics-Guide - At some point it can be elevated to an official \"Doc\" on aspnet/Docs.\r\n\r\nThe Wiki doesn't have any review mechanism, so feel free to offer suggestions for that guide here or via other communication media :)."},{"Id":"7647272507","Type":"IssuesEvent","CreatedAt":"2018-05-09T02:56:20","Actor":"abbotware","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2230","RelatedDescription":"Opened issue \"Non-WebSockets Transport using Linux C# Client Fails\" (#2230) at aspnet/SignalR","RelatedBody":"C# <-> C# communication from NetCore on linux seems to not be working when the transport is not websockts.  I suspect this might be an issue on the linux client side since a windows machine connecting to the same server has no problems.  There are also no problems if the same linux machines connects to IIS Express and web sockets are 'working'.\r\n\r\n* Versions of Server-Side NuGet Packages:\r\n  <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"1.0.0-rc1-final\" />\r\n* Versions of Client-Side NuGet/NPM Packages:\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR.Client\" Version=\"1.0.0-rc1-final\" />\r\n* Are you using the C# client or the JavaScript client:\r\nC# client\r\n\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): \r\nAWS EBS \r\n* The Operating System on the Server (Windows/Linux/macOS):\r\nNot sure?\r\n* The Operating System on the Client (Windows/Linux/macOS):\r\nLinux\r\n\r\n"},{"Id":"7645977706","Type":"PullRequestEvent","CreatedAt":"2018-05-08T20:27:29","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2229","RelatedDescription":"Opened pull request \"[WIP] Embed version in the JavaScript client\" (#2229) at aspnet/SignalR","RelatedBody":"Related to https://github.com/aspnet/SignalR/issues/2130\r\n\r\nThis is a sketch of one way to do this. I'm also thinking that we should have a test that verifies the final package content. In fact, since we build the package before running any tests, I was thinking we could change the tests to run against the package rather than the source. I'm going to look in to that a bit. \r\n\r\nThe way this works for now is that it takes advantage of the fact that we update the `package.json` version from MSBuild during the packaging step. This happens **after** the build phase, so I added a script to the `prepack` phase in NPM that scans all files under `dist` (build outputs) and replaces a token with the actual version in `package.json`\r\n\r\nTODO:\r\n* [ ] Consider testing"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7647414310","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:49:31","Actor":"plutext","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7755","RelatedDescription":"Opened issue \"Is it possible to do web api attribute routing by content type?\" (#7755) at aspnet/Mvc","RelatedBody":"#### Is this a Bug or Feature request?:\r\nfeature request\r\n\r\n#### Steps to reproduce or link to a repro project:\r\n\r\n\r\n#### Description of the problem:\r\n\r\nI'd like to be able to consume either posted JSON or form data at the same endpoint.\r\n\r\nhttps://andrewlock.net/model-binding-json-posts-in-asp-net-core/ suggests using different endpoints, but I can't do that on this occasion\r\n\r\nhttps://massivescale.com/web-api-routing-by-content-type/ suggests a way to do it for asp.net; is something like this available in core mvc?\r\n\r\n in Java's JAX-RS for example, there is @Consumes\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->"},{"Id":"7647353889","Type":"IssuesEvent","CreatedAt":"2018-05-09T03:26:15","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7754","RelatedDescription":"Closed issue \"An error occurred while sending the request. ---> System.Net.Http.CurlException: Couldn't connect to server\" (#7754) at aspnet/Mvc","RelatedBody":"```c#\r\n时间：5/9/18 10:11:39 AM\r\n详细信息:\r\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Couldn't connect to server\r\n   at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)\r\n   at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance.<InvokeExportAsync>d__7`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.<InvokeExportAsync>d__13`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.NodeServicesImpl.<InvokeExportWithPossibleRetryAsync>d__10`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Qibu.Controllers.CutController.<Index>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.A\r\n```"},{"Id":"7647207669","Type":"IssuesEvent","CreatedAt":"2018-05-09T02:31:56","Actor":"tuespetre","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/5784","RelatedDescription":"Closed issue \"Using embedded views -- with layouts -- from a package that supplies controllers/etc.\" (#5784) at aspnet/Mvc","RelatedBody":"I'm trying to create a reusable module for web applications that supplies its own controllers, conventions, and so forth. So far, `IApplicationFeatureProvider<ControllerFeature>`, `ApplicationPart`, and so forth have been great -- but I'm kind of stuck on a pain point when it comes to how views are handled.\r\n\r\n`EmbeddedFileProvider` indicates that all of the view files have been flattened, with slashes replaces by dots. That's not much of a surprise, and it's not Mvc's problem. But Mvc doesn't exactly play nice with it, either. If I add the embedded file provider to the right spot in the options, I can get part of the way there -- I have to use strings like \"Views.Shared.Whatever.cshtml\" and so forth, and there is never any guarantee that this won't conflict with another module or any file provider it chooses to add.\r\n\r\nI tried wrapped the embedded file provider in my own file provider that adds a prefix and transforms the path, and added a mapping to project.json to add the prefix, but even though the view is found, the layout is then not found.\r\n\r\nOn a different attempt I was able to tweak something and get it to render but it used the main `_Layout.cshtml` from the web application and not my embedded one.\r\n\r\nMy next thought is to swap in a different `IViewEngine` within `OnResultExecuted` on a custom base controller class, but then I'm not sure how that will play with layouts and partials, still. The idea would be to have this custom view engine only look at the custom embedded file provider that transforms paths appropriately. `IRazorViewEngineFileProviderAccessor` is an internal interface and thus not 'blessed' for public usage so I'm not sure how this will play out because I don't see any obvious hooks for doing something like this.\r\n\r\nAnyways, I'll keep trying to cook something up, and if anyone has an idea please let me know, or maybe this needs to be a feature request.\r\n\r\n"},{"Id":"7647206619","Type":"IssuesEvent","CreatedAt":"2018-05-09T02:31:32","Actor":"qibucloud","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7754","RelatedDescription":"Opened issue \"An error occurred while sending the request. ---> System.Net.Http.CurlException: Couldn't connect to server\" (#7754) at aspnet/Mvc","RelatedBody":"时间：5/9/18 10:11:39 AM\r\n详细信息:\r\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.CurlException: Couldn't connect to server\r\n   at System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error)\r\n   at System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult)\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance.<InvokeExportAsync>d__7`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.<InvokeExportAsync>d__13`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.NodeServices.NodeServicesImpl.<InvokeExportWithPossibleRetryAsync>d__10`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Qibu.Controllers.CutController.<Index>d__5.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.A"},{"Id":"7647073613","Type":"IssuesEvent","CreatedAt":"2018-05-09T01:43:58","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7753","RelatedDescription":"Opened issue \"[Analyzer]: Warn when the parameter name for a model bound complex parameter has the same name as a top level property\" (#7753) at aspnet/Mvc","RelatedBody":"Related issue: https://github.com/aspnet/Mvc/issues/3735\r\n\r\nConsider:\r\n\r\n```C#\r\npublic IActionResult Index(ProblemModel problem)\r\n{\r\n    return View();\r\n}\r\n...\r\n\r\npublic class ProblemModel\r\n{\r\n    public string Problem { get; set; }\r\n}\r\n```\r\n\r\nIn this case, the `Problem` property would only bind if the value on the wire is `problem.Problem`. Renaming the parameter name to a different value would allow both `problem` and `different.Problem` to bind. This tends to be a pretty big gotcha."},{"Id":"7647001680","Type":"IssuesEvent","CreatedAt":"2018-05-09T01:16:40","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/2432","RelatedDescription":"Closed issue \"IViewContentLocator interface\" (#2432) at aspnet/Mvc","RelatedBody":"Currently MVC searches file system when need to find the source (CSHTML) for some view.\nWe need some simple mechanism to locate view content by name. After that found content will be processed by Razor engine. \nWe can add new interface IViewContentLocator with one method: \n   Stream GetViewContent(string viewName);\nThe default implementation will search for view content on file system but it will be possible to register another implementation of IViewContentLocator which will get view content, for example, from some DB, from resources or any other storage.\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7645120504","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:34:43","Actor":"Ruud-cb","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1784","RelatedDescription":"Opened issue \"Identity core in ASP.NET MVC 6\" (#1784) at aspnet/Identity","RelatedBody":"I am trying to port a class library to .NET Standard, this library includes all repositories, entities and my DbContext. This will be used by both .NET Core applications and .NET Framework applications. \r\nThe library itself is done and EF code-first migrations can be created successfully. Now I am trying to use the AspNetCore.Identity.EntityFrameworkCore inside my ASP.NET MVC Framework application.\r\n\r\nAny guidance or documentation on using the .net core Identity within an existing .net framework asp.net project? Without converting the asp.net mvc project to a .net core project?  I don't want to convert it because too many other libraries are now not able to and simply this takes to much time.\r\n\r\nFull issue described here with more details:\r\nhttps://stackoverflow.com/q/50236246/2901207"},{"Id":"7640581781","Type":"PullRequestEvent","CreatedAt":"2018-05-07T23:32:10","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1780","RelatedDescription":"Merged pull request \"Upgrade to netcoreapp22\" (#1780) at aspnet/Identity","RelatedBody":null},{"Id":"7632226244","Type":"PullRequestEvent","CreatedAt":"2018-05-05T12:52:03","Actor":"DamirAinullin","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1399","RelatedDescription":"Closed pull request \"Fix for couple of obvious typos\" (#1399) at aspnet/Identity","RelatedBody":"Fix for couple of obvious typos."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7646779712","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:52:50","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2555","RelatedDescription":"Merged pull request \"Revert \"Don't touch product repos\"\" (#2555) at aspnet/KestrelHttpServer","RelatedBody":"This reverts commits 8e9f05b90229333981149836b07f27f135f4c8bc, 350310aa96c0382236cf06a4672afd36ddf24267 and 7db465dfc21f62d18045bdc7762a7b395766d62c. They appeared to be working locally and in PR tests, but failed in Update Universe. You can see the failure [here](http://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=464396&_focus=6820).\r\n\r\n```\r\n C:\\b\\w\\21b8702a94f2fbfd\\modules\\KestrelHttpServer\\test\\Kestrel.Transport.Libuv.Tests\\TestHelpers\\MockConnectionDispatcher.cs(24,40): error CS1705: Assembly 'Microsoft.AspNetCore.Server.Kestrel.Core' with identity 'Microsoft.AspNetCore.Server.Kestrel.Core, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'System.Memory, Version=4.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' which has a higher version than referenced assembly 'System.Memory' with identity 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n```"},{"Id":"7646772394","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:50:14","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2557","RelatedDescription":"Opened pull request \"Relieve response backpressure immediately when closing socket\" (#2557) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7646741032","Type":"IssuesEvent","CreatedAt":"2018-05-08T23:39:32","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2556","RelatedDescription":"Opened issue \"Move Kestrel to netcoreapp2.2\" (#2556) at aspnet/KestrelHttpServer","RelatedBody":"We tried to do this before, but had to [revert](https://github.com/aspnet/KestrelHttpServer/pull/2555) because there were package problems with System.Memory."},{"Id":"7646736964","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:38:20","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2555","RelatedDescription":"Opened pull request \"Revert \"Don't touch product repos\"\" (#2555) at aspnet/KestrelHttpServer","RelatedBody":"This reverts commits 8e9f05b90229333981149836b07f27f135f4c8bc, 350310aa96c0382236cf06a4672afd36ddf24267 and 7db465dfc21f62d18045bdc7762a7b395766d62c. They appeared to be working locally and in PR tests, but failed in Update Universe. You can see the failure [here](http://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=464396&_focus=6820).\r\n\r\n```\r\n C:\\b\\w\\21b8702a94f2fbfd\\modules\\KestrelHttpServer\\test\\Kestrel.Transport.Libuv.Tests\\TestHelpers\\MockConnectionDispatcher.cs(24,40): error CS1705: Assembly 'Microsoft.AspNetCore.Server.Kestrel.Core' with identity 'Microsoft.AspNetCore.Server.Kestrel.Core, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'System.Memory, Version=4.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' which has a higher version than referenced assembly 'System.Memory' with identity 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n```"},{"Id":"7646552442","Type":"PullRequestEvent","CreatedAt":"2018-05-08T22:38:22","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2541","RelatedDescription":"Merged pull request \"Upgrade to netcoreapp22\" (#2541) at aspnet/KestrelHttpServer","RelatedBody":null},{"Id":"7645579067","Type":"IssuesEvent","CreatedAt":"2018-05-08T19:04:59","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2554","RelatedDescription":"Opened issue \"An existing connection was forcibly closed by the remote host\" (#2554) at aspnet/KestrelHttpServer","RelatedBody":"_From @sepehr1014 on May 8, 2018 10:25_\n\nUsing ASP.NET Core 2.1 RC1 the process is killed after an hour or so and we see these logs:\r\n\r\n```\r\nApplication: dotnet.exe\r\nCoreCLR Version: 4.6.26426.2\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.AggregateException: One or more errors occurred. (An existing connection was forcibly closed by the remote host) ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.Shutdown(SocketShutdown how)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Shutdown()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.Abort()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.Abort(Exception error)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.Abort(Exception ex)\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletionCallbacks.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\r\n```\r\n\r\n```\r\nFaulting application name: dotnet.exe, version: 2.1.26426.3, time stamp: 0x5ae1770d\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.2189, time stamp: 0x5abdad60\r\nException code: 0xe0434352\r\nFault offset: 0x0000000000033c58\r\nFaulting process id: 0x2e90\r\nFaulting application start time: 0x01d3e6aa48e5f5c6\r\nFaulting application path: C:\\Program Files\\dotnet\\dotnet.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: f10816d3-b0de-49bc-9745-60f9b7dea199\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\nBTW we're using web sockets without SignalR.\n\n_Copied from original issue: aspnet/Home#3125_"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7646786309","Type":"IssuesEvent","CreatedAt":"2018-05-08T23:55:11","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2335","RelatedDescription":"Closed issue \"Make Razor's Workspace lookup logic work with live share\" (#2335) at aspnet/Razor","RelatedBody":"We need to add a way for liveshare to find its own remote workspace."},{"Id":"7646785064","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:54:44","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2338","RelatedDescription":"Merged pull request \"Added a LiveShareWorkspaceProvider to enable location of the remote workspace in live share scenarios.\" (#2338) at aspnet/Razor","RelatedBody":"- MEF is the primary means of resolving the new live share provider therefore we allow it to not be registered.\r\n- The new contract is in the Editor.Razor binary so the LiveShare bits don't have to take the dependency on the windows binary in Razor (has a lot of baggage).\r\n- This is specific to live share but providing a generic way to resolve workspaces didn't seem reasonable given the varying expectations in VS4Mac. If we need to make a more generic solution in the future we'll revisit this; for now this is a straight forward inclusion of live share functionality.\r\n- Added tests to validate the new behavior.\r\n- This unblocks the live share scenario of resolving the remote workspace. We can't rely on the projection buffers to provide the correct workspace because that workspace is wired up too late in the process of opening a Razor file.\r\n\r\n#2335\r\n\r\n@alexgav @ToddGrun If we were able to create and associate the C# projection buffer with the appropriate workspace (the LiveShare remote workspace in the guest scenario) super early in the file opening process then I wouldn't have to do this work. If I recall that's a ton of work on your end but figured I'd cc you here in case I'm misremembering."},{"Id":"7646768381","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:48:47","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2340","RelatedDescription":"Opened pull request \"Made the Visual Studio parser smarter about overlapping reparse requests.\" (#2340) at aspnet/Razor","RelatedBody":"- Prior to this the parser would think that a non-latest reparse request was the latest because the only way we would check to see if a change reference was \"latest\" would be to do an equality check on the snapshot and `SourceChange`; the issue here was that `SourceChange` was null but the snapshots were the same. Problems could arise with this due to project context changes.\r\n- Added tests to validate the new reparse behavior.\r\n- Renamed `Edit` in the `BackgroundParser` to `ChangeReference` also refactored all the \"edit\" text in `BackgroundParser` to be `ChangerReference` like.\r\n- Added a new event args to be the DTO between the internal and external parser implementations. This is how we could pas additional information in order to determine \"latest\" change reference.\r\n\r\n#2336"},{"Id":"7646705670","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:27:52","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2339","RelatedDescription":"Merged pull request \"Reorganize file tracker\" (#2339) at aspnet/Razor","RelatedBody":"This is precursor to a much bigger change. Pushing out some of the\r\nchanges that have broad impact early to make it easier to review the\r\nreal change."},{"Id":"7646660352","Type":"PullRequestEvent","CreatedAt":"2018-05-08T23:11:59","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2339","RelatedDescription":"Opened pull request \"Reorganize file tracker\" (#2339) at aspnet/Razor","RelatedBody":"This is precursor to a much bigger change. Pushing out some of the\r\nchanges that have broad impact early to make it easier to review the\r\nreal change."},{"Id":"7646497325","Type":"PullRequestEvent","CreatedAt":"2018-05-08T22:22:55","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2334","RelatedDescription":"Merged pull request \"Upgrade to netcoreapp22\" (#2334) at aspnet/Razor","RelatedBody":null},{"Id":"7645613276","Type":"PullRequestEvent","CreatedAt":"2018-05-08T19:11:54","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2338","RelatedDescription":"Opened pull request \"Added a LiveShareWorkspaceProvider to enable location of the remote workspace in live share scenarios.\" (#2338) at aspnet/Razor","RelatedBody":"- MEF is the primary means of resolving the new live share provider therefore we allow it to not be registered.\r\n- The new contract is in the Editor.Razor binary so the LiveShare bits don't have to take the dependency on the windows binary in Razor (has a lot of baggage).\r\n- This is specific to live share but providing a generic way to resolve workspaces didn't seem reasonable given the varying expectations in VS4Mac. If we need to make a more generic solution in the future we'll revisit this; for now this is a straight forward inclusion of live share functionality.\r\n- Added tests to validate the new behavior.\r\n- This unblocks the live share scenario of resolving the remote workspace. We can't rely on the projection buffers to provide the correct workspace because that workspace is wired up too late in the process of opening a Razor file.\r\n\r\n#2335\r\n\r\n@alexgav @ToddGrun If we were able to create and associate the C# projection buffer with the appropriate workspace (the LiveShare remote workspace in the guest scenario) super early in the file opening process then I wouldn't have to do this work. If I recall that's a ton of work on your end but figured I'd cc you here in case I'm misremembering."},{"Id":"7644894646","Type":"IssuesEvent","CreatedAt":"2018-05-08T16:49:47","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2305","RelatedDescription":"Closed issue \"IRazorViewEngine can find unsupported pathing formats but then fail to support file change notifications.\" (#2305) at aspnet/Razor","RelatedBody":"_From @KhalilMohammad on April 23, 2018 13:28_\n\nI am converting cshtml to pdf.\r\nI am using IRazorViewEngine.\r\nIRazorViewEngine is picking old view.\r\nDotnet watch does not work for this scenario.\r\nIs there any work around, I have multiple cshtml to work on\n\n_Copied from original issue: aspnet/RazorTooling#121_"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7582805417","Type":"IssuesEvent","CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Opened issue \" Unable to start debugging\" (#1071) at aspnet/Tooling","RelatedBody":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n"},{"Id":"7576035394","Type":"IssuesEvent","CreatedAt":"2018-04-24T05:17:55","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7567897452","Type":"IssuesEvent","CreatedAt":"2018-04-22T14:52:17","Actor":"rberger247","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Opened issue \"Visual studio freezes when I run add-migration \" (#1070) at aspnet/Tooling","RelatedBody":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger."},{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7644982634","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:07:05","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Opened issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Kestrel/issues/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_"},{"Id":"7630948535","Type":"IssuesEvent","CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Opened issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299) at aspnet/Announcements","RelatedBody":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"993841130545426433","CreatedAt":"2018-05-08T13:12:44+00:00","UserScreenname":"aspnet","Text":"Jeff will be pair-programming using @VisualStudio Live Share on an @aspnet Core project with YOU at the Live Share… https://t.co/i0sm9cCOGz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":2,"RawContent":null},{"Id":"991768334419902464","CreatedAt":"2018-05-02T19:56:11+00:00","UserScreenname":"aspnet","Text":"Blazor 0.3.0 experimental release now available\n\nhttps://t.co/2ixEeVbBbN https://t.co/3VB4sDxvwR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":471,"FavoriteCount":266,"RawContent":null},{"Id":"991361559426314241","CreatedAt":"2018-05-01T16:59:49+00:00","UserScreenname":"aspnet","Text":"We're live! Join us at https://t.co/4Ioo9jNSN2 https://t.co/uGAnWHOWD5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":4,"RawContent":null},{"Id":"991092623849865217","CreatedAt":"2018-04-30T23:11:09+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nSignalR and Project Bedrock updates with @davidfowl… https://t.co/B8XmP5YkCW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":76,"FavoriteCount":35,"RawContent":null},{"Id":"989160632908791808","CreatedAt":"2018-04-25T15:14:07+00:00","UserScreenname":"aspnet","Text":"Do you have questions about how to work with ASPNet Core Identity?  Check out the video from yesterday's session wi… https://t.co/hjaoJRCR7l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":14,"RawContent":null},{"Id":"988913487190544384","CreatedAt":"2018-04-24T22:52:03+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988873497614024704","CreatedAt":"2018-04-24T20:13:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/dCyzj19KZU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"988762250331676673","CreatedAt":"2018-04-24T12:51:05+00:00","UserScreenname":"aspnet","Text":"Our @csharpfritz and @coolcsh will be broadcasting LIVE from @ch9 studios and answering your questions today about… https://t.co/d37Sob12rv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":148,"RawContent":null},{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-09T05:30:15.8812004Z","RunDurationInMilliseconds":10988}