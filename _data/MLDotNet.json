{"Data":{"GitHub":{"Issues":[{"Id":"394745106","IsPullRequest":false,"CreatedAt":"2018-12-29T00:49:45","Actor":"daholste","Number":"1985","RawContent":null,"Title":"SymbolicStochasticGradientDescent always prints to console","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRan this code:\r\n```\r\nconst string trainDataPath = @\"C:\\data\\sample_train2.csv\";\r\nconst string validationDataPath = @\"C:\\data\\sample_valid2.csv\";\r\nconst string testDataPath = @\"C:\\data\\sample_test2.csv\";\r\n\r\nvar mlContext = new MLContext();\r\n\r\n// auto-infer text loader args\r\nvar textLoaderArgs = RecipeInference.MyAutoMlInferTextLoaderArguments(mlContext, trainDataPath, \"Label\");\r\n\r\n// load data\r\nvar textLoader = new TextLoader(mlContext,\r\n\tnew TextLoader.Arguments()\r\n\t{\r\n\t\tSeparator = \",\",\r\n\t\tHasHeader = true,\r\n\t\tColumn = new[]\r\n\t\t{\r\n\t\t\tnew TextLoader.Column(\"Age\", DataKind.R4, 0),\r\n\t\t\tnew TextLoader.Column(\"Workclass\", DataKind.TX, 1),\r\n\t\t\tnew TextLoader.Column(\"Fnlwgt\", DataKind.R4, 2),\r\n\t\t\tnew TextLoader.Column(\"Education\", DataKind.TX, 3),\r\n\t\t\tnew TextLoader.Column(\"EducationNum\", DataKind.R4, 4),\r\n\t\t\tnew TextLoader.Column(\"MaritalStatus\", DataKind.TX, 5),\r\n\t\t\tnew TextLoader.Column(\"Occupation\", DataKind.TX, 6),\r\n\t\t\tnew TextLoader.Column(\"Relationship\", DataKind.TX, 7),\r\n\t\t\tnew TextLoader.Column(\"Race\", DataKind.TX, 8),\r\n\t\t\tnew TextLoader.Column(\"Sex\", DataKind.TX, 9),\r\n\t\t\tnew TextLoader.Column(\"CapitalGain\", DataKind.R4, 10),\r\n\t\t\tnew TextLoader.Column(\"CapitalLoss\", DataKind.R4, 11),\r\n\t\t\tnew TextLoader.Column(\"HoursPerWeek\", DataKind.R4, 12),\r\n\t\t\tnew TextLoader.Column(\"NativeCountry\", DataKind.TX, 13),\r\n\t\t\tnew TextLoader.Column(\"Label\", DataKind.Bool, 14),\r\n\t\t}\r\n\t});\r\n\r\nvar trainData = textLoader.Read(trainDataPath);\r\nvar validationData = textLoader.Read(validationDataPath);\r\nvar testData = textLoader.Read(testDataPath);\r\n\r\n// preprocess\r\nvar preprocessorEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"Workclass\", \"Workclass\")\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Education\", \"Education\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"MaritalStatus\", \"MaritalStatus\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Occupation\", \"Occupation\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Relationship\", \"Relationship\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Race\", \"Race\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Sex\", \"Sex\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"NativeCountry\", \"NativeCountry\"))\r\n\t.Append(mlContext.Transforms.Concatenate(DefaultColumnNames.Features,\r\n\t\t\"Age\", \"Workclass\", \"Fnlwgt\", \"Education\", \"EducationNum\", \"MaritalStatus\", \"Occupation\", \"Relationship\",\r\n\t\t\"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"NativeCountry\"));\r\n\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.SymbolicStochasticGradientDescent();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n- **What happened?**\r\n```\r\nInitial learning rate is tuned to 10.000000\r\n```\r\nwas printed to the console. Looks like SymSGD learner w/ no initialization params always prints this line?\r\n\r\n- **What did you expect?**\r\nNothing to be printed to the console","Url":"https://github.com/dotnet/machinelearning/issues/1985","RelatedDescription":"Open issue \"SymbolicStochasticGradientDescent always prints to console\" (#1985)"},{"Id":"394743280","IsPullRequest":false,"CreatedAt":"2018-12-29T00:28:41","Actor":"daholste","Number":"1984","RawContent":null,"Title":"LinearSupportVectorMachines trainer not working","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n**Setup code**\r\n```\r\nconst string trainDataPath = @\"C:\\data\\sample_train2.csv\";\r\nconst string validationDataPath = @\"C:\\data\\sample_valid2.csv\";\r\nconst string testDataPath = @\"C:\\data\\sample_test2.csv\";\r\n\r\nvar mlContext = new MLContext();\r\n\r\n// auto-infer text loader args\r\nvar textLoaderArgs = RecipeInference.MyAutoMlInferTextLoaderArguments(mlContext, trainDataPath, \"Label\");\r\n\r\n// load data\r\nvar textLoader = new TextLoader(mlContext,\r\n\tnew TextLoader.Arguments()\r\n\t{\r\n\t\tSeparator = \",\",\r\n\t\tHasHeader = true,\r\n\t\tColumn = new[]\r\n\t\t{\r\n\t\t\tnew TextLoader.Column(\"Age\", DataKind.R4, 0),\r\n\t\t\tnew TextLoader.Column(\"Workclass\", DataKind.TX, 1),\r\n\t\t\tnew TextLoader.Column(\"Fnlwgt\", DataKind.R4, 2),\r\n\t\t\tnew TextLoader.Column(\"Education\", DataKind.TX, 3),\r\n\t\t\tnew TextLoader.Column(\"EducationNum\", DataKind.R4, 4),\r\n\t\t\tnew TextLoader.Column(\"MaritalStatus\", DataKind.TX, 5),\r\n\t\t\tnew TextLoader.Column(\"Occupation\", DataKind.TX, 6),\r\n\t\t\tnew TextLoader.Column(\"Relationship\", DataKind.TX, 7),\r\n\t\t\tnew TextLoader.Column(\"Race\", DataKind.TX, 8),\r\n\t\t\tnew TextLoader.Column(\"Sex\", DataKind.TX, 9),\r\n\t\t\tnew TextLoader.Column(\"CapitalGain\", DataKind.R4, 10),\r\n\t\t\tnew TextLoader.Column(\"CapitalLoss\", DataKind.R4, 11),\r\n\t\t\tnew TextLoader.Column(\"HoursPerWeek\", DataKind.R4, 12),\r\n\t\t\tnew TextLoader.Column(\"NativeCountry\", DataKind.TX, 13),\r\n\t\t\tnew TextLoader.Column(\"Label\", DataKind.Bool, 14),\r\n\t\t}\r\n\t});\r\n\r\nvar trainData = textLoader.Read(trainDataPath);\r\nvar validationData = textLoader.Read(validationDataPath);\r\nvar testData = textLoader.Read(testDataPath);\r\n\r\n// preprocess\r\nvar preprocessorEstimator = mlContext.Transforms.Categorical.OneHotEncoding(\"Workclass\", \"Workclass\")\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Education\", \"Education\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"MaritalStatus\", \"MaritalStatus\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Occupation\", \"Occupation\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Relationship\", \"Relationship\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Race\", \"Race\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"Sex\", \"Sex\"))\r\n\t.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"NativeCountry\", \"NativeCountry\"))\r\n\t.Append(mlContext.Transforms.Concatenate(DefaultColumnNames.Features,\r\n\t\t\"Age\", \"Workclass\", \"Fnlwgt\", \"Education\", \"EducationNum\", \"MaritalStatus\", \"Occupation\", \"Relationship\",\r\n\t\t\"Race\", \"Sex\", \"CapitalGain\", \"CapitalLoss\", \"HoursPerWeek\", \"NativeCountry\"));\r\n```\r\n\r\n**Code that worked**\r\n```\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.StochasticDualCoordinateAscent();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n**Code that didn't work**\r\n```\r\n// train model\r\nvar trainer = mlContext.BinaryClassification.Trainers.LinearSupportVectorMachines();\r\nvar estimatorChain = preprocessorEstimator.Append(trainer);\r\nvar model = estimatorChain.Fit(trainData);\r\n```\r\n\r\n**Exception**\r\nSystem.InvalidOperationException: 'Weight column 'Weight' is not found'","Url":"https://github.com/dotnet/machinelearning/issues/1984","RelatedDescription":"Open issue \"LinearSupportVectorMachines trainer not working\" (#1984)"},{"Id":"394742731","IsPullRequest":false,"CreatedAt":"2018-12-29T00:22:05","Actor":"daholste","Number":"1983","RawContent":null,"Title":"FastTree LearningRate not settable thru arguments object","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\n```\r\n            Action<FastTreeBinaryClassificationTrainer.Arguments> argsFunc = (args) =>\r\n            {\r\n                args.LearningRates = 0.1;\r\n            };\r\n            var trainer = mlContext.BinaryClassification.Trainers.FastTree(advancedSettings: argsFunc);\r\n```\r\n- **What happened?**\r\ntrainer.Args.LearningRate = the default learning rate of 0.2\r\n\r\n- **What did you expect?**\r\ntrainer.Args.LearningRate = 0.1\r\n\r\nI think this happens because \r\n```\r\nif (Args.LearningRates != learningRate)\r\n            {\r\n                using (var ch = Host.Start($\"Setting learning rate to: {learningRate} as supplied in the direct arguments.\"))\r\n                    Args.LearningRates = learningRate;\r\n            }\r\n```\r\nin BoostingFastTree.cs","Url":"https://github.com/dotnet/machinelearning/issues/1983","RelatedDescription":"Open issue \"FastTree LearningRate not settable thru arguments object\" (#1983)"},{"Id":"394733229","IsPullRequest":false,"CreatedAt":"2018-12-28T22:47:06","Actor":"yaeldekel","Number":"1982","RawContent":null,"Title":"NGramHashingTransformer cannot read old models","State":"open","Body":"The serialization version was recently incremented, but we should be able to load old models using SignatureLoadDataTransform.","Url":"https://github.com/dotnet/machinelearning/issues/1982","RelatedDescription":"Open issue \"NGramHashingTransformer cannot read old models\" (#1982)"},{"Id":"394675873","IsPullRequest":false,"CreatedAt":"2018-12-28T16:43:45","Actor":"sakopov12","Number":"1981","RawContent":null,"Title":"Is \"mlContext.Transforms.Conversion.MapKeyToValue\" call supported in 0.8 version?","State":"open","Body":"Hello,\r\n\r\nI have installed the 0.8 version, and can see that mlContext.Transforms.Conversion.MapKeyToValue() gives me compiler error. What would be the alternative call?\r\n\r\nThank you.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1981","RelatedDescription":"Open issue \"Is \"mlContext.Transforms.Conversion.MapKeyToValue\" call supported in 0.8 version?\" (#1981)"},{"Id":"394645400","IsPullRequest":false,"CreatedAt":"2018-12-28T14:11:35","Actor":"MagicMaxxx","Number":"1980","RawContent":null,"Title":"Missing Values (from a CSV file) and how TextLoader processes them","State":"open","Body":"### System information\r\n- **OS version/distro**:\r\nWindows 10 Home\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Core 2.1.5\r\nML.NET 0.8\r\n\r\n### Issue\r\nWhen I read the Titanic data set from Kaggle and TextLoader reads missing numeric values as ZEROES. \r\n\r\n- **What did you do?**\r\nI removed a data from AGE column and I tried to use context.Transforms.IndicateMissingValues and/or context.Transforms.ReplaceMissingValues in order to process the missing values but got no luck as TextLoader processes empty/missing values as ZEROES so there are no NaN values in the Data View processed by IndicateMissingValues/ReplaceMissingValues \r\n\r\n- **What happened?**\r\nData sample:\r\n\r\nPassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked\r\n1,0,3,\"Braund, Mr. Owen Harris\",male,,1,0,A/5 21171,7.25,,S\r\nTake a look - there is no age (it goes after \"male\") but TextLoader reads the data like that passenger's age == 0\r\n\r\n- **What did you expect?**\r\nI expected to see something like NaN or similar value in the data when there is an empty space in the file in the cell/position related to the related portion of the data\r\n\r\n### Source code / logs\r\nHere is how I create the TextLoader, BTW when I use AllowQuoting = false it can't read names even if I use Separator = \",\" - it uses \" \" (the very first space in the name) as a separator\r\n            return context.Data.TextReader(new TextLoader.Arguments()\r\n            {\r\n                HasHeader = true, Separator = \",\", TrimWhitespace = true, AllowSparse = false, AllowQuoting = true, \r\n                Column = [...columns array...]\r\n            });\r\nI'd prefer to have some kind of one more settings for the TextLoader - something like NanIfEmpty (?) true/false\r\n\r\nThank you!\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1980","RelatedDescription":"Open issue \"Missing Values (from a CSV file) and how TextLoader processes them\" (#1980)"},{"Id":"394559743","IsPullRequest":true,"CreatedAt":"2018-12-28T06:32:58","Actor":"sfilipi","Number":"1979","RawContent":null,"Title":"making GetCoefficientStatistics public","State":"open","Body":"Fixes #1977 by making method GetCoefficientStatistics  public. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1979","RelatedDescription":"Open PR \"making GetCoefficientStatistics public\" (#1979)"},{"Id":"394552966","IsPullRequest":false,"CreatedAt":"2018-12-28T05:45:36","Actor":"sfilipi","Number":"1978","RawContent":null,"Title":"KeyToValueMappingTransformer need to expose the key-value map","State":"open","Body":"The key-value map is useful to some scenarios: like in multi-class it is needed to interpreting the scores for each label. ","Url":"https://github.com/dotnet/machinelearning/issues/1978","RelatedDescription":"Open issue \"KeyToValueMappingTransformer need to expose the key-value map\" (#1978)"},{"Id":"394549347","IsPullRequest":false,"CreatedAt":"2018-12-28T05:16:27","Actor":"sfilipi","Number":"1977","RawContent":null,"Title":"GetCoefficientStatistics in Microsoft.ML.Learners.LinearModelStatistics  needs to be public","State":"open","Body":"[GetCoefficientStatistics](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/ModelStatistics.cs#L327) in Microsoft.ML.Learners.LinearModelStatistics  needs to be publicly accessible. \r\n\r\nThe statistics calculated provide no value, if they can't be accessed. ","Url":"https://github.com/dotnet/machinelearning/issues/1977","RelatedDescription":"Open issue \"GetCoefficientStatistics in Microsoft.ML.Learners.LinearModelStatistics  needs to be public\" (#1977)"},{"Id":"394518639","IsPullRequest":false,"CreatedAt":"2018-12-28T00:43:43","Actor":"TomFinley","Number":"1976","RawContent":null,"Title":"EvaluatorBase and IEvaluator internalization","State":"open","Body":"We should consider internalizing `IEvaluator` and all implementations of it. The reason we might be able to do so is that while the code to do evaluation must exist somewhere, we are currently exposing the way we compute metrics via `MLContext`, as we see here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Data/TrainContext.cs#L232\r\n\r\nSo it is not clear to me that `IEvaluator` needs to be part of our public API.\r\n\r\nIf this for some reason proves impractical for reasons I do not appreciate yet, we must then refactor the evaluators so that they are engineered so that they expose fewer of their guts for everyone to see. For example:\r\n\r\n`public sealed class AnomalyDetectionEvaluator : EvaluatorBase<AnomalyDetectionEvaluator.Aggregator>`\r\n\r\nThat we might have an `IEvaluator` and a convenience class is fine, but the generic parameter describes something that the user should not need to know about, e.g., how it collates and computes the metrics.","Url":"https://github.com/dotnet/machinelearning/issues/1976","RelatedDescription":"Open issue \"EvaluatorBase and IEvaluator internalization\" (#1976)"},{"Id":"394514239","IsPullRequest":true,"CreatedAt":"2018-12-28T00:07:17","Actor":"sfilipi","Number":"1975","RawContent":null,"Title":"[VERY WIP ]Initial refactor to swap the predicates for an IEnumerable<Schema.Columns> in the GetRowCursor and GetRowCursorSet","State":"open","Body":"Addresses #1529 by swapping the predicates for IEnumerable<Schema.Columns> in the GetRowCursor and GetRowCursorSet\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1975","RelatedDescription":"Open PR \"[VERY WIP ]Initial refactor to swap the predicates for an IEnumerable<Schema.Columns> in the GetRowCursor and GetRowCursorSet\" (#1975)"},{"Id":"394509272","IsPullRequest":false,"CreatedAt":"2018-12-27T23:26:52","Actor":"TomFinley","Number":"1974","RawContent":null,"Title":"Internalize signature delegates","State":"open","Body":"We have these \"signature\" delegates throughout the codebase, used for purposes of entry-points and other dependency injection style things.\r\n\r\nMany are public, as we see here.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Data/Dirty/ILoss.cs#L49\r\n\r\nYet there is no need for them to be public, and many of these have already been \"internalized,\" e.g.:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Core/Prediction/ITrainer.cs#L20\r\n\r\nWe should complete this work, since we do not want these as part of the public surface of the API.","Url":"https://github.com/dotnet/machinelearning/issues/1974","RelatedDescription":"Open issue \"Internalize signature delegates\" (#1974)"},{"Id":"394505225","IsPullRequest":false,"CreatedAt":"2018-12-27T22:56:47","Actor":"TomFinley","Number":"1973","RawContent":null,"Title":"TlcModule.ComponentKind and the curse of the empty interfaces","State":"open","Body":"Consider this attribute class:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Core/EntryPoints/ModuleArgs.cs#L82\r\n\r\nIt *looks* harmless enough, but kind of isn't. It exists, as far as I can tell, to give some sort of \"name\" to various types of entry-point nodes. These mostly serve to decorate specific `IComponentFactory` subinterfaces. However, because we need to attach this attribute to a definite type, we have the following implication: that we've littered our codebase with a bunch of interfaces as subinterfaces of `IComponentFactory`, and these exist only so we can attach attributes to them. To take just one example:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.Data/Utils/LossFunctions.cs#L84-L87\r\n\r\nThat's fairly obnoxious. From an API user's perspective, this represents a completely pointless complication -- all an API user really wants to do is be able to set a loss function. But because we have this other \"entry point\" thing we also have to work through this generic way to create subcomponents (this `IComponentFactory` thing, which is subideal but possibly OK), but then because we also wanted to attach an attribute to this \"type\" of set of component factories which we did through attributes on the type, which required creating this empty interface that otherwise has no reason to exist -- etc., etc. Anyway, we see that things have piled up.\r\n\r\nWhat I might like instead is the following:\r\n\r\n1. In all cases, never exposing the empty `IComponentFactory` derived empty interfaces that exist just for the sake of this attribute never be publicly accessible.\r\n\r\n2. Ideally have some alternative for entry-points that does not intersect with the public surface of the API in such a visible way. I am having difficulty with suggesting a specific course here, since I am having difficulty finding anyone that knows why this attribute was introduced in the first place, or how it is used in entry-points. (Though, it seems *to* be used.)\r\n\r\n3. Where possibly and reasonable, replace the public surface of the API of `IComponentFactory<Foo>` with ` Foo` directly. As seen above for the case of loss functions, there is no reason not to do this. Indeed, in some places we have done this, which is good:\r\n\r\n   https://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.StaticPipe/SdcaStaticExtensions.cs#L170\r\n\r\n   Yet there are too many places in the code where we have not, e.g., here:\r\n   https://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs#L42\r\n   or here:\r\n \r\n \r\n https://github.com/dotnet/machinelearning/blob/7e21afa4612ddca53bbf9d67b84df2b58d4636c2/src/Microsoft.ML.StandardLearners/Standard/SdcaBinary.cs#L1600\r\n\r\n   The reasons for this are somewhat historical, in that we had the attitude for a while that the statically typed API would be the public face, but if the dynamic API is to be the public face then it should be a little less terrible than it is now.","Url":"https://github.com/dotnet/machinelearning/issues/1973","RelatedDescription":"Open issue \"TlcModule.ComponentKind and the curse of the empty interfaces\" (#1973)"},{"Id":"394479115","IsPullRequest":true,"CreatedAt":"2018-12-27T20:11:31","Actor":"jignparm","Number":"1972","RawContent":null,"Title":"[WIP] Jignparm/onnxtransform Linux support","State":"open","Body":"Test out OnnxTransform Linux support","Url":"https://github.com/dotnet/machinelearning/pull/1972","RelatedDescription":"Open PR \"[WIP] Jignparm/onnxtransform Linux support\" (#1972)"},{"Id":"394343767","IsPullRequest":true,"CreatedAt":"2018-12-27T09:31:31","Actor":"codemzs","Number":"1971","RawContent":null,"Title":"WIP End of an era - Delete Microsoft.ML.Legacy and related tests.","State":"open","Body":"I still need to remove all those baseline files that are no longer used and then document all the tests that may need to be re-written using the new API such as ONNX converter test and FSharp test. In the end I want to compare how much the code coverage has changed between this change and master. \r\n\r\nCC: @TomFinley, @sfilipi ","Url":"https://github.com/dotnet/machinelearning/pull/1971","RelatedDescription":"Open PR \"WIP End of an era - Delete Microsoft.ML.Legacy and related tests.\" (#1971)"},{"Id":"394242765","IsPullRequest":false,"CreatedAt":"2018-12-26T22:51:34","Actor":"djary","Number":"1970","RawContent":null,"Title":"wikipedia-detox-250-line-data.tsv: Unclosed quoted field on line 83.","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/master/test/data/wikipedia-detox-250-line-data.tsv\r\n\r\nWe can make this file beautiful and searchable if this error is corrected: Unclosed quoted field on line 83.\r\npls fixit","Url":"https://github.com/dotnet/machinelearning/issues/1970","RelatedDescription":"Closed issue \"wikipedia-detox-250-line-data.tsv: Unclosed quoted field on line 83.\" (#1970)"},{"Id":"394237956","IsPullRequest":false,"CreatedAt":"2018-12-26T20:41:53","Actor":"daholste","Number":"1969","RawContent":null,"Title":"MetaMulticlassTrainer throws an exception when used in an estimator chain","State":"open","Body":"### Issue\r\n\r\nSetup code:\r\n```\r\n            // load data from disk\r\n            var textLoader = new TextLoader(mlContext, new TextLoader.Arguments()\r\n                {\r\n                    Separator = \",\",\r\n                    HasHeader = true,\r\n                    Column = new[]\r\n                        {\r\n                            new TextLoader.Column(\"Label\", DataKind.R4, 0),\r\n                            new TextLoader.Column(\"Features\", DataKind.R4, 1, 784),\r\n                        }\r\n                });\r\n```\r\n\r\nCode that succeeds:\r\n```\r\n            var apTrainer = mlContext.BinaryClassification.Trainers.AveragedPerceptron();\r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(apTrainer);\r\n            var model1 = trainer.Fit(testData);\r\n```\r\n\r\nCode for a dummy estimator chain that fails:\r\n```\r\n            IEstimator<ITransformer> pipeline = new EstimatorChain<ITransformer>();\r\n            pipeline = pipeline.Append(trainer);\r\n            var model2 = pipeline.Fit(trainData);\r\n```\r\n\r\nThis fails b/c of \r\n```\r\nLabelColumn = new SchemaShape.Column(labelColumn, SchemaShape.Column.VectorKind.Scalar, NumberType.U4, true);\r\n```\r\nin the MetaMulticlassTrainer class, which expects label column to be U4, not R4.\r\n\r\nIf I try to fix by changing the data type of Label column to U4, the code that used to succeed fails with the exception:\r\n```\r\nSystem.ArgumentOutOfRangeException: 'Training label column 'Label' type is not valid for multi-class: U4. Type must be R4 or R8.'\r\n```\r\nin TrainerUtils.CheckMultiClassLabel","Url":"https://github.com/dotnet/machinelearning/issues/1969","RelatedDescription":"Open issue \"MetaMulticlassTrainer throws an exception when used in an estimator chain\" (#1969)"},{"Id":"394201957","IsPullRequest":false,"CreatedAt":"2018-12-26T20:33:37","Actor":"kinosang","Number":"1968","RawContent":null,"Title":"Could not find input column 'MovieID'","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Mac\r\n- **.NET Version (eg., dotnet --info)**: 2.2.100, ML 0.8.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI modified the official e2e MovieRecommender model training program to build a genres-based recommender.\r\n- **What happened?**\r\nIn step 7 Try/test a single prediction by predicting a single movie rating for a specific user, it throw an `ArgumentOutOfRangeException:  Could not find input column 'MovieId'`\r\n\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nCodes:\r\n```\r\n//STEP 2: Create a reader by defining the schema for reading the gallery recommendation datasets\r\nvar reader = ctx.Data.TextReader(new TextLoader.Arguments\r\n{\r\n    // Separator = \"comma\",\r\n    // HasHeader = true,\r\n    Column = new[]\r\n    {\r\n        new TextLoader.Column(\"UserId\", DataKind.Text, 0),\r\n        new TextLoader.Column(\"MovieID\", DataKind.Text, 1),\r\n        new TextLoader.Column(\"Title\", DataKind.Text, 2),\r\n        new TextLoader.Column(\"Genres\", DataKind.Text, 3),\r\n        new TextLoader.Column(\"Rating\", DataKind.Bool, 4)\r\n    }\r\n});\r\n\r\n......\r\n\r\n//STEP 4: Transform your data by encoding the two features userId and movieId. \r\n//        These encoded features will be provided as input to FieldAwareFactorizationMachine learner\r\nvar pipeline = ctx.Transforms.Categorical.OneHotEncoding(\"UserId\", \"UserIdEncoded\")\r\n    .Append(ctx.Transforms.Categorical.OneHotEncoding(\"MovieID\", \"MovieIDEncoded\")\r\n        .Append(ctx.Transforms.Text.TokenizeWords(\"Genres\", \"GenresTokens\", new[] {'|'})\r\n            .Append(ctx.Transforms.Text.ExtractWordEmbeddings(\"GenresTokens\", \"GenresEmbeddings\",\r\n                    WordEmbeddingsExtractingTransformer.PretrainedModelKind.GloVeTwitter25D)\r\n                .Append(ctx.Transforms.Concatenate(\"Features\", \"UserIdEncoded\", \"MovieIDEncoded\",\r\n                    \"GenresEmbeddings\"))\r\n                .Append(ctx.BinaryClassification.Trainers.FieldAwareFactorizationMachine(\r\n                    labelColumn: \"Rating\",\r\n                    featureColumns: new[]\r\n                    {\r\n                        \"Features\"\r\n                    })\r\n                ))));\r\n\r\n......\r\n\r\n//STEP 7:  Try/test a single prediction by predicting a single movie rating for a specific user\r\nvar predictionengine = model.MakePredictionFunction<TrainingData, RatingPrediction>(ctx); // line 76\r\nvar movieratingprediction = predictionengine.Predict(\r\n    new TrainingData\r\n    {\r\n        //Example rating prediction for userId = 6, movieId = 10 (GoldenEye)\r\n        UserId = \"6\",\r\n        MovieId = \"17\"\r\n    }\r\n);\r\n\r\n......\r\npublic class TrainingData\r\n{\r\n    public string UserId;\r\n\r\n    public string MovieId;\r\n\r\n    public string Title;\r\n\r\n    public string Genres;\r\n\r\n    public float Rating;\r\n\r\n    public string Timestamp;\r\n}\r\n```\r\n\r\nLogs:\r\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Could not find input column 'MovieId'\r\nParameter name: inputSchema\r\n   at Microsoft.ML.Runtime.Data.OneToOneTransformerBase.CheckInput(ISchema inputSchema, Int32 col, Int32& srcCol)\r\n   at Microsoft.ML.Runtime.Data.OneToOneTransformerBase.OneToOneMapperBase..ctor(IHost host, OneToOneTransformerBase parent, Schema inputSchema)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Mapper..ctor(WordTokenizingTransformer parent, Schema inputSchema)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.MakeRowMapper(Schema schema)\r\n   at Microsoft.ML.Runtime.Data.RowToRowTransformerBase.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Runtime.Api.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Api.ComponentCreation.CreatePredictionEngine[TSrc,TDst](IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunction`2..ctor(IHostEnvironment env, ITransformer transformer)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunctionExtensions.MakePredictionFunction[TSrc,TDst](ITransformer transformer, IHostEnvironment env)\r\n   at model.Program.Main(String[] args) in Program.cs:line 76\r\n```\r\n\r\nI've set breakpoint on OneToOneTransformerBase line 77\r\nhttps://github.com/dotnet/machinelearning/blob/51ea627fbc618120c7d63ab984b1b13c6d80b4a0/src/Microsoft.ML.Data/Transforms/OneToOneTransformerBase.cs#L77\r\n\r\nand I got this\r\n![](https://i.imgur.com/BED6j2R.jpg)\r\n\r\nI also tried to change the order of the transforms in pipeline, for e.g. `TokenizeWords(\"Genres\", balabala)` - `ExtractWordEmbeddings(\"GenresTokens\", balabala)` - `OneHotEncoding(\"UserId\", balabala)` - `OneHotEncoding(\"MovieID\", balabala)`, it still raises the ArgumentOutOfRangeException but shows different message (in this order the message is ` Could not find input column 'Genres'`).","Url":"https://github.com/dotnet/machinelearning/issues/1968","RelatedDescription":"Closed issue \"Could not find input column 'MovieID'\" (#1968)"},{"Id":"393795119","IsPullRequest":true,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1963","RawContent":null,"Title":"Sort namespaces as per stylecop rules/.net convention and remove unused namespaces from source files.","State":"closed","Body":"Sorts namespaces as per stylecop rules/.net convention and removes unused namespaces from source files. Standardizes namespace to be always sorted as per .NET convention in source files.\r\n\r\nMy impressions after doing this change:\r\n1) There is decent amount of code under IF DEFs that seems dead and should be removed, example: \r\nIn IntArray.cs\r\n#if USE_SINGLE_PRECISION\r\n    using FloatType = System.Single;\r\n#else\r\n    using FloatType = System.Double;\r\n#endif\r\n\r\nUSE_SINGLE_PRECISION is not defined anywhere and FloatType is not at all used anywhere in the file. We should consider opening an issue to do this sort of clean up. There are many such examples.\r\n\r\n2) Consider removing Float and use float directly.   \r\n\r\nCC: @TomFinley \r\n\r\nfixes #1961\r\nfixes #1962","Url":"https://github.com/dotnet/machinelearning/pull/1963","RelatedDescription":"Closed or merged PR \"Sort namespaces as per stylecop rules/.net convention and remove unused namespaces from source files.\" (#1963)"},{"Id":"393792668","IsPullRequest":false,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1962","RawContent":null,"Title":"Remove unused namespaces in source files.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1962","RelatedDescription":"Closed issue \"Remove unused namespaces in source files.\" (#1962)"},{"Id":"393791680","IsPullRequest":false,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1961","RawContent":null,"Title":"Sort namespaces in source files as per Microsoft .NET convention","State":"closed","Body":"Parent issue #1697 \r\n\r\nStyleCop rules:\r\n**SA1210:** Using directives must be ordered alphabetically by namespace.\r\n**SA1208:** System using directives must be placed before other using directives.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1961","RelatedDescription":"Closed issue \"Sort namespaces in source files as per Microsoft .NET convention\" (#1961)"},{"Id":"393929556","IsPullRequest":false,"CreatedAt":"2018-12-24T20:55:13","Actor":"Anipik","Number":"1967","RawContent":null,"Title":"ML.net build failing with Visual Studio 2019  Version 16.0","State":"open","Body":"I just rebooted my machine. So while setting up the visual studio, I installed the latest Visual Studio 2019.\r\nThe visual studio version for this 16.0\r\n\r\nSo when I try to build the repo, I get an error as \r\n``` Error: Visual Studio 2015 or 2017 required.```\r\n\r\nMy guess is that the problem is here \r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Native/build.cmd#L48\r\n\r\nThis check fails as the value of the version is 16.0\r\n\r\nI changed this line to \r\n```if %VisualStudioVersion% geq 15.0 (```\r\n\r\nand the build works fine then.\r\n\r\nis this an appropriate fix and anything else also needs to be done here ?\r\n\r\ncc @danmosemsft @safern @eerhardt @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1967","RelatedDescription":"Open issue \"ML.net build failing with Visual Studio 2019  Version 16.0\" (#1967)"},{"Id":"393798939","IsPullRequest":true,"CreatedAt":"2018-12-24T07:39:21","Actor":"codemzs","Number":"1966","RawContent":null,"Title":"Remove Runtime in namespace from docs folder.","State":"closed","Body":"fixes #1965","Url":"https://github.com/dotnet/machinelearning/pull/1966","RelatedDescription":"Closed or merged PR \"Remove Runtime in namespace from docs folder.\" (#1966)"},{"Id":"393798905","IsPullRequest":false,"CreatedAt":"2018-12-24T07:39:20","Actor":"codemzs","Number":"1965","RawContent":null,"Title":"Remove Runtime in namespace from docs folder","State":"closed","Body":"Followup from #1697 for the documents specifically.","Url":"https://github.com/dotnet/machinelearning/issues/1965","RelatedDescription":"Closed issue \"Remove Runtime in namespace from docs folder\" (#1965)"},{"Id":"393795576","IsPullRequest":false,"CreatedAt":"2018-12-24T01:46:08","Actor":"justinormont","Number":"1964","RawContent":null,"Title":"Remove `runtime` namespace from example code","State":"open","Body":"In #1956, we removed `runtime` from the namespaces. \r\n\r\nNow we have to update the example code.\r\n\r\nFor example, we moved:\r\n* `Microsoft.ML.Runtime.Data` to `Microsoft.ML.Data`\r\n* `Microsoft.ML.Runtime.TimeSeriesProcessing` to `using Microsoft.ML.TimeSeriesProcessing`\r\n* `Microsoft.ML.Runtime.Learners` to `Microsoft.ML.Learners`\r\n\r\ncc: @JRAlexander, @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/1964","RelatedDescription":"Open issue \"Remove `runtime` namespace from example code\" (#1964)"},{"Id":"393644306","IsPullRequest":true,"CreatedAt":"2018-12-23T18:53:16","Actor":"codemzs","Number":"1956","RawContent":null,"Title":"Remove \"Runtime\" from all namespaces.","State":"closed","Body":"Partially fixes #1697 by removing \"Runtime\" from all namespaces and that is it, no moving classes to other namespaces.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1956","RelatedDescription":"Closed or merged PR \"Remove \"Runtime\" from all namespaces.\" (#1956)"},{"Id":"393761428","IsPullRequest":false,"CreatedAt":"2018-12-23T16:08:54","Actor":"TomFinley","Number":"1960","RawContent":null,"Title":"Make FastTree/LightGBM learned model suitable for public consumption","State":"open","Body":"Related to #1901. Regarding FastTree/LightGBM we may want to refine the public prediction/learned model surface a bit more.\r\n\r\nThe structures exposed here, including [`TreeEnsemble`](https://github.com/dotnet/machinelearning/blob/00577c06ff99ad07006ca8c58cf974943cb1971f/src/Microsoft.ML.FastTree/TreeEnsemble/TreeEnsemble.cs#L21) but especially [`RegressionTree`](https://github.com/dotnet/machinelearning/blob/00577c06ff99ad07006ca8c58cf974943cb1971f/src/Microsoft.ML.FastTree/TreeEnsemble/RegressionTree.cs#L22), are dual use structures in the sense that they are used for both training and prediction. This means it is irretreivably mutable (as it must be during training) even during prediction. It is polymorphic in its structure, in the sense that various structures are active and populated during training than are used during prediction -- worse, in some cases the *same* structures are used, but have distinct meanings. (E.g., the feature indices during training are distinct from those used during prediction, since if FastTree determines it can only use a subset of features, it will during training not even consider the unusable features to exist, until it is done with training and maps the structure back to the original feature space so it is usable by ML.NET.) There are other serious but (in context) comparatively minor notes, like not being either sealed or abstract, disobeying more .NET naming and implementation guidelines than I care to enumerate, etc.\r\n\r\nYet, we cannot avoid exposing *some* structure, since of course people want to inspect the trees they have learnt. And, we use this structure to represent the trained ensembles of both the FastTree and LightGBM learner, and, if we ever clean up our XGBoost wrapper so it can be open sourced (or, perhaps even, someone implements a fresh wrapper for us), maybe it will wind up using exactly that same structure. This will also serve them better since this class's structure is, for the same reasons enumerated above, incomprehensible, since about half the members on it are things people shouldn't use. (Since they are used as explained above exclusively during training.)\r\n\r\nWhat should be done instead is the following: during training there is an internal class, in fact, probably more or less the same class that exists now, with a separate *immutable* class that is exposed as the model during training, created out of instances of this class. This also implies a separate training/prediction structure of what is currently called `TreeEnsemble`, and of course the quantile trees will have to be fashioned in some way. Much of the code supporting prediction and the standard ML.NET interfaces would move into *that* set of immutable classes.","Url":"https://github.com/dotnet/machinelearning/issues/1960","RelatedDescription":"Open issue \"Make FastTree/LightGBM learned model suitable for public consumption\" (#1960)"},{"Id":"393694338","IsPullRequest":false,"CreatedAt":"2018-12-22T18:35:09","Actor":"ganik","Number":"1959","RawContent":null,"Title":" internal static partial class Utils is not accessible anymore from NimbusML","State":"open","Body":"This is a breaking changes in ML.NET 0.8 or later for NimbusML\r\nPls advise\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1959","RelatedDescription":"Open issue \" internal static partial class Utils is not accessible anymore from NimbusML\" (#1959)"},{"Id":"393693702","IsPullRequest":false,"CreatedAt":"2018-12-22T18:25:16","Actor":"ganik","Number":"1958","RawContent":null,"Title":"ArgumentAttribute is inaccessible due to its protection level from NimbusML","State":"open","Body":"ML.Runtime.CommandLine.ArgumentAttribute is inaccessible anymore from NimbusML. \r\nPlease advise how to proceed\r\n\r\nthx","Url":"https://github.com/dotnet/machinelearning/issues/1958","RelatedDescription":"Open issue \"ArgumentAttribute is inaccessible due to its protection level from NimbusML\" (#1958)"},{"Id":"393693371","IsPullRequest":false,"CreatedAt":"2018-12-22T18:20:51","Actor":"ganik","Number":"1957","RawContent":null,"Title":"Contracts is internal and inaccessible from NimbusML","State":"open","Body":"NimbusML has DotNetBridge that uses Microsoft.ML.Runtime.Contracts(..) throughout its code base. Now its not possible due to Contracts being internal. \r\nPlease advise how to proceed.","Url":"https://github.com/dotnet/machinelearning/issues/1957","RelatedDescription":"Open issue \"Contracts is internal and inaccessible from NimbusML\" (#1957)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-29T05:30:49.1916272Z","RunDurationInMilliseconds":1220}