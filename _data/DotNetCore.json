{"Data":{"Blog":{"FeedItems":[{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3734","PublishedOn":"2019-01-29T00:30:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are getting closer to the final version now! This release includes several accessibility, performance and reliability fixes across the major framework libraries. We will continue to stabilize this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/announcing-net-framework-4-8-early-access-build-3734/","RawContent":null},{"Title":"Help us plan the future of .NET and Big Data","PublishedOn":"2019-01-28T22:05:15+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We’re currently looking into how we can make .NET great for Big Data scenarios.    Please fill out the survey below and help shape how we can improve .NET for Big Data by sharing your experiences,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/28/help-us-plan-the-future-of-net-and-big-data/","RawContent":null},{"Title":"Debugging .NET Apps with Time Travel Debugging (TTD)","PublishedOn":"2019-01-25T19:32:21+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"When you are debugging an application, there are many tools and techniques you can use, like logs, memory dumps and Event Tracing for Windows (ETW). In this post, we will talk about Time Travel...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/25/debugging-net-apps-with-time-travel-debugging-ttd/","RawContent":null},{"Title":".NET and TypeScript at FOSDEM 2019","PublishedOn":"2019-01-24T20:50:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The schedule for the .NET and Typescript Developer Room at FOSDEM has now been published! FOSDEM is one of the longest running Free and Open Source conferences, and we’re excited to have a .NET and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-and-typescript-at-fosdem-2019/","RawContent":null},{"Title":"Do more with patterns in C# 8.0","PublishedOn":"2019-01-24T18:00:30+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"Do more with patterns in C# 8.0 Visual Studio 2019 Preview 2 is out! And with it, a couple more C# 8.0 features are ready for you to try. It&#8217;s mostly about pattern matching, though I&#8217;ll...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/","RawContent":null},{"Title":"Announcing F# 4.6 Preview","PublishedOn":"2019-01-24T15:45:40+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re excited to announce that Visual Studio 2019 will ship a new version of F# when it releases: F# 4.6! F# 4.6 is a smaller update to the F# language, making it a &#8220;true&#8221;...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/announcing-f-4-6-preview/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2019 Preview 2","PublishedOn":"2019-01-24T15:30:31+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Another preview of Visual Studio 2019, another update on the cool stuff going into it! We&#8217;re pleased to announce some updates to the .NET Core tools for Visual Studio 2019. You can try these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/24/net-core-tooling-update-for-visual-studio-2019-preview-2/","RawContent":null},{"Title":".NET Framework January 22, 2018 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-01-22T22:22:08+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the January 22, 2018 .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9001989260","Type":"PullRequestEvent","CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Opened pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"8997330482","Type":"PullRequestEvent","CreatedAt":"2019-02-02T11:04:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Merged pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8887340703","Type":"PullRequestEvent","CreatedAt":"2019-01-15T05:16:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Opened pull request \"Update links\" (#130) at dotnet/foundation","RelatedBody":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com."},{"Id":"8860916656","Type":"PullRequestEvent","CreatedAt":"2019-01-09T22:28:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Merged pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalmalik777","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9022999204","Type":"IssuesEvent","CreatedAt":"2019-02-07T04:50:27","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19862","RelatedDescription":"Closed issue \"Crash running VB emit tests\" (#19862) at dotnet/coreclr","RelatedBody":"Apologies in advance, this is a bit involved. Please let me know what other information I can provide.\r\n\r\n### Repro Details\r\n\r\nThis repros consistently on Ubuntu 18.04 using dotnet version 2.1.300-rtm-008866:\r\n\r\n- Clone https://github.com/jaredpar/roslyn\r\n- Checkout `repro/coreclr-crash-vb-emit`\r\n- Run `./build.sh --restore --build`\r\n- Run `./build.sh --test`\r\n\r\nThis will execute all of the Roslyn tests and eventually crash while executing the VB emit tests. I did not specify how to run the VB emit tests directly as the bug is much, much less likely to reproduce (about one time in twenty) while running all tests it will reproduce about 100% of the time. \r\n\r\nThe command to run the emit tests individually is the following (substitute `/home/jaredpar/code/roslyn` with the location of the enlistment)\r\n\r\n``` bash\r\n> dotnet exec --depsfile /home/jaredpar/code/roslyn/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.0/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.deps.json --runtimeconfig /home/jaredpar/code/roslyn/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.0/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.runtimeconfig.json /home/jaredpar/.nuget/packages/xunit.runner.console/2.3.1/tools/netcoreapp2.0/xunit.console.dll /home/jaredpar/code/roslyn/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.0/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll -xml /home/jaredpar/code/roslyn/Binaries/Debug/xUnitResults/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.xml\r\n```\r\n\r\n### Investigation\r\nThe crash is occurring while executing VB expression tree tests. This is essentially a series of tests where we emit every combination of expression trees and operators and verify they execute to a specific baseline (or simply don't crash). Every test executes in a new `AssemblyLoadContext`. \r\n\r\nThe particular test that is failing is: [TestBinaryOperator_Checked_Comparisons](https://github.com/dotnet/roslyn/blob/master/src/Compilers/VisualBasic/Test/Emit/ExpressionTrees/CodeGenExprLambda.vb#L269). The only item potentially interesting about this test is that it's executing with checked arithmetic enabled in release.\r\n\r\nThe code which is being compiled is available in [this gist](https://gist.github.com/jaredpar/6d16eb29cd00142b0e686158846554af). Executing this on it's own does not cause any issues with CoreClr. I ran it in a loop 40 times and it did not crash. I've not been able to discern anything else beyond this information. \r\n\r\nRoslyn tracking bug https://github.com/dotnet/roslyn/issues/29660\r\n\r\n### Stack information\r\n\r\nHere is the stack information I gathered from the core dump. When capturing the core dump wake sure to have the following values set before capturing the core dump:\r\n\r\n``` bash\r\n> export COMPlus_DbgEnableMiniDump=1\r\n> export COMPlus_DbgMiniDumpType=4\r\n```\r\n\r\nStack trace\r\n\r\n```\r\nOS Thread Id: 0x13443 (1)\r\n        Child SP               IP Call Site\r\n00007FFFC52ECDB0 00007F5C60CEF23A libpthread.so.0!__waitpid + 74\r\n00007FFFC52ECDE0 00007F5C5F800067 libcoreclr.so!PROCAbort + 119\r\n00007FFFC52ECE10 00007F5C5F7FEF5B libcoreclr.so + -1\r\n00007FFFC52ECE40 00007F5C5F4A40D3 libcoreclr.so!SafeExitProcess(unsigned int, int, ShutdownCompleteAction) + 531\r\n00007FFFC52ECFA0 00007F5C5F4A56F1 libcoreclr.so!EEPolicy::HandleFatalError(unsigned int, unsigned long, char16_t const*, _EXCEPTION_POINTERS*) + 593\r\n00007FFFC52ED560 00007F5C5F5636D6 libcoreclr.so!ProcessCLRException + 2086\r\n00007FFFC52EE720 00007F5C5F567884 libcoreclr.so!UnwindManagedExceptionPass1(PAL_SEHException&, _CONTEXT*) + 420\r\n00007FFFC52EECF0 00007F5C5F567AD9 libcoreclr.so!DispatchManagedException(PAL_SEHException&, bool) + 73\r\n00007FFFC52EF1E0 00007F5C5F5621C7 libcoreclr.so!HandleHardwareException(PAL_SEHException*) + 855\r\n00007FFFC52EF1F0                  [FaultingExceptionFrame: 00007fffc52ef1f0] \r\n00007FFFC52EF720 00007F5C5F7C48F8 libcoreclr.so!SEHProcessException(PAL_SEHException*) + 136\r\n00007FFFC52EF750 00007F5C5F7C6198 libcoreclr.so!common_signal_handler(int, siginfo_t*, void*, int, ...) + 520\r\n00007FFFC52EFDE0 00007F5C5F7C5F46 libcoreclr.so!signal_handler_worker + 118\r\n00007FFFC52EFEA0 00007F5C5F803E62 libcoreclr.so!CallSignalHandlerWrapper8 + 6\r\n00007FFFC52EFF38 00007F5BEA280085 30a22bd8-9932-41f6-b075-9fc3d5b9c248.exe!TestClass.Test() + 5\r\n00007FFFC52EFF50 00007F5BEA0DF478 30a22bd8-9932-41f6-b075-9fc3d5b9c248.exe!Form1.Main() + 24\r\n00007FFFC52EFF80 00007F5C5F48438D libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int) + 109\r\n00007FFFC52EFFC0 00007F5C5F5075D3 libcoreclr.so!CallDescrWorkerReflectionWrapper(CallDescrData*, Frame*) + 115\r\n00007FFFC52F0040 00007F5C5F508473 libcoreclr.so!RuntimeMethodHandle::InvokeMethod(Object*, PtrArray*, SignatureNative*, bool) + 2883\r\n00007FFFC52F0218                  [DebuggerU2MCatchHandlerFrame: 00007fffc52f0218] \r\n00007FFFC52F0328                  [HelperMethodFrame_PROTECTOBJ: 00007fffc52f0328] System.Private.CoreLib.dll!System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean)\r\n00007FFFC52F04A0 00007F5BE5DB665F System.Private.CoreLib.dll!System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(System.Object, System.Object[], System.Object[]) + 127\r\n00007FFFC52F04F0 00007F5BE8D61452 Roslyn.Test.Utilities.dll!Roslyn.Test.Utilities.CoreClr.TestExecutionLoadContext+<>c__DisplayClass7_0.<Execute>b__0() + 466 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/Platform/CoreClr/TestExecutionLoadContext.cs @ 124]\r\n00007FFFC52F05D0 00007F5BE8D6108C Roslyn.Test.Utilities.dll!Roslyn.Test.Utilities.CoreClr.SharedConsole.CaptureOutput(System.Action, Int32, System.String ByRef, System.String ByRef) + 316 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/Platform/CoreClr/SharedConsoleOutWriter.cs @ 44]\r\n00007FFFC52F0680 00007F5BE8B39F09 Roslyn.Test.Utilities.dll!Roslyn.Test.Utilities.CoreClr.TestExecutionLoadContext.Execute(System.Collections.Immutable.ImmutableArray`1<Byte>, System.String[], System.Nullable`1<Int32>) + 473 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/Platform/CoreClr/TestExecutionLoadContext.cs @ 107]\r\n00007FFFC52F0770 00007F5BE8B39AFE Roslyn.Test.Utilities.dll!Roslyn.Test.Utilities.CoreClr.CoreCLRRuntimeEnvironment.Execute(System.String, System.String[], System.String) + 446 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/Platform/CoreClr/CoreCLRRuntimeEnvironment.cs @ 79]\r\n00007FFFC52F08A0 00007F5BE80D4E93 Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CompilationVerifier.Emit(System.String, System.Nullable`1<Int32>, System.String[], System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.ResourceDescription>, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[]) + 387 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/CompilationVerifier.cs @ 114]\r\n00007FFFC52F0960 00007F5BE80D4BF4 Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.Emit(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IEnumerable`1<Roslyn.Test.Utilities.ModuleData>, System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.ResourceDescription>, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[], System.String, System.Nullable`1<Int32>, System.String[], System.Action`1<Microsoft.CodeAnalysis.PEAssembly>, System.Action`1<Microsoft.CodeAnalysis.IModuleSymbol>, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification) + 292 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/CommonTestBase.cs @ 154]\r\n00007FFFC52F0A10 00007F5BE80D43BC Roslyn.Test.Utilities.dll!Microsoft.CodeAnalysis.Test.Utilities.CommonTestBase.CompileAndVerifyCommon(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.ResourceDescription>, System.Collections.Generic.IEnumerable`1<Roslyn.Test.Utilities.ModuleData>, System.Action`1<Microsoft.CodeAnalysis.IModuleSymbol>, System.Action`1<Microsoft.CodeAnalysis.PEAssembly>, System.Action`1<Microsoft.CodeAnalysis.IModuleSymbol>, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[], System.String, System.Nullable`1<Int32>, System.String[], Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification) + 956 [/home/jaredpar/code/roslyn/src/Test/Utilities/Portable/CommonTestBase.cs @ 68]\r\n00007FFFC52F0BD0 00007F5BE8D642AE Microsoft.CodeAnalysis.VisualBasic.Test.Utilities.dll!Microsoft.CodeAnalysis.VisualBasic.UnitTests.BasicTestBase.CompileAndVerify(System.Xml.Linq.XElement, System.Collections.Generic.IEnumerable`1<Microsoft.CodeAnalysis.MetadataReference>, System.String, System.Nullable`1<Int32>, System.String[], System.Collections.Generic.IEnumerable`1<Roslyn.Test.Utilities.ModuleData>, System.Action`1<Microsoft.CodeAnalysis.VisualBasic.Symbols.ModuleSymbol>, System.Action`1<Microsoft.CodeAnalysis.PEAssembly>, System.Action`1<Microsoft.CodeAnalysis.VisualBasic.Symbols.ModuleSymbol>, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[], Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification) + 670 [/home/jaredpar/code/roslyn/src/Compilers/Test/Utilities/VisualBasic/BasicTestBase.vb @ 179]\r\n00007FFFC52F0D50 00007F5BE8D63CB1 Microsoft.CodeAnalysis.VisualBasic.Test.Utilities.dll!Microsoft.CodeAnalysis.VisualBasic.UnitTests.BasicTestBase.CompileAndVerify(System.Xml.Linq.XElement, System.String, System.Nullable`1<Int32>, System.String[], Microsoft.CodeAnalysis.MetadataReference[], System.Collections.Generic.IEnumerable`1<Roslyn.Test.Utilities.ModuleData>, System.Action`1<Microsoft.CodeAnalysis.VisualBasic.Symbols.ModuleSymbol>, System.Action`1<Microsoft.CodeAnalysis.PEAssembly>, System.Action`1<Microsoft.CodeAnalysis.VisualBasic.Symbols.ModuleSymbol>, Microsoft.CodeAnalysis.Test.Utilities.SignatureDescription[], Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilationOptions, Microsoft.CodeAnalysis.VisualBasic.VisualBasicParseOptions, Microsoft.CodeAnalysis.Emit.EmitOptions, Microsoft.CodeAnalysis.Test.Utilities.Verification, Boolean) + 369 [/home/jaredpar/code/roslyn/src/Compilers/Test/Utilities/VisualBasic/BasicTestBase.vb @ 137]\r\n00007FFFC52F0E50 00007F5BE9B03B0C Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll!Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenExprLambda.TestExpressionTrees(Boolean, System.String, ExpressionTreeTest[], System.String, System.String, Microsoft.CodeAnalysis.Test.Utilities.DiagnosticDescription[]) + 2092 [/home/jaredpar/code/roslyn/src/Compilers/VisualBasic/Test/Emit/ExpressionTrees/CodeGenExprLambda.vb @ 1919]\r\n00007FFFC52F1150 00007F5BEA0DE436 Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll!Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenExprLambda.TestBinaryOperator_AllTypes_Comparisons(Boolean, System.String) + 710 [/home/jaredpar/code/roslyn/src/Compilers/VisualBasic/Test/Emit/ExpressionTrees/CodeGenExprLambda.vb @ 368]\r\n00007FFFC52F1210 00007F5BEA0DE0C5 Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll!Microsoft.CodeAnalysis.VisualBasic.UnitTests.CodeGenExprLambda.TestBinaryOperator_Checked_Comparisons() + 85 [/home/jaredpar/code/roslyn/src/Compilers/VisualBasic/Test/Emit/ExpressionTrees/CodeGenExprLambda.vb @ 270]\r\n00007FFFC52F1240 00007F5C5F5741E7 libcoreclr.so!CallDescrWorkerInternal + 124\r\n00007FFFC52F1260 00007F5C5F48438D libcoreclr.so!CallDescrWorkerWithHandler(CallDescrData*, int) + 109\r\n00007FFFC52F12A0 00007F5C5F5075D3 libcoreclr.so!CallDescrWorkerReflectionWrapper(CallDescrData*, Frame*) + 115\r\n00007FFFC52F1320 00007F5C5F508473 libcoreclr.so!RuntimeMethodHandle::InvokeMethod(Object*, PtrArray*, SignatureNative*, bool) + 2883\r\n00007FFFC52F14F8                  [DebuggerU2MCatchHandlerFrame: 00007fffc52f14f8] \r\n00007FFFC52F1608                  [HelperMethodFrame_PROTECTOBJ: 00007fffc52f1608] System.Private.CoreLib.dll!System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean)\r\n00007FFFC52F1780 00007F5BE5DB665F System.Private.CoreLib.dll!System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(System.Object, System.Object[], System.Object[]) + 127\r\n00007FFFC52F17D0 00007F5BE7C930C0 xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib]].MoveNext() + 560 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs @ 257]\r\n00007FFFC52F1840 00007F5BE7C92D85 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef) + 133\r\n00007FFFC52F1890 00007F5BE7C92CBF xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib]].<InvokeTestMethodAsync>b__1() + 143\r\n00007FFFC52F1910 00007F5BE7C92A4F xunit.execution.dotnet.dll!Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext() + 143 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs @ 48]\r\n00007FFFC52F1960 00007F5BE7C924F9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet]](<AggregateAsync>d__4 ByRef) + 73\r\n00007FFFC52F19A0 00007F5BE7C92476 xunit.execution.dotnet.dll!Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>) + 102\r\n00007FFFC52F1A10 00007F5BE7C921DE xunit.core.dll!Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext() + 62 [C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs @ 90]\r\n00007FFFC52F1A50 00007F5BE7C920D9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core]](<RunAsync>d__9 ByRef) + 73\r\n00007FFFC52F1A90 00007F5BE7C92056 xunit.core.dll!Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>) + 102\r\n00007FFFC52F1B00 00007F5BE7C91C8C xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib]].MoveNext() + 572 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs @ 239]\r\n00007FFFC52F1C00 00007F5BE7C91945 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<InvokeTestMethodAsync>d__48<System.__Canon> ByRef) + 133\r\n00007FFFC52F1C50 00007F5BE7C91883 xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].InvokeTestMethodAsync(System.Object) + 147\r\n00007FFFC52F1CD0 00007F5BE7C901B0 xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib]].MoveNext() + 944 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs @ 206]\r\n00007FFFC52F1DD0 00007F5BE7C8FCF5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<<RunAsync>b__47_0>d<System.__Canon> ByRef) + 133\r\n00007FFFC52F1E20 00007F5BE7C8FC32 xunit.execution.dotnet.dll!Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib]].<RunAsync>b__47_0() + 146\r\n00007FFFC52F1EB0 00007F5BE7C8F8D8 xunit.core.dll!Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib]].MoveNext() + 104\r\n00007FFFC52F1F60 00007F5BE7C8F7A9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Decimal, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib]], xunit.core]](<RunAsync>d__10`1<System.Decimal> ByRef) + 73\r\n00007FFFC52F1FA0 00007F5BE7C8F726 xunit.core.dll!Xunit.Sdk.ExceptionAggregator.RunAsync[[System.Decimal, System.Private.CoreLib]](System.Func`1<System.Threading.Tasks.Task`1<System.Decimal>>) + 102\r\n00007FFFC52F2010 00007F5BE7C8EC9A xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext() + 266 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs @ 67]\r\n00007FFFC52F20B0 00007F5BE7C8EAC9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet]](<InvokeTestAsync>d__4 ByRef) + 73\r\n00007FFFC52F20F0 00007F5BE7C8EA40 xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator) + 112\r\n00007FFFC52F2170 00007F5BE7C8E34C xunit.core.dll!Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib]].MoveNext() + 76\r\n00007FFFC52F21D0 00007F5BE7C8E1F5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib]], xunit.core]](<RunAsync>d__10`1<System.__Canon> ByRef) + 133\r\n00007FFFC52F2220 00007F5BE7C8E119 xunit.core.dll!Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>) + 153\r\n00007FFFC52F22B0 00007F5BE7C892B1 xunit.execution.dotnet.dll!Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib]].MoveNext() + 1473\r\n00007FFFC52F23E0 00007F5BE7C887D5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__43<System.__Canon> ByRef) + 133\r\n00007FFFC52F2430 00007F5BE7C88712 xunit.execution.dotnet.dll!Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 146\r\n00007FFFC52F24C0 00007F5BE7C87606 xunit.execution.dotnet.dll!Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib]].MoveNext() + 694 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCaseRunner.cs @ 82]\r\n00007FFFC52F2590 00007F5BE7C86E45 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__19<System.__Canon> ByRef) + 133\r\n00007FFFC52F25E0 00007F5BE7C86D7F xunit.execution.dotnet.dll!Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 143\r\n00007FFFC52F2660 00007F5BE7C86543 xunit.execution.dotnet.dll!Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib]].MoveNext() + 275 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs @ 136]\r\n00007FFFC52F26D0 00007F5BE7C86325 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunTestCasesAsync>d__32<System.__Canon> ByRef) + 133\r\n00007FFFC52F2720 00007F5BE7C86262 xunit.execution.dotnet.dll!Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCasesAsync() + 146\r\n00007FFFC52F27B0 00007F5BE7C858C9 xunit.execution.dotnet.dll!Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib]].MoveNext() + 489 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs @ 106]\r\n00007FFFC52F2870 00007F5BE7C855D5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__31<System.__Canon> ByRef) + 133\r\n00007FFFC52F28C0 00007F5BE7C8550F xunit.execution.dotnet.dll!Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 143\r\n00007FFFC52F2940 00007F5BE7C80EEE xunit.execution.dotnet.dll!Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib]].MoveNext() + 734 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs @ 213]\r\n00007FFFC52F29E0 00007F5BE7C80B05 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunTestMethodsAsync>d__38<System.__Canon> ByRef) + 133\r\n00007FFFC52F2A30 00007F5BE7C80A42 xunit.execution.dotnet.dll!Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestMethodsAsync() + 146\r\n00007FFFC52F2AC0 00007F5BE7C7F1A2 xunit.execution.dotnet.dll!Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib]].MoveNext() + 706 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs @ 171]\r\n00007FFFC52F2B80 00007F5BE7C7EDD5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__37<System.__Canon> ByRef) + 133\r\n00007FFFC52F2BD0 00007F5BE7C7E8FF xunit.execution.dotnet.dll!Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 143\r\n00007FFFC52F2C50 00007F5BE7C7E17E xunit.execution.dotnet.dll!Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib]].MoveNext() + 622 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs @ 130]\r\n00007FFFC52F2CE0 00007F5BE7C7D9F5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunTestClassesAsync>d__28<System.__Canon> ByRef) + 133\r\n00007FFFC52F2D30 00007F5BE7C7D932 xunit.execution.dotnet.dll!Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestClassesAsync() + 146\r\n00007FFFC52F2DC0 00007F5BE7C7C596 xunit.execution.dotnet.dll!Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib]].MoveNext() + 662 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs @ 101]\r\n00007FFFC52F2E70 00007F5BE7C7BDE5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__27<System.__Canon> ByRef) + 133\r\n00007FFFC52F2EC0 00007F5BE7C7BD1F xunit.execution.dotnet.dll!Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 143\r\n00007FFFC52F2F40 00007F5BE7C79BCC xunit.execution.dotnet.dll!Xunit.Sdk.TestAssemblyRunner`1+<RunTestCollectionsAsync>d__42[[System.__Canon, System.Private.CoreLib]].MoveNext() + 220 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestAssemblyRunner.cs @ 231]\r\n00007FFFC52F2FC0 00007F5BE7C799E5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+<RunTestCollectionsAsync>d__42[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunTestCollectionsAsync>d__42<System.__Canon> ByRef) + 133\r\n00007FFFC52F3010 00007F5BE7C79919 xunit.execution.dotnet.dll!Xunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource) + 169\r\n00007FFFC52F30C0 00007F5BE7C78712 xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestAssemblyRunner+<RunTestCollectionsAsync>d__14.MoveNext() + 274 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs @ 165]\r\n00007FFFC52F3160 00007F5BE7C770D9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.XunitTestAssemblyRunner+<RunTestCollectionsAsync>d__14, xunit.execution.dotnet]](<RunTestCollectionsAsync>d__14 ByRef) + 73\r\n00007FFFC52F31A0 00007F5BE7C77052 xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus, System.Threading.CancellationTokenSource) + 146\r\n00007FFFC52F3270 00007F5BE7C75A56 xunit.execution.dotnet.dll!Xunit.Sdk.TestAssemblyRunner`1+<RunAsync>d__41[[System.__Canon, System.Private.CoreLib]].MoveNext() + 934 [C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestAssemblyRunner.cs @ 196]\r\n00007FFFC52F3350 00007F5BE7C755A5 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib]].Start[[Xunit.Sdk.TestAssemblyRunner`1+<RunAsync>d__41[[System.__Canon, System.Private.CoreLib]], xunit.execution.dotnet]](<RunAsync>d__41<System.__Canon> ByRef) + 133\r\n00007FFFC52F33A0 00007F5BE7C754DE xunit.execution.dotnet.dll!Xunit.Sdk.TestAssemblyRunner`1[[System.__Canon, System.Private.CoreLib]].RunAsync() + 158\r\n00007FFFC52F3440 00007F5BE7C74D0E xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestFrameworkExecutor+<RunTestCases>d__8.MoveNext() + 158\r\n00007FFFC52F3490 00007F5BE7C74BA9 System.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[[Xunit.Sdk.XunitTestFrameworkExecutor+<RunTestCases>d__8, xunit.execution.dotnet]](<RunTestCases>d__8 ByRef) + 73\r\n00007FFFC52F34D0 00007F5BE7C74B2E xunit.execution.dotnet.dll!Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable`1<Xunit.Sdk.IXunitTestCase>, Xunit.Abstractions.IMessageSink, Xunit.Abstractions.ITestFrameworkExecutionOptions) + 126\r\n00007FFFC52F3570 00007F5BE63B7396 xunit.console.dll!Xunit.ConsoleClient.ConsoleRunner.ExecuteAssembly(System.Object, Xunit.XunitProjectAssembly, Boolean, Boolean, System.Nullable`1<Boolean>, System.Nullable`1<Int32>, Boolean, Boolean, Boolean, Boolean, Boolean, Xunit.XunitFilters, Boolean) + 2742 [C:\\Dev\\xunit\\xunit\\src\\xunit.console\\ConsoleRunner.cs @ 409]\r\n00007FFFC52F36D0 00007F5BE63B436A xunit.console.dll!Xunit.ConsoleClient.ConsoleRunner.RunProject(Xunit.XunitProject, Boolean, System.Nullable`1<Boolean>, System.Nullable`1<Boolean>, System.Nullable`1<Int32>, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) + 1482 [C:\\Dev\\xunit\\xunit\\src\\xunit.console\\ConsoleRunner.cs @ 305]\r\n00007FFFC52F3880 00007F5BE63A2D8E xunit.console.dll!Xunit.ConsoleClient.ConsoleRunner.EntryPoint(System.String[]) + 766 [C:\\Dev\\xunit\\xunit\\src\\xunit.console\\ConsoleRunner.cs @ 71]\r\n00007FFFC52F3950 00007F5BE63A08D4 xunit.console.dll!Xunit.ConsoleClient.Program.Main(System.String[]) + 68 [C:\\Dev\\xunit\\xunit\\src\\xunit.console\\Program.cs @ 16]\r\n00007FFFC52F3980 00007F5C5F5741E7 libcoreclr.so!CallDescrWorkerInternal + 124\r\n00007FFFC52F39A0 00007F5C5F484EC0 libcoreclr.so!MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 1264\r\n00007FFFC52F3B90 00007F5C5F595F34 libcoreclr.so!RunMain(MethodDesc*, short, int*, PtrArray**) + 788\r\n00007FFFC52F3C50                  [GCFrame: 00007fffc52f3c50] \r\n00007FFFC52F3DA0 00007F5C5F5961B3 libcoreclr.so!Assembly::ExecuteMainMethod(PtrArray**, int) + 227\r\n00007FFFC52F4020 00007F5C5F3C758B libcoreclr.so!CorHost2::ExecuteAssembly(unsigned int, char16_t const*, int, char16_t const**, unsigned int*) + 475\r\n00007FFFC52F4060                  [GCFrame: 00007fffc52f4060] \r\n00007FFFC52F40D0 00007F5C5F3A1ED6 libcoreclr.so!coreclr_execute_assembly + 262\r\n00007FFFC52F4130 00007F5C5FAC0433 libhostpolicy.so!coreclr::execute_assembly(void*, unsigned int, int, char const**, char const*, unsigned int*) + 131\r\n00007FFFC52F4170 00007F5C5FAB50D8 libhostpolicy.so!run(arguments_t const&) + 5976\r\n00007FFFC52F4900 00007F5C5FAB5772 libhostpolicy.so!corehost_main + 610\r\n00007FFFC52F4A10 00007F5C5FD58CBF libhostfxr.so!___lldb_unnamed_symbol1564$$libhostfxr.so + 207\r\n00007FFFC52F4A90 00007F5C5FD6436C libhostfxr.so!___lldb_unnamed_symbol1609$$libhostfxr.so + 5436\r\n00007FFFC52F5410 00007F5C5FD654C5 libhostfxr.so!___lldb_unnamed_symbol1612$$libhostfxr.so + 437\r\n00007FFFC52F5510 00007F5C5FD64A39 libhostfxr.so!___lldb_unnamed_symbol1610$$libhostfxr.so + 1001\r\n00007FFFC52F5630 00007F5C5FD5901D libhostfxr.so!hostfxr_main + 157\r\n00007FFFC52F56B0 000000000040C42A dotnet!run(int, char const**) + 970\r\n00007FFFC52F5750 000000000040C597 dotnet!main + 167\r\n00007FFFC52F5780 00007F5C5FFC9B97 libc.so.6!__libc_start_main + 231 at /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:344\r\n00007FFFC52F5840 000000000040A385 dotnet!_start + 41\r\n(lldb) \r\n```\r\n\r\n\r\n"},{"Id":"9022805572","Type":"PullRequestEvent","CreatedAt":"2019-02-07T03:37:33","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22453","RelatedDescription":"Merged pull request \"Fix CoreLib to include PasteArguments.Unix.cs correctly\" (#22453) at dotnet/coreclr","RelatedBody":"cc: @jkotas"},{"Id":"9022803593","Type":"PullRequestEvent","CreatedAt":"2019-02-07T03:36:47","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22321","RelatedDescription":"Merged pull request \"Move Array to shared partition\" (#22321) at dotnet/coreclr","RelatedBody":"Contributes to #21932"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9022486675","Type":"PullRequestEvent","CreatedAt":"2019-02-07T01:50:24","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10720","RelatedDescription":"Opened pull request \"Implement child process reaping. \" (#10720) at dotnet/cli","RelatedBody":"This PR implements child process reaping in the event of termination\r\nof a CLI command.\r\n\r\nOn Windows, the child process is added to a job object that is set to\r\nterminate the child (and its tree) upon the termination of the parent\r\ndotnet process.  On Windows 7 and Server 2008, the dotnet process cannot\r\nalready be associated with a job object for the reaping to occur.  On\r\nlater Windows versions, a nested job will be created so the reaping will\r\nstill occur.  After the child process exits, the job object is closed\r\nwithout terminating the remaining processes in the job; this allows for\r\nthe child process to spawn additional processes that outlive the child.\r\n\r\nOn POSIX operating systems, a SIGTERM is intercepted and forwarded on to\r\nthe child process only. Like the SIGINT forwarding, it is up to the\r\nchild process to decide what to do with the SIGTERM signal (the default\r\nis to abort).\r\n\r\nAdditionally, this fix further expands upon the previous fix to `dotnet\r\nrun` to properly handle SIGINT so that all child processes now benefit\r\nfrom the fixed behavior.  This means MSBuild-forwarding commands like\r\n`dotnet build` now behave as if MSBuild were directly being executed with\r\nrespect to Ctrl-C handling.\r\n\r\nFixes #7426."},{"Id":"9021714565","Type":"PullRequestEvent","CreatedAt":"2019-02-06T22:37:21","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10719","RelatedDescription":"Opened pull request \"Fix VS option to disallow previews in resolver\" (#10719) at dotnet/cli","RelatedBody":"When the resolver was retargeted to net472, #if NET46 became unused, causing the default x-plat behavior of never disallowing previews to be used.\r\n\r\nThis had not been caught because:\r\n\r\n1. VS 16 is the only version with a resolver having this bug and it is still in preview and therefore grays out the option to disallow previews of SDK.\r\n\r\n2. VSSettings have to be mocked in unit tests\r\n\r\nAlso:\r\n\r\n* Fix unnecessary deployment of embedded Microsoft.VisualStudio.Setup.Configuration.Interop.\r\n* Remove explicit package dependency on NETStandard.Library on the unofficial nupkg of resolver\r\n* Remove unnecessary unused #if NET46/NET451 that can now use the same API on net472 as netstandard/netcoreapp\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8988505913","Type":"IssuesEvent","CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Opened issue \"NETStandard, T4 templates, and System.Numerics.VEctors\" (#1064) at dotnet/standard","RelatedBody":"W have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: <TargetFrameworks>netstandard2.0;net46;uap10.0.14393</TargetFrameworks>\r\nThe assembly to reflect on is loaded with <#@ assembly name=…\r\nIf the first target in the list is net46 or uap, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: <PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" />\r\nOur prrevious workaround was to do the build-time code generation on net46 or uap, but we want to move to netstandard only builds soon. How can this error be dealt with?\r\n"},{"Id":"8987877444","Type":"IssuesEvent","CreatedAt":"2019-01-31T19:03:58","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/926","RelatedDescription":"Closed issue \"Track .NET Core similar to other platforms\" (#926) at dotnet/standard","RelatedBody":"@weshaggard started this work in his [wesh/netcoreapp_compat](https://github.com/dotnet/standard/tree/wesh/netcoreapp_compat) branch."},{"Id":"8978890473","Type":"IssuesEvent","CreatedAt":"2019-01-30T15:33:00","Actor":"pranavkm","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/issues/474","RelatedDescription":"Reopened issue \"The type 'Attribute' is defined in an assembly that is not referenced.\" (#474) at dotnet/standard","RelatedBody":"I'm encountering this error when using MSTest and the Microsoft.AspNetCore.TestHost. It all works fine until I call the TestServer to render a view.\r\n\r\nI'm using VS2017 15.3 with the .NET Core 2.0 Sdk with my net.core app targeting .NET Framework 4.6.1.\r\nAny advise on how I might fix this?\r\n\r\n```\r\n\"Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationFailedException: One or more compilation failures occurred:\\r\\ne3s05cht.itf(4,62): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(4,81): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(4,109): error CS0518: Predefined type 'System.Type' is not defined or imported\\r\\ne3s05cht.itf(4,11): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(8,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(9,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(10,11): error CS0246: The type or namespace name 'System' could not be fou\r\nnd (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(11,11): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\\r\\ne3s05cht.itf(14,36): error CS0234: The type or namespace name 'ViewFeatures' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(15,93): error CS1980: Cannot define a class or member that utilizes 'dynamic' because the compiler required type 'System.Runtime.CompilerServices.DynamicAttribute' cannot be found. Are you missing a reference?\\r\\ne3s05cht.itf(15,93): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(15,44): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(18,67): error CS1983: The return type of an async method mus\r\nt be void, Task or Task<T>\\r\\ne3s05cht.itf(18,39): error CS0400: The type or namespace name 'System' could not be found in the global namespace (are you missing an assembly reference?)\\r\\ne3s05cht.itf(70,49): error CS0234: The type or namespace name 'ViewFeatures' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(70,118): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(72,49): error CS0234: The type or namespace name 'IUrlHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(72,71): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(74,49): error CS0234: The type or namespace name 'IViewComponentHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(74,87): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05\r\ncht.itf(76,59): error CS0234: The type or namespace name 'IJsonHelper' does not exist in the namespace 'Microsoft.AspNetCore.Mvc.Rendering' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(76,83): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(78,59): error CS0234: The type or namespace name 'IHtmlHelper<>' does not exist in the namespace 'Microsoft.AspNetCore.Mvc.Rendering' (are you missing an assembly reference?)\\r\\ne3s05cht.itf(78,71): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(78,71): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(78,71): error CS1980: Cannot define a class or member that utilizes 'dynamic' because the compiler required type 'System.Runtime.CompilerServices.DynamicAttribute' cannot be found. Are you missing a reference?\\r\\ne3s05ch\r\nt.itf(78,71): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(78,92): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(18,67): error CS0508: '_Views_PublicApp_cshtml.ExecuteAsync()': return type must be 'Task' to match overridden member 'RazorPageBase.ExecuteAsync()'\\r\\ne3s05cht.itf(18,67): error CS0012: The type 'Task' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(69,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(69,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(71,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a referen\r\nce to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(71,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(73,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(73,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(75,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(75,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(77,58): error CS0012: The type 'Attribute' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=ne\r\nutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(77,10): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(20,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(20,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(20,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(20,29): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(20,34): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(20,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(21,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=\r\nneutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(21,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(21,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(21,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(36,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(36,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(36,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(43,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(43,13): error CS0518: Predefined ty\r\npe 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(43,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(43,31): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(43,36): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(43,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(44,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(44,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(44,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(44,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(48,13): error CS0012: The type 'Object' is defined in an assembl\r\ny that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(48,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(48,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(56,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(56,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(56,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(56,31): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(56,36): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(56,13): error CS0518: Predefined type 'System.Void' is not d\r\nefined or imported\\r\\ne3s05cht.itf(57,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(57,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(57,26): error CS0518: Predefined type 'System.String' is not defined or imported\\r\\ne3s05cht.itf(57,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(58,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(58,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(58,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(64,13): error CS0012: The type 'Object' is defined in an as\r\nsembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(64,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(64,26): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(64,32): error CS0518: Predefined type 'System.Int32' is not defined or imported\\r\\ne3s05cht.itf(64,37): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\ne3s05cht.itf(64,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(65,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(65,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(65,26): error CS0518: Predefined type 'System.String' i\r\ns not defined or imported\\r\\ne3s05cht.itf(65,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(66,13): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\\r\\ne3s05cht.itf(66,13): error CS0518: Predefined type 'System.Object' is not defined or imported\\r\\ne3s05cht.itf(66,13): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\ne3s05cht.itf(18,67): error CS0161: '_Views_PublicApp_cshtml.ExecuteAsync()': not all code paths return a value\\r\\ne3s05cht.itf(15,18): error CS0518: Predefined type 'System.Void' is not defined or imported\\r\\nC:\\\\Source\\\\TFS\\\\ReferenceApp\\\\RefApp.Web\\\\Views\\\\PublicApp.cshtml(15,10): error CS0518: Predefined type 'System.Boolean' is not defined or imported\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String gener\r\natedCode)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCacheEntry(String normalizedPath)\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromPath(String executingFilePath, String pagePath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetView(String executingFilePath, String viewPath, Boolean isMainPage)\\r\\n   at Micro\r\nsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.GetView(String executingFilePath, String viewPath, Boolean isMainPage)\\r\\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\\r\\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvo\r\nker.<InvokeNextResultFilterAsync>d__24.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task\r\n task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\\r\\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\\r\\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\\r\\n--- End of stack trace from previous lo\r\ncation where exception was thrown ---\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()\"\r\n\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9022941178","Type":"IssuesEvent","CreatedAt":"2019-02-07T04:29:23","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35143","RelatedDescription":"Opened issue \"add Netlink and Packet to AddressFamily and ProtocolFamily enum\" (#35143) at dotnet/corefx","RelatedBody":"Both protocols are currently only supported on Linux but both provide interesting capabilities and been asked for by community. \r\n\r\nAF_PACET sockets allow access to link-layer beyond limits of IP RAW sockets.\r\n\r\nNetlink is used widely for various system communications (like route update notifications), can allow communication with kernel modules and support message multicasting. \r\n\r\nI did some testing and existing socket functions seems to work well with new protocol families so changes to actually support them would be small. \r\n\r\nHere is proposed change to public API:\r\n\r\n```c#\r\ndiff --git a/src/Common/src/System/Net/Sockets/ProtocolFamily.cs b/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\nindex 735a73077e..e0a99de686 100644\r\n--- a/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\n+++ b/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\n@@ -41,6 +41,8 @@ namespace System.Net.Internals\r\n         Ieee12844 = AddressFamily.Ieee12844,\r\n         Irda = AddressFamily.Irda,\r\n         NetworkDesigners = AddressFamily.NetworkDesigners,\r\n-        Max = 29, //AddressFamily.Max\r\n+        Netlink = AddressFamily.Netlink,\r\n+        Packet = AddressFamily.Packet,\r\n+        Max = 31, //AddressFamily.Max\r\n     }\r\n }\r\ndiff --git a/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs b/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\nindex e3719f46e2..847cb6d7c8 100644\r\n--- a/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\n+++ b/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\n@@ -42,6 +42,8 @@ namespace System.Net.Sockets\r\n         Ieee12844 = 25,         // IEEE 1284.4 WG AF\r\n         Irda = 26,              // IrDA\r\n         NetworkDesigners = 28,  // Network Designers OSI & gateway enabled protocols\r\n-        Max = 29,               // Max\r\n+        Netlink = 29,           // Netlink protocol\r\n+        Packet = 30,            // Linux Packet\r\n+        Max = 31,               // Max\r\n     }\r\n }\r\n```\r\n\r\nSocket constructor takes protocol family but also protocol type and current enum is mostly IP oriented. Packet protocol uses Link layer type and can be possibly pretty large. For Netlink, there are several subgroups (https://en.wikipedia.org/wiki/Netlink) but it is also possible to define and use custom one via extensibility model.\r\n\r\nSince this is specific to Linux and probably out of mainstream developers, I suggest for now that we do not enumerate all possibilities now and we let users of specific applications to cast int and provide direct value.\r\nThis could be re-visited later if implementation goes beyond Linux.      \r\n\r\nWhen one attempt to use them on Windows and OSX, existing code throws reasonable exception:\r\n\r\n\r\nWindows\r\n\r\n> System.Net.Sockets.SocketException (10047): An address incompatible with the requested protocol was used\r\n>    at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n> \r\n\r\nOSX\r\n\r\n> System.Net.Sockets.SocketException (47): Address family not supported by protocol family\r\n>    at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n> \r\n\r\n\r\ncc: @karelz "},{"Id":"9022901671","Type":"PullRequestEvent","CreatedAt":"2019-02-07T04:14:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35142","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27407-00, beta-27407-00, respectively (master)\" (#35142) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9022564993","Type":"PullRequestEvent","CreatedAt":"2019-02-07T02:14:54","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35131","RelatedDescription":"Merged pull request \"Remove dead code from Composition.Hosting\" (#35131) at dotnet/corefx","RelatedBody":"All functions only called once with non-null values"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9023078653","Type":"PullRequestEvent","CreatedAt":"2019-02-07T05:19:15","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33117","RelatedDescription":"Merged pull request \"Merge dev16.0-preview3-vs-deps to master-vs-deps\" (#33117) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview3-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9023071650","Type":"IssuesEvent","CreatedAt":"2019-02-07T05:16:41","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33161","RelatedDescription":"Closed issue \"Linux_Test mono build failure - dpkg: error processing packages\" (#33161) at dotnet/roslyn","RelatedBody":"Hit this in #33151 - [Build Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=88177) Attempt 1\r\n\r\nBuild setup looks the same to successful runs up until this line:\r\n```\r\n2019-02-05T22:18:04.9474544Z Setting up libnunit-core-interfaces2.6.3-cil (2.6.4+dfsg-1) ...\r\n2019-02-05T22:18:05.1929251Z E: installing Assembly /usr/share/cli-common/policies.d/libnunit-core-interfaces2.6.3-cil/policy.2.6.nunit.core.interfaces.dll failed\r\n2019-02-05T22:18:05.1933042Z E: Installation of policy.2.6.nunit.core.interfaces with /usr/share/cli-common/runtimes.d/mono failed\r\n2019-02-05T22:18:05.1941294Z dpkg: error processing package libnunit-core-interfaces2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.1941747Z  subprocess installed post-installation script returned error exit status 1\r\n2019-02-05T22:18:05.1942052Z dpkg: dependency problems prevent configuration of libnunit-core2.6.3-cil:\r\n2019-02-05T22:18:05.1942404Z  libnunit-core2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:\r\n2019-02-05T22:18:05.1942886Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1945904Z \r\n2019-02-05T22:18:05.1946563Z dpkg: error processing package libnunit-core2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.1946897Z  dependency problems - leaving unconfigured\r\n2019-02-05T22:18:05.1950890Z dpkg: dependency problems prevent configuration of libnunit-util2.6.3-cil:\r\n2019-02-05T22:18:05.1951248Z  libnunit-util2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:\r\n2019-02-05T22:18:05.1954767Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1955245Z  libnunit-util2.6.3-cil depends on libnunit-core2.6.3-cil; however:\r\n2019-02-05T22:18:05.1955584Z   Package libnunit-core2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1955644Z \r\n2019-02-05T22:18:05.1955955Z dpkg: error processing package libnunit-util2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.1956239Z  dependency problems - leaving unconfigured\r\n2019-02-05T22:18:05.1956910Z dpkg: dependency problems prevent configuration of libnunit-console-runner2.6.3-cil:\r\n2019-02-05T22:18:05.1957299Z  libnunit-console-runner2.6.3-cil depends on libnunit-core-interfaces2.6.3-cil; however:\r\n2019-02-05T22:18:05.1957612Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1957933Z  libnunit-console-runner2.6.3-cil depends on libnunit-core2.6.3-cil; however:\r\n2019-02-05T22:18:05.1958218Z   Package libnunit-core2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1958537Z  libnunit-console-runner2.6.3-cil depends on libnunit-util2.6.3-cil; however:\r\n2019-02-05T22:18:05.1958835Z   Package libnunit-util2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.1958892Z \r\n2019-02-05T22:18:05.1959198Z dpkg: error processing package libnunit-console-runner2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.1959462Z  dependency problems - leaving unconfigured\r\n2019-02-05T22:18:05.1959759Z Setting up libnunit-framework2.6.3-cil (2.6.4+dfsg-1) ...\r\n2019-02-05T22:18:05.4217015Z E: installing Assembly /usr/share/cli-common/policies.d/libnunit-framework2.6.3-cil/policy.2.6.nunit.framework.dll failed\r\n2019-02-05T22:18:05.4218222Z E: Installation of policy.2.6.nunit.framework with /usr/share/cli-common/runtimes.d/mono failed\r\n2019-02-05T22:18:05.4235253Z dpkg: error processing package libnunit-framework2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.4235760Z  subprocess installed post-installation script returned error exit status 1\r\n2019-02-05T22:18:05.4236144Z dpkg: dependency problems prevent configuration of libnunit-mocks2.6.3-cil:\r\n2019-02-05T22:18:05.4237001Z  libnunit-mocks2.6.3-cil depends on libnunit-framework2.6.3-cil; however:\r\n2019-02-05T22:18:05.4237362Z   Package libnunit-framework2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4237457Z \r\n2019-02-05T22:18:05.4237799Z dpkg: error processing package libnunit-mocks2.6.3-cil (--configure):\r\n2019-02-05T22:18:05.4238457Z  dependency problems - leaving unconfigured\r\n2019-02-05T22:18:05.4287203Z dpkg: dependency problems prevent configuration of libnunit-cil-dev:\r\n2019-02-05T22:18:05.4287642Z  libnunit-cil-dev depends on libnunit-console-runner2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4288006Z   Package libnunit-console-runner2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4288338Z  libnunit-cil-dev depends on libnunit-core2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4288627Z   Package libnunit-core2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4288960Z  libnunit-cil-dev depends on libnunit-core-interfaces2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4289282Z   Package libnunit-core-interfaces2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4289608Z  libnunit-cil-dev depends on libnunit-framework2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4289897Z   Package libnunit-framework2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4290218Z  libnunit-cil-dev depends on libnunit-mocks2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4290515Z   Package libnunit-mocks2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4290833Z  libnunit-cil-dev depends on libnunit-util2.6.3-cil (= 2.6.4+dfsg-1); however:\r\n2019-02-05T22:18:05.4291117Z   Package libnunit-util2.6.3-cil is not configured yet.\r\n2019-02-05T22:18:05.4291175Z \r\n2019-02-05T22:18:05.4291457Z dpkg: error processing package libnunit-cil-dev (--configure):\r\n2019-02-05T22:18:05.4291717Z  dependency problems - leaving unconfigured\r\n2019-02-05T22:18:05.4292072Z dpkg: dependency problems prevent configuration of libmono-cil-dev:\r\n2019-02-05T22:18:05.4292362Z  libmono-cil-dev depends on libnunit-cil-dev (>= 2.4); however:\r\n2019-02-05T22:18:05.4292663Z   Package libnunit-cil-dev is not configured yet.\r\n2019-02-05T22:18:05.4292721Z \r\n2019-02-05T22:18:05.4292999Z dpkg: error processing package libmono-cil-dev (--configure):\r\n2019-02-05T22:18:05.4293258Z  dependency problems - leaving unconfigured\r\n```\r\n\r\nBuild fails after installing updated certificates:\r\n```\r\n2019-02-05T22:18:56.3912802Z 148 new root certificates were added to your trust store.\r\n2019-02-05T22:18:56.3912885Z Import process completed.\r\n2019-02-05T22:18:56.3964283Z Done\r\n2019-02-05T22:18:56.3965656Z done.\r\n2019-02-05T22:18:56.4340062Z Processing triggers for sgml-base (1.26+nmu4ubuntu1) ...\r\n2019-02-05T22:18:56.5435783Z Processing triggers for systemd (229-4ubuntu21.10) ...\r\n2019-02-05T22:18:56.6850101Z Errors were encountered while processing:\r\n2019-02-05T22:18:56.6851275Z  libnunit-core-interfaces2.6.3-cil\r\n2019-02-05T22:18:56.6851594Z  libnunit-core2.6.3-cil\r\n2019-02-05T22:18:56.6851854Z  libnunit-util2.6.3-cil\r\n2019-02-05T22:18:56.6852098Z  libnunit-console-runner2.6.3-cil\r\n2019-02-05T22:18:56.6854034Z  libnunit-framework2.6.3-cil\r\n2019-02-05T22:18:56.6854379Z  libnunit-mocks2.6.3-cil\r\n2019-02-05T22:18:56.6854621Z  libnunit-cil-dev\r\n2019-02-05T22:18:56.6854902Z  libmono-cil-dev\r\n2019-02-05T22:18:56.6855124Z  mono-devel\r\n2019-02-05T22:18:56.7293306Z ‌E: Sub-process /usr/bin/dpkg returned an error code (1)‌\r\n2019-02-05T22:18:57.4184369Z ‌The command '/bin/sh -c apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&     apt install apt-transport-https &&     (echo \"deb https://download.mono-project.com/repo/ubuntu nightly-xenial main\" | tee /etc/apt/sources.list.d/mono-official-nightly.list) &&     (echo \"deb https://download.mono-project.com/repo/ubuntu preview-xenial main\" | tee /etc/apt/sources.list.d/mono-official-preview.list) &&     apt-get update &&     apt-get install -y mono-devel &&     apt-get clean' returned a non-zero code: 100‌\r\n2019-02-05T22:18:57.4200963Z Docker build failed (exit code '100').\r\n2019-02-05T22:18:57.4385866Z ##[error]Bash exited with code '100'.\r\n```"},{"Id":"9023059179","Type":"PullRequestEvent","CreatedAt":"2019-02-07T05:12:13","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33193","RelatedDescription":"Merged pull request \"Re-enable mono CI build\" (#33193) at dotnet/roslyn","RelatedBody":"Updated builds seem to be deploying as per this comment https://github.com/dotnet/roslyn/issues/33161#issuecomment-461047323\r\n\r\nCloses https://github.com/dotnet/roslyn/issues/33161"},{"Id":"9022898641","Type":"PullRequestEvent","CreatedAt":"2019-02-07T04:13:14","Actor":"ryzngard","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32933","RelatedDescription":"Merged pull request \"Ignore InvalidOperationException from GetInstalledPackages\" (#32933) at dotnet/roslyn","RelatedBody":"The NFW from these aren't meaningful, and it's expected that eventually this will work. \r\n\r\nCurrent NFW reports are [here](https://features.vsdata.io/investigatefault?mt=MAC_ADDRESS_HASHES&et=FAULT&sd=2018-12-29&ed=2019-01-28&pn=vs&fn=ide/vbcs/nonfatalwatson&en=nonfatalwatson&fh=13e849c3-da74-b9b7-5ed0-817c663d2226&ex=devenv&ut=external)\r\n\r\nHelps resolve part of #20101 "},{"Id":"9022877596","Type":"PullRequestEvent","CreatedAt":"2019-02-07T04:05:15","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33190","RelatedDescription":"Closed pull request \"Merge dev16.0-preview3 to master\" (#33190) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9022874267","Type":"PullRequestEvent","CreatedAt":"2019-02-07T04:04:00","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33192","RelatedDescription":"Closed pull request \"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps\" (#33192) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps\ngit reset --hard upstream/dev16.0-preview3-vs-deps\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9022864465","Type":"PullRequestEvent","CreatedAt":"2019-02-07T04:00:14","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33158","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#33158) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9022815262","Type":"IssuesEvent","CreatedAt":"2019-02-07T03:41:15","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33194","RelatedDescription":"Closed issue \"Linux_Test coreclr \"Failed to initialize CoreCLR\" after prepare job step\" (#33194) at dotnet/roslyn","RelatedBody":"Seen in #33029\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=89073\r\n```\r\n##[Error 1]\r\nFailed to initialize CoreCLR, HRESULT: 0x80004005 \r\n```\r\n\r\nHave retried multiple times but it always gets abandoned in a couple seconds."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9017205684","Type":"PullRequestEvent","CreatedAt":"2019-02-06T10:44:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6960","RelatedDescription":"Merged pull request \"Implement LPUTF8Str string marshaling\" (#6960) at dotnet/corert","RelatedBody":"Fixes #6945"},{"Id":"9017205673","Type":"IssuesEvent","CreatedAt":"2019-02-06T10:44:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6945","RelatedDescription":"Closed issue \"MarshalAs(UnmanagedType.LPUTF8Str) error\" (#6945) at dotnet/corert","RelatedBody":" it reports that \r\n\r\nrequires non-trivial marshalling that is not yet supported by this compiler."},{"Id":"9016942383","Type":"PullRequestEvent","CreatedAt":"2019-02-06T09:59:59","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6820","RelatedDescription":"Merged pull request \"Change reflection defaults\" (#6820) at dotnet/corert","RelatedBody":"The biggest issue people have been hitting when trying out CoreRT on existing projects is reflection. This is due to .NET's heritage of being a dynamic runtime where generating new code at runtime is how you do things.\r\n\r\nThis pull request does two things: adds a document describing the challenges of reflection in an AOT compiled runtime, and **establishes new compilation defaults that improve the reflection experience** (new defaults are documented in the doc that is part of the pull request).\r\n\r\nThe improvement in reflection experience is not free. We are trading size and compilation speed for compatibility. E.g. the size of the ASP.NET WebApi sample we have in our repo goes from 24 MB to 30 MB. The size of the MonoGame sample goes from 6 MB to 9 MB. While the size increase is pretty significant (30-50%), the resulting size of the deployment is still very competitive with the size of a CoreCLR self contained app, or Mono's mkbundle (both of which set a pretty low bar).\r\n\r\nPeople who would like deployment sizes that are more competitive with Go and Rust can **opt into** the optimizations that used to be the default before this pull request (described in the doc and linked from a message the build emits). We are going to add more of these optimizations in the future.\r\n\r\nTo see the effect, I've updated the RD.XML files we have in the samples directory. I expect we'll be able to further minimize the amount of RD.XML needed once I bring back 3ec32cc13497f9d720349032a61da355af1ace3f (that improves reflection experience with generics)."},{"Id":"9016369634","Type":"PullRequestEvent","CreatedAt":"2019-02-06T08:07:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6960","RelatedDescription":"Opened pull request \"Implement LPUTF8Str string marshaling\" (#6960) at dotnet/corert","RelatedBody":"Fixes #6945"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9022706121","Type":"IssuesEvent","CreatedAt":"2019-02-07T03:01:57","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2914","RelatedDescription":"Opened issue \"Decide whether to remove support for `dotnet store`\" (#2914) at dotnet/sdk","RelatedBody":"The [runtime package store feature](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store) was used for ASP.NET Core in .NET Core 2.0, but was replaced by a shared framework for ASP.NET Core in 2.1.\r\n\r\nUsing the `dotnet store` command, it's also possible to create your own runtime store.  However, this has been a bit of a bug farm in .NET Core 3.0 (with all of the framework composition changes).  So we may want to remove support for creating a runtime store in the .NET Core 3 SDK."},{"Id":"9022692351","Type":"PullRequestEvent","CreatedAt":"2019-02-07T02:57:24","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2913","RelatedDescription":"Closed pull request \"Update stage 0\" (#2913) at dotnet/sdk","RelatedBody":"CI legs on #2887 started timing out when I updated stage 0, so this PR isolates the stage 0 update to see if that's the problem."},{"Id":"9022572089","Type":"IssuesEvent","CreatedAt":"2019-02-07T02:17:14","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2912","RelatedDescription":"Closed issue \"Self contained publish on linux includes .a files\" (#2912) at dotnet/sdk","RelatedBody":"Using relatively new 3.0 SDK\r\n\r\n```\r\nmkdir ca1\r\ncd ca1\r\ndotnet new console\r\ndotnet publish --self-contained -r linux-x64\r\n```\r\n\r\nIn the publish directory there are 6 `.a` files which don't seem to have any purpose. Basically for every native library (`.so`) coming from CoreFx, there's a corresponding `.a` as well:\r\n```\r\n-rwxrw-rw- 1 vitek vitek 2836614 Feb  5 04:05 System.IO.Compression.Native.a\r\n-rwxrw-rw- 1 vitek vitek   27254 Feb  5 04:05 System.IO.Ports.Native.a\r\n-rwxrw-rw- 1 vitek vitek  396432 Feb  5 04:05 System.Native.a\r\n-rwxrw-rw- 1 vitek vitek   79868 Feb  5 04:05 System.Net.Http.Native.a\r\n-rwxrw-rw- 1 vitek vitek   29400 Feb  5 04:05 System.Net.Security.Native.a\r\n-rwxrw-rw- 1 vitek vitek  906184 Feb  5 04:05 System.Security.Cryptography.Native.OpenSsl.a\r\n```\r\nI don't think these files are needed for anything. \r\nPer customer report this also reproes on MacOS, but I didn't verify."},{"Id":"9021319377","Type":"IssuesEvent","CreatedAt":"2019-02-06T21:27:46","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2867","RelatedDescription":"Reopened issue \"Using PackAsToolShimRuntimeIdentifiers and netcoreapp3.0 fails with error NETSDK1065\" (#2867) at dotnet/sdk","RelatedBody":"**Repro**\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackAsToolShimRuntimeIdentifiers>win-x64;win-x86</PackAsToolShimRuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet pack`\r\n\r\n**Result**\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\3.0.100-preview-010166\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(228,5): error NETSDK1065: Cannot find app host for win-x64. win-x64 could be an invalid runtime identifier (RID). For more information about RID, see https://aka.ms/rid-catalog. [C:\\src\\aspnet\\BuildTools\\repro\\CliTool\\CliTool.csproj]\r\n```\r\n\r\n**Details**\r\n\r\nUsing 3.0.100-preview-010166\r\n\r\ncc @nguerrera @wli3 "},{"Id":"9020570882","Type":"PullRequestEvent","CreatedAt":"2019-02-06T19:21:40","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2913","RelatedDescription":"Opened pull request \"Update stage 0\" (#2913) at dotnet/sdk","RelatedBody":"CI legs on #2887 started timing out when I updated stage 0, so this PR isolates the stage 0 update to see if that's the problem."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"open","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Open PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-04T07:33:23","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"open","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Open PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"407440064","IsPullRequest":true,"CreatedAt":"2019-02-07T03:37:31","Actor":"stephentoub","Number":"22453","RawContent":null,"Title":"Fix CoreLib to include PasteArguments.Unix.cs correctly","State":"closed","Body":"cc: @jkotas","Url":"https://github.com/dotnet/coreclr/pull/22453","RelatedDescription":"Closed or merged PR \"Fix CoreLib to include PasteArguments.Unix.cs correctly\" (#22453)"},{"Id":"407515265","IsPullRequest":false,"CreatedAt":"2019-02-07T02:15:32","Actor":"BruceForstall","Number":"22457","RawContent":null,"Title":"[arm64] Always save int registers at higher addresses than float registers","State":"open","Body":"Currently, floating-point registers are stored at higher addresses than integer registers in some frame types. It would be nice to make the frame types all the same, with int registers stored at higher addresses. See the code in `CodeGen::genSaveCalleeSavedRegistersHelp` and `CodeGen::genRestoreCalleeSavedRegistersHelp`","Url":"https://github.com/dotnet/coreclr/issues/22457","RelatedDescription":"Open issue \"[arm64] Always save int registers at higher addresses than float registers\" (#22457)"},{"Id":"407489732","IsPullRequest":true,"CreatedAt":"2019-02-07T00:12:41","Actor":"franksinankaya","Number":"22456","RawContent":null,"Title":"Cleanup LLVM assumption","State":"open","Body":"We want to support GNU compilation for CoreCLR. Luckily both LLVM\r\nand GNU compilers define __GNUC__ and there are a lot of things\r\nthey can share.","Url":"https://github.com/dotnet/coreclr/pull/22456","RelatedDescription":"Open PR \"Cleanup LLVM assumption\" (#22456)"},{"Id":"407484865","IsPullRequest":true,"CreatedAt":"2019-02-06T23:53:42","Actor":"dotnet-maestro-bot","Number":"22455","RawContent":null,"Title":"Update BuildTools, CoreFx, CoreSetup to preview1-03706-01, preview.19106.7, preview-27406-7, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22455","RelatedDescription":"Open PR \"Update BuildTools, CoreFx, CoreSetup to preview1-03706-01, preview.19106.7, preview-27406-7, respectively (master)\" (#22455)"},{"Id":"407482000","IsPullRequest":true,"CreatedAt":"2019-02-06T23:41:27","Actor":"AndyAyersMS","Number":"22454","RawContent":null,"Title":"JIT: Suppress emitting same-reg zero extending move","State":"open","Body":"Add a peephole optimization to suppress emitting zero extending moves\r\nif the previous instruction has already done a suitable zero extension.\r\n\r\nOnly implemented for x64 currently.\r\n\r\nCloses #21923","Url":"https://github.com/dotnet/coreclr/pull/22454","RelatedDescription":"Open PR \"JIT: Suppress emitting same-reg zero extending move\" (#22454)"},{"Id":"407419090","IsPullRequest":true,"CreatedAt":"2019-02-06T21:51:32","Actor":"BruceForstall","Number":"22450","RawContent":null,"Title":"Disable flaky Linux/arm64 corefx System.Net.Sockets.Tests","State":"closed","Body":"Tracking: https://github.com/dotnet/coreclr/issues/21576\r\n\r\nIn general, any System.Net test that exhibits flakiness should be\r\ndisabled; we pay more in flakiness than we gain in coverage.","Url":"https://github.com/dotnet/coreclr/pull/22450","RelatedDescription":"Closed or merged PR \"Disable flaky Linux/arm64 corefx System.Net.Sockets.Tests\" (#22450)"},{"Id":"407439350","IsPullRequest":true,"CreatedAt":"2019-02-06T21:30:07","Actor":"tannergooding","Number":"22452","RawContent":null,"Title":"Manually update the dependencies.props and move S.P.Corelib to use LangVersion=8.0","State":"open","Body":"The dependencies.props were manually updated since the automatic sync is not currently working. A fix for that and more details on the issue are here: https://github.com/dotnet/versions/pull/419\r\n\r\nThis simultaneously updates S.P.Corelib to use `LangVersion=8.0` since the build-tools update makes that possible.\r\n\r\nCC. @jkotas, @benaadams, @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/22452","RelatedDescription":"Open PR \"Manually update the dependencies.props and move S.P.Corelib to use LangVersion=8.0\" (#22452)"},{"Id":"407435063","IsPullRequest":true,"CreatedAt":"2019-02-06T21:18:47","Actor":"jashook","Number":"22451","RawContent":null,"Title":"[Official Build] Disable FreeBSD builds","State":"open","Body":"Currently all the FreeBSD machines are offline or in an unclean state\r\nwhich blocks official builds from finishing.","Url":"https://github.com/dotnet/coreclr/pull/22451","RelatedDescription":"Open PR \"[Official Build] Disable FreeBSD builds\" (#22451)"},{"Id":"407020900","IsPullRequest":true,"CreatedAt":"2019-02-06T21:00:56","Actor":"jashook","Number":"22437","RawContent":null,"Title":"Allow lcl_var structs to be widened to primitive types on unix amd64.","State":"closed","Body":"This already happens on armarch and it applies to x64 unix as well. This fixes #22276. In order to merge this quickly, I have avoided adding a regression test. I will either add one later or maybe* collect over the powershell crossgen using superpmi.","Url":"https://github.com/dotnet/coreclr/pull/22437","RelatedDescription":"Closed or merged PR \"Allow lcl_var structs to be widened to primitive types on unix amd64.\" (#22437)"},{"Id":"407365889","IsPullRequest":false,"CreatedAt":"2019-02-06T18:17:13","Actor":"sandreenko","Number":"22449","RawContent":null,"Title":"[arm64][Ubuntu][jitstress2] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test.ProxyAuth_Digest_Succeeds","State":"open","Body":"There are unstable failures of this test with:\r\n\r\n```\r\nm[31;1m System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test.ProxyAuth_Digest_Succeeds [FAIL]\r\n00:40:05  [m  [37m   Assert.Equal() Failure\r\n00:40:05   [m  [37m   Expected: OK\r\n00:40:05   [m  [37m   Actual:   Unauthorized\r\n00:40:05   [m  [30;1m   Stack Trace:\r\n00:40:05   [m  [37m     /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_prtest/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Proxy.cs(277,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Proxy_Test.<>c__DisplayClass8_0.<<ProxyAuth_Digest_Succeeds>b__0>d.MoveNext()\r\n00:40:05   [m  [37m     --- End of stack trace from previous location where exception was thrown ---\r\n00:40:05   [m  [37m     /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_prtest/_/fx/src/Common/tests/System/Net/Http/LoopbackServer.cs(66,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n00:40:05   [m  [37m     /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstress2_prtest/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Proxy.cs(256,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Proxy_Test.ProxyAuth_Digest_Succeeds()\r\n00:40:05   [m  [37m     --- End of stack trace from previous location where exception was thrown ---\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22449","RelatedDescription":"Open issue \"[arm64][Ubuntu][jitstress2] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Proxy_Test.ProxyAuth_Digest_Succeeds\" (#22449)"},{"Id":"407349486","IsPullRequest":false,"CreatedAt":"2019-02-06T17:34:03","Actor":"sbomer","Number":"22448","RawContent":null,"Title":"Switch to semver2 version numbers","State":"open","Body":"As we onboard to arcade, we should use semver2 version numbers as described in https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/Versioning.md. This will involve switching from the buildtools versioning logic to the arcade logic.\r\n\r\nWe should also stop using the large revision numbers that I set up to avoid conflicts in buildtools: https://github.com/dotnet/coreclr/blob/master/azure-pipelines.yml#L2.\r\n\r\n@RussKeldorph ","Url":"https://github.com/dotnet/coreclr/issues/22448","RelatedDescription":"Open issue \"Switch to semver2 version numbers\" (#22448)"},{"Id":"407329011","IsPullRequest":true,"CreatedAt":"2019-02-06T16:48:24","Actor":"dotnet-maestro-bot","Number":"22447","RawContent":null,"Title":"Update BuildTools, CoreFx, CoreSetup, IbcData, PgoData to preview1-03706-01, preview.19105.13, preview-27405-7, master-20190130.3, master-20190130.3, respectively (feature/utf8string)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/22447","RelatedDescription":"Open PR \"Update BuildTools, CoreFx, CoreSetup, IbcData, PgoData to preview1-03706-01, preview.19105.13, preview-27405-7, master-20190130.3, master-20190130.3, respectively (feature/utf8string)\" (#22447)"},{"Id":"407147300","IsPullRequest":false,"CreatedAt":"2019-02-06T09:34:11","Actor":"wwh1004","Number":"22446","RawContent":null,"Title":"can't build coreclr in vs2019","State":"open","Body":"E:\\clrandjit\\coreclr-master>build.cmd -skiptests\r\nBUILD: Starting Build at 17:30:46.25\r\nBUILD: Searching for Visual Studio 2017 or 2015 installation\r\nBUILD: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\VsDevCmd.bat\"\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.0.0-pre.2.2\r\n** Copyright (c) 2018 Microsoft Corporation\r\n**********************************************************************\r\nBUILD: Commencing CoreCLR product build\r\nBUILD: Checking prerequisites\r\nBUILD: Number of processor cores 6\r\nTools are already initialized.\r\nRunning: msbuild.exe /nologo /verbosity:minimal /clp:Summary /nodeReuse:false  /l:BinClashLogger,Tools/net46/Microsoft.DotNet.Build.Tasks.dll;LogFile=binclash.log  /p:RestoreDefaultOptimizationDataPackage=false /p:PortableBuild=true  /p:UsePartialNGENOptimization=false /maxcpucount  E:\\clrandjit\\coreclr-master\\build.proj /t:GenerateVersionHeader /p:GenerateVersionHeader=true /p:NativeVersionHeaderFile=\"E:\\clrandjit\\coreclr-master\\bin\\obj\\_version.h\"  /p:__BuildOS=Windows_NT /p:__BuildType=Debug /p:__BuildArch=x64\r\n\r\n已成功生成。\r\n    0 个警告\r\n    0 个错误\r\n\r\n已用时间 00:00:00.10\r\nBUILD: Laying out dynamically generated files consumed by the native build system\r\nBUILD: Laying out dynamically generated Event test files and etmdummy stub functions\r\n Generating Dummy Event Headers\r\n Generating Event Headers\r\nBUILD: Laying out dynamically generated EventPipe Implementation\r\nBUILD: Laying out ETW event logging interface\r\nBUILD: Laying out dynamically generated EventSource classes\r\nBUILD: Commencing build of native components for Windows_NT.x64.Debug\r\nBUILD: Using environment: \"\\..\\..\\VC\\vcvarsall.bat\" x86_amd64\r\n系统找不到指定的路径。\r\nBUILD: Regenerating the Visual Studio solution\r\nCMake Error at CMakeLists.txt:9 (project):\r\n  Failed to run MSBuild command:\r\n\r\n    MSBuild.exe\r\n\r\n  to get the value of VCTargetsPath:\r\n\r\n    用于 .NET Framework 的 Microsoft (R) 生成引擎版本 16.0.360-preview+g9781d96883\r\n    版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n    生成启动时间为 2019/2/6 17:30:52。\r\n    “Configuration”属性是全局属性，不能修改。\r\n    “Configuration”属性是全局属性，不能修改。\r\n    “VisualStudioVersion”属性是全局属性，不能修改。\r\n    “Configuration”属性是全局属性，不能修改。\r\n    节点 1 上的项目“E:\\clrandjit\\coreclr-master\\bin\\obj\\Windows_NT.x64.Debug\\CMakeFiles\\3.9.6\\VCTargetsPath.vcxproj”( 默认目标)。\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(775,5): error : The OutputPath property is not set for project 'VCTargetsPath.vcxproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='x64'.  You may be seeing this message because you are trying to build a project without a solution file, and have specified a non-default Configuration or Platform that doesn't exist for this project. [E:\\clrandjit\\coreclr-master\\bin\\obj\\Windows_NT.x64.Debug\\CMakeFiles\\3.9.6\\VCTargetsPath.vcxproj]\r\n    已完成生成项目“E:\\clrandjit\\coreclr-master\\bin\\obj\\Windows_NT.x64.Debug\\CMakeFiles\\3.9.6\\VCTargetsPath.vcxproj”(默认目标)的操作 - 失败。\r\n\r\n    生成失败。\r\n\r\n    “E:\\clrandjit\\coreclr-master\\bin\\obj\\Windows_NT.x64.Debug\\CMakeFiles\\3.9.6\\VCTargetsPath.vcxproj”(默认目标) (1) ->\r\n    (_CheckForInvalidConfigurationAndPlatform 目标) ->\r\n      C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(775,5): error : The OutputPath property is not set for project 'VCTargetsPath.vcxproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='x64'.  You may be seeing this message because you are trying to build a project without a solution file, and have specified a non-default Configuration or Platform that doesn't exist for this project. [E:\\clrandjit\\coreclr-master\\bin\\obj\\Windows_NT.x64.Debug\\CMakeFiles\\3.9.6\\VCTargetsPath.vcxproj]\r\n\r\n        0 个警告\r\n        1 个错误\r\n\r\n    已用时间 00:00:00.10\r\n\r\n\r\n  Exit code: 1\r\n\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"E:/clrandjit/coreclr-master/bin/obj/Windows_NT.x64.Debug/CMakeFiles/CMakeOutput.log\".\r\nBUILD: Error: failed to generate native component build project","Url":"https://github.com/dotnet/coreclr/issues/22446","RelatedDescription":"Open issue \"can't build coreclr in vs2019\" (#22446)"},{"Id":"407114239","IsPullRequest":false,"CreatedAt":"2019-02-06T07:46:19","Actor":"kindermannhubert","Number":"22445","RawContent":null,"Title":"JIT generates suboptimal code for value copy to pointer","State":"open","Body":"I believe all methods bellow should have same code generated by JIT. Only 'WriteShort' method looks fine.\r\nShort/UShort/Char/MyStruct are all 2 bytes long and therefore all methods are equivalent.\r\n\r\n```C#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic unsafe class Test\r\n{\r\n    public void* p;\r\n    \r\n    public void WriteShort(short x)\r\n    {\r\n       *(short*)p = x;\r\n    }\r\n        \r\n    public void WriteUShort(ushort x)\r\n    {\r\n       *(ushort*)p = x;\r\n    }\r\n    \r\n    public void WriteChar(char x)\r\n    {\r\n       *(char*)p = x;\r\n    }\r\n    \r\n    public void WriteShort_TakeRefAndDeref(short x)\r\n    {\r\n       *(short*)p = *&x;\r\n    }\r\n    \r\n    public void WriteStruct_Direct(MyStruct x)\r\n    {\r\n       *(MyStruct*)p = x;\r\n    }\r\n    \r\n    public void WriteStruct_ByShort(MyStruct x)\r\n    {\r\n       *(short*)p = *(short*)&x;\r\n    }\r\n    \r\n    public void WriteStruct_ByUShort(MyStruct x)\r\n    {\r\n       *(ushort*)p = *(ushort*)&x;\r\n    }\r\n    \r\n    //[StructLayout(LayoutKind.Sequential, Size = 2)] - doesn't matter\r\n    public struct MyStruct\r\n    {\r\n        public byte a, b;\r\n    }\r\n}\r\n```\r\n\r\nThere are unnecessary moves back and forth.\r\n```\r\nTest.WriteShort(Int16)\r\n    L0000: mov rax, [rcx+0x8]\r\n    L0004: mov [rax], dx\r\n    L0007: ret\r\n\r\nTest.WriteUShort(UInt16)\r\n    L0000: mov rax, [rcx+0x8]\r\n    L0004: movzx edx, dx // UNNECESSARY\r\n    L0007: mov [rax], dx\r\n    L000a: ret\r\n\r\nTest.WriteChar(Char)\r\n    L0000: mov rax, [rcx+0x8]\r\n    L0004: movzx edx, dx // UNNECESSARY\r\n    L0007: mov [rax], dx\r\n    L000a: ret\r\n\r\nTest.WriteShort_TakeRefAndDeref(Int16)\r\n    L0000: mov [rsp+0x10], edx // UNNECESSARY\r\n    L0004: mov rax, [rcx+0x8]\r\n    L0008: movsx rdx, word [rsp+0x10] // UNNECESSARY\r\n    L000e: mov [rax], dx\r\n    L0011: ret\r\n\r\nTest.WriteStruct_Direct(MyStruct)\r\n    L0000: mov [rsp+0x10], rdx // UNNECESSARY\r\n    L0005: mov rax, [rcx+0x8]\r\n    L0009: movsx rdx, word [rsp+0x10] // UNNECESSARY\r\n    L000f: mov [rax], dx\r\n    L0012: ret\r\n\r\nTest.WriteStruct_ByShort(MyStruct)\r\n    L0000: mov [rsp+0x10], rdx // UNNECESSARY\r\n    L0005: mov rax, [rcx+0x8]\r\n    L0009: movsx rdx, word [rsp+0x10] // UNNECESSARY\r\n    L000f: mov [rax], dx\r\n    L0012: ret\r\n\r\nTest.WriteStruct_ByUShort(MyStruct)\r\n    L0000: mov [rsp+0x10], rdx // UNNECESSARY\r\n    L0005: mov rax, [rcx+0x8]\r\n    L0009: movzx edx, word [rsp+0x10] // UNNECESSARY\r\n    L000e: mov [rax], dx\r\n    L0011: ret\r\n```\r\nCan be seen at [sharplab.io](https://sharplab.io/#v2:EYLgHgbALANALiAhgZwLYB8ACAGABJgRgG4BYAKB3wIDoAlAVwDs4BLVAU2oEln2AnAPYAHAMr8AbiwDG7ZKTLlMAZlxNkiAGbt8AJlwAVWXHIBvcrgv4VmKACpcQ+ZdznLy/FFwB1PizjsRAAsBPjgACmRg0NwwAEpXCzMyZ0tbCKi4W1ihXABeGKdLAF8ElNL3G29ffwBVIJDw+kiGmPjkyySUizSmjKyc/LBCixL2i3LrTx8/dgBhQMQ+MKkFvlbSzq60lcX+vILS0ecJjyqZ+tCAfX1EAGt2WnYNAEFGABMAEX4n9Ja4jdKqV+oT2+VsADIhodSidKtN/CI4Hx6FI4JcPiw+OxUWEALIAT0RyNR6zGuE2KTSBKJKMy2X2ULJR0ssKm1QCSNplwAQoSMnjCZySf8yRTnGlmiD6WDgXTIcNcMzxmSKmzzkK0by6vzqRrSc4xUDeg1QbgepK5YznEqXGSAPR2gDaNNRABlEPiBPRwu7Pd6ANIsd7UMQAR3o7GYLEQABsYLgRCwAF7afI6WIAXVwAFpcG8BLJGAByOC4VCIOD+PgnZB63XE4yiwFuFTAfH+XCIePABWjIpAA).","Url":"https://github.com/dotnet/coreclr/issues/22445","RelatedDescription":"Open issue \"JIT generates suboptimal code for value copy to pointer\" (#22445)"},{"Id":"406977263","IsPullRequest":true,"CreatedAt":"2019-02-06T07:27:08","Actor":"BruceForstall","Number":"22433","RawContent":null,"Title":"Disable failing constrainedcall test","State":"closed","Body":"Tracked by https://github.com/dotnet/coreclr/issues/22423","Url":"https://github.com/dotnet/coreclr/pull/22433","RelatedDescription":"Closed or merged PR \"Disable failing constrainedcall test\" (#22433)"},{"Id":"407039828","IsPullRequest":true,"CreatedAt":"2019-02-06T07:26:19","Actor":"BruceForstall","Number":"22438","RawContent":null,"Title":"Disable failing BestFitMapping tests","State":"closed","Body":"Tests:\r\n```\r\nInterop\\PInvoke\\BestFitMapping\\Char\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\nInterop\\PInvoke\\BestFitMapping\\Char\\Assembly_False_False\\Assembly_False_False\\Assembly_False_False.cmd\r\nInterop\\PInvoke\\BestFitMapping\\LPStr\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\nInterop\\PInvoke\\BestFitMapping\\LPStr\\Assembly_False_False\\Assembly_False_False\\Assembly_False_False.cmd\r\n```\r\n\r\nTracked by https://github.com/dotnet/coreclr/issues/22436","Url":"https://github.com/dotnet/coreclr/pull/22438","RelatedDescription":"Closed or merged PR \"Disable failing BestFitMapping tests\" (#22438)"},{"Id":"407044253","IsPullRequest":true,"CreatedAt":"2019-02-06T07:24:54","Actor":"BruceForstall","Number":"22439","RawContent":null,"Title":"Disable baseservices\\threading\\mutex\\misc\\waitone2 test","State":"closed","Body":"This test has been failing randomly in the CI on all architectures\r\nfor a long, long time.\r\n\r\nTracking issue: https://github.com/dotnet/coreclr/issues/6397","Url":"https://github.com/dotnet/coreclr/pull/22439","RelatedDescription":"Closed or merged PR \"Disable baseservices\\threading\\mutex\\misc\\waitone2 test\" (#22439)"},{"Id":"407063136","IsPullRequest":true,"CreatedAt":"2019-02-06T07:24:02","Actor":"BruceForstall","Number":"22444","RawContent":null,"Title":"Disable GThread23 test","State":"closed","Body":"It fails regularly though randomly in the CI.\r\n\r\nTracking issue: https://github.com/dotnet/coreclr/issues/19339","Url":"https://github.com/dotnet/coreclr/pull/22444","RelatedDescription":"Closed or merged PR \"Disable GThread23 test\" (#22444)"},{"Id":"406942411","IsPullRequest":false,"CreatedAt":"2019-02-06T02:54:32","Actor":"BruceForstall","Number":"22430","RawContent":null,"Title":"[Linux/arm64] failure in corefx System.Diagnostics.Process.Tests","State":"closed","Body":"https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/112/consoleFull\r\n\r\n```\r\n04:26:27 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Diagnostics.Process.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Diagnostics.Process.Tests/netcoreapp-Linux-Release-arm64\r\n04:26:27 [37m  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n04:26:27 [m[37m  Discovered:  System.Diagnostics.Process.Tests (found 208 of 268 test cases)\r\n04:26:27 [m[37m  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 46)\r\n04:26:27 [m[33;1m    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n04:26:27 [m[37m      Condition(s) not met: \"IsWindowsNanoServer\"\r\n04:26:27 [mLinux\r\n04:26:27 Linux\r\n04:26:27 Linux\r\n04:26:27 Linux\r\n04:26:27 None of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.\r\n04:26:27 \r\n04:26:27 Unhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n04:26:27    at System.IO.Pipes.PipeStream.WaitForPipeDrain() in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Unix.cs:line 298\r\n04:26:27    at System.Diagnostics.Tests.ProcessTests.<CreateProcessTree>g__SendMessage|202_4(String message, String handleAsString) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/tests/ProcessTests.netcoreapp.cs:line 365\r\n04:26:27    at System.Diagnostics.Tests.ProcessTests.<CreateProcessTree>b__202_8(String c1hs) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/tests/ProcessTests.netcoreapp.cs:line 319\r\n04:26:27 --- End of stack trace from previous location where exception was thrown ---\r\n04:26:27    at RemoteExecutorConsoleApp.Program.Main(String[] args) in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/Common/tests/System/Diagnostics/RemoteExecutorConsoleApp/RemoteExecutorConsoleApp.cs:line 92\r\n04:26:27 \r\n[31;1m    System.Diagnostics.Tests.ProcessTests.Kill_EntireProcessTree_True_EntireTreeTerminated [FAIL]\r\n04:26:27 [m[37m      System.AggregateException : Not all processes in process tree could be terminated. (No such process)\r\n04:26:27 [m[37m      ---- System.ComponentModel.Win32Exception : No such process\r\n04:26:27 [m[30;1m      Stack Trace:\r\n04:26:27 [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs(29,0): at System.Diagnostics.Process.Kill(Boolean entireProcessTree)\r\n04:26:27 [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/tests/ProcessTests.netcoreapp.cs(282,0): at System.Diagnostics.Tests.ProcessTests.Kill_EntireProcessTree_True_EntireTreeTerminated()\r\n04:26:27 [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n04:26:27 [m[37m        ----- Inner Stack Trace -----\r\n04:26:27 [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs(63,0): at System.Diagnostics.Process.Kill()\r\n04:26:27 [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs(106,0): at System.Diagnostics.Process.KillTree()\r\n04:26:27 [m[33;1m    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n04:26:27 [m[37m      Condition(s) not met: \"IsStressModeEnabled\"\r\n04:26:27 [m[37m  Finished:    System.Diagnostics.Process.Tests\r\n04:26:27 [m[37m=== TEST EXECUTION SUMMARY ===\r\n04:26:27 [m[37m   System.Diagnostics.Process.Tests  Total: 259, Errors: 0, Failed: 1, Skipped: 2, Time: 106.765s\r\n04:26:27 [m[m~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Diagnostics.Process.Tests/netcoreapp-Linux-Release-arm64\r\n04:26:27 ----- end 04:26:16 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/22430","RelatedDescription":"Closed issue \"[Linux/arm64] failure in corefx System.Diagnostics.Process.Tests\" (#22430)"},{"Id":"407061005","IsPullRequest":false,"CreatedAt":"2019-02-06T02:48:50","Actor":"BruceForstall","Number":"22443","RawContent":null,"Title":"[Windows/x86][GCStress] Test failure: GC\\API\\GC\\Collect\\Collect.cmd","State":"open","Body":"With:\r\n\r\n```\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_GCStress=0xC\r\nset COMPlus_ZapDisable=1\r\nset COMPlus_ReadyToRun=0\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable/116/consoleFull\r\n\r\nI can repro locally.\r\n\r\n```\r\nBEGIN EXECUTION\r\n \"f:\\gh\\coreclr10\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" Collect.exe\r\nArray is in generation: 0\r\nArray is in generation: 0\r\nTest for GC.Collect() failed!\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/22443","RelatedDescription":"Open issue \"[Windows/x86][GCStress] Test failure: GC\\API\\GC\\Collect\\Collect.cmd\" (#22443)"},{"Id":"407059369","IsPullRequest":false,"CreatedAt":"2019-02-06T02:39:34","Actor":"BruceForstall","Number":"22442","RawContent":null,"Title":"[Windows/x86] corefx tests are all timing out","State":"open","Body":"The Windows x86 corefx test runs have almost all timed out (after 6 hours) since about Jan. 23.\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/\r\n\r\nThe last command run is:\r\n```\r\nbuild.cmd -test -Release /p:OSGroup=Windows_NT /p:ArchGroup=x86   /p:WithoutCategories=IgnoreForCI /p:PreExecutionTestScript=D:\\j\\workspace\\x86_checked_w---fbe14ed2\\SetStressModes.bat\r\n```\r\n\r\n(SetStressModes.bat just contains `set COMPlus_TieredCompilation=0`)\r\n\r\nFrom the log file, it looks like all time is taken by Microsoft.Win32.SystemEventsTests. Here's a log fragment:\r\n```\r\n14:55:16      Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.PowerModeTests.SignalsPowerModeChanged', Elapsed: 05:32:57\r\n14:55:16   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.SessionEndedTests.SignalsSessionEnded', Elapsed: 05:32:57\r\n14:55:16   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers', Elapsed: 05:32:57\r\n14:55:16   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.UserPreferenceTests.SignalsUserPreferenceEventsAsynchronously', Elapsed: 05:32:57\r\n14:57:15      Microsoft.Win32.SystemEvents.Tests: [Long Running Test] 'Microsoft.Win32.SystemEventsTests.PowerModeTests.SignalsPowerModeChanged', Elapsed: 05:34:57\r\n14:57:15   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.SessionEndedTests.SignalsSessionEnded', Elapsed: 05:34:57\r\n14:57:15   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.CreateTimerTests.ConcurrentTimers', Elapsed: 05:34:57\r\n14:57:15   [Long Running Test] 'Microsoft.Win32.SystemEventsTests.UserPreferenceTests.SignalsUserPreferenceEventsAsynchronously', Elapsed: 05:34:57\r\n```\r\n\r\nThe stress modes have the same behavior, e.g.,\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_jitstress1/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_jitstress2/\r\n","Url":"https://github.com/dotnet/coreclr/issues/22442","RelatedDescription":"Open issue \"[Windows/x86] corefx tests are all timing out\" (#22442)"},{"Id":"407050899","IsPullRequest":false,"CreatedAt":"2019-02-06T01:51:49","Actor":"BruceForstall","Number":"22441","RawContent":null,"Title":"Test failure: tracing_runtimeeventsource._runtimeeventsource_runtimeeventsource_._runtimeeventsource_runtimeeventsource_cmd","State":"open","Body":"This test is consistently failing in the x64 Checked Windows test run with\r\n```\r\nCOMPlus_ZapDisable=1\r\nCOMPlus_ReadyToRun=0\r\nCOMPlus_TieredCompilation=0\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_zapdisable/758/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_zapdisable/757/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_zapdisable/756/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_zapdisable/755/consoleFull\r\n\r\nI can't repro it locally when run by itself (not in a full test harness run).\r\n\r\nLooks like the same issue as https://github.com/dotnet/coreclr/issues/18907, but for a different platform.\r\n\r\nFailure:\r\n```\r\ntracing_runtimeeventsource._runtimeeventsource_runtimeeventsource_._runtimeeventsource_runtimeeventsource_cmd [FAIL]\r\n07:09:56         \r\n07:09:56   Unhandled Exception: System.Exception: Condition 'listener.EventCount > 0' is not true\r\n07:09:56            at Tracing.Tests.Common.Assert.True(String name, Boolean condition) in D:\\j\\workspace\\x64_checked_w---fa5d14d7\\tests\\src\\tracing\\common\\Assert.cs:line 15\r\n07:09:56            at Tracing.Tests.RuntimeEventSourceTest.Main(String[] args) in D:\\j\\workspace\\x64_checked_w---fa5d14d7\\tests\\src\\tracing\\runtimeeventsource\\RuntimeEventSourceTest.cs:line 35\r\n07:09:56   \r\n07:09:56   \r\n07:09:56   Return code:      1\r\n07:09:56   Raw output file:      D:\\j\\workspace\\x64_checked_w---fa5d14d7\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\tracing.runtimeeventsource\\runtimeeventsource\\runtimeeventsource.output.txt\r\n07:09:56   Raw output:\r\n07:09:56   BEGIN EXECUTION\r\n07:09:56          \"D:\\j\\workspace\\x64_checked_w---fa5d14d7\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" runtimeeventsource.exe \r\n07:09:56         [Simple] ThreadID = 8036 ID = 200 Name = IncreaseMemoryPressure\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.4330247\r\n07:09:56         \tName = \"BytesAllocated\" Value = \"3816\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 8036 ID = 70 Name = ThreadCreating\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.6098274\r\n07:09:56         \tName = \"ID\" Value = \"110079818128\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 85 Name = ThreadCreated\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.2515891\r\n07:09:56         \tName = \"ManagedThreadID\" Value = \"110079818128\"\r\n07:09:56         \tName = \"AppDomainID\" Value = \"109631519376\"\r\n07:09:56         \tName = \"Flags\" Value = \"0\"\r\n07:09:56         \tName = \"ManagedThreadIndex\" Value = \"5\"\r\n07:09:56         \tName = \"OSThreadID\" Value = \"7196\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 71 Name = ThreadRunning\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.2552762\r\n07:09:56         \tName = \"ID\" Value = \"110079818128\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 145 Name = MethodJittingStarted_V1\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.3397157\r\n07:09:56         \tName = \"MethodID\" Value = \"140719860519720\"\r\n07:09:56         \tName = \"ModuleID\" Value = \"140719855919136\"\r\n07:09:56         \tName = \"MethodToken\" Value = \"100682957\"\r\n07:09:56         \tName = \"MethodILSize\" Value = \"133\"\r\n07:09:56         \tName = \"MethodNamespace\" Value = \"System.Diagnostics.Tracing.EventPipeEventDispatcher\"\r\n07:09:56         \tName = \"MethodName\" Value = \"TimeStampToDateTime\"\r\n07:09:56         \tName = \"MethodSignature\" Value = \"instance value class System.DateTime  (int64)\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 143 Name = MethodLoadVerbose_V2\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.3350550\r\n07:09:56         \tName = \"MethodID\" Value = \"140719860519720\"\r\n07:09:56         \tName = \"ModuleID\" Value = \"140719855919136\"\r\n07:09:56         \tName = \"MethodStartAddress\" Value = \"140719862058224\"\r\n07:09:56         \tName = \"MethodSize\" Value = \"300\"\r\n07:09:56         \tName = \"MethodToken\" Value = \"100682957\"\r\n07:09:56         \tName = \"MethodFlags\" Value = \"8\"\r\n07:09:56         \tName = \"MethodNamespace\" Value = \"System.Diagnostics.Tracing.EventPipeEventDispatcher\"\r\n07:09:56         \tName = \"MethodName\" Value = \"TimeStampToDateTime\"\r\n07:09:56         \tName = \"MethodSignature\" Value = \"instance value class System.DateTime  (int64)\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \tName = \"ReJITID\" Value = \"\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 190 Name = MethodILToNativeMap\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.3351065\r\n07:09:56         \tName = \"MethodID\" Value = \"140719860519720\"\r\n07:09:56         \tName = \"ReJITID\" Value = \"0\"\r\n07:09:56         \tName = \"MethodExtent\" Value = \"0\"\r\n07:09:56         \tName = \"CountOfMapEntries\" Value = \"16\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 7196 ID = 145 Name = MethodJittingStarted_V1\r\n07:09:56         TimeStamp: 2/5/2019 7:08:38 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:03.3391564\r\n07:09:56         \tName = \"MethodID\" Value = \"140719862901056\"\r\n07:09:56         \tName = \"ModuleID\" Value = \"140719855919136\"\r\n07:09:56         \tName = \"MethodToken\" Value = \"100682985\"\r\n07:09:56         \tName = \"MethodILSize\" Value = \"903\"\r\n07:09:56         \tName = \"MethodNamespace\" Value = \"System.Diagnostics.Tracing.EventPipePayloadDecoder\"\r\n07:09:56         \tName = \"MethodName\" Value = \"DecodePayload\"\r\n07:09:56         \tName = \"MethodSignature\" Value = \"class System.Object[]  (value class EventMetadata&,value class System.ReadOnlySpan`1<unsigned int8>)\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 8036 ID = 145 Name = MethodJittingStarted_V1\r\n07:09:56         TimeStamp: 2/5/2019 7:08:39 AM\r\n07:09:56         LocalTime: 2/5/2019 7:08:42 AM\r\n07:09:56         Difference: 00:00:02.9785988\r\n07:09:56         \tName = \"MethodID\" Value = \"140719860111216\"\r\n07:09:56         \tName = \"ModuleID\" Value = \"140719855919136\"\r\n07:09:56         \tName = \"MethodToken\" Value = \"100671615\"\r\n07:09:56         \tName = \"MethodILSize\" Value = \"25\"\r\n07:09:56         \tName = \"MethodNamespace\" Value = \"System.Threading.Tasks.Task\"\r\n07:09:56         \tName = \"MethodName\" Value = \"Run\"\r\n07:09:56         \tName = \"MethodSignature\" Value = \"class System.Threading.Tasks.Task  (class System.Action)\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \r\n07:09:56   \r\n07:09:56         [Simple] ThreadID = 8036 ID = 143 Name = MethodLoadVerbose_V2\r\n07:09:56         TimeStamp: 2/5/2019 7:08:39 AM\r\n07:09:56         LocalTime: 2/5/2019 7:09:55 AM\r\n07:09:56         Difference: 00:01:15.6907758\r\n07:09:56         \tName = \"MethodID\" Value = \"140719860111216\"\r\n07:09:56         \tName = \"ModuleID\" Value = \"140719855919136\"\r\n07:09:56         \tName = \"MethodStartAddress\" Value = \"140719862059616\"\r\n07:09:56         \tName = \"MethodSize\" Value = \"61\"\r\n07:09:56         \tName = \"MethodToken\" Value = \"100671615\"\r\n07:09:56         \tName = \"MethodFlags\" Value = \"8\"\r\n07:09:56         \tName = \"MethodNamespace\" Value = \"System.Threading.Tasks.Task\"\r\n07:09:56         \tName = \"MethodName\" Value = \"Run\"\r\n07:09:56         \tName = \"MethodSignature\" Value = \"class System.Threading.Tasks.Task  (class System.Action)\"\r\n07:09:56         \tName = \"ClrInstanceID\" Value = \"0\"\r\n07:09:56         \tName = \"ReJITID\" Value = \"\"\r\n07:09:57         \r\n07:09:57   \r\n07:09:57         Expected: 100\r\n07:09:57         Actual: -532462766\r\n07:09:57         END EXECUTION - FAILED\r\n07:09:57         FAILED\r\n07:09:57         Test Harness Exitcode is : 1\r\n07:09:57         \r\n07:09:57   To run the test:\r\n07:09:57   > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---fa5d14d7\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n07:09:57   > D:\\j\\workspace\\x64_checked_w---fa5d14d7\\bin\\tests\\Windows_NT.x64.Checked\\tracing\\runtimeeventsource\\runtimeeventsource\\runtimeeventsource.cmd\r\n07:09:57   \r\n07:09:57         Expected: True\r\n07:09:57         Actual:   False\r\n07:09:57         Stack Trace:\r\n07:09:57           D:\\j\\workspace\\x64_checked_w---fa5d14d7\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\tracing.runtimeeventsource\\tracing.runtimeeventsource.XUnitWrapper.cs(109,0): at tracing_runtimeeventsource._runtimeeventsource_runtimeeventsource_._runtimeeventsource_runtimeeventsource_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/22441","RelatedDescription":"Open issue \"Test failure: tracing_runtimeeventsource._runtimeeventsource_runtimeeventsource_._runtimeeventsource_runtimeeventsource_cmd\" (#22441)"},{"Id":"407047095","IsPullRequest":false,"CreatedAt":"2019-02-06T01:32:06","Actor":"BruceForstall","Number":"22440","RawContent":null,"Title":"Test failure: am07abandonmultiplemutex.cmd","State":"open","Body":"Windows x64 Checked with `COMPlus_TieredCompilation=1`\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_tieredcompilation/190/consoleFull\r\n\r\n```\r\nbaseservices_threading._mutex_abandonedmutex_am07abandonmultiplemutex_am07abandonmultiplemutex_._mutex_abandonedmutex_am07abandonmultiplemutex_am07abandonmultiplemutex_cmd [FAIL]\r\n05:29:04         \r\n05:29:04   \r\n05:29:04   Return code:      1\r\n05:29:04   Raw output file:      D:\\j\\workspace\\x64_checked_w---f9691bc8\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\baseservices.threading\\mutex\\abandonedmutex\\am07abandonmultiplemutex\\am07abandonmultiplemutex.output.txt\r\n05:29:04   Raw output:\r\n05:29:04   BEGIN EXECUTION\r\n05:29:04          \"D:\\j\\workspace\\x64_checked_w---f9691bc8\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" am07abandonmultiplemutex.exe \r\n05:29:04         Name created: 7393b63d-28c0-409a-8e32-174989515d51\r\n05:29:04         Name created: 1d139df3-a00a-4fb7-b7dc-bd520ca37f06\r\n05:29:04         Name created: 828f36b0-a6ba-45ac-a696-5e5939b980b9\r\n05:29:04         Name created: 4dc35681-4af6-4cbb-9bd2-57f3f309edc0\r\n05:29:04         Name created: 2ce62b09-82eb-4938-bd53-51a8df7128b9\r\n05:29:04         Name created: 3010c960-38e3-439f-8cf3-6ea823417b77\r\n05:29:04         Name created: 90198840-6e33-4e05-86ff-77f8a593486b\r\n05:29:04         Name created: a2455d51-1cbb-4507-82f2-f16e5c81c835\r\n05:29:04         Name created: ee88742a-f332-4cde-a6b5-fc5c0e2ffb5d\r\n05:29:04         Name created: 03feda80-2dba-4302-aa72-243ab932d9f5\r\n05:29:04         Name created: 8aa88c57-77bb-417e-9061-7a8e7ee3e457\r\n05:29:04         Name created: 3f7b4e3d-918f-491c-9806-81d849bd675b\r\n05:29:04         Name created: 73e9f845-a54f-4ad0-bb13-8166b51a767f\r\n05:29:04         Name created: dae7c351-243b-4a60-9879-1430469a1ff5\r\n05:29:04         Name created: 18a274a0-834d-438d-918f-253d9bc5e375\r\n05:29:04         Name created: a027583c-501f-4135-b8a1-9ffc78363087\r\n05:29:04         Name created: a79b93e4-03c5-47b4-8518-2b010ee59fef\r\n05:29:04         Name created: 0c918333-8452-4e88-a16c-ee6d6179ebc5\r\n05:29:04         Name created: 3d242cbb-a14a-44f8-abe4-6a23fd26588c\r\n05:29:04         Name created: 25a317f4-cc9a-48ee-8eaa-97615ba8ccf2\r\n05:29:04         Name created: 8d814b5e-8fb5-44ea-ad12-605087d4f602\r\n05:29:04         Name created: 7a8a24e3-6a24-4c1f-ae2c-2357d149e749\r\n05:29:04         Name created: a70174cb-6aa8-4440-a3fa-157b1320a6bd\r\n05:29:04         Name created: 11973433-afab-4674-a55e-764bbdc0fe8e\r\n05:29:04         Name created: 5fe9e6dc-6036-4d6c-9917-749e6bfd4346\r\n05:29:04         Name created: 0af52cc6-5436-4ebf-b06c-19bc51c0b5d3\r\n05:29:04         Name created: 27dd7a58-e46e-40bf-98fd-d65ab2de6dcb\r\n05:29:04         Name created: c5cbd591-6c8f-46d8-a89d-701edfc75157\r\n05:29:04         Name created: 42628ea7-eda8-4315-b312-93f8aae8b1dd\r\n05:29:04         Name created: 28c45fae-4d6f-484a-8efd-2feb5ffe75fb\r\n05:29:04         Name created: 0f4dea27-9079-4671-8cde-19246e052fa9\r\n05:29:04         Name created: 757be747-29e0-45c5-bac3-a6f4aed16653\r\n05:29:04         Name created: 89c470d3-fff6-4876-8248-01251a003832\r\n05:29:04         Name created: 4a917798-2d3a-4c9d-b85e-4148fe5bc38e\r\n05:29:04         Name created: df964d1e-5969-48cc-a5a9-e84b6b807e29\r\n05:29:04         Name created: 5ca597d3-b6fd-4a01-beba-2ee1377df410\r\n05:29:04         Name created: eb448a36-f362-40ff-9fcf-f11c1a663cc2\r\n05:29:04         Name created: 3cc1a2b7-a118-422c-957d-19f9fef2ba55\r\n05:29:04         Name created: 8d450fd1-4f21-44fc-a518-2b8fdd1e8742\r\n05:29:04         Name created: 83d0b88c-448f-417b-8e60-19d6e01f4c19\r\n05:29:04         Name created: f478d5f1-0877-43c4-bcc4-2b103d457cb5\r\n05:29:04         Name created: 28f7f7b2-a0ba-4e95-9065-d3f7e9a759dc\r\n05:29:04         Name created: 3c1f5d54-f439-4f0c-8aa6-237cfde84795\r\n05:29:04         Name created: 0cc6319d-d67e-452b-b957-45f7266d99ec\r\n05:29:04         Name created: 87e70c26-b158-42f9-8f17-81349d500048\r\n05:29:04         Name created: 79e1b6db-f2b5-41f8-a12e-4c78e2a741f5\r\n05:29:04         Name created: 99d1583a-ba92-493a-bf3c-0fc5e19ad952\r\n05:29:04         Name created: 07a30d39-be72-4d3e-87d6-a9fa03dec7af\r\n05:29:04         Name created: 231d9574-8f7d-49a6-bd39-1e5903d4e34b\r\n05:29:04         Name created: bbd93512-032e-4ea7-9e5b-91365c9d9eec\r\n05:29:04         Name created: 6175f227-2667-434a-95f0-78413365793e\r\n05:29:04         Name created: c2d11d0b-7930-480b-846b-bb6077e18140\r\n05:29:04         Name created: c28d756a-e2aa-4401-bcb7-cb089eaf07cf\r\n05:29:04         Name created: f7f0aaa8-5b12-4eeb-a4fa-5044ad191396\r\n05:29:04         Name created: 8a6e24fd-b58f-4630-8806-c9f2e0dd8b6a\r\n05:29:04         Name created: e729d268-09c3-49fc-b9a7-a84da75078e6\r\n05:29:04         Name created: 11ffb2b5-a745-4271-8104-ecd1bc6bd86f\r\n05:29:04         Name created: bfc82e96-f028-41ef-8af9-1586abdc61c9\r\n05:29:04         Name created: eed8949f-9ebc-4d5a-a771-564c47778861\r\n05:29:04         Name created: 73b12ad1-a444-4b7e-8ad9-fb329c433b98\r\n05:29:04         Name created: a91316d2-170c-4b19-9327-b1a384ddbf49\r\n05:29:04         Name created: 5bb51174-be35-4d01-a9c9-ddf43dde0da6\r\n05:29:04         Name created: 0e2a4a7a-b764-44d9-9384-29f91e87b1d4\r\n05:29:04         Name created: ff0b380c-3e1b-447d-88b8-974772ce06cb\r\n05:29:04         Blocking 0\r\n05:29:04         Blocking 1\r\n05:29:04         Blocking 2\r\n05:29:04         Blocking 3\r\n05:29:04         Blocking 4\r\n05:29:04         Blocking 5\r\n05:29:04         6\r\n05:29:04         8\r\n05:29:04         10\r\n05:29:04         12\r\n05:29:04         14\r\n05:29:04         Waiting...\r\n05:29:04         No exception thrown - 7\r\n05:29:04         Test Failed\r\n05:29:04         Expected: 100\r\n05:29:04         Actual: -1\r\n05:29:04         END EXECUTION - FAILED\r\n05:29:04         FAILED\r\n05:29:04         Test Harness Exitcode is : 1\r\n05:29:04         \r\n05:29:04   To run the test:\r\n05:29:04   > set CORE_ROOT=D:\\j\\workspace\\x64_checked_w---f9691bc8\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n05:29:04   > D:\\j\\workspace\\x64_checked_w---f9691bc8\\bin\\tests\\Windows_NT.x64.Checked\\baseservices\\threading\\mutex\\abandonedmutex\\am07abandonmultiplemutex\\am07abandonmultiplemutex.cmd\r\n05:29:04   \r\n05:29:04         Expected: True\r\n05:29:04         Actual:   False\r\n05:29:04         Stack Trace:\r\n05:29:04           D:\\j\\workspace\\x64_checked_w---f9691bc8\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\baseservices.threading\\baseservices.threading.XUnitWrapper.cs(17329,0): at baseservices_threading._mutex_abandonedmutex_am07abandonmultiplemutex_am07abandonmultiplemutex_._mutex_abandonedmutex_am07abandonmultiplemutex_am07abandonmultiplemutex_cmd()\r\n```\r\n\r\nI couldn't reproduce this failure locally.\r\n","Url":"https://github.com/dotnet/coreclr/issues/22440","RelatedDescription":"Open issue \"Test failure: am07abandonmultiplemutex.cmd\" (#22440)"},{"Id":"407012017","IsPullRequest":false,"CreatedAt":"2019-02-05T22:59:00","Actor":"BruceForstall","Number":"22436","RawContent":null,"Title":"[JitStress=2] Assertion failed 'expTyp == cseLclVarTyp'","State":"open","Body":"With `COMPlus_JitStress=2`, these tests fail on Windows x64:\r\n```\r\nInterop\\PInvoke\\BestFitMapping\\Char\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\nInterop\\PInvoke\\BestFitMapping\\Char\\Assembly_False_False\\Assembly_False_False\\Assembly_False_False.cmd\r\nInterop\\PInvoke\\BestFitMapping\\LPStr\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\nInterop\\PInvoke\\BestFitMapping\\LPStr\\Assembly_False_False\\Assembly_False_False\\Assembly_False_False.cmd\r\n```\r\nwith:\r\n```\r\nAssert failure(PID 101632 [0x00018d00], Thread: 102816 [0x191a0]): Assertion failed 'expTyp == cseLclVarTyp' in 'ILStubClass:IL_STUB_PInvoke(byref):bool' (IL size 216)\r\n\r\n    File: f:\\gh\\coreclr10\\src\\jit\\optcse.cpp Line: 2108\r\n    Image: f:\\gh\\coreclr10\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nOn x86, only these two fail:\r\n```\r\nInterop\\PInvoke\\BestFitMapping\\Char\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\nInterop\\PInvoke\\BestFitMapping\\LPStr\\AFT_PFT\\AFT_PFT\\AFT_PFT.cmd\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_jitstress2/753/\r\n","Url":"https://github.com/dotnet/coreclr/issues/22436","RelatedDescription":"Open issue \"[JitStress=2] Assertion failed 'expTyp == cseLclVarTyp'\" (#22436)"},{"Id":"407006679","IsPullRequest":true,"CreatedAt":"2019-02-05T22:40:39","Actor":"echesakovMSFT","Number":"22435","RawContent":null,"Title":"Treat CLRTestExecutionArguments as an array in generated Bash scripts","State":"open","Body":"This fixes the following issues with generated test runners (Bash scripts):\r\n1. When a test project has `CLRTestKind=\"RunOnly\"` during the test run another script got called here\r\nhttps://github.com/dotnet/coreclr/blob/a3073f2e280c8ad767d1f5b4f566cac07b3fec38/tests/src/CLRTest.Execute.Bash.targets#L266-L274\r\nSince calling /bin/sh directly does not obey a shebang this produces the following error \r\n```\r\n../ThreadStartChar/ThreadStartChar.sh: 167: ../ThreadStartChar/ThreadStartChar.sh: shopt: not found\r\n```\r\nsince shopt is Bash builtin.\r\n\r\nInstead we should call with /usr/bin/env bash.\r\n\r\n2. **ThreadStartString_1** was failing in https://github.com/dotnet/coreclr/issues/3627 with the following error:\r\n```\r\nBEGIN EXECUTION\r\nexport CDPATH=.\r\n/bin/sh ../ThreadStartString/ThreadStartString.sh\r\nBEGIN EXECUTION\r\n../ThreadStartString/ThreadStartString.sh: 167: ../ThreadStartString/ThreadStartString.sh: shopt: not found\r\n/home/echesako/git/coreclr/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ThreadStartString.exe \" \"\r\nUSAGE: ThreadStartString <string>|null\r\n\r\nExpected: 100\r\nActual: 255\r\nEND EXECUTION - FAILED\r\nExpected: 0\r\nActual: 1\r\nEND EXECUTION - FAILED\r\n```\r\nIt turns out that this is due to $(CLRTestExecutionArguments) being treated as a string inside the Bash script:\r\nhttps://github.com/dotnet/coreclr/blob/a3073f2e280c8ad767d1f5b4f566cac07b3fec38/tests/src/CLRTest.Execute.Bash.targets#L117\r\n And in this example, since $CLRTestExecutionArguments contains only one space character was simply ignored during the call:\r\nhttps://github.com/dotnet/coreclr/blob/a3073f2e280c8ad767d1f5b4f566cac07b3fec38/tests/src/CLRTest.Execute.Bash.targets#L258-L259\r\n\r\nOn Windows the tests passes with the following output:\r\n```\r\nBEGIN EXECUTION\r\n cmd /c ..\\ThreadStartString\\ThreadStartString.cmd\r\nBEGIN EXECUTION\r\n \"D:\\AfterSystemPrivateCoreLibR2R\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" ThreadStartString.exe \" \" \r\n \r\nTest Passed\r\nExpected: 100\r\nActual: 100\r\nEND EXECUTION - PASSED\r\nPASSED\r\nExpected: 0\r\nActual: 0\r\nEND EXECUTION - PASSED\r\nPASSED\r\nTest Harness Exitcode is : 0\r\n```\r\n\r\n3.  **ThreadStartString_2** was not failing, but `<CLRTestExecutionArguments>\"\"</CLRTestExecutionArguments>` was treated as a string containing two double-quote characters:\r\n```\r\nBEGIN EXECUTION\r\nexport CDPATH=/home/echesako/git/coreclr/bin/tests/Linux.x64.Checked/baseservices/threading/paramthreadstart/ThreadStartString_2\r\n/bin/sh ../ThreadStartString/ThreadStartString.sh\r\nBEGIN EXECUTION\r\n/home/echesako/git/coreclr/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ThreadStartString.exe \"\"\r\n\"\"\r\nTest Passed\r\nExpected: 100\r\nActual: 100\r\nEND EXECUTION - PASSED\r\nExpected: 0\r\nActual: 0\r\nEND EXECUTION - PASSED\r\nTest Harness Exitcode is : 0\r\n```\r\nwhile on Windows the test runs with an empty string as an argument:\r\n```\r\nBEGIN EXECUTION\r\n cmd /c ..\\ThreadStartString\\ThreadStartString.cmd\r\nBEGIN EXECUTION\r\n \"D:\\AfterSystemPrivateCoreLibR2R\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" ThreadStartString.exe \"\" \r\n\r\nTest Passed\r\nExpected: 100\r\nActual: 100\r\nEND EXECUTION - PASSED\r\nPASSED\r\nExpected: 0\r\nActual: 0\r\nEND EXECUTION - PASSED\r\nPASSED\r\nTest Harness Exitcode is : 0\r\n```\r\n\r\nI propose a solution to treat $(CLRTestExecutionArguments) as an array to fix both 2) and 3).\r\nThe only problem here that there is no elegant way to pass an array variable $CLRTestExecutionArguments between two scripts. Instead I decided to pass these values to the parent script via command line.\r\n\r\n**After the change:**\r\n**ThreadStartString_1**  passes\r\n```\r\nBEGIN EXECUTION\r\nexport CDPATH=/opt/code/bin/tests/Linux.x64.Checked/baseservices/threading/paramthreadstart/ThreadStartString_1\r\n/usr/bin/env bash ../ThreadStartString/ThreadStartString.sh ' '\r\nBEGIN EXECUTION\r\n/opt/code/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ThreadStartString.exe ' '\r\n \r\nTest Passed\r\nExpected: 100\r\nActual: 100\r\nEND EXECUTION - PASSED\r\nExpected: 0\r\nActual: 0\r\nEND EXECUTION - PASSED\r\nTest Harness Exitcode is : 0\r\n```\r\n\r\n**ThreadStartString_2** behaves as a Windows counterpart\r\n```\r\nBEGIN EXECUTION\r\nexport CDPATH=/opt/code/bin/tests/Linux.x64.Checked/baseservices/threading/paramthreadstart/ThreadStartString_2\r\n/usr/bin/env bash ../ThreadStartString/ThreadStartString.sh ''\r\nBEGIN EXECUTION\r\n/opt/code/bin/tests/Linux.x64.Checked/Tests/Core_Root/corerun ThreadStartString.exe ''\r\n\r\nTest Passed\r\nExpected: 100\r\nActual: 100\r\nEND EXECUTION - PASSED\r\nExpected: 0\r\nActual: 0\r\nEND EXECUTION - PASSED\r\nTest Harness Exitcode is : 0\r\n```\r\n\r\n\r\nCloses https://github.com/dotnet/coreclr/issues/3627","Url":"https://github.com/dotnet/coreclr/pull/22435","RelatedDescription":"Open PR \"Treat CLRTestExecutionArguments as an array in generated Bash scripts\" (#22435)"},{"Id":"406996120","IsPullRequest":true,"CreatedAt":"2019-02-05T22:07:57","Actor":"tannergooding","Number":"22434","RawContent":null,"Title":"Fixing Utf8Formatter.Float to support all the same format specifiers as the utf16 formatter.","State":"open","Body":"Given that the Utf8Formatter for float/double currently just forwards to the Utf16 implementation, this just removes the checks around the given `StandardFormat` and just forwards it down as well. It allows us to support all the same format specifiers that the Utf16 implementation supports.\r\nIt would be nice to have similar fixes for the other types Utf8Formatter supports, but those (for the most part) don't forward and are instead reimplemented on the Utf8 side, so the fix is not as trivial.\r\n\r\nThis resolves https://github.com/dotnet/coreclr/issues/21273","Url":"https://github.com/dotnet/coreclr/pull/22434","RelatedDescription":"Open PR \"Fixing Utf8Formatter.Float to support all the same format specifiers as the utf16 formatter.\" (#22434)"},{"Id":"406947933","IsPullRequest":true,"CreatedAt":"2019-02-05T21:27:22","Actor":"BruceForstall","Number":"22431","RawContent":null,"Title":"Disable failing Linux/arm64 corefx tests","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/22431","RelatedDescription":"Closed or merged PR \"Disable failing Linux/arm64 corefx tests\" (#22431)"},{"Id":"406952410","IsPullRequest":true,"CreatedAt":"2019-02-05T20:46:36","Actor":"BruceForstall","Number":"22432","RawContent":null,"Title":"Disable Windows arm64 corefx cron jobs","State":"closed","Body":"These currently all fail with timeout. They also take way too much time\r\nto run. We have good Linux/arm64 corefx test coverage already.\r\n\r\nThe issue of these runs being slow is tracked by\r\nhttps://github.com/dotnet/coreclr/issues/21236.","Url":"https://github.com/dotnet/coreclr/pull/22432","RelatedDescription":"Closed or merged PR \"Disable Windows arm64 corefx cron jobs\" (#22432)"},{"Id":"406885167","IsPullRequest":true,"CreatedAt":"2019-02-05T20:40:21","Actor":"Dotnet-GitSync-Bot","Number":"22428","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/22428","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#22428)"},{"Id":"406921308","IsPullRequest":true,"CreatedAt":"2019-02-05T20:04:41","Actor":"echesakovMSFT","Number":"22429","RawContent":null,"Title":"Use Jenkins for Linux/arm32 testing","State":"closed","Body":"As discussed in https://github.com/dotnet/core-eng/issues/5150 to unblock running stress testing on Linux/arm32","Url":"https://github.com/dotnet/coreclr/pull/22429","RelatedDescription":"Closed or merged PR \"Use Jenkins for Linux/arm32 testing\" (#22429)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"407510534","IsPullRequest":true,"CreatedAt":"2019-02-07T01:50:24","Actor":"peterhuene","Number":"10720","RawContent":null,"Title":"Implement child process reaping. ","State":"open","Body":"This PR implements child process reaping in the event of termination\r\nof a CLI command.\r\n\r\nOn Windows, the child process is added to a job object that is set to\r\nterminate the child (and its tree) upon the termination of the parent\r\ndotnet process.  On Windows 7 and Server 2008, the dotnet process cannot\r\nalready be associated with a job object for the reaping to occur.  On\r\nlater Windows versions, a nested job will be created so the reaping will\r\nstill occur.  After the child process exits, the job object is closed\r\nwithout terminating the remaining processes in the job; this allows for\r\nthe child process to spawn additional processes that outlive the child.\r\n\r\nOn POSIX operating systems, a SIGTERM is intercepted and forwarded on to\r\nthe child process only. Like the SIGINT forwarding, it is up to the\r\nchild process to decide what to do with the SIGTERM signal (the default\r\nis to abort).\r\n\r\nAdditionally, this fix further expands upon the previous fix to `dotnet\r\nrun` to properly handle SIGINT so that all child processes now benefit\r\nfrom the fixed behavior.  This means MSBuild-forwarding commands like\r\n`dotnet build` now behave as if MSBuild were directly being executed with\r\nrespect to Ctrl-C handling.\r\n\r\nFixes #7426.","Url":"https://github.com/dotnet/cli/pull/10720","RelatedDescription":"Open PR \"Implement child process reaping. \" (#10720)"},{"Id":"407463348","IsPullRequest":true,"CreatedAt":"2019-02-06T22:37:21","Actor":"nguerrera","Number":"10719","RawContent":null,"Title":"Fix VS option to disallow previews in resolver","State":"open","Body":"When the resolver was retargeted to net472, #if NET46 became unused, causing the default x-plat behavior of never disallowing previews to be used.\r\n\r\nThis had not been caught because:\r\n\r\n1. VS 16 is the only version with a resolver having this bug and it is still in preview and therefore grays out the option to disallow previews of SDK.\r\n\r\n2. VSSettings have to be mocked in unit tests\r\n\r\nAlso:\r\n\r\n* Fix unnecessary deployment of embedded Microsoft.VisualStudio.Setup.Configuration.Interop.\r\n* Remove explicit package dependency on NETStandard.Library on the unofficial nupkg of resolver\r\n* Remove unnecessary unused #if NET46/NET451 that can now use the same API on net472 as netstandard/netcoreapp\r\n","Url":"https://github.com/dotnet/cli/pull/10719","RelatedDescription":"Open PR \"Fix VS option to disallow previews in resolver\" (#10719)"},{"Id":"407017684","IsPullRequest":true,"CreatedAt":"2019-02-06T21:33:36","Actor":"nguerrera","Number":"10712","RawContent":null,"Title":"Localize MSBuild SDK resolver","State":"closed","Body":"Fix #9553","Url":"https://github.com/dotnet/cli/pull/10712","RelatedDescription":"Closed or merged PR \"Localize MSBuild SDK resolver\" (#10712)"},{"Id":"407381667","IsPullRequest":true,"CreatedAt":"2019-02-06T21:32:59","Actor":"livarcocc","Number":"10718","RawContent":null,"Title":"Reverting NuGet to a 16.0 P2 state.","State":"closed","Body":"This will put us back to the same state we currently are regarding NuGet but with newer Roslyn and FSharp.","Url":"https://github.com/dotnet/cli/pull/10718","RelatedDescription":"Closed or merged PR \"Reverting NuGet to a 16.0 P2 state.\" (#10718)"},{"Id":"407380584","IsPullRequest":true,"CreatedAt":"2019-02-06T20:40:53","Actor":"livarcocc","Number":"10717","RawContent":null,"Title":"Reverting NuGet to a 16.0 P2 state.","State":"closed","Body":"This will put us back to the same state we currently are regarding NuGet but with newer Roslyn and FSharp.","Url":"https://github.com/dotnet/cli/pull/10717","RelatedDescription":"Closed or merged PR \"Reverting NuGet to a 16.0 P2 state.\" (#10717)"},{"Id":"407091227","IsPullRequest":true,"CreatedAt":"2019-02-06T19:12:47","Actor":"wli3","Number":"10713","RawContent":null,"Title":"Fixdotnetnugetparsing","State":"closed","Body":"https://github.com/dotnet/cli/pull/10380","Url":"https://github.com/dotnet/cli/pull/10713","RelatedDescription":"Closed or merged PR \"Fixdotnetnugetparsing\" (#10713)"},{"Id":"407096579","IsPullRequest":false,"CreatedAt":"2019-02-06T18:18:45","Actor":"jonathann92","Number":"10714","RawContent":null,"Title":"Dotnet tools not found when using xargs","State":"closed","Body":"Hi my use case is that I have multiple test projects in one folder and I would like to run all the unit tests. I am using coverlet dotnet tool to run the unit tests and gather code coverage information.\r\n\r\n\r\n## Steps to reproduce\r\n```\r\ndotnet tool install -g dotnetsay --version 2.0.0 # install dotnetsay\r\ndotnetsay # should output something\r\necho hi | xargs dotnetsay # this will output \"xargs: dotnetsay: No such file or directory\"\r\nwhich dotnetsay # this outputs nothing. But it should output the dotnet tools path\r\n```\r\n\r\n\r\n## Expected  behavior\r\n\"echo hi | xargs dotnetsay\" should run the dotnetsay tool\r\n\"which dotnetsay\" should print out the dotnet tools path\r\n\r\n## Actual behavior\r\n\"echo hi | xargs dotnetsay\"  will output \"xargs: dotnetsay: No such file or directory\"\r\n\"which dotnetsay\" prints out nothing\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.102\r\n Commit:    96ff75a873\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.102/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [/usr/local/share/dotnet/sdk]\r\n  2.2.102 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10714","RelatedDescription":"Closed issue \"Dotnet tools not found when using xargs\" (#10714)"},{"Id":"407294063","IsPullRequest":true,"CreatedAt":"2019-02-06T15:37:37","Actor":"singhsarab","Number":"10716","RawContent":null,"Title":"Updating 2.2 test templates","State":"open","Body":"Updating the test templates for net 2.2x with precendence fix.\r\n","Url":"https://github.com/dotnet/cli/pull/10716","RelatedDescription":"Open PR \"Updating 2.2 test templates\" (#10716)"},{"Id":"407224876","IsPullRequest":true,"CreatedAt":"2019-02-06T13:02:24","Actor":"dotnet-maestro[bot]","Number":"10715","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10715","RelatedDescription":"Open PR \"Update dependencies from dotnet/arcade\" (#10715)"},{"Id":"406400501","IsPullRequest":false,"CreatedAt":"2019-02-06T06:13:38","Actor":"Zeroks77","Number":"10701","RawContent":null,"Title":"dotnet tool install from azure devops failed","State":"closed","Body":"## Steps to reproduce\r\n\r\n    1. Ensure .NET SDK 2.2.103 is installed\r\n    2. ```dotnet tool install --add-source \"https://pkgs.dev.azure.com/account/_packaging/feedname/nuget/v3/index.json\" --global ACConfigbuilder```\r\n\r\n## Expected  behavior\r\n\r\nTool \"acconfigbuilder\" (Version 1.1.0) was successfully installed.\r\n\r\n## Actual behavior\r\n\r\n```bash\r\nC:\\Program Files\\dotnet\\sdk\\2.2.103\\NuGet.targets(114,5): error : Failed to retrieve information about 'acconfigbuilder' from remote source 'https://pkgs.dev.azure.com/dominikmangatter/_packaging/artifact_ACB/nuget/v3/index.json'. [C:\\Users\\Tester\\AppData\\Local\\Temp\\h2vj5tjo.mmy\\restore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.103\\NuGet.targets(114,5): error : Response status code does not indicate success: 401 (Unauthorized). [C:\\Users\\Tester\\AppData\\Local\\Temp\\h2vj5tjo.mmy\\restore.csproj]\r\n```\r\n\r\nThe tool package could not be restored.\r\n\r\n## Environment data\r\n\r\n```dotnet --info```output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.103\r\n Commit:    8edbc2570a\r\n\r\nEnvironment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.103\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.1\r\n  Commit:  878dd11e62\r\n\r\n.NET Core SDKs installed:\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n## Notes\r\n\r\nHere is the sample ```NuGet.config```\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n <packageSources>\r\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\r\n    <clear />\r\n    <add key=\"MyFeed\" value=\"https://pkgs.dev.azure.com/dominikmangatter/_packaging/artifact_ACB/nuget/v3/index.json\" />\r\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />    \r\n </packageSources>\r\n</configuration>\r\n```\r\n\r\nThe command ```dotnet restore --interactive``` also had no effect and led to the same error.\r\nNote that if you try to use the CredentialProvider.VSS the ```--interactive``` option is not available.\r\n\r\n## My workaround\r\n\r\n1. create a dummy project with dotnet new console.\r\n2. create a nuget.config with dotnet new nugetconfig.\r\n3. now add your own feed to your nuget in the nuget.config.\r\n4. now you can perform dotnet restore --interactive and authenticate yourself.\r\n5. your nuget should now be configured.","Url":"https://github.com/dotnet/cli/issues/10701","RelatedDescription":"Closed issue \"dotnet tool install from azure devops failed\" (#10701)"},{"Id":"406787609","IsPullRequest":false,"CreatedAt":"2019-02-05T17:44:00","Actor":"estrizhok","Number":"10710","RawContent":null,"Title":"Certain operations with System.Console fail for a process started with redirected output.","State":"closed","Body":"Starting a .NetCore console application using `System.Diagnostics.Process` with **both** `StandardOutput` and `StardardError` streams redirected causes the application to throw when executing certain operation with `System.Console`.\r\n\r\n## Steps to reproduce\r\n1. [Download a repro solution from github](https://github.com/estrizhok/repro/tree/master/cli-redirected-output)\r\n2. Restore nuggets, build solution and perform other steps necessary to make it runable. \r\n3. Run ConsoleAppFull project.\r\n\r\n## Expected  behavior\r\n1. No exceptions is throw by the started child process.\r\n2. All output produced by the child process is read by the parent process.\r\n\r\n```\r\nOutput read: Hello World!\r\n````\r\n\r\n## Actual behavior\r\n1. No output from the child process is read by the parent process.\r\n2. Started program throws on attempt to access `System.ConsolePal.GetBufferInfo`:\r\n\r\n```\r\nOutput read: \r\nError in started process: The handle is invalid\r\n   at System.ConsolePal.GetBufferInfo(Boolean throwOnNoConsole, Boolean& succeeded)\r\n   at System.ConsolePal.get_WindowWidth()\r\n   at System.Console.get_WindowWidth()\r\n   at ConsoleAppNetCore.Program.Main(String[] args)\r\n```  \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```C:\\Users\\Eugene Strizhok>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10710","RelatedDescription":"Closed issue \"Certain operations with System.Console fail for a process started with redirected output.\" (#10710)"},{"Id":"406695519","IsPullRequest":false,"CreatedAt":"2019-02-05T17:01:20","Actor":"ankitlucky27","Number":"10706","RawContent":null,"Title":"When i am running dotnet publish -r win-x86 i am getting following error","State":"closed","Body":"## Steps to reproduce\r\n\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10706","RelatedDescription":"Closed issue \"When i am running dotnet publish -r win-x86 i am getting following error\" (#10706)"},{"Id":"406695510","IsPullRequest":false,"CreatedAt":"2019-02-05T17:01:12","Actor":"ankitlucky27","Number":"10705","RawContent":null,"Title":"When i am running dotnet publish -r win-x86 i am getting following error","State":"closed","Body":"## Steps to reproduce\r\n\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10705","RelatedDescription":"Closed issue \"When i am running dotnet publish -r win-x86 i am getting following error\" (#10705)"},{"Id":"406818784","IsPullRequest":false,"CreatedAt":"2019-02-05T15:30:06","Actor":"lwx-sabir","Number":"10711","RawContent":null,"Title":"Publishing ASP.NET Core 2.1 app using webdeploy not including all Views and App Folders","State":"closed","Body":"0\r\n\r\n\r\nI'm trying to deploy my .net core 2.1 app to IIS server using webdeploy, but after publishing the app there is no folders and files including from outside of wwwroot in publish directory and in the View folder I see only 2 View page and those Views are coming from a different library other than main project but there is no View generated that belongs to the main project.\r\n\r\n**Program.cs**\r\n `public static void Main(string[] args)\r\n{\r\n   CreateWebHostBuilder (args). UseDefaultServiceProvider (options =>\r\n    options.ValidateScopes = false).Build().Run();\r\n}\r\n\r\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n       .UseStartup<Startup>();`\r\n\r\n**Parts of Startup.cs**\r\n   \r\n   `//  For those 2 Views that are coming from another assembly \r\n(this 2 views are present in the Views folder in publishing directory) \r\n\r\n     var myAssembly = typeof(Component).Assembly;   \r\n     services.AddMvc()\r\n    .SetCompatibilityVersion(CompatibilityVersion.Version_2_1)\r\n    .AddApplicationPart(myAssembly);  \r\n    services.Configure<RazorViewEngineOptions>(options =>\r\n    {\r\n         options.FileProviders.Add(new EmbeddedFileProvider(myAssembly, \"MyNS\")); \r\n    });\r\n    //For serving static files from folder call Contents, outside of wwwroot\r\n    app.UseStaticFiles();\r\n    app.UseStaticFiles(new StaticFileOptions\r\n    {\r\n        FileProvider = new PhysicalFileProvider(\r\n           Path.Combine(_env.ContentRootPath, \"Contents\")),\r\n        RequestPath = \"/Contents\"\r\n    });`\r\n**.csproj**\r\n\r\n`<Project Sdk=\"Microsoft.NET.Sdk.Web\">  \r\n<PropertyGroup> \r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <UserSecretsId>........</UserSecretsId>\r\n  </PropertyGroup> \r\n  <ItemGroup> \r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Razor.Tools\" Version=\"1.1.0-preview4-final\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.0-preview3-35497\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.2.0-preview3-35497\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0-preview3-35497\" />\r\n    <PackageReference Include=\"morelinq\" Version=\"3.0.0\" />\r\n  </ItemGroup> \r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Proj.Business\\Proj.Business.csproj\" />\r\n    <ProjectReference Include=\"..\\Proj.Common\\Proj.Common.csproj\" />\r\n    <ProjectReference Include=\"..\\Proj.Data\\Proj.Data.csproj\" />\r\n    <ProjectReference Include=\"..\\MyNS\\MyNS.csproj\" />\r\n  </ItemGroup> \r\n  <ItemGroup>\r\n    <Folder Include=\"Contents\\\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n    <Folder Include=\"PrivateContents\\\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n  </ItemGroup>  \r\n</Project>`\r\n\r\n\r\n\r\nI get the same result when I publish the app to Azure App Service, What's wrong with my app? is there anything extra to follow deploy asp.net core 2.1 app? please help.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10711","RelatedDescription":"Closed issue \"Publishing ASP.NET Core 2.1 app using webdeploy not including all Views and App Folders\" (#10711)"},{"Id":"406772297","IsPullRequest":true,"CreatedAt":"2019-02-05T13:32:37","Actor":"dotnet-maestro[bot]","Number":"10709","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19104.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10709","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10709)"},{"Id":"406772131","IsPullRequest":true,"CreatedAt":"2019-02-05T13:27:07","Actor":"dotnet-maestro[bot]","Number":"10708","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19104.18\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10708","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10708)"},{"Id":"406695528","IsPullRequest":false,"CreatedAt":"2019-02-05T09:33:41","Actor":"ankitlucky27","Number":"10707","RawContent":null,"Title":"When i am running dotnet publish -r win-x86 i am getting following error","State":"open","Body":"## Steps to reproduce\r\n\r\ndotnet publish -r win-x86\r\n\r\n## Expected  behavior\r\n\r\nShould publish and code and generate the project folder with all dlls\r\n\r\n## Actual behavior\r\n\r\ngiving this error\r\n\r\n Nothing to do. None of the projects specified contain packages to restore.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.502\\Microsoft.Common.CurrentVersion.targets(3049,5): error MSB4216: Could not run the \"GenerateResource\" task because MSBuild could not create or connect to a task host with runtime \"CLR4\" and architecture \"x86\".  Please ensure that (1) the requested runtime and/or architecture are available on the machine, and (2) that the required executable \"C:\\Program Files\\dotnet\\sdk\\2.1.502\\MSBuild.exe\" exists and can be run. [C:\\Users\\jainnank\\Documents\\Visual Studio 2013\\Projects\\ConsoleApplication1\\ConsoleApplication1\\ConsoleApplication1.vbproj]\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10240\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10707","RelatedDescription":"Open issue \"When i am running dotnet publish -r win-x86 i am getting following error\" (#10707)"},{"Id":"406574176","IsPullRequest":true,"CreatedAt":"2019-02-05T00:01:36","Actor":"dotnet-bot","Number":"10704","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10704","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10704)"},{"Id":"405867105","IsPullRequest":true,"CreatedAt":"2019-02-04T21:30:57","Actor":"KevinRansom","Number":"10691","RawContent":null,"Title":"Update FSharp Compiler to: 10.4.1-rtm-190201-03","State":"closed","Body":"Update FSharp Compiler to match one inserted into VS.\r\n","Url":"https://github.com/dotnet/cli/pull/10691","RelatedDescription":"Closed or merged PR \"Update FSharp Compiler to: 10.4.1-rtm-190201-03\" (#10691)"},{"Id":"406319318","IsPullRequest":true,"CreatedAt":"2019-02-04T19:34:34","Actor":"dotnet-maestro[bot]","Number":"10699","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19103.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10699","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10699)"},{"Id":"406445152","IsPullRequest":true,"CreatedAt":"2019-02-04T19:31:17","Actor":"livarcocc","Number":"10703","RawContent":null,"Title":"Update Roslyn to 3.0.0-beta3-19101-04 to match Dev16","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10703","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.0.0-beta3-19101-04 to match Dev16\" (#10703)"},{"Id":"406444859","IsPullRequest":true,"CreatedAt":"2019-02-04T19:31:05","Actor":"livarcocc","Number":"10702","RawContent":null,"Title":"Update Roslyn to 3.0.0-beta3-19101-04 to match Dev16","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10702","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.0.0-beta3-19101-04 to match Dev16\" (#10702)"},{"Id":"406299344","IsPullRequest":false,"CreatedAt":"2019-02-04T16:18:05","Actor":"wordshaker","Number":"10698","RawContent":null,"Title":"Add support for `dotnet test` to have JUnit style output","State":"closed","Body":"## The Problem\r\n\r\nUsing CircleCI as a build tool, there are some features you can only get access to if your test output is in a JUnit format. XUnit provides a `-junit` argument to transform XUnit output to a JUnit style of output and it seems similar functionality used to be supported: https://stackoverflow.com/questions/39542533/xunit-dotnet-test-cli-to-output-to-nunit-xml-so-that-bamboo-can-read-the-results/47073101 \r\n\r\nI've tried using the `--logger` option in a few ways, but can't find a way of achieving what I want without using another package. \r\n\r\nIs it possible to use the [XUnit Transforms](https://github.com/xunit/xunit/blob/master/src/xunit.console/Utility/TransformFactory.cs) out the box with `dotnet test`?\r\n\r\n## Expected  behavior\r\n\r\n- To be able to run an argument as part of `dotnet test` that enables the test output to be transformed into an expected format.\r\n\r\n## Actual behavior\r\n\r\n- Can use the `--logger` argument to output to xml or trx, but the tool I'm using explicitly needs a trx with JUnit formatting\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10698","RelatedDescription":"Closed issue \"Add support for `dotnet test` to have JUnit style output\" (#10698)"},{"Id":"406319474","IsPullRequest":true,"CreatedAt":"2019-02-04T13:32:22","Actor":"dotnet-maestro[bot]","Number":"10700","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19103.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10700","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10700)"},{"Id":"405981068","IsPullRequest":true,"CreatedAt":"2019-02-03T13:29:06","Actor":"dotnet-maestro[bot]","Number":"10695","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19101.16\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19102.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10695","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#10695)"},{"Id":"406086203","IsPullRequest":true,"CreatedAt":"2019-02-03T13:27:11","Actor":"dotnet-maestro[bot]","Number":"10697","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19102.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10697","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10697)"},{"Id":"405981092","IsPullRequest":true,"CreatedAt":"2019-02-02T13:32:10","Actor":"dotnet-maestro[bot]","Number":"10696","RawContent":null,"Title":"Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19101.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10696","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/sdk\" (#10696)"},{"Id":"405908901","IsPullRequest":true,"CreatedAt":"2019-02-01T23:09:29","Actor":"wli3","Number":"10694","RawContent":null,"Title":"WIP no merge for tests Remove skip first run flag","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/10694","RelatedDescription":"Open PR \"WIP no merge for tests Remove skip first run flag\" (#10694)"},{"Id":"405888779","IsPullRequest":false,"CreatedAt":"2019-02-01T21:55:01","Actor":"rido-min","Number":"10693","RawContent":null,"Title":"Take care of the XBF file produced by WinRT components with UI ","State":"open","Body":"Windows Runtime Components with XAML UI produce a XBF file (Xaml Binary Format). To consume these components the caller looks for the xbf following the next convention:\r\n\r\n```\r\nOutDir\r\n--App.exe\r\n--LibraryName\r\n----ControlName.xbf\r\n```\r\n\r\nTo enable the reference (p2p and NuGet) the caller must set the `AssetTargetCallback` to a compatible TFM. This is done automatically with the imported targets from the new Windows.Sdk.Contracts nupkg.\r\n\r\n/cc @sbanni\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10693","RelatedDescription":"Open issue \"Take care of the XBF file produced by WinRT components with UI \" (#10693)"},{"Id":"405886893","IsPullRequest":false,"CreatedAt":"2019-02-01T21:49:26","Actor":"rido-min","Number":"10692","RawContent":null,"Title":"WinRT implementation DLL should be copied to the right location ","State":"open","Body":"To enable 3rd party Windows Runtime Components to be consumed from .NET Core 3 projects we need to ensure that the `.winmd` and/or `.dll` files are copied to the right location. \r\n\r\n/cc @sbanni","Url":"https://github.com/dotnet/cli/issues/10692","RelatedDescription":"Open issue \"WinRT implementation DLL should be copied to the right location \" (#10692)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"405434278","IsPullRequest":false,"CreatedAt":"2019-01-31T20:48:53","Actor":"botrif","Number":"1064","RawContent":null,"Title":"NETStandard, T4 templates, and System.Numerics.Vectors","State":"open","Body":"We have a T4 template to generate code based on reflection of another project. The template project and the other project are SDK style, multitargeted: &lt;TargetFrameworks&gt;net46;netstandard2.0;uap10.0.14393&lt;/TargetFramework&gt;\r\nThe assembly to reflect on is loaded with &lt;#@ assembly name=…\r\nIf the first target in the list is net46, reflection works fine: typeof(MyClass).Assembly.GetTypes()\r\nBut with netstandard first in the list, we get ReflectionTypeLoadException containing the following:\r\n\r\nCould not load file or assembly 'System.Numerics.Vectors, Version=4.1.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n\r\n(the reflected-on assembly uses System.Vector.Numerics: &lt;PackageReference Include=\"System.Numerics.Vectors\" Version=\"4.5.0\" Condition=\" '$(TargetFramework)' == 'netstandard2.0' \" /&gt;\r\nOur previous workaround was to do the design-time code generation on net46, but we want to move to netstandard builds soon. How can this error be dealt with?","Url":"https://github.com/dotnet/standard/issues/1064","RelatedDescription":"Open issue \"NETStandard, T4 templates, and System.Numerics.Vectors\" (#1064)"},{"Id":"403988291","IsPullRequest":true,"CreatedAt":"2019-01-28T22:28:27","Actor":"wtgodbe","Number":"1062","RawContent":null,"Title":"Add build status badge to Repo home page","State":"closed","Body":"CC @danmosemsft @terrajobst @safern @ViktorHofer ","Url":"https://github.com/dotnet/standard/pull/1062","RelatedDescription":"Closed or merged PR \"Add build status badge to Repo home page\" (#1062)"},{"Id":"404008513","IsPullRequest":false,"CreatedAt":"2019-01-28T21:10:37","Actor":"wtgodbe","Number":"1063","RawContent":null,"Title":"Create shims for new netstandard2.1 assemblies","State":"open","Body":"We need to create Shims for the assemblies added to netstandard2.1 that weren't in netstandard2.0 - This means (as far as I know):\r\n\r\n- System.Memory\r\n- System.Threading.Tasks.Extensions\r\n- System.Reflection.DispatchProxy\r\n- System.Reflection.Emit\r\n- System.Reflection.Emit.ILGeneration\r\n- System.Reflection.Emit.Lightweight\r\n- System.Numerics.Vectors\r\n- System.Buffers\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1063","RelatedDescription":"Open issue \"Create shims for new netstandard2.1 assemblies\" (#1063)"},{"Id":"398564136","IsPullRequest":false,"CreatedAt":"2019-01-24T23:36:09","Actor":"netspiri","Number":"1052","RawContent":null,"Title":"Incorrect dll being copied","State":"closed","Body":"I have\r\n\r\n- ProjectA targeting .Net Standard 2.0 making use of nuget library where the dlls for the different frameworks are named differently\r\n- ProjectB targeting .Net Standard 2.0 references ProjectA\r\n- ProjectC targeting .Net Framework 4.7.2 references ProjectB\r\n- ProjectD targeting .Net Framework 4.7.2 and is a Console app referencing ProjectC\r\n\r\nIf I run ProjectD I get the infamous \"Could not load file or assembly\" for Aspose.Email.Core.dll.\r\n\r\nI played around <RestoreProjectStyle>PackageReference</RestoreProjectStyle> in ProjectC and ProjectD but this results in .net framework dll (i.e Aspose.Email.dll) being copied over from the nuget package and not the .net standard dll (Aspose.Email.Core.dll).  I did not play with binding redirects because I do not think this is related.\r\n\r\nI've migrated manually ProjectC and ProjectD to the new csproj style but this had no effect.\r\n\r\nI do not want to end up with ProjectD referencing the required dlls directly because there must \"the proper way of doing it\".\r\n\r\nI have therefore uploaded a clean barebones project to https://bitbucket.org/netspiri/projectreferencestest.git , so as to see how the experts would do it, in the hope that this might help others. \r\n\r\nI've attached also the output of msbuild ProjectD.csproj /t:rebuild /bl\r\n\r\nIt would be nice if the experts would guide trough thier troubleshooting process.\r\n\r\n[log.txt](https://github.com/dotnet/standard/files/2752202/log.txt)\r\n[msbuild.zip](https://github.com/dotnet/standard/files/2752203/msbuild.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1052","RelatedDescription":"Closed issue \"Incorrect dll being copied\" (#1052)"},{"Id":"402932649","IsPullRequest":true,"CreatedAt":"2019-01-24T23:21:33","Actor":"wtgodbe","Number":"1060","RawContent":null,"Title":"Set StrongNameKeyID after import sdk.props","State":"closed","Body":"This allows us to set our own default for `StrongNameKeyID` rather than relying on the one from the SDK.\r\n\r\nCC @ericstj ","Url":"https://github.com/dotnet/standard/pull/1060","RelatedDescription":"Closed or merged PR \"Set StrongNameKeyID after import sdk.props\" (#1060)"},{"Id":"402860962","IsPullRequest":true,"CreatedAt":"2019-01-24T21:43:12","Actor":"terrajobst","Number":"1059","RawContent":null,"Title":"Add missing dummy fields","State":"closed","Body":"In ced9376c, we've added dummy fields for structs. Apparently, I missed these two in the diff.","Url":"https://github.com/dotnet/standard/pull/1059","RelatedDescription":"Closed or merged PR \"Add missing dummy fields\" (#1059)"},{"Id":"402275150","IsPullRequest":false,"CreatedAt":"2019-01-24T19:47:05","Actor":"jacobmohl","Number":"1056","RawContent":null,"Title":"Add support for HttpClient.PatchAsync()","State":"closed","Body":"It would make sense to support the HTTP Verb PATCH in HttpClient. Which for now is only supported in .Net Core 2.1 and forward with HttpClient.PatchAsync().","Url":"https://github.com/dotnet/standard/issues/1056","RelatedDescription":"Closed issue \"Add support for HttpClient.PatchAsync()\" (#1056)"},{"Id":"402847550","IsPullRequest":true,"CreatedAt":"2019-01-24T19:39:46","Actor":"wtgodbe","Number":"1058","RawContent":null,"Title":"Re-enable APICompat for netstandard1.x/2.0","State":"closed","Body":"This causes netstandard1.x/2.0 assets to be binplaced at `artifacts\\obj\\CompatShims\\ref` again, which will re-enable the APICompat runs for those TFMs. @ViktorHofer I noticed you removed this line here: https://github.com/dotnet/standard/pull/1040/files#diff-1fea8681058f11db0ecbfc2fc8a5be52L7 - was that intentional?","Url":"https://github.com/dotnet/standard/pull/1058","RelatedDescription":"Closed or merged PR \"Re-enable APICompat for netstandard1.x/2.0\" (#1058)"},{"Id":"400369663","IsPullRequest":false,"CreatedAt":"2019-01-24T19:21:03","Actor":"UnreachableCode","Number":"1055","RawContent":null,"Title":"Android implementation of HTTPClient throwing up java.io.IOException ","State":"closed","Body":"I believe this relates to the bug detailed in Xamarin's old Bugzilla:\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=41100\r\n\r\nand is also similar to the issue discussed here:\r\nhttps://github.com/square/okhttp/issues/1517\r\n\r\nHere is the main stacktrace of my issue:\r\n\r\nLoginProvider+<LoginAsync>d__1.MoveNext () C:\\source\\repos\\{MyApp}\\{MyApp}\\{MyApp}\\Services\\LoginProvider.cs:35\r\njava.io.IOException: unexpected end of stream on Connection{testclarity.i-menzies.com:443, proxy=DIRECT@ hostAddress=62.244.173.166 cipherSuite=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 protocol=http/1.1} (recycle count=0)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:210)\r\ncom.android.okhttp.internal.http.HttpTransport.readResponseHeaders(HttpTransport.java:80)\r\ncom.android.okhttp.internal.http.HttpEngine.readNetworkResponse(HttpEngine.java:905)\r\ncom.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:789)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:443)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:388)\r\ncom.android.okhttp.internal.huc.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:501)\r\ncom.android.okhttp.internal.huc.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105)\r\ncom.android.okhttp.internal.huc.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:25)\r\nCaused by: java.io.EOFException: \\n not found: size=0 content=...\r\ncom.android.okhttp.okio.RealBufferedSource.readUtf8LineStrict(RealBufferedSource.java:200)\r\ncom.android.okhttp.internal.http.HttpConnection.readResponse(HttpConnection.java:191)\r\n\r\nI have tried setting the connection closed header and setting chunked transfer encoding but neither of these fixes work. I would try to set the OkHTTP.setRetryOnConnectionFailure(true) but I don't think there is a way to do this in the referenced Java source.","Url":"https://github.com/dotnet/standard/issues/1055","RelatedDescription":"Closed issue \"Android implementation of HTTPClient throwing up java.io.IOException \" (#1055)"},{"Id":"402566640","IsPullRequest":true,"CreatedAt":"2019-01-24T06:55:33","Actor":"wtgodbe","Number":"1057","RawContent":null,"Title":"Dummy commit to trigger CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1057","RelatedDescription":"Closed or merged PR \"Dummy commit to trigger CI\" (#1057)"},{"Id":"400334291","IsPullRequest":false,"CreatedAt":"2019-01-18T13:36:41","Actor":"aday12345","Number":"1054","RawContent":null,"Title":".net standard 2.1 targeting question","State":"closed","Body":"i have the .net core 2.2 sdk installed and can target it with no issue, but should i be able to target the netStandard 2.1 library when creating a class library? i only see 2.0 as an option.","Url":"https://github.com/dotnet/standard/issues/1054","RelatedDescription":"Closed issue \".net standard 2.1 targeting question\" (#1054)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-17T10:59:36","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"closed","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Closed issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-16T21:17:03","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Closed or merged PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"399549465","IsPullRequest":false,"CreatedAt":"2019-01-15T21:45:54","Actor":"kaby76","Number":"1053","RawContent":null,"Title":"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.","State":"open","Body":"I've started porting (rewriting) the Net Core framework to the GPU. Part of this very large task is to go through the framework and verify that it indeed satisfies the Net Standard specification because I really don't trust anything/anyone. So, I have several questions regarding Net Standard.\r\n\r\n1) According to Microsoft documentation (https://docs.microsoft.com/en-us/dotnet/standard/net-standard), “[t]he .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations.”\r\n\r\nQ: Exactly where is the “formal specification” of the API? Is it the MD file for a particular version (e.g., https://raw.githubusercontent.com/dotnet/standard/master/docs/versions/netstandard2.0_ref.md)? Is it the collection of C# files with stub implementations (e.g., the files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref)? Or, is it something else?\r\n\r\n2) Assuming that the C# files in https://github.com/dotnet/standard/tree/master/src/netstandard/ref is the formal definition. I wrote a CSPROJ to build an assembly for the current state of the decls. Then, I wrote a program to go through a framework, following reference assemblies to implementation assemblies, and output a sorted list of all types, all methods, all attributes, for public decls. I compared the reference and implementation assemblies for Net Core with the Standard set forth in the C# code. And yes, there are some non-trivial differences, mostly because the standard is evolving.\r\n\r\nThe following are general questions of type equivalence.\r\n\r\nQ: If there's an attribute (\"[...]\") on a type is in Standard, but missing on the type in Core, does Core still satisfy the Standard?\r\n\r\nQ: If a method and/or type exists in Core, but not in Standard, does the implementation still satisfy the Standard? In other words, can an implementation provide \"extra\" and still satisfy Standard?\r\n\r\nThe full list of the type dump for Standard and Core assemblies is here (https://1drv.ms/f/s!Atb3HX_AxX9ZgaxT-m221N6ut285Vw).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1053","RelatedDescription":"Open issue \"Qs on NET Standard, Formal Specifications, Type Equivalence, etc.\" (#1053)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2019-01-14T18:45:00","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"closed","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Closed or merged PR \"Remove the manual config system\" (#1040)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-11T01:19:54","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"closed","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Closed issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2019-01-11T00:23:25","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"closed","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Closed issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-11T00:22:05","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"closed","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Closed issue \"String Enhancements\" (#1049)"},{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"407537281","IsPullRequest":false,"CreatedAt":"2019-02-07T04:29:21","Actor":"wfurt","Number":"35143","RawContent":null,"Title":"add Netlink and Packet to AddressFamily and ProtocolFamily enum","State":"open","Body":"Both protocols are currently only supported on Linux but both provide interesting capabilities and been asked for by community. \r\n\r\nAF_PACET sockets allow access to link-layer beyond limits of IP RAW sockets.\r\n\r\nNetlink is used widely for various system communications (like route update notifications), can allow communication with kernel modules and support message multicasting. \r\n\r\nI did some testing and existing socket functions seems to work well with new protocol families so changes to actually support them would be small. \r\n\r\nHere is proposed change to public API:\r\n\r\n```c#\r\ndiff --git a/src/Common/src/System/Net/Sockets/ProtocolFamily.cs b/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\nindex 735a73077e..e0a99de686 100644\r\n--- a/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\n+++ b/src/Common/src/System/Net/Sockets/ProtocolFamily.cs\r\n@@ -41,6 +41,8 @@ namespace System.Net.Internals\r\n         Ieee12844 = AddressFamily.Ieee12844,\r\n         Irda = AddressFamily.Irda,\r\n         NetworkDesigners = AddressFamily.NetworkDesigners,\r\n-        Max = 29, //AddressFamily.Max\r\n+        Netlink = AddressFamily.Netlink,\r\n+        Packet = AddressFamily.Packet,\r\n+        Max = 31, //AddressFamily.Max\r\n     }\r\n }\r\ndiff --git a/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs b/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\nindex e3719f46e2..847cb6d7c8 100644\r\n--- a/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\n+++ b/src/System.Net.Primitives/src/System/Net/Sockets/AddressFamily.cs\r\n@@ -42,6 +42,8 @@ namespace System.Net.Sockets\r\n         Ieee12844 = 25,         // IEEE 1284.4 WG AF\r\n         Irda = 26,              // IrDA\r\n         NetworkDesigners = 28,  // Network Designers OSI & gateway enabled protocols\r\n-        Max = 29,               // Max\r\n+        Netlink = 29,           // Netlink protocol\r\n+        Packet = 30,            // Linux Packet\r\n+        Max = 31,               // Max\r\n     }\r\n }\r\n```\r\n\r\nSocket constructor takes protocol family but also protocol type and current enum is mostly IP oriented. Packet protocol uses Link layer type and can be possibly pretty large. For Netlink, there are several subgroups (https://en.wikipedia.org/wiki/Netlink) but it is also possible to define and use custom one via extensibility model.\r\n\r\nSince this is specific to Linux and probably out of mainstream developers, I suggest for now that we do not enumerate all possibilities now and we let users of specific applications to cast int and provide direct value.\r\nThis could be re-visited later if implementation goes beyond Linux.      \r\n\r\nWhen one attempt to use them on Windows and OSX, existing code throws reasonable exception:\r\n\r\n\r\nWindows\r\n\r\n> System.Net.Sockets.SocketException (10047): An address incompatible with the requested protocol was used\r\n>    at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n> \r\n\r\nOSX\r\n\r\n> System.Net.Sockets.SocketException (47): Address family not supported by protocol family\r\n>    at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n> \r\n\r\n\r\ncc: @karelz ","Url":"https://github.com/dotnet/corefx/issues/35143","RelatedDescription":"Open issue \"add Netlink and Packet to AddressFamily and ProtocolFamily enum\" (#35143)"},{"Id":"407534794","IsPullRequest":true,"CreatedAt":"2019-02-07T04:14:21","Actor":"dotnet-maestro-bot","Number":"35142","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27407-00, beta-27407-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35142","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27407-00, beta-27407-00, respectively (master)\" (#35142)"},{"Id":"407282335","IsPullRequest":true,"CreatedAt":"2019-02-07T02:14:54","Actor":"hughbe","Number":"35131","RawContent":null,"Title":"Remove dead code from Composition.Hosting","State":"closed","Body":"All functions only called once with non-null values","Url":"https://github.com/dotnet/corefx/pull/35131","RelatedDescription":"Closed or merged PR \"Remove dead code from Composition.Hosting\" (#35131)"},{"Id":"406995112","IsPullRequest":false,"CreatedAt":"2019-02-07T00:53:26","Actor":"layomia","Number":"35117","RawContent":null,"Title":"\"Send to Helix\" step for Windows x64_Debug and Windows x86_Release jobs is failing in corefx-ci ","State":"closed","Body":"The \"Send to Helix\" step for both jobs is failing with error \"Cmd.exe exited with code '1'.\". See https://dev.azure.com/dnceng/public/_build/results?buildId=87783.\r\n\r\nThe actual tests are not failing. See https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F35008~2Fmerge/test~2Ffunctional~2Fcli~2F/20190205.18.","Url":"https://github.com/dotnet/corefx/issues/35117","RelatedDescription":"Closed issue \"\"Send to Helix\" step for Windows x64_Debug and Windows x86_Release jobs is failing in corefx-ci \" (#35117)"},{"Id":"407429720","IsPullRequest":true,"CreatedAt":"2019-02-07T00:49:17","Actor":"stephentoub","Number":"35140","RawContent":null,"Title":"Fix failing xNodeBuilder tests","State":"closed","Body":"1 of the tests is failing because float.MaxValue.ToString() changed and it had hardcoded the previous value.\r\n\r\n4 of the tests failed because it was doing a string comparison on the type name of Encoding.UTF8, which a while ago changed to be a sealed derived type and thus is no longer exactly \"System.Text.UTF8Encoding\".  My only explanation for why these just started failing is that we weren't previously running them?  Might have something to do with the lack of a Configurations.props file, which I had to add in order to run the tests locally.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35090\r\ncc: @danmosemsft, @rmkerr, @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/35140","RelatedDescription":"Closed or merged PR \"Fix failing xNodeBuilder tests\" (#35140)"},{"Id":"407478632","IsPullRequest":true,"CreatedAt":"2019-02-06T23:28:18","Actor":"rpetrusha","Number":"35141","RawContent":null,"Title":"Math field constants","State":"open","Body":"## Modified PI, E field values\r\n\r\nThis PR modifies the values of the PI and E constants so that they are round-trippable using the G17 (for the Math class) and G9 (for the MathF class) format strings.\r\n\r\nFor background, see dotnet/dotnet-api-docs#1094.\r\n\r\nRelated to dotnet/dotnet-api-docs#1805\r\n\r\n//cc @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/35141","RelatedDescription":"Open PR \"Math field constants\" (#35141)"},{"Id":"407075849","IsPullRequest":true,"CreatedAt":"2019-02-06T22:55:45","Actor":"vcsjones","Number":"35124","RawContent":null,"Title":"Allow ephemeral CNG keys to be used when signing a CMS.","State":"closed","Body":"Fixes #35120 \r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/35124","RelatedDescription":"Closed or merged PR \"Allow ephemeral CNG keys to be used when signing a CMS.\" (#35124)"},{"Id":"407018579","IsPullRequest":false,"CreatedAt":"2019-02-06T22:55:44","Actor":"bartonjs","Number":"35120","RawContent":null,"Title":"Windows SignedCms fails signing when using an ephemerally constructed certificate","State":"closed","Body":"This fails:\r\n\r\n```C#\r\nusing (RSA rsa = RSA.Create())\r\nusing (X509Certificate2 pubOnly = GetTheCert())\r\n{\r\n    rsa.ImportParameters(fromSomewhere);\r\n\r\n    using (X509Certificate2 certWithKey = pubOnly.CopyWithPrivateKey(rsa))\r\n    {\r\n        ContentInfo content = new ContentInfo(new byte[] { 1, 2, 3 });\r\n        SignedCms cms = new SignedCms(content, false);\r\n        CmsSigner signer = new CmsSigner(certWithKey);\r\n        cms.ComputeSignature(signer);\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: The CNG key handle being opened was detected to be ephemeral, but the EphemeralKey open option was not specified.\r\n\r\nParameter name: keyHandleOpenOptions\r\n   at System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions)\r\n   at Internal.Cryptography.Pal.Windows.PkcsPalWindows.GetPrivateKey[T](X509Certificate2 certificate, Boolean silent, Boolean preferNCrypt)\r\n   at Internal.Cryptography.Pal.Windows.PkcsPalWindows.GetPrivateKeyForSigning[T](X509Certificate2 certificate, Boolean silent)\r\n   at System.Security.Cryptography.Pkcs.CmsSignature.RSAPkcs1CmsSignature.Sign(ReadOnlySpan`1 dataHash, HashAlgorithmName hashAlgorithmName, X509Certificate2 certificate, Boolean silent, Oid& signatureAlgorithm, Byte[]& signatureValue)\r\n   at System.Security.Cryptography.Pkcs.CmsSignature.Sign(ReadOnlySpan`1 dataHash, HashAlgorithmName hashAlgorithmName, X509Certificate2 certificate, Boolean silent, Oid& oid, ReadOnlyMemory`1& signatureValue)\r\n   at System.Security.Cryptography.Pkcs.CmsSigner.Sign(ReadOnlyMemory`1 data, String contentTypeOid, Boolean silent, X509Certificate2Collection& chainCerts)\r\n   at System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(CmsSigner signer, Boolean silent)\r\n```\r\n\r\nBut indirecting through a PFX export/import works:\r\n\r\n```C#\r\nusing (RSA rsa = RSA.Create())\r\nusing (X509Certificate2 pubOnly = GetTheCert())\r\n{\r\n    rsa.ImportParameters(fromSomewhere);\r\n\r\n    using (X509Certificate2 temp = pubOnly.CopyWithPrivateKey(rsa))\r\n    using (X509Certificate2 certWithKey = new X509Certificate2(temp.Export(X509ContentType.Pfx)))\r\n    {\r\n        ContentInfo content = new ContentInfo(new byte[] { 1, 2, 3 });\r\n        SignedCms cms = new SignedCms(content, false);\r\n        CmsSigner signer = new CmsSigner(temp);\r\n        cms.ComputeSignature(signer);\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nIt seems that https://github.com/dotnet/corefx/blob/9007057ab6ba649c67dbca2a422d997075404e6c/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/Windows/PkcsPalWindows.cs#L218 asserts CngKeyHandleOptions.None, when it needs to proxy-detect the ephemeral state","Url":"https://github.com/dotnet/corefx/issues/35120","RelatedDescription":"Closed issue \"Windows SignedCms fails signing when using an ephemerally constructed certificate\" (#35120)"},{"Id":"407395908","IsPullRequest":true,"CreatedAt":"2019-02-06T21:29:42","Actor":"dotnet-maestro-bot","Number":"35139","RawContent":null,"Title":"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to preview1-03706-01, beta-27406-00, beta-27406-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/35139","RelatedDescription":"Closed or merged PR \"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to preview1-03706-01, beta-27406-00, beta-27406-00, respectively (master)\" (#35139)"},{"Id":"407330274","IsPullRequest":true,"CreatedAt":"2019-02-06T21:03:58","Actor":"dotnet-maestro[bot]","Number":"35136","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19106.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35136","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#35136)"},{"Id":"407395361","IsPullRequest":false,"CreatedAt":"2019-02-06T19:32:36","Actor":"geoffkizer","Number":"35138","RawContent":null,"Title":"HTTP2: Determine how to enable HTTP2 for SocketsHttpHandler","State":"open","Body":"Currently, we only support HTTP2 in SocketsHttpHandler via opt-in usin gAppContext or environment variables. See #31424.\r\n\r\nWe need to determine how to expose this via public API.","Url":"https://github.com/dotnet/corefx/issues/35138","RelatedDescription":"Open issue \"HTTP2: Determine how to enable HTTP2 for SocketsHttpHandler\" (#35138)"},{"Id":"407380076","IsPullRequest":false,"CreatedAt":"2019-02-06T18:52:52","Actor":"vcsjones","Number":"35137","RawContent":null,"Title":"DSA.CreateSignature / TryCreateSignature fail on macOS for SHA2 with unclear error","State":"open","Body":"Apple's implementation of DSA is limited to signing up to 20 bytes (SHA1). When using `CreateSignature` or `TryCreateSignature` with a digest larger than 20 bytes (SHA256's 32 bytes for example), an error from the platform CSSM/CDSA in the form of `AppleCFErrorCryptographicException` with rather arcane error output.\r\n\r\nWe should detect when a digest > 20 is given to either of these APIs on Apple's DSA implementation and throw with a more helpful error message.","Url":"https://github.com/dotnet/corefx/issues/35137","RelatedDescription":"Open issue \"DSA.CreateSignature / TryCreateSignature fail on macOS for SHA2 with unclear error\" (#35137)"},{"Id":"407297331","IsPullRequest":true,"CreatedAt":"2019-02-06T18:29:13","Actor":"stephentoub","Number":"35133","RawContent":null,"Title":"Add SocketErrorPal mapping for EPERM","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/35127\r\ncc: @wfurt","Url":"https://github.com/dotnet/corefx/pull/35133","RelatedDescription":"Closed or merged PR \"Add SocketErrorPal mapping for EPERM\" (#35133)"},{"Id":"407094146","IsPullRequest":false,"CreatedAt":"2019-02-06T18:29:12","Actor":"wfurt","Number":"35127","RawContent":null,"Title":"Incorrect socket exception on Linux","State":"closed","Body":"I get \r\n```\r\nHello World!\r\nFailed to create socket!\r\nSystem.Net.Sockets.SocketException (0xFFFFFFFF): Unknown error -1\r\n   at System.Net.Sockets.Socket..ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)\r\n   at dd.Program.Main(String[] args) in /tmp/dd/Program.cs:line 15\r\n```\r\n\r\nwhen running following app on Linux (2.1 & 3.0)\r\n```c#\r\nusing System;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\n\r\nnamespace dd\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Socket socket;\r\n\r\n            try {\r\n                socket = new Socket(AddressFamily.InterNetwork, SocketType.Raw, ProtocolType.Tcp);\r\n           } catch (Exception e) {\r\n                Console.WriteLine(\"Failed to create socket!\");\r\n                Console.WriteLine(e);\r\n                return ;\r\n           }\r\n    }\r\n}\r\n```\r\n\r\nwhen running under strace the (`strace -f -e trace=network /tmp/dd/bin/Debug/netcoreapp3.0/linux-x64/publish/dd`)\r\nthe error is clearly permission issue:\r\n> [pid  9053] socket(PF_INET, SOCK_RAW|SOCK_CLOEXEC, IPPROTO_TCP) = -1 EPERM (Operation not permitted)\r\n\r\nmay be related to #30790 as we clearly do not propagate correct OS errors back.\r\n","Url":"https://github.com/dotnet/corefx/issues/35127","RelatedDescription":"Closed issue \"Incorrect socket exception on Linux\" (#35127)"},{"Id":"407131834","IsPullRequest":false,"CreatedAt":"2019-02-06T17:55:55","Actor":"aliio","Number":"35129","RawContent":null,"Title":"NetworkStream's ReadAsync Never Fails after ReadTimeout Period is Done","State":"closed","Body":"`NetworkStream`'s `ReadAsync` Never Fails after `ReadTimeout` Period is Done\r\n\r\nHere is a small sample to reproduce the problem\r\n\r\n```csharp\r\nstatic void Main(string[] args)\r\n{\r\n    Task.Run(async () =>\r\n    {\r\n        var server = new TcpListener(IPAddress.Any, 8080);\r\n        server.Start();\r\n        var client = server.AcceptTcpClient();\r\n        var stream = client.GetStream();\r\n\r\n        var buffer = new byte[128];\r\n        stream.ReadTimeout = 1000;\r\n\r\n        try\r\n        {\r\n            await stream.ReadAsync(buffer, 0, buffer.Length);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            // Reading never fails\r\n            Console.WriteLine(\"Timed out\");\r\n        }\r\n    });\r\n    \r\n    Console.ReadKey();\r\n}\r\n```\r\n\r\nThe Problem can be reproduced on these configurations:\r\nOS: `macOS 10.14.2`\r\nFramework: `netcoreapp2.2`\r\n\r\nEdit:\r\nJust use `telnet localhost 8080` and wait a second","Url":"https://github.com/dotnet/corefx/issues/35129","RelatedDescription":"Closed issue \"NetworkStream's ReadAsync Never Fails after ReadTimeout Period is Done\" (#35129)"},{"Id":"407327273","IsPullRequest":false,"CreatedAt":"2019-02-06T16:44:43","Actor":"roji","Number":"35135","RawContent":null,"Title":"New System.Data.Common batching API","State":"open","Body":"This issue is based on previous discussions in #3688 and #8954.\r\n\r\n# Background\r\n\r\nBatching multiple SQL statements can be critical for database performance, as they can be executed in a single roundtrip rather than waiting for each statement to complete before sending the next one. System.Data.Common doesn't currently provide a first-class API for this, but some providers (e.g. SqlClient) allow batching statements by concatenating them together into DbCommand.CommandText, separated by semicolons:\r\n\r\n```c#\r\nvar cmd = connection.CreateCommand();\r\ncmd.CommandText = \"INSERT INTO table (1); INSERT INTO table (2)\";\r\n```\r\n\r\nThe problem with this approach, is that many databases require separate protocol messages for each statement (e.g. PostgreSQL, MySQL), forcing the database's ADO.NET provider to parse the SQL client-side and to split on semicolons. This is both unreliable (parsing SQL is difficult) and bad for performance - ideally an ADO.NET provider should simply forward user-provided SQL to the database, without parsing or rewriting it (see #27075 for a related issue forcing providers to parse SQL).\r\n\r\nAs a specific case, SQL Server does natively support the multi-statement commands, but even there this has drawbacks for performance, detailed by @GSPP in #31070. Also, as @bgribaudo [pointed out](https://github.com/dotnet/corefx/issues/3688#issuecomment-342158814), the current concatenation-based approach doesn't allow invoking multiple stored procedures in batching fashion. SqlClient does include SqlCommandSet, which performs efficient, non-concatenation-based batching, but that class is internal and currently usable only via DbDataSet, and not for general usage ([NHibernate apparently accesses this via reflection](https://github.com/nhibernate/nhibernate-core/blob/ad4c2ef101cbf8ba798220973f4f78dd795e0896/src/NHibernate/AdoNet/SqlClientSqlCommandSet.cs)). This proposal would allow exposing SqlCommandSet via a public API.\r\n\r\nGoals\r\n-----\r\n* Provide a structured way to execute multiple SQL statements in a single roundtrip, without any need for client-side parsing of SQL.\r\n* Allow mixing in different types of statements in the same batch (insert, update, select). The current concatenation approach supports this, and so does our reader API (multiple resultsets).\r\n* Provide a fully-functional backwards compatibility shim implemented over the traditional, concatenation-based batching approach, allowing the new API to be used with existing ADO.NET providers that already support concatenation-based batching.\r\n\r\n# Proposed API\r\n\r\n```c#\r\npublic class DbCommandSet : IDisposable, IAsyncDisposable\r\n{\r\n    #region Batch Management\r\n\r\n    // Adds a single command to the batch\r\n    public abstract void Add(DbCommand command);\r\n    // Adds all commands to the batch, default implementation calls Add()\r\n    public virtual void AddRange(IEnumerable<DbCommand> commands);\r\n    // Clears all commands \r\n    public abstract void Clear();\r\n\r\n    #endregion\r\n\r\n    #region Execution (mirrors DbCommand)\r\n\r\n    public abstract DbDataReader ExecuteReader(CommandBehavior behavior);\r\n    public abstract Task<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = default);\r\n\r\n    // Delegate to ExecuteReader(CommandBehavior.Default)\r\n    public DbDataReader ExecuteReader();\r\n    public Task<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = default);\r\n\r\n    public abstract int ExecuteNonQuery();\r\n    public abstract Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken = default);\r\n\r\n    public abstract object ExecuteScalar();\r\n    public abstract Task<object> ExecuteScalarAsync(CancellationToken cancellationToken = default);\r\n\r\n    #endregion\r\n\r\n    #region Execution properties (mirrors DbCommand)\r\n\r\n    public abstract int CommandTimeout { get; set; }\r\n    public abstract DbConnection Connection { get; set; }\r\n    public abstract DbTransaction Transaction { get; set; }\r\n\r\n    #endregion\r\n    \r\n    #region Other methods mirroring DbCommand\r\n    \r\n    public abstract void Prepare();\r\n    public abstract Task PrepareAsync(CancellationToken cancellationToken = default);\r\n    public abstract void Cancel();\r\n    public abstract Task CancelAsync(CancellationToken cancellationToken = default);\r\n        \r\n    #endregion\r\n}\r\n\r\npublic class DbProviderFactory\r\n{\r\n    public virtual DbCommandSet CreateDbCommandSet();\r\n}\r\n\r\npublic class DbException\r\n{\r\n    // Naming: possibly TriggeringCommand for clarity? See below for details\r\n    public virtual DbCommand Command { get; }\r\n}\r\n```\r\n\r\n# General usage\r\n\r\nUsage is fairly trivial and aligned with the existing DbCommand APIs. Users first create a new DbCommandBatch, either by calling `DbCommandFactory.CreateCommandBatch()`, or by instantiating one directly. Commands are added into the batch, execution properties (e.g. `CommandTimeout`) are set on it, and finally on of the `Execute*()` methods are called on it. `Connection`, `Transaction` and `CommandTimeout` are specified on the DbCommandSet, and are ignored if set on commands participating in the batch.\r\n\r\n# Backwards-compatibility shim\r\n\r\nTo make the new API work on existing versions of providers, we will include a shim returned by the default implementation of `DbProviderFactory.CreateDbCommandSet()`. The shim will implement the new API over the existing concatenation approach, as follows:\r\n\r\n* When executed, the shim will instantiate a new DbCommand instance (from the provider's `CreateDbCommand()`), which will function as the batch command.\r\n* The shim will concatenate the CommandText properties from all the user-provided commands and assign them to the batch command's CommandText, delimited by semicolons.\r\n* All named parameters from all user-provided commands will be added to the batch command. If any have the same name, an exception will be thrown. If any have no names (positional parameters), an exception will be thrown - this scenario will not be supported, but no major provider is known to depend on it.\r\n* ~`Prepare[Async]()` will simply call the same method on each of commands in the batch.~\r\n* The preparation behavior of the shim is yet to be defined.\r\n\r\n# Affected rows\r\n\r\nDbCommand has APIs for finding out how many rows were affected by the command:\r\n\r\n* The return value of `ExecuteNonQuery[Async]()` returns an int\r\n* The `DbDataReader.RecordsAffected` property\r\n\r\nHowever, both of these provide an aggregate number; if the command contained more than one statement, it's currently impossible to find out how many rows were affected by each statement separately. Providing such an API could happen in two ways:\r\n\r\n1. Add an overload of `ExecuteNonQuery[Async]()` which returns an `int[]`. Calling it would incur a heap allocation (although pay-per-play), and the naming for this isn't going to be pretty. In addition, add a similar `int[]` property on DbDataReader; to keep it pay-per-play, we'd need a mechanism to opt into non-aggregate affected rows in advance, otherwise the reader would have to internally maintain an array. This opt-in mechanism could be another flag on the CommandBehavior enum.\r\n2. Add a property to DbCommand (`BatchedRecordsAffected`?), which would be populated when it is executed as part of a batch. Since the commands are already present in the batch, this incurs no extra cost. The downside is that DbCommand doesn't currently hold any \"results\" from its execution or reflect how that execution went. Also, this property wouldn't be populated in normal, non-batched usage of the command.\r\n\r\nIn any case, we'd probably add a capabilities flag would to let users know whether the relevant properties/methods are supported by the provider or not.\r\n\r\n# DbException.Command\r\n\r\nSince we now execute batches, we should provide a way of letting users know which command in the batch triggered an exception. This could take the form of a new virtual property on DbException. Note that the backwards-compatibility shim will leave this empty, as will potentially other batching implementations which don't support this.\r\n\r\n# Notes\r\n\r\n* No guarantees are made with regards to batch transactionality (do the batch commands execute in an implicit transaction) or to error handling (if a command fails, are later commands automatically skipped). These details are provider-dependent.\r\n* DbCommandSet is disposable, like DbCommand. This is to allow for cases where it maps to a native resource that needs to be freed, and may also help with pooling/recycling of instances (to be elaborated in a separate proposal).\r\n* We hope to add a `DbCommandSet.Add(string commandText)`, which would create the CommandText internally and be a lighter API, but some design issues need to resolved around parameter management. We're deferring this for now as it's non-critical sugar.\r\n\r\n# Open questions\r\n\r\n* DbCommand and DbCommandSet share a lot of surface APIs. We may consider an interface, which would allow users to abstract away what's being executed (but suffers from the same versioning flaws, modulu default interface methods).\r\n* Does DbCommandSet need to implement System.ComponentModel.Component, like all other ADO objects (for Visual Studio designer)? There seems to be little change that VS would be updated for this.\r\n* We could consider adding other methods for managing the commands (e.g. removal), but that seems unnecessary at this point.\r\n","Url":"https://github.com/dotnet/corefx/issues/35135","RelatedDescription":"Open issue \"New System.Data.Common batching API\" (#35135)"},{"Id":"407000467","IsPullRequest":true,"CreatedAt":"2019-02-06T16:43:56","Actor":"joperezr","Number":"35119","RawContent":null,"Title":"Removing UAPvNext Assets from OOB packages","State":"closed","Body":"cc: @ericstj @zamont \r\n\r\nFixes #34959 \r\n\r\nThis PR will remove all uapvNext (uap10.0.16300) assets from packages except for the uap metapackage in order to make sure that netcoreapp3.0 packages (currently shipping out of master) won't leak those assets.","Url":"https://github.com/dotnet/corefx/pull/35119","RelatedDescription":"Closed or merged PR \"Removing UAPvNext Assets from OOB packages\" (#35119)"},{"Id":"407315305","IsPullRequest":true,"CreatedAt":"2019-02-06T16:19:31","Actor":"tannergooding","Number":"35134","RawContent":null,"Title":"Upgrading Roslyn to 3.0.0-beta2-final","State":"open","Body":"This moves Roslyn to the C# 8.0 Preview 2 compiler.\r\n\r\nCC. @jaredpar, @agocke, @jkotas, @danmosemsft, @eerhardt, @safern, @benaadams, @ericstj ","Url":"https://github.com/dotnet/corefx/pull/35134","RelatedDescription":"Open PR \"Upgrading Roslyn to 3.0.0-beta2-final\" (#35134)"},{"Id":"407285857","IsPullRequest":true,"CreatedAt":"2019-02-06T15:21:09","Actor":"hughbe","Number":"35132","RawContent":null,"Title":"Fix CompositionContract.Equals for null","State":"open","Body":"- And remove workaround from fixed xunit bug\r\n- And increase code coverage to 100%","Url":"https://github.com/dotnet/corefx/pull/35132","RelatedDescription":"Open PR \"Fix CompositionContract.Equals for null\" (#35132)"},{"Id":"407078612","IsPullRequest":true,"CreatedAt":"2019-02-06T14:58:59","Actor":"dotnet-maestro[bot]","Number":"35125","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.10\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.12\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.13\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35125","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#35125)"},{"Id":"407254333","IsPullRequest":false,"CreatedAt":"2019-02-06T14:13:09","Actor":"iarischenko","Number":"35130","RawContent":null,"Title":"CoreFX standalone build, is it possible?","State":"open","Body":"\r\nIs it possible to build (rebuild) CoreFX with out access to the to the NuGet servers?\r\n\r\nI.e. download nuget packages to a local folder and pass the folder as parameter to build system?\r\nOr build the CoreFX once (with network) and then re-build without network?\r\n\r\n@alpencolt @kbaladurin @MichalStrehovsky ","Url":"https://github.com/dotnet/corefx/issues/35130","RelatedDescription":"Open issue \"CoreFX standalone build, is it possible?\" (#35130)"},{"Id":"407126953","IsPullRequest":false,"CreatedAt":"2019-02-06T08:32:53","Actor":"zvrba","Number":"35128","RawContent":null,"Title":"XsdDataContractExporter throws PNSE","State":"open","Body":"What are the plans for `XsdDataContractExporter` in netcore? Calling `CanExport()` or `Export()` throws PNSE with The implementation of the function requires System.Runtime.Serialization.IDataContractSurrogate which is not supported on this platform.\r\n\r\nI've found an issue that decided to omit `IDataContractSurrogate` from netstandard2.0. Are there any ways around this, e.g., by setting some options?","Url":"https://github.com/dotnet/corefx/issues/35128","RelatedDescription":"Open issue \"XsdDataContractExporter throws PNSE\" (#35128)"},{"Id":"407086108","IsPullRequest":true,"CreatedAt":"2019-02-06T05:27:29","Actor":"krwq","Number":"35126","RawContent":null,"Title":"System.IO.Ports native package","State":"open","Body":"Fixes #33374\r\n\r\nRemaining work:\r\n- test package\r\n- remove native component from the framework","Url":"https://github.com/dotnet/corefx/pull/35126","RelatedDescription":"Open PR \"System.IO.Ports native package\" (#35126)"},{"Id":"407046306","IsPullRequest":true,"CreatedAt":"2019-02-06T04:38:50","Actor":"dotnet-maestro[bot]","Number":"35123","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.3\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.5\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.7\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35123","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#35123)"},{"Id":"406981641","IsPullRequest":true,"CreatedAt":"2019-02-06T01:24:54","Actor":"dotnet-maestro[bot]","Number":"35116","RawContent":null,"Title":"Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/corefx\r\n\r\n- Microsoft.NETCore.Platforms - 3.0.0-preview.19105.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35116","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/corefx\" (#35116)"},{"Id":"407034985","IsPullRequest":true,"CreatedAt":"2019-02-06T00:43:29","Actor":"safern","Number":"35122","RawContent":null,"Title":"Add build batching for official builds","State":"closed","Body":"We need this if we want to have builds per commit. This helps to minimize the number of builds and allows to only have 1 build at a time build triggered automatically.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35122","RelatedDescription":"Closed or merged PR \"Add build batching for official builds\" (#35122)"},{"Id":"407025366","IsPullRequest":false,"CreatedAt":"2019-02-05T23:50:51","Actor":"safern","Number":"35121","RawContent":null,"Title":"Issue to track AzurePipelines trigger comments to be fixed.","State":"open","Body":"Azure Pipelines seems to have rolled out a fix that we should be getting by Friday or Monday. So I've opened this issue to close it once this happens and people gets updated on that matter.\r\n\r\nNote they are only broken for fork PRs.\r\n\r\ncc: @stephentoub @danmosemsft @jkotas @ViktorHofer @MarcoRossignoli @filipnavara ","Url":"https://github.com/dotnet/corefx/issues/35121","RelatedDescription":"Open issue \"Issue to track AzurePipelines trigger comments to be fixed.\" (#35121)"},{"Id":"406999081","IsPullRequest":true,"CreatedAt":"2019-02-05T22:16:56","Actor":"rmkerr","Number":"35118","RawContent":null,"Title":"HTTP/2 Request Cancellation","State":"open","Body":"This PR only covers cancellation up until the point where the request body finishes sending. It covers the following steps of an HTTP/2 request:\r\n\r\n  (1) Waiting on credit to open a stream (if MAX_CONCURRENT_STREAMS set).\r\n  (2) Waiting on the connection write lock.\r\n  (3) Sending headers.\r\n  (4) Waiting on request body credit (on both the stream and the connection).\r\n  (5) Waiting on the connection write lock again.\r\n  (6) Sending request body.\r\n\r\nSteps (3) and (6) will only trigger a cancellation in between frames, as cancelling the send in the middle of a frame would leave the connection in a bad state.\r\n\r\nThe change adds two additional tests for cancellation at steps (1) and (4). It's possible to test those directly since I can force the client to block and wait for a stream or a WINDOW_UPDATE, and then see what happens when I cancel the request. I've tried to cover the others situations in manual testing just by repeatedly cancelling requests after a variable amount of time, but that's more of a stress test and so I cut it out of the PR.\r\n","Url":"https://github.com/dotnet/corefx/pull/35118","RelatedDescription":"Open PR \"HTTP/2 Request Cancellation\" (#35118)"},{"Id":"406976079","IsPullRequest":true,"CreatedAt":"2019-02-05T21:11:52","Actor":"dotnet-maestro-bot","Number":"35115","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @dseefeld\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35115","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#35115)"},{"Id":"406956888","IsPullRequest":false,"CreatedAt":"2019-02-05T20:17:39","Actor":"filipnavara","Number":"35114","RawContent":null,"Title":"ResourceSet doesn't work with serialized resources","State":"open","Body":"We are planning to port our WinForms application to .NET Core 3. We've been maintaining the project side-by-side with the one targeting full .NET Framework for a while. Recent optimization we made in the use of RESX resources unfortunately doesn't work on .NET Core currently. We have a workaround, but the problem is likely to bite more people so I am sharing it.\r\n\r\nWe replaced the standard `ResXFileCodeGenerator` with a T4 script adapted from http://blog.baltrinic.com/software-development/dotnet/t4-template-replace-resxfilecodegenerator. The main change in the generated C# file is that instead of using the `new System.Resources.ResourceManager(typeName, assembly)` constructor with two parameters we use the constructor with there parameters like `new System.Resources.ResourceManager(typeName, assembly, typeof(System.Resources.ResourceSet))`. This causes the resource sets to be typed as `ResourceSet` instead of `RuntimeResourceSet`. The crucial difference is that `ResourceSet` loads all the resources to memory and keeps references to them in a dictionary. On the other hand `RuntimeResourceSet` only keeps the positions of the objects and creates/deserializes them on each access. We specifically want all the resources to be loaded eagerly and kept around because it's images used throughout the application UI that are referenced all the time.\r\n\r\nUnfortunately when the resource deserialization code was brought back in .NET Core 3.0 it was enabled only for `RuntimeResourceSet`. The functionality is not enabled for `ResourceSet` and the constructor taking the `deserializationAllowed` parameter is internal. This causes our application to crash on startup when it is used.","Url":"https://github.com/dotnet/corefx/issues/35114","RelatedDescription":"Open issue \"ResourceSet doesn't work with serialized resources\" (#35114)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"407495990","IsPullRequest":true,"CreatedAt":"2019-02-07T05:12:12","Actor":"JoeRobich","Number":"33193","RawContent":null,"Title":"Re-enable mono CI build","State":"closed","Body":"Updated builds seem to be deploying as per this comment https://github.com/dotnet/roslyn/issues/33161#issuecomment-461047323\r\n\r\nCloses https://github.com/dotnet/roslyn/issues/33161","Url":"https://github.com/dotnet/roslyn/pull/33193","RelatedDescription":"Closed or merged PR \"Re-enable mono CI build\" (#33193)"},{"Id":"407486515","IsPullRequest":true,"CreatedAt":"2019-02-07T04:05:15","Actor":"dotnet-bot","Number":"33190","RawContent":null,"Title":"Merge dev16.0-preview3 to master","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-master\ngit reset --hard upstream/master\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33190","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview3 to master\" (#33190)"},{"Id":"407486693","IsPullRequest":true,"CreatedAt":"2019-02-07T04:04:00","Actor":"dotnet-bot","Number":"33192","RawContent":null,"Title":"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.0-preview3 into dev16.0-preview3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps\ngit reset --hard upstream/dev16.0-preview3-vs-deps\ngit merge upstream/dev16.0-preview3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-preview3-to-dev16.0-preview3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33192","RelatedDescription":"Closed or merged PR \"Merge dev16.0-preview3 to dev16.0-preview3-vs-deps\" (#33192)"},{"Id":"407497110","IsPullRequest":false,"CreatedAt":"2019-02-07T03:41:14","Actor":"dibarbet","Number":"33194","RawContent":null,"Title":"Linux_Test coreclr \"Failed to initialize CoreCLR\" after prepare job step","State":"closed","Body":"Seen in #33029\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=89073\r\n```\r\n##[Error 1]\r\nFailed to initialize CoreCLR, HRESULT: 0x80004005 \r\n```\r\n\r\nHave retried multiple times but it always gets abandoned in a couple seconds.","Url":"https://github.com/dotnet/roslyn/issues/33194","RelatedDescription":"Closed issue \"Linux_Test coreclr \"Failed to initialize CoreCLR\" after prepare job step\" (#33194)"},{"Id":"407457617","IsPullRequest":true,"CreatedAt":"2019-02-07T02:50:59","Actor":"agocke","Number":"33186","RawContent":null,"Title":"Enable preview version for certain target frameworks","State":"closed","Body":"Enable 'preview' langversion in our MSBuild .targets file for projects targeting netcoreapp3.0 or netstandard2.1. A warning is already provided in the dotnet SDK when using these preview versions (well, netstandard2.1 doesn't have a shipping preview yet, but presumably it will behave like netcoreapp3.0) so we can automatically upgrade the compiler to Preview when using them.","Url":"https://github.com/dotnet/roslyn/pull/33186","RelatedDescription":"Closed or merged PR \"Enable preview version for certain target frameworks\" (#33186)"},{"Id":"407519560","IsPullRequest":true,"CreatedAt":"2019-02-07T02:39:42","Actor":"ivanbasov","Number":"33196","RawContent":null,"Title":"completion and signature help ordering","State":"open","Body":"fixes https://github.com/dotnet/roslyn/issues/32940\r\n\r\nTagging @AmadeusW for review as well\r\n\r\n1. Two tests are failing TestKeepUserSelectedItem2 and TestKeepUserSelectedItem3 due to test infrastructure update (previously, it didn't try completion for some scenarios but executed signature help only). As I understand, those tests failed because completion now is handled before signature help and the new completion returns \"handled\" even if it sent Up/Down for an empty list. @AmadeusW , please confirm or correct me.\r\n\r\n2. @jinujoseph, without fixing 1, I would not put this into preview 4. Even having 1 fixed, the change is large and maybe risky. It seems to be we may need to move it into Dev 16.1 preview 1.","Url":"https://github.com/dotnet/roslyn/pull/33196","RelatedDescription":"Open PR \"completion and signature help ordering\" (#33196)"},{"Id":"407504594","IsPullRequest":false,"CreatedAt":"2019-02-07T01:20:01","Actor":"dibarbet","Number":"33195","RawContent":null,"Title":"Convert tuple to struct suggestion only shows up on the single open parentheses character","State":"open","Body":"**Steps to Reproduce**:\r\n```csharp\r\nclass Test\r\n{\r\n    void Method()\r\n    {\r\n        var t1 = (a: 1, b: 2);\r\n    }\r\n}\r\n```\r\n\r\nIf you position the mouse cursor before the first parentheses of the tuple, there is an option to convert the tuple to a struct.  This seems to be the only location where the quick fix suggestion pops up.\r\n\r\nThis ends up making this feature hard to find, I was looking for it specifically and it took some time to figure out exactly how to trigger it.\r\n\r\n**Expected Behavior**:\r\nIt seems like it would be better if this suggestion was offered anywhere in between (and including) the tuple's parentheses\r\n\r\n**Actual Behavior**:\r\nSuggestion is only offered when cursor is placed directly before the first of the tuple's parentheses.","Url":"https://github.com/dotnet/roslyn/issues/33195","RelatedDescription":"Open issue \"Convert tuple to struct suggestion only shows up on the single open parentheses character\" (#33195)"},{"Id":"407486554","IsPullRequest":true,"CreatedAt":"2019-02-07T00:00:23","Actor":"dotnet-bot","Number":"33191","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33191","RelatedDescription":"Open PR \"Merge master to dev16.1-preview1\" (#33191)"},{"Id":"407474706","IsPullRequest":false,"CreatedAt":"2019-02-06T23:14:24","Actor":"333fred","Number":"33189","RawContent":null,"Title":"Bad Error in Recursive Pattern with Indexed Properties","State":"open","Body":"https://github.com/dotnet/roslyn/pull/33178#discussion_r254487264\r\n\r\nSee IsPattern_BadRecursivePattern_03. The error reported on the `get` accessor is unclear, as there is a `get` member available, but because it's an indexed property it doesn't work correctly.","Url":"https://github.com/dotnet/roslyn/issues/33189","RelatedDescription":"Open issue \"Bad Error in Recursive Pattern with Indexed Properties\" (#33189)"},{"Id":"407467494","IsPullRequest":true,"CreatedAt":"2019-02-06T22:50:17","Actor":"dibarbet","Number":"33188","RawContent":null,"Title":"Remove block comments first if selection exactly matches block.  Reso…","State":"open","Body":"…lves #31669 \r\n\r\nChecks to see if the selection spans exactly a block comment.  If so, remove that first rather than removing any single line comments inside the block comment.","Url":"https://github.com/dotnet/roslyn/pull/33188","RelatedDescription":"Open PR \"Remove block comments first if selection exactly matches block.  Reso…\" (#33188)"},{"Id":"407462841","IsPullRequest":false,"CreatedAt":"2019-02-06T22:35:41","Actor":"ryzngard","Number":"33187","RawContent":null,"Title":"PackageInstallerFactory::ProcessProjectChange should only process projects that are ready","State":"open","Body":"When we query NuGet for package information to cache, if the project is not ready NuGet will throw an `InvalidOperationException`. The API necessary to query if the project is ready to be queried is not currently available. This issue is to track updating the logic once the correct API is available and we can accurately determine that calling `GetInstalledPackages` should succeed. ","Url":"https://github.com/dotnet/roslyn/issues/33187","RelatedDescription":"Open issue \"PackageInstallerFactory::ProcessProjectChange should only process projects that are ready\" (#33187)"},{"Id":"407441811","IsPullRequest":true,"CreatedAt":"2019-02-06T21:36:31","Actor":"chborl","Number":"33185","RawContent":null,"Title":"Have generate constructor respect field naming styles","State":"open","Body":"Fixes #14077\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/33185","RelatedDescription":"Open PR \"Have generate constructor respect field naming styles\" (#33185)"},{"Id":"407440366","IsPullRequest":true,"CreatedAt":"2019-02-06T21:32:42","Actor":"sharwell","Number":"33184","RawContent":null,"Title":"Revert \"Add an adapter assembly for MonoDevelop\"","State":"open","Body":"MonoDevelop manages their upgrade process fully independently of the Roslyn workflow, including cases where source- or binary-breaking changes occur. The ExternalAccess adapter assembly is unnecessary maintenance overhead for this scenario.\r\n\r\nThis reverts commit 78d8f0fcfaf892bb42160a56cab754866e6c4620.","Url":"https://github.com/dotnet/roslyn/pull/33184","RelatedDescription":"Open PR \"Revert \"Add an adapter assembly for MonoDevelop\"\" (#33184)"},{"Id":"407414591","IsPullRequest":true,"CreatedAt":"2019-02-06T20:30:54","Actor":"chsienki","Number":"33182","RawContent":null,"Title":"Remove OptProf tests that are not currently supported","State":"closed","Body":"The removed RPS tests are not supported in the training environment right now.","Url":"https://github.com/dotnet/roslyn/pull/33182","RelatedDescription":"Closed or merged PR \"Remove OptProf tests that are not currently supported\" (#33182)"},{"Id":"407416044","IsPullRequest":true,"CreatedAt":"2019-02-06T20:27:03","Actor":"sharwell","Number":"33183","RawContent":null,"Title":"Fix failure to decompile certain assemblies","State":"open","Body":"Fixes a bug reported through email by @veleek","Url":"https://github.com/dotnet/roslyn/pull/33183","RelatedDescription":"Open PR \"Fix failure to decompile certain assemblies\" (#33183)"},{"Id":"407408605","IsPullRequest":true,"CreatedAt":"2019-02-06T20:07:29","Actor":"heejaechang","Number":"33181","RawContent":null,"Title":"removed 3 OptProf tests that kept failing","State":"open","Body":"opened tracking issue - https://github.com/dotnet/roslyn/issues/33180\r\n\r\nthis should let us have green OptProf training runs.","Url":"https://github.com/dotnet/roslyn/pull/33181","RelatedDescription":"Open PR \"removed 3 OptProf tests that kept failing\" (#33181)"},{"Id":"407408133","IsPullRequest":false,"CreatedAt":"2019-02-06T20:06:14","Actor":"heejaechang","Number":"33180","RawContent":null,"Title":"investigate failing OptProf Tests","State":"open","Body":"these 3 OptProf tests are kept failing. see why they are failing.\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/52370362-8837b280-2a07-11e9-8468-95c23b1474d7.png)\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_releaseProgress?releaseId=250651&environmentId=1081950&extensionId=ms.vss-test-web.test-result-in-release-environment-editor-tab&_a=release-environment-extension\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33180","RelatedDescription":"Open issue \"investigate failing OptProf Tests\" (#33180)"},{"Id":"407402395","IsPullRequest":false,"CreatedAt":"2019-02-06T19:51:09","Actor":"Therzok","Number":"33179","RawContent":null,"Title":"Avoid delegate captures for ConcurrentDictionary.AddOrUpdate","State":"open","Body":"**Version Used**: \r\n3.0.0-beta2-19055-09\r\n\r\nConcurrentDictionary.AddOrUpdate is misused throughout the codebase. The anti-pattern seems to be:\r\n```csharp\r\nConcurrentDictionary<T1, T2> dictionary;\r\ndictionary.AddOrUpdate(key, value, (_1, _2) => value);\r\n```\r\n\r\nThe right usage would be:\r\n```\r\nConcurrentDictionary<T1, T2> dictionary;\r\ndictionary[key] = value;\r\n```\r\n\r\nMore info on this is in this commit: https://github.com/dotnet/roslyn/pull/33173/commits/2ac11675a1785bdb58c54369f8a6cbb3c529d50e","Url":"https://github.com/dotnet/roslyn/issues/33179","RelatedDescription":"Open issue \"Avoid delegate captures for ConcurrentDictionary.AddOrUpdate\" (#33179)"},{"Id":"407398396","IsPullRequest":true,"CreatedAt":"2019-02-06T19:40:37","Actor":"333fred","Number":"33178","RawContent":null,"Title":"Make IPropertySubpattern Internal","State":"open","Body":"Updates the structure of IPropertySubpattern to be what we decided in the IOperation design meeting, and makes the implementation internal until we finalize C# 8.\r\nFixes https://github.com/dotnet/roslyn/issues/33018.","Url":"https://github.com/dotnet/roslyn/pull/33178","RelatedDescription":"Open PR \"Make IPropertySubpattern Internal\" (#33178)"},{"Id":"407389863","IsPullRequest":true,"CreatedAt":"2019-02-06T19:18:48","Actor":"ryzngard","Number":"33177","RawContent":null,"Title":"Expand RemoveAllComments to have more in depth logic ","State":"open","Body":"Make RemoveAllComments special case TypeDeclarations to remove \r\nleading and trailing comments on the open/close tokens as well in csharp.\r\n\r\nSeparate out the logic for RemoveAllComments and RemoveLeadingAndTrailingComments since the behavior could be different based on the syntax passed in. RemoveLeadingAndTrailingComments only works on leading and trailing syntax. \r\n\r\nFixes #31377 ","Url":"https://github.com/dotnet/roslyn/pull/33177","RelatedDescription":"Open PR \"Expand RemoveAllComments to have more in depth logic \" (#33177)"},{"Id":"407387173","IsPullRequest":false,"CreatedAt":"2019-02-06T19:11:54","Actor":"heejaechang","Number":"33176","RawContent":null,"Title":"check other calls for Incorrect IDE0004 \"Cast is redundant\" - https://github.com/dotnet/roslyn/pull/32467","State":"open","Body":"there are other missing check we need here - https://github.com/dotnet/roslyn/pull/32467#pullrequestreview-192737910","Url":"https://github.com/dotnet/roslyn/issues/33176","RelatedDescription":"Open issue \"check other calls for Incorrect IDE0004 \"Cast is redundant\" - https://github.com/dotnet/roslyn/pull/32467\" (#33176)"},{"Id":"407384389","IsPullRequest":false,"CreatedAt":"2019-02-06T19:04:28","Actor":"333fred","Number":"33175","RawContent":null,"Title":"Follow up on IPropertySubpatternOperation Issues","State":"open","Body":"We currently don't expose invalid `ISymbol`s on an `IPropertySubpattern.Member` if the symbol is something other than `IFieldSymbol`, `IPropertySymbol`, or `null`. We need to expose this is in some manner.","Url":"https://github.com/dotnet/roslyn/issues/33175","RelatedDescription":"Open issue \"Follow up on IPropertySubpatternOperation Issues\" (#33175)"},{"Id":"407369589","IsPullRequest":false,"CreatedAt":"2019-02-06T18:26:38","Actor":"TessenR","Number":"33174","RawContent":null,"Title":"Nullable<T>.GetType() should warn about possible null values and update the accessed variable's nullablility","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.0.0 Preview 2.1\r\nVisualStudio.16.Preview/16.0.0-pre.2.1+28529.54\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  static void Main()\r\n  {\r\n    int? x = null;\r\n    x.GetType(); // missing warning\r\n    var y = (int) x; // incorrect warning\r\n  }\r\n}\r\n```\r\n**Expected Behavior**:\r\nWarning `CS8629 Nullable value type may be null.` for `x.GetType()`.\r\nNo warnings for the line `var y = (int) x;` since x should be known to be not null after `x.GetType()`\r\n\r\n**Actual Behavior**:\r\nNo warnings for `x.GetType()`. The program crashes at runtime at this line with a `NullReferenceException`. Incorrect warning CS8629 for `var y = (int) x;`.\r\n","Url":"https://github.com/dotnet/roslyn/issues/33174","RelatedDescription":"Open issue \"Nullable<T>.GetType() should warn about possible null values and update the accessed variable's nullablility\" (#33174)"},{"Id":"407256092","IsPullRequest":true,"CreatedAt":"2019-02-06T14:17:28","Actor":"Therzok","Number":"33173","RawContent":null,"Title":"Optimize allocations for symbol tree info analyzer","State":"open","Body":"Fixes #33172","Url":"https://github.com/dotnet/roslyn/pull/33173","RelatedDescription":"Open PR \"Optimize allocations for symbol tree info analyzer\" (#33173)"},{"Id":"407223778","IsPullRequest":false,"CreatedAt":"2019-02-06T12:59:30","Actor":"Therzok","Number":"33172","RawContent":null,"Title":"Allocations while typing from lambda captures in SymbolTreeInfo incremental analyzer","State":"open","Body":"**Version Used**: \r\n2.10.0-beta2-63410-10 (but looks like it's the same in 3.0.0-beta2-19055-09)\r\n\r\n**Steps to Reproduce**:\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Run analyzers on a solution (in my case [this](https://github.com/mono/refactoringessentials/tree/monodevelop2) one)\r\n2. Observe a lot of allocations coming in from SymbolTreeInfoIncrementalAnalyzerProvider+IncrementalAnalyzer.UpdateReferencesAync\r\n\r\n**Expected Behavior**:\r\nLambda captures and iterators should be avoided.\r\n\r\n**Actual Behavior**:\r\nThey are not.\r\n\r\nThey're causing up to 10MB out of the 100MB allocated during typing in one of my traces (delegate captures, enumerator boxes)\r\n\r\nNot much we can do to simplify code, but splitting methods into CurrentProcess/RemoteProcess will at least mitigate the allocations for the in process version.","Url":"https://github.com/dotnet/roslyn/issues/33172","RelatedDescription":"Open issue \"Allocations while typing from lambda captures in SymbolTreeInfo incremental analyzer\" (#33172)"},{"Id":"407223581","IsPullRequest":false,"CreatedAt":"2019-02-06T12:58:55","Actor":"Droni","Number":"33171","RawContent":null,"Title":"The Document.Folders property is empty for ClassLibrary (C#, VB) .Net Framework in VS2019 16.0.0 Preview 2.2","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.0.0 Preview 2.2\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new ClassLibrary (C# or VB) .Net Framework project\r\n2. Add a new folder with some name\r\n3. Add a new class to this folder \r\n\r\n**Expected Behavior**:\r\nThe Document.Folders property should contain a folder name when the class is declared\r\n**Actual Behavior**:\r\nThe Document.Folders property is empty","Url":"https://github.com/dotnet/roslyn/issues/33171","RelatedDescription":"Open issue \"The Document.Folders property is empty for ClassLibrary (C#, VB) .Net Framework in VS2019 16.0.0 Preview 2.2\" (#33171)"},{"Id":"407201267","IsPullRequest":true,"CreatedAt":"2019-02-06T11:57:19","Actor":"sharwell","Number":"33170","RawContent":null,"Title":"Remove dead code","State":"open","Body":"Closes #32964\r\n\r\nI was not able to find a case where the IDE clearly misbehaves over this. Of particular relevance:\r\n\r\n1. The use of `:_` at the end of a line produces a compiler error that `_` must be followed by a whitespace\r\n2. Formatting a document containing `: _` at the end of a line results in both characters getting removed","Url":"https://github.com/dotnet/roslyn/pull/33170","RelatedDescription":"Open PR \"Remove dead code\" (#33170)"},{"Id":"407142008","IsPullRequest":false,"CreatedAt":"2019-02-06T09:19:39","Actor":"davidroth","Number":"33169","RawContent":null,"Title":"Missing expected nullable mismatch warnings around method constraints check","State":"open","Body":"**Version Used**: \r\nVS 2019 - Preview 2\r\n\r\nIn Preview2, if I declare a generic method with a nullable type constraint `class?` for the type `T`, no warning is shown, even if one generic parameter has the non-nullable type constraint `class` for `T`:\r\n\r\n**Steps to Reproduce**:\r\n![image](https://user-images.githubusercontent.com/338856/52331055-70583280-29f7-11e9-8909-8e71070e29a8.png)\r\n\r\n**Expected Behavior**:\r\n\r\nI think a warning should be prompted with the squiggle surrounding the following block `where T : class?`:\r\n\r\nProposal:\r\n`The constraint 'class?' cannot be used in the generic method 'Class1.Method<T>'. Nullability of type argument 'T' doesn't match 'class' constraint of 'Class1.Samle<T>'.`\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/33169","RelatedDescription":"Open issue \"Missing expected nullable mismatch warnings around method constraints check\" (#33169)"},{"Id":"407121521","IsPullRequest":true,"CreatedAt":"2019-02-06T08:14:43","Actor":"genlu","Number":"33168","RawContent":null,"Title":"Fix crash in classification service","State":"open","Body":"#33167 \r\n\r\nTag @jasonmalinowski who might have some insight here","Url":"https://github.com/dotnet/roslyn/pull/33168","RelatedDescription":"Open PR \"Fix crash in classification service\" (#33168)"},{"Id":"407120214","IsPullRequest":false,"CreatedAt":"2019-02-06T08:09:45","Actor":"genlu","Number":"33167","RawContent":null,"Title":"VS crashes when renaming a wpf xaml file to a .cs file","State":"open","Body":"Repro steps:\r\n1. create a WPF app\r\n2. open xaml in designer\r\n3. rename .xaml file to .cs\r\n\r\nstack-trace:\r\n```\r\nSystem.AggregateException: One or more errors occurred. ---> System.NullReferenceException: Object reference not set to an instance of an object. \r\nat Microsoft.CodeAnalysis.Classification.AbstractClassificationService.<AddSyntacticClassificationsAsync>d__3.MoveNext() --- \r\nEnd of stack trace from previous location where exception was thrown \r\n--- at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject) \r\n--- End of inner exception stack trace --- \r\nat System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) \r\nat System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpansForCurrentTree[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, Document document, List`1 classifiedSpans) at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.AddClassifiedSpans[TClassificationService](IClassificationDelegationService`1 delegationService, TClassificationService classificationService, SnapshotSpan span, List`1 classifiedSpans) \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags[TClassificationService](NormalizedSnapshotSpanCollection spans, HostLanguageServices languageServices, IClassificationDelegationService`1 delegationService) \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans) \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans) \r\nat Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.<GetTagsForBuffer>d__46.MoveNext() \r\n---> (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object. \r\nat Microsoft.CodeAnalysis.Classification.AbstractClassificationService.<AddSyntacticClassificationsAsync>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown --- \r\nat Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)<--- \r\n```\r\n\r\nThe cause seems to be when rename happened, VS creates a snapshot of content type \"CSharp\" for the xaml file, which however is still in the special \"-xaml\" project in the workspace.","Url":"https://github.com/dotnet/roslyn/issues/33167","RelatedDescription":"Open issue \"VS crashes when renaming a wpf xaml file to a .cs file\" (#33167)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"407119732","IsPullRequest":true,"CreatedAt":"2019-02-06T10:44:44","Actor":"jkotas","Number":"6960","RawContent":null,"Title":"Implement LPUTF8Str string marshaling","State":"closed","Body":"Fixes #6945","Url":"https://github.com/dotnet/corert/pull/6960","RelatedDescription":"Closed or merged PR \"Implement LPUTF8Str string marshaling\" (#6960)"},{"Id":"406159740","IsPullRequest":false,"CreatedAt":"2019-02-06T10:44:44","Actor":"szhaomsft","Number":"6945","RawContent":null,"Title":"MarshalAs(UnmanagedType.LPUTF8Str) error","State":"closed","Body":" it reports that \r\n\r\nrequires non-trivial marshalling that is not yet supported by this compiler.","Url":"https://github.com/dotnet/corert/issues/6945","RelatedDescription":"Closed issue \"MarshalAs(UnmanagedType.LPUTF8Str) error\" (#6945)"},{"Id":"407047937","IsPullRequest":true,"CreatedAt":"2019-02-06T01:36:20","Actor":"szhaomsft","Number":"6959","RawContent":null,"Title":"fix grpc link issue","State":"open","Body":"this is a fix to https://github.com/dotnet/corert/issues/6375\r\n\r\nwith that,  one can link using dotnet core","Url":"https://github.com/dotnet/corert/pull/6959","RelatedDescription":"Open PR \"fix grpc link issue\" (#6959)"},{"Id":"406980554","IsPullRequest":false,"CreatedAt":"2019-02-05T22:43:04","Actor":"homer90","Number":"6958","RawContent":null,"Title":"Assembly Load(byte[]) with native compiled exe/dll","State":"closed","Body":"I am really excited and fascinated by CoreRT!\r\nPorting one of my existing projects I struggle with this code:\r\n```\r\nvar bytes = File.ReadAllBytes(@\"C:\\corert\\native_helper.dll\");\r\nConsole.WriteLine($\"bytes: {bytes.Length}\");\r\nvar assembly = Assembly.Load(bytes);\r\n```\r\n\r\nMy main program/exe (c# compiled to native code) wants to load my library \"native_helper.dll\" bytes (also c# compiled to native code). It throws this error: \r\n> bytes: 3379120\r\n> \"Unhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\"\r\n\r\nIn System.Private.CoreLib.dll it checks for \"AppDomain.CheckLoadByteArraySupported();\" and I guess that's where it crashes.\r\n\r\nI searched through the samples and tried serveral options in .csproj. I ended up with those:\r\n```\r\n<OutputType>Library</OutputType>\r\n<NativeLib>Shared</NativeLib>\r\n```\r\n\r\nHow can I load assembly bytes into my program like in .NET Framework (code above)? Is this even possible after compiling it into native code? Thanks guys!\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6958","RelatedDescription":"Closed issue \"Assembly Load(byte[]) with native compiled exe/dll\" (#6958)"},{"Id":"406929889","IsPullRequest":true,"CreatedAt":"2019-02-05T19:06:01","Actor":"MichalStrehovsky","Number":"6957","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6957","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6957)"},{"Id":"406784362","IsPullRequest":true,"CreatedAt":"2019-02-05T17:03:53","Actor":"MichalStrehovsky","Number":"6954","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6954","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#6954)"},{"Id":"406877639","IsPullRequest":false,"CreatedAt":"2019-02-05T16:53:07","Actor":"filipnavara","Number":"6956","RawContent":null,"Title":"Win32 API invoked on macOS","State":"open","Body":"The [OSX10.12 Debug and CoreFX tests job](https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1293/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07) in PR #6955 failed with the following error:\r\n\r\n```\r\n08:46:04 xUnit.net console test runner (64-bit .NET Core)\r\n08:46:04 Copyright (C) 2014 Outercurve Foundation.\r\n08:46:04 \r\n08:46:04 Discovering: System.Collections.Tests\r\n08:46:05 Discovered:  System.Collections.Tests\r\n08:46:05 Starting:    System.Collections.Tests\r\n08:46:06 Unhandled Exception: EETypeRva:0x017EDFF8: \r\n08:46:06    at xunit.console!<BaseAddress>+0x7940c1\r\n08:46:06    at xunit.console!<BaseAddress>+0x6fe667\r\n08:46:06    at System.Diagnostics.StackTrace..ctor(Int32, Boolean) + 0x8f\r\n08:46:06    at System.Diagnostics.DebugProvider.Fail(String, String) + 0x4d\r\n08:46:06    at System.Diagnostics.Debug.Fail(String, String) + 0x45\r\n08:46:06    at System.Diagnostics.Debug.Assert(Boolean, String, String) + 0x43\r\n08:46:06    at System.Diagnostics.Debug.Assert(Boolean) + 0x28\r\n08:46:06    at xunit.console!<BaseAddress>+0x688755\r\n08:46:06    at xunit.console!<BaseAddress>+0x7c6608\r\n08:46:06    at xunit.console!<BaseAddress>+0x79f36b\r\n08:46:06    at xunit.console!<BaseAddress>+0x79ebc7\r\n08:46:06    at xunit.console!<BaseAddress>+0x79e9b6\r\n08:46:06    at xunit.console!<BaseAddress>+0x7c6281\r\n08:46:06    at xunit.console!<BaseAddress>+0x6943f3\r\n08:46:06    at xunit.console!<BaseAddress>+0x68b879\r\n08:46:06    at xunit.console!<BaseAddress>+0x6a718a\r\n08:46:06    at xunit.console!<BaseAddress>+0x6a7351\r\n08:46:06    at xunit.console!<BaseAddress>+0x68bac5\r\n08:46:06    at xunit.console!<BaseAddress>+0x6c2ae8\r\n08:46:06    at xunit.console!<BaseAddress>+0x6c247f\r\n08:46:06    at xunit.console!<BaseAddress>+0x6b3b3b\r\n08:46:06    at xunit.console!<BaseAddress>+0x90ea54\r\n08:46:06    at System.Threading.Tasks.TaskFactory`1.StartNew(Func`1, CancellationToken, TaskCreationOptions, TaskScheduler) + 0x6c\r\n08:46:06    at System.Threading.Tasks.Task.Run[TResult](Func`1, CancellationToken) + 0xcc\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_0.<RunTestCollectionsAsync>b__1(Func`1) + 0x3f\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_0.<RunTestCollectionsAsync>b__2(Tuple`2) + 0xae\r\n08:46:06    at xunit.console!<BaseAddress>+0x865cb7\r\n08:46:06    at xunit.console!<BaseAddress>+0x7ea9b9\r\n08:46:06    at xunit.console!<BaseAddress>+0xa50eea\r\n08:46:06    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1) + 0x82\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.<RunTestCollectionsAsync>d__14.MoveNext() + 0x359\r\n08:46:06    at xunit.console!<BaseAddress>+0xa8a25a\r\n08:46:06    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&) + 0x1f\r\n08:46:06    at Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(IMessageBus, CancellationTokenSource) + 0x8d\r\n08:46:06    at Xunit.Sdk.TestAssemblyRunner`1.<RunAsync>d__41.MoveNext() + 0x320\r\n08:46:06    at xunit.console!<BaseAddress>+0xa90aa9\r\n08:46:06    at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine&) + 0x34\r\n08:46:06    at Xunit.Sdk.TestAssemblyRunner`1.RunAsync() + 0x7b\r\n08:46:06    at Xunit.Sdk.XunitTestFrameworkExecutor.<RunTestCases>d__6.MoveNext() + 0xc0\r\n08:46:06    at xunit.console!<BaseAddress>+0xa8c91a\r\n08:46:06    at System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start[TStateMachine](TStateMachine&) + 0x1b\r\n08:46:06    at Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0xa8\r\n08:46:06    at Xunit.Sdk.TestFrameworkExecutor`1.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x98\r\n08:46:06    at Xunit.Xunit2.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x3d\r\n08:46:06    at Xunit.XunitFrontController.RunTests(IEnumerable`1, IMessageSink, ITestFrameworkExecutionOptions) + 0x4c\r\n08:46:06    at Xunit.ConsoleClient.Program.ExecuteAssembly(Object, String, XunitProjectAssembly, Boolean, Boolean, Boolean, Boolean, Nullable`1, Nullable`1, ExtendedXunitFilters) + 0x7d6\r\n08:46:06    at Xunit.ConsoleClient.Program.RunProject(String, ExtendedXunitProject, Boolean, Boolean, Boolean, Nullable`1, Nullable`1, Nullable`1) + 0x59b\r\n08:46:06    at Xunit.ConsoleClient.Program.Main(String[]) + 0x3ad\r\n08:46:06    at xunit.console!<BaseAddress>+0xa4c2ff\r\n08:46:06    at xunit.console!<BaseAddress>+0xa4c381\r\n08:46:06 \r\n08:46:07 Finished:    System.Collections.Tests\r\n08:46:07 System.DllNotFoundException: Unable to load DLL 'api-ms-win-core-kernel32-legacy-l1-1-0.dll': The specified module could not be found.\r\n```\r\n\r\nThe Assert failure is likely something broken in the PR, but the call to `PInvoke_RaiseFailFastException` (src/System.Private.CoreLib/src/Interop/Interop.manual.cs) on non-Windows system is likely something broken.","Url":"https://github.com/dotnet/corert/issues/6956","RelatedDescription":"Open issue \"Win32 API invoked on macOS\" (#6956)"},{"Id":"406871094","IsPullRequest":true,"CreatedAt":"2019-02-05T16:38:46","Actor":"filipnavara","Number":"6955","RawContent":null,"Title":"Improve thread pool performance on Unix","State":"open","Body":"There's couple of objectives to these changes:\r\n- Improve performance of thread pool on Unix for certain workloads [while not regressing it for others]\r\n- Make the LowLevel* synchronization primitives self-dependent and remove the dependency on `WaitSubsystem`, to allow sharing them with Mono\r\n- Bring the code closer to CoreCLR in case someone decides to switch to the managed thread pool one day\r\n\r\nList of changes:\r\n- `FirstLevelSpinWaiter` is renamed to `LowLevelSpinWaiter` for consistency with the usage of `LowLevel` prefix in the wait subsystem\r\n- The constants and `Wait` method of `LowLevelSpinWaiter` are exposed for reuse from `LowLevelLifoSemaphore`\r\n- `LowLevelLifoSemaphore` is updated to more closely mimic CoreCLR's CLRLifoSemaphore spinning logic\r\n- `LowLevelLifoSemaphore.Unix.cs` is reimplemented on top of `LowLevel[Monitor/Lock]` to remove dependency on the complex `WaitSubsystem` and its contention on a single lock\r\n\r\nI used [improvised benchmark](https://gist.github.com/filipnavara/8e6aa10131e68d313934b006aea82abd) based on code from https://github.com/dotnet/coreclr/pull/13670#issuecomment-325858065. It is likely flawed, but it should be useful for basic comparison.\r\n\r\nBenchmark results are included below. On macOS it is consistent improvement over baseline with no regression on sustained load. I will run the benchmarks on Windows too and report the results. At the moment I don't have a Linux setup to test this on.\r\n\r\nThis is part of a bigger patch series that is supposed to make the portable thread pool implementation sharable across .NET runtimes. Initially I target CoreRT/Unix and Mono, but I would like to allow building CoreCLR with it for comparison purposes as well.\r\n\r\n/cc @kouvel @jkoritzinsky @jkotas @benaadams @marek-safar ","Url":"https://github.com/dotnet/corert/pull/6955","RelatedDescription":"Open PR \"Improve thread pool performance on Unix\" (#6955)"},{"Id":"406643392","IsPullRequest":true,"CreatedAt":"2019-02-05T06:55:41","Actor":"Dotnet-GitSync-Bot","Number":"6953","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6953","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6953)"},{"Id":"406617961","IsPullRequest":true,"CreatedAt":"2019-02-05T06:06:09","Actor":"Dotnet-GitSync-Bot","Number":"6952","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6952","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6952)"},{"Id":"406527943","IsPullRequest":false,"CreatedAt":"2019-02-04T21:30:21","Actor":"letmaik","Number":"6951","RawContent":null,"Title":"Support for anonymous types","State":"open","Body":"I'm trying to serialize JSON using `Newtonsoft.JSON` by making use of anonymous types and even though CoreRT doesn't raise an error I have tried to play around with `rd.xml` to fix this issue, without success:\r\n\r\n```cs\r\nvar a = JObject.FromObject(new { // anonymous type here\r\n  foo = \"bar\"\r\n});\r\nConsole.WriteLine(a.ToString()); // prints {}\r\n\r\n// not relying on reflection works:\r\nvar b = new JObject();\r\nb.Add(\"foo\", \"bar\");\r\nConsole.WriteLine(b.ToString()); // prints { \"foo\": \"bar\" }\r\n```\r\n\r\nIn short, does CoreRT fully support reflection on anonymous types? It's worrying that no error is thrown here if this is an unsupported feature. Or maybe just a bug?","Url":"https://github.com/dotnet/corert/issues/6951","RelatedDescription":"Open issue \"Support for anonymous types\" (#6951)"},{"Id":"406486287","IsPullRequest":true,"CreatedAt":"2019-02-04T20:46:25","Actor":"Dotnet-GitSync-Bot","Number":"6950","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6950","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6950)"},{"Id":"406434183","IsPullRequest":false,"CreatedAt":"2019-02-04T17:21:10","Actor":"alpencolt","Number":"6949","RawContent":null,"Title":"[Question] Assembly loading","State":"open","Body":"I'm interesting in assembly loading functional `Assembly.LoadFile()`. How it can implemented and will it be implemented? I see two ways how to do it:\r\n- First option is using interpreter #5011 (as I see @tonerdo has huge progress)\r\n- Second is using Native Library mode (https://github.com/dotnet/corert/tree/master/samples/NativeLibrary). Libraries can be precopiled an loaded (like `dlopen`). Can it work?\r\n\r\ncc @jkotas @kvochko @iarischenko @kbaladurin ","Url":"https://github.com/dotnet/corert/issues/6949","RelatedDescription":"Open issue \"[Question] Assembly loading\" (#6949)"},{"Id":"406183059","IsPullRequest":false,"CreatedAt":"2019-02-04T17:12:37","Actor":"davidknise","Number":"6947","RawContent":null,"Title":"Assembly.GetEntryAssembly().Location could be the single Exe","State":"closed","Body":"First, is there a way to get the full path to the executing ***.exe** file?\r\n\r\nI see the reasoning that `Assembly.GetEntryAssembly()` value is an empty string because the assembly which it was built in no longer exists. I actually expected this to be the single executable, no matter where I was, because I wasn't thinking about the code from a pre-compiled/symbols perspective, I was thinking of it from a post-compile. **Should it be the compiled ***.exe**?\r\n\r\n**Scenario:**\r\nI'm building our single-file installer as a small CoreRT CLI. Users can double click it or call it from the command line. The installer sets up a folder structure and drops our latest bits in the right spots. Because of this, I expect the installation directory to be empty, *but it would make sense to allow for the installer to be in the directory*. In addition, I ask them if they would like to clear the directory. I'd like to skip deleting this file or allow it to be the only file in the directory, but I don't know it's name and can't get a file handle to identify it either.\r\n\r\nRelated issues:\r\n[#1773](https://github.com/dotnet/corert/issues/1773) [#5467](https://github.com/dotnet/corert/issues/5467)","Url":"https://github.com/dotnet/corert/issues/6947","RelatedDescription":"Closed issue \"Assembly.GetEntryAssembly().Location could be the single Exe\" (#6947)"},{"Id":"406409857","IsPullRequest":false,"CreatedAt":"2019-02-04T16:26:45","Actor":"Sergio0694","Number":"6948","RawContent":null,"Title":"[.NET Native] Errors ILT0005 and NUTC3033 when building a UWP app with ImageSharp (.NET Standard)","State":"open","Body":"Hello,\r\nI'm working on a UWP project (currently targeting SDK 17134), and since I referenced the [ImageSharp library](https://github.com/SixLabors/ImageSharp) (which targets .NET Standard) I can no longer build my UWP app in Release mode.\r\n\r\n[This is the issue](https://github.com/SixLabors/ImageSharp/issues/828) on the ImageSharp repo, but I thought I'd post it here as well, since it's probably caused by the .NET Native compiler more than the library itself.\r\n\r\nHere are the errors I'm getting:\r\n\r\n> ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x64.microsoft.net.native.compiler\\2.2.1\\tools\\x64\\ilc\\Tools\\nutc_driver.exe @\"C:\\Users\\Sergi\\source\\repos\\ImageSharpRepro\\ImageSharpRepro\\obj\\x64\\Release\\ilc\\intermediate\\MDIL\\ImageSharpRepro.rsp\"' returned exit code 1\r\n\r\n> Error: NUTC3033:Internal Compiler Error: Invalid MethodImpl body=6000353 decl=600032d when loading type 'SixLabors.ImageSharp.Processing.Processors.Quantization.PaletteQuantizer`1<TPixel>' from assembly 'SixLabors.ImageSharp' while loading MethodImpl list for 'instance SixLabors.ImageSharp.Processing.Processors.Quantization.IFrameQuantizer`1<TPixel1> SixLabors.ImageSharp.Processing.Processors.Quantization.PaletteQuantizer`1<TPixel>.SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer.CreateFrameQuantizer<TPixel1>(SixLabors.ImageSharp.Configuration)'. while loading type 'SixLabors.ImageSharp.Processing.Processors.Quantization.PaletteQuantizer`1<TPixel>'. while computing compilation roots.\r\n\r\n### Steps to Reproduce\r\n\r\n- Create a new UWP project (I'm targeting SDK 17134 and using 16299 as minimum)\r\n- Reference the ImageSharp NuGet package (I'm using version `1.0.0-beta0006`)\r\n- Try to build the app in Release mode (either x86 or x64), this fails with the errors above\r\n\r\nI've already sent a repro to dotnetnative@microsoft.com - but the issue can really just be easily reproduced in any UWP app just by referencing ImageSharp and trying to build in Release.\r\n\r\n**NOTE**: I've tried to build the app both using .NETCore.UWP 6.1.9, 6.2.2 and 6.2.3, all of them fail with similar errors. If you have an internal build of the upcoming 6.2.4 package maybe you could try using that one to see if this particular glitch has already been addressed there?\r\n\r\nPlease let me know if you need any more info from me, I'm happy to help!\r\nThank you in advance.\r\nSergio","Url":"https://github.com/dotnet/corert/issues/6948","RelatedDescription":"Open issue \"[.NET Native] Errors ILT0005 and NUTC3033 when building a UWP app with ImageSharp (.NET Standard)\" (#6948)"},{"Id":"405615342","IsPullRequest":true,"CreatedAt":"2019-02-04T13:09:21","Actor":"filipnavara","Number":"6932","RawContent":null,"Title":"Remove code that was moved to System.Native","State":"closed","Body":"Testing build. I assume the C# P/Invoke prototypes should be moved to shared CoreLib (to be in CoreFX too). Will this be ok with ProjectN?","Url":"https://github.com/dotnet/corert/pull/6932","RelatedDescription":"Closed or merged PR \"Remove code that was moved to System.Native\" (#6932)"},{"Id":"406115661","IsPullRequest":true,"CreatedAt":"2019-02-04T03:57:07","Actor":"Dotnet-GitSync-Bot","Number":"6943","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/6943","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6943)"},{"Id":"406108145","IsPullRequest":true,"CreatedAt":"2019-02-04T03:56:50","Actor":"MichalStrehovsky","Number":"6942","RawContent":null,"Title":"Make Test.CoreLib more useful","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6942","RelatedDescription":"Closed or merged PR \"Make Test.CoreLib more useful\" (#6942)"},{"Id":"406160309","IsPullRequest":false,"CreatedAt":"2019-02-04T03:56:00","Actor":"szhaomsft","Number":"6946","RawContent":null,"Title":"string path = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)  error","State":"closed","Body":"the above expression return null,  while it works well in dotnet core runtime","Url":"https://github.com/dotnet/corert/issues/6946","RelatedDescription":"Closed issue \"string path = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)  error\" (#6946)"},{"Id":"406118202","IsPullRequest":false,"CreatedAt":"2019-02-03T18:54:57","Actor":"yowl","Number":"6944","RawContent":null,"Title":"wasm: field reflection is not working","State":"open","Body":"In https://github.com/dotnet/corert/blob/82299d456f24bcfc2393901cd55861824d07ac58/src/ILCompiler.WebAssembly/src/Compiler/WebAssemblyMetadataBlockingPolicy.cs#L24 field metadata is turned off and I'd like to turn it on so that this sort of code \r\n```\r\nFieldInfo[] fields = typeof(ClassForMetaTests).GetFields();`\r\n```\r\nis possible.  I'd like to first ask a question.  My understanding is that the compiler will only emit code for fields that it sees while compiling and that unseen code can be added via the `rd.xml` file.  In order to avoid that, which has not been tried so far in the wasm compiler and hence might have other problems, can I just add some code that uses the fields I'm interested in, and then unblock fields in the `WebAssemblyMetadataBlockingPolicy` and I should be good to start debugging?\r\n\r\nThanks","Url":"https://github.com/dotnet/corert/issues/6944","RelatedDescription":"Open issue \"wasm: field reflection is not working\" (#6944)"},{"Id":"406082349","IsPullRequest":true,"CreatedAt":"2019-02-03T17:03:45","Actor":"jkotas","Number":"6941","RawContent":null,"Title":"Use unsigned index extension in muldi-dimensional array stubs","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/22376 to CoreRT","Url":"https://github.com/dotnet/corert/pull/6941","RelatedDescription":"Closed or merged PR \"Use unsigned index extension in muldi-dimensional array stubs\" (#6941)"},{"Id":"406067060","IsPullRequest":false,"CreatedAt":"2019-02-03T15:26:59","Actor":"homer90","Number":"6940","RawContent":null,"Title":"netcore 3.0 and windows forms","State":"closed","Body":"I am using netcore 3.0 and winforms in my netcore application.\r\n\r\nHowever when running the native generated code it fails:\r\n`System.Exception: Method '[System.Windows.Forms]System.Windows.Forms.UnsafeNativeMethods.RegisterClass(WNDCLASS_D)' requires non-trivial marshalling that is not yet supported by this compiler.`","Url":"https://github.com/dotnet/corert/issues/6940","RelatedDescription":"Closed issue \"netcore 3.0 and windows forms\" (#6940)"},{"Id":"406045401","IsPullRequest":true,"CreatedAt":"2019-02-03T02:33:22","Actor":"Dotnet-GitSync-Bot","Number":"6939","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/6939","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6939)"},{"Id":"406042102","IsPullRequest":true,"CreatedAt":"2019-02-03T02:32:39","Actor":"Dotnet-GitSync-Bot","Number":"6938","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6938","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6938)"},{"Id":"406002163","IsPullRequest":true,"CreatedAt":"2019-02-03T01:35:03","Actor":"Dotnet-GitSync-Bot","Number":"6937","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6937","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6937)"},{"Id":"405967247","IsPullRequest":true,"CreatedAt":"2019-02-02T10:05:12","Actor":"Dotnet-GitSync-Bot","Number":"6936","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6936","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6936)"},{"Id":"405934113","IsPullRequest":true,"CreatedAt":"2019-02-02T09:35:58","Actor":"Dotnet-GitSync-Bot","Number":"6935","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub","Url":"https://github.com/dotnet/corert/pull/6935","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6935)"},{"Id":"405852985","IsPullRequest":true,"CreatedAt":"2019-02-02T01:43:57","Actor":"Dotnet-GitSync-Bot","Number":"6934","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6934","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6934)"},{"Id":"405639169","IsPullRequest":true,"CreatedAt":"2019-02-01T10:24:30","Actor":"MichalStrehovsky","Number":"6933","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6933","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6933)"},{"Id":"405600096","IsPullRequest":true,"CreatedAt":"2019-02-01T10:23:47","Actor":"MichalStrehovsky","Number":"6931","RawContent":null,"Title":"Fix Project N build break","State":"closed","Body":"Interestingly, there's no warning for this on the CoreRT side. On Project N side, this is a warning as error.","Url":"https://github.com/dotnet/corert/pull/6931","RelatedDescription":"Closed or merged PR \"Fix Project N build break\" (#6931)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"407523414","IsPullRequest":false,"CreatedAt":"2019-02-07T03:01:57","Actor":"dsplaisted","Number":"2914","RawContent":null,"Title":"Decide whether to remove support for `dotnet store`","State":"open","Body":"The [runtime package store feature](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store) was used for ASP.NET Core in .NET Core 2.0, but was replaced by a shared framework for ASP.NET Core in 2.1.\r\n\r\nUsing the `dotnet store` command, it's also possible to create your own runtime store.  However, this has been a bit of a bug farm in .NET Core 3.0 (with all of the framework composition changes).  So we may want to remove support for creating a runtime store in the .NET Core 3 SDK.","Url":"https://github.com/dotnet/sdk/issues/2914","RelatedDescription":"Open issue \"Decide whether to remove support for `dotnet store`\" (#2914)"},{"Id":"407391022","IsPullRequest":true,"CreatedAt":"2019-02-07T02:57:23","Actor":"dsplaisted","Number":"2913","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"CI legs on #2887 started timing out when I updated stage 0, so this PR isolates the stage 0 update to see if that's the problem.","Url":"https://github.com/dotnet/sdk/pull/2913","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#2913)"},{"Id":"407278108","IsPullRequest":false,"CreatedAt":"2019-02-07T02:17:13","Actor":"vitek-karas","Number":"2912","RawContent":null,"Title":"Self contained publish on linux includes .a files","State":"closed","Body":"Using relatively new 3.0 SDK\r\n\r\n```\r\nmkdir ca1\r\ncd ca1\r\ndotnet new console\r\ndotnet publish --self-contained -r linux-x64\r\n```\r\n\r\nIn the publish directory there are 6 `.a` files which don't seem to have any purpose. Basically for every native library (`.so`) coming from CoreFx, there's a corresponding `.a` as well:\r\n```\r\n-rwxrw-rw- 1 vitek vitek 2836614 Feb  5 04:05 System.IO.Compression.Native.a\r\n-rwxrw-rw- 1 vitek vitek   27254 Feb  5 04:05 System.IO.Ports.Native.a\r\n-rwxrw-rw- 1 vitek vitek  396432 Feb  5 04:05 System.Native.a\r\n-rwxrw-rw- 1 vitek vitek   79868 Feb  5 04:05 System.Net.Http.Native.a\r\n-rwxrw-rw- 1 vitek vitek   29400 Feb  5 04:05 System.Net.Security.Native.a\r\n-rwxrw-rw- 1 vitek vitek  906184 Feb  5 04:05 System.Security.Cryptography.Native.OpenSsl.a\r\n```\r\nI don't think these files are needed for anything. \r\nPer customer report this also reproes on MacOS, but I didn't verify.","Url":"https://github.com/dotnet/sdk/issues/2912","RelatedDescription":"Closed issue \"Self contained publish on linux includes .a files\" (#2912)"},{"Id":"407224370","IsPullRequest":true,"CreatedAt":"2019-02-06T14:17:06","Actor":"dotnet-maestro[bot]","Number":"2911","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19105.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19105.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2911","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2911)"},{"Id":"406573912","IsPullRequest":false,"CreatedAt":"2019-02-05T23:36:39","Actor":"pranavkm","Number":"2906","RawContent":null,"Title":"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.","State":"closed","Body":"## Repro steps\r\n\r\n1. dotnet new console\r\n2. Edit the project file to disable implicit fx reference and instead add an explicit reference to `Microsoft.NETCore.App`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n3. `dotnet build`\r\n\r\nBuild fails saying it was unable to copy the AssemblyName.exe file\r\n\r\n> C:\\Users\\Pranav\\.dotnet\\x64\\sdk\\3.0.100-preview-010184\\Microsoft.Common.CurrentVersion.targets(4560,5): error MSB3030: Could not copy the file \"D:\\temp\\test1\\obj\\Debug\\netcoreapp3.0\\test1.exe\" because it was not found. [D:\\temp\\test1\\test1.csproj]\r\n\r\nSetting `<UseAppHost>false</UseAppHost>` in the project file fixes things.\r\n\r\n*Background*:\r\nThe RazorSdk builds in a separate repo that's an arcade dependency to AspNetCore. The Sdk's test applications build against test shims rather than the actual AspNetCore fx to avoid cyclical dependencies. To do so, they set `DisableImplicitFrameworkReferences = true`.","Url":"https://github.com/dotnet/sdk/issues/2906","RelatedDescription":"Closed issue \"Building a project with OutputType = Exe and implicit fx reference disabled causes build to fail.\" (#2906)"},{"Id":"406926342","IsPullRequest":false,"CreatedAt":"2019-02-05T18:56:25","Actor":"natemcmaster","Number":"2910","RawContent":null,"Title":"Building a targeting and runtime pack locally","State":"open","Body":"In aspnet/AspNetCore, I'd like to build a large number of projects that fall into two groups\r\n\r\nA) produces an assembly in the AspNetCore framework\r\nB) references the AspNetCore framework\r\n\r\nWith the 3.0 Preview 2 SDK, I can get this working, but it feels hacky. Here's what I've done:\r\n\r\n* Change the repo bootstrapping to install to `$repoRoot/.dotnet`\r\n* Overridden NetCoreTargetingPackRoot  `<NetCoreTargetingPackRoot>$(RepoRoot).dotnet\\packs\\</NetCoreTargetingPackRoot>`\r\n* Created a dummy projects which copy build assets into NetCoreTargetingPackRoot. For example, Microsoft.AspNetCore.App.Ref.csproj copies assemblies into `$(RepoRoot).dotnet\\packs\\Microsoft.AspNetCore.App.Ref\\3.0.0-preview-t000\\ref\\netcoreapp3.0\\`\r\n* Add `<KnownFrameworkReference Update=\"Microsoft.AspNetCore.App\" ....`. This overrides bundled metadata so the SDK will look for \"my\" versions. (In aspnet, we use 't000' to mean 'local build')\r\n* Update all projects with a `FrameworkReference` to also have a ProjectReference (ReferenceOutputAssembly=false) to ensure the references are built first. (Done  repo-wide via Directory.Build.targets)\r\n\r\n## Problem\r\n\r\nThis \"pollutes\" the installation of the SDK with an imitation of a targeting pack. This will be problematic for build environments such as https://github.com/dotnet/source-build in which the repo is expected to use an externally-provided SDK: See https://github.com/dotnet/source-build/blob/master/Documentation/RepoApi.md. It would make it tricky to implement this \"API\" well:\r\n\r\n    /path/to/aspnet/build.sh -DotNetBuildFromSource true -DotNetCoreSdkDir \"/path/to/dotnet\"\r\n\r\nWe may not have write-access to DotNetCoreSdkDir.\r\n\r\n## Proposal\r\n\r\nI think the problem has a simple solution, so here's my proposal.\r\n\r\n1. Update `ResolveFrameworkReferences` to support resolving targeting and runtime packs from multiple folders\r\n2. Allow user projects to specify additional folders via property (this lets me control precedence)\r\n\r\nExample: `<NetCoreTargetingPackPaths>$(RepoRoot)tmp\\whatever\\;$(NetCoreTargetingPackPaths)</NetCoreTargetingPackPaths>`\r\n\r\ncc @pakrym @dagood @dsplaisted @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/2910","RelatedDescription":"Open issue \"Building a targeting and runtime pack locally\" (#2910)"},{"Id":"406771721","IsPullRequest":true,"CreatedAt":"2019-02-05T14:16:27","Actor":"dotnet-maestro[bot]","Number":"2909","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19104.18\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19104.18\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2909","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2909)"},{"Id":"406604347","IsPullRequest":false,"CreatedAt":"2019-02-05T02:21:52","Actor":"nguerrera","Number":"2908","RawContent":null,"Title":"Improve performance of ResolveFrameworkReferences and related tasks/targets","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2887#issuecomment-460488924\r\n","Url":"https://github.com/dotnet/sdk/issues/2908","RelatedDescription":"Open issue \"Improve performance of ResolveFrameworkReferences and related tasks/targets\" (#2908)"},{"Id":"406574224","IsPullRequest":true,"CreatedAt":"2019-02-05T00:01:48","Actor":"dotnet-bot","Number":"2907","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2907","RelatedDescription":"Open PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2907)"},{"Id":"406413046","IsPullRequest":true,"CreatedAt":"2019-02-04T19:36:34","Actor":"johnbeisner","Number":"2904","RawContent":null,"Title":"Perform a fetch before the checkout","State":"closed","Body":"The 'checkout' command can error sometimes:\r\n```\r\nEXEC : error : pathspec 'c967e0f' did not match any file(s) known to git. [C:\\work2\\sdk\\src\\Tests\\Microsoft.NET.PerformanceTests\\Microsoft.NET.PerformanceTests.csproj]\r\nC:\\work2\\sdk\\src\\Tests\\Microsoft.NET.PerformanceTests\\Microsoft.NET.PerformanceTests.csproj(52,5): error MSB3073: The command \"git checkout --quiet c967e0f\" exited with code 1.\r\n```","Url":"https://github.com/dotnet/sdk/pull/2904","RelatedDescription":"Closed or merged PR \"Perform a fetch before the checkout\" (#2904)"},{"Id":"405716301","IsPullRequest":true,"CreatedAt":"2019-02-04T18:07:25","Actor":"nguerrera","Number":"2895","RawContent":null,"Title":"Implement DesignerRuntimeImplementationProjectOutputGroup","State":"closed","Body":"Generate a .designer.deps.json to obj and .designer.runtimeconfig.json to obj/ and returns them + non-NuGet, non-Framework ReferenceCopyLocalPaths.\r\n\r\nThe designer deps file contains only NuGet assets, and the designer runtimeconfig sets the option to allow other files to load from app base.\r\n\r\nFix #2707 \r\n\r\ncc @chabiss @lutzroeder","Url":"https://github.com/dotnet/sdk/pull/2895","RelatedDescription":"Closed or merged PR \"Implement DesignerRuntimeImplementationProjectOutputGroup\" (#2895)"},{"Id":"406426405","IsPullRequest":false,"CreatedAt":"2019-02-04T17:02:21","Actor":"livarcocc","Number":"2905","RawContent":null,"Title":"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name","State":"open","Body":"We have git repo with whitespace in name \"Test repo\". Once I cloned it in Windows 8.1 I got path \"C:\\somepath\\Test%20repo\". This path was generated by git clone command. When I open ASP.NET Core project under this path I can't see cs files at all. Once I change %20 to simple ' ' space it works. Not sure is this .NET Core or VS2017 or even git, but it once you have such path with %20 .net core projects fails.\r\n\r\nThe git part is not really needed. Just adding %20 to the name of the project will lead to the error.","Url":"https://github.com/dotnet/sdk/issues/2905","RelatedDescription":"Open issue \"Microsoft.PackageDependencyResolution.targets failed when project has %20 in the name\" (#2905)"},{"Id":"406318950","IsPullRequest":true,"CreatedAt":"2019-02-04T14:11:15","Actor":"dotnet-maestro[bot]","Number":"2903","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19103.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19103.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2903","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2903)"},{"Id":"405051870","IsPullRequest":true,"CreatedAt":"2019-02-03T23:19:19","Actor":"wli3","Number":"2888","RawContent":null,"Title":"Use fixture","State":"closed","Body":"Per code review to use fixture to reuse asset on disk","Url":"https://github.com/dotnet/sdk/pull/2888","RelatedDescription":"Closed or merged PR \"Use fixture\" (#2888)"},{"Id":"406134970","IsPullRequest":false,"CreatedAt":"2019-02-03T21:46:46","Actor":"LordMike","Number":"2902","RawContent":null,"Title":"GenerateDepsFile: The process cannot access the file '...\\MyProject.deps.json' because it is being used by another process.","State":"open","Body":"**UPDATE: While writing this, rather long, post -- I've managed to produce a small reproduction example, see bottom**\r\n\r\nWe've recently upgraded our builds to run on faster hardware with more cpu cores, and are now ~100% of the time seeing the below error in a number of repositories. The error here is from Windows, but our CI servers run on linux and have the same error (see logs below).\r\n\r\nWe run the following commandlines:\r\n\r\n> \"C:\\Program Files\\dotnet\\dotnet.exe\" restore C:\\Project\\MyProject.sln\r\n> \"C:\\Program Files\\dotnet\\dotnet.exe\" build C:\\Project\\MyProject.sln --configuration Debug --framework netstandard2.0 --no-restore\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(129,5): error MSB4018\r\n\r\nThe \"GenerateDepsFile\" task failed unexpectedly. [C:\\Project\\MyProject.csproj]\r\nSystem.IO.IOException: The process cannot access the file 'C:\\Project\\bin\\Debug\\netstandard2.0\\MyProject.deps.json' because it is being used by another process. [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize) [C:\\Project\\MyProject.csproj]\r\n   at System.IO.File.Create(String path) [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Project\\MyProject.csproj]\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Project\\MyProject.csproj]\r\n```\r\n\r\n#### Observations:\r\n\r\n* This fails on my local Windows desktop roughly 33% of the time. Rerunning the build (no cleanup) always succeeds (seems to be a race condition, so HW speeds play a role). On our Linux CI servers, it fails 100% of the time currently\r\n* The deps file in question is _always_ the same file for a given repository / builds. The file is for a shared library between multiple projects.\r\n* A plain `dotnet build MyProject.sln -f netstandard2.0` (no build script) also exhibits this issue.\r\n* A `dotnet build MyProject.sln` seemingly always succeeds (locally and on CI server), at least for three consecutive attempts right now.\r\n* All the projects in the `MyProject.sln` have `netstandard2.0` - but a number of them have more targets (ie. netcoreapp)\r\n* ~We have more projects, f.ex. for tests, but they're in `MyProject-Tests.sln`. These projects only target `netcoreapp2.x` - we've split the solutions both for speed when developing and to be able to build artifacts without compiling the tests (since we can't build certain projects from the solution only ... that's another issue entirely)~ _(not relevant)_\r\n* Limiting the build to one process (msbuild: `/m:1`) seems to \"solve\" the problem.\r\n* At work (inaccessible currently), I performed some Procmon captures to see the difference between successful and failing runs\r\n  * It turns out, that two `dotnet.exe` processes attempt to create the `.deps.json` files\r\n  * When succeeding, there is a clear seperation between two CreateFile() calls, where the first creates the file, and the second call (from the second PID) finds the file already there and does nothing (not even reads it)\r\n  * When failing, the two processes make calls overlapping each other, leading to both of them discovering the file as missing, and both trying to create it (one obviously failing, producing the stacktrace above) -- classical concurrency issue.\r\n\r\nSo. \r\n\r\n* It should be that when two projects reference a third, shared, project .. that this shared one is built exactly once .. right?.. How come two attempts are made at writing the same `.deps.json` files?\r\n* How come this seemingly works fine, when building for all target frameworks?\r\n\r\n#### Versions:\r\n* Local, Windows 10 x64, `dotnet 2.2.101`\r\n* Linux CI, docker, `dotnet 2.2.103` (we build our own docker images using the dockerfile from the base `microsoft/dotnet:2-sdk` images)\r\n\r\n#### Reproduction\r\n\r\nProject: [ci-stresstest-master.zip](https://github.com/dotnet/sdk/files/2826051/ci-stresstest-master.zip)\r\n\r\nIn it, I have a solution with 5 projects, all empty (no actual code), but with a targeting setup that mimicks a very small subset of our projects. I've then created four seperate CI builds that did the following:\r\n\r\n* [log](https://github.com/dotnet/sdk/files/2826053/restore-build.txt) (succeeds) `dotnet restore ci-stresstest.sln` + `dotnet build ci-stresstest.sln --no-restore` \r\n* [log](https://github.com/dotnet/sdk/files/2826054/build.txt) (succeeds) `dotnet build ci-stresstest.sln`\r\n* [log](https://github.com/dotnet/sdk/files/2826055/restore-build-framework.txt) (fails) `dotnet restore ci-stresstest.sln` + `dotnet build ci-stresstest.sln -f netstandard2.0 --no-restore`\r\n* [log](https://github.com/dotnet/sdk/files/2826056/build-framework.txt) (fails) `dotnet build ci-stresstest.sln -f netstandard2.0`\r\n\r\n##### Notes on repro.\r\n\r\n* We run a vanilla docker setup for CI, except for one thing:\r\n  * We mount a shared directory for nuget packages, to be able to share downloaded packages between builds\r\n\r\nSee also #2076","Url":"https://github.com/dotnet/sdk/issues/2902","RelatedDescription":"Open issue \"GenerateDepsFile: The process cannot access the file '...\\MyProject.deps.json' because it is being used by another process.\" (#2902)"},{"Id":"406086069","IsPullRequest":true,"CreatedAt":"2019-02-03T14:06:00","Actor":"dotnet-maestro[bot]","Number":"2901","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19102.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19102.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2901","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2901)"},{"Id":"405980989","IsPullRequest":true,"CreatedAt":"2019-02-02T14:21:04","Actor":"dotnet-maestro[bot]","Number":"2900","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19101.16\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19101.16\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2900","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2900)"},{"Id":"405976817","IsPullRequest":true,"CreatedAt":"2019-02-02T12:01:29","Actor":"dotnet-bot","Number":"2899","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2899","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2899)"},{"Id":"405976816","IsPullRequest":true,"CreatedAt":"2019-02-02T12:01:27","Actor":"dotnet-bot","Number":"2898","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2898","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2898)"},{"Id":"405919332","IsPullRequest":true,"CreatedAt":"2019-02-02T03:00:14","Actor":"dotnet-bot","Number":"2897","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2897","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2897)"},{"Id":"405434764","IsPullRequest":true,"CreatedAt":"2019-02-02T02:35:54","Actor":"nugetlurker","Number":"2891","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5800 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5800 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2891","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5800 into sdk\" (#2891)"},{"Id":"405886328","IsPullRequest":true,"CreatedAt":"2019-02-02T02:35:40","Actor":"wli3","Number":"2896","RawContent":null,"Title":"WIP test ci","State":"closed","Body":"Seems It_uses_NetstandardLibrary20x_as_the_implicit_version_for_NetStandard20 will always fail with 2.0.2 instead of 2.0.3","Url":"https://github.com/dotnet/sdk/pull/2896","RelatedDescription":"Closed or merged PR \"WIP test ci\" (#2896)"},{"Id":"405434781","IsPullRequest":true,"CreatedAt":"2019-02-02T01:34:54","Actor":"nugetlurker","Number":"2892","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview3.5800 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview3.5800 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2892","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview3.5800 into sdk\" (#2892)"},{"Id":"405494486","IsPullRequest":true,"CreatedAt":"2019-02-01T19:22:57","Actor":"dotnet-bot","Number":"2893","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2893","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2893)"},{"Id":"405692238","IsPullRequest":true,"CreatedAt":"2019-02-01T14:16:37","Actor":"dotnet-maestro[bot]","Number":"2894","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19081.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19081.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2894","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2894)"},{"Id":"404541551","IsPullRequest":true,"CreatedAt":"2019-02-01T01:10:36","Actor":"dotnet-bot","Number":"2885","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2885","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#2885)"},{"Id":"405235053","IsPullRequest":true,"CreatedAt":"2019-01-31T14:31:49","Actor":"dotnet-maestro[bot]","Number":"2889","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19080.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19080.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2889","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#2889)"},{"Id":"405261780","IsPullRequest":false,"CreatedAt":"2019-01-31T14:07:27","Actor":"nguerrera","Number":"2890","RawContent":null,"Title":"GenerateBuildDependencyFile fails for Self-contained apps with duplicate FrameworkReferences","State":"open","Body":"_From @fuocor on January 30, 2019 17:2_\n\nsince upgrading the sdk to version 3.0.100-preview-010187 and then 3.0.100-preview-010189  the GenerateBuildDependencyFile build task is failing.\r\n\r\nthe build output is the following\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 16.0.385-preview+g966cdf2ac6 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 25.26 ms for C:\\ossiaco\\dotnet\\src\\Ossiaco.Win32.Interop\\Ossiaco.Win32.Interop.csproj.\r\n  Restore completed in 39 ms for C:\\ossiaco\\dotnet\\src\\Ossiaco.Common\\Ossiaco.Common.csproj.\r\n  Restore completed in 39.3 ms for C:\\ossiaco\\dotnet\\src\\Ossiaco.Common.Server.Web\\Ossiaco.Common.Server.Web.csproj.\r\n  Restore completed in 39.31 ms for C:\\ossiaco\\dotnet\\src\\Ossiaco.Common.Server\\Ossiaco.Common.Server.csproj.\r\n  Restore completed in 38.02 ms for C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\ossiaco\\dotnet\\src\\Ossiaco.Common.Server\\Ossiaco.Common.Server.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\ossiaco\\dotnet\\src\\Ossiaco.Common\\Ossiaco.Common.csproj]\r\n  Ossiaco.Win32.Interop -> C:\\ossiaco\\dotnet\\src\\Ossiaco.Win32.Interop\\bin\\Debug\\netstandard2.0\\Ossiaco.Win32.Interop.dll\r\n  Ossiaco.Common -> C:\\ossiaco\\dotnet\\src\\Ossiaco.Common\\bin\\Debug\\netstandard2.0\\Ossiaco.Common.dll\r\n  Ossiaco.Common.Server -> C:\\ossiaco\\dotnet\\src\\Ossiaco.Common.Server\\bin\\Debug\\netcoreapp3.0\\Ossiaco.Common.Server.dll\r\n  Ossiaco.Common.Server.Web -> C:\\ossiaco\\dotnet\\src\\Ossiaco.Common.Server.Web\\bin\\Debug\\netcoreapp3.0\\Ossiaco.Common.Server.Web.dll\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly. [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018: System.ArgumentException: Can not add property ./Microsoft.AspNetCore.Antiforgery.dll to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object. [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JObject.ValidateToken(JToken o, JToken existing) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JContainer.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JObject.InsertItem(Int32 index, JToken item, Boolean skipParentCheck) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JContainer.Add(Object content) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteAssetList(IEnumerable`1 runtimeFiles) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.AddAssets(JObject libraryObject, String key, RuntimeAssetGroup group) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargetLibrary(Library library) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.<WriteTarget>b__7_0(Library library) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at System.Linq.Enumerable.SelectArrayIterator`2.MoveNext() [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JContainer.AddInternal(Int32 index, Object content, Boolean skipParentCheck) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JContainer.Add(Object content) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Newtonsoft.Json.Linq.JObject..ctor(Object content) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTarget(IReadOnlyList`1 libraries) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.WriteTargets(DependencyContext context) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Extensions.DependencyModel.DependencyContextWriter.Write(DependencyContext context, Stream stream) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 172 [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35 [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010189\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(124,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\ossiaco\\dotnet\\src\\Ossiaco.Web\\Ossiaco.Web.csproj]\r\n\r\nBuild FAILED.\r\n\r\n...\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:04.43\r\n```\r\n\r\n# General\r\n\r\nif I downgrade to 3.0.100-preview-010040 there is no error\n\n_Copied from original issue: dotnet/core#2267_","Url":"https://github.com/dotnet/sdk/issues/2890","RelatedDescription":"Open issue \"GenerateBuildDependencyFile fails for Self-contained apps with duplicate FrameworkReferences\" (#2890)"},{"Id":"405034976","IsPullRequest":true,"CreatedAt":"2019-01-31T01:04:26","Actor":"dsplaisted","Number":"2887","RawContent":null,"Title":"Refactor targeting pack downloads, and framework version selection","State":"open","Body":"This is currently WIP, I'm sending the PR now to get CI results.\r\n\r\nThis includes the following:\r\n\r\n- Refactors FrameworkReference and targeting pack resolution so that all applicable targeting packs for the target framework will be downloaded.  This is required to support dotnet/cli#10666 (once NuGet/Home#7342 is implemented)\r\n- Fixes #2792.  The following are the ways (in priority order) that the \"runtime framework version\" for a shared framework can be controlled:\r\n    - `RuntimeFrameworkVersion` metadata on the `FrameworkReference` item\r\n    - `RuntimeFrameworkVersion` MSBuild property (applies to all shared frameworks)\r\n    - Then, use either the `LatestRuntimeFrameworkVersion` or the `DefaultRuntimeFrameworkVersion` of the `KnownFrameworkReference`, based on\r\n        - The value (if set) of `TargetLatestRuntimePatch` metadata on the `FrameworkReference`\r\n        - The `TargetLatestRuntimePatch` MSBuild property (which defaults to True if `SelfContained` is true, and False otherwise)\r\n","Url":"https://github.com/dotnet/sdk/pull/2887","RelatedDescription":"Open PR \"Refactor targeting pack downloads, and framework version selection\" (#2887)"},{"Id":"404558166","IsPullRequest":true,"CreatedAt":"2019-01-30T01:15:32","Actor":"zamont","Number":"2886","RawContent":null,"Title":"Add a new task FilterManagedAssemblies into Microsoft.NET.Build.Tasks","State":"open","Body":"The FilterManagedAssemblies task takes in a list of files and a switch to\r\nrestrict the managed assemblies to IL ONLY and returns those that are\r\nmanaged assemblies and conditionally are IL ONLY.","Url":"https://github.com/dotnet/sdk/pull/2886","RelatedDescription":"Open PR \"Add a new task FilterManagedAssemblies into Microsoft.NET.Build.Tasks\" (#2886)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1093308202496647168","CreatedAt":"2019-02-07T00:39:22+00:00","UserScreenname":"dotnet","Text":"Did you know that the WPF team is hiring developers? If you're interested, ping Amit Kabra via @LinkedIn https://t.co/b3cxGZuhmP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"1093184056282337280","CreatedAt":"2019-02-06T16:26:04+00:00","UserScreenname":"dotnet","Text":"This is a great program. Go check it out! https://t.co/tR4dh1UcC5","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null},{"Id":"1092843649904271360","CreatedAt":"2019-02-05T17:53:24+00:00","UserScreenname":"dotnet","Text":"Take a look at today's new On .NET episode.\n\n\"Learning Machine Learning with .NET, PyTorch and the ONNX Runtime\"… https://t.co/DLFVmdR0m1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":54,"FavoriteCount":34,"RawContent":null},{"Id":"1091393276047876097","CreatedAt":"2019-02-01T17:50:08+00:00","UserScreenname":"dotnet","Text":"Into a different kind of curlies? Our C++ friends are hiring too! https://t.co/CWYhdMAqnt","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"1090788385487171584","CreatedAt":"2019-01-31T01:46:31+00:00","UserScreenname":"dotnet","Text":"The perks of working in the beautiful Pacific Northwest. https://t.co/RlSBioXtmL","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":59,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2019-02-07T05:30:52.2725541Z","RunDurationInMilliseconds":22017}