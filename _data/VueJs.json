{"Data":{"Vue":{"Events":[{"Id":"7311810930","Type":"IssuesEvent","CreatedAt":"2018-02-28T18:57:47","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7723","RelatedDescription":"Closed issue \"Unable when passing props to a component to define in which order they should be 'treated'\" (#7723) at vuejs/vue","RelatedBody":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010)\r\n\r\n### Steps to reproduce\r\nGiven the following template:\r\n```html\r\n<vue-autonumeric\r\n\t:options=\"obj.options\"\r\n\tv-model=\"obj.val\"\r\n/>\r\n```\r\n\r\nIf you want to modify both `:value` and `:options` props at the same time, you would proceed by doing:\r\n```js\r\nthis.obj = {\r\n    options : 'percentageEU3dec',\r\n    val     : 0.00123456,\r\n};\r\n```\r\n\r\n### What is expected?\r\n`options` should be first modified, before `val`.\r\n\r\n### What is actually happening?\r\nHowever, Vue is first taking into account the `obj.val`, **before** the `obj.options`, leading to the vue-autonumeric component to incorrectly update its internal *raw* value with `0.00` instead of `0.00123` (since the `percentageEU3dec` defines the number of allowed decimals to `5`, instead of the default `2`).\r\n\r\nThe order in which `options` and `val` are set is *super* important for that component, since if you first set the `value`, AutoNumeric will check how many decimal places it needs to keep (and by default it's `2`), which means it will convert the given `0.00123456` to `0.00` first, **before** having had the chance to take into account the `options` `'percentageEU3dec'` that modifies the allowed number of decimal places to `5`.\r\nif it would have first set the `options`, then given the `0.00123456` value, it would have correctly kept 5 decimals `0.00123` which would allow displaying `0,123 %`.\r\n\r\n---\r\nSo the question here is; is there a way when passing props to a component to define in which order they should be 'treated'?\r\n\r\nFor instance in the previous example using the `vue-autonumeric` component, I want to modify the `:value` **and** the `:options` at the same time using a single `obj` object, but I need to make sure the `:options` modification in done first before modifying the `value` (otherwise in this particular case the decimal places are dropped).\r\nSee [the example](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010) where you can easily see that 'bug'.\r\n\r\nSo far, I can reliably get the correct result when I manually first change the `:options`, then change the `:value` in a `nextTick` block.\r\nI was wondering how I could do that *automatically* inside the `vue-autonumeric` component and prevent the user to have to do that manually each time they want to update the options/value.\r\n\r\n\r\nSome context for this issue: https://github.com/autoNumeric/vue-autoNumeric/issues/10\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7311756198","Type":"IssuesEvent","CreatedAt":"2018-02-28T18:47:11","Actor":"AlexandreBonneau","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7723","RelatedDescription":"Opened issue \"Unable when passing props to a component to define in which order they should be 'treated'\" (#7723) at vuejs/vue","RelatedBody":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010)\r\n\r\n### Steps to reproduce\r\nGiven the following template:\r\n```html\r\n<vue-autonumeric\r\n\t:options=\"obj.options\"\r\n\tv-model=\"obj.val\"\r\n/>\r\n```\r\n\r\nIf you want to modify both `:value` and `:options` props at the same time, you would proceed by doing:\r\n```js\r\nthis.obj = {\r\n    options : 'percentageEU3dec',\r\n    val     : 0.00123456,\r\n};\r\n```\r\n\r\n### What is expected?\r\n`options` should be first modified, before `val`.\r\n\r\n### What is actually happening?\r\nHowever, Vue is first taking into account the `obj.val`, **before** the `obj.options`, leading to the vue-autonumeric component to incorrectly update its internal *raw* value with `0.00` instead of `0.00123` (since the `percentageEU3dec` defines the number of allowed decimals to `5`, instead of the default `2`).\r\n\r\nThe order in which `options` and `val` are set is *super* important for that component, since if you first set the `value`, AutoNumeric will check how many decimal places it needs to keep (and by default it's `2`), which means it will convert the given `0.00123456` to `0.00` first, **before** having had the chance to take into account the `options` `'percentageEU3dec'` that modifies the allowed number of decimal places to `5`.\r\nif it would have first set the `options`, then given the `0.00123456` value, it would have correctly kept 5 decimals `0.00123` which would allow displaying `0,123 %`.\r\n\r\n---\r\nSo the question here is; is there a way when passing props to a component to define in which order they should be 'treated'?\r\n\r\nFor instance in the previous example using the `vue-autonumeric` component, I want to modify the `:value` **and** the `:options` at the same time using a single `obj` object, but I need to make sure the `:options` modification in done first before modifying the `value` (otherwise in this particular case the decimal places are dropped).\r\nSee [the example](https://codepen.io/AnotherLinuxUser/pen/YedNpv?editors=1010) where you can easily see that 'bug'.\r\n\r\nSo far, I can reliably get the correct result when I manually first change the `:options`, then change the `:value` in a `nextTick` block.\r\nI was wondering how I could do that *automatically* inside the `vue-autonumeric` component and prevent the user to have to do that manually each time they want to update the options/value.\r\n\r\n\r\nSome context for this issue: https://github.com/autoNumeric/vue-autoNumeric/issues/10\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7310873159","Type":"IssuesEvent","CreatedAt":"2018-02-28T16:09:20","Actor":"posva","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7722","RelatedDescription":"Closed issue \"Ambiguous combined usage of slot-scope and v-for \" (#7722) at vuejs/vue","RelatedBody":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/NyeVEO](https://codepen.io/anon/pen/NyeVEO)\r\n\r\n### Steps to reproduce\r\nSee codepen link or use the following code:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <li v-for=\"num in red\" :key=\"num\" slot-scope=\"props\" :slot=\"'slot-'   num\" style=\"color:red\">{{ props.item.text }}</li>\r\n  </my-list>\r\n\r\n</div>\r\n\r\n<template id=\"my-list-template\">\r\n  <ul>\r\n     <template v-for=\"item in items\">\r\n       <slot :name=\"'slot-'   item.id\" :item=\"item\">\r\n         <li>{{ item.text }}</li>\r\n       </slot>\r\n     </template>\r\n    </slot>\r\n  </ul>\r\n</template>\r\n```\r\n\r\n```js\r\nconsole.clear()\r\n\r\nVue.component(\"my-list\",{\r\n  props:[\"items\"],\r\n  template: \"#my-list-template\",\r\n})\r\n\r\nnew Vue({\r\n  el:\"#app\",\r\n  data:{\r\n    items:[\r\n      {id: \"x\", text: \"item 1\", message: \"message 1\"},\r\n      {id: \"y\", text: \"item 2\", message: \"message 2\"},\r\n      {id: \"z\", text: \"item 3\", message: \"message 3\"}\r\n    ],\r\n    red:[\"y\", \"z\"]\r\n  }\r\n})\r\n\r\n```\r\n\r\n### What is expected?\r\n- no warning\r\n- or any way to solve the warning and have a working solution\r\n\r\n### What is actually happening?\r\nConsole warning:\r\n```\r\nAmbiguous combined usage of slot-scope and v-for on <li> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.\r\n```\r\n\r\nThis template solves the warning, but breaks the functionality:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <template v-for=\"num in red\" >\r\n      <li :key=\"num\" slot-scope=\"props\" :slot=\"'slot-' + num\"  style=\"color:red\">{{ props.item.text }}</li>\r\n    </template>\r\n  </my-list>\r\n</div>\r\n```\r\n\r\nneither works this:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <my-list :items=\"items\">\r\n    <template v-for=\"num in red\">\r\n      <template slot-scope=\"props\" :slot=\"'slot-' + num\">\r\n        <li style=\"color:red\">{{ props.item.text }}</li>\r\n      </template>\r\n    </template>\r\n  </my-list>\r\n</div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7311775758","Type":"PullRequestEvent","CreatedAt":"2018-02-28T18:50:58","Actor":"felipe-developer","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/2081","RelatedDescription":"Opened pull request \"Starting portuguese (pt-br) translation\" (#2081) at vuejs/vue-router","RelatedBody":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n"},{"Id":"7308655926","Type":"IssuesEvent","CreatedAt":"2018-02-28T09:10:15","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2080","RelatedDescription":"Closed issue \"Multiple Routers\" (#2080) at vuejs/vue-router","RelatedBody":"Is multiple routers supported.\r\n\r\nFor example in Laravel I have routes:\r\n`/account` and `/dashboard`\r\n\r\nCan I use a different set of Vue routes for each Laravel route? So two independent instances of Vue routers?"},{"Id":"7308655754","Type":"IssuesEvent","CreatedAt":"2018-02-28T09:10:14","Actor":"robertmylne","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2080","RelatedDescription":"Opened issue \"Multiple Routers\" (#2080) at vuejs/vue-router","RelatedBody":"Is multiple routers supported.\r\n\r\nFor example in Laravel I have routes:\r\n`/account` and `/dashboard`\r\n\r\nCan I use a different set of Vue routes for each Laravel route? So two independent instances of Vue routers?"},{"Id":"7307874395","Type":"IssuesEvent","CreatedAt":"2018-02-28T05:28:07","Actor":"cironunes","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/2079","RelatedDescription":"Opened issue \"afterResolve global navigation guard\" (#2079) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nAs opposed to `beforeResolve`, `afterResolve` would wait until the navigation is done and trigger the registered callbacks.\r\n\r\nThe main reason for that is to be able to track events in the right moment, with the proper url in place, globally.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nrouterInstance.afterResolve(cb);\r\nfunction cb(from, to, next) {...}\r\n```\r\n\r\nI'd love to submit a PR if that's something you'd like to have.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7312183598","Type":"IssuesEvent","CreatedAt":"2018-02-28T20:07:56","Actor":"hrasekj","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1167","RelatedDescription":"Opened issue \"If module state is an array his submodules are not reactive\" (#1167) at vuejs/vuex","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/nvkupd14/16/](https://jsfiddle.net/nvkupd14/16/)\r\n\r\n### Steps to reproduce\r\nCreate an module which have his state as Array. Then create submodule for it.\r\n\r\n### What is expected?\r\nIm expecting that computed properties in modules will react to changes on submodule.\r\n\r\n### What is actually happening?\r\nVue does not map his getters & setters to submodule. So submodules state is changing, but computed properties not.\r\n\r\n---\r\nIt should warn user or something.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2018-02-28T21:46:54.4793467Z","RunDurationInMilliseconds":2400}