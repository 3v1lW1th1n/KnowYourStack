{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7438520141","Type":"IssuesEvent","CreatedAt":"2018-03-27T00:53:11","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3004","RelatedDescription":"Opened issue \"embedded power bi results in microsoft login box\" (#3004) at aspnet/Home","RelatedBody":"_From @toy-opensource on March 27, 2018 0:19_\n\n\r\nthere is an excellent example for how to embed powerbi **App Owns Data** here:\r\nhttps://powerbi.microsoft.com/en-us/documentation/powerbi-developer-embed-sample-app-owns-data/\r\n\r\nhowever this example is for running on the .net platform\r\nand some of the routines used in the example dont exist for aspnetcore\r\n\r\nthere is another excellent post about someone attempting to do the same thing:\r\nhttps://community.powerbi.com/t5/Developer/Embed-Power-BI-dashboard-in-ASP-Net-core/td-p/273279\r\n\r\nso first i built the standard .net version according to the first example\r\nand then i tried to migrate to aspnetcore incorporating fixes from the second link\r\n\r\nhere are the urls im using:\r\n    private static readonly string AuthorityUrl = \"https://login.windows.net/common/oauth2/authorize/\";\r\n    private static readonly string ResourceUrl = \"https://analysis.windows.net/powerbi/api\";\r\n    private static readonly string ApiUrl = \"https://api.powerbi.com/\";\r\n    private static readonly string EmbedUrl = \"https://app.powerbi.com/\";\r\n\r\nand the result is - \r\nthe microsoft login box - not cool\r\ncan anyone tell me if they have actually embedded powerbi into aspnetcore?\r\nif you have - can you give me a coupla hints on how to get real data back?\r\n\r\n\n\n_Copied from original issue: aspnet/Mvc#7555_"},{"Id":"7438407048","Type":"IssuesEvent","CreatedAt":"2018-03-27T00:11:10","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3003","RelatedDescription":"Closed issue \"Bug in Razor Page Modal\" (#3003) at aspnet/Home","RelatedBody":"```C#\r\npublic  JsonResult GetResult(){\r\n    return Json();\r\n}\r\n```\r\n\r\nWill  give error the name 'Json' does not exist in current context in razor page modal while working fine when page is drives from controller\r\nI can't use razor page model due to this serious issue and need to move to MVC approach instead of page modal. Please Resolve this Bug."},{"Id":"7438202084","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:03:40","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2691","RelatedDescription":"Closed issue \"Please make BufferedReadStream public\" (#2691) at aspnet/Home","RelatedBody":"_From @Tornhoof on Thursday, August 31, 2017 11:50:58 PM_\r\n\r\nHi,\r\nI'm currently building a Batch Handler (see https://github.com/aspnet/BasicMiddleware/issues/246) and I need to parse Headers and the Request line from a Multipart request, the parsing itself is basically just copy/paste of the existing Multipart parser part (it already has header support, I just need to add Request Line support, which is trivial). To properly do that I need to (efficiently) read lines from the request. The class ''BufferedReadStream'' in https://github.com/aspnet/HttpAbstractions/blob/master/src/Microsoft.AspNetCore.WebUtilities/BufferedReadStream.cs solves that. It would be great if you could make the class public so I don't need copy it.\r\n\r\n_Copied from original issue: aspnet/HttpAbstractions#932_"},{"Id":"7437801483","Type":"IssuesEvent","CreatedAt":"2018-03-26T21:22:13","Actor":"rishabhack","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3003","RelatedDescription":"Opened issue \"Bug in Razor Page Modal\" (#3003) at aspnet/Home","RelatedBody":"public  JsonResult GetResult(){\r\n            return Json();\r\n        }\r\n\r\n# **Will  give error the name 'Json' does not exist in current context in razor page modal while working fine when page is drives from controller**.\r\n**I can't use razor page model due to this serious issue and need to move to MVC approach instead of page modal. Please Resolve this Bug.**"},{"Id":"7437177129","Type":"IssuesEvent","CreatedAt":"2018-03-26T19:16:02","Actor":"HaoK","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2983","RelatedDescription":"Closed issue \"Undo breaking change for OptionsWrapper<T>.Remove(string) and Add(string, TOptions)\" (#2983) at aspnet/Home","RelatedBody":"A breaking change was introduced in 2.1 for the methods on `OptionsWrapper<T>`: `Remove(string)` and `Add(string, TOptions)`.\r\n\r\n* Here's 2.0 with Add/Remove: https://github.com/aspnet/Options/blob/release/2.0/src/Microsoft.Extensions.Options/OptionsWrapper.cs#L25-L38\r\n* Here's a snapshot of dev (2.1) without them: https://github.com/aspnet/Options/blob/b019acac251c24983b93368b06ecfcb3ffbf7604/src/Microsoft.Extensions.Options/OptionsWrapper.cs#L29\r\n\r\nThis breaking change doesn't seem worthwhile, given how trivial it is to just leave the unused APIs there.\r\n\r\nGuidelines on how to obsolete members is here: https://github.com/aspnet/Home/wiki/Engineering-guidelines#breaking-changes\r\n\r\ncc @HaoK @ajcvickers "},{"Id":"7436831609","Type":"IssuesEvent","CreatedAt":"2018-03-26T18:10:38","Actor":"HaoK","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3002","RelatedDescription":"Opened issue \"Remove unused OptionsWrapper Add/Remove methods\" (#3002) at aspnet/Home","RelatedBody":"Couldn't remove these in 2.x since its a breaking change, remove these in 3.x as they currently just throw NotImplementedException."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7439048339","Type":"PullRequestEvent","CreatedAt":"2018-03-27T04:05:22","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1731","RelatedDescription":"Opened pull request \"[WIP] Handshake and negotiation optimization\" (#1731) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1657"},{"Id":"7438568721","Type":"PullRequestEvent","CreatedAt":"2018-03-27T01:11:33","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1730","RelatedDescription":"Opened pull request \"Brecon/benchmark\" (#1730) at aspnet/SignalR","RelatedBody":""},{"Id":"7438567973","Type":"IssuesEvent","CreatedAt":"2018-03-27T01:11:14","Actor":"mikaelm12","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1558","RelatedDescription":"Closed issue \"Transport Fallback for the TS client\" (#1558) at aspnet/SignalR","RelatedBody":"Fallback for the C# client has been added. It also needs to be added for the TS client."},{"Id":"7438562047","Type":"IssuesEvent","CreatedAt":"2018-03-27T01:09:03","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1391","RelatedDescription":"Closed issue \"Ensure we are tracing connection/request URLs on the client\" (#1391) at aspnet/SignalR","RelatedBody":"While investigating #1389 I noticed that we don't really trace the URLs that we are connecting to or the HTTP requests going out. So when an error occurs, we can't easily trace it back to the request that triggered it. We should ensure our transports trace out useful data about the outbound requests, and consider attaching a logging handler to the `HttpClient` we use"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7439105917","Type":"IssuesEvent","CreatedAt":"2018-03-27T04:30:25","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7498","RelatedDescription":"Closed issue \"Multiple validation schemes\" (#7498) at aspnet/Mvc","RelatedBody":"_From @incompletude on January 6, 2018 6:10_\n\nI'm not sure I have a issue but I'm not sure how to approach these problems and I hope you guys can point me to the right direction. \r\n\r\nThe first problem is related to the `[Required]` and `[BindRequired]` DataAnnotations. Seems to me a bit hacky to make my Id property nullable so I can use the Required parameter. I tried `[BindRequired]` parameter instead, and it doesn't make a difference, I get a valid model state no matter what.\r\n\r\n```\r\n    public class Category\r\n    {\r\n        [Required]\r\n        public virtual int? Id { get; set; }\r\n        public virtual string Name { get; set; }\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post([FromBody]Category category)\r\n    {\r\n    }\r\n\r\n    public class ModelStateValidationFilter : ActionFilterAttribute\r\n    {\r\n        public override void OnActionExecuting(ActionExecutingContext context)\r\n        {\r\n            if (context.ModelState.IsValid == false)\r\n            {\r\n                var errors = context.ModelState\r\n                    .SelectMany(x => x.Value.Errors, (y, z) => z.Exception == null ? z.ErrorMessage : z.Exception.Message);\r\n                context.Result = new ObjectResult(new { type = \"model\", errors }) { StatusCode = 422 };\r\n            }\r\n            base.OnActionExecuting(context);\r\n        }\r\n    }\r\n```\r\n\r\nCurrently, I use the following code so I can get different validation schemes for different http verbs. It looks extremely ugly to me. Is there a native more elegant way to achieve this considering I use a catch all errors filter?\r\n```\r\n    public class Category\r\n    {\r\n        public virtual int? Id { get; set; }\r\n        public virtual string Name { get; set; }\r\n        public virtual Permission Permission { get; set; }\r\n    }\r\n\r\n    public class CategoryCreate : Category\r\n    {\r\n        [Required]\r\n        public override string Name { get; set; }\r\n    }\r\n\r\n    public class CategoryUserCreate : Category\r\n    {\r\n        [Required]\r\n        public override int? Id { get; set; }\r\n        [Required]\r\n        public override Permission Permission { get; set; }\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post1([FromBody]CategoryCreate category)\r\n    {\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post2([FromBody]CategoryUserCreate category)\r\n    {\r\n    }\r\n```\r\nNice work, thank you all.\r\n\r\n\r\n\r\n\r\n\r\n  \n\n_Copied from original issue: dotnet/core#1193_"},{"Id":"7439066342","Type":"PullRequestEvent","CreatedAt":"2018-03-27T04:12:56","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7557","RelatedDescription":"Opened pull request \"Restore `ModelMetadata.PropertyName != null` behaviour\" (#7557) at aspnet/Mvc","RelatedBody":"- #7413\r\n- add `ModelMetadata.Name` and `ParameterName`\r\n  - use `Name` instead of `PropertyName` in most cases\r\n- update `ModelMetadata.ContainerType` and other property use\r\n  - choose using `MetadataKind` almost everywhere; support all possibilties\r\n    - usually parameter metadata was possible but not handled\r\n    - worst case was one or two potential NREs, especially `ContainerType.*` dereferences\r\n  - improve `MvcCoreLoggerExtensions` metadata handling\r\n    - add three new debug messages, one for type metadata and two for parameter metadata\r\n- update `ModelMetadata.ContainerMetadata`, `ContainerType` and `PropertyName` doc comments\r\n- no changes needed in Microsoft.AspNetCore.Mvc.ViewFeatures because parameters aren't viewed\r\n\r\nnits:\r\n- add missing `TestModelMetadataProvider.ForParameter(...)` method\r\n- remove unused `EmptyModelMetadataProvider` instances in `ModelMetadataTest`\r\n- refactor `ModelValidationResultComparer` out of DataAnnotationsModelValidatorTest`\r\n- take VS suggestions, mostly related to variable inlining and object initializers"},{"Id":"7438520185","Type":"IssuesEvent","CreatedAt":"2018-03-27T00:53:12","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7555","RelatedDescription":"Closed issue \"embedded power bi results in microsoft login box\" (#7555) at aspnet/Mvc","RelatedBody":"\r\nthere is an excellent example for how to embed powerbi **App Owns Data** here:\r\nhttps://powerbi.microsoft.com/en-us/documentation/powerbi-developer-embed-sample-app-owns-data/\r\n\r\nhowever this example is for running on the .net platform\r\nand some of the routines used in the example dont exist for aspnetcore\r\n\r\nthere is another excellent post about someone attempting to do the same thing:\r\nhttps://community.powerbi.com/t5/Developer/Embed-Power-BI-dashboard-in-ASP-Net-core/td-p/273279\r\n\r\nso first i built the standard .net version according to the first example\r\nand then i tried to migrate to aspnetcore incorporating fixes from the second link\r\n\r\nhere are the urls im using:\r\n    private static readonly string AuthorityUrl = \"https://login.windows.net/common/oauth2/authorize/\";\r\n    private static readonly string ResourceUrl = \"https://analysis.windows.net/powerbi/api\";\r\n    private static readonly string ApiUrl = \"https://api.powerbi.com/\";\r\n    private static readonly string EmbedUrl = \"https://app.powerbi.com/\";\r\n\r\nand the result is - \r\nthe microsoft login box - not cool\r\ncan anyone tell me if they have actually embedded powerbi into aspnetcore?\r\nif you have - can you give me a coupla hints on how to get real data back?\r\n\r\n"},{"Id":"7438484031","Type":"PullRequestEvent","CreatedAt":"2018-03-27T00:39:37","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7556","RelatedDescription":"Opened pull request \"Use RazorCompiledItemMetadataAttribute to calculate route\" (#7556) at aspnet/Mvc","RelatedBody":""},{"Id":"7438430138","Type":"IssuesEvent","CreatedAt":"2018-03-27T00:19:33","Actor":"toy-opensource","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7555","RelatedDescription":"Opened issue \"embedded power bi results in microsoft login box\" (#7555) at aspnet/Mvc","RelatedBody":"\r\nthere is an excellent example for how to embed powerbi **App Owns Data** here:\r\nhttps://powerbi.microsoft.com/en-us/documentation/powerbi-developer-embed-sample-app-owns-data/\r\n\r\nhowever this example is for running on the .net platform\r\nand some of the routines used in the example dont exist for aspnetcore\r\n\r\nthere is another excellent post about someone attempting to do the same thing:\r\nhttps://community.powerbi.com/t5/Developer/Embed-Power-BI-dashboard-in-ASP-Net-core/td-p/273279\r\n\r\nso first i built the standard .net version according to the first example\r\nand then i tried to migrate to aspnetcore incorporating fixes from the second link\r\n\r\nhere are the urls im using:\r\n    private static readonly string AuthorityUrl = \"https://login.windows.net/common/oauth2/authorize/\";\r\n    private static readonly string ResourceUrl = \"https://analysis.windows.net/powerbi/api\";\r\n    private static readonly string ApiUrl = \"https://api.powerbi.com/\";\r\n    private static readonly string EmbedUrl = \"https://app.powerbi.com/\";\r\n\r\nand the result is - \r\nthe microsoft login box - not cool\r\ncan anyone tell me if they have actually embedded powerbi into aspnetcore?\r\nif you have - can you give me a coupla hints on how to get real data back?\r\n\r\n"},{"Id":"7438406952","Type":"IssuesEvent","CreatedAt":"2018-03-27T00:11:08","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7554","RelatedDescription":"Opened issue \"Bug in Razor Page Modal\" (#7554) at aspnet/Mvc","RelatedBody":"_From @rishabhack on March 26, 2018 21:22_\n\n```C#\r\npublic  JsonResult GetResult(){\r\n    return Json();\r\n}\r\n```\r\n\r\nWill  give error the name 'Json' does not exist in current context in razor page modal while working fine when page is drives from controller\r\nI can't use razor page model due to this serious issue and need to move to MVC approach instead of page modal. Please Resolve this Bug.\n\n_Copied from original issue: aspnet/Home#3003_"},{"Id":"7438389233","Type":"PullRequestEvent","CreatedAt":"2018-03-27T00:05:13","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7553","RelatedDescription":"Opened pull request \"CompiledPageRouteModelProvider should de-dup descriptors\" (#7553) at aspnet/Mvc","RelatedBody":"Fixes #7543"},{"Id":"7438327413","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:43:59","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7543","RelatedDescription":"Closed issue \"Page descriptors duplicated\" (#7543) at aspnet/Mvc","RelatedBody":"I'm using precompilation for UI in a library and at least one page descriptor is getting duplicated.\r\n@pranavkm @rynowak \r\n\r\n![image](https://user-images.githubusercontent.com/6995051/37871102-a71425a2-2f9a-11e8-81a5-b793594d89ba.png)\r\n"},{"Id":"7438122928","Type":"IssuesEvent","CreatedAt":"2018-03-26T22:40:38","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7544","RelatedDescription":"Closed issue \"Main application assembly not being included in the list of parts\" (#7544) at aspnet/Mvc","RelatedBody":"I'm doing new webapi and I can't hit api/values. The reason is the part for the application assembly is not being added to the list of application parts.\r\n\r\nManually adding the part fixes the problem. @rynowak @pranavkm.\r\n\r\n![image](https://user-images.githubusercontent.com/6995051/37873063-8884167c-2fc9-11e8-8d97-186d4e0197a3.png)\r\n\r\nAside from that I also discovered out that there are other assemblies of our framework that show up as parts. \r\nWe should exclude them by default and plug them in as parts only when a gesture is made to turn the features on. We can do this with the new partfactory support.\r\n\r\n/cc: @SteveSandersonMS for JavaScriptServices"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7439138702","Type":"IssuesEvent","CreatedAt":"2018-03-27T04:44:45","Actor":"xrkolovos","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1700","RelatedDescription":"Closed issue \"TFA Recovery codes discussion\" (#1700) at aspnet/Identity","RelatedBody":"Hello,\r\n\r\nmy Version\r\n`<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />`\r\n\r\nI created the latest startup project of asp.net core with Identity (local stored account in my sql). I created a new user and went to enable TFA. I got the recovery code and tryied the TFA. Login wokrs fine, but LoginWithRecoveryCode always fail with message \"Invalid recovery code entered\". \r\n\r\nMy recovery code is as i copied it from the webpage.\r\n\r\n```\r\nef3899d4 97bf06ad\r\nb8927df8 6ad00f89\r\nec5e6e30 17872076\r\n1ac5ca54 c8ec38a6\r\n2fed51c8 c7a063e9\r\n```\r\n\r\nI try to past it in 4 ways\r\n\r\n```\r\n//1 as i copied it\r\n//2 ef3899d4 97bf06ad b8927df8 6ad00f89 ec5e6e30 17872076 1ac5ca54 c8ec38a6 2fed51c8 c7a063e9\r\n//3 ef3899d497bf06adb8927df86ad00f89ec5e6e30178720761ac5ca54c8ec38a62fed51c8c7a063e9\r\n//4 ef3899d4;97bf06ad;b8927df8;6ad00f89;ec5e6e30;17872076;1ac5ca54;c8ec38a6;2fed51c8;c7a063e9\r\n```\r\nThe 4th way is as copied from the database. \r\n\r\nnone of this wokrs. \r\n\r\nthank you."},{"Id":"7436416640","Type":"IssuesEvent","CreatedAt":"2018-03-26T16:51:02","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1708","RelatedDescription":"Closed issue \"Add an option in Identity System, so we can define the length of TFA Recovery codes\" (#1708) at aspnet/Identity","RelatedBody":"As, i see in method [TwoFactorRecoveryCodeSignInAsync](https://github.com/aspnet/Identity/blob/c6a82ad19a0bdb80b7358dc843b66664bbf33f96/src/Identity/SignInManager.cs), they don't protect against brute force attacks.\r\n8 char long strings are venerable to brute force attacks.\r\n\r\nAdd an option in Identity System, so we can define the length of TFA Recovery codes, and i thing you should raise the number. Normally the recovery codes are larger strings.\r\n\r\nThat's issue comes from discussion #1700"},{"Id":"7435913071","Type":"IssuesEvent","CreatedAt":"2018-03-26T15:24:18","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1709","RelatedDescription":"Closed issue \"Online Source Code for Identity V2\" (#1709) at aspnet/Identity","RelatedBody":"Hello Team!\r\n\r\nI have noticed that CodePlex is in archive mode now and source code is  no longer available to browse online (though you can download the whole archive).\r\n\r\nWhat would be good is to have source code of v2 available online, so it can be referenced online. I'm mostly interested in ability to point people to a specific file or line of code in answers on StackOverflow.\r\n\r\nDo you think it would be possible to set up a read-only version of source code for Identity V2 on GitHub? In a rush of a moment I've created my own repo with your source code, but after a bit of thinking deleted it later - you guys might not like some random dude setting up a repo with your code (older version or not).\r\nI think it would be more appropriate if older version code is living in AspNet organisation. However if you don't want to maintain yet another repository, I'm willing to take care of that repository (I'd imagine people would create issues).\r\n\r\nWhat do you think?"},{"Id":"7433667153","Type":"IssuesEvent","CreatedAt":"2018-03-26T08:26:30","Actor":"trailmax","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1709","RelatedDescription":"Opened issue \"Online Source Code for Identity V2\" (#1709) at aspnet/Identity","RelatedBody":"Hello Team!\r\n\r\nI nave noticed that CodePlex is in archive mode now and source code is  no longer available to browse online (though you can download the whole archive).\r\n\r\nWhat would be good is to have source code of v2 available online, so it can be referenced online. I'm mostly interested in ability to point people to a specific file or line of code in answers on StackOverflow.\r\n\r\nDo you think it would be possible to set up a read-only version of source code for Identity V2 on GitHub? In a rush of a moment I've created my own repo with your source code, but after a bit of thinking deleted it later - you guys might not like some random dude setting up a repo with your code (older version or not).\r\nI think it would be more appropriate if older version code is living in AspNet organisation. However if you don't want to maintain yet another repository, I'm willing to take care of that repository (I'd imagine people would create issues).\r\n\r\nWhat do you think?"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7437944163","Type":"IssuesEvent","CreatedAt":"2018-03-26T21:54:14","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2424","RelatedDescription":"Closed issue \"Re-enable api check for Transport.Libuv\" (#2424) at aspnet/KestrelHttpServer","RelatedBody":"The breaking change occurred on the `Create` method of the public type `LibuvTransportFactory`. See commit: https://github.com/aspnet/KestrelHttpServer/commit/abdcb47b8f96d7bf6554575e2d3493a7e955fc68#diff-8e432cc740c5553f64223236502c7ab1R65\r\n\r\nI have disabled the api check for this package for now but this needs to be reverted after we discuss how we handle this breaking change."},{"Id":"7437356152","Type":"PullRequestEvent","CreatedAt":"2018-03-26T19:52:08","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2432","RelatedDescription":"Opened pull request \"[WIP] Re-enable ConnectionCountingReturnsToZero #2282\" (#2432) at aspnet/KestrelHttpServer","RelatedBody":"Do-Not-Merge. Running a few test builds on Travis to get more failure information."},{"Id":"7433762950","Type":"IssuesEvent","CreatedAt":"2018-03-26T08:46:48","Actor":"tmds","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2431","RelatedDescription":"Opened issue \"Benchmark corefx Sockets epoll exhaustion strategy\" (#2431) at aspnet/KestrelHttpServer","RelatedBody":"When there is a lot of I/O transfer, at some point the epoll thread becomes the bottleneck.\r\n\r\nThere are two ways to deal with that:\r\n- create multiple epoll threads\r\n- delegate I/O transfer to the threadpoll, so epoll thread only handles notification\r\n\r\ncorefx does both, implemented in https://github.com/dotnet/corefx/pull/19820 and https://github.com/dotnet/corefx/pull/23115 respectively.\r\nThat doesn't make much sense.\r\n\r\nIt would be nice if we could benchmark the two and keep the one that performs best.\r\n\r\nCC @geoffkizer @halter73 @stephentoub @vancem @davidfowl "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7438580957","Type":"PullRequestEvent","CreatedAt":"2018-03-27T01:16:10","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2224","RelatedDescription":"Opened pull request \"Skip checking thumbprint of file in osx\" (#2224) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2219\r\n\r\n"},{"Id":"7437809322","Type":"PullRequestEvent","CreatedAt":"2018-03-26T21:23:55","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2223","RelatedDescription":"Opened pull request \"Make PreserveCompilationContext=true\" (#2223) at aspnet/Razor","RelatedBody":""},{"Id":"7437736510","Type":"PullRequestEvent","CreatedAt":"2018-03-26T21:08:32","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2222","RelatedDescription":"Opened pull request \"Make PreserveCompilationContext=true\" (#2222) at aspnet/Razor","RelatedBody":""},{"Id":"7437393039","Type":"PullRequestEvent","CreatedAt":"2018-03-26T19:59:29","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2221","RelatedDescription":"Opened pull request \"Include symbols for Tasks and Tools projects in Razor.Design\" (#2221) at aspnet/Razor","RelatedBody":"Fixes https://github.com/aspnet/Razor/issues/2215"},{"Id":"7437370965","Type":"IssuesEvent","CreatedAt":"2018-03-26T19:55:04","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2184","RelatedDescription":"Closed issue \"Flaky test: EnumerateItems_DiscoversAllCshtmlFiles \" (#2184) at aspnet/Razor","RelatedBody":"This test [failed](http://aspnetci/viewLog.html?buildId=422519&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) with the following error:\r\n```\r\nSystem.ArgumentOutOfRangeException : startIndex cannot be larger than length of string.\r\nParameter name: startIndex\r\n   at System.String.Substring(Int32 startIndex, Int32 length)\r\n   at Microsoft.AspNetCore.Razor.Language.DefaultRazorProjectFileSystem.<>c__DisplayClass4_0.<EnumerateItems>b__0(FileInfo file) in /_/src/Microsoft.AspNetCore.Razor.Language/DefaultRazorProjectFileSystem.cs:line 39\r\n   at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\r\n   at System.Collections.Generic.EnumerableHelpers.ToArray[T](IEnumerable`1 source, Int32& length)\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.OrderedEnumerable`1.ToArray()\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n```\r\n\r\nFuture instances of this failure will show up [here](http://aspnetci/httpAuth/app/rest/builds?locator=tag:RazorIndexRange,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."},{"Id":"7437278884","Type":"PullRequestEvent","CreatedAt":"2018-03-26T19:36:47","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2218","RelatedDescription":"Merged pull request \"Make `TestProject.GetProjectDirectory` more thorough when finding project directory.\" (#2218) at aspnet/Razor","RelatedBody":"**Big Note:** I was unable to reproduce this issue and after digging through the code really can't see how things could be going wrong other than in our test project directory creation. Basically, in this PR i make our `GetProjectDirectory` a little more reliable in unknown scenarios and added some logic to help us diagnose future errors if they arise.\r\n\r\n- Relaxed some restrictions to find project directory\r\n- Added some logic to make future debugging/test failures more diagnosable.\r\n\r\n#2184 "},{"Id":"7437188034","Type":"IssuesEvent","CreatedAt":"2018-03-26T19:18:15","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2216","RelatedDescription":"Closed issue \"Building on Visual Studio doesn't reuse existing build server\" (#2216) at aspnet/Razor","RelatedBody":"This is because we use `AppDomain.CurrentDomain.BaseDirectory` to compute the default pipe name. We should be using path to rzc instead."},{"Id":"7437103300","Type":"PullRequestEvent","CreatedAt":"2018-03-26T19:01:24","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2217","RelatedDescription":"Merged pull request \"Use tool assembly path for computing default pipe name\" (#2217) at aspnet/Razor","RelatedBody":"https://github.com/aspnet/Razor/issues/2216\r\n\r\n"},{"Id":"7436809625","Type":"IssuesEvent","CreatedAt":"2018-03-26T18:06:29","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2220","RelatedDescription":"Opened issue \"RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer fails on OSX High Sierra containing VS for Mac.\" (#2220) at aspnet/Razor","RelatedBody":"```\r\nFailed   RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer\r\nError Message:\r\n System.TimeoutException : command '$dotnet msbuild /restore /p:_RazorBuildServerPipeName=4ec0f162-6a02-42b0-ae53-2e14f9230925 /t:Build /p:Configuration=Debug /t:_IntrospectUseRazorBuildServer /p:UseSharedCompilation=false' timed out after 00:01:00.\r\nStack Trace:\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__0(Task t) in /Users/ntaylormullen/Documents/GitHub/Razor/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 80\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIntrospectionTest.<RazorSdk_UsesUseSharedCompilationToSetDefaultValueOfUseRazorBuildServer>d__3.MoveNext() in /Users/ntaylormullen/Documents/GitHub/Razor/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIntrospectionTest.cs:line 43\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":7,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":152,"FavoriteCount":95,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-03-27T05:30:09.9413756Z","RunDurationInMilliseconds":8384}