{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6706150088","Type":"PullRequestEvent","CreatedAt":"2017-10-12T05:18:07","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14385","RelatedDescription":"Merged pull request \"Generate xorps instead of xorpd\" (#14385) at dotnet/coreclr","RelatedBody":"xorps is one byte shorter when AVX is not used. Also saves a call to genGetInsForOper."},{"Id":"6706124489","Type":"PullRequestEvent","CreatedAt":"2017-10-12T05:06:27","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14432","RelatedDescription":"Merged pull request \"Simplify SSE2 check for RyuJIT/x86\" (#14432) at dotnet/coreclr","RelatedBody":""},{"Id":"6706053358","Type":"PullRequestEvent","CreatedAt":"2017-10-12T04:32:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14284","RelatedDescription":"Closed pull request \"Update PGOData version to 99.99.99-master-20170928-0019\" (#14284) at dotnet/coreclr","RelatedBody":"PgoData has not been updated in 18 days, despite dotnet/versions being\r\nupdated. Manuall update the package versions"},{"Id":"6706039973","Type":"PullRequestEvent","CreatedAt":"2017-10-12T04:26:11","Actor":"hseok-oh","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14442","RelatedDescription":"Opened pull request \"[x86/Linux] Enable CI unittest\" (#14442) at dotnet/coreclr","RelatedBody":"- Copy test binary from x86 Windows build\r\n- Copy CoreFX managed from arm CoreFX managed build\r\n- Add archival"},{"Id":"6705648582","Type":"IssuesEvent","CreatedAt":"2017-10-12T01:43:09","Actor":"parjong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14417","RelatedDescription":"Closed issue \"Cannot build CLR on Windows\" (#14417) at dotnet/coreclr","RelatedBody":"I get the following error while building CLR on Windows:\r\n```\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code$ build.cmd skipnative\r\nStarting Build at 14:07:30.42\r\nBUILD: Commencing CoreCLR Repo build\r\nBUILD: Checking prerequisites\r\nBUILD: Using environment: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\\\VsDevCmd.bat\"\r\n**********************************************************************\r\n** Visual Studio 2017 Developer Command Prompt v15.4.0\r\n** Copyright (c) 2017 Microsoft Corporation\r\n**********************************************************************\r\n...\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code$ call \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\dotnet.exe\" publish \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\\\tool-runtime\\project.csproj\" -f net46 -o \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\net46\"\r\nMicrosoft (R) Build Engine version 15.3.117.23532\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Microsoft.Common.CurrentVersion.targets(1111,5): error MSB3644: The reference assemblies for framework \".NETFramework,Version=v4.6\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018: The \"GenerateRuntimeConfigurationFiles\" task failed unexpectedly. [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\bin\\Debug\\net46\\project.runtimeconfig.json'. [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options) [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.WriteToJsonFile(String fileName, Object value) [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.WriteRuntimeConfig(ProjectContext projectContext) [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.ExecuteCore() [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\sdk\\2.0.0-preview1-005977\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(134,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__25.MoveNext() [D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\tool-runtime\\project.csproj]\r\n\r\nD:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code$ set NET46_PUBLISH_ERROR_LEVEL=1\r\nERROR: An error ocurred when running: '\"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\Tools\\dotnetcli\\dotnet.exe\" publish \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\packages\\microsoft.dotnet.buildtools\\2.0.0-prerelease-02106-01\\lib\\\\tool-runtime\\project.csproj\" -f net46'. Please check above for more details.\r\nBUILD: Error: System.Private.CoreLib build failed. Refer to the build log files for details:\r\n    \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\bin\\Logs\\System.Private.CoreLib_Windows_NT__x64__Debug.log\"\r\n    \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\bin\\Logs\\System.Private.CoreLib_Windows_NT__x64__Debug.wrn\"\r\n    \"D:\\workspace\\CLR\\x86_Rel_TC_Pri2\\code\\bin\\Logs\\System.Private.CoreLib_Windows_NT__x64__Debug.err\"\r\n``` "},{"Id":"6705573746","Type":"IssuesEvent","CreatedAt":"2017-10-12T01:11:53","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14441","RelatedDescription":"Opened issue \"JIT: prejit classifier may be overly pessimistic\" (#14441) at dotnet/coreclr","RelatedBody":"When prejitting a method we perform an assessment to determine if any caller would ever decide to inline this method. If the answer is no, we mark the method as noinline to save the jit from wasting time examining this method as an inline candidate.\r\n\r\nThis assessment is not intended to alter the inlining decisions made by the jit. The jit should produce the same codegen with or without these assessments, but should run somewhat faster with them. So the assessment needs to be optimistic and anticipate various profitability boosts from callers.\r\n\r\nThere's at least one example now where this doesn't happen: see notes in #14420 and below. A relatively simple experiment to unearth these cases is to disable the \"propagate never to runtime\" logic in the inline policy, eg modify `EnhancedLegacyPolicy::PropagateNeverToRuntime()` to return false and see if that gives different crossgen results than if it is left as is.\r\n\r\nPre 14420 results when prejitting System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this\r\n```\r\nmultiplier in methods of promotable struct increased to 3.\r\nInline candidate callsite is hot.  Multiplier increased to 6.\r\ncalleeNativeSizeEstimate=710\r\ncallsiteNativeSizeEstimate=115\r\nbenefit multiplier=6\r\nthreshold=690\r\nNative estimate for function size exceeds threshold for inlining 71 > 69 (multiplier = 6)\r\nINLINER: during 'prejit' result 'failed this callee' reason 'unprofitable inline' for 'n/a' calling 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this'\r\n\r\nINLINER: Marking System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this as NOINLINE because of unprofitable inline\r\n```\r\nPost 14420 results when prejitting a caller before we've prejitted the method: System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this\r\n```\r\nInvoking compiler for the inlinee method System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this\r\n...\r\nmultiplier in methods of promotable struct increased to 3.\r\nInline candidate looks like a wrapper method.  Multiplier increased to 4.\r\nInline candidate has an arg that feeds a constant test.  Multiplier increased to 5.\r\nInline candidate callsite is boring.  Multiplier increased to 6.3.\r\ncalleeNativeSizeEstimate=710\r\ncallsiteNativeSizeEstimate=115\r\nbenefit multiplier=6.3\r\nthreshold=724\r\nNative estimate for function size is within threshold for inlining 71 <= 72.4 (multiplier = 6.3)\r\n...\r\nSuccessfully inlined System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[Int32][System.Int32]:SetResult(int):this (58 IL bytes) (depth 1) [profitable inline]\r\n```\r\nSo the wrapper method and presence of a constant arg seems to have been the key differences in the benefit estimation. I wouldn't have expected the wrapper method benefit to vary this way so that is a surprise. We don't see the argument values when doing the assessment, so that part is not a surprise, but we should account for the fact that callers may have them.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6706177627","Type":"PullRequestEvent","CreatedAt":"2017-10-12T05:30:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7819","RelatedDescription":"Opened pull request \"Updating Roslyn satellites and SDK versions\" (#7819) at dotnet/cli","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"6705652250","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:44:36","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7817","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.5.0-preview2-4529 into cli\" (#7817) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.5.0-preview2-4529 into cli release/15.5 branch"},{"Id":"6705645658","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:42:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7815","RelatedDescription":"Closed pull request \"Separating the URL construction methods: dotnet-install.sh\" (#7815) at dotnet/cli","RelatedBody":"Separating the 'legacy' URL construction from the 'current' URL construction methods and logic.\r\n\r\nWhy?\r\nRedHat6 was not supported in the legacy time space therefore should not resolve to a URL when constructing the legacy download link. The 2 logical methods for URL construction should not share execution paths - in that way, we will not infer that 1.0 supported RedHat6; et al.\r\n"},{"Id":"6705641769","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:40:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7811","RelatedDescription":"Merged pull request \"Added a property to DependencyVersions.props for asp.net template version\" (#7811) at dotnet/cli","RelatedBody":"The current values for the template engine versions & aspnet template versions are not the final 15.5 values. We're still waiting on a test sdk update before we can get the final versions. This PR uses the version in #7767. The PR is meant to setup the aspnet version handling."},{"Id":"6705632460","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:36:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7813","RelatedDescription":"Merged pull request \"MSBuild 15.5.153 (No Double Evaluation Fix)\" (#7813) at dotnet/cli","RelatedBody":"Up to: https://github.com/Microsoft/msbuild/commit/976cca8144a67fa684a2e1365306ee188191305a\r\n\r\nDoes not include https://github.com/Microsoft/msbuild/pull/2595\r\n\r\nIn case there are regressions, this is signed and ready to go."},{"Id":"6705630456","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:35:48","Actor":"seancpeters","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7816","RelatedDescription":"Opened pull request \"1.1.0 branch - added property for aspnet template version\" (#7816) at dotnet/cli","RelatedBody":"This PR is the rel/1.1.0 analogue of the similar PR for release/15.5 #7811 "},{"Id":"6705538943","Type":"PullRequestEvent","CreatedAt":"2017-10-12T00:57:17","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7815","RelatedDescription":"Opened pull request \"Separating the URL construction methods: dotnet-install.sh\" (#7815) at dotnet/cli","RelatedBody":"Separating the 'legacy' URL construction from the 'current' URL construction methods and logic.\r\n\r\nWhy?\r\nRedHat6 was not supported in the legacy time space therefore should not resolve to a URL when constructing the legacy download link. The 2 logical methods for URL construction should not share execution paths - in that way, we will not infer that 1.0 supported RedHat6; et al.\r\n"},{"Id":"6705481236","Type":"PullRequestEvent","CreatedAt":"2017-10-12T00:32:40","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7814","RelatedDescription":"Opened pull request \"MSBuild 15.5.154\" (#7814) at dotnet/cli","RelatedBody":"Contains Double Evaluation Fix: https://github.com/Microsoft/msbuild/pull/2595\r\n\r\nRPS with NuGet not complete. To take this change you will need NuGet 4527 or greater."},{"Id":"6705474524","Type":"PullRequestEvent","CreatedAt":"2017-10-12T00:29:57","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7813","RelatedDescription":"Opened pull request \"MSBuild 15.5.153 (No Double Evaluation Fix)\" (#7813) at dotnet/cli","RelatedBody":"Up to: https://github.com/Microsoft/msbuild/commit/976cca8144a67fa684a2e1365306ee188191305a\r\n\r\nDoes not include https://github.com/Microsoft/msbuild/pull/2595\r\n\r\nIn case there are regressions, this is signed and ready to go."},{"Id":"6705406322","Type":"IssuesEvent","CreatedAt":"2017-10-12T00:03:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7774","RelatedDescription":"Closed issue \".NET Core 2.0 SDK Build fail\" (#7774) at dotnet/cli","RelatedBody":"@wh1sp3r opened this issue here: https://github.com/dotnet/core/issues/946\r\n\r\nHello,\r\nI updated my SDK to version 2.0 and I am not able to build my project for Framework 4.6.\r\nI am using Microsoft.AspNetCore libraries in version **1.1.3**.\r\n\r\nOutput:\r\n```\r\nPM> dotnet build\r\nMicrosoft (R) Build Engine verze 15.3.409.57025 pro .NET Core\r\nCopyright (C) Microsoft Corporation. Vçechna pr va vyhrazena.\r\n\r\napp.config : error MSB3249: Konfiguraźnˇ soubor aplikace app.config je neplatně. Index and count must refer to a location within the string. [C:\\Project\\Project.csproj]\r\napp.config : error MSB3249: Parameter name: destinationIndex [C:\\Project\\Project.csproj]\r\n\r\nBuild failed.\r\n\r\napp.config : error MSB3249: Konfiguraźnˇ soubor aplikace app.config je neplatně. Index and count must refer to a location within the string. [C:\\Project\\Project.csproj]\r\napp.config : error MSB3249: Parameter name: destinationIndex [C:\\Project\\Project.csproj]\r\n    0 warningsˇ\r\n    Erorr count: 1\r\n```\r\n\r\nWell, my app.config is not used and is almost empty\r\n`<configuration>\r\n   <runtime>\r\n      <gcServer enabled=\"true\"/>\r\n   </runtime>\r\n</configuration>\r\n`\r\n\r\nWorked fine before installing 2.0 SDK.\r\n\r\n\r\n\r\n"},{"Id":"6705385163","Type":"IssuesEvent","CreatedAt":"2017-10-11T23:55:03","Actor":"rohit21agrawal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7812","RelatedDescription":"Opened issue \"Failed to create prime the NuGet cache. new failed with: 5\" (#7812) at dotnet/cli","RelatedBody":"_From @Petermarcu on October 11, 2017 22:49_\n\n@dinjonya opened this here: https://github.com/dotnet/core/issues/1022\r\n\r\non macOs version is 10.13\r\n\r\ndotnet core install 1.04 & 2.0 \r\nmy prj use .net core 1.04\r\nwhen restore or build or run    console print\r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.\r\n\r\nTelemetry\r\n--------------\r\nThe .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include command-line arguments. The data is collected by Microsoft andshared with the community.\r\nYou can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.\r\nYou can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.\r\n\r\nConfiguring...\r\n-------------------\r\nA command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.\r\nDecompressing 100% 4866 ms\r\nExpanding 100% 6208 ms\r\nFailed to create prime the NuGet cache. new failed with: 5   \r\n\n\n_Copied from original issue: NuGet/Home#6017_"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6705349379","Type":"IssuesEvent","CreatedAt":"2017-10-11T23:42:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Closed issue \"Did the generic term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place to ask this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6706149464","Type":"PullRequestEvent","CreatedAt":"2017-10-12T05:17:49","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24596","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25812-00, beta-25812-00, respectively (master)\" (#24596) at dotnet/corefx","RelatedBody":""},{"Id":"6706060818","Type":"PullRequestEvent","CreatedAt":"2017-10-12T04:36:13","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24595","RelatedDescription":"Merged pull request \"Update CoreFx, CoreSetup to preview1-25812-01, preview1-25811-02, respectively (master)\" (#24595) at dotnet/corefx","RelatedBody":""},{"Id":"6705743823","Type":"IssuesEvent","CreatedAt":"2017-10-12T02:21:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24563","RelatedDescription":"Closed issue \"ImmutableDictionary.CreateBuilder<TKey, TValue>(IEqualityComparer<string>) allocates unneeded enumerator\" (#24563) at dotnet/corefx","RelatedBody":"We have code that does this:\r\n\r\n``` C#\r\n    ImmutableDictionary.CreateBuilder<string, LazyItemList>(StringComparer.OrdinalIgnoreCase);\r\n```\r\n\r\nThis allocates an unnecessary boxed `ImmutableDictionary<TKey, TValue>.Enumerator`. This produces 0.2% of all allocations in some scenarios in MSbuild:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/31417602-4fc623bc-ae7c-11e7-8183-6bad76ccf647.png)"},{"Id":"6705743817","Type":"PullRequestEvent","CreatedAt":"2017-10-12T02:21:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24565","RelatedDescription":"Merged pull request \"Avoid generic interface GetEnumerator empty allocations in immutable collections\" (#24565) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24563\r\ncc: @davkean, @AArnott "},{"Id":"6705716340","Type":"PullRequestEvent","CreatedAt":"2017-10-12T02:10:05","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24595","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview1-25812-01, preview1-25811-02, respectively (master)\" (#24595) at dotnet/corefx","RelatedBody":""},{"Id":"6705689658","Type":"IssuesEvent","CreatedAt":"2017-10-12T01:59:37","Actor":"jiria","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24594","RelatedDescription":"Opened issue \"NamedPipeClientStream depends on WaitNamedPipe, which is not supported in Windows Containers\" (#24594) at dotnet/corefx","RelatedBody":"`NamedPipeClientStream.TryConnect` calls into native `WaitNamedPipe` first to make sure the pipe is available and only then into native `CreateNamedPipeClient`. The problem is that currently `WaitNamedPipe` is not supported from inside of Windows Containers (however `CreateNamedPipeClient` works ok). It fails with `ERROR_FILE_NOT_FOUND`. As such, managed code using `NamedPipeClientStream` is broken in Windows Containers due to the ordering of the calls. This includes Docker.Dotnet library and projects depending on it. Since both these calls happen in a loop which is making sure that the given timeout is not exceeded, we could swap them and call `WaitNamedPipe` only if `CreateNamedPipeClient` fails in a predicable manner first."},{"Id":"6705655831","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:46:06","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24589","RelatedDescription":"Merged pull request \"Avoid StringBuilder/int[] overhead when p/invoking GetComputerName\" (#24589) at dotnet/corefx","RelatedBody":"Minor nit: #24579 introduced another extern overload of `Interop.Kernel32.GetComputerName` that requires allocating/marshaling a `StringBuilder` and allocating an `int[]`. It's only called once from `PerformanceCounterLib` and the result is cached in a static field so it's not a huge perf concern, but I'd prefer simply calling the existing more efficient `GetComputerName` helper (used by `Environment.MachineName` on Windows) that avoids the extra code and overhead.\r\n\r\nI decided not to switch `PerformanceCounterLib` to call `Environment.MachineName` because if the p/invoke fails, `Environment.MachineName` throws, whereas `PerformanceCounterLib` ignores errors and just returns an empty string (via call to `StringBuilder.ToString()` on an empty builder)."},{"Id":"6705635815","Type":"IssuesEvent","CreatedAt":"2017-10-12T01:38:00","Actor":"scottaddie","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24593","RelatedDescription":"Opened issue \"No .IsVowel for chars??\" (#24593) at dotnet/corefx","RelatedBody":"Moved from https://github.com/aspnet/Docs/issues/4509. Originally filed by @Rasmustof.\r\n\r\n>Hey Guys,\r\n>\r\n>i was just working on a simple program, but wished that there was a method for checking if any given >character is a  vowel or not?\r\n>\r\n>Usage would be like: \r\n>Char c  = 'C'\r\n>if(isVowel(c)) \r\n>\r\n>etc..\r\n\r\n>this could be done like this if im not wrong:\r\n\r\n>Public bool isVowel(Char c){\r\n>  string v = \"aeiouyAEIOUY\";\r\n>  if(v.IndexOf(c) != -1){\r\n>      return true;\r\n>  }else return false;\r\n>}"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6705805911","Type":"PullRequestEvent","CreatedAt":"2017-10-12T02:45:59","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22667","RelatedDescription":"Opened pull request \"Adjust diagnostic location for lambda that cannot convert (15.later)\" (#22667) at dotnet/roslyn","RelatedBody":"When working with nested lambdas, it is very easy to end up with the inner lambda entirely squiggled, which gets in the way of identifying and fixing the problem. In such cases, the fix is to use the lambda variables and the arrow as the span to report on (instead of the entire lambda).\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/12466233/31466758-321d3790-ae8d-11e7-9394-0844a3374d88.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/12466233/31476658-6be88252-aebc-11e7-9665-72c8fa316ab2.png)\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/22662"},{"Id":"6705610505","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:27:38","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22666","RelatedDescription":"Opened pull request \"Don't offer IntroduceLocal on throw expressions (15.later)\" (#22666) at dotnet/roslyn","RelatedBody":"\r\nFixes https://github.com/dotnet/roslyn/issues/13435"},{"Id":"6705558864","Type":"PullRequestEvent","CreatedAt":"2017-10-12T01:05:34","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22644","RelatedDescription":"Closed pull request \"[EE] Override OnClose for MetadataContextItem\" (#22644) at dotnet/roslyn","RelatedBody":"fixes https://github.com/dotnet/roslyn/issues/22617\r\n\r\n**Customer scenario**\r\n\r\nThere is a crash when user attempts to debug in X64 mode with the process object unloaded at the point of attempting to read a dangling pointer returned from the GetMetaDataBytesPtr Concord API.\r\n\r\n**Bugs this fixes:**\r\n\r\n#22617\r\nVSO : Bug https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems?id=187805 \r\n\r\n**Workarounds, if any**\r\n\r\nNot known\r\n\r\n**Risk**\r\n\r\nLow. Code change is minimal. It stops Concord API from going to the component-cleaning phase, ensuring that the bytes are alive.\r\n\r\n**Performance impact**\r\n\r\nNo\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nThere was an incomplete fix for the issue: https://github.com/dotnet/roslyn/issues/17788\r\n\r\n**Root cause analysis:**\r\n\r\nPlease see https://github.com/dotnet/roslyn/issues/22617\r\n\r\n**How was the bug found?**\r\n\r\nReliability tracking. Then, Watson dumps\r\n\r\n**Test documentation updated?**\r\n\r\nNo (N/A?)"},{"Id":"6705499204","Type":"IssuesEvent","CreatedAt":"2017-10-12T00:40:10","Actor":"terrajobst","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22421","RelatedDescription":"Closed issue \"Microsoft.CodeAnalysis.Common .netFramework 4.3 or .netFramework 4.7\" (#22421) at dotnet/roslyn","RelatedBody":"Thanks for your attention.\r\nI create a C# project with .netFramework 4.7.\r\nand when I install the package Microsoft.CodeAnalysis.Common to the project. the system told me that many  .netFramework 4.3 assembles should be installed. and i found that \r\n\r\n```\r\n.NETStandard 1.3\r\nMicrosoft.CodeAnalysis.Analyzers (>= 1.1.0) \r\nSystem.AppContext (>= 4.3.0) \r\nSystem.Collections (>= 4.3.0) \r\nSystem.Collections.Concurrent (>= 4.3.0) \r\nSystem.Collections.Immutable (>= 1.3.1) \r\nSystem.Console (>= 4.3.0) \r\nSystem.Diagnostics.Debug (>= 4.3.0) \r\nSystem.Diagnostics.FileVersionInfo (>= 4.3.0) \r\nSystem.Diagnostics.StackTrace (>= 4.3.0) \r\nSystem.Diagnostics.Tools (>= 4.3.0) \r\nSystem.Dynamic.Runtime (>= 4.3.0) \r\nSystem.Globalization (>= 4.3.0) \r\nSystem.IO.Compression (>= 4.3.0) \r\nSystem.IO.FileSystem (>= 4.3.0) \r\nSystem.IO.FileSystem.Primitives (>= 4.3.0) \r\nSystem.Linq (>= 4.3.0) \r\nSystem.Linq.Expressions (>= 4.3.0) \r\nSystem.Reflection (>= 4.3.0) \r\nSystem.Reflection.Metadata (>= 1.4.2) \r\nSystem.Resources.ResourceManager (>= 4.3.0) \r\nSystem.Runtime (>= 4.3.0) \r\nSystem.Runtime.Extensions (>= 4.3.0) \r\nSystem.Runtime.InteropServices (>= 4.3.0) \r\nSystem.Runtime.Numerics (>= 4.3.0) \r\nSystem.Security.Cryptography.Algorithms (>= 4.3.0) \r\nSystem.Security.Cryptography.Encoding (>= 4.3.0) \r\nSystem.Security.Cryptography.X509Certificates (>= 4.3.0) \r\nSystem.Text.Encoding (>= 4.3.0) \r\nSystem.Text.Encoding.CodePages (>= 4.3.0) \r\nSystem.Text.Encoding.Extensions (>= 4.3.0) \r\nSystem.Threading (>= 4.3.0) \r\nSystem.Threading.Tasks (>= 4.3.0) \r\nSystem.Threading.Tasks.Parallel (>= 4.3.0) \r\nSystem.Threading.Thread (>= 4.3.0) \r\nSystem.ValueTuple (>= 4.3.0) \r\nSystem.Xml.ReaderWriter (>= 4.3.0) \r\nSystem.Xml.XDocument (>= 4.3.0) \r\nSystem.Xml.XmlDocument (>= 4.3.0) \r\nSystem.Xml.XPath.XDocument (>= 4.3.0) \r\n\r\n```\r\nwas required. \r\n**Does the .netFramework 4.3 better than  .netFramework 4.7?**\r\nI'm confused,"},{"Id":"6705487282","Type":"PullRequestEvent","CreatedAt":"2017-10-12T00:35:14","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22665","RelatedDescription":"Opened pull request \"Adding more tests for readonly references feature\" (#22665) at dotnet/roslyn","RelatedBody":"First commit closes #18171\r\nSecond commit makes sure correct error is reported when user defined tuple types exist with `readonly` modifier\r\nThird commit closes #18172 \r\n\r\n@jcouv @VSadov \r\nAFAIK, there is no define generic type inference with indexers or operators, because the enclosing type would need to have the generic parameter, thus making the inference happen on object creation, not operator or indexer call. Am I missing something?"},{"Id":"6705477801","Type":"IssuesEvent","CreatedAt":"2017-10-12T00:31:14","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18071","RelatedDescription":"Closed issue \"Add documentation for pathmap command-line flag\" (#18071) at dotnet/roslyn","RelatedBody":"Please add documentation for the /pathMap command-line flag."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6705402006","Type":"PullRequestEvent","CreatedAt":"2017-10-12T00:01:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/4710","RelatedDescription":"Closed pull request \"[x86] Set CORJIT_FLAG_USE_SSE2\" (#4710) at dotnet/corert","RelatedBody":"RyuJIT/x86 requires SSE2 and we set it.\r\n\r\n@MichalStrehovsky @jkotas PTAL\r\n\r\ncc @Dmitri-Botcharnikov, @sergign60, @BredPet "},{"Id":"6704715319","Type":"PullRequestEvent","CreatedAt":"2017-10-11T20:46:20","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4712","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4712) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6702602103","Type":"PullRequestEvent","CreatedAt":"2017-10-11T13:44:53","Actor":"AtsushiKan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4711","RelatedDescription":"Merged pull request \"Introduce NetCore 1.0 compat hack for GetTypeInfo()\" (#4711) at dotnet/corert","RelatedBody":"We encountered a scenario with F# where a user-extended\r\nType object was passed to another component that used\r\nGetTypeInfo() on the object.\r\n\r\nThe user-extended Type object seemingly had no way\r\nto implement IReflectableType.GetTypeInfo() because\r\nthere's no protected constructor on TypeInfo. But luckily,\r\nTypeDelegator already extends TypeInfo so returning an instance\r\nof that was enough to make the other component happy.\r\n\r\nThis is a cheap insurance to avoid getting other\r\nreports of this."},{"Id":"6702601243","Type":"PullRequestEvent","CreatedAt":"2017-10-11T13:44:46","Actor":"AtsushiKan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4711","RelatedDescription":"Opened pull request \"Introduce NetCore 1.0 compat hack for GetTypeInfo()\" (#4711) at dotnet/corert","RelatedBody":"We encountered a scenario with F# where a user-extended\r\nType object was passed to another component that used\r\nGetTypeInfo() on the object.\r\n\r\nThe user-extended Type object seemingly had no way\r\nto implement IReflectableType.GetTypeInfo() because\r\nthere's no protected constructor on TypeInfo. But luckily,\r\nTypeDelegator already extends TypeInfo so returning an instance\r\nof that was enough to make the other component happy.\r\n\r\nThis is a cheap insurance to avoid getting other\r\nreports of this."},{"Id":"6702549688","Type":"PullRequestEvent","CreatedAt":"2017-10-11T13:35:19","Actor":"alpencolt","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4710","RelatedDescription":"Opened pull request \"[x86] Set CORJIT_FLAG_USE_SSE2\" (#4710) at dotnet/corert","RelatedBody":"RyuJIT/x86 requires SSE2 and we set it.\r\n\r\n@MichalStrehovsky @jkotas PTAL\r\n\r\ncc @Dmitri-Botcharnikov, @sergign60, @BredPet "},{"Id":"6701315345","Type":"IssuesEvent","CreatedAt":"2017-10-11T09:10:50","Actor":"alpencolt","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4699","RelatedDescription":"Closed issue \"[x86/Linux] Stack corruption pinvoke/string marshaling\" (#4699) at dotnet/corert","RelatedBody":"I'm trying to run `Hello World` application on x86 (cross build on x64) but ILC compiler failed on `jitStartup()`.\r\nFirst  it goes to new JitHost:\r\n```\r\n#0  JitHost::getIntConfigValue (this=0x81435b0, \r\n    name=0xeef845d6 L\"\\x6c0041\\x4a0074\\x740069\\x69004c\\x69006dt\\x6c0041\\x4a0074\\x740069\\x6b0053\\x700069\\x6e004f\\x730041\\x650073\\x740072\\x420000\\x650072\\x6b0061\\x6e004f\\x750044\\x70006d\\x6f0054\\x65006bn\\x650044\\x750062\\x420067\\x650072\\x6b0061\\x6e004f\\x650056\\x690072\\x690066\\x610063\\x690074\\x6e006f\\x610046\\x6c0069\\x720075e\\x69004a\\x440074\\x660069\\x610066\\x6c0062\\x440065\\x730061m\\x69004a\\x4c0074\\x6f006f\\x480070\\x69006f\\x740073\\x740053\\x740061s\\x69004a\\x4c0074\\x720073\\x530061\\x610074\\x730074\\x440000\\x6d0075\\x4a0070\\x740069\\x650074\\x4d0064\\x740065\\x6f0068\\x730064\\x4a0000\\x740069\\x6e0045\\x620061\\x65006c\\x430050\\x650052\\x41006c\\x640064r\\x6e0049\\x650074\\x700072\\x650072\\x650074\\x460072\\x6c0061\\x62006c\\x630061k\\x69004a\\x410074\\x730073\\x720065\\x4f0074\\x4d006e\\x780061\\x410052\\x610050\\x730073\\x730065\\x4a0000\\x740069\\x720042\\x610065\\x45006b\\x69006d\\x4f0074\\x740075\\x750070\\x490074\\x73006e\\x720074\\x4a0000\\x740069\\x720042\\x610065\\x4d006b\\x72006f\\x680070\\x720054\\x650065\\x4a0000\\x740069\\x720042\\x610065\\x4f006b\\x42006e\\x640061\\x6f0043\\x650064\\x4a0000\\x540049\\x720042\\x610065\\x4f006b\\x4d006e\\x6e0069\\x70004f\\x730074\\x4a0000\\x740069\\x720042\\x610065\\x4f006b\\x55006e\\x73006e\\x660061\\x430065\\x64006fe\\x69004a\\x430074\\x6e0061\\x730055\\x530065\\x450053\\062\\x69004a\\x430074\\x6f006c\\x65006e\\x6f004c\\x70006fs\\x69004a\\x440074\\x620065\\x670075\\x6f004c\\x4c0067\\x6f006f\\x430070\\x6f006c\\x69006e\\x67006e\\x4a0000\\x740069\\x650044\\x610066\\x6c0075\\x460074\\x6c0069l\\x69004a\\x440074\\x720069\\x630065\\x410074\\x6c006c\\x63006f\\x4a0000\\x740069\\x6f0044\\x620075\\x65006c\\x6c0041\\x670069\"..., defaultValue=0) at /home/alexander/src/corert/src/Native/jitinterface/jithost.cpp:61\r\n#1  0xeec1472f in JitConfigValues::initialize (this=0xef09df98 <JitConfig>, host=0x81435b0) at /home/alexander/src/coreclr/src/jit/jitconfigvalues.h:14\r\n#2  0xeeaf915b in jitStartup (jitHost=0x81435b0) at /home/alexander/src/coreclr/src/jit/ee_il_dll.cpp:87\r\n...\r\n```\r\n`JitHost::getIntConfigValue()` execute `JitConfigProvider::GetIntConfigValue()` from `corert/src/JitInterface/src/JitConfigProvider.cs` which returns value successfully. After that `JitHost::getIntConfigValue()` crash on return statement. If I remove C# code invocation it work for next managed code invocation.\r\nSo it looks the stack is being corrupted after switching unmanaged/managed.\r\n\r\n@jkotas do you know what code should be implemented for this logic?\r\n\r\ncc @Dmitri-Botcharnikov @sergign60 @BredPet @am11 "},{"Id":"6700287561","Type":"PullRequestEvent","CreatedAt":"2017-10-11T03:38:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4705","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4705) at dotnet/corert","RelatedBody":""},{"Id":"6699971737","Type":"PullRequestEvent","CreatedAt":"2017-10-11T01:29:37","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4709","RelatedDescription":"Merged pull request \"implemented ldobj/stobj in terms of ldind/stind\" (#4709) at dotnet/corert","RelatedBody":"this should fix #4708"},{"Id":"6699971735","Type":"IssuesEvent","CreatedAt":"2017-10-11T01:29:36","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4708","RelatedDescription":"Closed issue \"Implement stobj opcode\" (#4708) at dotnet/corert","RelatedBody":"Implement the stobj opcode, which stores a value type at a pointer. It may be possible to just call through to the other overload of ImportStoreIndirect, which was implemented in #4702 The method to fill in is at:\r\nhttps://github.com/dotnet/corert/blob/baeebd4f5facf198c1252ed7e02940285982d534/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L890"},{"Id":"6699865738","Type":"PullRequestEvent","CreatedAt":"2017-10-11T00:45:54","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4709","RelatedDescription":"Opened pull request \"implemented ldobj/stobj in terms of ldind/stind\" (#4709) at dotnet/corert","RelatedBody":"this should fix #4708"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":26,"RawContent":null}]}},"RunOn":"2017-10-12T05:30:18.7449522Z","RunDurationInMilliseconds":6478}