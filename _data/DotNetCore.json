{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7398270828","Type":"PullRequestEvent","CreatedAt":"2018-03-19T05:07:56","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17029","RelatedDescription":"Opened pull request \"Switch over to managed Marvin implementation for string hashing\" (#17029) at dotnet/coreclr","RelatedBody":""},{"Id":"7397999410","Type":"PullRequestEvent","CreatedAt":"2018-03-19T03:11:14","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17019","RelatedDescription":"Merged pull request \"Fix BuildConfiguration casing so publishing works\" (#17019) at dotnet/coreclr","RelatedBody":"Tough to be sure this is a real fix.  My private official build run got past the point of failure, though that could have been luck since it wasn't 100% repro.  Ultimately, the build failed due to dotnet/core-eng#2923, but I think it would have succeeded had it not been for that.\r\n\r\nFixes #16990 "},{"Id":"7397999402","Type":"IssuesEvent","CreatedAt":"2018-03-19T03:11:14","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16990","RelatedDescription":"Closed issue \"Test builds use different casing for transport feeds, breaking the build\" (#16990) at dotnet/coreclr","RelatedBody":"After initially suspecting that this was a leftover problem from secret cycling, I realize it’s not, rather it’s a URL casing issue.\r\n\r\nSpecifically the product builds put their transport feed here:\r\nhttp://dotnetbuildoutput.blob.core.windows.net/coreclr-master-20180316-02/DotNet-CoreClr-Master-1832/Release/pkg/index.json  (works)\r\n\r\nThen the test builds try to use a transport feed like this:\r\nhttps://dotnetbuildoutput.blob.core.windows.net/coreclr-master-20180316-02/DotNet-CoreClr-Master-1832/**r**elease/pkg/index.json \r\n \r\nThe R in release having different casing breaks the transport feed.  It may be related to recent changes to prevent blob collisions? \r\n\r\n@RussKeldorph , @jashook , @wtgodbe  FYI.\r\n"},{"Id":"7397996646","Type":"IssuesEvent","CreatedAt":"2018-03-19T03:10:08","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17028","RelatedDescription":"Opened issue \"Tizen armel Cross Checked Innerloop Build and Test failing pretty much every PR\" (#17028) at dotnet/coreclr","RelatedBody":"We need to remove the default trigger for this job unless/until it is made reliable."},{"Id":"7397927888","Type":"IssuesEvent","CreatedAt":"2018-03-19T02:41:38","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17027","RelatedDescription":"Opened issue \"Multiple JIT Stress test failures\" (#17027) at dotnet/coreclr","RelatedBody":"While working on https://github.com/dotnet/coreclr/pull/16957 I found there were multiple unrelated tests that were failing.\r\n\r\n#### General Failure\r\n\r\n* baseservices_threading._regressions_269336_objmonhelper_objmonhelper_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0x3_prtest/19/testReport/junit/baseservices_threading/_regressions_269336_objmonhelper_objmonhelper_/_regressions_269336_objmonhelper_objmonhelper_cmd/\r\n* baseservices_threading._generics_threadstart_GThread02_GThread02_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_jitstressregs8_prtest/24/testReport/junit/baseservices_threading/_generics_threadstart_GThread02_GThread02_/_generics_threadstart_GThread02_GThread02_cmd/\r\n* baseservices_threading._waithandle_waitany_waitanyex5_waitanyex5_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0x3_prtest/15/testReport/junit/baseservices_threading/_waithandle_waitany_waitanyex5_waitanyex5_/_waithandle_waitany_waitanyex5_waitanyex5_cmd/\r\n* CoreMangLib_cti._system_reflection_emit_DynMethodJumpStubTests_DynMethodJumpStubTests_DynMethodJumpStubTests_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_prtest/47/testReport/CoreMangLib_cti/_system_reflection_emit_DynMethodJumpStubTests_DynMethodJumpStubTests_DynMethodJumpStubTests_/_system_reflection_emit_DynMethodJumpStubTests_DynMethodJumpStubTests_DynMethodJumpStubTests_cmd/\r\n* JIT_Methodical._ELEMENT_TYPE_IU__il_dbgu_fld__il_dbgu_fld_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_minopts_heapverify1_prtest/10/testReport/JIT_Methodical/_ELEMENT_TYPE_IU__il_dbgu_fld__il_dbgu_fld_/_ELEMENT_TYPE_IU__il_dbgu_fld__il_dbgu_fld_cmd/\r\n* JIT_Methodical._ELEMENT_TYPE_IU__il_relu_fld__il_relu_fld_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_minopts_heapverify1_prtest/17/testReport/junit/JIT_Methodical/_ELEMENT_TYPE_IU__il_relu_fld__il_relu_fld_/_ELEMENT_TYPE_IU__il_relu_fld__il_relu_fld_cmd/\r\n* JIT_Performance._CodeQuality_BenchmarksGame_k_nucleotide_k_nucleotide_9_k_nucleotide_9_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_heapverify1_prtest/8/testReport/junit/JIT_Performance/_CodeQuality_BenchmarksGame_k_nucleotide_k_nucleotide_9_k_nucleotide_9_/_CodeQuality_BenchmarksGame_k_nucleotide_k_nucleotide_9_k_nucleotide_9_cmd/\r\n* Loader_classloader._TypeInitialization_CircularCctors_CircularCctorFourThreads_CircularCctorFourThreads_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_prtest/47/testReport/Loader_classloader/_TypeInitialization_CircularCctors_CircularCctorFourThreads_CircularCctorFourThreads_/_TypeInitialization_CircularCctors_CircularCctorFourThreads_CircularCctorFourThreads_cmd/\r\n* Loader_classloader._TypeInitialization_CircularCctors_CircularCctorThreeThreads02_CircularCctorThreeThreads02_: https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_heapverify1_prtest/8/testReport/junit/Loader_classloader/_TypeInitialization_CircularCctors_CircularCctorThreeThreads02_CircularCctorThreeThreads02_/_TypeInitialization_CircularCctors_CircularCctorThreeThreads02_CircularCctorThreeThreads02_cmd/\r\n\r\n#### Jobs with many failures\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable_jitstress2_prtest/8/#showFailuresLink\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_jitstress2_prtest/12/#showFailuresLink\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_jitstress1_prtest/12/#showFailuresLink\r\n* https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_jitstress1/68/\r\n\r\n#### baseservices_threading._mutex_misc_mutexctor1_mutexctor1\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_minopts_heapverify1_prtest/10/testReport/baseservices_threading/_mutex_misc_mutexctor1_mutexctor1_/_mutex_misc_mutexctor1_mutexctor1_cmd/\r\n\r\n```\r\n\tAssert failure(PID 9080 [0x00002378], Thread: 2304 [0x0900]): CONTRACT VIOLATION by Frame::Push at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\frames.cpp\\\" @ 394\r\n\r\n\tMODE_COOPERATIVE encountered while thread is in preemptive state.\r\n\r\n\t CONTRACT in Frame::Push at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\frames.cpp\\\" @ 394\r\n\t OVERRIDE_TYPE_LOAD_LEVEL_LIMIT in MethodDescCallSite::CallTargetWorker at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\callhelpers.cpp\\\" @ 371\r\n\t CONTRACT in MethodDescCallSite::CallTargetWorker at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\callhelpers.cpp\\\" @ 361\r\n\t CONTRACT in ThreadNative::KickOffThread_Worker at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\comsynchronizable.cpp\\\" @ 206\r\n\t CONTRACT in ManagedThreadBase_DispatchInner at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\threads.cpp\\\" @ 8816\r\n\t CONTRACT in ManagedThreadBase_FullTransitionWithAD at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\threads.cpp\\\" @ 9197\r\n\t CONTRACT in ThreadNative::KickOffThread at \\\"d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\comsynchronizable.cpp\\\" @ 305\r\n\r\n\tWe can't find the violated contract. Look for an old-style non-holder-based contract.\r\n\r\n\tCORECLR! CONTRACT_ASSERT + 0x458 (0x00007ffe`f1db47f8)\r\n\tCORECLR! EEContract::DoChecks + 0x252 (0x00007ffe`f1ed1032)\r\n\tCORECLR! Frame::Push + 0xD4 (0x00007ffe`f216ecd4)\r\n\tCORECLR! LinkFrameAndThrow + 0x32 (0x00007ffe`f1ed0d92)\r\n\tCORECLR! NakedThrowHelper2 + 0x9 (0x00007ffe`f23981b9)\r\n\tCORECLR! NakedThrowHelper_RspAligned + 0x1E (0x00007ffe`f23981eb)\r\n\tCORECLR! NakedThrowHelper_FixRsp + 0x5 (0x00007ffe`f23981f5)\r\n\tSYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffe`f1811e90)\r\n\tSYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffe`f18f0ed4)\r\n\t<no module>! <no symbol> + 0x0 (0x00007ffe`92ce616f)\r\n\t File: d:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\src\\\\vm\\\\frames.cpp Line: 394\r\n\t Image: D:\\\\j\\\\workspace\\\\x64_checked_w---e8fbcb57\\\\bin\\\\tests\\\\Windows_NT.x64.Checked\\\\Tests\\\\Core_Root\\\\CoreRun.exe\r\n```\r\n\r\n#### JIT_Methodical._refany__il_relarray3__il_relarray3_\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_minopts_heapverify1_prtest/17/testReport/junit/JIT_Methodical/_refany__il_relarray3__il_relarray3_/_refany__il_relarray3__il_relarray3_cmd/\r\n\r\n```\r\n\tAssert failure(PID 5580 [0x000015cc], Thread: 7364 [0x1cc4]): !hasPartialArgInfo || isZero(argHigh) || (argHigh == CONSTRUCT_ptrArgTP(1, (argCnt-1)))\r\n\r\n\tCORECLR! scanArgRegTableI + 0x5F3 (0x7261e063)\r\n\tCORECLR! EECodeManager::EnumGcRefs + 0x322 (0x72617a62)\r\n\tCORECLR! GcStackCrawlCallBack + 0x169 (0x727eda29)\r\n\tCORECLR! Thread::MakeStackwalkerCallback + 0x45 (0x7246b345)\r\n\tCORECLR! Thread::StackWalkFramesEx + 0x177 (0x7246c9dc)\r\n\tCORECLR! Thread::StackWalkFrames + 0x15E (0x7246c7e2)\r\n\tCORECLR! ScanStackRoots + 0x18C (0x728f74da)\r\n\tCORECLR! GCToEEInterface::GcScanRoots + 0x10F (0x728f6adc)\r\n\tCORECLR! WKS::gc_heap::mark_phase + 0x1B1 (0x728c1c2e)\r\n\tCORECLR! WKS::gc_heap::gc1 + 0x133 (0x728bc800)\r\n\t File: d:\\\\j\\\\workspace\\\\x86_checked_w---9da75386\\\\src\\\\vm\\\\eetwain.cpp Line: 2658\r\n\t Image: D:\\\\j\\\\workspace\\\\x86_checked_w---9da75386\\\\bin\\\\tests\\\\Windows_NT.x86.Checked\\\\Tests\\\\Core_Root\\\\CoreRun.exe\r\n```\r\n\r\n#### JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable_heapverify1_prtest/8/testReport/JIT_Performance/_CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_/_CodeQuality_BenchmarksGame_regex_redux_regex_redux_5_regex_redux_5_cmd/\r\n\r\n```\r\n\tAssert failure(PID 6868 [0x00001ad4], Thread: 760 [0x02f8]): Consistency check failed: hit privileged instruction!FAILED: !ExecutionManager::IsManagedCode(GetIP(pContext))\r\n\t File: d:\\\\j\\\\workspace\\\\x86_checked_w---a898fbbe\\\\src\\\\vm\\\\excep.cpp Line: 6944\r\n\t Image: D:\\\\j\\\\workspace\\\\x86_checked_w---a898fbbe\\\\bin\\\\tests\\\\Windows_NT.x86.Checked\\\\Tests\\\\Core_Root\\\\CoreRun.exe\r\n```\r\n\r\n\r\n#### JIT_HardwareIntrinsics._X86_Sse2_ConvertToDouble_r_ConvertToDouble_r_\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_jitstressregs4_prtest/31/testReport/junit/JIT_HardwareIntrinsics/_X86_Sse2_ConvertToDouble_r_ConvertToDouble_r_/_X86_Sse2_ConvertToDouble_r_ConvertToDouble_r_cmd/\r\n\r\n```\r\n\tAssert failure(PID 16440 [0x00004038], Thread: 11024 [0x2b10]): Assertion failed '(unsigned)ins < _countof(insCodesRM)' in 'IntelHardwareIntrinsicTest.Program:Main(ref):int' (IL size 243)\r\n\r\n\t File: d:\\\\j\\\\workspace\\\\x64_checked_w---db056dfb\\\\src\\\\jit\\\\emitxarch.cpp Line: 1249\r\n\t Image: D:\\\\j\\\\workspace\\\\x64_checked_w---db056dfb\\\\bin\\\\tests\\\\Windows_NT.x64.Checked\\\\Tests\\\\Core_Root\\\\CoreRun.exe\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7396980017","Type":"IssuesEvent","CreatedAt":"2018-03-18T17:45:40","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8840","RelatedDescription":"Opened issue \"Cleaner file structure when publishing please\" (#8840) at dotnet/cli","RelatedBody":"@njbrown09 commented on [Wed Jan 17 2018](https://github.com/dotnet/core/issues/1226)\n\nCan we please get a way to put everything but the binary in a folder? Its so frustrating having 50 DLLs in the same folder as the binary\n\n---\n\n@DevSidious commented on [Sat Jan 20 2018](https://github.com/dotnet/core/issues/1226#issuecomment-359176571)\n\nI second that.\n\n---\n\n@Petermarcu commented on [Sun Mar 18 2018](https://github.com/dotnet/core/issues/1226#issuecomment-374021939)\n\nIn 2.1, I believe all the runtime/host features are there to put them wherever they want to be. The work would be in the SDK to allow for more options.\n\n"},{"Id":"7396941812","Type":"IssuesEvent","CreatedAt":"2018-03-18T17:23:09","Actor":"fanoI","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8839","RelatedDescription":"Opened issue \"dotnet publish -c Release -r ubuntu.14.04-x64 create invalid executable\" (#8839) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nFollow the instructions here: https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-cli but change RuntimeIdentifiers in this way:\r\n\r\n``xml\r\n<RuntimeIdentifiers>win10-x64;osx.10.11-x64;ubuntu.14.04-x64</RuntimeIdentifiers>\r\n``\r\n\r\n## Expected  behavior\r\nThe SCD file created in bin\\Release\\netcoreapp2.0\\ubuntu.14.04-x64 is a valid Linux ELF binary and it is correctly executed\r\n\r\n## Actual behavior\r\nLinux refuses to execute it:\r\n$ ./SCD\r\nbash: ./SCD: cannot execute binary file: Exec format error\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\nLinux version:\r\n$ cat /etc/issue\r\nUbuntu 14.04 LTS \\n \\l\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7396897246","Type":"IssuesEvent","CreatedAt":"2018-03-18T16:57:03","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8838","RelatedDescription":"Opened issue \"Name clash between own name and library name on dotnet core 2.0\" (#8838) at dotnet/cli","RelatedBody":"@gregorybleiker commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192)\n\nIf you create a console app via\r\ndotnet new console \r\nin a directory named \"websocket\", you will receive a websocket.csproj\r\nPutting the code below in the Main method will cause the error below. Is this the expected behaviour?\r\n\r\n```\r\nvar webSocket = new ClientWebSocket();\r\nCancellationToken token = new CancellationToken();\r\nwebSocket.ConnectAsync(uri: new Uri(@\"ws://172.16.100.163:8080\"), cancellationToken: token).Wait();\r\nConsole.Write($\"task result {webSocket.State}\");\r\n```\r\nNo matter what the Uri (I have tried several, and I can't even see any outgoing connection in wireshark)\r\nthis is the result:\r\n```\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (Unable to connect to the remote server) ---> System.Net.WebSockets.WebSocketException: Unable to connect to the remote server ---> System.Net.WebSockets.WebSocketException: Unable to connect to the remote server ---> System.Net.Http.WinHttpException: Not enough storage is available to process this command\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.WebSockets.WinHttpWebSocket.<ConnectAsync>d__18.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Net.WebSockets.WebSocketHandle.<ConnectAsyncCore>d__20.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.WebSockets.WebSocketHandle.<ConnectAsyncCore>d__20.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Net.WebSockets.ClientWebSocket.<ConnectAsyncCore>d__16.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at websocket.Program.Main(String[] args) in C:\\Users\\gregorybleiker\\work\\websocket\\Program.cs:line 16\r\n```\r\n\r\n  \n\n---\n\n@benaadams commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355532977)\n\n`System.Net.Http.WinHttpException: Not enough storage is available to process this command`\r\n\r\nThat's a pretty weird exception (message)\r\n  \n\n---\n\n@benaadams commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355534001)\n\nSimilar message https://github.com/dotnet/corefx/issues/24139\r\n\r\nSeems to be a [`ERROR_NOT_ENOUGH_MEMORY`](https://github.com/dotnet/coreclr/blob/24f1153adfc1a83e490d8d22ee353b322aba1e33/src/pal/src/misc/errorstrings.cpp#L41) message; probably should say that rather than storage.\r\n\r\nThough that's an aside...\n\n---\n\n@gregorybleiker commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355536223)\n\nI certainly have enough free memory (16GB machine, 7GB free)\n\n---\n\n@gregorybleiker commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355557365)\n\nbtw. I should have said that I am running the code above in a dotnet core console app in the Main section... could there be some references missing?\n\n---\n\n@gregorybleiker commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355562266)\n\nOK, I found out what the problem was: I was using websocket.csproj as my project name. That must have led to a name clash with the \"other\" websocket...\n\n---\n\n@benaadams commented on [Fri Jan 05 2018](https://github.com/dotnet/core/issues/1192#issuecomment-355565503)\n\nMight want to add that to description and leave open?\n\n"},{"Id":"7396891704","Type":"IssuesEvent","CreatedAt":"2018-03-18T16:53:38","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8837","RelatedDescription":"Opened issue \"Referenced assemblies set to copy local are not copied to the output directory\" (#8837) at dotnet/cli","RelatedBody":"@nefcanto commented on [Sat Dec 23 2017](https://github.com/dotnet/core/issues/1183)\n\n**Referenced assemblies which are set to Copy Local are not copied to the output directory**\r\n\r\nI've described this in [this StackOverflow question](https://stackoverflow.com/questions/47952361/assembly-referenced-in-csproj-is-not-copied-to-output-directory) too.\r\n\r\nI want to work with Azure Storage. I've added Nuget package references, this way:\r\n\r\n```\r\n<ItemGroup>\r\n\t<PackageReference Include=\"WindowsAzure.Storage\" Version=\"8.7.0\" />\r\n\t<PackageReference Include=\"Microsoft.WindowsAzure.ConfigurationManager\" Version=\"3.2.3\" />\r\n</ItemGroup>\r\n```\r\n\r\nHowever, when I build the project (which is a web project by the way), I receive an error that it can't find the required DLL files from these packages. When I look at the output folder which is `bin\\Debug\\netcoreapp2.0\\` in my case, I see that no DLL from those packages exist in that folder.\r\nThe point that it can't find those DLL files means that something is not working properly. We expect by including a package reference in CSPROJ, all of the required actions be taken care of automatically.\r\n\r\nSo, I decided to add extra lines of code, to explicitly copy the required DLL files to the output folder:\r\n\r\n```\r\n<ItemGroup>\r\n    <Reference Include=\"Microsoft.WindowsAzure.Configuration\">\r\n        <HintPath>..\\Microsoft.WindowsAzure.Configuration.dll</HintPath>\r\n        <Private>true</Private>\r\n    </Reference>\r\n    <Reference Include=\"Microsoft.WindowsAzure.Storage\">\r\n        <HintPath>..\\Microsoft.WindowsAzure.Storage.dll</HintPath>\r\n        <Private>true</Private>\r\n    </Reference>\r\n</ItemGroup>\r\n```\r\n\r\nBut they are not getting copied. What's the problem?\n\n---\n\n@Petermarcu commented on [Sat Dec 23 2017](https://github.com/dotnet/core/issues/1183#issuecomment-353737477)\n\nI think you need to go back to package references and you need to do `dotnet publish` to produce a build of your application with everything copied. `dotnet build` and `dotnet run` do things the \"fast way\" which is to reference things where they are on disk and avoid the cost of copying to the app folder. Publish is the way to build your final application with everything copied local. Make sure you run your app from the publish folder at that point using `dotnet path/to/publish/folder/App.dll`.\n\n---\n\n@brentmorrisa commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1183#issuecomment-364586325)\n\nDotnet publish is not getting my copy-local true files, either.\n\n"},{"Id":"7396885887","Type":"IssuesEvent","CreatedAt":"2018-03-18T16:50:05","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8836","RelatedDescription":"Opened issue \"Debug Unit tests\" (#8836) at dotnet/cli","RelatedBody":"@FvdG commented on [Fri Jan 19 2018](https://github.com/dotnet/core/issues/1229)\n\n# Unable to debug (x)unit test(s) in a .Net Core 2.0 application\r\n\r\nI was able te get my xunit test up and running from the console with the _dotnet xunit_ command.\r\nThe problem, i want to be able to debug my unit tests in case of a complex problem.\r\n\r\nHow can I debug my unit tests? I would love to keep using XUnit but if there are working unit test frameworks I would glady switch.\r\n\r\nThe error inside VS2017:\r\n\r\n> Make sure test project has a nuget reference of package \"Microsoft.NET.Test.Sdk\" and framework version settings are appropriate and try again.\r\n\n\n"},{"Id":"7396404902","Type":"IssuesEvent","CreatedAt":"2018-03-18T12:02:55","Actor":"jankalfus","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8835","RelatedDescription":"Opened issue \"Dotnet webapi template - logging set up incorrectly\" (#8835) at dotnet/cli","RelatedBody":"There's a problem with the webapi template when it comes to logging. It sets up the json settings in a way a programmer does not expect - info and debug messages don't get logged in Development environment.\r\n\r\n## Steps to reproduce\r\nrun `dotnet new webapi`\r\nThen put some logging using `ILogger.LogInformation()` in the app.\r\nrun `dotnet run`\r\n\r\n## Expected  behavior\r\nDebug- and higher-level log messages from project get logged. Information- and higher-level System and Microsoft log messages get logged.\r\n\r\n## Actual behavior\r\nSince `appsettings.Development.json` and `appsettings.json` files get merged in Development environment and the settings from `appsettings.json` for Logging take precedence (more specific) over those in `appsettings.Development.json` (less specific), **only Warning- and higher-level messages in Development environment get logged**.\r\n\r\nThis is the content of `Logging` section in `appsettings.Development.json`:\r\n```\r\n    \"IncludeScopes\": false,\r\n    \"LogLevel\": {\r\n      \"Default\": \"Debug\",\r\n      \"System\": \"Information\",\r\n      \"Microsoft\": \"Information\"\r\n    }\r\n```\r\nand this is the content of `Logging` section in `appsettings.json`:\r\n```\r\n\"IncludeScopes\": false,\r\n    \"Debug\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      }\r\n    },\r\n    \"Console\": {\r\n      \"LogLevel\": {\r\n        \"Default\": \"Warning\"\r\n      }\r\n    }\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.101)\r\n\r\nProduct Information:\r\n Version:            2.1.101\r\n Commit SHA-1 hash:  6c22303bf0\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.101/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\r\n"},{"Id":"7395549266","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:22:51","Actor":"RussKeldorph","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8834","RelatedDescription":"Opened issue \"Used in the DOCKER dotnet restore error Segmentation fault (core dumped)\" (#8834) at dotnet/cli","RelatedBody":"_From @Loongle on September 6, 2017 14:3_\n\nI built Jenkins in docker container, then entered the container to install the dotnet core 2.0 SDK, and when I used the dotnew new console - o hwapp in container, there was an error: \r\n`Running 'dotnet restore' on hwapp/hwapp.csproj...\r\nSegmentation fault (core dumped)\r\n`\n\n_Copied from original issue: dotnet/coreclr#13809_"},{"Id":"7395229162","Type":"PullRequestEvent","CreatedAt":"2018-03-17T19:34:10","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8833","RelatedDescription":"Opened pull request \"Change --source to --source-feed and make it additional\" (#8833) at dotnet/cli","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8561\r\n\r\nOther than change source to source-feed and make it additional instead of exclusive. I changed source to be multiple. Because restore support multiple source https://github.com/Microsoft/dotnet/issues/361\r\n\r\nAs for mock. The offline feed and source feed is considered the same, so remove the category of “source”. \r\n\r\nI renamed source to “AdditionalFeed” because that is more accurate on implementation level.\r\n\r\nNote:\r\nNuGet feed don’t have order. Whichever responses the fastest, is the first.\r\nNo change on restore.\r\n\r\nscripts/cli-test-env.sh change is due to mac 10.13 is finally added to RID graph. And it is “considered” one of the CLI supported RID\r\n\r\n"},{"Id":"7395036425","Type":"IssuesEvent","CreatedAt":"2018-03-17T17:35:57","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8832","RelatedDescription":"Opened issue \".NET Core application name does not change in taskbar?\" (#8832) at dotnet/cli","RelatedBody":"@mudasir111 commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1351)\n\n.NET Core application name does not change in taskbar?\r\n\r\nEven after the self contained publishing the process name doesn't change, the assembly name property seems to work only on changing the .dll file name.\r\n\r\nI have four applications running, but for each process it shows dotnet as shown in the picture\r\n\r\n\r\n\r\n\r\n![attachment](https://user-images.githubusercontent.com/25227248/37447441-223afbf2-2848-11e8-99af-5f4ae191a37a.PNG)\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373345760)\n\nI think this is a duplicate of https://github.com/dotnet/core-setup/issues/2007.\n\n---\n\n@Petermarcu commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373487316)\n\n@steveharter @nguerrera is this something for the host or something that needs to be fixed in publish. Host doesn't know the name of the app until publish.\n\n---\n\n@Petermarcu commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373490032)\n\nI think the different here is that for a self-contained application or any application where the host is renamed to match the program name, we should be able to give something better in task manager.\n\n---\n\n@Petermarcu commented on [Sat Mar 17 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373938344)\n\n@nguerrera @livarcocc I'm going to move this to the CLI repo because I think this is about what happens when the apphost exe is renamed and updated to \"look like the app\".\n\n"},{"Id":"7394972561","Type":"PullRequestEvent","CreatedAt":"2018-03-17T16:58:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8831","RelatedDescription":"Closed pull request \"WIP Source to source feed\" (#8831) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7394877666","Type":"PullRequestEvent","CreatedAt":"2018-03-17T16:02:36","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8831","RelatedDescription":"Opened pull request \"WIP Source to source feed\" (#8831) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7396992039","Type":"IssuesEvent","CreatedAt":"2018-03-18T17:52:34","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/684","RelatedDescription":"Opened issue \"System.AppContext.GetData is in netstandard1.6 but not net462\" (#684) at dotnet/standard","RelatedBody":"@nothrow commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281)\n\n# Issue Title\r\n\r\nSome .NET Standard calls are not implemented as expected in .NET Framework\r\n\r\n# General\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.appcontext.getdata?view=netstandard-1.6#System_AppContext_GetData_System_String_\r\n\r\nHere, it says that AppContext.GetData is supported in NetStandard 1.6, 2.0, but .NET Framework 4.7.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n\r\nthis one says, that .NET 461 is fully supporting .NET Standard 2.0.\r\n\r\nI have application, that is compiled as .NET Standard library, and then is expected to be called from some kind of service host, that is either net462, or netcoreapp (based on platform it is running on). However, some of the libraries (Microsoft.Extensions.DependencyModel) for netstandard uses this call.\r\n\n\n---\n\n@svick commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281#issuecomment-368089059)\n\nThis is expected. .Net Framework 4.6.1 behaves as if it supported .Net Standard 2.0 and it does support the vast majority of it, but not everything. Specifically, it does not support APIs that were added in .Net Standard 1.5 and 1.6.\r\n\r\nFor more details, see [.NET Framework 4.6.1 supporting .NET Standard 2.0](https://github.com/dotnet/standard/tree/master/docs/netstandard-20#net-framework-461-supporting-net-standard-20).\r\n\r\nAs for your specific case, Microsoft.Extensions.DependencyModel 2.0.4 has versions for .Net Framework 4.5.1, .Net Standard 1.3 and .Net Standard 1.6. How exactly are you distributing your application/library? Maybe there's a way to use the .Net Framework 4.5.1 version of Microsoft.Extensions.DependencyModel from your .Net Framework 4.6.2 host?\n\n---\n\n@nothrow commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369511734)\n\nThanks for the link, I missed this specific document. \r\n\r\n> Considering the number of APIs that .NET Framework 4.6.1 will not support is low and that these are all brand-new APIs with low adoption we believe this is a much better trade-off.\r\n\r\nThis is kind of unfortunate, since the brand new API is used by ASP.NET Core, so eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here.\r\n\r\nI had troubles with 4.5.1 version, so I ended up with shipping my own forked version of DependencyModel. \r\n\r\nJust a suggestion, there is bunch of #if DOTNETCORE s  in `Microsoft.Extensions.DependencyModel`. Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369566176)\n\n> eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here\r\n\r\nI don't think so, that's what the .Net Framework 4.5.1 version is for. I think you're in a special situation, where you're distributing a single DLL to multiple frameworks, so that doesn't help. But most people will be fine.\r\n\r\n> Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\nI don't know, I'm not sure that would actually work. You might consider creating a new issue about that in the repo where that code lives: [dotnet/core-setup](https://github.com/dotnet/core-setup).\n\n---\n\n@Petermarcu commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1281#issuecomment-373257629)\n\n@terrajobst , sounds like this one is just unfortunately hitting the small set of API's that fell through the cracks. Anything actionable here? Should we move this to the standard repo or close?\n\n"},{"Id":"7395784656","Type":"IssuesEvent","CreatedAt":"2018-03-18T02:51:21","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/683","RelatedDescription":"Opened issue \"netstandard2.0 library, dependent on Microsoft.Win32.Registry, doesn't work from net471 when loaded via MEF\" (#683) at dotnet/standard","RelatedBody":"@jherby2k commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1311)\n\n# Issue Title\r\n\r\nI'm building a .net standard 2.0 library that uses MEF to load extensions. The MEF parts are also .net standard 2.0.\r\n\r\nEverything works fine when called from netcore2.0 test project. But if i have the test project also target net471, calls to Microsoft.Win32.Registry from the MEF part fail (Registry.LocalMachine returns null). I assume this is because Microsoft.Win32.Registry has a net461-specific library that isn't present.\r\n\r\nI see this problem doesn't exist if, instead of using MEF, i just directly depend on the part. I imagine MEF prevents the framework-specific dependencies from flowing through correctly. Any suggestions?\r\n\r\n# General\r\n\r\nYou can repro this by cloning https://github.com/jherby2k/AudioWorks.git then changing the AudioWorks.Api.Tests projects to also target net471. Tests using the AudioWorks.Extensions.Apple extension will fail because it can't read the registry.\n\n"},{"Id":"7395546948","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:21:04","Actor":"RussKeldorph","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/682","RelatedDescription":"Opened issue \".Net Standard 2.1?\" (#682) at dotnet/standard","RelatedBody":"_From @jherby2k on March 7, 2018 19:35_\n\nI can't find any information about a .net standard 2.1.\r\n\r\nI really want to use the new Span-ified methods like Stream.Read in my class libraries, but it looks like that stuff isn't in System.Memory but rather the .net core 2.1 SDK. Any other way to get these APIs, or do I have to wait for .net standard 2.1. And is there any ETA on that?\n\n_Copied from original issue: dotnet/coreclr#16806_"},{"Id":"7393599747","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:57:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/681","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02616-02 (master)\" (#681) at dotnet/standard","RelatedBody":""},{"Id":"7392651460","Type":"IssuesEvent","CreatedAt":"2018-03-16T19:27:19","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/680","RelatedDescription":"Opened issue \"Not able to get non-framework assemblies to be trimmed\" (#680) at dotnet/standard","RelatedBody":"Using the latest prerelease and on the option `<TrimUnusedDependencies>true</TrimUnusedDependencies>` in each root project, I'm now getting three non-framework assemblies (with pdbs) in the output which should have been trimmed.\r\n\r\nTwo of these assemblies are only referenced transitively via package references.  The other assembly is from a directly-referenced NuGet package, but `<RootPackageReference>false</RootPackageReference>` seems to have no effect on it. This last assembly is one of two lib assemblies in that directly-referenced NuGet package. I'm expecting the trimmer to trim this assembly and not trim the other assembly from the same package.\r\n\r\nI remember these three assemblies being trimmed by your trimmer before I started using packages from the MyGet feed, which I'm doing to preserve reference-related items.\r\n\r\n/cc @ericstj "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7397877157","Type":"IssuesEvent","CreatedAt":"2018-03-19T02:20:36","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27783","RelatedDescription":"Closed issue \"[Preview2] Make SocketsHttpHandler default Handler\" (#27783) at dotnet/corefx","RelatedBody":"We want to switch default HttpClientHandler to SocketsHttpHandler for 2.1 (starting with Preview2).\r\n\r\nWe need to keep the escape route to fall back to WinHttp & LibCurl handlers (when explicitly set).\r\nMost relevant code is here:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClientHandler.cs#L17-L37\r\n\r\nPart of the task is also to:\r\n1. Verify all CoreFX tests pass (esp. Data which depends on Http stack) - incl. outer loop CI legs\r\n2. Verify that WCF tests pass (please work with Paulo & WCF team to run all their test suites, ideally prior to checkin)\r\n3. Keep testing WinHttp & LibCurl handlers (e.g. change ManagedHandler Http test suite to PlatformHandler Http test suite)\r\n\r\ncc @geoffkizer "},{"Id":"7397712195","Type":"PullRequestEvent","CreatedAt":"2018-03-19T01:01:49","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28187","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview3-26318-03, preview3-26318-03, respectively (master)\" (#28187) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7398101553","Type":"PullRequestEvent","CreatedAt":"2018-03-19T03:53:47","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25583","RelatedDescription":"Opened pull request \"Use explicit type when not apparent or intrinsic\" (#25583) at dotnet/roslyn","RelatedBody":"Setting `csharp_style_var_elsewhere = false:warning` preference for compiler (so that it doesn't interfere with work-in-progress) and applying fix all.\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7398081155","Type":"IssuesEvent","CreatedAt":"2018-03-19T03:45:07","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25582","RelatedDescription":"Opened issue \"Enhance Change Signature to allow promotion of return value to out ref parameter\" (#25582) at dotnet/roslyn","RelatedBody":"Given a function that returns a value, allow me to promote the return value to an out parameter in Change Signature.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/206947/enhance-change-signature-to-allow-promotion-of-ret.html\nVSTS ticketId: 576042_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7398078563","Type":"PullRequestEvent","CreatedAt":"2018-03-19T03:43:59","Actor":"skynetv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25581","RelatedDescription":"Opened pull request \"fix broken link\" (#25581) at dotnet/roslyn","RelatedBody":"C# 7.3 proposals have been moved to sub folder\r\n"},{"Id":"7398073923","Type":"IssuesEvent","CreatedAt":"2018-03-19T03:42:06","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25580","RelatedDescription":"Opened issue \"Change Signature dialog provides no keyboard accelerator for OK button\" (#25580) at dotnet/roslyn","RelatedBody":"When using Change Signature to add parameters, the Change Signature dialog has no accelerator for the OK button.  This means I have to leave the keyboard and use the mouse or press TAB an inordinate number of times to get to the button.  It should have a keyboard accelerator (&amp;O) or it should have the default dialog accept focus.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/206935/change-signature-dialog-provides-no-keyboard-accel.html\nVSTS ticketId: 576033_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7398016179","Type":"PullRequestEvent","CreatedAt":"2018-03-19T03:18:05","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25579","RelatedDescription":"Opened pull request \"Add an additional parenthesis option for cast-expressions.\" (#25579) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/21316 depending on the resolution of https://github.com/dotnet/roslyn/pull/21316#issuecomment-374069448"},{"Id":"7397974298","Type":"IssuesEvent","CreatedAt":"2018-03-19T03:01:00","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25578","RelatedDescription":"Opened issue \"Intellisense falsely reports method is hiding other derived method.\" (#25578) at dotnet/roslyn","RelatedBody":"Example:\nclass A {\n    public void Scream()\n    {\n        Console.WriteLine(&quot;Error&quot;);\n    }\n}\n\nclass B : A\n{\n    private void Scream() //squiggle says I'm hiding it\n    {\n        Console.WriteLine(&quot;Error Hidden&quot;);\n    }\n}\n\nnew I().Scream() // prints Error aka A.Scream !\nWhich means it's not hidden, then why itellisense warns of hiding it?\n\nThe access modifier is changed, so I'm not hiding it, right?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/213059/intellisense-falsely-reports-method-is-hiding-othe.html\nVSTS ticketId: 580864_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7397861207","Type":"IssuesEvent","CreatedAt":"2018-03-19T02:13:45","Actor":"NMSAzulX","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25577","RelatedDescription":"Opened issue \"Error CS1902. How can I solve it?\" (#25577) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n.NET Framework 4.6\r\n\r\nCSC : error CS1902: Invalid option 'portable' for /debug; must be full or pdbonly [/vsts/agent/_work/1/s/MajorHazard.MonitorWarning.WebApi/MajorHazard.MonitorWarning.WebApi.csproj]\r\n"},{"Id":"7397815038","Type":"PullRequestEvent","CreatedAt":"2018-03-19T01:52:57","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25536","RelatedDescription":"Merged pull request \"Merge dev15.7.x to dev15.7.x-vs-deps\" (#25536) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.7.x into dev15.7.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.7.x-to-dev15.7.x-vs-deps\ngit reset --hard upstream/dev15.7.x-vs-deps\ngit merge upstream/dev15.7.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.7.x-to-dev15.7.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7397813581","Type":"PullRequestEvent","CreatedAt":"2018-03-19T01:52:18","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25576","RelatedDescription":"Opened pull request \"Cherry pick #25551 into dev15.7.x\" (#25576) at dotnet/roslyn","RelatedBody":"Merging this into another branch so we can deliver it into dev15.7.x-vs-deps."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7397331625","Type":"PullRequestEvent","CreatedAt":"2018-03-18T21:08:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5569","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5569) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7397189144","Type":"PullRequestEvent","CreatedAt":"2018-03-18T19:46:45","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5569","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5569) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7396863591","Type":"PullRequestEvent","CreatedAt":"2018-03-18T16:37:10","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5568","RelatedDescription":"Opened pull request \"Typos\" (#5568) at dotnet/corert","RelatedBody":""},{"Id":"7395945504","Type":"PullRequestEvent","CreatedAt":"2018-03-18T05:29:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5566","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5566) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7395877284","Type":"IssuesEvent","CreatedAt":"2018-03-18T04:20:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5567","RelatedDescription":"Opened issue \"objwriter build breaks in dwarfAbbrev.cpp\" (#5567) at dotnet/corert","RelatedBody":"I am getting these build errors while building objwriter using instructions from https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-ObjectWriter.md :\r\n\r\n```\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:42:33: error: non-constant-expression cannot be narrowed from type 'llvm::dwarf::Form' to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_stmt_list, (DwarfVersion >= 4 ? dwarf::DW_FORM_sec_offset : dwarf::DW_FORM_data4),\r\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:42:33: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_stmt_list, (DwarfVersion >= 4 ? dwarf::DW_FORM_sec_offset : dwarf::DW_FORM_data4),\r\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                                static_cast<char>(                                                    )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:93:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:93:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:102:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:102:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:259:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:259:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:265:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:265:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:271:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:271:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n6 errors generated.\r\nmake[3]: *** [tools/ObjWriter/CMakeFiles/objwriter.dir/debugInfo/dwarf/dwarfAbbrev.cpp.o] Error 1\r\n```"},{"Id":"7395625728","Type":"PullRequestEvent","CreatedAt":"2018-03-18T00:31:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5566","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5566) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7395577246","Type":"PullRequestEvent","CreatedAt":"2018-03-17T23:47:25","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5565","RelatedDescription":"Opened pull request \"Make Server GC component optional\" (#5565) at dotnet/corert","RelatedBody":"Make the Server GC an optional component by building two flavors of the runtime and selecting a specific one in the build via the `ServerGarbageCollection` MSBuild property. Don't build the Server GC flavor for Web Assembly.\r\n\r\nFixes #5182, Fixes #5306."},{"Id":"7395306020","Type":"IssuesEvent","CreatedAt":"2018-03-17T20:24:12","Actor":"sgf","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5564","RelatedDescription":"Opened issue \"Could be let the compiled output be smaller?\" (#5564) at dotnet/corert","RelatedBody":"its too big now,\r\n\r\nwhen  im testing a hello world with webapi Program,\r\nthe last output filesize need **21mb+.**\r\nwhen im create a HelloWorld Program,\r\nthe last output file size got about **3.86mb.**\r\n\r\n**oh my god,im just want it say hello,But its carry such a heavy burden.**\r\n\r\n_even golang or dlang is much more smaller._\r\n\r\nthats too big,any chance to let them smaller?\r\n\r\n\r\n"},{"Id":"7395203867","Type":"PullRequestEvent","CreatedAt":"2018-03-17T19:18:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5563","RelatedDescription":"Merged pull request \"Fix warning, add assert\" (#5563) at dotnet/corert","RelatedBody":""},{"Id":"7395105982","Type":"PullRequestEvent","CreatedAt":"2018-03-17T18:17:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5563","RelatedDescription":"Opened pull request \"Fix warning, add assert\" (#5563) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7393674586","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:34:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2039","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1.4982 into sdk\" (#2039) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1.4982 into sdk release/2.1.2xx branch"},{"Id":"7393532481","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:28:48","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2040","RelatedDescription":"Merged pull request \"Support filtering satellite assemblies from publish via SatelliteResourceLanguages property\" (#2040) at dotnet/sdk","RelatedBody":"Fixes #774\r\n\r\nThanks to @wli3 for pairing on this."},{"Id":"7393487364","Type":"IssuesEvent","CreatedAt":"2018-03-16T23:11:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2061","RelatedDescription":"Opened issue \"Instead of generating an error saying a 2.x SDK is needed, we generate an error loading the NETBuildExtensionsError task\" (#2061) at dotnet/sdk","RelatedBody":"# Repro steps\r\n\r\nCheck out the `build_fail` branch of https://github.com/multiarc/SDKRepro/\r\n\r\nBuild with full Framework MSBuild:\r\n\r\n`msbuild /restore`\r\n\r\n# Expected\r\n\r\nError message: The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK.\r\n\r\n# Actual\r\n\r\nError message:\r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets(65,5): error MSB4062: The \"NETBuildExtensionsError\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\\\tools\\net46\\Microsoft.NET.Build.Extensions.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n>\r\n> C:\\Program Files\\dotnet\\sdk\\1.1.7\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(92,5): Cannot find project info for 'C:\\git\\repro\\2045-Pagination\\src\\B\\B.csproj'. This can indicate a missing project reference. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n\r\n# Root cause\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll no longer includes the `NETBuildExtensionsError` task.  Instead it includes the `NETSdkError` task.  This is because the `DefineConstants` property in the project is no longer applying because it was moved before the `Sdk.props` import, and there is a `DefineConstants` in repo toolset that is overriding it.\r\n\r\n# Meme\r\n\r\n![image](https://user-images.githubusercontent.com/145043/37548198-77a0bbe0-2933-11e8-8af4-4b48dda6ebac.png)\r\n"},{"Id":"7393090287","Type":"PullRequestEvent","CreatedAt":"2018-03-16T21:10:15","Actor":"ericstj","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2060","RelatedDescription":"Opened pull request \"Fix package override resolver desktop\" (#2060) at dotnet/sdk","RelatedBody":"In desktop projects the PackageOverrideResolver was throwing ArgumentNullException due to \r\none item coming from a package and the other not.\r\n\r\nMoreover I noticed that the one that was thought to come from a package was actually a platform item\r\nand the reason we thought it came from a package was that I had a *.nuspec in the root of the drive where I was building from.\r\n\r\nWe need tests to cover these cases.\r\n\r\nFixes #1854"},{"Id":"7392911058","Type":"PullRequestEvent","CreatedAt":"2018-03-16T20:27:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2059","RelatedDescription":"Opened pull request \"Merge master into release/2.1.3xx\" (#2059) at dotnet/sdk","RelatedBody":"This was a clean merge."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"975544139893825536","CreatedAt":"2018-03-19T01:27:02+00:00","UserScreenname":"dotnet","Text":"We agree with this sentiment very much! We often retweet blog posts that came to our attention. While it doesn't im… https://t.co/GtFpUrShX8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974694823067246592","CreatedAt":"2018-03-16T17:12:09+00:00","UserScreenname":"dotnet","Text":"Check out the latest On .NET show with @jeremylikness &amp; @jplane talking .NET Core and containers. #dotnetcore https://t.co/NfFbKIsLTw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":17,"RawContent":null},{"Id":"974414421245095936","CreatedAt":"2018-03-15T22:37:56+00:00","UserScreenname":"dotnet","Text":"Transport Layer Security (TLS) best practices with the .NET Framework article published https://t.co/SbAZXvK8n7 #security","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":186,"FavoriteCount":91,"RawContent":null},{"Id":"974274431127302145","CreatedAt":"2018-03-15T13:21:40+00:00","UserScreenname":"dotnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/WyBUY4oGYv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"974176533270036480","CreatedAt":"2018-03-15T06:52:39+00:00","UserScreenname":"dotnet","Text":"Exciting news! https://t.co/wgCtuUTXcr","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":69,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-03-19T05:30:20.9651642Z","RunDurationInMilliseconds":7776}