{"Data":{"GitHub":{"Issues":[{"Id":"545803654","IsPullRequest":true,"CreatedAt":"2020-01-07T04:28:47","Actor":"hughbe","Number":"2640","RawContent":null,"Title":"Cleanup TBM and TBS constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup TBM and TBS constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2640)","Url":"https://github.com/dotnet/winforms/pull/2640","RelatedDescription":"Closed or merged PR \"Cleanup TBM and TBS constants\" (#2640)"},{"Id":"545853675","IsPullRequest":false,"CreatedAt":"2020-01-07T03:31:36","Actor":"Logerfo","Number":"2643","RawContent":null,"Title":"Null reference types for the Windows Forms API surface","State":"closed","Body":"I think this isn't tracked yet. Any projections or concerns?","Url":"https://github.com/dotnet/winforms/issues/2643","RelatedDescription":"Closed issue \"Null reference types for the Windows Forms API surface\" (#2643)"},{"Id":"546046377","IsPullRequest":true,"CreatedAt":"2020-01-07T02:58:18","Actor":"RussKie","Number":"2652","RawContent":null,"Title":"Fix missing reference","State":"closed","Body":"Our downstream consumers are broken missing System.Windows.Forms.Primitives.dll, e.g. https://github.com/dotnet/wpf/pull/2399\r\n\r\nFollow up for #2518\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2652)","Url":"https://github.com/dotnet/winforms/pull/2652","RelatedDescription":"Closed or merged PR \"Fix missing reference\" (#2652)"},{"Id":"545991190","IsPullRequest":true,"CreatedAt":"2020-01-07T02:22:11","Actor":"hughbe","Number":"2649","RawContent":null,"Title":"Cleanup MOUSEHOOKSTRUCT","State":"closed","Body":"## Proposed Changes\r\n- Cleanup MOUSEHOOKSTRUCT\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2649)","Url":"https://github.com/dotnet/winforms/pull/2649","RelatedDescription":"Closed or merged PR \"Cleanup MOUSEHOOKSTRUCT\" (#2649)"},{"Id":"546001180","IsPullRequest":true,"CreatedAt":"2020-01-07T02:21:12","Actor":"AArnott","Number":"2651","RawContent":null,"Title":"Enable several whitespace StyleCop rules","State":"closed","Body":"Mostly the rules are around blank line placement. But I also enabled the 'no trailing whitespace' rule and 'use tabs properly' rules. All changes to code were the result of automated code fixes from the analyzers.\r\n\r\nAs previously agreed with @RussKie \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2651)","Url":"https://github.com/dotnet/winforms/pull/2651","RelatedDescription":"Closed or merged PR \"Enable several whitespace StyleCop rules\" (#2651)"},{"Id":"545995407","IsPullRequest":true,"CreatedAt":"2020-01-07T00:33:23","Actor":"AArnott","Number":"2650","RawContent":null,"Title":"Add MenuCommandService","State":"closed","Body":"## Proposed changes\r\n\r\n- Add `MenuCommandService` and a few dependency types that are already identified as missing yet required for .NET 5.\r\n\r\n## Test methodology \r\n\r\n- No tests have been ported (yet)\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2650)","Url":"https://github.com/dotnet/winforms/pull/2650","RelatedDescription":"Closed or merged PR \"Add MenuCommandService\" (#2650)"},{"Id":"545727048","IsPullRequest":true,"CreatedAt":"2020-01-06T23:27:40","Actor":"dotnet-maestro[bot]","Number":"2638","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200105.4\r\n- **Date Produced**: 1/6/2020 6:59 AM\r\n- **Commit**: 5b968685ce89f9dddf49e9aa3aa0608820a585aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20055.4\r\n\r\n[marker]: <> (End:be4b0f38-c1d5-43ab-c5d9-08d76fa9c820)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Resources.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2638)","Url":"https://github.com/dotnet/winforms/pull/2638","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#2638)"},{"Id":"545981104","IsPullRequest":true,"CreatedAt":"2020-01-06T23:26:25","Actor":"dagood","Number":"2647","RawContent":null,"Title":"[master] [patched] Update dependencies from dotnet/runtime","State":"closed","Body":"https://github.com/dotnet/winforms/pull/2638 plus a breaking change fix (https://github.com/dotnet/runtime/issues/1338). Filing as a separate PR to get CI running ASAP. (I also don't have permissions to update the existing PR.)\r\n\r\n> This pull request updates the following dependencies\r\n> \r\n> ## From https://github.com/dotnet/runtime\r\n> * **Build**: 20200105.4\r\n> * **Date Produced**: 1/6/2020 6:59 AM\r\n> * **Commit**: 5b968685ce89f9dddf49e9aa3aa0608820a585aa\r\n> * **Branch**: refs/heads/master\r\n> * **Updates**:\r\n>   * **Microsoft.NETCore.App** -> 5.0.0-alpha.1.20055.4\r\n> \r\n> ## Coherency Updates\r\n> The following updates ensure that dependencies with a _CoherentParentDependency_\r\n> attribute were produced in a build used as input to the parent dependency's build.\r\n> See [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n> \r\n> * **Microsoft.NETCore.Platforms** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.Win32.Registry** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.Win32.SystemEvents** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.CodeDom** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Configuration.ConfigurationManager** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Drawing.Common** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Resources.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Security.Cryptography.Cng** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Security.Permissions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **System.Windows.Extensions** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n> * **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha.1.20055.4 (parent: Microsoft.NETCore.App)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2647)","Url":"https://github.com/dotnet/winforms/pull/2647","RelatedDescription":"Closed or merged PR \"[master] [patched] Update dependencies from dotnet/runtime\" (#2647)"},{"Id":"545988359","IsPullRequest":true,"CreatedAt":"2020-01-06T23:11:23","Actor":"hughbe","Number":"2648","RawContent":null,"Title":"Cleanup NMHEADERW interop","State":"open","Body":"## Proposed Changes\r\n- Cleanup NMHEADERW interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2648)","Url":"https://github.com/dotnet/winforms/pull/2648","RelatedDescription":"Open PR \"Cleanup NMHEADERW interop\" (#2648)"},{"Id":"545980993","IsPullRequest":true,"CreatedAt":"2020-01-06T22:48:48","Actor":"hughbe","Number":"2646","RawContent":null,"Title":"[WIP/Experiment]: Enable nullability in BindingContext","State":"open","Body":"## Proposed Changes\r\n- Enable nullability in BindingContext\r\n- Make `ICollection.SyncRoot` return non-null value\r\n\r\n## TODO\r\nWe have the following warnings\r\n> System/Windows/Forms/BindingContext.cs(377,38): warning CS8605: Unboxing a possibly null value. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\nSystem/Windows/Forms/BindingContext.cs(379,38): warning CS8600: Converting null literal or possible null value to non-nullable type. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\nSystem/Windows/Forms/BindingContext.cs(380,21): warning CS8602: Dereference of a possibly null reference. [/Users/hugh/Documents/GitHub/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\n    3 Warning(s)\r\n\r\nHappens in cases like below in `foreach (DictionaryEntry de in _listManagers)`, how are we unboxing a possibly null value\r\n```cs\r\nprivate void ScrubWeakRefs()\r\n{\r\n    List<object>? cleanupList = null;\r\n    foreach (DictionaryEntry de in _listManagers)\r\n    {\r\n        WeakReference wRef = (WeakReference)de.Value;\r\n        if (wRef.Target == null)\r\n        {\r\n            cleanupList ??= new List<object>();\r\n            cleanupList.Add(de.Key);\r\n        }\r\n    }\r\n\r\n    ...\r\n}\r\n```\r\n/cc @weltkante  \r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2646)","Url":"https://github.com/dotnet/winforms/pull/2646","RelatedDescription":"Open PR \"[WIP/Experiment]: Enable nullability in BindingContext\" (#2646)"},{"Id":"545972559","IsPullRequest":true,"CreatedAt":"2020-01-06T22:25:31","Actor":"hughbe","Number":"2645","RawContent":null,"Title":"Cleanup NMTTDISPINFOW interop","State":"open","Body":"## Proposed Changes\r\n- Cleanup NMTTDISPINFOW interop\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2645)","Url":"https://github.com/dotnet/winforms/pull/2645","RelatedDescription":"Open PR \"Cleanup NMTTDISPINFOW interop\" (#2645)"},{"Id":"545938755","IsPullRequest":false,"CreatedAt":"2020-01-06T21:04:33","Actor":"weltkante","Number":"2644","RawContent":null,"Title":"Proposal: implement generic IList<T> on collection types","State":"open","Body":"Historically WinForms existed before generic collections, and when generics were introduced the collection types in WinForms never were updated to implement the generic `IList<T>` interface. I think its time to revisit all collection types and implement `IList<T>` for an appropriate type `T`.\r\n\r\nFor maximum compatibility the `T` in `IList<T>` should match the already existing indexer on the collection type, because binding logic will currently orient itself on the indexer to determine the type of the list, but if you start implementing `IList<T>` it will prefer that over the indexer. To avoid changing how collection types behave during binding you should use the indexer type as `T`.\r\n\r\nSome advantages of implementing `IList<T>` in addition to `IList`:\r\n- using LINQ expressions can make use of additional optimizations - you could use LINQ on the existing `IList` collections by calling `Cast<T>()` or `OfType<T>()` first but this hides the type of the collection so LINQ cannot make use of e.g. `Count` or `CopyTo` interface methods.\r\n- `foreach` on an untyped list does implicit typecasts on every element - implementing the generic `IList<T>` avoids these\r\n- better integration with modern APIs and Analyzers which are more likely to be based on the generic `IList<T>`\r\n\r\nIt's nothing world-shattering, but the little things sometimes also can be nice.\r\n\r\nIf you have any compatibility concerns about adding the generic `IList<T>` to collections I'd be interested to know, I'm currently not aware of any.\r\n\r\n(I'll give this a week, if someone wants to grab it go ahead, its probably an easy way to get started contributing. Otherwise I'll create a WIP PR next week and see where it goes from there, see if any problems come up while implementing it. Sorry if this already has been suggested elsewhere, didn't see any issue though.)","Url":"https://github.com/dotnet/winforms/issues/2644","RelatedDescription":"Open issue \"Proposal: implement generic IList<T> on collection types\" (#2644)"},{"Id":"545823084","IsPullRequest":false,"CreatedAt":"2020-01-06T16:41:29","Actor":"hughbe","Number":"2642","RawContent":null,"Title":"Proposal: add SelectionStart and SelectionEnd to TrackBar","State":"open","Body":"You can set the `TBS_ENABLESELRANGE` on `TrackBar` and send the `TBM_SETSELSTART` and `TBM_SETSELSTART` to set the selection range\r\nSee docs\r\n- https://docs.microsoft.com/en-us/windows/win32/controls/tbm-setselstart\r\n- https://docs.microsoft.com/en-us/windows/win32/controls/tbm-setselend\r\n\r\nExample:\r\n![Screenshot 2020-01-06 at 16 31 38](https://user-images.githubusercontent.com/1275900/71832306-958b7000-30a2-11ea-93df-019c0e929f3c.png)\r\n![Screen Recording 2020-01-06 at 04 32 pm](https://user-images.githubusercontent.com/1275900/71832296-915f5280-30a2-11ea-9ca2-24b47d3d35b8.gif)\r\n\r\nWe could add the following APIs to `TrackBar`:\r\n```cs\r\npublic class TrackBar\r\n{\r\n    ...\r\n    public bool ShowSelectionRange { get; set; }\r\n    public int SelectionStart { get; set; }\r\n    public int SelectionEnd { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n## Discussion\r\n- What should the default values of `SelectionStart` and `SelectionEnd` be if we haven't enabled selections? In my experiments I set them to `0` which worked nicely.\r\n- In my prototype implementation, I set `ShowSelectionRange` to `true` if the user sets `SelectionStart`/`SelectionEnd`. One option could be to remove `ShowSelectionRange` and set `SelectionStart`/`SelectionEnd` to minus one or have some logic that sets the `TrackBar` style to `TBS_ENABLESELRANGE` if it is set to a custom value. However, this is negative as it leaves us with no way of removing the selection indicators once they've been created.\r\n- Do we want `SelectionStart` and `SelectionEnd` or `SelectionStart` and `SelectionLength` or some sort of `SelectionRange` struct that encapsulates this? (e.g `MonthCalendar.SelectionRange`)","Url":"https://github.com/dotnet/winforms/issues/2642","RelatedDescription":"Open issue \"Proposal: add SelectionStart and SelectionEnd to TrackBar\" (#2642)"},{"Id":"545821569","IsPullRequest":false,"CreatedAt":"2020-01-06T16:38:24","Actor":"sae42","Number":"2641","RawContent":null,"Title":"Support third-party languages with .NET Core WinForms Designer","State":"open","Body":"* .NET Core Version: 3.1\r\n* Visual Studio 2019 16.5 Preview 1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** Unable to use .NET Core Win Forms Designer with third-party languages\r\n\r\nI'm not sure if this is the correct place to raise issues related to the Visual Studio .NET Core Win Forms designer, but I wanted to get some visibility into enabling support for third-party languages. Many VSIP language vendor partners spent a lot of time and effort into supporting the .NET Framework Win Form designer and at some point in the future customers that have .NET Framework Win Forms applications will want to move to .NET Core (.NET 5). It would be good if the new designer package could avoid hard-coded checks for project types which appears to be the cause of this particular issue. In the .NET Framework designer, the third-party project system can provide support for the language CodeDomProvider which doesn't appear possible with the current designer.\r\n\r\n\r\n**Actual behavior:**\r\n\r\nIssue occurs due to hard coded project type checks (for C#/VB) in get_Provider():\r\n\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.Private.VSCodeDomDocDataAdapter.Provider.get()\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Shell.Design.Serialization.CodeDom.Private.VSCodeDomDocDataAdapter.CompileUnit.get()\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager serializationManager)\tUnknown\r\n \tMicrosoft.VisualStudio.WinForms.Package.dll!Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(int fReload)\tUnknown\r\n\r\n\r\n**Expected behavior:**\r\n\r\nSupport for third-party language integration by using the language supplied CodeDomProvider\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2641","RelatedDescription":"Open issue \"Support third-party languages with .NET Core WinForms Designer\" (#2641)"},{"Id":"545767035","IsPullRequest":true,"CreatedAt":"2020-01-06T14:52:41","Actor":"kpreisser","Number":"2639","RawContent":null,"Title":"Improve performance (and memory usage) of Enum*Windows() interop functions","State":"open","Body":"## Proposed changes\r\n\r\nIn `EnumWindows`, `EnumChildWindows`, and `EnumThreadWindows`, instead of passing the supplied callback delegate to the native function, use a (fixed) static delegate, and specify a handle pointer of the supplied callback in the `lParam` parameter (that is available for storing application-provided data).\r\n\r\nThat way, the CLR no longer needs to allocate memory for each delegate instance in order to store a native code block (that contains the closure pointer), thus improving performance and memory usage (see comparison below).\r\n\r\n(This might also improve speed when running x86 applications on ARM64 systems, as it avoids the need for the emulation layer to generate new ARM64 code from the x86 code every time the function is invoked. However, I haven't actually compared performance on an ARM64 system.)\r\n\r\nNote: In `Form.RecreateHandleCore` there was a call to `EnumThreadWindows` where the form handle was passed as `lParam` data, but I think it makes more sense to store it in the callback closure since a new instance of the delegate is created anyway.\r\n\r\nNote: I'm not sure about the naming/placement of the delegate types. In the native declarations, all functions use `WNDENUMPROC` as callback type.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Better performance and reduced memory footprint when using code that calls `EnumWindows`, `EnumChildWindows` or `EnumThreadWindows`.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n-\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing using a code like this (for `EnumChildWindows`):\r\n```c#\r\n    class Program\r\n    {\r\n        [STAThread]\r\n        private static void Main()\r\n        {\r\n            var f = new Form();\r\n            f.Controls.Add(new Button());\r\n            f.Controls.Add(new CheckBox());\r\n            f.Controls.Add(new RadioButton());\r\n\r\n            var handle = f.Handle;\r\n\r\n            f.Show();\r\n\r\n            var sw = new Stopwatch();\r\n            for (int i = -5; i < 100000; i++)\r\n            {\r\n                if (i == 0)\r\n                    sw.Start();\r\n\r\n                Interop.User32.EnumChildWindows(\r\n                    handle, new EnumChildWindowsTest().HandleCallback);\r\n            }\r\n            sw.Stop();\r\n            f.Close();\r\n            f.Dispose();\r\n            Console.WriteLine(\"Elapsed: \" + sw.ElapsedMilliseconds);            \r\n        }\r\n\r\n        private class EnumChildWindowsTest\r\n        {\r\n            private int count;\r\n\r\n            public Interop.BOOL HandleCallback(IntPtr hWnd)\r\n            {\r\n                count++;\r\n                return Interop.BOOL.TRUE;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Average time:**\r\nBefore: ~400 ms\r\nAfter: ~280 ms\r\n\r\nFor `EnumWindows`, I didn't measure much difference, probably due to the huge number of windows that are passed to the callback.\r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-016073\r\n Commit:    bd7bf8c6d2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-016073\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.19564.1\r\n  Commit:  c77948d92a\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-alpha1-016073 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2639)","Url":"https://github.com/dotnet/winforms/pull/2639","RelatedDescription":"Open PR \"Improve performance (and memory usage) of Enum*Windows() interop functions\" (#2639)"},{"Id":"545523387","IsPullRequest":false,"CreatedAt":"2020-01-06T03:42:19","Actor":"paul1956","Number":"2637","RawContent":null,"Title":"VB AssemblyInfo.Info.Title is not the same in Framework and Core","State":"open","Body":"* .NET Core Version: Master\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nIn Framework the Title is a human readable string set in Visual Studio/Project/Application/Assembly Information Title property. In Core it is AssemblyTitleAttribute which comes from the Assembly name and not something the user can change (without effecting the application)\r\n**Actual behavior:**\r\nYou get \"WindowsApp2Framework\"\r\n![image](https://user-images.githubusercontent.com/12789369/71793202-b2676b00-2ff0-11ea-8a95-343569758112.png)\r\n**Expected behavior:**\r\n\"Windows App 2 Framework\"\r\nSomething the user enters in a Title field. This filed is what is displayed by About and Splash Screens. There is a Product field already which may have the correct information but not used in existing Form templates.\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/2637","RelatedDescription":"Open issue \"VB AssemblyInfo.Info.Title is not the same in Framework and Core\" (#2637)"},{"Id":"545343450","IsPullRequest":true,"CreatedAt":"2020-01-06T01:01:23","Actor":"hughbe","Number":"2632","RawContent":null,"Title":"Cleanup TCN constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup TCN constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2632)","Url":"https://github.com/dotnet/winforms/pull/2632","RelatedDescription":"Closed or merged PR \"Cleanup TCN constants\" (#2632)"},{"Id":"545315009","IsPullRequest":true,"CreatedAt":"2020-01-06T00:46:06","Actor":"hughbe","Number":"2626","RawContent":null,"Title":"Cleanup NM_ constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup NM_ constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2626)","Url":"https://github.com/dotnet/winforms/pull/2626","RelatedDescription":"Closed or merged PR \"Cleanup NM_ constants\" (#2626)"},{"Id":"545405196","IsPullRequest":true,"CreatedAt":"2020-01-06T00:44:32","Actor":"hughbe","Number":"2634","RawContent":null,"Title":"Cleanup some Menu interop","State":"closed","Body":"## Proposed Changes\r\n- Cleanup some Menu interop\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2634)","Url":"https://github.com/dotnet/winforms/pull/2634","RelatedDescription":"Closed or merged PR \"Cleanup some Menu interop\" (#2634)"},{"Id":"545408822","IsPullRequest":true,"CreatedAt":"2020-01-06T00:40:59","Actor":"hughbe","Number":"2635","RawContent":null,"Title":"Cleanup ERROR_ constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup ERROR_ constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2635)","Url":"https://github.com/dotnet/winforms/pull/2635","RelatedDescription":"Closed or merged PR \"Cleanup ERROR_ constants\" (#2635)"},{"Id":"545343445","IsPullRequest":true,"CreatedAt":"2020-01-06T00:39:54","Actor":"hughbe","Number":"2631","RawContent":null,"Title":"Cleanup TTN_ constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup TTN_ constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2631)","Url":"https://github.com/dotnet/winforms/pull/2631","RelatedDescription":"Closed or merged PR \"Cleanup TTN_ constants\" (#2631)"},{"Id":"545344576","IsPullRequest":true,"CreatedAt":"2020-01-06T00:30:16","Actor":"hughbe","Number":"2633","RawContent":null,"Title":"Cleanup IPersist interface and related interfaces","State":"closed","Body":"## Proposed Changes\r\n- Cleanup IPersist interface and related interfaces\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2633)","Url":"https://github.com/dotnet/winforms/pull/2633","RelatedDescription":"Closed or merged PR \"Cleanup IPersist interface and related interfaces\" (#2633)"},{"Id":"545338851","IsPullRequest":true,"CreatedAt":"2020-01-05T23:36:16","Actor":"hughbe","Number":"2628","RawContent":null,"Title":"Cleanup HDM constants","State":"closed","Body":"## Proposed Changes\r\n- Cleanup HDM constants\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2628)","Url":"https://github.com/dotnet/winforms/pull/2628","RelatedDescription":"Closed or merged PR \"Cleanup HDM constants\" (#2628)"},{"Id":"545473171","IsPullRequest":false,"CreatedAt":"2020-01-05T22:04:23","Actor":"areller","Number":"2636","RawContent":null,"Title":"Build for System.Windows.Forms fails in Ubuntu","State":"open","Body":"* .NET Core Version: 3.1.100\r\n* Have you experienced this same bug with .NET Framework?: No (Didn't try, running on Ubuntu)\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nI run Ubuntu18.04.3 with .NET Core 3.1.100.\r\nI use the `release/3.1` branch\r\nWhen I try to run `dotnet build` from the `src/System.Windows.Forms/src` directory, it fails with this message,  \r\n\r\n```\r\nCSC : error CS1566: Error reading resource 'System.Windows.Forms.Arrow' -- 'Could not find file '/home/areller/playground/winforms/src/System.Windows.Forms/src/Resources/System/Windows/Forms/PropertyGrid/Arrow.ico'.' [/home/areller/playground/winforms/src/System.Windows.Forms/src/System.Windows.Forms.csproj]\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/15989650/71786717-582dd080-3017-11ea-823a-0efcdf5d339c.png)\r\n\r\n\r\n\r\n**Actual behavior:** `dotnet build` fails (see above) <!-- callstack for crashes / exceptions -->  \r\nIt seems that it can't find some resource (`Arrow.ico`), but this resource exists when I open it directly, and the build works on other systems (Windows and macOS).\r\n\r\n**Expected behavior:** `dotnet build` should work  \r\nThis is a screenshot of it working on macOS 10.14.6\r\n\r\n![image](https://user-images.githubusercontent.com/15989650/71786735-a8a52e00-3017-11ea-9f7d-a8c11f244961.png)\r\n\r\nI know that _winforms_ doesn't support Linux/macOS, but I want to experiment with it so I need it to build.\r\n","Url":"https://github.com/dotnet/winforms/issues/2636","RelatedDescription":"Open issue \"Build for System.Windows.Forms fails in Ubuntu\" (#2636)"},{"Id":"545341907","IsPullRequest":true,"CreatedAt":"2020-01-04T22:50:05","Actor":"hughbe","Number":"2630","RawContent":null,"Title":"Cleanup MonthCalendar interop definitions","State":"open","Body":"## Proposed Changes\r\n- Make `MCGRIDINFO` blittable by using `Span`\r\n- Cleanup `MCHITTESTINFO` interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2630)","Url":"https://github.com/dotnet/winforms/pull/2630","RelatedDescription":"Open PR \"Cleanup MonthCalendar interop definitions\" (#2630)"},{"Id":"545340453","IsPullRequest":false,"CreatedAt":"2020-01-04T22:32:44","Actor":"hughbe","Number":"2629","RawContent":null,"Title":"ListViewHitTestLocations need to be updated for new ComCtl values","State":"open","Body":"# Problem\r\n- We're missing the following definitions from `ListViewHitTestLocations`. These should be added to the public enum because currently we may have unknown values in `ListView.HitTest`\r\n\r\nName | Description\r\n----- | -----\r\nLVHT_EX_GROUP_HEADER | Windows Vista. The point is within the group header.\r\nLVHT_EX_GROUP_FOOTER | Windows Vista. The point is within the group footer.\r\nLVHT_EX_GROUP_COLLAPSE | Windows Vista. The point is within the collapse/expand button of the group.\r\nLVHT_EX_GROUP_BACKGROUND | Windows Vista. The point is within the area of the group where items are displayed.\r\nLVHT_EX_GROUP_STATEICON | Windows Vista. The point is within the state icon of the group.\r\nLVHT_EX_GROUP_SUBSETLINK | Windows Vista. The point is within the subset link of the group.\r\nLVHT_EX_GROUP | Windows Vista. LVHT_EX_GROUP_BACKGROUND \\| LVHT_EX_GROUP_COLLAPSE \\| LVHT_EX_GROUP_FOOTER \\| LVHT_EX_GROUP_HEADER \\| LVHT_EX_GROUP_STATEICON \\| LVHT_EX_GROUP_SUBSETLINK.\r\nLVHT_EX_ONCONTENTS | Windows Vista. The point is within the icon or text content of the item and not on the background.\r\nLVHT_EX_FOOTER","Url":"https://github.com/dotnet/winforms/issues/2629","RelatedDescription":"Open issue \"ListViewHitTestLocations need to be updated for new ComCtl values\" (#2629)"},{"Id":"545333610","IsPullRequest":false,"CreatedAt":"2020-01-04T21:18:42","Actor":"hughbe","Number":"2627","RawContent":null,"Title":"Discussion/proposal: add more LVCOLUMN ComCtl 6.0 features","State":"open","Body":"In Windows Vista, more `LVCOLUMN` features were added: see https://docs.microsoft.com/en-us/windows/win32/api/commctrl/ns-commctrl-lvcolumnw\r\n\r\n# Missing Features\r\n## Minimum Width\r\n- Can set the `LVCF_MINWIDTH` flag on `mask` and set the `cxMin` value\r\n\r\nWould add the following API on `ColumnHeader`\r\n```cs\r\npublic class ColumnHeader\r\n{\r\n    ...\r\n    public int MinimumWidth { get; set; } = 0;\r\n    ...\r\n}\r\n```\r\n\r\nE.g. \r\nNotice that when resizing the column its minimum width is 100 pixels\r\n![Screen Recording 2020-01-04 at 08 25 pm](https://user-images.githubusercontent.com/1275900/71771272-5806d580-2f30-11ea-9176-93d66c29df51.gif)\r\n\r\n## Fixed Width Columns\r\n- Can set the `LVCF_FMT` flag on `mask` an set the `LVCFMT_FIXED_WIDTH` flag on `fmt`\r\n\r\nWould add the following API on `ColumnHeader`\r\n```cs\r\npublic class ColumnHeader\r\n{\r\n    ...\r\n    public bool FixedWidth { get; set; } = false;\r\n    ...\r\n}\r\n```\r\nE.g.\r\nNotice that the column can't be resized\r\n![umn](https://user-images.githubusercontent.com/1275900/71771287-8f758200-2f30-11ea-97c9-91558019a16b.gif)\r\n\r\n## Split Button Columns\r\n- Can set the `LVCF_FMT` flag on `mask` an set the `LVCFMT_SPLITBUTTON` flag on `fmt`\r\n\r\nWould add the following API on `ListView` and `ColumnHeader`\r\n```cs\r\npublic class ColumnDropDownClickEventArgs : ColumnClickEventArgs\r\n{\r\n    public ColumnDropDownClickEventArgs(int column, Point screenLocation);\r\n    public Point ScreenLocation { get; set; }\r\n}\r\npublic class ListView\r\n{\r\n    ...\r\n    public event ColumnDropDownClickedEventHandler ColumnDropDownClicked { add; remove; }\r\n    protected void OnColumnDropDownClicked(ColumnDropDownClickEventArgs e);\r\n    ...\r\n}\r\npublic class ColumnHeader\r\n{\r\n    ...\r\n    public bool SplitButton { get; set; } = false;\r\n    ...\r\n}\r\n```\r\n\r\nE.g.\r\n![Screen Recording 2020-01-04 at 09 15 pm](https://user-images.githubusercontent.com/1275900/71771694-5c82bc80-2f37-11ea-88f6-687a589e146b.gif)\r\n\r\n\r\n# Discussion\r\n- Should we consolidate things like Split Button and Fixed width into a flags enum and add this as a property (e.g. `Style`) on `ColumnHeader`\r\n```cs\r\n[Flags]\r\npublic enum ColumnHeaderStyles\r\n{\r\n    None,\r\n    FixedWidth = X,\r\n    SplitButton = Y\r\n}\r\n```\r\n\r\n/cc @weltkante ","Url":"https://github.com/dotnet/winforms/issues/2627","RelatedDescription":"Open issue \"Discussion/proposal: add more LVCOLUMN ComCtl 6.0 features\" (#2627)"},{"Id":"545283772","IsPullRequest":false,"CreatedAt":"2020-01-04T13:13:19","Actor":"panost","Number":"2625","RawContent":null,"Title":"PropertyTab Bitmap icon","State":"open","Body":"* .NET Core Version: 3.1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:** Overriding a PropertyTab, you should provide an icon embedded resource without an \".ico\" extension or else an exception of ArgumentException is thrown\r\n\r\n**Actual behavior:** if you provide an embedded resource, with the same name as the class and extension \".ico\" an exception of ArgumentException is thrown\r\n\r\n**Expected behavior:** No exception, load the embedded icon resource\r\n\r\n**Cause:** This [line](https://github.com/dotnet/winforms/blob/ab6730e76538c28f598bbac2bb009725e9ab69bc/src/System.Windows.Forms/src/System/Windows/Forms/Design/PropertyTab.cs#L32) calls the DpiHelper.GetBitmapFromIcon, using the current type name without adding the \".ico\" extension. \r\n\r\n.NET Framework is not using icons but bitmaps and in the same method **adds** the \".bmp\" extension to the type name.\r\n","Url":"https://github.com/dotnet/winforms/issues/2625","RelatedDescription":"Open issue \"PropertyTab Bitmap icon\" (#2625)"},{"Id":"545282692","IsPullRequest":true,"CreatedAt":"2020-01-04T13:02:06","Actor":"dotnet-maestro[bot]","Number":"2624","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20200105.1\r\n- **Date Produced**: 1/5/2020 2:12 PM\r\n- **Commit**: 111d78c79ac38f596688af152779d7a39e4bf973\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.20055.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2624)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/2624","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#2624)"},{"Id":"545143949","IsPullRequest":false,"CreatedAt":"2020-01-03T20:11:21","Actor":"hughbe","Number":"2623","RawContent":null,"Title":"Discussion/Proposal: more ListViewGroup functionality","State":"open","Body":"# State of Play\r\n- Currently, `ListViewGroup` only supports `Header` and `HeaderAlignment` (although this is buggy, see #2555)\r\n- Our definition of `LVGROUPW` is actually too small: LVGROUP actually exposes a lot more functionality (https://docs.microsoft.com/en-us/windows/win32/api/commctrl/ns-commctrl-lvgroup)\r\n![image](https://user-images.githubusercontent.com/1275900/71745291-9d100680-2e61-11ea-8969-273d50457f55.png)\r\n\r\n# Missing Feature Parity\r\n- See http://www.componentowl.com/better-listview.html\r\n- See https://www.codeproject.com/Articles/16009/A-Much-Easier-to-Use-ListView-2\r\n- See https://msdn.microsoft.com/en-gb/msdnmag/issues/07/08/WindowsCPP/default.aspx\r\n\r\n## Support For Images\r\n- You can set the `LVSIL_GROUPHEADER` list view image list\r\n- You can set the `LVGF_TITLEIMAGE` flag on `mask` and set `iTitleImage` to a valid index into the `LVSIL_GROUPHEADER` image list\r\n\r\nThis would add the following APIs to `ListView` and `ListViewGroup`:\r\n```cs\r\npublic class ListView\r\n{\r\n    ...\r\n    public ImageList GroupHeaderImageList { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public int TitleImageIndex { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g.\r\n![image](https://user-images.githubusercontent.com/1275900/71745515-40f9b200-2e62-11ea-81cf-a97a9c4c4c27.png)\r\n\r\n## Footers\r\n- You can set the `LVGF_FOOTER` flag on `mask` and set `pszFooter` to a valid string and `cchFooter` to the length of the string\r\n- You can set the `LVGF_ALIGN` flag on `mask` and set the `uAlign` to a valid `LVGA_FOOTER_CENTER` value\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Footer { get; set; }\r\n    public HorizontalAlignment FooterAlignment { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g. \r\n![image](https://user-images.githubusercontent.com/1275900/71745879-66d38680-2e63-11ea-82f7-5381a58bd045.png)\r\n\r\n## Subtitles\r\n- You can set the `LVGF_SUBTITLE` flag on `mask` and set `pszSubtitle` to a valid string and `cchSubtitle` to the length of the string\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Subtitle { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g.\r\n![image](https://user-images.githubusercontent.com/1275900/71746055-d6497600-2e63-11ea-95ab-77cbcdc742cf.png)\r\n\r\n## Collapsible\r\n- Can set the `LVGF_STATE` flag on `uMask` and set `stateMask` to `LVGS_COLLAPSIBLE` and `state` to `LVGS_COLLAPSIBLE`\r\n- https://www.codeproject.com/Articles/31276/Add-Group-Collapse-Behavior-on-a-Listview-Control\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public bool Collapsible { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g. \r\n![Screen Recording 2020-01-03 at 08 10 pm](https://user-images.githubusercontent.com/1275900/71746568-2a088f00-2e65-11ea-9b9d-8f91815c5a8f.gif)\r\n\r\n### Discussion\r\n- The rightmost collapse/expand icon doesn't work: to fix this we need to call `base.WndProc` in `WM_LBUTTONUP` handler\r\n\r\n## Collapsed\r\n- Can set the `LVGF_STATE` flag on `uMask` and set `stateMask` to `LVGS_COLLAPSED` and `state` to `LVGS_COLLAPSED`\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public bool Collapsed { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g.\r\n![Screen Recording 2020-01-04 at 06 57 pm](https://user-images.githubusercontent.com/1275900/71770408-14a66a00-2f24-11ea-89a2-93a01b63cf00.gif)\r\n\r\n## HeaderVisible\r\n- Can set the `LVGF_STATE` flag on `uMask` and set `stateMask` to `LVGS_NOHEADER` and `state` to `LVGS_NOHEADER`\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public bool HeaderVisible { get; set; } = true;\r\n    ...\r\n}\r\n```\r\n\r\nE.g.\r\n![Screen Recording 2020-01-04 at 07 05 pm](https://user-images.githubusercontent.com/1275900/71770510-32c09a00-2f25-11ea-99da-158a88202451.gif)\r\n\r\n## Task\r\n- You can set the `LVGF_TASK` flag on `mask` and set `pszTask` to a valid string and `cchTask` to the length of the string\r\n\r\nThis would add the following APIs to `ListView` and `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string Task { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g. \r\n![Screen Recording 2020-01-04 at 07 01 pm](https://user-images.githubusercontent.com/1275900/71770473-b332cb00-2f24-11ea-9834-5695ec8bd1c2.gif)\r\n\r\n### Discussion\r\n- Needs some way to notify the us\r\ner that the task button was clicked: maybe some sort of `GroupLinkClicked` event on `ListView`\r\n\r\n## Description Top/Bottom\r\n- You can set the `LVGF_DESCRIPTIONTOP` flag on `mask` and set `pszDescriptionTop` to a valid string and `cchDescriptionTop` to the length of the string\r\n- You can set the `LVGF_DESCRIPTIONBOTTOM` flag on `mask` and set `pszDescriptionBottom` to a valid string and `cchDescriptionBottom` to the length of the string\r\n\r\nThis would add the following APIs to `ListViewGroup`:\r\n```cs\r\npublic class ListViewGroup\r\n{\r\n    ...\r\n    public string TopDescription { get; set; }\r\n    public string BottomDescription { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\nE.g. \r\n![image](https://user-images.githubusercontent.com/1275900/71770483-d52c4d80-2f24-11ea-8bd0-b9770886042d.png)\r\n\r\n/cc @weltkante @RussKie ","Url":"https://github.com/dotnet/winforms/issues/2623","RelatedDescription":"Open issue \"Discussion/Proposal: more ListViewGroup functionality\" (#2623)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-01-07T05:30:59.7521006Z","RunDurationInMilliseconds":781}