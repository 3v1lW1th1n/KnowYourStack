{"Data":{"Blog":{"FeedItems":[{"Title":"3 Big Things To Explore in the Xamarin.Forms 2.5.0 Pre-Release","PublishedOn":"2017-10-24T19:52:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Over the past year we’ve been working on a couple of &#8220;big things&#8221; that enable you to create more performant applications on more platforms. With our latest stable release, version 2.4.0, we introduced performance optimized renderers on Android, nicknamed Fast Renderers. While faster platform renderers are a clear win, you really start to see the big [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/3-big-things-explore-xamarin-forms-2-5-0-pre-release/\">3 Big Things To Explore in the Xamarin.Forms 2.5.0 Pre-Release</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/3-big-things-explore-xamarin-forms-2-5-0-pre-release/","RawContent":null},{"Title":"Five-Star Apps with Mobile Center Test","PublishedOn":"2017-10-20T12:33:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Five-star mobile apps are all about consistent and predictable output. It&#8217;s not a good experience for users when an app suddenly crashes or doesn’t format correctly on their mobile screens. Developers can easily avoid these scenarios by testing for various scenarios on different devices, and Visual Studio Mobile Center makes it easy to test your mobile [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/\">Five-Star Apps with Mobile Center Test</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/five-star-apps-with-visual-studio-mobile-center-test/","RawContent":null},{"Title":"Upcoming Webinar | Build Better Games with Unity and Microsoft Azure","PublishedOn":"2017-10-19T18:51:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Register now to join David Antognoli on Tuesday, November 7 at 9 am PT to learn how to take your Unity games to the next level with powerful cloud services. He’ll walk through how to connect your apps to Microsoft Azure, adding compelling features that users love, like leaderboards and heatmaps, and demo how new [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/\">Upcoming Webinar | Build Better Games with Unity and Microsoft Azure</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/upcoming-webinar-build-better-games-unity-microsoft-azure/","RawContent":null},{"Title":"Plugin and Permission Changes with iOS 11","PublishedOn":"2017-10-18T20:24:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>iOS 11 introduced some fun updates around permissions when accessing certain features on the device. I first noticed these changes when trying to access a user location with the Geolocator Plugin in a Xamarin.Forms application. To my surprise, nothing happened. Upon further investigation of the application&#8217;s Output, I noticed a message explaining exactly what I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/plugin-permission-changes-ios-11/\">Plugin and Permission Changes with iOS 11</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/plugin-permission-changes-ios-11/","RawContent":null},{"Title":"Adaptive UI with Xamarin.Forms","PublishedOn":"2017-10-16T20:58:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>Xamarin.Forms has supported iOS, Android, and Windows for a long time. We&#8217;ve also added new platforms to keep up with the changing landscape, such as Tizen and macOS, with Linux and Windows WPF on the horizon. These platforms run on a wide variety of devices including phones, tablets, desktops, and TVs. This presents an interesting [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/adaptive-ui-xamarin-forms/\">Adaptive UI with Xamarin.Forms</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/adaptive-ui-xamarin-forms/","RawContent":null},{"Title":"Give the Visual Studio 2017 Version 15.5 Preview a Try!","PublishedOn":"2017-10-13T20:06:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>With Visual Studio 2017 version 15.4 now stable and sporting some awesome new features, such as Xamarin Live integration, Android Oreo / iOS 11 support, and a smarter, smaller installation, it&#8217;s time to turn our attention to the next version of Visual Studio 2017, version 15.5! This upcoming release is now available as a preview [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/\">Give the Visual Studio 2017 Version 15.5 Preview a Try!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/give-visual-studio-2017-version-15-5-preview-try/","RawContent":null},{"Title":"Bring 3D Models To Life in Augmented Reality with UrhoSharp","PublishedOn":"2017-10-12T19:28:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>UrhoSharp brings 3D to a variety of platforms and uses its own binary mdl format for model files. There are many sources for 3D models, including cgtrader and TurboSquid, and formats such as FBX, OBJ, DAE and BLEND. Urho3D provides tools like AssetImporter and the Urho3D Blender Add-in so you can use these models. In [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/\">Bring 3D Models To Life in Augmented Reality with UrhoSharp</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/bring-3d-models-life-augmented-reality-urhosharp/","RawContent":null},{"Title":"Updating Xamarin.iOS Apps for the iPhone X","PublishedOn":"2017-10-11T18:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>There&#8217;s no doubt that one of the biggest announcements from Apple this year was the iPhone X. The new Super Retina display is edge-to-edge on the device, creating an immersive experience we had yet to see on iPhones. With the new screen changes on the iPhone X, developers may be asking themselves, &#8220;What do I [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/\">Updating Xamarin.iOS Apps for the iPhone X</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/updating-xamarin-ios-apps-for-the-iphone-x/","RawContent":null},{"Title":"Build and Release Five-Star Apps Faster","PublishedOn":"2017-10-10T17:49:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>The first step in the life of a mobile app is build automation, which builds the app and runs required tests to make sure the app follows required rules. Build automation is also the first step towards shipping high quality, five-star mobile apps. When building iOS and Android mobile applications, one of the main challenges [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/\">Build and Release Five-Star Apps Faster</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/build-and-release-five-star-apps-faster-with-visual-studio-mobile-center/","RawContent":null},{"Title":"Developing Real-Time Communication Apps with WebSocket","PublishedOn":"2017-10-09T21:17:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"<p>WebSockets is a two-way communication protocol, or persistence communication channel over TCP connection, an extremely powerful protocol leveraged by numerous games, apps with chat functionality, and real-time apps such as stock tickers. In this blog post, we&#8217;ll discuss how to build a simple Xamarin chat room application that will leverage and connect to an ASP.NET [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/\">Developing Real-Time Communication Apps with WebSocket</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.xamarin.com\">Xamarin Blog</a>.</p>\n","Href":"https://blog.xamarin.com/developing-real-time-communication-apps-with-websocket/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6761406688","Type":"PullRequestEvent","CreatedAt":"2017-10-25T01:32:42","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/973","RelatedDescription":"Opened pull request \"[tests] update NUnit to 3.7.1\" (#973) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/nunit/nunit/releases/tag/3.7.1\r\n\r\nThe release notes for NUnit 3.7.1 mention a hang with parallelized\r\ntests, so it is worth a try to see if updating fixes it.\r\n\r\nReverting 6687dac as well to see if we get a green build."},{"Id":"6760834882","Type":"PullRequestEvent","CreatedAt":"2017-10-24T22:10:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/972","RelatedDescription":"Merged pull request \"[tests] Use single NUnit worker to prevent hanging msbuild tests\" (#972) at xamarin/xamarin-android","RelatedBody":"The Xamarin.Android.Build.Tests msbuild tests recently started hanging after the tests were done.\r\n\r\nRun tests with a single worker as a workaround until we figure out why to unblock Jenkins."},{"Id":"6760767975","Type":"PullRequestEvent","CreatedAt":"2017-10-24T21:53:24","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/972","RelatedDescription":"Opened pull request \"[tests] Use single NUnit worker to prevent hanging msbuild tests\" (#972) at xamarin/xamarin-android","RelatedBody":"The Xamarin.Android.Build.Tests msbuild tests recently started hanging after the tests were done.\r\n\r\nRun tests with a single worker as a workaround until we figure out why to unblock Jenkins."},{"Id":"6760009684","Type":"PullRequestEvent","CreatedAt":"2017-10-24T19:04:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/971","RelatedDescription":"Merged pull request \"[xabuild] print config file to console on error\" (#971) at xamarin/xamarin-android","RelatedBody":"There are cases in which diagnostic MSBuild output is not including\r\nimportant information such as `$(MSBuildExtensionsPath)`.\r\n\r\nTo help debug situations like this, if `MSBuildApp.Main` returns a\r\nnon-zero exit code, we can print the contents of xabuild.exe's config\r\nfile to the console."},{"Id":"6759727636","Type":"PullRequestEvent","CreatedAt":"2017-10-24T18:06:29","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/971","RelatedDescription":"Opened pull request \"[xabuild] print config file to console on error\" (#971) at xamarin/xamarin-android","RelatedBody":"There are cases in which diagnostic MSBuild output is not including\r\nimportant information such as `$(MSBuildExtensionsPath)`.\r\n\r\nTo help debug situations like this, if `MSBuildApp.Main` returns a\r\nnon-zero exit code, we can print the contents of xabuild.exe's config\r\nfile to the console."},{"Id":"6759522298","Type":"PullRequestEvent","CreatedAt":"2017-10-24T17:23:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/967","RelatedDescription":"Closed pull request \"[XABuild] Work around the XABuild Config issue by creating it before the tests run.\" (#967) at xamarin/xamarin-android","RelatedBody":"We have a problem with multiple instances of xabuild trying to\r\ncreate/overrite a config file on each run. This causes all sorts\r\nor failures.\r\n\r\nSo let just force a call to xabuild before the tests run. We can\r\nthen skip the creation of the file as it already exists. The\r\nenvironment wont change between tests so there is no need to\r\nkeep creating this file over and over again."},{"Id":"6759518242","Type":"PullRequestEvent","CreatedAt":"2017-10-24T17:23:04","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/969","RelatedDescription":"Merged pull request \"[xabuild] use a temp file for xabuild's config\" (#969) at xamarin/xamarin-android","RelatedBody":"Context in #954 #964 #967\r\n\r\nThe Xamarin.Android.Build.Tests run xabuild.exe in parallel, which\r\nbrings up some interesting issues. xabuild.exe needs to overwrite a\r\nconfig file that is used by the `MSBuildApp` class. Several PRs\r\nwere made to try to address this issue.\r\n\r\nThis solution uses the `MSBUILD_EXE_PATH` environment variable, that\r\ngets MSBuild to load a temporary file for the config file. This allows\r\nmultiple xabuild.exe's to run in parallel without issue.\r\n\r\nPast attempts:\r\n- In #954, `EventWaitHandle` was used, which does not work when running\r\nunder Mono.\r\n- In #964, `FileStream` was used as an interprocess lock and `MSBuildApp`'s\r\nstatic ctor was forced to run during the lock. It wasn't ideal.\r\n- In #967, the config file was created before the tests run, and uses a\r\n`File.Exists` check. This approach would not work on Windows."},{"Id":"6759322677","Type":"PullRequestEvent","CreatedAt":"2017-10-24T16:43:10","Actor":"joj","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/963","RelatedDescription":"Closed pull request \"Made _ResolveLibraryProjectImports not work on design time\" (#963) at xamarin/xamarin-android","RelatedBody":"Having _ResolveLibraryProjectImports work on design time results in a\r\ncache file that doesn't include nuget packages (when using\r\nPackageReferences). Design time is most of the times too early (it\r\nhappens first immediately after unfold). Without this fix, the first\r\nbuild fails on the APT task because resources are not found. They are\r\nnot found because a cache already exists, so library imports are not\r\nprocessed again. And that cache is missing anything coming from nuget.\r\nAn alternative option is to remove that file on nuget restore. If that's\r\nbetter please close this non-merged and go for that :)"},{"Id":"6759193691","Type":"PullRequestEvent","CreatedAt":"2017-10-24T16:18:17","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/970","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix Type in the Xamarin.Android.Windows.targets\" (#970) at xamarin/xamarin-android","RelatedBody":"Commit 286b9c28 added extra items to the IncrementalClean ItemGroups.\r\nBut one of them omited the `$`. This commit fixes that issue."},{"Id":"6759152736","Type":"PullRequestEvent","CreatedAt":"2017-10-24T16:10:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/965","RelatedDescription":"Merged pull request \"[tests] Export `$USE_MSBUILD=$(USE_MSBUILD)`\" (#965) at xamarin/xamarin-android","RelatedBody":"Context: 286b9c28\r\nContext: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/700/testReport/\r\n\r\n`Xamarin.ProjectTools` was updated in commit 286b9c28 to use `msbuild`\r\n(via `xabuild`) when `$USE_MSBUILD` is *not* `0`, and to continue\r\nusing `xbuild` (the historical default!) when `$USE_MSBUILD` is `0`.\r\n\r\nUnfortunately, *nothing exports `$USE_MSBUILD`*. Consequently, we\r\n*always* use `msbuild`/`xabuild`, unless the calling environment\r\nexplicitly exports it (which isn't the case on Jenkins).\r\n\r\nUpdate the `RUN_NUNIT_TEST` make `define` so that the `$USE_MSBUILD`\r\nenvironment variable is exported to the *value of* the\r\n`$(USE_MSBUILD)` make variable, IFF it's not the empty string.\r\nIf `$(USE_MSBUILD)` *is* the empty string, export `USE_MSBUILD=0`,\r\nwhich will cause `xbuild` to be used.\r\n\r\nWith luck, this will allow the current `Xamarin.Android.Build.Tests`\r\nfailures -- all 20 of them -- to be \"fixed\" until such time as all\r\n`Xamarin.Android.Build.Tests` tests *actually* pass w/ MSBuild."},{"Id":"6758561253","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:32:59","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/964","RelatedDescription":"Closed pull request \"[xabuild] interprocess locking via FileStream\" (#964) at xamarin/xamarin-android","RelatedBody":"Context in #954\r\nContext: http://aakinshin.net/blog/post/namedmutex-on-mono/\r\n\r\nThe Xamarin.Android.Build.Tests run xabuild.exe in parallel, which\r\nbrings up some interesting issues. xabuild.exe needs to overwrite a\r\nconfig file that is used by the `MSBuildApp` class. We cannot do a\r\n`File.Exists` check, because A) the file exists on Windows due to some\r\nassembly binding redirects, and B) we still need an interprocess lock.\r\n\r\nSo my solution after some trial and error:\r\n- Open a `FileStream` on the config file, retrying on `IOException`\r\n- Force `MSBuildApp`’s static constructor to run deterministically,\r\nwhile the `FileStream` is still open\r\n\r\nHopefully this hack isn’t _too_ terrible."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6761047256","Type":"PullRequestEvent","CreatedAt":"2017-10-24T23:15:15","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1227","RelatedDescription":"Opened pull request \"[Android] Use non-deprecated constructor for GestureDetector\" (#1227) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nForms is using a deprecated constructor for GestureDetector which doesn't load up the scaled version of the touch slop value. Because of this, some taps are being incorrectly recognized as fling gestures. This change updates to a Context-specific constructor which loads the correct touch slop value for the device.\r\n\r\nWhether a user encounters the bug depends on the device's physical size, display density, the user's finger size, and the user's tapping style. So automated tests for this are pretty much out of the question, unless we install varying sizes of robot fingers in the Test Cloud lab.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [59863 – TapGestureRecognizer extremely finicky](https://bugzilla.xamarin.com/show_bug.cgi?id=59863) \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6760790733","Type":"PullRequestEvent","CreatedAt":"2017-10-24T21:59:02","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1223","RelatedDescription":"Merged pull request \"[Core]Set default value for IsPresented on MacOS\" (#1223) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nBy default we want to show the Master on MacOS, it's up to the user to provide UI to hide it\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\nMaster page will be shown by default on MacOS desktop app.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"6760442494","Type":"PullRequestEvent","CreatedAt":"2017-10-24T20:39:01","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1216","RelatedDescription":"Closed pull request \"Simplify row height estimation\" (#1216) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpected row height estimation to be simple. We actually do quite a bit of work to compute the exact height of the first cell (for RetainElement) and use that as the estimate for the remaining cells. This adds a bunch of complexity. For example, life cycle management of the renderer used for estimation had a bug which is causes the unexpected behavior reported here.\r\n\r\nThis change simply always returns a constant for the row height estimation.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59813\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nReturn a constant for row height estimation. Let's see if any tests fail.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6760439110","Type":"PullRequestEvent","CreatedAt":"2017-10-24T20:38:18","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1226","RelatedDescription":"Opened pull request \"Allocate prototypical view for RetainElement\" (#1226) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpect to be able to re-init ListView content. Actually, when using RetainElement, we experience an expectation due to use of a disposed view. The view in question was disposed by logic that used it to compute an estimated row height. That logic did expect the view to be recycled as part of pooling (resetting the Element). The fix is to allocate a view that does not participate in pooling.   \r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59813\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6760480731","Type":"PullRequestEvent","CreatedAt":"2017-10-24T20:47:11","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2917","RelatedDescription":"Merged pull request \"[uikit] UIAccessibility.RequestGuidedAccessSession completion handler is an ObjC block. Fix #59196\" (#2917) at xamarin/xamarin-macios","RelatedBody":"Reference:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59196"},{"Id":"6759188665","Type":"PullRequestEvent","CreatedAt":"2017-10-24T16:17:19","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2919","RelatedDescription":"Opened pull request \"[AVFoundation] Add missing categories from Xcode 9 and add new API from Xcode 9.1\" (#2919) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6758693484","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:54:18","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2916","RelatedDescription":"Merged pull request \"[foundation] Fix DateTime from NSDate seconds (decimal) precision loss when converting. Fix #32022\" (#2916) at xamarin/xamarin-macios","RelatedBody":"The explicit operator did all it's math using `long` (the internal\nrepresentation for DateTime) so the fractional part of the NSDate was\nlost. E.g.\n\n> original:  530499149.239266\n> roundtrip: 530499149.0\n\nHowever even when using `double` computations we're still losing some\nprecision - parts just can be held in the `long` (Ticks) representation\nof DateTime.\n\n> original:  530499149.239266\n> roundtrip: 530499149.23927\n\nReference:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=32022"},{"Id":"6758654119","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:47:52","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2583","RelatedDescription":"Closed pull request \"[XHarness] Add the System.IO.Compression tests\" (#2583) at xamarin/xamarin-macios","RelatedBody":"This branch just allows to run the tests in the dll from mono. Tests\r\nwill fail until they are fixed in the mono source."},{"Id":"6758649128","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:47:05","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2918","RelatedDescription":"Opened pull request \"[XHarness] Add the System.IO.Compression bcl tests.\" (#2918) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6758566648","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:33:52","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2694","RelatedDescription":"Closed pull request \"[AVFoundation] Add missing types and categories.\" (#2694) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6758517053","Type":"PullRequestEvent","CreatedAt":"2017-10-24T14:26:03","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2900","RelatedDescription":"Merged pull request \"[XHarness] Add the Mono.Data.Tds tests.\" (#2900) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6758298536","Type":"PullRequestEvent","CreatedAt":"2017-10-24T13:49:01","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2917","RelatedDescription":"Opened pull request \"[uikit] UIAccessibility.RequestGuidedAccessSession completion handler is an ObjC block. Fix #59196\" (#2917) at xamarin/xamarin-macios","RelatedBody":"Reference:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59196"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"923005188637646853","CreatedAt":"2017-10-25T01:56:00+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our 11/7 webinar on building better games with #Unity3D and Microsoft #Azure! Register now to join us: https://t.co/0c8to6tPmT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":9,"FavoriteCount":11,"RawContent":null},{"Id":"922915335824478210","CreatedAt":"2017-10-24T19:58:57+00:00","UserScreenname":"xamarinhq","Text":"Check out 3 BIG new features to explore in the #XamarinForms 2.5.0 Pre-Release: https://t.co/Du28Gz40ru","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"922491050886868992","CreatedAt":"2017-10-23T15:53:00+00:00","UserScreenname":"xamarinhq","Text":"Add native Android Facebook Authentication to your app using #Azure App Service in this guide from @jamesmontemagno: https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":29,"RawContent":null},{"Id":"922284943169990659","CreatedAt":"2017-10-23T02:14:00+00:00","UserScreenname":"xamarinhq","Text":"Add #pushnotifications to your Android apps with #Xamarin, #Firebase Cloud Messaging, and #Azure Notification Hubs: https://t.co/9uyWpi2qlp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":87,"FavoriteCount":38,"RawContent":null},{"Id":"921881787009249280","CreatedAt":"2017-10-21T23:32:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":30,"RawContent":null},{"Id":"921466915117260801","CreatedAt":"2017-10-20T20:03:27+00:00","UserScreenname":"xamarinhq","Text":"Get five-star app quality every time with testing from #VSMobileCenter: https://t.co/sUR6Ctm1xk https://t.co/gGQOYtNmkC","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":13,"RawContent":null},{"Id":"921409932993482752","CreatedAt":"2017-10-20T16:17:01+00:00","UserScreenname":"xamarinhq","Text":"Take advantage of #ARKit, an augmented-reality mode on iOS 11 for 6S and up iPhones + 2017 iPads and iPad Pros:… https://t.co/8uG0wblORA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":19,"RawContent":null},{"Id":"921089184667983872","CreatedAt":"2017-10-19T19:02:29+00:00","UserScreenname":"xamarinhq","Text":"Register now for our upcoming webinar on building better games with #Unity3D and Microsoft #Azure: https://t.co/0c8to6tPmT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":35,"RawContent":null},{"Id":"921044016610922496","CreatedAt":"2017-10-19T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Curated resources on getting up and started quickly with #XamarinForms from Program Manager @davidortinau: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"920749716610207745","CreatedAt":"2017-10-18T20:33:33+00:00","UserScreenname":"xamarinhq","Text":"Update your iOS apps to reflect plugin and permission changes in iOS 11: https://t.co/9DXby5Nxsn https://t.co/jFJho4InOr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":42,"RawContent":null},{"Id":"920684397212438529","CreatedAt":"2017-10-18T16:14:00+00:00","UserScreenname":"xamarinhq","Text":"Request reviews with iOS 10.3’s SKStoreReviewController: https://t.co/HgugUTrN81","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":5,"RawContent":null},{"Id":"920320046701989894","CreatedAt":"2017-10-17T16:06:12+00:00","UserScreenname":"xamarinhq","Text":"Try out updates to Xamarin Live, a new Mac connection workflow, and more in the Visual Studio 2017 15.5 Preview:… https://t.co/iB8bIZkhW1","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":41,"RawContent":null},{"Id":"920032724999725056","CreatedAt":"2017-10-16T21:04:29+00:00","UserScreenname":"xamarinhq","Text":"Adaptive UI with #XamarinForms: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":102,"FavoriteCount":53,"RawContent":null},{"Id":"919958111670165505","CreatedAt":"2017-10-16T16:08:00+00:00","UserScreenname":"xamarinhq","Text":"Dive into the world of build configurations to see how they can improve your build times and productivity: https://t.co/KxvabUJIue","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"919747480769712128","CreatedAt":"2017-10-16T02:11:02+00:00","UserScreenname":"xamarinhq","Text":"Add “mobile developer” to your resume with @XamarinU, starting with a 30-day free trial: https://t.co/bVpjALvmoy https://t.co/fiA4quVFQb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":15,"RawContent":null},{"Id":"919305335759953927","CreatedAt":"2017-10-14T20:54:06+00:00","UserScreenname":"xamarinhq","Text":"Weekend project: add some new features to your #Xamarin Android apps with our Android Support Library v26 overview:… https://t.co/49gaLayBhU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"918566588483342336","CreatedAt":"2017-10-12T19:58:35+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/j4LE7PWPMd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null},{"Id":"918507552811487232","CreatedAt":"2017-10-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build better apps with @BritchDavid's eBook on \"Enterprise Application Patterns using #XamarinForms\": https://t.co/YryVqlrejk","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":10,"RawContent":null},{"Id":"918186189634572288","CreatedAt":"2017-10-11T18:47:01+00:00","UserScreenname":"xamarinhq","Text":"Update your #Xamarin iOS apps for the iPhone X: https://t.co/Yi49G6ijnP https://t.co/OmUwO59Fdx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":32,"RawContent":null}]}},"RunOn":"2017-10-25T05:30:38.0835279Z","RunDurationInMilliseconds":4433}