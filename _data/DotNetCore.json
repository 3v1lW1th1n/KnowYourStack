{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T23:42:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Addresses an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T18:22:20+00:00","CommentsCount":2,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T14:03:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Microsoft’s Developer Blogs are Getting an Update","PublishedOn":"2019-02-13T19:49:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In the coming days, we’ll be moving our developer blogs to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/microsofts-developer-blogs-are-getting-an-update/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T14:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 19, 2019 The advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes. .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/07/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."},{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10233558504","Type":"PullRequestEvent","CreatedAt":"2019-08-19T02:18:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26237","RelatedDescription":"Merged pull request \"Fixing spelling errors in BotR chapters\" (#26237) at dotnet/coreclr","RelatedBody":"To be specific: \r\n\r\n**clr-abi.md** \r\ncompiler at one point did not, but then was **change** to once again insert them.\r\ncompiler at one point did not, but then was **changed** to once again insert them.\r\n\r\n\r\n**exceptions.md**\r\nthe helper creates **the a** nicely formatted exception message.\t\r\nthe helper creates **a** nicely formatted exception message.\r\n\r\n**garbage-collection.md** \r\non the user thread that **triggerred** the GC. The code flow is:\t\r\non the user thread that **triggered** the GC. The code flow is:\r\n\r\n**intro-to-clr.md** \r\nExceptions are a language feature that **allow** programmers to _throw_ an arbitrary object\r\nExceptions are a language feature that **allows** programmers to _throw_ an arbitrary object\r\n\r\n**method-descriptor.md**\r\n(e.g. P/Invoke, delegate invocation, **multi dimensional** array setters and getters)\r\n(e.g. P/Invoke, delegate invocation, **multidimensional** array setters and getters)\r\n\r\n**ryujit-overview.md**\r\n(Intermediate Representation) that is not a direct representation of the target **instrutions**.\r\n(Intermediate Representation) that is not a direct representation of the target **instructions**.\r\n\r\nThis is similar to the way trees are displayed in **tyical** user interfaces\r\nThis is similar to the way trees are displayed in **typical** user interfaces\r\n"},{"Id":"10233535367","Type":"IssuesEvent","CreatedAt":"2019-08-19T02:11:34","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26242","RelatedDescription":"Opened issue \"JIT/Stress/ABI/pinvokes_r tests failed\" (#26242) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/workitems/JIT.Stress/console\r\n\r\n**Some of failed tests:**\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\nJIT/Stress/ABI/pinvokes_do/pinvokes_do.sh\r\n\r\n**Part of log:**\r\n```\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n      Stressing pinvokes\r\n      OSVersion: Unix 4.18.0.1013\r\n      OSArchitecture: X64\r\n      ProcessArchitecture: X64\r\n      Selecting SysV ABI\r\n      FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n      \r\n      RunInContext FAIL! Exiting with code 213\r\n      Expected: 100\r\n      Actual: 213\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n      > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /__w/9/s/bin/tests/Linux.x64.Checked/TestWrappers/JIT.Stress/JIT.Stress.XUnitWrapper.cs(334,0): at JIT_Stress._ABI_pinvokes_r_pinvokes_r_._ABI_pinvokes_r_pinvokes_r_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n        Stressing pinvokes\r\n        OSVersion: Unix 4.18.0.1013\r\n        OSArchitecture: X64\r\n        ProcessArchitecture: X64\r\n        Selecting SysV ABI\r\n        FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n        \r\n        RunInContext FAIL! Exiting with code 213\r\n        Expected: 100\r\n        Actual: 213\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n        > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n```"},{"Id":"10233505880","Type":"IssuesEvent","CreatedAt":"2019-08-19T02:02:00","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26241","RelatedDescription":"Opened issue \"Test failed: tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\" (#26241) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/40a0c6d5-430e-4787-9f60-9317e3055a63/workitems/PayloadGroup0/console\r\n\r\n**Failed tests:**\r\ntracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n\r\n**Log:**\r\n```\r\n tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n      TEST STARTING\r\n      TEST PASSED!\r\n      TEST STARTING\r\n      Test FAILED!\r\n      No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n      Configuration:\r\n      {\r\n      bufferSize: 1024,\r\n      providers: [\r\n      MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n      SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      ]\r\n      }\r\n      \r\n      Expected:\r\n      {\r\n      \"MyEventSource\" = 1000 +- 300\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n      \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n      }\r\n      \r\n      Actual:\r\n      {\r\n      \"MyEventSource\" = 1000\r\n      \"Microsoft-DotNETCore-EventPipe\" = 1\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n      }\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\r\n      > C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\tracing.eventpipe\\tracing.eventpipe.XUnitWrapper.cs(431,0): at tracing_eventpipe._providervalidation_providervalidation_providervalidation_._providervalidation_providervalidation_providervalidation_cmd()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n        TEST STARTING\r\n        TEST PASSED!\r\n        TEST STARTING\r\n        Test FAILED!\r\n        No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n        Configuration:\r\n        {\r\n        bufferSize: 1024,\r\n        providers: [\r\n        MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n        SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        ]\r\n        }\r\n        \r\n        Expected:\r\n        {\r\n        \"MyEventSource\" = 1000 +- 300\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n        \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n        }\r\n        \r\n        Actual:\r\n        {\r\n        \"MyEventSource\" = 1000\r\n        \"Microsoft-DotNETCore-EventPipe\" = 1\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n        }\r\n        Expected: 100\r\n        Actual: -1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```"},{"Id":"10233483618","Type":"IssuesEvent","CreatedAt":"2019-08-19T01:55:01","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26240","RelatedDescription":"Opened issue \"Some tests failed with System.Runtime.InteropServices.SEHException\" (#26240) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9397311d-48a3-4765-a994-bcd18d3a123c/workitems/Loader.classloader.TypeGeneratorTests.TypeGeneratorTest1200-1500/console\r\n\r\n**Some failed tests:**\r\nLoader_classloader._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_sh\r\nLoader_classloader._TypeGeneratorTests_TypeGeneratorTest1492_Generated1492_Generated1492_._TypeGeneratorTests_TypeGeneratorTest1492_Generated1492_Generated1492_sh\r\n\r\n**Part of log:**\r\n```\r\nFatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at System.Text.RegularExpressions.Regex.Replace(System.String, System.String)\r\n   at Loader_classloader._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.4059, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.4059, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n```"},{"Id":"10233434372","Type":"IssuesEvent","CreatedAt":"2019-08-19T01:38:50","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26239","RelatedDescription":"Opened issue \"Assert failure: Consistency check failed: AV in clr at this callstack\" (#26239) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/aa8f2ad8-42e8-47af-91cd-9bf644f031bf/workitems/Loader.classloader/console\r\n\r\n**Failed tests:**\r\nLoader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n\r\n**Log:**\r\n```\r\nLoader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3968 [0x00000f80], Thread: 4652 [0x122c]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x07467169)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x122c (4652), cxr=00BBCD20, exr=00BBCCD0\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_r.dll \r\n      Calling IFoo.Foo on Foo - expecting exception.\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at IFoo.Foo(Int32 a)\r\n         at Program.Negative()\r\n      Calling I1.Func on I47Class - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at I1.Func(Int32 a)\r\n         at Program.Negative()\r\n      Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at Program.Negative()\r\n      Calling I1.Func on I4Class - expecting I4.Func\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166689,0): at Loader_classloader._DefaultInterfaceMethods_diamondshape_diamondshape_r_diamondshape_r_._DefaultInterfaceMethods_diamondshape_diamondshape_r_diamondshape_r_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 3968 [0x00000f80], Thread: 4652 [0x122c]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x07467169)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x122c (4652), cxr=00BBCD20, exr=00BBCCD0\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_r.dll \r\n        Calling IFoo.Foo on Foo - expecting exception.\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at IFoo.Foo(Int32 a)\r\n           at Program.Negative()\r\n        Calling I1.Func on I47Class - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at I1.Func(Int32 a)\r\n           at Program.Negative()\r\n        Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at Program.Negative()\r\n        Calling I1.Func on I4Class - expecting I4.Func\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd [FAIL]\r\n      \r\n      Assert failure(PID 480 [0x000001e0], Thread: 5600 [0x15e0]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x15e0 (5600), cxr=0117D220, exr=0117D1D0\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" simple.dll \r\n      Calling IFoo.Foo on FooBar - expecting default method on IFoo.Foo. \r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(167271,0): at Loader_classloader._DefaultInterfaceMethods_simple_simple_simple_._DefaultInterfaceMethods_simple_simple_simple_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 480 [0x000001e0], Thread: 5600 [0x15e0]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x15e0 (5600), cxr=0117D220, exr=0117D1D0\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" simple.dll \r\n        Calling IFoo.Foo on FooBar - expecting default method on IFoo.Foo. \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd [FAIL]\r\n      \r\n      Assert failure(PID 2760 [0x00000ac8], Thread: 6076 [0x17bc]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x17bc (6076), cxr=0097CAE0, exr=0097CA90\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" valuetypes.dll \r\n      Calling IFoo.Foo on FooBarStruct\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(167368,0): at Loader_classloader._DefaultInterfaceMethods_valuetypes_valuetypes_valuetypes_._DefaultInterfaceMethods_valuetypes_valuetypes_valuetypes_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 2760 [0x00000ac8], Thread: 6076 [0x17bc]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x17bc (6076), cxr=0097CAE0, exr=0097CA90\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" valuetypes.dll \r\n        Calling IFoo.Foo on FooBarStruct\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd [FAIL]\r\n      \r\n      Assert failure(PID 916 [0x00000394], Thread: 4036 [0x0fc4]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x06f57163)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0xfc4 (4036), cxr=0077D288, exr=0077D238\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" methodimpl.dll \r\n      Calling IFoo.Foo methods on IBarImpl...\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166883,0): at Loader_classloader._DefaultInterfaceMethods_methodimpl_methodimpl_methodimpl_._DefaultInterfaceMethods_methodimpl_methodimpl_methodimpl_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 916 [0x00000394], Thread: 4036 [0x0fc4]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x06f57163)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0xfc4 (4036), cxr=0077D288, exr=0077D238\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" methodimpl.dll \r\n        Calling IFoo.Foo methods on IBarImpl...\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd [FAIL]\r\n      \r\n      Assert failure(PID 4980 [0x00001374], Thread: 2248 [0x08c8]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x0771717f)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x8c8 (2248), cxr=00F7CB08, exr=00F7CAB8\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_d.dll \r\n      Calling IFoo.Foo on Foo - expecting exception.\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at IFoo.Foo(Int32 a)\r\n         at Program.Negative()\r\n      Calling I1.Func on I47Class - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at I1.Func(Int32 a)\r\n         at Program.Negative()\r\n      Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at Program.Negative()\r\n      Calling I1.Func on I4Class - expecting I4.Func\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166592,0): at Loader_classloader._DefaultInterfaceMethods_diamondshape_diamondshape_d_diamondshape_d_._DefaultInterfaceMethods_diamondshape_diamondshape_d_diamondshape_d_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 4980 [0x00001374], Thread: 2248 [0x08c8]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x0771717f)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x8c8 (2248), cxr=00F7CB08, exr=00F7CAB8\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_d.dll \r\n        Calling IFoo.Foo on Foo - expecting exception.\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at IFoo.Foo(Int32 a)\r\n           at Program.Negative()\r\n        Calling I1.Func on I47Class - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at I1.Func(Int32 a)\r\n           at Program.Negative()\r\n        Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at Program.Negative()\r\n        Calling I1.Func on I4Class - expecting I4.Func\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3232 [0x00000ca0], Thread: 840 [0x0348]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x07b9760b)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x348 (840), cxr=034FD258, exr=034FD208\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrainedcall.dll \r\n      Constrained calls that require runtime lookup are OK\r\n      Runtime does not support lookups with runtime determined boxing\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166495,0): at Loader_classloader._DefaultInterfaceMethods_constrainedcall_constrainedcall_constrainedcall_._DefaultInterfaceMethods_constrainedcall_constrainedcall_constrainedcall_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 3232 [0x00000ca0], Thread: 840 [0x0348]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x07b9760b)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x348 (840), cxr=034FD258, exr=034FD208\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrainedcall.dll \r\n        Constrained calls that require runtime lookup are OK\r\n        Runtime does not support lookups with runtime determined boxing\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.cmd [FAIL]\r\n      \r\n      Assert failure(PID 4588 [0x000011ec], Thread: 832 [0x0340]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x340 (832), cxr=0077CDE8, exr=0077CD98\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrained3.dll \r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166301,0): at Loader_classloader._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 4588 [0x000011ec], Thread: 832 [0x0340]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x340 (832), cxr=0077CDE8, exr=0077CD98\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrained3.dll \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Wor\r\n```"},{"Id":"10233091173","Type":"PullRequestEvent","CreatedAt":"2019-08-18T23:01:07","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26238","RelatedDescription":"Opened pull request \"Fix assert when taking the jit inline tracking map\" (#26238) at dotnet/coreclr","RelatedBody":""},{"Id":"10233041819","Type":"PullRequestEvent","CreatedAt":"2019-08-18T22:35:57","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26191","RelatedDescription":null,"RelatedBody":"This change is intended to split the test job in CI runs into two\r\njobs - one building the tests and another sending the run to Helix.\r\nTo facilitate this, I have copied the bulk of the existing\r\ntest-job.yml file into two new files, build-test.yml and run-test.yml;\r\ntest-job.yml has become a mere wrapper invoking these two new files.\r\n\r\nThe new build-test file builds the tests, zips the output folder\r\nand publishes it as an Azure artifact (the artifact publishing step\r\nis no longer optional). The subsequent run-test step downloads the\r\ntest artifacts and triggers the Helix run for the test set.\r\n\r\nThe motivation for this change is to mitigate various transient\r\nissues seen in CoreCLR CI runs - when a test execution fails in a\r\nnon-deterministic manner, before this change the developer needed to\r\nrerun the lengthy test build step just to retry the tests. This\r\nchange should enable rerunning just the test execution step in such\r\ncase.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10233041690","Type":"PullRequestEvent","CreatedAt":"2019-08-18T22:35:53","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26191","RelatedDescription":"Closed pull request \"Split test build and run into two jobs\" (#26191) at dotnet/coreclr","RelatedBody":"This change is intended to split the test job in CI runs into two\r\njobs - one building the tests and another sending the run to Helix.\r\nTo facilitate this, I have copied the bulk of the existing\r\ntest-job.yml file into two new files, build-test.yml and run-test.yml;\r\ntest-job.yml has become a mere wrapper invoking these two new files.\r\n\r\nThe new build-test file builds the tests, zips the output folder\r\nand publishes it as an Azure artifact (the artifact publishing step\r\nis no longer optional). The subsequent run-test step downloads the\r\ntest artifacts and triggers the Helix run for the test set.\r\n\r\nThe motivation for this change is to mitigate various transient\r\nissues seen in CoreCLR CI runs - when a test execution fails in a\r\nnon-deterministic manner, before this change the developer needed to\r\nrerun the lengthy test build step just to retry the tests. This\r\nchange should enable rerunning just the test execution step in such\r\ncase.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10232957150","Type":"PullRequestEvent","CreatedAt":"2019-08-18T21:50:39","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26183","RelatedDescription":"Merged pull request \"Remove redundant ABI stress tests\" (#26183) at dotnet/coreclr","RelatedBody":"These tests are redundant because the debug type affects only the Roslyn generated IL."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10231789530","Type":"PullRequestEvent","CreatedAt":"2019-08-18T12:38:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12293","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#12293) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 12:51 PM\r\n- **Commit**: 184697656cbc995fb5b7aa24b8ace369217896dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19417.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n"},{"Id":"10231783464","Type":"PullRequestEvent","CreatedAt":"2019-08-18T12:35:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12292","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#12292) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 3:38 PM\r\n- **Commit**: 0764a2b93c13914bda8bad82fb278fa418b53720\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19417.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10229431603","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10229414466","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:30:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10229413962","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:30:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1444) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.10\r\n- **Date Produced**: 8/17/2019 2:57 AM\r\n- **Commit**: 9ea74a6d3ec09fef63975338105abdca6fac8e1c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19416.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19416.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19416.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10229384411","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:12:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1443) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10229368458","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:02:01","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1443) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10234083347","Type":"IssuesEvent","CreatedAt":"2019-08-19T04:57:40","Actor":"NextTurn","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40403","RelatedDescription":"Opened issue \"Design choices between two ...OutOfRangeException\" (#40403) at dotnet/corefx","RelatedBody":"Related to dotnet/dotnet-api-docs#3050\r\n\r\nThe [IndexOutOfRangeException](https://docs.microsoft.com/dotnet/api/system.indexoutofrangeexception) doc says it \"is thrown when an invalid index is used to access a member of an array or a collection\" and uses `List<T>` for examples. But all collections in BCL throw `ArgumentOutOfRangeException` in indexers instead.\r\n\r\nSome [programming guide](https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers/) throws `IndexOutOfRangeException` in non-indexers.\r\n\r\nWhy is `ArgumentOutOfRangeException` chosen for non-array indexers? Is `IndexOutOfRangeException` exclusively for arrays and strings?"},{"Id":"10233916504","Type":"IssuesEvent","CreatedAt":"2019-08-19T04:05:19","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40133","RelatedDescription":"Reopened issue \"Update Utf8JsonWriter.WriteNumber and WriteNumberValue(double/float) to support infinity correctly for all cases\" (#40133) at dotnet/corefx","RelatedBody":"This PR https://github.com/dotnet/corefx/pull/38322 attempted to fix https://github.com/dotnet/corefx/issues/33997 but did not update all cases.\r\n\r\nFor example, the fix was made for `JsonWriterOptions.Indented = true`, but not for false when writing a double.\r\nFor example, this needs to be fixed (in `WriteNumberValueMinimized`):\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L59-L61\r\n\r\nSimilarly here:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Float.cs#L59-L61\r\n\r\nHere's an example of the fix (in `WriteNumberValueIndented`):\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L93-L95\r\nCalling:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L98\r\n\r\nAlso add tests to make sure all the scenarios are covered (all permutation of `JsonWriterOptions`).\r\n\r\nSimilarly, all the `WriteNumber(some property name string, double/float value)` API overloads need to be fixed as well:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteProperties.Float.cs#L242-L244\r\n\r\ncc @tannergooding "},{"Id":"10233915213","Type":"PullRequestEvent","CreatedAt":"2019-08-19T04:04:55","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40197","RelatedDescription":"Merged pull request \"Corefx #40133 Use TryFormatDouble TryFormatFloat\" (#40197) at dotnet/corefx","RelatedBody":"Fixes #40133 \r\n\r\n@ahsonkhan Please review."},{"Id":"10233915188","Type":"IssuesEvent","CreatedAt":"2019-08-19T04:04:55","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40133","RelatedDescription":"Closed issue \"Update Utf8JsonWriter.WriteNumber and WriteNumberValue(double/float) to support infinity correctly for all cases\" (#40133) at dotnet/corefx","RelatedBody":"This PR https://github.com/dotnet/corefx/pull/38322 attempted to fix https://github.com/dotnet/corefx/issues/33997 but did not update all cases.\r\n\r\nFor example, the fix was made for `JsonWriterOptions.Indented = true`, but not for false when writing a double.\r\nFor example, this needs to be fixed (in `WriteNumberValueMinimized`):\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L59-L61\r\n\r\nSimilarly here:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Float.cs#L59-L61\r\n\r\nHere's an example of the fix (in `WriteNumberValueIndented`):\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L93-L95\r\nCalling:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteValues.Double.cs#L98\r\n\r\nAlso add tests to make sure all the scenarios are covered (all permutation of `JsonWriterOptions`).\r\n\r\nSimilarly, all the `WriteNumber(some property name string, double/float value)` API overloads need to be fixed as well:\r\nhttps://github.com/dotnet/corefx/blob/902dff43381cd4ce6bf1dec01618212a5f8f0231/src/System.Text.Json/src/System/Text/Json/Writer/Utf8JsonWriter.WriteProperties.Float.cs#L242-L244\r\n\r\ncc @tannergooding "},{"Id":"10233904476","Type":"PullRequestEvent","CreatedAt":"2019-08-19T04:01:34","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40372","RelatedDescription":"Merged pull request \"Change 'type' back to 'inputType' on serialize methods\" (#40372) at dotnet/corefx","RelatedBody":"During the mass API changes of the serializer #38933 the parameter changes from \"type\" to \"inputType\" were only made to the ref.cs file, not the source, so a subsequent re-gen of the ref.cs for an unrelated issue dotnet/corefx#39524 reverted that.\r\n\r\nThis PR adds backs the change from \"type\" to \"inputType\" to both the source and the ref.\r\n\r\nThis is expected to be ported to 3.0."},{"Id":"10233221496","Type":"PullRequestEvent","CreatedAt":"2019-08-19T00:11:08","Actor":"Marusyk","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40402","RelatedDescription":"Opened pull request \"Use Strings.resx file for the exception messages\" (#40402) at dotnet/corefx","RelatedBody":"Related to #40074\r\n\r\nI used this pattern `Exception\\(\".+?\"` to find hardcoded exception messages.\r\nThe PR skips exceptions in tests include changes for:\r\n\r\n- System.Composition.Hosting\r\n- System.Diagnostics.DiagnosticSource\r\n- System.DirectoryServices\r\n- System.Drawing.Common\r\n- System.IO.FileSystem\r\n- System.IO.Packaging\r\n- System.Numerics.Tensors\r\n- System.Private.DataContractSerialization\r\n- System.Private.Xml\r\n- System.Reflection.Metadata\r\n- System.Runtime.WindowsRuntime \r\n- System.Security.Cryptography.Xml\r\n\r\nThere need some changes in `src\\Common\\src`, but I don't actually know where I can find Strings.resx \r\n for Comman. Could you please suggest?\r\n\r\nIn the next step, I think, I should extend regex to `Exception\\(\\$\".+?\"`\r\n\r\nPlease review,\r\nThank you in advance"},{"Id":"10233121443","Type":"PullRequestEvent","CreatedAt":"2019-08-18T23:17:38","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40401","RelatedDescription":"Opened pull request \"Honor JsonIgnore attribute when applied to unsupported collections\" (#40401) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/40305."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10233661885","Type":"PullRequestEvent","CreatedAt":"2019-08-19T02:48:49","Actor":"jnm2","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38090","RelatedDescription":"Opened pull request \"Refactoring to add [DebuggerDisplay(\"{ToString(),nq}\")]\" (#38090) at dotnet/roslyn","RelatedBody":"Closes #37990"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10233837441","Type":"IssuesEvent","CreatedAt":"2019-08-19T03:41:42","Actor":"maikebing","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Opened issue \"use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it A BUG?\" (#7706) at dotnet/corert","RelatedBody":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n"},{"Id":"10232406857","Type":"PullRequestEvent","CreatedAt":"2019-08-18T17:14:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Merged pull request \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704) at dotnet/corert","RelatedBody":"Fixes #7703"},{"Id":"10232406854","Type":"IssuesEvent","CreatedAt":"2019-08-18T17:14:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703) at dotnet/corert","RelatedBody":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)"},{"Id":"10231481860","Type":"PullRequestEvent","CreatedAt":"2019-08-18T09:51:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7705) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10231309820","Type":"PullRequestEvent","CreatedAt":"2019-08-18T08:13:03","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7705) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10231295126","Type":"PullRequestEvent","CreatedAt":"2019-08-18T08:04:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7702) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10231294787","Type":"PullRequestEvent","CreatedAt":"2019-08-18T08:03:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Opened pull request \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704) at dotnet/corert","RelatedBody":"Fixes #7703"},{"Id":"10229843587","Type":"IssuesEvent","CreatedAt":"2019-08-17T16:09:41","Actor":"SomeAnon42","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Opened issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703) at dotnet/corert","RelatedBody":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)"},{"Id":"10229326183","Type":"PullRequestEvent","CreatedAt":"2019-08-17T11:35:19","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7702) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10226905620","Type":"PullRequestEvent","CreatedAt":"2019-08-16T19:09:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7701","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7701) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"482035981","IsPullRequest":true,"CreatedAt":"2019-08-19T02:18:22","Actor":"BikeInventor","Number":"26237","RawContent":null,"Title":"Fixing spelling errors in BotR chapters","State":"closed","Body":"To be specific: \r\n\r\n**clr-abi.md** \r\ncompiler at one point did not, but then was **change** to once again insert them.\r\ncompiler at one point did not, but then was **changed** to once again insert them.\r\n\r\n\r\n**exceptions.md**\r\nthe helper creates **the a** nicely formatted exception message.\t\r\nthe helper creates **a** nicely formatted exception message.\r\n\r\n**garbage-collection.md** \r\non the user thread that **triggerred** the GC. The code flow is:\t\r\non the user thread that **triggered** the GC. The code flow is:\r\n\r\n**intro-to-clr.md** \r\nExceptions are a language feature that **allow** programmers to _throw_ an arbitrary object\r\nExceptions are a language feature that **allows** programmers to _throw_ an arbitrary object\r\n\r\n**method-descriptor.md**\r\n(e.g. P/Invoke, delegate invocation, **multi dimensional** array setters and getters)\r\n(e.g. P/Invoke, delegate invocation, **multidimensional** array setters and getters)\r\n\r\n**ryujit-overview.md**\r\n(Intermediate Representation) that is not a direct representation of the target **instrutions**.\r\n(Intermediate Representation) that is not a direct representation of the target **instructions**.\r\n\r\nThis is similar to the way trees are displayed in **tyical** user interfaces\r\nThis is similar to the way trees are displayed in **typical** user interfaces\r\n","Url":"https://github.com/dotnet/coreclr/pull/26237","RelatedDescription":"Closed or merged PR \"Fixing spelling errors in BotR chapters\" (#26237)"},{"Id":"482072398","IsPullRequest":false,"CreatedAt":"2019-08-19T02:11:34","Actor":"VincentBu","Number":"26242","RawContent":null,"Title":"JIT/Stress/ABI tests failed","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/workitems/JIT.Stress/console\r\n\r\n**Some of failed tests:**\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\nJIT/Stress/ABI/pinvokes_do/pinvokes_do.sh\r\n\r\n**Part of log:**\r\n```\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n      Stressing pinvokes\r\n      OSVersion: Unix 4.18.0.1013\r\n      OSArchitecture: X64\r\n      ProcessArchitecture: X64\r\n      Selecting SysV ABI\r\n      FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n      \r\n      RunInContext FAIL! Exiting with code 213\r\n      Expected: 100\r\n      Actual: 213\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n      > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /__w/9/s/bin/tests/Linux.x64.Checked/TestWrappers/JIT.Stress/JIT.Stress.XUnitWrapper.cs(334,0): at JIT_Stress._ABI_pinvokes_r_pinvokes_r_._ABI_pinvokes_r_pinvokes_r_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n        Stressing pinvokes\r\n        OSVersion: Unix 4.18.0.1013\r\n        OSArchitecture: X64\r\n        ProcessArchitecture: X64\r\n        Selecting SysV ABI\r\n        FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n        \r\n        RunInContext FAIL! Exiting with code 213\r\n        Expected: 100\r\n        Actual: 213\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n        > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26242","RelatedDescription":"Open issue \"JIT/Stress/ABI tests failed\" (#26242)"},{"Id":"482070851","IsPullRequest":false,"CreatedAt":"2019-08-19T02:02:00","Actor":"VincentBu","Number":"26241","RawContent":null,"Title":"Test failed: tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/40a0c6d5-430e-4787-9f60-9317e3055a63/workitems/PayloadGroup0/console\r\n\r\n**Failed tests:**\r\ntracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n\r\n**Log:**\r\n```\r\n tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n      TEST STARTING\r\n      TEST PASSED!\r\n      TEST STARTING\r\n      Test FAILED!\r\n      No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n      Configuration:\r\n      {\r\n      bufferSize: 1024,\r\n      providers: [\r\n      MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n      SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      ]\r\n      }\r\n      \r\n      Expected:\r\n      {\r\n      \"MyEventSource\" = 1000 +- 300\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n      \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n      }\r\n      \r\n      Actual:\r\n      {\r\n      \"MyEventSource\" = 1000\r\n      \"Microsoft-DotNETCore-EventPipe\" = 1\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n      }\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\r\n      > C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\tracing.eventpipe\\tracing.eventpipe.XUnitWrapper.cs(431,0): at tracing_eventpipe._providervalidation_providervalidation_providervalidation_._providervalidation_providervalidation_providervalidation_cmd()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n        TEST STARTING\r\n        TEST PASSED!\r\n        TEST STARTING\r\n        Test FAILED!\r\n        No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n        Configuration:\r\n        {\r\n        bufferSize: 1024,\r\n        providers: [\r\n        MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n        SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        ]\r\n        }\r\n        \r\n        Expected:\r\n        {\r\n        \"MyEventSource\" = 1000 +- 300\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n        \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n        }\r\n        \r\n        Actual:\r\n        {\r\n        \"MyEventSource\" = 1000\r\n        \"Microsoft-DotNETCore-EventPipe\" = 1\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n        }\r\n        Expected: 100\r\n        Actual: -1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26241","RelatedDescription":"Open issue \"Test failed: tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\" (#26241)"},{"Id":"482069653","IsPullRequest":false,"CreatedAt":"2019-08-19T01:55:00","Actor":"VincentBu","Number":"26240","RawContent":null,"Title":"Some tests failed with System.Runtime.InteropServices.SEHException","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/9397311d-48a3-4765-a994-bcd18d3a123c/workitems/Loader.classloader.TypeGeneratorTests.TypeGeneratorTest1200-1500/console\r\n\r\n**Some failed tests:**\r\nLoader_classloader._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_sh\r\nLoader_classloader._TypeGeneratorTests_TypeGeneratorTest1492_Generated1492_Generated1492_._TypeGeneratorTests_TypeGeneratorTest1492_Generated1492_Generated1492_sh\r\n\r\n**Part of log:**\r\n```\r\nFatal error. System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\r\n   at System.Text.RegularExpressions.Regex.Replace(System.String, System.String)\r\n   at Loader_classloader._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_._TypeGeneratorTests_TypeGeneratorTest1371_Generated1371_Generated1371_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.4059, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.4059, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26240","RelatedDescription":"Open issue \"Some tests failed with System.Runtime.InteropServices.SEHException\" (#26240)"},{"Id":"482067043","IsPullRequest":false,"CreatedAt":"2019-08-19T01:38:49","Actor":"VincentBu","Number":"26239","RawContent":null,"Title":"Assert failure: Consistency check failed: AV in clr at this callstack","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/aa8f2ad8-42e8-47af-91cd-9bf644f031bf/workitems/Loader.classloader/console\r\n\r\n**Failed tests:**\r\nLoader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n\r\n**Log:**\r\n```\r\nLoader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3968 [0x00000f80], Thread: 4652 [0x122c]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x07467169)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x122c (4652), cxr=00BBCD20, exr=00BBCCD0\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_r.dll \r\n      Calling IFoo.Foo on Foo - expecting exception.\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at IFoo.Foo(Int32 a)\r\n         at Program.Negative()\r\n      Calling I1.Func on I47Class - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at I1.Func(Int32 a)\r\n         at Program.Negative()\r\n      Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at Program.Negative()\r\n      Calling I1.Func on I4Class - expecting I4.Func\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166689,0): at Loader_classloader._DefaultInterfaceMethods_diamondshape_diamondshape_r_diamondshape_r_._DefaultInterfaceMethods_diamondshape_diamondshape_r_diamondshape_r_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 3968 [0x00000f80], Thread: 4652 [0x122c]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x07467169)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x122c (4652), cxr=00BBCD20, exr=00BBCCD0\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_r.dll \r\n        Calling IFoo.Foo on Foo - expecting exception.\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at IFoo.Foo(Int32 a)\r\n           at Program.Negative()\r\n        Calling I1.Func on I47Class - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at I1.Func(Int32 a)\r\n           at Program.Negative()\r\n        Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at Program.Negative()\r\n        Calling I1.Func on I4Class - expecting I4.Func\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_r\\diamondshape_r.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd [FAIL]\r\n      \r\n      Assert failure(PID 480 [0x000001e0], Thread: 5600 [0x15e0]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x15e0 (5600), cxr=0117D220, exr=0117D1D0\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" simple.dll \r\n      Calling IFoo.Foo on FooBar - expecting default method on IFoo.Foo. \r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(167271,0): at Loader_classloader._DefaultInterfaceMethods_simple_simple_simple_._DefaultInterfaceMethods_simple_simple_simple_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 480 [0x000001e0], Thread: 5600 [0x15e0]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x15e0 (5600), cxr=0117D220, exr=0117D1D0\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" simple.dll \r\n        Calling IFoo.Foo on FooBar - expecting default method on IFoo.Foo. \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\simple\\simple\\simple.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd [FAIL]\r\n      \r\n      Assert failure(PID 2760 [0x00000ac8], Thread: 6076 [0x17bc]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x17bc (6076), cxr=0097CAE0, exr=0097CA90\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" valuetypes.dll \r\n      Calling IFoo.Foo on FooBarStruct\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(167368,0): at Loader_classloader._DefaultInterfaceMethods_valuetypes_valuetypes_valuetypes_._DefaultInterfaceMethods_valuetypes_valuetypes_valuetypes_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 2760 [0x00000ac8], Thread: 6076 [0x17bc]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x17bc (6076), cxr=0097CAE0, exr=0097CA90\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" valuetypes.dll \r\n        Calling IFoo.Foo on FooBarStruct\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\valuetypes\\valuetypes\\valuetypes.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd [FAIL]\r\n      \r\n      Assert failure(PID 916 [0x00000394], Thread: 4036 [0x0fc4]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x06f57163)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0xfc4 (4036), cxr=0077D288, exr=0077D238\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" methodimpl.dll \r\n      Calling IFoo.Foo methods on IBarImpl...\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166883,0): at Loader_classloader._DefaultInterfaceMethods_methodimpl_methodimpl_methodimpl_._DefaultInterfaceMethods_methodimpl_methodimpl_methodimpl_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 916 [0x00000394], Thread: 4036 [0x0fc4]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x06f57163)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0xfc4 (4036), cxr=0077D288, exr=0077D238\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" methodimpl.dll \r\n        Calling IFoo.Foo methods on IBarImpl...\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\methodimpl\\methodimpl\\methodimpl.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd [FAIL]\r\n      \r\n      Assert failure(PID 4980 [0x00001374], Thread: 2248 [0x08c8]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x0771717f)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x8c8 (2248), cxr=00F7CB08, exr=00F7CAB8\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_d.dll \r\n      Calling IFoo.Foo on Foo - expecting exception.\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at IFoo.Foo(Int32 a)\r\n         at Program.Negative()\r\n      Calling I1.Func on I47Class - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at I1.Func(Int32 a)\r\n         at Program.Negative()\r\n      Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n      Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n         at Program.Negative()\r\n      Calling I1.Func on I4Class - expecting I4.Func\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166592,0): at Loader_classloader._DefaultInterfaceMethods_diamondshape_diamondshape_d_diamondshape_d_._DefaultInterfaceMethods_diamondshape_diamondshape_d_diamondshape_d_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 4980 [0x00001374], Thread: 2248 [0x08c8]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x0771717f)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x8c8 (2248), cxr=00F7CB08, exr=00F7CAB8\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" diamondshape_d.dll \r\n        Calling IFoo.Foo on Foo - expecting exception.\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'IFoo.Foo(Int32)' on interface 'IFoo' with type 'FooClass' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at IFoo.Foo(Int32 a)\r\n           at Program.Negative()\r\n        Calling I1.Func on I47Class - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'I1.Func(Int32)' on interface 'I1' with type 'I47Class' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at I1.Func(Int32 a)\r\n           at Program.Negative()\r\n        Calling GI1<T>.Func on GI23Class<S> - expecting exception\r\n        Exception caught: System.Runtime.AmbiguousImplementationException: Could not call method 'GI1`1[S].Func(System.Type[] ByRef)' on interface 'GI1`1[System.Object]' with type 'GI23Class`1[System.Object]' from assembly 'diamondshape, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' because there are multiple incompatible interface methods overriding this method.\r\n           at Program.Negative()\r\n        Calling I1.Func on I4Class - expecting I4.Func\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\diamondshape\\diamondshape_d\\diamondshape_d.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd [FAIL]\r\n      \r\n      Assert failure(PID 3232 [0x00000ca0], Thread: 840 [0x0348]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      <no module>! <no symbol> + 0x0 (0x07b9760b)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      -----\r\n      .AV on tid=0x348 (840), cxr=034FD258, exr=034FD208\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrainedcall.dll \r\n      Constrained calls that require runtime lookup are OK\r\n      Runtime does not support lookups with runtime determined boxing\r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166495,0): at Loader_classloader._DefaultInterfaceMethods_constrainedcall_constrainedcall_constrainedcall_._DefaultInterfaceMethods_constrainedcall_constrainedcall_constrainedcall_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 3232 [0x00000ca0], Thread: 840 [0x0348]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        <no module>! <no symbol> + 0x0 (0x07b9760b)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        -----\r\n        .AV on tid=0x348 (840), cxr=034FD258, exr=034FD208\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrainedcall.dll \r\n        Constrained calls that require runtime lookup are OK\r\n        Runtime does not support lookups with runtime determined boxing\r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrainedcall\\constrainedcall.cmd\r\n    Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.cmd [FAIL]\r\n      \r\n      Assert failure(PID 4588 [0x000011ec], Thread: 832 [0x0340]): Consistency check failed: AV in clr at this callstack:\r\n      ------\r\n      CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n      CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n      CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n      CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n      CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n      CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n      CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n      CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n      CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n      CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n      CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n      -----\r\n      .AV on tid=0x340 (832), cxr=0077CDE8, exr=0077CD98\r\n      FAILED: false\r\n      \r\n      CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n      CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n      NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n      NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n      NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n      CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n      CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n          File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n          Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n      \r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrained3.dll \r\n      Expected: 100\r\n      Actual: -1073740286\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n      > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs(166301,0): at Loader_classloader._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_cmd()\r\n      Output:\r\n        \r\n        Assert failure(PID 4588 [0x000011ec], Thread: 832 [0x0340]): Consistency check failed: AV in clr at this callstack:\r\n        ------\r\n        CORECLR! GetCLRRuntimeHost + 0x27035A (0x7279938a)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0x6FAE1 (0x72598b11)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E1F0 (0x72777220)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E36D (0x7277739d)\r\n        CORECLR! GetCLRRuntimeHost + 0x24E9AB (0x727779db)\r\n        CORECLR! GetCLRRuntimeHost + 0x243644 (0x7276c674)\r\n        CORECLR! GetCLRRuntimeHost + 0x248144 (0x72771174)\r\n        CORECLR! GetCLRRuntimeHost + 0x24822A (0x7277125a)\r\n        CORECLR! GetCLRRuntimeHost + 0x248362 (0x72771392)\r\n        CORECLR! GetCLRRuntimeHost + 0x24547A (0x7276e4aa)\r\n        CORECLR! coreclr_shutdown_2 + 0x381E5 (0x72525a35)\r\n        CORERUN! <no symbol> + 0x0 (0x012ed140)\r\n        CORERUN! GetCurrentClrDetails + 0x126 (0x012edd66)\r\n        CORERUN! GetCurrentClrDetails + 0x1D1BE (0x0130adfe)\r\n        -----\r\n        .AV on tid=0x340 (832), cxr=0077CDE8, exr=0077CD98\r\n        FAILED: false\r\n        \r\n        CORECLR! coreclr_shutdown_2 + 0xAADA (0x724f832a)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC0CE (0x725e50fe)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBD34 (0x725e4d64)\r\n        CORECLR! GetCLRRuntimeHost + 0xBBCDE (0x725e4d0e)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC308 (0x725e5338)\r\n        NTDLL! LdrSetAppCompatDllRedirectionCallback + 0x1CB63 (0x772804c3)\r\n        NTDLL! RtlUnwind + 0x1BA (0x7724051a)\r\n        NTDLL! KiUserExceptionDispatcher + 0xF (0x77250fff)\r\n        CORECLR! GetCLRRuntimeHost + 0xC7BF4 (0x725f0c24)\r\n        CORECLR! GetCLRRuntimeHost + 0xBC260 (0x725e5290)\r\n            File: f:\\workspace\\_work\\1\\s\\src\\vm\\excep.cpp Line: 7649\r\n            Image: C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\CoreRun.exe\r\n        \r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Work\\3f347526-4c78-4b85-baa7-6638e9d4799c\\Exec\\Loader\\classloader\\Reports\\Loader.classloader\\DefaultInterfaceMethods\\constrainedcall\\constrained3\\constrained3.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\\corerun.exe\" constrained3.dll \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Payload\r\n        > C:\\dotnetbuild\\work\\aa8f2ad8-42e8-47af-91cd-9bf644f031bf\\Wor\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26239","RelatedDescription":"Open issue \"Assert failure: Consistency check failed: AV in clr at this callstack\" (#26239)"},{"Id":"482048618","IsPullRequest":true,"CreatedAt":"2019-08-18T23:01:06","Actor":"davmason","Number":"26238","RawContent":null,"Title":"Fix assert when taking the jit inline tracking map","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26238","RelatedDescription":"Open PR \"Fix assert when taking the jit inline tracking map\" (#26238)"},{"Id":"482027045","IsPullRequest":true,"CreatedAt":"2019-08-18T19:11:46","Actor":"jashook","Number":"26236","RawContent":null,"Title":"Mark nogc as a long running gc test","State":"open","Body":"This test has been repeatedly flaky in CI.\r\n\r\n/cc @BruceForstall @Maoni0 \r\n/cc @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26236","RelatedDescription":"Open PR \"Mark nogc as a long running gc test\" (#26236)"},{"Id":"481986159","IsPullRequest":true,"CreatedAt":"2019-08-18T18:54:27","Actor":"dotnet-maestro[bot]","Number":"26234","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190817.2\r\n- **Date Produced**: 8/17/2019 4:43 PM\r\n- **Commit**: 431813b706f25cc42a4f110114a371abfc1e0099\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19417.2\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26234","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26234)"},{"Id":"482010047","IsPullRequest":true,"CreatedAt":"2019-08-18T16:05:41","Actor":"jashook","Number":"26235","RawContent":null,"Title":"dlopen on Linux seems to not check the current working directory","State":"open","Body":"Therefore change the path of coredistools to an absolute path and\r\ncalculate it  based on the path of the current dll.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/26235","RelatedDescription":"Open PR \"dlopen on Linux seems to not check the current working directory\" (#26235)"},{"Id":"481975453","IsPullRequest":true,"CreatedAt":"2019-08-18T13:23:23","Actor":"Dotnet-GitSync-Bot","Number":"26233","RawContent":null,"Title":"Mirror changes from dotnet/corert,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/26233","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,corefx\" (#26233)"},{"Id":"481699273","IsPullRequest":true,"CreatedAt":"2019-08-18T09:53:40","Actor":"Dotnet-GitSync-Bot","Number":"26215","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/26215","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#26215)"},{"Id":"481879899","IsPullRequest":true,"CreatedAt":"2019-08-18T08:07:18","Actor":"dotnet-maestro[bot]","Number":"26229","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190816.13\r\n- **Date Produced**: 8/17/2019 4:16 AM\r\n- **Commit**: 00dfc821b3ba4a56add8161ad6549e8f70ae5add\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19416.13\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26229","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26229)"},{"Id":"481846619","IsPullRequest":true,"CreatedAt":"2019-08-18T05:00:25","Actor":"jashook","Number":"26226","RawContent":null,"Title":"Create upload task in superpmi","State":"closed","Body":"In addition allow downloading specific mch collections if there are multiple collections available.","Url":"https://github.com/dotnet/coreclr/pull/26226","RelatedDescription":"Closed or merged PR \"Create upload task in superpmi\" (#26226)"},{"Id":"481911198","IsPullRequest":false,"CreatedAt":"2019-08-17T17:59:40","Actor":"jashook","Number":"26232","RawContent":null,"Title":"[Unix x64] SuperPMI PAL_TRY has incorrect exception handling","State":"open","Body":"SuperPMI will incorrectly finish the process when an exception is thrown, because the inner PAL_TRY incorrectly does not catch the exception. Instead the root try ends ups catching the inner exception.","Url":"https://github.com/dotnet/coreclr/issues/26232","RelatedDescription":"Open issue \"[Unix x64] SuperPMI PAL_TRY has incorrect exception handling\" (#26232)"},{"Id":"481910401","IsPullRequest":false,"CreatedAt":"2019-08-17T17:50:18","Actor":"jashook","Number":"26231","RawContent":null,"Title":"[Linux x64] Superpmi fails to load libcoredistools","State":"open","Body":"On first glance this looks like dlopen is searching all the lib folders but not the cwd.\r\n\r\n/cc @sandreenko @BruceForstall ","Url":"https://github.com/dotnet/coreclr/issues/26231","RelatedDescription":"Open issue \"[Linux x64] Superpmi fails to load libcoredistools\" (#26231)"},{"Id":"481880006","IsPullRequest":true,"CreatedAt":"2019-08-17T12:16:44","Actor":"dotnet-maestro[bot]","Number":"26230","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview9.19416.11\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26230","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#26230)"},{"Id":"481879626","IsPullRequest":true,"CreatedAt":"2019-08-17T12:11:24","Actor":"dotnet-maestro[bot]","Number":"26228","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26228","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#26228)"},{"Id":"481794558","IsPullRequest":true,"CreatedAt":"2019-08-17T11:31:51","Actor":"stephentoub","Number":"26221","RawContent":null,"Title":"Continuing to cleanup / modernize Corelib","State":"closed","Body":"Almost entirely done with auto-fixers for the IDE* rules.  However, I hand-reviewed the changes and tweaked some of them where I wasn't happy with the IDE's results (and opened issues in Roslyn).  Also in some cases where I was changing something by hand and noticed additional cleanup around that area, I did so.","Url":"https://github.com/dotnet/coreclr/pull/26221","RelatedDescription":"Closed or merged PR \"Continuing to cleanup / modernize Corelib\" (#26221)"},{"Id":"481870882","IsPullRequest":true,"CreatedAt":"2019-08-17T10:08:30","Actor":"davmason","Number":"26227","RawContent":null,"Title":"Add ISOSDacInterface7 implementation","State":"open","Body":"runtime changes for https://github.com/dotnet/diagnostics/pull/437/files","Url":"https://github.com/dotnet/coreclr/pull/26227","RelatedDescription":"Open PR \"Add ISOSDacInterface7 implementation\" (#26227)"},{"Id":"481842521","IsPullRequest":true,"CreatedAt":"2019-08-17T03:31:43","Actor":"pi1024e","Number":"26225","RawContent":null,"Title":"Rewrote loop to make it clear it can be exited instead of an infinite loop","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26225","RelatedDescription":"Open PR \"Rewrote loop to make it clear it can be exited instead of an infinite loop\" (#26225)"},{"Id":"481820300","IsPullRequest":true,"CreatedAt":"2019-08-16T23:36:55","Actor":"josalem","Number":"26224","RawContent":null,"Title":"Fix for 26223","State":"open","Body":"resolves #26223","Url":"https://github.com/dotnet/coreclr/pull/26224","RelatedDescription":"Open PR \"Fix for 26223\" (#26224)"},{"Id":"481820005","IsPullRequest":false,"CreatedAt":"2019-08-16T23:34:51","Actor":"sywhang","Number":"26223","RawContent":null,"Title":"EventPipe CollectTracingV2 is broken","State":"open","Body":"When we moved StartStreaming response out of the constructor we broke the CollectTracingV2 protocol. This breaks dotnet-counters since it uses CollectTracingV2 to get the counter values. \r\n\r\nThis is a regression from https://github.com/dotnet/coreclr/pull/25760.","Url":"https://github.com/dotnet/coreclr/issues/26223","RelatedDescription":"Open issue \"EventPipe CollectTracingV2 is broken\" (#26223)"},{"Id":"481812180","IsPullRequest":true,"CreatedAt":"2019-08-16T23:28:54","Actor":"hoyosjs","Number":"26222","RawContent":null,"Title":"Update Docker images in build instructions for Linux","State":"closed","Body":"@dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26222","RelatedDescription":"Closed or merged PR \"Update Docker images in build instructions for Linux\" (#26222)"},{"Id":"481658612","IsPullRequest":false,"CreatedAt":"2019-08-16T23:13:49","Actor":"stephentoub","Number":"26213","RawContent":null,"Title":"Unable to build coreclr","State":"closed","Body":"CI is failing to build coreclr, and I'm unable to build it locally either.  Errors like:\r\n```C#\r\nd:\\repos\\coreclr>build.cmd -release -skiptests\r\nBUILD: Starting Build at 10:41:33.72\r\nBUILD: Detected Visual Studio 16.0 developer command prompt environment\r\nBUILD: Commencing CoreCLR product build\r\nBUILD: Checking prerequisites\r\nBUILD: Number of processor cores 6\r\nUnable to connect to the remote server\r\nSystem.Net.WebException: Unable to connect to the remote server ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond 104.214.64.238:443\r\n   at System.Net.Sockets.Socket.InternalEndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket& socket, IPAddress& address, ConnectSocketState state, IAsyncResult asyncResult, Exception& exception)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.GetResponse(WebRequest request)\r\n   at Microsoft.PowerShell.Commands.WebRequestPSCmdlet.ProcessRecord()\r\n```\r\ncc: @AaronRobinsonMSFT, @ViktorHofer, @dotnet/dnceng ","Url":"https://github.com/dotnet/coreclr/issues/26213","RelatedDescription":"Closed issue \"Unable to build coreclr\" (#26213)"},{"Id":"481717092","IsPullRequest":true,"CreatedAt":"2019-08-16T22:33:07","Actor":"jkoritzinsky","Number":"26218","RawContent":null,"Title":"Explicitly handle char marshalling in OleVariant::GetNativeMethodTableForVarType.","State":"closed","Body":"The default handling for `char` marshalling in `OleVariant::GetNativeMethodTableForVarType()` doesn't correctly handle `char[]`s marshaled as `ByValArray`. The `MethodTable*` calculates for `char` elements doesn't correctly account for `CharSet`.\r\n\r\nIn master, this code-path is only executed as part of SystemV classification of by-val arrays, so it requires a contrived struct to encounter, such as the one below:\r\n\r\n```csharp\r\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\nstruct S\r\n{\r\n    [MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]\r\n    public char[] arr;\r\n\r\n\tpublic float f;\r\n}\r\n```\r\n\r\nCurrently, this classifies the first eight bytes as `INTEGER` and the second eight bytes as `SSE`. However, both eight bytes should be classified as `INTEGER` since the char array extends into the second eight byte.\r\n\r\nI discovered this bug as part of my work on unifying the struct marshaling with the parameter and return value marshaling where I am using the `OleVariant::GetNativeMethodTableForVarType()` in more locations.","Url":"https://github.com/dotnet/coreclr/pull/26218","RelatedDescription":"Closed or merged PR \"Explicitly handle char marshalling in OleVariant::GetNativeMethodTableForVarType.\" (#26218)"},{"Id":"481738025","IsPullRequest":true,"CreatedAt":"2019-08-16T18:47:51","Actor":"sandreenko","Number":"26220","RawContent":null,"Title":"Rename WIN64EXCEPTIONS to FEATURE_EH_FUNCLETS.","State":"open","Body":"09dd35cfd0: Rename WIN64EXCEPTIONS to FEATURE_EH_FUNCLETS.\r\n\r\n9580866404: Delete WIN64EXCEPTIONS.\r\n\r\nThat was confusing because it was defined on Linux x64/arm64 and on Windows arm32.\r\n\r\nCloses  #25571.","Url":"https://github.com/dotnet/coreclr/pull/26220","RelatedDescription":"Open PR \"Rename WIN64EXCEPTIONS to FEATURE_EH_FUNCLETS.\" (#26220)"},{"Id":"481660789","IsPullRequest":true,"CreatedAt":"2019-08-16T18:43:25","Actor":"stephentoub","Number":"26214","RawContent":null,"Title":"Update coreclr's .editorconfig to match corefx's","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26214","RelatedDescription":"Closed or merged PR \"Update coreclr's .editorconfig to match corefx's\" (#26214)"},{"Id":"481725514","IsPullRequest":true,"CreatedAt":"2019-08-16T18:13:28","Actor":"briansull","Number":"26219","RawContent":null,"Title":"Implement ilasm and ildasm support for .param constraint with Custom attributes","State":"open","Body":"Fixes Issue #25488","Url":"https://github.com/dotnet/coreclr/pull/26219","RelatedDescription":"Open PR \"Implement ilasm and ildasm support for .param constraint with Custom attributes\" (#26219)"},{"Id":"481707983","IsPullRequest":true,"CreatedAt":"2019-08-16T17:24:25","Actor":"Anipik","Number":"26217","RawContent":null,"Title":"adding ci legs to release 3.1 branch","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26217","RelatedDescription":"Open PR \"adding ci legs to release 3.1 branch\" (#26217)"},{"Id":"481707535","IsPullRequest":true,"CreatedAt":"2019-08-16T17:23:11","Actor":"Anipik","Number":"26216","RawContent":null,"Title":"adding ci legs to 3.1 branch","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26216","RelatedDescription":"Open PR \"adding ci legs to 3.1 branch\" (#26216)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"481985836","IsPullRequest":true,"CreatedAt":"2019-08-18T12:38:46","Actor":"dotnet-maestro[bot]","Number":"12293","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 12:51 PM\r\n- **Commit**: 184697656cbc995fb5b7aa24b8ace369217896dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19417.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12293","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12293)"},{"Id":"481985564","IsPullRequest":true,"CreatedAt":"2019-08-18T12:35:46","Actor":"dotnet-maestro[bot]","Number":"12292","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 3:38 PM\r\n- **Commit**: 0764a2b93c13914bda8bad82fb278fa418b53720\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19417.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12292","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12292)"},{"Id":"481928951","IsPullRequest":true,"CreatedAt":"2019-08-17T22:14:29","Actor":"dotnet-maestro[bot]","Number":"12291","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190817.2\r\n- **Date Produced**: 8/17/2019 9:43 PM\r\n- **Commit**: 74b801506b7d06d742d104acfd2ab6440a39f18d\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19417.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12291","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12291)"},{"Id":"481883479","IsPullRequest":false,"CreatedAt":"2019-08-17T21:21:23","Actor":"julielerman","Number":"12287","RawContent":null,"Title":"net core 3 preview9 does not build testhost and other runner files for tests","State":"closed","Body":"## Description\r\nIn an Xunit project with recent preview9 SDKs, dotnet build doesn't pull testhost.dll or any other important files for running tests. The result when running tests is that none are discovered. Error reports testhost.dll can't be found. I was experiencing this with previously working test projects but it was easily reproducible with a default test project.\r\n\r\n## Steps to reproduce\r\nIn an empty folder, at CLI, run\r\ndotnet new xunit  //same problem with dotnet new mstest\r\ndotnet test\r\n\r\n## Expected behavior\r\nDotnet test should run the test and output test run execution log, then\r\ntotal tests 1 etc\r\ntest run successful\r\n\r\nbin/debug/netcoreapp3.0 folder should contain many files including testplatform dlls, visualstudio dlls, Xunit dlls and Xunitrunner dlls.\r\n\r\nWhen I switched global.jdon to use a preview6 version, it worked as expected. I don't have preview7 or 8 on this machine to see where it broke (or where there is some change that I missed and should be going about this differently now... ??)\r\n\r\n## Actual behavior\r\nRunning dotnet test simply returns a command prompt.\r\n\r\nContents of bin/debug/.netcoreapp3.0 folder are:\r\nprojectname.deps.json\r\nprojectname.dll\r\nprojectname.pdb\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-013927\r\n Commit:    e1f793b16d\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview9-013927/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19415-13\r\n  Commit:  127d3f10eb\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n  2.1.403 [/usr/local/share/dotnet/sdk]\r\n  2.2.100-preview2-009404 [/usr/local/share/dotnet/sdk]\r\n  2.2.100-preview3-009430 [/usr/local/share/dotnet/sdk]\r\n  2.2.105 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview5-011568 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview6-012264 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-013817 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-013927 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19413.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19415.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview2-26905-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27804-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19415-13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12287","RelatedDescription":"Closed issue \"net core 3 preview9 does not build testhost and other runner files for tests\" (#12287)"},{"Id":"481921583","IsPullRequest":true,"CreatedAt":"2019-08-17T20:40:20","Actor":"dotnet-maestro[bot]","Number":"12290","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 8:04 PM\r\n- **Commit**: 8283e6ac2b0bd33303b4314795f6d0318c1cec29\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19417.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12290","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12290)"},{"Id":"481918194","IsPullRequest":false,"CreatedAt":"2019-08-17T19:22:47","Actor":"orcun","Number":"12289","RawContent":null,"Title":"tool manifest should contain source","State":"open","Body":"## Steps to reproduce\r\nInstall a tool locally using a local source\r\n\r\n## Expected  behavior\r\ndotnet-tools.json to include source information, beside version, commands, etc.\r\n\r\n## Actual behavior\r\ndotnet-tools.json does not record the source of the package\r\n\r\nThis would help to update local tools with different sources.\r\n\r\n## Environment data\r\nVersion: 3.0.0-preview8-28405-07\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12289","RelatedDescription":"Open issue \"tool manifest should contain source\" (#12289)"},{"Id":"481917740","IsPullRequest":false,"CreatedAt":"2019-08-17T19:17:07","Actor":"orcun","Number":"12288","RawContent":null,"Title":"dotnet tool commands should work offline for local sources","State":"open","Body":"I noticed that sometimes dotnet tool update hangs and realized that was due to connection issues. However I was not expecting this behavior since I was providing a local source.\r\n\r\n## Steps to reproduce\r\nPoor wifi connection (or no connection, I haven't tested)\r\nUse a local nupkg folder as source\r\n\r\n## Expected  behavior\r\nOperation to work quickly\r\n\r\n## Actual behavior\r\nOperation hangs or waits for a long timeout?\r\nI am not sure if this is due to telemetry or it always checks with server. \r\nIf this is due to telemetry, I think timeout should be very short.\r\nIf it checks with nuget server even when using a local folder, it should be lower priority.\r\n\r\nI think working offline will be a common scenario, especially in CI environments.\r\n\r\n## Environment data\r\nI'm using core 3 preview 8.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12288","RelatedDescription":"Open issue \"dotnet tool commands should work offline for local sources\" (#12288)"},{"Id":"481879506","IsPullRequest":true,"CreatedAt":"2019-08-17T12:45:14","Actor":"dotnet-maestro[bot]","Number":"12286","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190816.1\r\n- **Date Produced**: 8/16/2019 1:02 PM\r\n- **Commit**: f332660b7ba52c18cbfe8c8b9a71f8eea12f419e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19416.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12286","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12286)"},{"Id":"481578469","IsPullRequest":true,"CreatedAt":"2019-08-17T12:37:10","Actor":"dotnet-maestro[bot]","Number":"12280","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12280","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12280)"},{"Id":"481852812","IsPullRequest":true,"CreatedAt":"2019-08-17T06:39:37","Actor":"dotnet-maestro[bot]","Number":"12285","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.12\r\n- **Date Produced**: 8/17/2019 6:03 AM\r\n- **Commit**: 8857746e4b12d9b7342d2c209763f2cb3ae95693\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.12\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12285","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12285)"},{"Id":"481845057","IsPullRequest":true,"CreatedAt":"2019-08-17T04:43:57","Actor":"dotnet-maestro[bot]","Number":"12284","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 4:08 AM\r\n- **Commit**: 96d612ce8c1bfea45b5ef62c757ee6852d36ff68\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12284","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12284)"},{"Id":"481825871","IsPullRequest":true,"CreatedAt":"2019-08-17T02:50:26","Actor":"dotnet-maestro[bot]","Number":"12283","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.10\r\n- **Date Produced**: 8/17/2019 2:14 AM\r\n- **Commit**: c0d5248fb485ab373f8340beb6d8fc4513a6d8db\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.10\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12283","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12283)"},{"Id":"481719970","IsPullRequest":false,"CreatedAt":"2019-08-16T21:20:58","Actor":"paveliak","Number":"12282","RawContent":null,"Title":"dot.net site is down, cannot download https://dot.net/v1/dotnet-install.ps1","State":"closed","Body":"## Steps to reproduce\r\ncurl https://dot.net/v1/dotnet-install.ps1\r\n\r\n## Expected  behavior\r\nCan download PS file\r\n\r\n## Actual behavior\r\ncurl: (7) Failed to connect to dot.net port 443: Timed out\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nN/A\r\n\r\nThanks,\r\nPavel\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12282","RelatedDescription":"Closed issue \"dot.net site is down, cannot download https://dot.net/v1/dotnet-install.ps1\" (#12282)"},{"Id":"481409120","IsPullRequest":false,"CreatedAt":"2019-08-16T17:04:34","Actor":"omajid","Number":"12275","RawContent":null,"Title":"Strange versioning of templates dir in preview 8","State":"closed","Body":"I downloaded .NET Core 3.0 Preview 8 from https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview8-linux-x64-binaries\r\n\r\nIt contains a new directory for templates. The versioning of this templates directory is strange: `DOTNET_ROOT/templates/3.0.0-preview8-013656/`. The version number of this directory (3.0.0-preview8-013656) doesn't match the SDK (3.0.100-preview8-013656) or the .NET Core Runtime (3.0.0-preview8-28405-07) or the ASP.NET Core Runtime (3.0.0-preview8.19405.7).\r\n\r\nIt seems to me that it should be using the SDK version.\r\n\r\n## Environment data\r\n\r\nThis is the download link I used:\r\n\r\nhttps://download.visualstudio.microsoft.com/download/pr/a0e368ac-7161-4bde-a139-1a3ef5a82bbe/439cdbb58950916d3718771c5d986c35/dotnet-sdk-3.0.100-preview8-013656-linux-x64.tar.gz","Url":"https://github.com/dotnet/cli/issues/12275","RelatedDescription":"Closed issue \"Strange versioning of templates dir in preview 8\" (#12275)"},{"Id":"481582484","IsPullRequest":true,"CreatedAt":"2019-08-16T12:15:44","Actor":"dotnet-maestro[bot]","Number":"12281","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12281","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12281)"},{"Id":"481530254","IsPullRequest":true,"CreatedAt":"2019-08-16T09:44:40","Actor":"dotnet-maestro[bot]","Number":"12279","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190816.02\r\n- **Date Produced**: 8/16/2019 1:41 PM\r\n- **Commit**: 66a9d076b6ce2cb1dc079e5cd351439c58278daf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19416-02\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19416-02\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19416-02\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19416-02\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19416-02\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12279","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12279)"},{"Id":"481446591","IsPullRequest":true,"CreatedAt":"2019-08-16T07:49:48","Actor":"dotnet-maestro[bot]","Number":"12277","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190815.14\r\n- **Date Produced**: 8/16/2019 7:00 AM\r\n- **Commit**: ee6ea631e8e3714a3d4b9c91aa1492c65ea1ac4b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19415-14\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12277","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12277)"},{"Id":"481463066","IsPullRequest":true,"CreatedAt":"2019-08-16T07:13:08","Actor":"dotnet-maestro[bot]","Number":"12278","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.11\r\n- **Date Produced**: 8/16/2019 6:32 AM\r\n- **Commit**: 7f054152db50635e1c14b9d9d34088e369a64422\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19415.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12278","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12278)"},{"Id":"481426141","IsPullRequest":true,"CreatedAt":"2019-08-16T04:07:21","Actor":"dotnet-maestro[bot]","Number":"12276","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190815.10\r\n- **Date Produced**: 8/16/2019 3:31 AM\r\n- **Commit**: a95bcfc520c8aa780d32874b6eebbbf1b4304657\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19415-10\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12276","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12276)"},{"Id":"481302937","IsPullRequest":true,"CreatedAt":"2019-08-16T02:51:30","Actor":"dotnet-maestro[bot]","Number":"12268","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190815.09\r\n- **Date Produced**: 8/16/2019 2:05 AM\r\n- **Commit**: 10f2c1b10a309047fe19a54b60e1d05aa32d8e43\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19415-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19415-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19415-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19415-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19415-09\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12268","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12268)"},{"Id":"481400607","IsPullRequest":true,"CreatedAt":"2019-08-16T01:57:39","Actor":"dotnet-maestro[bot]","Number":"12274","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.8\r\n- **Date Produced**: 8/16/2019 1:16 AM\r\n- **Commit**: 72925ecc1982a1c47416610607301c3dd055b981\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.8\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12274","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12274)"},{"Id":"481378864","IsPullRequest":true,"CreatedAt":"2019-08-16T00:26:33","Actor":"dotnet-maestro[bot]","Number":"12273","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.6\r\n- **Date Produced**: 8/15/2019 11:25 PM\r\n- **Commit**: 3d9311a29f5900cd4fe34d12a0c99039a5f629cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12273","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12273)"},{"Id":"481312035","IsPullRequest":false,"CreatedAt":"2019-08-15T23:47:16","Actor":"thild","Number":"12269","RawContent":null,"Title":"preview8 - signal SIGSEGV on executables","State":"closed","Body":"# preview8 - signal SIGSEGV on executables\r\n\r\nCreate a console app \"console1\" and run with `dotnet run`\r\nNothing happens. Program just exits silently.\r\n\r\nThe program builds normally.\r\n`dotnet bin/Debug/netcoreapp3.0/console1.dll` works.\r\n`./bin/Debug/netcoreapp3.0/console1` crashes with segmentation fault.\r\n\r\n# General\r\n```\r\n$ lldb console1\r\n(lldb) target create \"console1\"\r\nCurrent executable set to 'console1' (x86_64).\r\n(lldb) run\r\nProcess 26817 launched: '/mnt/docs/dev/tmp/console1/bin/Debug/netcoreapp3.0/console1' (x86_64)\r\nProcess 26817 stopped\r\n* thread #1, name = 'console1', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x0000000000000000\r\nerror: memory read failed for 0x0\r\n```\r\n\r\n```\r\n$ dotnet --info\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     opensuse-tumbleweed\r\n OS Version:  20190721\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /snap/dotnet-sdk/45/sdk/3.0.100-preview8-013656/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013656 [/snap/dotnet-sdk/45/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/snap/dotnet-sdk/45/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/snap/dotnet-sdk/45/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/12269","RelatedDescription":"Closed issue \"preview8 - signal SIGSEGV on executables\" (#12269)"},{"Id":"481315992","IsPullRequest":false,"CreatedAt":"2019-08-15T22:25:45","Actor":"richlander","Number":"12270","RawContent":null,"Title":"exe is not produced when PackAsTool = true","State":"closed","Body":"## Steps to reproduce\r\n\r\n- Create a new project\r\n- Add `<PackAsTool>true</PackAsTool>`\r\n\r\n## Expected  behavior\r\n\r\nYou get an exe\r\n\r\n## Actual behavior\r\n\r\nNo exe.\r\n\r\n## Environment data\r\n3.0 Preview 8\r\n\r\n## Commentary\r\n\r\nI think of PackAsTool as a publishing choice. Everything about the dev experience should be the same as regular projects until you act on packing the project as a tool.\r\n\r\nI understand that there are some challenges here, in that we don't have a good way of not publishing a build asset.\r\n\r\n/cc @vitek-karas \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12270","RelatedDescription":"Closed issue \"exe is not produced when PackAsTool = true\" (#12270)"},{"Id":"481348982","IsPullRequest":false,"CreatedAt":"2019-08-15T22:04:41","Actor":"richlander","Number":"12272","RawContent":null,"Title":"Confusing warning message about license, only for pack verb","State":"closed","Body":"This is the experience with .NET Core 3.0 Preview 8:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr license\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.89 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.73\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 16.01 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n```\r\n\r\nThis is the warning at issue:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n\r\nThat wording isn't directly actionable since I don't explicitly use \"licenseUrl\" in my project, and warning doesn't suggest that \"licenseUrl might be a substring of another element.\r\n\r\nMade this change (based on [NU5125](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5125)):\r\n\r\n` <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>`\r\n\r\nto\r\n\r\n`<PackageLicenseExpression>MIT</PackageLicenseExpression>`\r\n\r\nExperience:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.86 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.19\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 15.3 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>\r\n```\r\n\r\nWarning went away. That's good.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12272","RelatedDescription":"Closed issue \"Confusing warning message about license, only for pack verb\" (#12272)"},{"Id":"481251702","IsPullRequest":true,"CreatedAt":"2019-08-15T21:23:19","Actor":"dotnet-maestro[bot]","Number":"12265","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.4\r\n- **Date Produced**: 8/15/2019 8:43 PM\r\n- **Commit**: b2a0b02e35868005ebb5aed9d8aff6ad0476926f\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19415.4\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12265","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12265)"},{"Id":"481318329","IsPullRequest":true,"CreatedAt":"2019-08-15T21:18:28","Actor":"dotnet-maestro[bot]","Number":"12271","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.3\r\n- **Date Produced**: 8/15/2019 8:12 PM\r\n- **Commit**: 4144eeb459d9ba956fc0d84d8d5a3e0408e88a09\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12271","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12271)"},{"Id":"481239751","IsPullRequest":false,"CreatedAt":"2019-08-15T20:53:48","Actor":"bigswede74","Number":"12264","RawContent":null,"Title":"Unable to target 3.0.100-preview8-103656 sdk to build a project","State":"closed","Body":"## Steps to reproduce\r\n\r\n[09:45:34][Step 2/11] Executing: \"C:/Program Files/dotnet/dotnet.exe\" restore \"../MyProj/MyProj.csproj\"\r\n[09:45:35][Step 2/11] C:\\Program Files\\dotnet\\sdk\\2.1.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 3.0.\r\n\r\n## Expected  behavior\r\nI should be able to build a single project targeting a preview release of the sdk.\r\n\r\n## Actual behavior\r\nThe sdk used does not include preview.\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12264","RelatedDescription":"Closed issue \"Unable to target 3.0.100-preview8-103656 sdk to build a project\" (#12264)"},{"Id":"481293796","IsPullRequest":false,"CreatedAt":"2019-08-15T20:15:01","Actor":"batzen","Number":"12267","RawContent":null,"Title":"dotnet list package fails on unreachable conditions","State":"closed","Body":"## Steps to reproduce\r\n- dotnet new console\r\n- add\r\n```\r\n  <ItemGroup Condition=\"'true' == 'false'\">\r\n    <PackageReference Condition=\"'asdf' >= '10'\" Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n```\r\nto the project\r\n- dotnet restore\r\n- dotnet list package --outdated\r\n\r\n## Expected  behavior\r\nAs `dotnet restore` and `dotnet build` work without any error i expect it to just output:\r\n`The given project `xx` has no updates given the current sources.`\r\n\r\n## Actual behavior\r\n`error: A numeric comparison was attempted on \"asdf\" that evaluates to \"asdf\" instead of a number, in condition \"'asdf' >= '10'\". `\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [c:\\program files\\dotnet\\sdk]\r\n  1.0.2 [c:\\program files\\dotnet\\sdk]\r\n  1.0.3 [c:\\program files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  1.1.0 [c:\\program files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [c:\\program files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [c:\\program files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12267","RelatedDescription":"Closed issue \"dotnet list package fails on unreachable conditions\" (#12267)"},{"Id":"481281278","IsPullRequest":true,"CreatedAt":"2019-08-15T18:38:11","Actor":"dotnet-maestro[bot]","Number":"12266","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190818.3\r\n- **Date Produced**: 8/19/2019 12:57 AM\r\n- **Commit**: 8a5f710c474a955ae82ce449fb9185a781782558\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19418.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19418.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19418.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19418.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19418.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12266","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12266)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"481881019","IsPullRequest":true,"CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Number":"1445","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445)"},{"Id":"481880992","IsPullRequest":true,"CreatedAt":"2019-08-17T12:30:04","Actor":"dotnet-maestro[bot]","Number":"1444","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190818.1\r\n- **Date Produced**: 8/18/2019 10:10 AM\r\n- **Commit**: 4ffff25a8349567cffbac85cb44c2dc55114f1e1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19418.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19418.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19418.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#1444)"},{"Id":"481878978","IsPullRequest":true,"CreatedAt":"2019-08-17T12:12:07","Actor":"dotnet-maestro[bot]","Number":"1443","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1443)"},{"Id":"481587331","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:55","Actor":"dotnet-maestro[bot]","Number":"1442","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.9\r\n- **Date Produced**: 8/15/2019 11:51 PM\r\n- **Commit**: 1ac825dfc8ba0485ef4cf524a241f5309c43a2da\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19415.9\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1442","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1442)"},{"Id":"481587224","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:38","Actor":"dotnet-maestro[bot]","Number":"1441","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.13\r\n- **Date Produced**: 8/16/2019 7:46 AM\r\n- **Commit**: 4d2b68c2cda66c861aa918fd91e9bf7d664ea05f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1441)"},{"Id":"481586618","IsPullRequest":true,"CreatedAt":"2019-08-16T12:27:49","Actor":"dotnet-maestro[bot]","Number":"1440","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1440","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1440)"},{"Id":"481577910","IsPullRequest":true,"CreatedAt":"2019-08-16T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1439","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1439","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1439)"},{"Id":"481133549","IsPullRequest":true,"CreatedAt":"2019-08-15T21:03:09","Actor":"dotnet-maestro[bot]","Number":"1438","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.1\r\n- **Date Produced**: 8/15/2019 11:55 AM\r\n- **Commit**: 618de6e29d0c5b8b4cab65bdb98e6893240ab77d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1438","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1438)"},{"Id":"479824042","IsPullRequest":false,"CreatedAt":"2019-08-15T20:09:33","Actor":"watfordgnf","Number":"1431","RawContent":null,"Title":"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library","State":"closed","Body":"Working on a fix for [NATS](https://github.com/nats-io/nats.net/issues/272), I used `Dns.GetHostAddresses` from the main library. The library is being built against .NET Standard 1.6.1, and I added the `System.Net.NameResolution` NuGet package to get this API. When trying to use it I receive the following build error:\r\n```\r\n1>Conn.cs(435,53,435,69): error CS0117: 'Dns' does not contain a definition for 'GetHostAddresses'\r\n```\r\nIntelliSense only suggests `Dns.GetHostAddressesAsync`.\r\n\r\nI'm not sure why I can't use `Dns.GetHostAddresses`. Reviewing the .NET Standard 1.6 API it is clear it wasn't shipped, so I added the relevant NuGet package. The NuGet package states it supports at least .NET Standard 1.3. Looking at the code in question, I cannot find any evidence it excludes that method for .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1431","RelatedDescription":"Closed issue \"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library\" (#1431)"},{"Id":"480673667","IsPullRequest":true,"CreatedAt":"2019-08-14T13:32:23","Actor":"dotnet-maestro[bot]","Number":"1437","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.13\r\n- **Date Produced**: 8/14/2019 12:47 AM\r\n- **Commit**: 3694ef6d674381439046667e3ae830b97f5912d7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19413.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1437","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1437)"},{"Id":"480673470","IsPullRequest":true,"CreatedAt":"2019-08-14T13:26:57","Actor":"dotnet-maestro[bot]","Number":"1436","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.14\r\n- **Date Produced**: 8/14/2019 3:39 AM\r\n- **Commit**: cd666bb681149f76b6e716057928d299c8f47272\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19413.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1436)"},{"Id":"480641072","IsPullRequest":true,"CreatedAt":"2019-08-14T12:14:49","Actor":"dotnet-maestro[bot]","Number":"1435","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1435)"},{"Id":"480149972","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:44","Actor":"dotnet-maestro[bot]","Number":"1434","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.10\r\n- **Date Produced**: 8/13/2019 5:45 AM\r\n- **Commit**: 0feaf246b0fee4e32c3ef4206df1db0bd5621412\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19412.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1434","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1434)"},{"Id":"480149776","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:20","Actor":"dotnet-maestro[bot]","Number":"1433","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.11\r\n- **Date Produced**: 8/13/2019 7:58 AM\r\n- **Commit**: af36939acdf751d2465358be3f892170f73f9b48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19412.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1433","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1433)"},{"Id":"480118854","IsPullRequest":true,"CreatedAt":"2019-08-13T12:14:42","Actor":"dotnet-maestro[bot]","Number":"1432","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.1\r\n- **Date Produced**: 8/12/2019 1:01 PM\r\n- **Commit**: ec2dd5b3e7d11b88b2ca0688bb1685836cfad20a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1432","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1432)"},{"Id":"479637204","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:56","Actor":"dotnet-maestro[bot]","Number":"1430","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.4\r\n- **Date Produced**: 8/11/2019 7:39 PM\r\n- **Commit**: 3c699c4fbde216b765de918999eb8b7c6e161653\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19411.4\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1430","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1430)"},{"Id":"479637035","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:32","Actor":"dotnet-maestro[bot]","Number":"1429","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.3\r\n- **Date Produced**: 8/11/2019 5:04 PM\r\n- **Commit**: 38ad8ed2b502a2717293df098fd44267dc6eaad6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19411.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1429)"},{"Id":"479608817","IsPullRequest":true,"CreatedAt":"2019-08-12T12:14:39","Actor":"dotnet-maestro[bot]","Number":"1428","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190811.1\r\n- **Date Produced**: 8/11/2019 1:05 PM\r\n- **Commit**: a11024c8c22cc762011addafc30c653c938048f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19411.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1428","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1428)"},{"Id":"479368724","IsPullRequest":true,"CreatedAt":"2019-08-11T13:22:19","Actor":"dotnet-maestro[bot]","Number":"1427","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190810.6\r\n- **Date Produced**: 8/10/2019 10:05 PM\r\n- **Commit**: d137980838a9a1243afc1dc528d44a9f2be02b79\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19410.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19410.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19410.6\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1427","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1427)"},{"Id":"479368692","IsPullRequest":true,"CreatedAt":"2019-08-11T13:21:56","Actor":"dotnet-maestro[bot]","Number":"1426","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190810.5\r\n- **Date Produced**: 8/10/2019 9:44 PM\r\n- **Commit**: b129f7657a1b93ce9cf577d769d9d03c862e2338\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19410.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19410.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19410.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1426","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1426)"},{"Id":"479362425","IsPullRequest":true,"CreatedAt":"2019-08-11T12:14:52","Actor":"dotnet-maestro[bot]","Number":"1425","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190810.2\r\n- **Date Produced**: 8/10/2019 12:43 PM\r\n- **Commit**: e2f5f0f5c20a1fef71845795b09066a5cd892a7e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19410.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1425","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1425)"},{"Id":"479266166","IsPullRequest":true,"CreatedAt":"2019-08-10T13:23:40","Actor":"dotnet-maestro[bot]","Number":"1424","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.17\r\n- **Date Produced**: 8/10/2019 7:57 AM\r\n- **Commit**: b82d2bc44424c8a99a1f0fc13202bdfd43e6f9f5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19409.17\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19409.17\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19409.17\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1424","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1424)"},{"Id":"479266137","IsPullRequest":true,"CreatedAt":"2019-08-10T13:23:17","Actor":"dotnet-maestro[bot]","Number":"1423","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.16\r\n- **Date Produced**: 8/10/2019 2:09 AM\r\n- **Commit**: a7c0f966923d3379febe517be672c30c0aac63e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19409.16\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19409.16\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19409.16\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1423)"},{"Id":"479260390","IsPullRequest":true,"CreatedAt":"2019-08-10T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190809.8\r\n- **Date Produced**: 8/10/2019 1:45 AM\r\n- **Commit**: f22982a641aa6f29585b6ab1de85912814a00bac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19409.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1422)"},{"Id":"479056963","IsPullRequest":false,"CreatedAt":"2019-08-09T15:56:20","Actor":"dagood","Number":"1421","RawContent":null,"Title":"When building 2.2 packages, put assets in netstandard2.2 TFM","State":"open","Body":"Helps resolve https://github.com/dotnet/core-setup/issues/7567 in the best way.\r\n\r\nCurrently the `NETStandard.Library` 2.2 packages has assets in `build/netstandard2.1/ref/`. (Similar in the transport package.) Core-Setup carries this along when producing `NETStandard.Library.Ref`.","Url":"https://github.com/dotnet/standard/issues/1421","RelatedDescription":"Open issue \"When building 2.2 packages, put assets in netstandard2.2 TFM\" (#1421)"},{"Id":"478982965","IsPullRequest":true,"CreatedAt":"2019-08-09T13:29:02","Actor":"dotnet-maestro[bot]","Number":"1420","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190808.12\r\n- **Date Produced**: 8/8/2019 8:13 PM\r\n- **Commit**: cc92e719bc3564bc4ea913eb770cd5315a6c3bc1\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19408.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19408.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19408.12\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1420","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1420)"},{"Id":"478982798","IsPullRequest":true,"CreatedAt":"2019-08-09T13:28:37","Actor":"dotnet-maestro[bot]","Number":"1419","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.1\r\n- **Date Produced**: 8/9/2019 10:13 AM\r\n- **Commit**: e122f306410b1045ab2f4cb7e533ece8556bee56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19409.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19409.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19409.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1419)"},{"Id":"478952413","IsPullRequest":true,"CreatedAt":"2019-08-09T12:14:53","Actor":"dotnet-maestro[bot]","Number":"1418","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190808.13\r\n- **Date Produced**: 8/9/2019 2:43 AM\r\n- **Commit**: 524bb3e06ffd5b483a3c71a8f670b7a4bd2c232a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19408.13\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1418)"},{"Id":"478750569","IsPullRequest":false,"CreatedAt":"2019-08-09T01:10:44","Actor":"reflectronic","Number":"1417","RawContent":null,"Title":"Add System.Text.Rune","State":"open","Body":"It is probably a little too late, but please consider slipping in [`System.Text.Rune`](https://docs.microsoft.com/en-us/dotnet/api/system.text.rune) and related types (like [`StringRuneEnumerator`](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringruneenumerator)/[`SpanRuneEnumerator`](https://docs.microsoft.com/en-us/dotnet/api/system.text.spanruneenumerator)) for .NET Standard 2.1 or 2.2","Url":"https://github.com/dotnet/standard/issues/1417","RelatedDescription":"Open issue \"Add System.Text.Rune\" (#1417)"},{"Id":"478470024","IsPullRequest":true,"CreatedAt":"2019-08-08T13:40:25","Actor":"dotnet-maestro[bot]","Number":"1416","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190807.14\r\n- **Date Produced**: 8/7/2019 11:36 PM\r\n- **Commit**: 87bac62cecc33b1dfd0b77e27778cd1f9d456f70\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19407.14\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19407.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19407.14\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1416","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1416)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"482105415","IsPullRequest":false,"CreatedAt":"2019-08-19T04:57:40","Actor":"NextTurn","Number":"40403","RawContent":null,"Title":"Design choices between two ...OutOfRangeException","State":"open","Body":"Related to dotnet/dotnet-api-docs#3050\r\n\r\nThe [IndexOutOfRangeException](https://docs.microsoft.com/dotnet/api/system.indexoutofrangeexception) doc says it \"is thrown when an invalid index is used to access a member of an array or a collection\" and uses `List<T>` for examples. But all collections in BCL throw `ArgumentOutOfRangeException` in indexers instead.\r\n\r\nSome [programming guide](https://docs.microsoft.com/dotnet/csharp/programming-guide/indexers/) throws `IndexOutOfRangeException` in non-indexers.\r\n\r\nWhy is `ArgumentOutOfRangeException` chosen for non-array indexers? Is `IndexOutOfRangeException` exclusively for arrays and strings?","Url":"https://github.com/dotnet/corefx/issues/40403","RelatedDescription":"Open issue \"Design choices between two ...OutOfRangeException\" (#40403)"},{"Id":"482054986","IsPullRequest":true,"CreatedAt":"2019-08-19T00:11:08","Actor":"Marusyk","Number":"40402","RawContent":null,"Title":"Use Strings.resx file for the exception messages","State":"open","Body":"Related to #40074\r\n\r\nI used this pattern `Exception\\(\".+?\"` to find hardcoded exception messages.\r\nThe PR skips exceptions in tests include changes for:\r\n\r\n- System.Composition.Hosting\r\n- System.Diagnostics.DiagnosticSource\r\n- System.DirectoryServices\r\n- System.Drawing.Common\r\n- System.IO.FileSystem\r\n- System.IO.Packaging\r\n- System.Numerics.Tensors\r\n- System.Private.DataContractSerialization\r\n- System.Private.Xml\r\n- System.Reflection.Metadata\r\n- System.Runtime.WindowsRuntime \r\n- System.Security.Cryptography.Xml\r\n\r\nThere need some changes in `src\\Common\\src`, but I don't actually know where I can find Strings.resx \r\n for Comman. Could you please suggest?\r\n\r\nIn the next step, I think, I should extend regex to `Exception\\(\\$\".+?\"`\r\n\r\nPlease review,\r\nThank you in advance","Url":"https://github.com/dotnet/corefx/pull/40402","RelatedDescription":"Open PR \"Use Strings.resx file for the exception messages\" (#40402)"},{"Id":"482050043","IsPullRequest":true,"CreatedAt":"2019-08-18T23:17:35","Actor":"layomia","Number":"40401","RawContent":null,"Title":"Honor JsonIgnore attribute when applied to unsupported collections","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/40305.","Url":"https://github.com/dotnet/corefx/pull/40401","RelatedDescription":"Open PR \"Honor JsonIgnore attribute when applied to unsupported collections\" (#40401)"},{"Id":"482021281","IsPullRequest":false,"CreatedAt":"2019-08-18T18:09:16","Actor":"Genbox","Number":"40400","RawContent":null,"Title":"Support for seeking on CryptoStream depending on mode","State":"open","Body":"CryptoStream currently returns a hardcoded false on CanSeek. [See source here](https://source.dot.net/#System.Security.Cryptography.Primitives/System/Security/Cryptography/CryptoStream.cs,64).\r\n\r\nHowever, it is entirely possible to seek with some encryption/decryption modes. Take AES in ECB mode for example - there is no dependency from block to block, which makes it possible to seek to a block and encrypt/decrypt it accordingly.\r\n\r\nAccording to the comment (see link above), the author also seems to agree that it is too strict to just return false. Could we extend CryptoStream to have seek support?\r\n","Url":"https://github.com/dotnet/corefx/issues/40400","RelatedDescription":"Open issue \"Support for seeking on CryptoStream depending on mode\" (#40400)"},{"Id":"482016492","IsPullRequest":false,"CreatedAt":"2019-08-18T17:16:03","Actor":"endeffects","Number":"40399","RawContent":null,"Title":"System.Text.Json: Custom Constructor Support ","State":"open","Body":"Please provide support for custom constructors and allow to specify the constructor with an attribute.","Url":"https://github.com/dotnet/corefx/issues/40399","RelatedDescription":"Open issue \"System.Text.Json: Custom Constructor Support \" (#40399)"},{"Id":"482016239","IsPullRequest":false,"CreatedAt":"2019-08-18T17:13:42","Actor":"Joelius300","Number":"40398","RawContent":null,"Title":"Allow custom serialization for generic wrapper","State":"open","Body":"In the current state of `Sytem.Text.Json`, is it possible to create a serializer for a generic wrapper class like this?\r\n```csharp\r\n/// <summary>\r\n/// Represents a field that can be either a single value or multiple values (array). This is used for typesafe js-interop.\r\n/// </summary>\r\n/// <typeparam name=\"T\">The type of data this <see cref=\"IndexableOption{T}\"/> is supposed to hold.</typeparam>\r\npublic class IndexableOption<T>\r\n{\r\n    public object Value { get; }\r\n\r\n    public IndexableOption(T singleValue) => Value = singleValue;\r\n    public IndexableOption(T[] indexedValues) => Value = indexedValues;\r\n}\r\n```\r\n\r\nThe idea is that instead of \r\n\r\n```\r\n{\"Value\":...}\r\n```\r\nwe just get\r\n```\r\n...\r\n```\r\n\r\nAn example for that would be the following.\r\n`IndexableOption<int> option = new IndexableOption<int>(new[]{1, 2, 3});`\r\nSerializing this should yield\r\n```json\r\n[1,2,3]\r\n```\r\ninstead of\r\n```json\r\n{\"Value\":[1,2,3]}\r\n```\r\n\r\n\r\nSee the unit tests below for more examples with working code.  \r\n\r\nIt has to be correctly serialized alone or wrapped in an object like so:\r\n```csharp\r\nclass Config\r\n{\r\n    public IndexableOption<int> BorderWidth { get; set; }\r\n    public IndexableOption<string> BackgroundColor { get; set; }\r\n}\r\n```\r\n\r\nI have written (x)unit tests to show the current and the desired behaviour:\r\n\r\n<details>\r\n<summary>Unit tests</summary>\r\n\r\n```csharp\r\npublic class IndexableOptionAloneTest\r\n{\r\n    #region Single value\r\n\r\n    [Fact]\r\n    public void IndexableOptionSingleValue_NothingCustom()\r\n    {\r\n        // arrange\r\n        string stringVal = \"StringValue\";\r\n        IndexableOption<string> option = new IndexableOption<string>(stringVal);\r\n        var serializerOptions = new JsonSerializerOptions();\r\n\r\n        // act\r\n        string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n        string rawJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Equal(@$\"{{\"\"Value\"\":{rawJson}}}\", optionJson);\r\n        Assert.NotEqual(rawJson, optionJson);\r\n    }\r\n\r\n    [Fact]\r\n    public void IndexableOptionSingleValue_WithSerializer() // <-- currently this one fails of course\r\n    {\r\n        // arrange\r\n        string stringVal = \"StringValue\";\r\n        IndexableOption<string> option = new IndexableOption<string>(stringVal);\r\n\r\n        var serializerOptions = new JsonSerializerOptions();\r\n        // serializerOptions.Converters.Add(...);\r\n\r\n        // act\r\n        string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n        string rawJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Equal(rawJson, optionJson);\r\n    }\r\n\r\n    #endregion\r\n\r\n    #region Multiple values\r\n\r\n    [Fact]\r\n    public void IndexableOptionMultipleValues_NothingCustom()\r\n    {\r\n        // arrange\r\n        int[] intVals = new[] { 1, 2, 3, 9 };\r\n        IndexableOption<int> option = new IndexableOption<int>(intVals);\r\n        var serializerOptions = new JsonSerializerOptions();\r\n\r\n        // act\r\n        string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n        string rawJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Equal(@$\"{{\"\"Value\"\":{rawJson}}}\", optionJson);\r\n        Assert.NotEqual(rawJson, optionJson);\r\n    }\r\n\r\n    [Fact]\r\n    public void IndexableOptionMultipleValues_WithSerializer() // <-- currently this one fails of course\r\n    {\r\n        // arrange\r\n        int[] intVals = new[] { 1, 2, 3, 9 };\r\n        IndexableOption<int> option = new IndexableOption<int>(intVals);\r\n        var serializerOptions = new JsonSerializerOptions();\r\n        // serializerOptions.Converters.Add(...);\r\n\r\n        // act\r\n        string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n        string rawJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Equal(rawJson, optionJson);\r\n    }\r\n\r\n    #endregion\r\n}\r\n```\r\n\r\n```csharp\r\npublic class IndexableOptionWrappedTest\r\n{\r\n    [Fact]\r\n    public void Config_NothingCustom()\r\n    {\r\n        // arrange\r\n        string stringVal = \"StringValue\";\r\n        int[] intVals = new[] { 7, 1, 5 };\r\n\r\n        IndexableOption<string> stringOption = new IndexableOption<string>(stringVal);\r\n        IndexableOption<int> intOption = new IndexableOption<int>(intVals);\r\n\r\n        Config config = new Config\r\n        {\r\n            BackgroundColor = stringOption,\r\n            BorderWidth = intOption\r\n        };\r\n\r\n        var serializerOptions = new JsonSerializerOptions();\r\n\r\n        // act\r\n        string configJson = JsonSerializer.Serialize(config, serializerOptions);\r\n\r\n        string rawStringJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n        string rawIntJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Contains(@$\"\"\"BackgroundColor\"\":{{\"\"Value\"\":{rawStringJson}}}\", configJson);\r\n        Assert.Contains(@$\"\"\"BorderWidth\"\":{{\"\"Value\"\":{rawIntJson}}}\", configJson);\r\n    }\r\n\r\n    [Fact]\r\n    public void Config_WithSerializer() // <-- currently this one fails of course\r\n    {\r\n        // arrange\r\n        string stringVal = \"StringValue\";\r\n        int[] intVals = new[] { 7, 1, 5 };\r\n\r\n        IndexableOption<string> stringOption = new IndexableOption<string>(stringVal);\r\n        IndexableOption<int> intOption = new IndexableOption<int>(intVals);\r\n\r\n        Config config = new Config\r\n        {\r\n            BackgroundColor = stringOption,\r\n            BorderWidth = intOption\r\n        };\r\n\r\n        var serializerOptions = new JsonSerializerOptions();\r\n        // serializerOptions.Converters.Add(...);\r\n\r\n        // act\r\n        string configJson = JsonSerializer.Serialize(config, serializerOptions);\r\n\r\n        string rawStringJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n        string rawIntJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n        // assert\r\n        Assert.Contains(@$\"\"\"BackgroundColor\"\":{rawStringJson}\", configJson);\r\n        Assert.Contains(@$\"\"\"BorderWidth\"\":{rawIntJson}\", configJson);\r\n    }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### Approach one: Generic converter\r\n\r\nNow there is an obvious solution which is to use a generic converter. The converter looks like this:  \r\n```csharp\r\ninternal class IndexableOptionConverterGeneric<T> : JsonConverter<IndexableOption<T>>\r\n{\r\n    public override IndexableOption<T> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IndexableOption<T> value, JsonSerializerOptions options)\r\n    {\r\n        JsonSerializer.Serialize(writer, value.Value, value.Value.GetType(), options);\r\n    }\r\n}\r\n```\r\n\r\nThe way I can use this is by adding it to the options `Converters` property for each type of `IndexableOption` I want to serialize. See the unit tests for example code.  \r\nThis works but there are many downsides to this approach.  \r\n\r\n- You need to know what kind of `IndexableOption` the object you serialize contains. If you don't add a converter for each type of `IndexableOption`, things won't get serialized correctly.\r\n- You can't use it as an attribute since you can't declare the attribute in a generic way (you get `System.ArgumentException : Cannot create an instance of IndexableOptionTests.Converters.IndexableOptionConverterGeneric'1[T] because Type.ContainsGenericParameters is true.` if you try `[JsonConverter(typeof(IndexableOptionConverterGeneric<>))]`). This is a huge issue for me (currently at least). Let me expand a bit on this.  \r\nThis class is used for typesafe js-interop in blazor. That's done with `IJSRuntime` which internally uses `System.Text.Json` [since preview6](https://github.com/aspnet/Announcements/issues/364). There currently is no possibility to customize the `JsonSerializerOptions` of that, so you don't have any control about ignoring `null` values for example. That's why I have to use attributes to customize the serialization. There's a [pending feature request](https://github.com/aspnet/AspNetCore/issues/12685) to allow customization of `IJSRuntime`s serialization if you're interested.\r\n\r\nHere are some (x)unit-tests which show how to use this generic converter to make this work (these pass).  \r\n\r\n<details>\r\n<summary>Unit tests</summary>\r\n\r\n```csharp\r\n[Fact]\r\npublic void IndexableOptionSingleValue_WithSerializer_GenericAdded()\r\n{\r\n    // arrange\r\n    string stringVal = \"StringValue\";\r\n    IndexableOption<string> option = new IndexableOption<string>(stringVal);\r\n\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionConverterGeneric<string>());\r\n\r\n    // act\r\n    string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n    string rawJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Equal(rawJson, optionJson);\r\n}\r\n\r\n[Fact]\r\npublic void IndexableOptionMultipleValues_WithSerializer_GenericAdded()\r\n{\r\n    // arrange\r\n    int[] intVals = new[] { 1, 2, 3, 9 };\r\n    IndexableOption<int> option = new IndexableOption<int>(intVals);\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionConverterGeneric<int>());\r\n\r\n    // act\r\n    string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n    string rawJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Equal(rawJson, optionJson);\r\n}\r\n\r\n```\r\n```csharp\r\n\r\n[Fact]\r\npublic void Config_WithSerializer_GenericAdded()\r\n{\r\n    // arrange\r\n    string stringVal = \"StringValue\";\r\n    int[] intVals = new[] { 7, 1, 5 };\r\n\r\n    IndexableOption<string> stringOption = new IndexableOption<string>(stringVal);\r\n    IndexableOption<int> intOption = new IndexableOption<int>(intVals);\r\n\r\n    Config config = new Config\r\n    {\r\n        BackgroundColor = stringOption,\r\n        BorderWidth = intOption\r\n    };\r\n\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionConverterGeneric<int>());\r\n    serializerOptions.Converters.Add(new IndexableOptionConverterGeneric<string>());\r\n\r\n    // act\r\n    string configJson = JsonSerializer.Serialize(config, serializerOptions);\r\n\r\n    string rawStringJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n    string rawIntJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Contains(@$\"\"\"BackgroundColor\"\":{rawStringJson}\", configJson);\r\n    Assert.Contains(@$\"\"\"BorderWidth\"\":{rawIntJson}\", configJson);\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Approach two: Base class\r\nThe second idea I had was to use a base class. I redid the `IndexableOption` to use a base class.\r\n\r\n```csharp\r\n\r\n/// <summary>\r\n/// Don't use this class, it's just for serialization. Use <see cref=\"IndexableOptionWithBase{T}\"/> instead.\r\n/// </summary>\r\n[Obsolete(\"Don't use this class, it's just for serialization. Use IndexableOptionWithBase<T> instead.\")]\r\n// [JsonConverter(typeof(IndexableOptionBaseConverter))]\r\npublic abstract class IndexableOptionBase\r\n{\r\n    public abstract object Value { get; }\r\n}\r\n\r\n/// <summary>\r\n/// Represents a field that can be either a single value or multiple values (array). This is used for typesafe js-interop.\r\n/// </summary>\r\n/// <typeparam name=\"T\">The type of data this <see cref=\"IndexableOptionWithBase{T}\"/> is supposed to hold.</typeparam>\r\n#pragma warning disable 0618\r\npublic class IndexableOptionWithBase<T> : IndexableOptionBase\r\n#pragma warning restore 0618\r\n{\r\n    public override object Value { get; }\r\n\r\n    public IndexableOptionWithBase(T singleValue) => Value = singleValue;\r\n    public IndexableOptionWithBase(T[] indexedValues) => Value = indexedValues;\r\n}\r\n\r\n```\r\n\r\nNow I was able to create a converter that isn't generic.  \r\n\r\n```csharp\r\n\r\n#pragma warning disable 0618\r\ninternal class IndexableOptionBaseConverter : JsonConverter<IndexableOptionBase>\r\n{\r\n    public override IndexableOptionBase Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IndexableOptionBase value, JsonSerializerOptions options)\r\n    {\r\n        JsonSerializer.Serialize(writer, value.Value, value.Value.GetType(), options);\r\n    }\r\n}\r\n#pragma warning restore 0618\r\n\r\n```\r\n\r\nTo have a class which wraps this new type I also created `ConfigWithBase`.\r\n\r\n```csharp\r\n\r\nclass ConfigWithBase\r\n{\r\n    public IndexableOptionWithBase<int> BorderWidth { get; set; }\r\n    public IndexableOptionWithBase<string> BackgroundColor { get; set; }\r\n}\r\n\r\n```\r\n\r\nNow I have two possibilities.  \r\n\r\n- I can add `[JsonConverter(typeof(IndexableOptionBaseConverter))]` to the `IndexableOptionBase` class. You can see that commented out in the code above. That's because it doesn't work (tested but not included in unit tests). I've already authored a feature request for this to be supported. See [here](https://github.com/dotnet/corefx/issues/39905). Sadly [the workaround](https://github.com/dotnet/corefx/issues/39905#issuecomment-517628135) I came up with for this doesn't work here since the \"top-level\" class (`IndexableOption`) is generic. \r\n- I can add a converter to the `options.Converters`. This doesn't work since, well, the serializer never ever sees a `IndexableOptionBase`. The declarations in `ConfigWithBase` are generic and use `IndexableOption` and this serializer isn't \"smart\" enough to go look for converters of base-classes. Again, very closely related to https://github.com/dotnet/corefx/issues/39905. Also (a bit less but still) related to https://github.com/dotnet/corefx/issues/39903 -> https://github.com/dotnet/corefx/issues/38650.\r\n\r\nAs you can see, this workaround doesn't work. I will include (x)unit tests below once again (all failing of course).\r\n\r\n<details>\r\n\r\n<summary>Unit tests</summary>\r\n\r\n```csharp\r\n\r\n[Fact]\r\npublic void IndexableOptionWithBaseSingleValue_WithSerializer_BaseAdded()\r\n{\r\n    // arrange\r\n    string stringVal = \"StringValue\";\r\n    IndexableOptionWithBase<string> option = new IndexableOptionWithBase<string>(stringVal);\r\n\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionBaseConverter());\r\n\r\n    // act\r\n    string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n    string rawJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Equal(rawJson, optionJson);\r\n}\r\n\r\n[Fact]\r\npublic void IndexableOptionWithBaseMultipleValues_WithSerializer_BaseAdded()\r\n{\r\n    // arrange\r\n    int[] intVals = new[] { 1, 2, 3, 9 };\r\n    IndexableOptionWithBase<int> option = new IndexableOptionWithBase<int>(intVals);\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionBaseConverter());\r\n\r\n    // act\r\n    string optionJson = JsonSerializer.Serialize(option, serializerOptions);\r\n    string rawJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Equal(rawJson, optionJson);\r\n}\r\n\r\n```\r\n```csharp\r\n\r\n[Fact]\r\npublic void ConfigWithBase_WithSerializer_BaseAdded()\r\n{\r\n    // arrange\r\n    string stringVal = \"StringValue\";\r\n    int[] intVals = new[] { 7, 1, 5 };\r\n\r\n    IndexableOptionWithBase<string> stringOption = new IndexableOptionWithBase<string>(stringVal);\r\n    IndexableOptionWithBase<int> intOption = new IndexableOptionWithBase<int>(intVals);\r\n\r\n    ConfigWithBase config = new ConfigWithBase\r\n    {\r\n        BackgroundColor = stringOption,\r\n        BorderWidth = intOption\r\n    };\r\n\r\n    var serializerOptions = new JsonSerializerOptions();\r\n    serializerOptions.Converters.Add(new IndexableOptionBaseConverter());\r\n\r\n    // act\r\n    string configJson = JsonSerializer.Serialize(config, serializerOptions);\r\n\r\n    string rawStringJson = JsonSerializer.Serialize(stringVal, serializerOptions);\r\n    string rawIntJson = JsonSerializer.Serialize(intVals, serializerOptions);\r\n\r\n    // assert\r\n    Assert.Contains(@$\"\"\"BackgroundColor\"\":{rawStringJson}\", configJson);\r\n    Assert.Contains(@$\"\"\"BorderWidth\"\":{rawIntJson}\", configJson);\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nI'm sorry for the rather long issue. I hope you understood my issue/request/ideas.  \r\n\r\nIs there any way you can do this currently?  \r\nAlso, will there ever be a way to do one of the following (which would enable a workaround)?\r\n- Create generic converters which can be applied to generic classes (no issue found)\r\n- Make the serializer use converters of base-classes as well as just top-level classes (covered by https://github.com/dotnet/corefx/issues/39905)","Url":"https://github.com/dotnet/corefx/issues/40398","RelatedDescription":"Open issue \"Allow custom serialization for generic wrapper\" (#40398)"},{"Id":"481997587","IsPullRequest":false,"CreatedAt":"2019-08-18T14:03:35","Actor":"khteh","Number":"40396","RawContent":null,"Title":"ConnectAsync throws No such device or address exception","State":"open","Body":"I have 2 .net core 2.2 applications running in Kubernetes cluster. The services use `HttpClient.SendAsync` to communicate with one another through Kubernetes services. The applications work well on bare-metals. However, the communication with `HttpClient` throws `No such device or address exception`. Here is one of the URLs used: `http://svc-biz4xbackend:5002/api/v1/Identity/SessionValidate`. I `kubectl exec` into the pod and `curl` the url and it works fine. Does this indicate that this could be a bug with .Net Core framework? Where should I start to debug?","Url":"https://github.com/dotnet/corefx/issues/40396","RelatedDescription":"Open issue \"ConnectAsync throws No such device or address exception\" (#40396)"},{"Id":"481966875","IsPullRequest":true,"CreatedAt":"2019-08-18T09:52:49","Actor":"Dotnet-GitSync-Bot","Number":"40395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @jkotas","Url":"https://github.com/dotnet/corefx/pull/40395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#40395)"},{"Id":"481946950","IsPullRequest":true,"CreatedAt":"2019-08-18T08:10:38","Actor":"Dotnet-GitSync-Bot","Number":"40394","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40394)"},{"Id":"481877079","IsPullRequest":true,"CreatedAt":"2019-08-18T02:49:55","Actor":"Dotnet-GitSync-Bot","Number":"40386","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40386","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40386)"},{"Id":"481704505","IsPullRequest":true,"CreatedAt":"2019-08-17T23:49:43","Actor":"stephentoub","Number":"40377","RawContent":null,"Title":"Use Count in Enumerable.Any if available","State":"closed","Body":"We've been hesitant to make this change in the past, as it adds several interface checks which do show up in microbenchmarks (as is evidenced below).\r\n\r\nHowever, wide-spread \"wisdom\" is that `Any()` is as fast or faster than `Count() > 0`, and there are even FxCop rules/analyzers that warn about using the latter instead of the former, but in its current form that can frequently be incorrect: if the source does implement `ICollection<T>`, generally its `Count` is O(1) and allocation-free, whereas `Any()` will almost always end up allocating an enumerator.\r\n\r\nOn balance, it seems better to just have `Any()` map closely to `Count()` so that their performance can be reasoned about in parallel. I'd like a second opinion, though. @cston? @ahsonkhan? @bartonjs?\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Runtime.CompilerServices;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    public static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private static IEnumerable<int> Iterator() { yield return 1; }\r\n\r\n    public IEnumerable<object[]> Sources()\r\n    {\r\n        yield return new object[] { \"Empty\", Enumerable.Empty<int>() };\r\n        yield return new object[] { \"Range\", Enumerable.Range(0, 10) };\r\n        yield return new object[] { \"List\", new List<int>() { 1, 2, 3 } };\r\n        yield return new object[] { \"int[]\", new int[] { 1, 2, 3 } };\r\n        yield return new object[] { \"int[].Select\", new int[] { 1, 2, 3 }.Select(i => i) };\r\n        yield return new object[] { \"int[].Select.Where\", new int[] { 1, 2, 3 }.Select(i => i).Where(i => i % 2 == 0) };\r\n        yield return new object[] { \"Iterator\", Iterator() };\r\n        yield return new object[] { \"Iterator.Select\", Iterator().Select(i => i) };\r\n        yield return new object[] { \"Iterator.Select.Where\", Iterator().Select(i => i).Where(i => i % 2 == 0) };\r\n    }\r\n\r\n    [Benchmark]\r\n    [ArgumentsSource(nameof(Sources))]\r\n    public void Any(string name, object source) => Unsafe.As<IEnumerable<int>>(source).Any();\r\n}\r\n```\r\nproduces:\r\n\r\n| Method |                   Toolchain |                 name |               source |      Mean | Allocated |\r\n|------- |---------------------------- |--------------------- |--------------------- |----------:|----------:|\r\n|    Any | New |                Empty | Syste(...)nt32] [42] |  6.966 ns |         - |\r\n|    Any |    Old |                Empty | Syste(...)nt32] [42] |  5.421 ns |         - |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |             Iterator | Progr(...)>d__1 [22] | 20.192 ns |      32 B |\r\n|    Any |    Old |             Iterator | Progr(...)>d__1 [22] | 13.645 ns |      32 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |      Iterator.Select | Syste(...)nt32] [76] | 42.764 ns |      88 B |\r\n|    Any |    Old |      Iterator.Select | Syste(...)nt32] [76] | 35.661 ns |      88 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New | Itera(...)Where [21] | Syste(...)nt32] [62] | 74.852 ns |     144 B |\r\n|    Any |    Old | Itera(...)Where [21] | Syste(...)nt32] [62] | 65.916 ns |     144 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |                 List | Syste(...)nt32] [47] |  3.979 ns |         - |\r\n|    Any |    Old |                 List | Syste(...)nt32] [47] | 12.500 ns |      40 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |                Range | Syste(...)rator [36] |  7.972 ns |         - |\r\n|    Any |    Old |                Range | Syste(...)rator [36] | 15.880 ns |      40 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |                int[] |       System.Int32[] | 11.606 ns |         - |\r\n|    Any |    Old |                int[] |       System.Int32[] |  9.594 ns |      32 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |         int[].Select | Syste(...)nt32] [71] |  8.505 ns |         - |\r\n|    Any |    Old |         int[].Select | Syste(...)nt32] [71] | 19.888 ns |      48 B |\r\n|        |                             |                      |                      |           |           |\r\n|    Any | New |   int[].Select.Where | Syste(...)nt32] [62] | 59.662 ns |     104 B |\r\n|    Any |    Old |   int[].Select.Where | Syste(...)nt32] [62] | 48.749 ns |     104 B |\r\n\r\nps @adamsitnik, I could not figure out how to get the benchmark to take an `IEnumerable<int>`; everything I tried resulted in errors like `error CS0266: Cannot implicitly convert type 'object' to 'System.Collections.Generic.IEnumerable<int>'`.  This is with benchmarkdotnet 11.5.","Url":"https://github.com/dotnet/corefx/pull/40377","RelatedDescription":"Closed or merged PR \"Use Count in Enumerable.Any if available\" (#40377)"},{"Id":"481924652","IsPullRequest":false,"CreatedAt":"2019-08-17T20:43:58","Actor":"GrabYourPitchforks","Number":"40393","RawContent":null,"Title":"Obsolete the SecureString type","State":"open","Body":"The `SecureString` type does not actually fulfill the promises it makes to developers. MSDN [already disrecommends](https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring) its use in new code, and there's [other documentation](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) listing some technical reasons why it can't fulfill its promises.\r\n\r\nWe've already seen customers who use this type in server applications in an effort to fulfill auditing / compliance requirements, then those customers get bitten because they fail their audits. I detailed this a little more [on Twitter](https://twitter.com/LeviBroderick/status/1154039234388381696), including suggesting mechanisms that customers could use to meet compliance requirements.\r\n\r\nThis legacy type is a different scenario than legacy types like `ArrayList` (the non-generic collection type). Types like `ArrayList` aren't recommended for new code because there are better alternatives available, but there's no real harm in keeping those older types around for compatibility reasons. Contrast this against `SecureString`, where the existence of the type is causing active harm to customers who use it and subsequently fail audits.\r\n\r\nSince the type purports to make security promises to developers, and since it cannot fulfill those promises, it should be obsoleted in the next version of .NET Core.\r\n\r\n/cc @blowdart @bartonjs","Url":"https://github.com/dotnet/corefx/issues/40393","RelatedDescription":"Open issue \"Obsolete the SecureString type\" (#40393)"},{"Id":"481913512","IsPullRequest":true,"CreatedAt":"2019-08-17T18:27:14","Actor":"EngrMHanif","Number":"40392","RawContent":null,"Title":"Release/3.1","State":"open","Body":"Release / 3.1 Pull request for upgrading cyberbit imple","Url":"https://github.com/dotnet/corefx/pull/40392","RelatedDescription":"Open PR \"Release/3.1\" (#40392)"},{"Id":"481902190","IsPullRequest":false,"CreatedAt":"2019-08-17T16:19:49","Actor":"joshlang","Number":"40391","RawContent":null,"Title":"JsonConverter not being applied (on protobuf ByteString)","State":"open","Body":"TLDR:  My `JsonConverter<ByteString>` is never used.  `CanConvert` is never called with type `ByteString` but *is* called for `IEnumerable<byte>` instead.\r\n\r\n...\r\n\r\nWe have a protobuf file\r\n```\r\nsyntax = \"proto3\";\r\noption csharp_namespace = \"ConsoleApp1\";\r\nmessage Hello {\r\n\tstring There = 1;\r\n\tbytes Meow = 2;\r\n}\r\n```\r\n\r\nThis generates a class `Hello` with two properties:  `string There` and `ByteString Meow`.  \r\n\r\nByteString can be found in the Google.Protobuf nuget package with definition: `public sealed class ByteString : IEnumerable<byte>, IEnumerable, IEquatable<ByteString>`\r\n\r\nA sample object can be created like:\r\n```\r\nHello hello = new Hello\r\n{\r\n    There = \"asdf\",\r\n    Meow = ByteString.CopyFrom(1, 2, 3, 4)\r\n};\r\n```\r\n…\r\n\r\nAnyway, JsonSerializer.Serialize(hello) produces valid output.  YAY!  ❤️ System.Text.Json!\r\n\r\nBut it's not in the format I want.  So I created my converter:\r\n\r\n```\r\nclass ByteStringConverter : JsonConverter<ByteString>\r\n{\r\n    public override bool CanConvert(Type typeToConvert)\r\n    {\r\n        bool ca = base.CanConvert(typeToConvert);\r\n        Debug.WriteLine(typeToConvert.Name);\r\n        return ca;\r\n    }\r\n    public override ByteString Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();\r\n    public override void Write(Utf8JsonWriter writer, ByteString value, JsonSerializerOptions options) => throw new NotImplementedException();\r\n}\r\n```\r\n\r\nAnd used it:\r\n```\r\nJsonSerializerOptions o = new JsonSerializerOptions();\r\no.Converters.Add(new ByteStringConverter());\r\nvar s = JsonSerializer.Serialize(hello, o);\r\n```\r\n\r\nBut it didn't work.  I expected a `NotImplementedException` but didn't get one.\r\n\r\nCanConvert is called for 4 types:\r\n- `Hello` (the class)\r\n- `string` (property 'There')\r\n- `IEnumerable<byte>` (…which is implemented by ByteString on property Meow)\r\n- `byte`\r\n\r\nBut not for ByteString.  Which I'm assuming is why Read/Write are never called.","Url":"https://github.com/dotnet/corefx/issues/40391","RelatedDescription":"Open issue \"JsonConverter not being applied (on protobuf ByteString)\" (#40391)"},{"Id":"481898144","IsPullRequest":false,"CreatedAt":"2019-08-17T15:34:47","Actor":"Symbai","Number":"40390","RawContent":null,"Title":"Trace.Write cuts off at '\\0'","State":"open","Body":"I'm not sure if this is intended or not but it Trace.Write and WriteLine cuts off text as soon as char '\\0' appears. No error or exception, its just missing the rest of the text.\r\n\r\nRepro:\r\n```\r\nchar[] bla = new char[] { 'b', 'l', 'a', '\\0' };\r\nTrace.Write($\"abc {new string(bla)}, rest of text\");\r\n```\r\nresults in output window text:\r\n`abc bla`","Url":"https://github.com/dotnet/corefx/issues/40390","RelatedDescription":"Open issue \"Trace.Write cuts off at '\\0'\" (#40390)"},{"Id":"481887497","IsPullRequest":false,"CreatedAt":"2019-08-17T13:41:07","Actor":"xsoheilalizadeh","Number":"40389","RawContent":null,"Title":"Problem with building source code","State":"open","Body":"I used the [Development environment setup for Windows][1] for pre-required setups and installed CMake-3.14.6.\r\n\r\nI executed `.\\build.cmd -restore -build -buildtests -test`\r\n\r\nAnd got the following result:\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(775,5): error : The OutputPath property is not set for project 'VCTargetsPath.vcxproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='x64'.  You may be seeing this message because you are trying to build a project without a solution file, and have specified a non-default Configuration or Platform that doesn't exist for this project. [C:\\code\\corefx\\artifacts\\obj\\native\\netcoreapp-Windows_NT-Debug-x64\\CMakeFiles\\3.14.6\\VCTargetsPath.vcxproj] [C:\\code\\corefx\\src\\Native\\build-native.proj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(775,5): error : The OutputPath property is not set for project 'VCTargetsPath.vcxproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='x64'.  You may be seeing this message because you are trying to build a project without a solution file, and have specified a non-default Configuration or Platform that doesn't exist for this project. [C:\\code\\corefx\\artifacts\\obj\\native\\netcoreapp-Windows_NT-Debug-x64\\CMakeFiles\\3.14.6\\VCTargetsPath.vcxproj] [C:\\code\\corefx\\src\\Native\\build-native.proj]\r\nC:\\code\\corefx\\src\\Native\\build-native.proj(50,5): error MSB3073: The command \"\"C:\\code\\corefx\\src\\Native\\build-native.cmd\" x64 Debug Windows_NT outconfig netcoreapp-Windows_NT-Debug-x64\" exited with code 1.\r\n```\r\n\r\nInformation\r\n```\r\nVCTargetsPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Microsoft\\VC\\v160\r\n\r\nVisual Studio 2019 16.3 preview 2\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk] \r\n\r\n```\r\n\r\n\r\n\r\n\r\n[1]:https://github.com/dotnet/corefx/wiki/Development-environment-setup-for-Windows","Url":"https://github.com/dotnet/corefx/issues/40389","RelatedDescription":"Open issue \"Problem with building source code\" (#40389)"},{"Id":"481886652","IsPullRequest":true,"CreatedAt":"2019-08-17T13:33:49","Actor":"dotnet-maestro[bot]","Number":"40388","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/standard dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190817.2\r\n- **Date Produced**: 8/17/2019 4:43 PM\r\n- **Commit**: 431813b706f25cc42a4f110114a371abfc1e0099\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19417.2\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19417.2\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19417.2\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190818.1\r\n- **Date Produced**: 8/18/2019 10:10 AM\r\n- **Commit**: 4ffff25a8349567cffbac85cb44c2dc55114f1e1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19418.1\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19418.1\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 12:51 PM\r\n- **Commit**: 172841089ff13fe6b4495737e85b3461f0a6e8d4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19417.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40388","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup dotnet/standard dotnet/corefx\" (#40388)"},{"Id":"481878923","IsPullRequest":true,"CreatedAt":"2019-08-17T13:32:08","Actor":"dotnet-maestro[bot]","Number":"40387","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19416.16\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19416.16\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40387","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40387)"},{"Id":"481867142","IsPullRequest":false,"CreatedAt":"2019-08-17T09:17:17","Actor":"IonKiwi","Number":"40385","RawContent":null,"Title":"Utf8JsonReader stops reading with comment and JsonCommentHandling.Allow","State":"open","Body":"```\r\nstring json = @\"\r\n{\r\n\t\"\"Property1\"\": [\r\n\t\t42\r\n  ], // property2\r\n  \"\"Property2\"\": 42\r\n}\r\n\";\r\n\r\nvar reader = new Utf8JsonReader(Encoding.UTF8.GetBytes(json), new JsonReaderOptions() { AllowTrailingCommas = true, CommentHandling = JsonCommentHandling.Allow });\r\nwhile (reader.Read()) {\r\n\tConsole.WriteLine(reader.TokenType);\r\n}\r\n```\r\n\r\n**With JsonCommentHandling.Allow**\r\nthe reader seems to stop reading after reading the comment.\r\nThe above code prints:\r\nStartObject\r\nPropertyName\r\nStartArray\r\nNumber\r\nEndArray\r\nComment\r\n\r\nAfter the comment, reader.Read() returns false\r\n\r\n**With JsonCommentHandling.Skip** the above code prints\r\nStartObject\r\nPropertyName\r\nStartArray\r\nNumber\r\nEndArray\r\n**PropertyName\r\nNumber\r\nEndObject**\r\n\r\nIt continues after reading/skipping the comment.\r\n\r\nVersion: .NET Core 3.0 Preview 8","Url":"https://github.com/dotnet/corefx/issues/40385","RelatedDescription":"Open issue \"Utf8JsonReader stops reading with comment and JsonCommentHandling.Allow\" (#40385)"},{"Id":"481839279","IsPullRequest":false,"CreatedAt":"2019-08-17T02:50:40","Actor":"acolombi","Number":"40384","RawContent":null,"Title":"LINQ, Union followed by Select on empty IEnumerable fails to invoke Dispose","State":"open","Body":"It is my understanding that LINQ should always call `IEnumerator`'s `Dispose` method when finished with an `IEnumerator`. I've found a case where this does not happen: Take two `IEnumerator`s that immediately return `false` in their `MoveNext()` implementations (i.e. they are empty), `Union` them and then perform a `Select` on that. Here is a minimal reproduction that shows `Dispose()` is not called for either `IEnumerator`. This reproduces in dotnet core 2.1 & 2.2. It **does not** reproduce in .NET Framework 4.7.2.\r\n\r\n```\r\nusing System;\r\nusing System.Threading;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\n\r\n\r\nnamespace union\r\n{\r\n    class MyEnumerable : IEnumerable<long>\r\n    {\r\n        public IEnumerator<long> GetEnumerator()\r\n        {\r\n            return new MyEnumerator();\r\n        }\r\n\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            return GetEnumerator();\r\n        }\r\n    }\r\n\r\n    class MyEnumerator : IEnumerator<long>\r\n    {\r\n        public long Current\r\n        {\r\n            get\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        object IEnumerator.Current\r\n        {\r\n            get\r\n            {\r\n                return Current;\r\n            }\r\n        }\r\n\r\n        public bool MoveNext()\r\n        {\r\n            return false;\r\n        }\r\n\r\n        public void Reset()\r\n        {\r\n            return;\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            Console.WriteLine(\"I got disposed\");\r\n        }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var enum1 = new MyEnumerable();\r\n            var enum2 = new MyEnumerable();\r\n\r\n            enum1.Union(enum2).Select(x => x + 1).ToList();\r\n            Console.WriteLine(\"All done!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf the `Dispose()` was getting called you would see \"I got disposed\" twice on the console. Instead you get no \"I got disposed\"s. The `Union` and the `Select` are required to reproduce the issue.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40384","RelatedDescription":"Open issue \"LINQ, Union followed by Select on empty IEnumerable fails to invoke Dispose\" (#40384)"},{"Id":"481693854","IsPullRequest":true,"CreatedAt":"2019-08-17T01:41:57","Actor":"ViktorHofer","Number":"40375","RawContent":null,"Title":"Disable AssociatePersistedKey_CAPIviaCNG_RSA on arm64","State":"closed","Body":"Realted https://github.com/dotnet/corefx/issues/36330\r\n\r\nFlaky test, disabling for arm64.\r\n\r\ncc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40375","RelatedDescription":"Closed or merged PR \"Disable AssociatePersistedKey_CAPIviaCNG_RSA on arm64\" (#40375)"},{"Id":"481821152","IsPullRequest":true,"CreatedAt":"2019-08-17T01:41:43","Actor":"Dotnet-GitSync-Bot","Number":"40382","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corefx/pull/40382","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40382)"},{"Id":"481822240","IsPullRequest":true,"CreatedAt":"2019-08-16T23:49:18","Actor":"krwq","Number":"40383","RawContent":null,"Title":"Support PinChangedEvent on Unix","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/39814\r\n\r\nI've tested the code with:\r\n\r\n```csharp\r\n            using (SerialPort spA = new SerialPort(devA))\r\n            using (SerialPort spB =new SerialPort(devB))\r\n            {\r\n                spB.PinChanged += (s, e) =>\r\n                {\r\n                    Console.WriteLine($\"Pin state changed {e.EventType}\");\r\n                };\r\n\r\n                spA.Open();\r\n                spB.Open();\r\n\r\n                spA.RtsEnable = true;\r\n                Console.ReadLine();\r\n                spA.RtsEnable = false;\r\n                Console.ReadLine();\r\n            }\r\n```\r\n\r\nthere is currently a test testing this but seems we are hitting [similar issue as python](https://github.com/pyserial/pyserial/issues/124) where RTS/DTR randomly change for some short period of time after openning the port which makes it very difficult to test in the automated way - it could be related to our detection logic or driver issue (i.e. buffering pin change request from previous time this run).","Url":"https://github.com/dotnet/corefx/pull/40383","RelatedDescription":"Open PR \"Support PinChangedEvent on Unix\" (#40383)"},{"Id":"481778946","IsPullRequest":true,"CreatedAt":"2019-08-16T23:35:02","Actor":"carlossanlop","Number":"40380","RawContent":null,"Title":"[release/3.0] Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props (40364)","State":"closed","Body":"IntelliSense drop from the Docs team Live build generated on 08/15 for Preview 8, which will be part of 3.0 Preview 9. English only.","Url":"https://github.com/dotnet/corefx/pull/40380","RelatedDescription":"Closed or merged PR \"[release/3.0] Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props (40364)\" (#40380)"},{"Id":"481819643","IsPullRequest":true,"CreatedAt":"2019-08-16T23:32:34","Actor":"buyaa-n","Number":"40381","RawContent":null,"Title":"[release/3.0] JsonSerializerOptions.GetConverter() tests","State":"open","Body":"#### Description\r\nTest improvements for built-in JsonConverters.\r\nCode update:  null check added to JsonValueConverterKeyValuePair.cs to fix test failure with NRE \r\nPort of #39750\r\nFixes #39457\r\n\t\t\r\n#### Customer Impact\r\nLow\r\n#### Regression?\r\nNo\t\t\r\n#### Risk\r\nNo","Url":"https://github.com/dotnet/corefx/pull/40381","RelatedDescription":"Open PR \"[release/3.0] JsonSerializerOptions.GetConverter() tests\" (#40381)"},{"Id":"481758869","IsPullRequest":true,"CreatedAt":"2019-08-16T19:45:58","Actor":"zwread","Number":"40379","RawContent":null,"Title":"Allow X509Chain to replace the root trust list #16364","State":"open","Body":"Fixes: #16364","Url":"https://github.com/dotnet/corefx/pull/40379","RelatedDescription":"Open PR \"Allow X509Chain to replace the root trust list #16364\" (#40379)"},{"Id":"481745875","IsPullRequest":false,"CreatedAt":"2019-08-16T19:21:05","Actor":"JustNrik","Number":"40378","RawContent":null,"Title":"System.Text.Json fails to deserialize perfectly valid json","State":"closed","Body":"I recieved this playload from riot api:\r\n\r\n```json\r\n{\r\n  \"id\":\"ymv3aB5fDU1qmcpwsyyogE79NCMTueTjk2_Z37ghNX8IpFk\",\r\n  \"accountId\":\"np4-8zIh-J2AuTirPAtlJMu5qjKeGwbn9_OUTpc6gJMMk4Y\",\r\n  \"puuid\":\"JhDzp6BX3aQWJXIaITLRn30LGDkenOwab4DtTtYd9Aqh_vd30mfDBjGvUh_lyFiJk3wxPYAZkDXxhQ\",\r\n  \"name\":\"Santorin\",\r\n  \"profileIconId\":4055,\r\n  \"revisionDate\":1565935530000,\r\n  \"summonerLevel\":108\r\n}\r\n```\r\nand I attempted to deserialize into this dto:\r\n```cs\r\n    internal sealed class Summoner\r\n    {\r\n        public int ProfileIconId { get; set; }\r\n        public string Name { get; set; }\r\n        public string PUUID { get; set; }\r\n        public long SummonerLevel { get; set; }\r\n        public long RevisionDate { get; set; }\r\n        public string Id { get; set; }\r\n        public string AccountId { get; set; }\r\n    }\r\n```\r\nI expected it to be deserialized without problems, but it failed. Even worse, it returned a default instace of the dto instead of throwing an exception. Newtonsoft works fine with the same playload.","Url":"https://github.com/dotnet/corefx/issues/40378","RelatedDescription":"Closed issue \"System.Text.Json fails to deserialize perfectly valid json\" (#40378)"},{"Id":"481698475","IsPullRequest":false,"CreatedAt":"2019-08-16T16:57:56","Actor":"bclothier","Number":"40376","RawContent":null,"Title":"Several COM interop features marked as obsolete","State":"open","Body":"Referencing [this issue](https://github.com/dotnet/coreclr/issues/26207)\r\n\r\n> The documentations for .NET Framework for various methods / objects defined within `System.Runtime.InteropServices` has been marked with `Obsolete,` mainly with comment that it may be unavailable in future releases. I'm including few samples:\r\n> \r\n> [ICustomQueryInterface](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.icustomqueryinterface?view=netframework-4.8)\r\n> [DispatchWrapper](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dispatchwrapper?view=netframework-4.8)\r\n> [Marshal.GetObjectForNativeVariant](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getobjectfornativevariant?view=netframework-4.8)\r\n\r\nThere are several more but the concern here is that they are marked as obsolete and there is no indication that there will be a substitute. Because we depend on those, it worries me that they are marked as obsolete. Given that .NET Core has made compatibility a priority, I would suggest that marking them obsolete is premature until there's an actual suitable replacement for us to use. ","Url":"https://github.com/dotnet/corefx/issues/40376","RelatedDescription":"Open issue \"Several COM interop features marked as obsolete\" (#40376)"},{"Id":"481692289","IsPullRequest":false,"CreatedAt":"2019-08-16T16:40:30","Actor":"FluentGuru","Number":"40374","RawContent":null,"Title":"cosmosdb v3 and v2 clients stall on p7 & p8","State":"open","Body":"For some reason, the cosmos db client v3 stalls on read item operations both not on database/containers o store procedure manipulation operations. This only happens on netcore3 p7 & p8. I've been using it happily in all netcore3 releases since p2 and never had this problem.\r\n\r\n_***PS. This issue also happens on the v2 client***_\r\n\r\nThis is the call that causes the stallness:\r\n```\r\nvar doc = await _container.ReadItemAsync<GrainStateEntity>(id, new PartitionKey(partitionKey), new ItemRequestOptions()\r\n                {\r\n                    ConsistencyLevel = _options.GetConsistencyLevel() //Either Session or null. It happens with both\r\n                });\r\n```\r\nThis is my current connection policy\r\n![image](https://user-images.githubusercontent.com/2110596/63183467-00b8a500-c023-11e9-8091-b14fc87b8f6b.png)\r\n","Url":"https://github.com/dotnet/corefx/issues/40374","RelatedDescription":"Open issue \"cosmosdb v3 and v2 clients stall on p7 & p8\" (#40374)"},{"Id":"481690112","IsPullRequest":false,"CreatedAt":"2019-08-16T16:34:26","Actor":"ViktorHofer","Number":"40373","RawContent":null,"Title":"IdFormat_HierarchicalWhenDefaultIsW3CButHierarchicalParentId fails in rolling builds","State":"open","Body":"Test: `System.Diagnostics.Tests.ActivityTests.IdFormat_HierarchicalWhenDefaultIsW3CButHierarchicalParentId`\r\nAffected configuration: `netcoreapp-Linux-Release-x64-RedHat.6.Amd64.Open`\r\nBuild: https://dnceng.visualstudio.com/public/_build/results?buildId=312716&view=ms.vss-test-web.build-test-results-tab&runId=9028500&resultId=136965&paneView=debug\r\n\r\nError message:\r\n```\r\nTimed out after 60000ms waiting for remote process.\\n\\tProcess ID: 2536\\n\\tHandle: 1020\\n\\tName: dotnet\\n\\tMainModule: /home/helixbot/work/2e69404a-55a1-4a35-8282-0f742594bb54/Payload/dotnet\\n\\tStartTime: 8/16/2019 12:45:58 AM\\n\\tTotalProcessorTime: 00:00:00.1100000\\n\r\n```\r\n\r\nStack trace:\r\n```\r\n  at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 131\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\r\n   at System.Diagnostics.Tests.ActivityTests.IdFormat_HierarchicalWhenDefaultIsW3CButHierarchicalParentId() in /_/src/System.Diagnostics.DiagnosticSource/tests/ActivityTests.cs:line 590\r\n```\r\n\r\ncc @lmolkova @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/40373","RelatedDescription":"Open issue \"IdFormat_HierarchicalWhenDefaultIsW3CButHierarchicalParentId fails in rolling builds\" (#40373)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"482079706","IsPullRequest":true,"CreatedAt":"2019-08-19T02:48:48","Actor":"jnm2","Number":"38090","RawContent":null,"Title":"Refactoring to add [DebuggerDisplay(\"{ToString(),nq}\")]","State":"open","Body":"Closes #37990\r\n\r\nℹ May need design review there before merging.","Url":"https://github.com/dotnet/roslyn/pull/38090","RelatedDescription":"Open PR \"Refactoring to add [DebuggerDisplay(\"{ToString(),nq}\")]\" (#38090)"},{"Id":"482053895","IsPullRequest":true,"CreatedAt":"2019-08-19T00:00:32","Actor":"dotnet-bot","Number":"38089","RawContent":null,"Title":"Merge release/dev16.2 to release/dev16.3-preview2","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.3-preview2\ngit reset --hard upstream/release/dev16.3-preview2\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38089","RelatedDescription":"Open PR \"Merge release/dev16.2 to release/dev16.3-preview2\" (#38089)"},{"Id":"481934864","IsPullRequest":true,"CreatedAt":"2019-08-18T22:05:55","Actor":"dotnet-bot","Number":"38080","RawContent":null,"Title":"Merge release/dev16.2 to release/dev16.3-preview2","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2 into release/dev16.3-preview2.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-to-release/dev16.3-preview2\ngit reset --hard upstream/release/dev16.3-preview2\ngit merge upstream/release/dev16.2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-to-release/dev16.3-preview2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38080","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2 to release/dev16.3-preview2\" (#38080)"},{"Id":"482038356","IsPullRequest":false,"CreatedAt":"2019-08-18T21:18:44","Actor":"thetuvix","Number":"38087","RawContent":null,"Title":"Extract Method on part of an expression generates invalid code","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 version 16.2.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Add the following code to a class:\r\n```cs\r\nprivate void Repro()\r\n{\r\n    int i = 1, j = 2;\r\n    int k = i + j + 1;\r\n}\r\n```\r\n2. Select `i + j` and perform an Extract Method refactoring.\r\n\r\n**Expected Behavior**:\r\nExtract Method generates `NewMethod(int i, int j)`:\r\n\r\n```cs\r\nprivate void Repro()\r\n{\r\n    int i = 1, j = 2;\r\n    int k = NewMethod(i, j) + 1;\r\n}\r\n\r\nprivate static int NewMethod(int i, int j)\r\n{\r\n    return i + j;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\nExtract Method generates `NewMethod()` without parameters to pass in `i` and `j`:\r\n\r\n```cs\r\nprivate void Repro()\r\n{\r\n    int i = 1, j = 2;\r\n    int k = NewMethod() + 1;\r\n}\r\n\r\nprivate static int NewMethod()\r\n{\r\n    return i + j;\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38087","RelatedDescription":"Open issue \"Extract Method on part of an expression generates invalid code\" (#38087)"},{"Id":"482034285","IsPullRequest":false,"CreatedAt":"2019-08-18T20:32:58","Actor":"jnm2","Number":"38086","RawContent":null,"Title":"Codegen for `is \"Foo\"` puts redundant brfalse before op_Equality","State":"open","Body":"**Version Used**: master (12 Aug 2019), release mode\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmAAgGEBYAKAG9yCaDgB7ejAgWQAocBGABgIDNGASmq0qZWhII4A7P0YE0UAgCIAQhATKA3CJoBfcgbJA===\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nclass C\r\n{\r\n    bool M(string foo)\r\n    {\r\n        return foo is \"Bar\";\r\n    }\r\n}\r\n```\r\n\r\nReal-world example:\r\n\r\n```cs\r\nreturn memberDeclaration is MethodDeclarationSyntax\r\n{\r\n    Arity: 0,\r\n    // Gens redundant local for ValueText in order to do redundant brfalse on the value before\r\n    // calling op_Equality   ↓\r\n    Identifier: { ValueText: nameof(ToString) },\r\n\r\n    // ...\r\n```\r\n\r\n**Actual**:\r\n\r\n```\r\nIL_0000: ldarg.1\r\nIL_0001: brfalse.s IL_000f\r\n\r\nIL_0003: ldarg.1\r\nIL_0004: ldstr \"Bar\"\r\nIL_0009: call bool [mscorlib]System.String::op_Equality(string, string)\r\nIL_000e: ret\r\n\r\nIL_000f: ldc.i4.0\r\nIL_0010: ret\r\n```\r\n\r\n**Actual** (C# equivalent):\r\n\r\n```cs\r\nreturn foo != null && foo == \"Bar\";\r\n```\r\n\r\n**Expected**:\r\n\r\n```\r\nIL_0000: ldarg.1\r\nIL_0001: ldstr \"Bar\"\r\nIL_0006: call bool [mscorlib]System.String::op_Equality(string, string)\r\nIL_000b: ret\r\n```\r\n\r\n**Expected** (C# equivalent):\r\n\r\n```cs\r\nreturn foo == \"Bar\";\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38086","RelatedDescription":"Open issue \"Codegen for `is \"Foo\"` puts redundant brfalse before op_Equality\" (#38086)"},{"Id":"482013102","IsPullRequest":false,"CreatedAt":"2019-08-18T17:04:34","Actor":"svick","Number":"38085","RawContent":null,"Title":"Restore.cmd fails","State":"closed","Body":"**Version Used**: master (ecece2e55f991c1bf05f6634)\r\n\r\n**Steps to Reproduce**:\r\n\r\n0. `git clean -xdf`\r\n1. `restore.cmd`\r\n\r\n**Expected Behavior**:\r\n\r\nRestore works.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nRoslyn.sln:\r\n  Restore completed in 500,59 ms for C:\\Users\\Svick\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19416.16\\too\r\n  ls\\Tools.proj.\r\nC:\\Program Files\\dotnet\\sdk\\2.2.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5\r\n): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low\r\ner, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\code\\roslyn\\src\\Compilers\\CSharp\\Test\\Symbol\\Micr\r\nosoft.CodeAnalysis.CSharp.Symbol.UnitTests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5\r\n): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low\r\ner, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\r\n\\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.2.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5\r\n): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low\r\ner, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\code\\roslyn\\src\\Compilers\\CSharp\\Test\\Symbol\\Micr\r\nosoft.CodeAnalysis.CSharp.Symbol.UnitTests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5\r\n): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or low\r\ner, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\r\n\\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]\r\n    0 Warning(s)\r\n    2 Error(s)\r\n\r\nTime Elapsed 00:00:08.78\r\nBuild failed.\r\n```\r\n\r\nI'm not sure why it's using .Net Core SDK 2.2.401, I have 3.0.100-preview6-012264 and 3.0.100-preview8-013656 installed and I also thought `restore.cmd` does not depend on having a specific version of the SDK installed (it's certainly not mentioned in [the documentation](https://github.com/dotnet/roslyn/blob/master/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md#working-with-the-code)).","Url":"https://github.com/dotnet/roslyn/issues/38085","RelatedDescription":"Closed issue \"Restore.cmd fails\" (#38085)"},{"Id":"482006736","IsPullRequest":false,"CreatedAt":"2019-08-18T15:31:18","Actor":"tndata","Number":"38084","RawContent":null,"Title":"Unexpected Dereference of a possibly null reference warning","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 16.2.2\r\n.NET Core 3 , Preview 8\r\n\r\n**Steps to Reproduce**:\r\nWhen I compile this code, I get a Dereference of a possibly null reference warning in the Console.WriteLine statement.\r\n\r\n```\r\nusing System;\r\n\r\n#nullable enable\r\npublic class Test\r\n{\r\n\r\n    public void DoStuff(Customer? customer)\r\n    {\r\n        if (customer != null)\r\n        {\r\n            if (customer?.Name?.Contains(\"hello\") ?? false)\r\n            {\r\n                Console.WriteLine(customer.Name);  //warning here\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npublic class Customer\r\n{\r\n    public string Name = \"Hello\";\r\n}\r\n```\r\n\r\n\r\nSee the code here:\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATARgFgAoEgYgDsBXAGxomBrgAI4KGmTsBmZvZgCpxYJAN4kSzKX17YALMwAiAewDKMKgDNNACgDCVWMrCIA/MwDGhmMcQBKSdPHFpr5gEtNzHVaMmEzACEALzM1HQOLm5SztHRnt6+Nv6mAHQAchAmaXrKFDAQ7hRQOgBEABZwdMqldsym5poQNFBwkXFusR1x2PgAnD7WtggZWW0A3I7dzAC+U25zUVKLi1yyuMwGfohi8zx8+AAMzJkmzKGlABJVNDWTxDNAA=\r\n\r\n\r\n\r\n**Expected Behavior**:\r\nI would expect no warnings from the code, because the customer can never be null when the Console WriteLine is called. \r\n\r\n\r\n**Actual Behavior**:\r\nI get a warning \"warning CS8602: Dereference of a possibly null reference.\"","Url":"https://github.com/dotnet/roslyn/issues/38084","RelatedDescription":"Open issue \"Unexpected Dereference of a possibly null reference warning\" (#38084)"},{"Id":"482053870","IsPullRequest":false,"CreatedAt":"2019-08-18T14:29:32","Actor":"devhl-labs","Number":"38088","RawContent":null,"Title":"Null Check Before Foreach","State":"open","Body":"I would like to request adding the ? null check before a foreach loop.\r\n\r\n```\r\nforeach(var item in myObject.MyNullableCollection?)\r\n{\r\n\r\n}\r\n```\r\n\r\nNotice the ? at the end.  I'm aware there are a few other ways to handle cases where MyNullableCollection is null, but this looks cleaner to me.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38088","RelatedDescription":"Open issue \"Null Check Before Foreach\" (#38088)"},{"Id":"481942628","IsPullRequest":false,"CreatedAt":"2019-08-18T01:36:31","Actor":"stephentoub","Number":"38083","RawContent":null,"Title":"IDE refactoring for cascading ifs?","State":"open","Body":"Consider a method like:\r\n```C#\r\npublic static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options)\r\n{\r\n    if (compareInfo == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(compareInfo));\r\n    }\r\n\r\n    if (options == CompareOptions.Ordinal)\r\n    {\r\n        return StringComparer.Ordinal;\r\n    }\r\n\r\n    if (options == CompareOptions.OrdinalIgnoreCase)\r\n    {\r\n        return StringComparer.OrdinalIgnoreCase;\r\n    }\r\n\r\n    return new CultureAwareComparer(compareInfo, options);\r\n}\r\n```\r\nIt can be expressed more succinctly as e.g.\r\n```C#\r\npublic static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options) =>\r\n    compareInfo is null ? throw new ArgumentNullException(nameof(compareInfo)) :\r\n    options == CompareOptions.Ordinal ? StringComparer.Ordinal :\r\n    options == CompareOptions.OrdinalIgnoreCase ? StringComparer.OrdinalIgnoreCase :\r\n    new CultureAwareComparer(compareInfo, options);\r\n}\r\n```\r\nor e.g.\r\n```C#\r\npublic static StringComparer GetStringComparer(this CompareInfo compareInfo, CompareOptions options) =>\r\n    compareInfo is null ? throw new ArgumentNullException(nameof(compareInfo)) :\r\n    options switch\r\n    {\r\n        CompareOptions.Ordinal => StringComparer.Ordinal,\r\n        CompareOptions.OrdinalIgnoreCase => StringComparer.OrdinalIgnoreCase,\r\n        _ => new CultureAwareComparer(compareInfo, options)\r\n    }\r\n}\r\n```\r\nIt'd be nice if there were an IDE refactoring for that.","Url":"https://github.com/dotnet/roslyn/issues/38083","RelatedDescription":"Open issue \"IDE refactoring for cascading ifs?\" (#38083)"},{"Id":"481941055","IsPullRequest":false,"CreatedAt":"2019-08-18T01:06:43","Actor":"stephentoub","Number":"38082","RawContent":null,"Title":"IDE0016 incorrectly reorders statements, introducing behavioral change","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    static void DoWork(string value)\r\n    {\r\n        if (value == null) throw new ArgumentNullException(nameof(value));\r\n        DoExpensiveWork();\r\n        if (IsInconsistentState) throw new InvalidOperationException();\r\n        Value = value;\r\n    }\r\n\r\n    public static string Value { get; private set; }\r\n\r\n    static void DoExpensiveWork() { }\r\n    static bool IsInconsistentState => false;\r\n}\r\n```\r\nRun the offered IDE0016.\r\n\r\n**Expected Behavior**:\r\nIDE0016 is not offered.\r\n\r\n**Actual Behavior**:\r\nIDE0016 is offered, and running it changes the code to:\r\n```C#\r\nstatic void DoWork(string value)\r\n{\r\n    DoExpensiveWork();\r\n    if (IsInconsistentState) throw new InvalidOperationException();\r\n    Value = value ?? throw new ArgumentNullException(nameof(value));\r\n}\r\n```\r\nThis is bad for several reasons:\r\n1. It's changing the order in which exceptions could occur.\r\n2. It's resulting in a bunch of work being done that should have been avoided.\r\n3. Both of those more generally mean it's changing program behavior.\r\n\r\n(I could have sworn I opened an issue on this a while ago, but I can't find it now.  It just bit me again, though, so I'm opening one in case that one is lost somewhere.)","Url":"https://github.com/dotnet/roslyn/issues/38082","RelatedDescription":"Open issue \"IDE0016 incorrectly reorders statements, introducing behavioral change\" (#38082)"},{"Id":"481940523","IsPullRequest":false,"CreatedAt":"2019-08-18T00:55:51","Actor":"stephentoub","Number":"38081","RawContent":null,"Title":"IDE0016 is crashing on System.Private.CoreLib","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03\r\n\r\n**Steps to Reproduce**:\r\nOpen System.Private.CoreLib in dotnet/coreclr and run IDE0016's fix all.\r\n```\r\nSystem.InvalidCastException\r\n  HResult=0x80004002\r\n  Message=Unable to cast object of type 'Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax' to type 'Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax'.\r\n  Source=Microsoft.CodeAnalysis.CSharp.Workspaces\r\n  StackTrace:\r\n   at Microsoft.CodeAnalysis.CSharp.CodeGeneration.CSharpSyntaxGenerator.ThrowExpression(SyntaxNode expression) in /_/src/Workspaces/CSharp/Portable/CodeGeneration/CSharpSyntaxGenerator.cs:line 3251\r\n```\r\n![image](https://user-images.githubusercontent.com/2642209/63218783-af96d700-c130-11e9-908a-bd2b910c8af2.png)\r\n\r\nIt appears to be while processing ArrayList.cs:\r\n![image](https://user-images.githubusercontent.com/2642209/63218792-14523180-c131-11e9-958d-902644d86e3b.png)\r\n\r\nAnd it appears to be very confused, with the `assignmentValue` being for the attribute in the DebugView at the end of the file:\r\n![image](https://user-images.githubusercontent.com/2642209/63218799-38157780-c131-11e9-8df2-9022e5be7156.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38081","RelatedDescription":"Open issue \"IDE0016 is crashing on System.Private.CoreLib\" (#38081)"},{"Id":"481927059","IsPullRequest":true,"CreatedAt":"2019-08-17T23:13:44","Actor":"dotnet-maestro[bot]","Number":"38079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38079)"},{"Id":"481922622","IsPullRequest":false,"CreatedAt":"2019-08-17T20:17:47","Actor":"JohanLarsson","Number":"38078","RawContent":null,"Title":"Expose  CSharpSyntaxFactsService.Instance","State":"open","Body":"It contains useful helpers for third party analyzers.","Url":"https://github.com/dotnet/roslyn/issues/38078","RelatedDescription":"Open issue \"Expose  CSharpSyntaxFactsService.Instance\" (#38078)"},{"Id":"481911384","IsPullRequest":true,"CreatedAt":"2019-08-17T18:01:34","Actor":"InRedikaWB","Number":"38077","RawContent":null,"Title":"Add missed space in markdown title","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38077","RelatedDescription":"Open PR \"Add missed space in markdown title\" (#38077)"},{"Id":"481877667","IsPullRequest":false,"CreatedAt":"2019-08-17T11:43:19","Actor":"ronnygunawan","Number":"38075","RawContent":null,"Title":"Support NotNullIfNotNull on Task<T?> return type","State":"open","Body":"**Version Used**: .NET Core 3.0 preview 8\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n[return: NotNullIfNotNull(\"value\")]\r\nstatic Task<string?> PassThroughAsync(string? value) {\r\n\treturn Task.FromResult(value);\r\n}\r\n\r\nstatic void Main(string[] args) {\r\n\tstring s = PassThroughAsync(\"Hello World!\").Result; // Warning CS8600  Converting null literal or possible null value to non - nullable type.\r\n\tConsole.WriteLine(s);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warning\r\n\r\n**Actual Behavior**:\r\nWarning CS8600  Converting null literal or possible null value to non - nullable type.","Url":"https://github.com/dotnet/roslyn/issues/38075","RelatedDescription":"Open issue \"Support NotNullIfNotNull on Task<T?> return type\" (#38075)"},{"Id":"481876896","IsPullRequest":false,"CreatedAt":"2019-08-17T11:32:14","Actor":"miloush","Number":"38074","RawContent":null,"Title":"Local functions not available in intellisense/autocomplete","State":"open","Body":"**Version Used**: 16..3.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Loca|\r\n\r\n            void Local() { }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n**Expected Behavior**: Local function offered in autocomplete list and provided with intellisense support when typing arguments.\r\n\r\n**Actual Behavior**: Local function not in the list and gets colorized only after arguments match the signature.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38074","RelatedDescription":"Open issue \"Local functions not available in intellisense/autocomplete\" (#38074)"},{"Id":"481873083","IsPullRequest":false,"CreatedAt":"2019-08-17T10:39:00","Actor":"tndata","Number":"38073","RawContent":null,"Title":"Provide the C# 8 nullable attributes as a NuGet package","State":"open","Body":"In C# 8 (.NET Core 3) you added new nullability-attributes to allow us to manually annotate types with their nullability.\r\n\r\nLocated here:\r\nroslyn/src/Workspaces/Core/Portable/Utilities/NullableHelpers/NullableAttributes.cs\r\n\r\nWhy not provide these attributes as a stand-alone NuGet package, so that legacy packages (.NET Core <2.x / .NET Standard <2.1) libraries can be annotated with these attributes as well.\r\n\r\nBenefits:\r\n* We can start annotating our legacy libraries \r\n* We would get more nullability warnings in our .NET Core 3 applications\r\n\r\nThe alternative is to manually add these attributes to my legacy libraries, but that feels a bit dirty. The nice thing is that the C# 8 compiler uses these attributes when used in legacy libraries.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38073","RelatedDescription":"Open issue \"Provide the C# 8 nullable attributes as a NuGet package\" (#38073)"},{"Id":"481854935","IsPullRequest":true,"CreatedAt":"2019-08-17T06:34:43","Actor":"paul1956","Number":"38072","RawContent":null,"Title":"Needs Design Review: First pass at fixing the formatting of VB Line Continuation Formatting","State":"open","Body":"This addresses _ on line without code, with or without comment. This uses existing Formatting Rules which don't understand VB Line Continuation on blank lines or followed by comment. The results need a design review. I temporarily renamed the effected tests by added 3 _, they could be removed but it would be harder to see the effects of any changes, these are the only tests that I found that hit the code I changed. One area that needs review is the alignment of lines under lines with _ comment.","Url":"https://github.com/dotnet/roslyn/pull/38072","RelatedDescription":"Open PR \"Needs Design Review: First pass at fixing the formatting of VB Line Continuation Formatting\" (#38072)"},{"Id":"481836009","IsPullRequest":false,"CreatedAt":"2019-08-17T02:04:14","Actor":"JasonL663","Number":"38071","RawContent":null,"Title":"CSharpCompilation EmitDifference fails on Script SyntaxTrees","State":"open","Body":"**Version Used**: 2.9.4\r\n\r\nI have been using Roslyn's EnC compiler to generate raw IL and Metadata blobs without needing to compile and parse whole dotNET modules. So far, things have worked as intended and I can freely convert most arbitrary segments of C# code without any issues.\r\n\r\nHowever, when attempting to compile a syntax tree parsed using `SourceCodeKind.Script`, the `EmitDifference` call throws a `System.InvalidOperationException`:\r\n```\r\n'This program location is thought to be unreachable.'\r\n   at Microsoft.Cci.ReferenceIndexer.ProcessMethodBody(IMethodDefinition method)\r\n   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(IMethodDefinition method)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol.Microsoft.Cci.IReference.Dispatch(MetadataVisitor visitor)\r\n   at Microsoft.Cci.MetadataVisitor.Visit(ITypeDefinitionMember typeMember)\r\n   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(ITypeDefinitionMember typeMember)\r\n   at Microsoft.Cci.MetadataVisitor.Visit(IEnumerable`1 methods)\r\n   at Microsoft.Cci.ReferenceIndexerBase.Visit(ITypeDefinition typeDefinition)\r\n   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(ITypeDefinition typeDefinition)\r\n   at Microsoft.Cci.MetadataVisitor.Visit(IEnumerable`1 types)\r\n   at Microsoft.CodeAnalysis.Emit.DeltaMetadataWriter.DeltaReferenceIndexer.Visit(CommonPEModuleBuilder module)\r\n   at Microsoft.Cci.MetadataWriter.CreateIndices()\r\n   at Microsoft.Cci.MetadataWriter.BuildMetadataAndIL(PdbWriter nativePdbWriterOpt, BlobBuilder ilBuilder, BlobBuilder mappedFieldDataBuilder, BlobBuilder managedResourceDataBuilder, Blob& mvidFixup, Blob& mvidStringFixup)\r\n   at Microsoft.Cci.MetadataWriter.WriteMetadataAndIL(PdbWriter nativePdbWriterOpt, Stream metadataStream, Stream ilStream, Stream portablePdbStreamOpt, MetadataSizes& metadataSizes)\r\n   at Microsoft.CodeAnalysis.Compilation.SerializeToDeltaStreams(CommonPEModuleBuilder moduleBeingBuilt, EmitBaseline baseline, DefinitionMap definitionMap, SymbolChanges changes, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, DiagnosticBag diagnostics, Func`2 testSymWriterFactory, String pdbFilePath, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Emit.EmitHelpers.EmitDifference(CSharpCompilation compilation, EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CompilationTestData testData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CompilationTestData testData, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Compilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Func`2 isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Compilation.EmitDifference(EmitBaseline baseline, IEnumerable`1 edits, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection`1 updatedMethods, CancellationToken cancellationToken)\r\n   at Program.Main(String[] args) in Program.cs:line 50\r\n```\r\n\r\nThe exception is thrown at the indexing step just before emitting the IL and Metadata to their respective streams. The reason it gets raised is because the `Script.<Main>` entrypoint function of the generated `Script` class has no body and was not compiled in the preceding compilation phase.\r\n\r\nThe script entrypoint would normally get compiled [here](https://github.com/dotnet/roslyn/blob/2802137e22c19153028c5565f6350cbdee9c0060/src/Compilers/CSharp/Portable/Compiler/MethodCompiler.cs#L132), but since a non-null `filterOpt` was passed in [here](https://github.com/dotnet/roslyn/blob/95c1a18a40ee1418c394c4376874828308220f11/src/Compilers/CSharp/Portable/Emitter/EditAndContinue/EmitHelpers.cs#L71), this step gets skipped, and the script entrypoint is left without a body.\r\n\r\nThe error appears to be the enclosing `filterOpt is null` condition which seems to be unintentionally suppressing the compilation of the entrypoint.\r\n\r\nI have added a minimal repro below. Note how changing the `SourceCodeKind` of the empty syntax tree from `Script` to `Regular` allows the compilation to succeed without any exceptions. Also note that changing the `CSharpCompilation.Create` to `CSharpCompilation.CreateScriptCompilation` does not change the result.\r\n\r\n**Repro Code**:\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection.Metadata;\r\nusing System.Runtime.InteropServices;\r\nusing Microsoft.CodeAnalysis;\r\nusing Microsoft.CodeAnalysis.CSharp;\r\nusing Microsoft.CodeAnalysis.Emit;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        byte[] metadataRaw = new byte[] { 0x42, 0x53, 0x4A, 0x42, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x76, 0x34, 0x2E, 0x30, 0x2E, 0x33, 0x30, 0x33, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x23, 0x7E, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x23, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x23, 0x55, 0x53, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x42, 0x6C, 0x6F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x25, 0x33, 0x00, 0x16, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD5, 0xF2, 0xD0, 0xE5, 0x2C, 0x73, 0x6E, 0x4E, 0xA5, 0xE5, 0x63, 0xAC, 0x00, 0x38, 0xDE, 0xD3, 0x00, 0x01, 0x00, 0x00 };\r\n        GCHandle metadataHandle = GCHandle.Alloc(metadataRaw, GCHandleType.Pinned);\r\n        ModuleMetadata emptyMetadata = ModuleMetadata.CreateFromMetadata(metadataHandle.AddrOfPinnedObject(), metadataRaw.Length);\r\n\r\n        Func<MethodDefinitionHandle, EditAndContinueMethodDebugInformation> emptyDebugProvider = _ => default(EditAndContinueMethodDebugInformation);\r\n        Func<MethodDefinitionHandle, StandaloneSignatureHandle> emptyLocalsProvider = _ => default(StandaloneSignatureHandle);\r\n        EmitBaseline emptyBaseline = EmitBaseline.CreateInitialBaseline(emptyMetadata, emptyDebugProvider, emptyLocalsProvider, false);\r\n\r\n        CSharpParseOptions parseOpts = new CSharpParseOptions(LanguageVersion.Default, DocumentationMode.Parse, SourceCodeKind.Script);\r\n        SyntaxTree emptySyntaxTree = SyntaxFactory.ParseSyntaxTree(\"\", parseOpts);\r\n\r\n        MetadataReference mscorlib = MetadataReference.CreateFromFile(typeof(object).Assembly.Location);\r\n        MetadataReference[] references = new[] { mscorlib };\r\n\r\n        CSharpCompilationOptions compileOpts = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\r\n        CSharpCompilation compilation = CSharpCompilation.Create(\"Context\", new SyntaxTree[] { emptySyntaxTree }, references, compileOpts);\r\n\r\n        IEnumerable<INamespaceOrTypeSymbol> symbols = compilation.GlobalNamespace.GetMembers(\"Script\");\r\n        IEnumerable<SemanticEdit> edits = symbols.Select(x => new SemanticEdit(SemanticEditKind.Insert, null, x));\r\n        MethodDefinitionHandle[] methods = new MethodDefinitionHandle[0];\r\n\r\n        using (MemoryStream ilStream = new MemoryStream())\r\n        using (MemoryStream metaStream = new MemoryStream())\r\n        using (MemoryStream pdbStream = new MemoryStream())\r\n        {\r\n            compilation.EmitDifference(emptyBaseline, edits, metaStream, ilStream, pdbStream, methods);\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38071","RelatedDescription":"Open issue \"CSharpCompilation EmitDifference fails on Script SyntaxTrees\" (#38071)"},{"Id":"481824251","IsPullRequest":true,"CreatedAt":"2019-08-17T01:30:07","Actor":"dotnet-bot","Number":"38067","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38067","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#38067)"},{"Id":"481831923","IsPullRequest":true,"CreatedAt":"2019-08-17T01:12:12","Actor":"genlu","Number":"38070","RawContent":null,"Title":"Don't include unchangeable references as renamable references","State":"open","Body":"Fix feedback https://developercommunity.visualstudio.com/content/problem/682938/csharperenametrackingcodefixprovider-encountered-a.html\r\n\r\nI tried an alternative approach @jasonmalinowski suggested, i.e. creating a more general helper like\r\n```cs\r\nSolution ExcludeDisallowedChange(Solution oldSolution, Solution newSolution);\r\n```\r\nHowever, simply replacing the text/syntax in new document with the one from old one doesn't seem to work, because later when we apply the change, it just check the ref equality of the old and new DocumentState in `GetChangedDocuments`. So I ended up having the \"fixed\" document still being flagged as changed.","Url":"https://github.com/dotnet/roslyn/pull/38070","RelatedDescription":"Open PR \"Don't include unchangeable references as renamable references\" (#38070)"},{"Id":"481827680","IsPullRequest":false,"CreatedAt":"2019-08-17T00:30:12","Actor":"jnm2","Number":"38069","RawContent":null,"Title":"Generated Equals(T) method has pointless [AllowNull] when T is a value type","State":"open","Body":"**Version Used**: Visual Studio 16.2.2\r\n\r\nGenerate equality members for:\r\n\r\n```cs\r\nstruct Foo\r\n{\r\n    public int Bar { get; }\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```cs\r\n    public bool Equals([AllowNull] Foo other)\r\n    {\r\n        return Bar == other.Bar;\r\n    }\r\n```\r\n\r\nExpected behavior: `[AllowNull]` should not be added for value types.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38069","RelatedDescription":"Open issue \"Generated Equals(T) method has pointless [AllowNull] when T is a value type\" (#38069)"},{"Id":"481827242","IsPullRequest":false,"CreatedAt":"2019-08-17T00:26:00","Actor":"jnm2","Number":"38068","RawContent":null,"Title":"Generated Equals(object) signature does not match nullability of base method","State":"open","Body":"**Version Used**: VS 16.3 Preview 2\r\n\r\nGenerate equality members for:\r\n\r\n```cs\r\nstruct Foo\r\n{\r\n    public int Bar { get; }\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```cs\r\n    // CS8610 Nullability of reference types in type of parameter 'obj' doesn't match overridden\r\n    // member.           ↓\r\n    public override bool Equals(object obj)\r\n    {\r\n        return obj is Foo foo && Equals(foo);\r\n    }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38068","RelatedDescription":"Open issue \"Generated Equals(object) signature does not match nullability of base method\" (#38068)"},{"Id":"481815213","IsPullRequest":false,"CreatedAt":"2019-08-16T23:07:03","Actor":"vsfeedback","Number":"38066","RawContent":null,"Title":"IDE0029 Coallesce Fix is Formatted Badly","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/694600/ide0029-coallesce-fix-is-formatted-badly.html)._\r\n\r\n---\r\nGiven the following _illustrative_ code:\r\n```\r\n\tpublic class File\r\n\t{\r\n\t\tprivate string Foo;\r\n\r\n\t\tpublic File(string Foo)\r\n\t\t{\r\n\t\t\tthis.Foo = Foo == null\r\n\t\t\t\t? \"\"\r\n\t\t\t\t: Foo;\r\n\t\t}\r\n\t}\r\n```\r\nI get an IDE0029 suggestion: &quot;Null check can be simplified.  Use coallesce expression instead of conditional expression.&quot;   I adore the NCO, but after the fix I get:\r\n```\r\n\t\t\tthis.Foo = Foo ?? \"\"\r\n;\r\n```\r\nNote that the semicolon is on the _following line_, rather than at the end of the statement.  This problem appears to have been introduced in 16.2.2.  Not sure where the fault lies -- could be the IDE, my setup, or Roslynator 2019...  Thought I should report it anyway.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 8/15/2019, 02:40 AM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38066","RelatedDescription":"Open issue \"IDE0029 Coallesce Fix is Formatted Badly\" (#38066)"},{"Id":"481814684","IsPullRequest":false,"CreatedAt":"2019-08-16T23:03:57","Actor":"vsfeedback","Number":"38065","RawContent":null,"Title":"VS 16.1.6 - Collection Initializer Comment Bug","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/696534/vs-1616-collection-initializer-comment-bug.html)._\r\n\r\n---\r\nAutocomplete interferes when I try to type a space then a comment on a collection initializer line.\r\ne.g. I'm expecting to get ```[new Version(1, 1)] = new Version(2, 3, 4, 0), /```\r\nbut instead I get ```[new Version(1, 1)] = new Version(2, 3, 4, 0), Version/```\r\n\r\nHere is a code sample:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Collection_Initializer_Comment_Bug\r\n{\r\n    public static class C\r\n    {\r\n        public static readonly Dictionary<Version, Version> TestDictionary = new Dictionary<Version, Version>\r\n        {\r\n            [new Version(1, 0)] = new Version(1, 2, 3, 0), // Test comment\r\n            [new Version(1, 1)] = new Version(2, 3, 4, 0),\r\n        };\r\n    }\r\n}\r\n```\r\n\r\nSee attached screenshot.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Visual Studio Feedback System on 8/15/2019, 07:50 PM: \r\n\r\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n\r\n---\r\n### Original Solutions\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38065","RelatedDescription":"Open issue \"VS 16.1.6 - Collection Initializer Comment Bug\" (#38065)"},{"Id":"481812225","IsPullRequest":true,"CreatedAt":"2019-08-16T22:50:41","Actor":"jasonmalinowski","Number":"38064","RawContent":null,"Title":"Fix Metadata as Source caching stale generated files","State":"open","Body":"We maintain a cache of assembly file names and symbols to the generated file. We failed to ever include a version of some kind, so if the metadata file changed on disk, you would continue to get the old generated file.\r\n\r\nCommit-at-a-time is recommended; I first nullable annotated the feature before doing work in it.","Url":"https://github.com/dotnet/roslyn/pull/38064","RelatedDescription":"Open PR \"Fix Metadata as Source caching stale generated files\" (#38064)"},{"Id":"481810649","IsPullRequest":true,"CreatedAt":"2019-08-16T22:41:58","Actor":"RikkiGibson","Number":"38063","RawContent":null,"Title":"Check nullability for delegate creation arguments","State":"open","Body":"Closes #37984\r\n\r\nNote that the nullability mismatch checks were already happening for method groups and lambdas, but not for delegate arguments.","Url":"https://github.com/dotnet/roslyn/pull/38063","RelatedDescription":"Open PR \"Check nullability for delegate creation arguments\" (#38063)"},{"Id":"481802175","IsPullRequest":false,"CreatedAt":"2019-08-16T22:05:40","Actor":"TessenR","Number":"38062","RawContent":null,"Title":"Roslyn fails to update state of a member dereferenced via property initializer to non-null","State":"closed","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (13 Aug 2019)\r\nLatest commit a08336 by David:\r\nMerge pull request #37916 from dibarbet/partial_load_str\r\n\r\nUpdate partial load dialog string to better match task center.\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  C? f;\r\n    \r\n  static void Main()\r\n  {\r\n    var c = new C() { f = { f = null }}; // CS8602, correct\r\n    c.f.ToString(); // CS8602, incorrect\r\n  }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings for `c.f.ToString()` \r\n\r\n**Actual Behavior**:\r\n`warning CS8602: Dereference of a possibly null reference.` is reported for `c.f.ToString()`.\r\n\r\n**Notes**\r\nThe code above is equivalent to the following:\r\n```\r\nvar c = new C();\r\nc.f.f = null; // CS8602, correct\r\nc.f.ToString();\r\n```\r\nin this example however Roslyn correctly updates the field's state to non-null but fails to do so if object initializer syntax is used.","Url":"https://github.com/dotnet/roslyn/issues/38062","RelatedDescription":"Closed issue \"Roslyn fails to update state of a member dereferenced via property initializer to non-null\" (#38062)"},{"Id":"481793100","IsPullRequest":false,"CreatedAt":"2019-08-16T21:29:38","Actor":"ryzngard","Number":"38061","RawContent":null,"Title":"SymbolKey loses nullability information","State":"open","Body":"When using `ISymbol.GetSymbolKey()` if the symbol is an `ITypeSymbol` the nullability information is lost.  Possibly related to #30326 ","Url":"https://github.com/dotnet/roslyn/issues/38061","RelatedDescription":"Open issue \"SymbolKey loses nullability information\" (#38061)"},{"Id":"481792542","IsPullRequest":false,"CreatedAt":"2019-08-16T21:27:43","Actor":"TessenR","Number":"38060","RawContent":null,"Title":"Roslyn incorrectly reports empty property initializers as possible dereferences","State":"open","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (13 Aug 2019)\r\nLatest commit a08336 by David:\r\nMerge pull request #37916 from dibarbet/partial_load_str\r\n\r\nUpdate partial load dialog string to better match task center.\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile adn run the following code\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  C? f;\r\n    \r\n  static void Main()\r\n  {\r\n    new C() { f = {  }};\r\n  }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings. The field `f` will not be dereferened since there's nothing to initialize here.\r\n\r\n**Actual Behavior**:\r\n`warning CS8602: Dereference of a possibly null reference.` is reported for `f = { }` but the code runs without exceptions\r\n\r\n**Notes**\r\nIt seems like this corner case was handled incorrectly when fixing https://github.com/dotnet/roslyn/issues/32495","Url":"https://github.com/dotnet/roslyn/issues/38060","RelatedDescription":"Open issue \"Roslyn incorrectly reports empty property initializers as possible dereferences\" (#38060)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"482089932","IsPullRequest":false,"CreatedAt":"2019-08-19T03:41:42","Actor":"maikebing","Number":"7706","RawContent":null,"Title":"use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it A BUG?","State":"open","Body":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n","Url":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Open issue \"use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it A BUG?\" (#7706)"},{"Id":"481966265","IsPullRequest":true,"CreatedAt":"2019-08-18T17:14:39","Actor":"jkotas","Number":"7704","RawContent":null,"Title":"Account for .NET Core 3.0 Preview 8 SDK changes","State":"closed","Body":"Fixes #7703","Url":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Closed or merged PR \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704)"},{"Id":"481901315","IsPullRequest":false,"CreatedAt":"2019-08-18T17:14:39","Actor":"SomeAnon42","Number":"7703","RawContent":null,"Title":"dotnet publish is broken by a preview 8 SDK change","State":"closed","Body":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)","Url":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703)"},{"Id":"481966894","IsPullRequest":true,"CreatedAt":"2019-08-18T09:51:55","Actor":"Dotnet-GitSync-Bot","Number":"7705","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7705)"},{"Id":"481877106","IsPullRequest":true,"CreatedAt":"2019-08-18T08:04:03","Actor":"Dotnet-GitSync-Bot","Number":"7702","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7702)"},{"Id":"481699348","IsPullRequest":true,"CreatedAt":"2019-08-16T19:09:38","Actor":"Dotnet-GitSync-Bot","Number":"7701","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7701","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7701)"},{"Id":"481593799","IsPullRequest":true,"CreatedAt":"2019-08-16T12:47:50","Actor":"MichalStrehovsky","Number":"7700","RawContent":null,"Title":"Implement getILIntrinsicImplementation and friends","State":"open","Body":"This ports a couple handcrafted IL intrinsics from CoreCLR (some of which are required for correctness and some only for perf). See code around getILIntrinsicImplementation in CoreCLR's JitInterface.\r\n\r\nThis is needed to be able to compile an actually working 3.0 R2R CoreLib.\r\n\r\nI've used CoreRT's `ILProvider` instead of handcrafting buffers with IL bytes like crossgen does. It's more comfortable on the generation side and it also lets us share the provider for `Unsafe` intrinsics with what we already wrote for full AOT. But we need to fix up tokens in the generated IL in JitInterface...\r\n\r\nThe `FindGenericMethodArgTypeSpec` also exists in crossgen (under the same name).  It's part of the token rewriting business. It's kind of gross, but it works.","Url":"https://github.com/dotnet/corert/pull/7700","RelatedDescription":"Open PR \"Implement getILIntrinsicImplementation and friends\" (#7700)"},{"Id":"480667183","IsPullRequest":true,"CreatedAt":"2019-08-15T18:29:56","Actor":"MichalStrehovsky","Number":"7693","RawContent":null,"Title":"Match PE headers with Crossgen","State":"closed","Body":"Some of these look important. Others I only did for completeness and I don't think they matter much.","Url":"https://github.com/dotnet/corert/pull/7693","RelatedDescription":"Closed or merged PR \"Match PE headers with Crossgen\" (#7693)"},{"Id":"481147068","IsPullRequest":true,"CreatedAt":"2019-08-15T16:03:55","Actor":"MichalStrehovsky","Number":"7697","RawContent":null,"Title":"Remove rdata section","State":"closed","Body":"To align with crossgen and save up to 4 kB in file size (less section padding).","Url":"https://github.com/dotnet/corert/pull/7697","RelatedDescription":"Closed or merged PR \"Remove rdata section\" (#7697)"},{"Id":"481213555","IsPullRequest":false,"CreatedAt":"2019-08-15T15:44:53","Actor":"developervariety","Number":"7699","RawContent":null,"Title":"Linux: No input file","State":"open","Body":"![ubuntu_iMCjVX1XZj](https://user-images.githubusercontent.com/47051828/63106951-f5e20f80-bf51-11e9-97aa-0f1d2e677b21.png)\r\n\r\nI compiled with WSL yesterday on Ubuntu 18.04, and when it finished compiling I installed the package. I got nothing really from it, just aborted a second later.","Url":"https://github.com/dotnet/corert/issues/7699","RelatedDescription":"Open issue \"Linux: No input file\" (#7699)"},{"Id":"481128438","IsPullRequest":true,"CreatedAt":"2019-08-15T14:20:30","Actor":"Dotnet-GitSync-Bot","Number":"7696","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7696","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7696)"},{"Id":"481157926","IsPullRequest":false,"CreatedAt":"2019-08-15T13:45:01","Actor":"gtbuchanan","Number":"7698","RawContent":null,"Title":"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition","State":"open","Body":"I have a UWP app (`Ewn.Mobile.UWP`) I have been unsuccessfully trying to build in release mode with .NET Native for weeks now. Many of my issues seem to be stemming from a lack of a 64-bit version of ILC. However, I've gotten to a point where I at least don't get an `OutOfMemoryException`. As mentioned in #5905 and https://github.com/dotnet/reactive/issues/899, I've implemented the following compiler flags in my csproj:\r\n\r\n```xml\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n```\r\n\r\nHowever, I receive the following error during compilation related to one of our internal NuGet packages:\r\n\r\n### ilclog.csv\r\n```csv\r\n\"Message\",Low,\"D:\\a\\1\\s\\src\\Ewn.Extensions\\CollectionExtensions.cs(0) : fatal error N1205: 'static System.__UniversalCanon Ewn.Extensions.CollectionExtensions.AddTo<System.__UniversalCanon, System.__UniversalCanon>(System.__UniversalCanon, System.Collections.Generic.ICollection`1<System.__UniversalCanon>)' : Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\"\r\n\"Error\",,0,0,\"ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools64\\nutc_driver.exe @\"\"C:\\Users\\taylor\\Desktop\\ewn-main\\src\\Ewn.Mobile.UWP\\obj\\x86\\Dev\\ilc\\intermediate\\MDIL\\Ewn.Mobile.UWP.rsp\"\"' returned exit code 1\"\r\n\"Message\",Low,\"Done executing task \"\"GenerateMDILGlobalAnalysis\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building target \"\"GenerateMDILGlobalAnalysis\"\" in file \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building project \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Compilation failed\"\r\n```\r\n\r\n### Ewn.Extensions.CollectionExtensions.AddTo\r\n```csharp\r\npublic static T1 AddTo<T1, T2>([NotNull]this T1 @this, ICollection<T2> collection)\r\n    where T1 : T2\r\n{\r\n    collection.Add(@this);\r\n    return @this;\r\n}\r\n```\r\n\r\nI honestly have no idea what could be causing this since the method is pretty basic. Do you think this is a bug or is there something I'm missing?","Url":"https://github.com/dotnet/corert/issues/7698","RelatedDescription":"Open issue \"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\" (#7698)"},{"Id":"480667050","IsPullRequest":true,"CreatedAt":"2019-08-15T05:19:28","Actor":"MichalStrehovsky","Number":"7692","RawContent":null,"Title":"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry","State":"closed","Body":"The specialized `DefToken`/`RefToken` sigs save a byte.","Url":"https://github.com/dotnet/corert/pull/7692","RelatedDescription":"Closed or merged PR \"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry\" (#7692)"},{"Id":"480666827","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:53","Actor":"MichalStrehovsky","Number":"7690","RawContent":null,"Title":"Use CORINFO_VIRTUALCALL_STUB for virtual methods","State":"closed","Body":"Crossgen does the same thing.\r\n\r\nAlso deleting `ReadyToRunHelperId.VirtualEntry` because the constant was used in one spot, and we didn't handle it anywhere else (leading to compilation failures because the rest of the code couldn't handle it).","Url":"https://github.com/dotnet/corert/pull/7690","RelatedDescription":"Closed or merged PR \"Use CORINFO_VIRTUALCALL_STUB for virtual methods\" (#7690)"},{"Id":"480666928","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:40","Actor":"MichalStrehovsky","Number":"7691","RawContent":null,"Title":"Generate ReJit NOPs","State":"closed","Body":"Crossgen sets this flag and so I assume should we.","Url":"https://github.com/dotnet/corert/pull/7691","RelatedDescription":"Closed or merged PR \"Generate ReJit NOPs\" (#7691)"},{"Id":"480667354","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:28","Actor":"MichalStrehovsky","Number":"7694","RawContent":null,"Title":"Generate resource directory entry","State":"closed","Body":"R2RPEBuilder goes through lengths to restore .rsrc section, but drops the directory entry, making resources not actually work E2E.","Url":"https://github.com/dotnet/corert/pull/7694","RelatedDescription":"Closed or merged PR \"Generate resource directory entry\" (#7694)"},{"Id":"480784878","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:16","Actor":"Dotnet-GitSync-Bot","Number":"7695","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7695","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7695)"},{"Id":"480562337","IsPullRequest":false,"CreatedAt":"2019-08-14T16:12:27","Actor":"developervariety","Number":"7689","RawContent":null,"Title":"Cannot publish to Linux","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/issues/7689","RelatedDescription":"Closed issue \"Cannot publish to Linux\" (#7689)"},{"Id":"480293963","IsPullRequest":true,"CreatedAt":"2019-08-14T04:14:55","Actor":"Dotnet-GitSync-Bot","Number":"7688","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7688","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7688)"},{"Id":"480134459","IsPullRequest":false,"CreatedAt":"2019-08-13T23:16:39","Actor":"danwalmsley","Number":"7687","RawContent":null,"Title":"UWP unable to use .NET Native or deploy in store because rhbind fails.","State":"closed","Body":"Hi,\r\n\r\n   We have an app which when it only had a small amount of code, we were able to successfully deploy to windows store.\r\n\r\nHowever we are now unable to. \r\n\r\nWe have added rx.xml:\r\n\r\n```\r\n<Assembly Name=\"*Application*\" Dynamic=\"Excluded\" />\r\n\r\n    <Assembly Name=\"eventis.WebApi.ViewModels\" Dynamic=\"Required All\" />\r\n    <Assembly Name=\"ILMD.App\" Dynamic=\"Required All\" />\r\n\r\n    <Assembly Name=\"Newtonsoft.Json\" Dynamic=\"Required All\" />\r\n```\r\n\r\nhere when we add a few assemblies it compiles but crashes at runtime...\r\n\r\nbut if I add only 1 more directive i.e.\r\n\r\n    <Assembly Name=\"System.Reactive\" Dynamic=\"Required All\" />\r\n\r\nit fails...\r\n\r\nMy naive assesment is that rhbind is 32bit, and goes over memory limit (even though in csproj we have 64bit compiler set)\r\n\r\nAny workaround or assistance is greatly appreciated.\r\n","Url":"https://github.com/dotnet/corert/issues/7687","RelatedDescription":"Closed issue \"UWP unable to use .NET Native or deploy in store because rhbind fails.\" (#7687)"},{"Id":"479749419","IsPullRequest":true,"CreatedAt":"2019-08-13T01:57:17","Actor":"Dotnet-GitSync-Bot","Number":"7686","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7686","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7686)"},{"Id":"479377606","IsPullRequest":true,"CreatedAt":"2019-08-11T16:48:06","Actor":"MichalStrehovsky","Number":"7685","RawContent":null,"Title":"Unify calling convention of casting helpers","State":"closed","Body":"Use the RyuJIT calling convention (type first, object second) everywhere.","Url":"https://github.com/dotnet/corert/pull/7685","RelatedDescription":"Closed or merged PR \"Unify calling convention of casting helpers\" (#7685)"},{"Id":"479220411","IsPullRequest":false,"CreatedAt":"2019-08-11T00:04:22","Actor":"christianrondeau","Number":"7680","RawContent":null,"Title":"Support for dotnet core 3 preview 7 TaskAsyncEnumerableExtensions","State":"closed","Body":"Compiling code that uses `TaskAsyncEnumerableExtensions` using dotnet 3.0.100-preview7-012821 compiles with this warning:\r\n\r\n```\r\nEXEC : warning : Method `[myproject]MyProject.MyAssembly.MyClass+<ExecuteAsync>d__2.MoveNext()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Threading.Tasks.TaskAsyncEnumerableExtensions, System.Threading.Tasks, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a [C:\\myproject\\MyProject.Assembly\\MyProject.Assembly.csproj]\r\n```\r\n\r\nHere is the relevant parts of my `.csproj`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <AssemblyName>myproject</AssemblyName>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <!-- I tried with and without these -->\r\n    <IlcInvariantGlobalization>true</IlcInvariantGlobalization>\r\n    <RootAllApplicationAssemblies>false</RootAllApplicationAssemblies>\r\n    <IlcGenerateStackTraceData>false</IlcGenerateStackTraceData>\r\n    <IlcDisableReflection>true</IlcDisableReflection>\r\n    <IlcOptimizationPreference>Size</IlcOptimizationPreference>\r\n  </PropertyGroup>\r\n\r\n  <!-- ... project references and microsoft configuration extensions -->\r\n\r\n</Project>\r\n```\r\n\r\nI tried adding this, hoping that it would find the missing type (if I got the first error right):\r\n\r\n```\r\n  <ItemGroup>\r\n    <IlcReference Include=\"$(NuGetPackageFolders)\\microsoft.netcore.app\\2.2.0\\ref\\netcoreapp2.2\\netstandard.dll\" />\r\n    <IlcReference Include=\"$(NuGetPackageFolders)\\microsoft.netcore.app\\2.2.0\\ref\\netcoreapp2.2\\System.Threading.Tasks.Extensions.dll\" />\r\n  </ItemGroup>\r\n```\r\n\r\nBut I now receive this error, which I have to admit, I do not understand:\r\n\r\n```\r\nInternal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1, netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaField.InitializeFieldType()\r\n     at Internal.TypeSystem.MetadataFieldLayoutAlgorithm.ComputeInstanceLayout(DefType defType, InstanceLayoutKind layoutKind)\r\n     at Internal.TypeSystem.DefType.ComputeInstanceLayout(InstanceLayoutKind layoutKind)\r\n     at ILCompiler.DependencyAnalysis.EETypeNode.CheckCanGenerateEEType(NodeFactory factory, TypeDesc type)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.CreateNecessaryTypeNode(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.DependencyAnalysis.GenericMethodsHashtableNode.GetGenericMethodsHashtableDependenciesForMethod(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.MethodGenericDictionaryNode.ComputeNonRelocationBasedDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysis.ObjectNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan()\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\n\r\nIf it helps I can create a repro project, just let me know!","Url":"https://github.com/dotnet/corert/issues/7680","RelatedDescription":"Closed issue \"Support for dotnet core 3 preview 7 TaskAsyncEnumerableExtensions\" (#7680)"},{"Id":"479281464","IsPullRequest":true,"CreatedAt":"2019-08-10T19:00:28","Actor":"MichalStrehovsky","Number":"7684","RawContent":null,"Title":"Don't emit \"Generating compatible native code\" when reflection disabled","State":"closed","Body":"This mode is the opposite of compatible.","Url":"https://github.com/dotnet/corert/pull/7684","RelatedDescription":"Closed or merged PR \"Don't emit \"Generating compatible native code\" when reflection disabled\" (#7684)"},{"Id":"479280999","IsPullRequest":true,"CreatedAt":"2019-08-10T17:49:06","Actor":"MichalStrehovsky","Number":"7683","RawContent":null,"Title":"Document the \"reflection-free\" mode","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7683","RelatedDescription":"Closed or merged PR \"Document the \"reflection-free\" mode\" (#7683)"},{"Id":"479280495","IsPullRequest":true,"CreatedAt":"2019-08-10T17:48:31","Actor":"MichalStrehovsky","Number":"7682","RawContent":null,"Title":"Disabled reflection: don't crash for ldtoken field/method","State":"closed","Body":"We currently key native layout generation off the `SupportsReflection` property, so put this behind that.\r\n\r\nGoing forward, we'll want to eliminate all uses of `SupportsReflection` though: it's not exactly what we want here (and elsewhere). Native layout generation should not be tied to reflection support, since native layout is used in generic virtual method dispatch.\r\n\r\nGeneric virtual methods need to work when reflection is disabled. They currently don't.","Url":"https://github.com/dotnet/corert/pull/7682","RelatedDescription":"Closed or merged PR \"Disabled reflection: don't crash for ldtoken field/method\" (#7682)"},{"Id":"479266409","IsPullRequest":true,"CreatedAt":"2019-08-10T15:52:06","Actor":"MichalStrehovsky","Number":"7681","RawContent":null,"Title":"Clean up ProjectN parts of the compiler","State":"closed","Body":"These files were exclusively used for .NET Native to support the UTC codegen backend.\r\n\r\nI left two things that we don't use in CoreRT but might want to use:\r\n\r\n1. Support for SharedLibrary\r\n2. Windows-specific managed debugger support\r\n\r\nI'm not very firm on keeping 2.","Url":"https://github.com/dotnet/corert/pull/7681","RelatedDescription":"Closed or merged PR \"Clean up ProjectN parts of the compiler\" (#7681)"},{"Id":"479210729","IsPullRequest":false,"CreatedAt":"2019-08-10T00:48:40","Actor":"genifycom","Number":"7679","RawContent":null,"Title":"Does not work with System.Data.SqlClient","State":"open","Body":"A CoreRT built console app that uses System.Data.SqlClient does not make a connection to the database.\r\n\r\nIt reports Unable to load sni.dll","Url":"https://github.com/dotnet/corert/issues/7679","RelatedDescription":"Open issue \"Does not work with System.Data.SqlClient\" (#7679)"},{"Id":"478949334","IsPullRequest":true,"CreatedAt":"2019-08-09T14:05:52","Actor":"Dotnet-GitSync-Bot","Number":"7678","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7678","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7678)"},{"Id":"478726910","IsPullRequest":true,"CreatedAt":"2019-08-09T02:40:40","Actor":"Dotnet-GitSync-Bot","Number":"7677","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @JeffreyZhao","Url":"https://github.com/dotnet/corert/pull/7677","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7677)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"481879019","IsPullRequest":true,"CreatedAt":"2019-08-17T14:28:45","Actor":"dotnet-maestro[bot]","Number":"3546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3546)"},{"Id":"481657710","IsPullRequest":false,"CreatedAt":"2019-08-16T22:08:55","Actor":"mhsimkin","Number":"3545","RawContent":null,"Title":"NETDSK1005 Error when building solution with two projects","State":"closed","Body":"I'm receiving the infamous:\r\n\r\n>  NETSDK1005: Assets file '...\\obj\\project.assets.json' doesn't have a target for '.NETStandard,Version=v2.0'. Ensure that restore has run and that you have included 'netstandard2.0' in the TargetFrameworks for your project. \r\n\r\nwhen I try to build a solution that contains two projects.  One project is targeting .Net 472 and the other .Net Standard 2.  Both projects use the same physical folder since they are building the same code. \r\n\r\n`Aside: As much as I would like to multi-target in one file, I needed two nupkgs because of the order of precedence of when matching which to my target.`\r\n\r\nI get the same issue whether I use MSBuild, or dotnet from the command line or Visual Studio 2019.  Deleting the projects.assets.json file doesn't resolve the issue.\r\n\r\nI was able to work around the build issue by doing either of the following:\r\n\r\n1. having MSBuild restore and build each project individually.\r\n2. giving each project it's own project folder and then adding all the code as a link in one project. (not feasible- 200+ files/folders involved).\r\n\r\nI have attached a msbuild.log with diagnostics, Solution and Project Files.\r\n\r\n[renapi.zip](https://github.com/dotnet/sdk/files/3510159/renapi.zip)\r\n\r\n[msbuild-build.log](https://github.com/dotnet/sdk/files/3510153/msbuild-build.log)\r\n.\r\n\r\nI would like to get this resolved so that I don't need to use a 4 step process on the build server.\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8 \r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n\r\n-marc","Url":"https://github.com/dotnet/sdk/issues/3545","RelatedDescription":"Closed issue \"NETDSK1005 Error when building solution with two projects\" (#3545)"},{"Id":"481578086","IsPullRequest":true,"CreatedAt":"2019-08-16T14:48:51","Actor":"dotnet-maestro[bot]","Number":"3544","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3544)"},{"Id":"481412493","IsPullRequest":true,"CreatedAt":"2019-08-16T02:20:03","Actor":"dsplaisted","Number":"3543","RawContent":null,"Title":"Fix regression in selecting default RuntimeIdentifier","State":"open","Body":"#### Description\r\nFixed change in behavior (regression) that was introduced when we started including the RuntimeIdentifier graph in the SDK and passing it to NuGet.\r\n\r\n#### Customer Impact\r\nThe change in behavior had to do with the automatic selection of the PlatformTarget.  In specific cases, the PlatformTarget would be set to x86, where it would have previously been set to AnyCPU.  This is because previously you had to have a (transitive) dependency on the Microsoft.NETCore.Platforms package to get the RuntimeIdentifier graph, and without it, you wouldn't get assets that didn't exactly match the default RuntimeIdentifier (win7-x86).  Since no native assets were found, the PlatformTarget defaulted to AnyCPU, even though if the RuntimeGraph had been available there would have been native assets.\r\n\r\nRoslyn ran into this, their apps switched to x86 unintentionally.  We are not sure how many other customers would be impacted, as the combination of factors necessary to see the behavior change is somewhat of an edge case.\r\n\r\n#### Regression?\r\nYes, regressed with #3406\r\n\r\n#### Risk\r\nLow\r\n\r\nFixes #3495\r\n\r\nI thought of a \"clever\" way to fix this regression.  We revert to the AnyCPU PlatformTarget if:\r\n- There are no native assets\r\n- There are native assets, but the Microsoft.NETCore.Platforms package (which was previously necessary to get the RID graph) is not transitively referenced, and there are no native assets for the exact RID win7-x86.\r\n\r\nThis should match the PlatformTarget which SDKs prior to the 3.0 SDK would have used.","Url":"https://github.com/dotnet/sdk/pull/3543","RelatedDescription":"Open PR \"Fix regression in selecting default RuntimeIdentifier\" (#3543)"},{"Id":"481332983","IsPullRequest":true,"CreatedAt":"2019-08-15T20:50:33","Actor":"vitek-karas","Number":"3542","RawContent":null,"Title":"Allow specifying RollForward with Major/LatestMajor on all apps","State":"open","Body":"#### Description\r\ndotnet/cli#12257 - SDK doesn't allow usage of `RollForward` property in `2.*` apps. This complicates creation of tools which are supposed to run across major versions. Typically applies to .NET global tools.\r\n\r\nCurrently SDK explicitly blocks usage of `RollForward` msbuild property in projects targeting .NET Core `2.*`. Such a limitation makes sense for restrictive settings of this property (like `Disable` or `LatestPatch`) as usage of those could lead to unexpected behavioral changes when .NET 3.0 is installed on the machine. But there's no good reason to block the more relaxing values `Major` and `LatestMajor`. The fix is to change the explicit block to allow `Major` and `LatestMajor` settings even in `2.*` projects, while keep on failing for the more restrictive values (everything else).\r\nThe `RollForward` property has no effect on machines with `2.*` only runtimes. It works for all apps (regardless of version) once .NET Core 3.0 is installed on the machine.\r\n\r\n#### Customer Impact\r\n.NET Core Tools are a feature enabled as part of .NET Core 2.1. They are similar to libraries in that they are delivered by NuGet but differ in that they are bound to a specific runtime version. If a compatible runtime version is not found, the tools fail to run, with an appropriate error message. \r\n \r\nWe initially gave guidance to multi-target tools to enable running 2.x tools on 3.0 only machine. After some discussion, we decided that this guidance wasn’t acceptable as the singular answer and funded the runtime binding feature (AKA Roll Forward). The goal was to enable 2.x apps to participate in major version roll-forward but not any of the other policies that are 3.x only. The SDK currently prevents this.\r\n \r\nWe need to enable the major version roll-forward scenario for 2.x apps and tools by making the error state more surgical. Otherwise, we’ll need to go back to the initial multi-targeting guidance or tell tools writers to use a `.runtimeconfig.template`. The template idea would work, but is a very unfortunate workaround for what was intended to be a mainline scenario.\r\n\r\n#### Regression?\r\nNo - the roll forward feature is new in 3.0.\r\n\t\t\r\n#### Risk\r\nVery small - the `RollForward` msbuild property is new in 3.0 SDK, so its usage is almost certainly intentional. Affected scenarios were failing early (during build), after the fix they are going to work.","Url":"https://github.com/dotnet/sdk/pull/3542","RelatedDescription":"Open PR \"Allow specifying RollForward with Major/LatestMajor on all apps\" (#3542)"},{"Id":"481218665","IsPullRequest":false,"CreatedAt":"2019-08-15T15:56:22","Actor":"vitek-karas","Number":"3541","RawContent":null,"Title":"Write framework references for self-contained apps","State":"open","Body":"### Problem\r\nThis is continuation of issue originally described in dotnet/core-setup#7610 and the SDK counterpart to dotnet/core-setup#7732.\r\nWhen the native host loads a .NET Core component into already running .NET Core app, it tries to validate that the component's framework references can be satisfied by the app. In order to do this it needs to know which frameworks the app is using. For framework dependent apps this is trivial as the host knows which frameworks it resolved for the app. For self-contained apps though, there's no information about frameworks.\r\n\r\nCurrently framework dependent console app has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nA self-contained app on the other hand has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {}\r\n}\r\n```\r\n\r\n### Proposal\r\nWrite the same information even for self-contained apps. The caveat is that framework references should not be written the exact same way otherwise host will think it's a framework dependent application (self-contained apps are recognized through the fact that they have no framework references).\r\n\r\n#### Write the `tfm` property\r\nThis would make self-contained apps behave consistently with framework dependent apps. The TFM is not used widely by the host, but it does come into play in specific cases around additional probe paths and `DOTNET_SHARED_STORE` functionality.\r\n\r\n*Compatibility note: It's not really a breaking change if we start writing the `tfm` property. It does change the behavior of the app slightly, but in order for it to take effect the app has to be rebuilt, so there's an explicit action by the developer.* \r\n\r\n#### Write a new `includedFrameworks` property\r\nFramework references in self-contained apps would be written to a new property `includedFrameworks` which would use the same syntax. It's an array of objects, where each object represents a framework reference. The framework reference must specify its `name` and `version`. Other properties like `rollForward` which are allowed on normal framework references will not be allowed here.\r\n\r\n*Compatibility note: Combined with the changes in the host to consume this property, it will change behavior of apps when trying to load dynamic components. But the change requires a rebuild of the app in question, so it's not a breaking change.*\r\n\r\nThe final `.runtimeconfig.json` would look like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"includedFrameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nNaming is always an interesting question, so `includedFrameworks` is just one option. It could be called `embeddedFrameworks`, `containedFrameworks`, ... other suggestions are very welcome. The name should be somewhat clear about the fact that the framework is part of the app.\r\n\r\n### Impact\r\nThe proposed change makes the `.runtimeconfig.json` bigger for self-contained apps, but the change is tiny (100s of bytes).\r\n\r\nPerformance wise there is some cost to write it in the SDK, but that it very small compared to the rest of the work SDK does. The host has to parse the new information as well, so there's some cost to that, but it doesn't have to process it (just remember) during startup, so the perf impact on startup should be very small.","Url":"https://github.com/dotnet/sdk/issues/3541","RelatedDescription":"Open issue \"Write framework references for self-contained apps\" (#3541)"},{"Id":"480939380","IsPullRequest":true,"CreatedAt":"2019-08-15T00:05:41","Actor":"dotnet-bot","Number":"3540","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3540","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3540)"},{"Id":"480932346","IsPullRequest":true,"CreatedAt":"2019-08-14T23:32:31","Actor":"nguerrera","Number":"3539","RawContent":null,"Title":"Pass well-defined set of managed assemblies to linker and crossgen","State":"open","Body":"Both were taking all the files to publish and checking what was managed code. This\r\nwas always intended to be temporary pending this change.\r\n\r\nSeveral bugs fixed in the process, will update this will all the details.\r\n\r\nFix #3109","Url":"https://github.com/dotnet/sdk/pull/3539","RelatedDescription":"Open PR \"Pass well-defined set of managed assemblies to linker and crossgen\" (#3539)"},{"Id":"480469377","IsPullRequest":true,"CreatedAt":"2019-08-14T20:29:05","Actor":"livarcocc","Number":"3536","RawContent":null,"Title":"Yaml stages","State":"closed","Body":"#### Description\r\n\r\nThis is a planned change to onboard to yaml stages.\r\n\r\n#### Customer Impact\r\n\r\nInfra-structure change.\r\n\r\n#### Regression?\r\n\r\nNo.\r\n\r\n#### Risk\r\n\r\nLow\r\n\r\n___\r\n\r\ncc @riarenas \r\n\r\nThe first two files are the important ones. The rest is an arcade update.\r\n\r\nExample stages build: https://dnceng.visualstudio.com/internal/_build/results?buildId=308530&view=results","Url":"https://github.com/dotnet/sdk/pull/3536","RelatedDescription":"Closed or merged PR \"Yaml stages\" (#3536)"},{"Id":"479845030","IsPullRequest":true,"CreatedAt":"2019-08-14T19:18:51","Actor":"nguerrera","Number":"3525","RawContent":null,"Title":"[DRAFT] Revived classic project experiment for C++/CLI","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3525","RelatedDescription":"Closed or merged PR \"[DRAFT] Revived classic project experiment for C++/CLI\" (#3525)"},{"Id":"480813850","IsPullRequest":true,"CreatedAt":"2019-08-14T18:05:25","Actor":"wli3","Number":"3538","RawContent":null,"Title":"[DRAFT] Revived classic project experiment for C++/CLI ","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3538","RelatedDescription":"Open PR \"[DRAFT] Revived classic project experiment for C++/CLI \" (#3538)"},{"Id":"480641244","IsPullRequest":true,"CreatedAt":"2019-08-14T14:01:21","Actor":"dotnet-maestro[bot]","Number":"3537","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3537)"},{"Id":"480422482","IsPullRequest":true,"CreatedAt":"2019-08-14T02:00:23","Actor":"dotnet-bot","Number":"3535","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3535","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3535)"},{"Id":"480318091","IsPullRequest":true,"CreatedAt":"2019-08-13T21:37:32","Actor":"wli3","Number":"3534","RawContent":null,"Title":"WIP -- test ci -- do we have c++cli work load in CI mahcines?","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3534","RelatedDescription":"Closed or merged PR \"WIP -- test ci -- do we have c++cli work load in CI mahcines?\" (#3534)"},{"Id":"480317966","IsPullRequest":true,"CreatedAt":"2019-08-13T19:05:14","Actor":"BenVillalobos","Number":"3533","RawContent":null,"Title":"Opting into dependentupon convention","State":"open","Body":"### Description\r\n\r\nIn SDK projects and new project system, we have eliminated the need for DependentUpon to make the appropriate file nesting in the IDE tree. However, there is a place where the build actually uses DependentUpon to:\r\n\r\n1. Locate a source file, and _parse (!)_ it to get first class name and namespace\r\n2. Generate .resources accordingly.\r\n\r\nBut people and features in VS rely on this and it has been a consistent source of feedback in moving to .NET Core 3.0. This opts into new behavior to use a convention instead of requiring explicit metadata.\r\n\r\nOriginal issue: https://github.com/microsoft/msbuild/issues/4488\r\n\r\n This change is dependent upon: https://github.com/microsoft/msbuild/pull/4597\r\n\r\n### Customer Impact\r\n\r\nIn a fairly common situation for projects that use resources, avoids the need to specify `DependentUpon` metadata for each resource.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\nAdded `DependentUponTest`. Currently it gets skipped, but this test was verified working on a local machine using a version of MSBuild that had the corresponding fix.\r\n","Url":"https://github.com/dotnet/sdk/pull/3533","RelatedDescription":"Open PR \"Opting into dependentupon convention\" (#3533)"},{"Id":"480302574","IsPullRequest":true,"CreatedAt":"2019-08-13T18:28:59","Actor":"livarcocc","Number":"3532","RawContent":null,"Title":"Merge release/3.0.100 preview8 into release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3532","RelatedDescription":"Open PR \"Merge release/3.0.100 preview8 into release/3.0.1xx\" (#3532)"},{"Id":"480119023","IsPullRequest":true,"CreatedAt":"2019-08-13T17:43:30","Actor":"dotnet-maestro[bot]","Number":"3530","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.1\r\n- **Date Produced**: 8/12/2019 1:01 PM\r\n- **Commit**: ec2dd5b3e7d11b88b2ca0688bb1685836cfad20a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19412.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3530","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3530)"},{"Id":"480119380","IsPullRequest":true,"CreatedAt":"2019-08-13T14:31:44","Actor":"dotnet-bot","Number":"3531","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3531","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3531)"},{"Id":"479960011","IsPullRequest":true,"CreatedAt":"2019-08-13T07:26:05","Actor":"peterhuene","Number":"3529","RawContent":null,"Title":"Change default apphost creation retry count to zero.","State":"closed","Body":"This commit changes the default apphost creation retry count to zero.\r\n\r\nThe `HostWriter` now internally implements a retry for relevant I/O exceptions,\r\nso the default retry at the task level would add unnecessary delay for\r\nlegitimate failure conditions.\r\n\r\nChanging the default to zero still leaves the retry at the task level that\r\nusers can optionally enable through build properties.\r\n\r\nHelps address dotnet/core-setup#7597.","Url":"https://github.com/dotnet/sdk/pull/3529","RelatedDescription":"Closed or merged PR \"Change default apphost creation retry count to zero.\" (#3529)"},{"Id":"479898972","IsPullRequest":true,"CreatedAt":"2019-08-13T04:57:51","Actor":"peterhuene","Number":"3527","RawContent":null,"Title":"Change default apphost creation retry count to zero.","State":"closed","Body":"This commit changes the default apphost creation retry count to zero.\r\n\r\nThe `HostWriter` now internally implements a retry for relevant I/O exceptions,\r\nso the default retry at the task level would add unnecessary delay for\r\nlegitimate failure conditions.\r\n\r\nChanging the default to zero still leaves the retry at the task level that\r\nusers can optionally enable through build properties.\r\n\r\nHelps address dotnet/core-setup#7597.","Url":"https://github.com/dotnet/sdk/pull/3527","RelatedDescription":"Closed or merged PR \"Change default apphost creation retry count to zero.\" (#3527)"},{"Id":"479889951","IsPullRequest":true,"CreatedAt":"2019-08-13T01:01:41","Actor":"dotnet-bot","Number":"3526","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3526","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3526)"},{"Id":"479906410","IsPullRequest":true,"CreatedAt":"2019-08-13T00:27:22","Actor":"dsplaisted","Number":"3528","RawContent":null,"Title":"Miscellaneous perf fixes","State":"open","Body":"#### Description\r\nSeveral different perf improvements:\r\n\r\n- Don't run ProcessFrameworkReferences target if there are no FrameworkReferences\r\n- Support NuGet semantic versions in packageoverrides.txt\r\n  - Without this, the packageoverrides.txt from the ASP.NET Core targeting pack will be ignored for prerelease versions of the SDK\r\n- Don't include default `PackageConflictOverrides` for .NET Core 3 and higher\r\n  - These should come from the packageoverrides.txt file in the targeting pack.  Also, the package name for the default overrides is incorrect for .NET Core 3.0+\r\n\r\n#### Customer Impact\r\nFaster build times.  On my machine:\r\n\r\n Scenario Name       | Test Name          | Metric         | Unit | Iterations |   Average |  STDEV.S |       Min |       Max\r\n:------------------- |:------------------ |:-------------- |:----:|:----------:| ---------:| --------:| ---------:| ---------:\r\nBuild Web Large 3.0 | Build (no changes) - Before| Execution Time |  ms  |     9      | 19024.212 |   245.835 | 18597.847 |  19386.137\r\nBuild Web Large 3.0 | Build (no changes) - After | Execution Time |  ms  |     9      | 17508.622 | 2037.929 | 15226.639 | 21639.623\r\n\r\n#### Regression?\r\nNo. \r\n\r\n#### Risk\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3528","RelatedDescription":"Open PR \"Miscellaneous perf fixes\" (#3528)"},{"Id":"479831710","IsPullRequest":true,"CreatedAt":"2019-08-12T23:41:36","Actor":"nguerrera","Number":"3524","RawContent":null,"Title":"3.1.1xx branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3524","RelatedDescription":"Closed or merged PR \"3.1.1xx branding\" (#3524)"},{"Id":"479702722","IsPullRequest":true,"CreatedAt":"2019-08-12T18:18:32","Actor":"nguerrera","Number":"3523","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Fix test that was expecting PresentationFramework.Aero not to be referenced by default, which no longer holds after https://github.com/dotnet/core-setup/pull/7601","Url":"https://github.com/dotnet/sdk/pull/3523","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3523)"},{"Id":"479260461","IsPullRequest":true,"CreatedAt":"2019-08-12T16:51:51","Actor":"dotnet-bot","Number":"3521","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3521","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3521)"},{"Id":"479220939","IsPullRequest":true,"CreatedAt":"2019-08-12T16:51:48","Actor":"nguerrera","Number":"3520","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3520","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3520)"},{"Id":"479306325","IsPullRequest":false,"CreatedAt":"2019-08-10T21:05:23","Actor":"wli3","Number":"3522","RawContent":null,"Title":"Skip instead of Trim() if there a newline in hintpath during conflict resolution","State":"open","Body":"To align the behavior with RAR https://github.com/microsoft/msbuild/pull/4598","Url":"https://github.com/dotnet/sdk/issues/3522","RelatedDescription":"Open issue \"Skip instead of Trim() if there a newline in hintpath during conflict resolution\" (#3522)"},{"Id":"478985601","IsPullRequest":true,"CreatedAt":"2019-08-09T13:24:47","Actor":"dotnet-maestro[bot]","Number":"3519","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190816.02\r\n- **Date Produced**: 8/16/2019 1:41 PM\r\n- **Commit**: 66a9d076b6ce2cb1dc079e5cd351439c58278daf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19416-02\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3519","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3519)"},{"Id":"478473456","IsPullRequest":true,"CreatedAt":"2019-08-08T17:18:21","Actor":"dotnet-maestro[bot]","Number":"3518","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.10\r\n- **Date Produced**: 8/7/2019 9:45 PM\r\n- **Commit**: 88e391bb71d5659c28fdb23434752cab6878cc06\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19407-10\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3518","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3518)"},{"Id":"478472398","IsPullRequest":true,"CreatedAt":"2019-08-08T17:18:08","Actor":"dotnet-maestro[bot]","Number":"3517","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190807.10\r\n- **Date Produced**: 8/7/2019 9:45 PM\r\n- **Commit**: 88e391bb71d5659c28fdb23434752cab6878cc06\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19407-10\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3517","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3517)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1162097146985795584","CreatedAt":"2019-08-15T20:22:05+00:00","UserScreenname":"dotnet","Text":"You know .NET is open source, right? https://t.co/JLsyVeSFfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"1162046045024423936","CreatedAt":"2019-08-15T16:59:01+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1161728795260252160","CreatedAt":"2019-08-14T19:58:23+00:00","UserScreenname":"dotnet","Text":"Request for comment: Consolidating .NET GitHub repos https://t.co/funhIQtZbK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":121,"FavoriteCount":58,"RawContent":null},{"Id":"1161724718740721664","CreatedAt":"2019-08-14T19:42:11+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog https://t.co/VmcacDaK7I","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":74,"FavoriteCount":43,"RawContent":null},{"Id":"1161408520308158464","CreatedAt":"2019-08-13T22:45:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":1,"RawContent":null},{"Id":"1161356948542935040","CreatedAt":"2019-08-13T19:20:48+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8 https://t.co/6OjVnfl9Vz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":77,"FavoriteCount":51,"RawContent":null},{"Id":"1161344983238004736","CreatedAt":"2019-08-13T18:33:15+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 8 https://t.co/tG9qMt5Bfl","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":152,"FavoriteCount":95,"RawContent":null},{"Id":"1161344631990149120","CreatedAt":"2019-08-13T18:31:51+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 8 https://t.co/s1RCmPhKm2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":478,"FavoriteCount":264,"RawContent":null},{"Id":"1161344365396017152","CreatedAt":"2019-08-13T18:30:48+00:00","UserScreenname":"dotnet","Text":"Want to help us improve ML .NET? Take this survey to let us know a bit about how you use, or plan to use, machine l… https://t.co/yYhlCeanKZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":25,"RawContent":null},{"Id":"1159573396646051841","CreatedAt":"2019-08-08T21:13:36+00:00","UserScreenname":"dotnet","Text":"If you haven't, check out @NuGetTrends. https://t.co/yU8HL11oYR","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-08-19T05:30:33.5565941Z","RunDurationInMilliseconds":13446}