{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6835018454","Type":"PullRequestEvent","CreatedAt":"2017-11-09T23:01:09","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/pull/42","RelatedDescription":"Opened pull request \"Add configuration for the stale bot\" (#42) at dotnet/announcements","RelatedBody":"As mentioned in [this commit](https://github.com/dotnet/announcements/commit/08a471804c8319f1ffcd509918866833caaa0558) we'd like to close issues after 30 days. @gep13 suggested to automate this using the [stale bot](https://probot.github.io/apps/stale/).\r\n\r\n@Petermarcu @richlander  @jongalloway: any concerns?"},{"Id":"6832827792","Type":"IssuesEvent","CreatedAt":"2017-11-09T15:43:21","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/41","RelatedDescription":"Closed issue \"Block Issues and PR for non members\" (#41) at dotnet/announcements","RelatedBody":"Sorry guys\r\nref: #40 "},{"Id":"6832822457","Type":"PullRequestEvent","CreatedAt":"2017-11-09T15:42:26","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/pull/40","RelatedDescription":"Closed pull request \"WorkSpace\" (#40) at dotnet/announcements","RelatedBody":""},{"Id":"6831499042","Type":"IssuesEvent","CreatedAt":"2017-11-09T11:10:06","Actor":"deinok","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/41","RelatedDescription":"Opened issue \"Block Issues and PR for non members\" (#41) at dotnet/announcements","RelatedBody":""},{"Id":"6831024462","Type":"PullRequestEvent","CreatedAt":"2017-11-09T09:29:11","Actor":"renyingqiang","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/pull/40","RelatedDescription":"Opened pull request \"WorkSpace\" (#40) at dotnet/announcements","RelatedBody":""},{"Id":"6828894301","Type":"IssuesEvent","CreatedAt":"2017-11-08T22:02:15","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/39","RelatedDescription":"Opened issue \"Introducing Xml Serializer Generator for .NET Core\" (#39) at dotnet/announcements","RelatedBody":"# Introducing Xml Serializer Generator for .NET Core\r\nLike the Xml Serializer Generator (sgen.exe) on desktop, Microsoft.XmlSerializer.Generator NuGet package is the solution for .NET Core and .NET Standard Libraries. It creates an Xml serialization assembly for types contained in an assembly in order to improve the startup performance of Xml serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\n\r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/xmlserializergenerator-instructions.md). \r\n\r\n## Discussion \r\nPlease share your thoughts and have any discussions with us at: \r\n\r\n- [dotnet/corefx #25138](https://github.com/dotnet/corefx/issues/25138) \r\n\r\n## Details\r\nWhen the Xml Serializer Generator is not used, an XmlSerializer generates serialization code for each type every time when an application runs. You can improve the startup performance of Xml serialization by simply adding the reference of Microsoft.XmlSerializer.Generator NuGet package to your project. Xml Serializer Generator will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/corefx](https://github.com/dotnet/corefx/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"6823588799","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Closed issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds [about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs"},{"Id":"6823588782","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Closed issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https://github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n### Unit tests projects\r\n\r\nBy default, binding redirects aren't added to class library projects. This is problematic for unit testing projects as they are essentially like apps. So in addition to what's outlined in [automatic binding redirects][abrg] you also need to specify `GenerateBindingRedirectsOutputType`:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n```\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/standard/issues/481."},{"Id":"6823588769","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/29","RelatedDescription":"Closed issue \".NET Core Runtime ARM32 builds now available\" (#29) at dotnet/announcements","RelatedBody":"# .NET Core Runtime ARM32 builds now available\r\n\r\nThe .NET Core team is now producing ARM32 builds for .NET Core Runtime 2.0+, for both Linux and Windows. These builds are great for using on Raspberry Pi. The builds are not yet supported by Microsoft and have preview status. Please give us feedback.\r\n\r\nDocker ARM32 images are also available at [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/). See [microsoft/dotnet Docker Hub README adopts segmented OS/Arch style](https://github.com/dotnet/announcements/issues/27) for a related announcement.\r\n\r\nThere are two good sources of .NET Core ARM32 samples that you can use to get started:\r\n\r\n* [.NET Core on Raspberry Pi](https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md)\r\n* [.NET Core Docker Raspberry Pi Samples](https://github.com/dotnet/dotnet-docker-samples#arm32--raspberry-pi)\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/coreclr #13369](https://github.com/dotnet/coreclr/issues/13369)\r\n\r\n## Details\r\n\r\n* [dotnet/coreclr label:arch-arm32](https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&q=label%3Aarch-arm32%20)\r\n\r\nThe team is producing Runtime and not SDK builds for .NET Core. As a result, you need to build your applications on another operating system and then copy to a Raspberry Pi (or similar device) to run. The samples provided above show you how to do that.\r\n\r\nYou can get builds from the following links. Official builds are not yet provided.\r\n\r\n* [.NET Core 2.0.0 ARM32 build](https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz)\r\n* [.NET Core 2.0 servicing builds](https://github.com/dotnet/core/blob/master/daily-builds-servicing.md)\r\n* [.NET Core 2.1 daily builds](https://github.com/dotnet/core/blob/master/daily-builds.md)\r\n\r\nNote that ARM32 is sometimes referred to as `armhf`, which refers to [hardware floating point capability](https://en.wikipedia.org/wiki/ARM_architecture#VFP).\r\n\r\nThe SDK has not been made available for ARM32 to yet as it doesn't fit within a reasonable performance envelope (space and time) for ARM32. We will resolve this although it isn't a top priority currently (unless feedback suggests otherwise). Our belief is that building on a desktop or build machine will be both more efficient and a reasonable work around to doing development on the Pi for the time being. We also wanted to prioritize the runtime being available since it's necessary for anything to work.\r\n\r\nA more near-term need is unit testing on ARM32. There is no replacement for running tests on device. We intend to publish short-term workarounds for this and work on a longer-term solution that is easy to use."},{"Id":"6823588709","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:24","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/16","RelatedDescription":"Closed issue \".NET Core 2.0 multi-arch tags now use Debian Stretch\" (#16) at dotnet/announcements","RelatedBody":"# .NET Core 2.0 multi-arch tags now use Debian Stretch\r\n\r\n## Summary\r\n\r\n[.NET Core 2.0 Docker multi-arch tags](https://hub.docker.com/r/microsoft/dotnet/) now use [Debian Stretch](https://www.debian.org/releases/stretch/) instead of [Debian Jessie](https://www.debian.org/releases/jessie/). .NET Core 2.0 Debian Jessie tags will still be provided. Debian Stretch is considered by the .NET Core team to be a better default choice for .NET Core Docker Linux image users for the lifetime of .NET Core 2.x.  There are no plans to update .NET Core 1.x in the same way.\r\n\r\n## Details\r\n\r\n- [Debian 9 Stretch released](https://www.debian.org/News/2017/20170617)\r\n- [Change 2.0 multi-arch tags to be based on stretch -- dotnet/dotnet-docker-nightly #322](https://github.com/dotnet/dotnet-docker-nightly/pull/322)\r\n- [.NET Core Docker images will move to multi-arch based tags -- dotnet/announcements #14](https://github.com/dotnet/announcements/issues/14)\r\n\r\n## Impact\r\n\r\nThe impact of this change should be minimal. It is possible that you may notice differences in Debian Stretch relative to Debian Jessie. This change would be considered a breaking change if it was made for existing 1.x multi-arch tags. It is considered acceptable because it is being made between major .NET versions (during .NET Core 2.0 preview phase).\r\n\r\nThe `latest` tag will be switched to the .NET Core 2.0 SDK when .NET Core 2.0 ships as RTM. This change will result in `latest` changing from Debian Jessie to Debian Stretch."},{"Id":"6823588682","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/12","RelatedDescription":"Closed issue \"Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege \" (#12) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about vulnerabilities in public .NET Core and ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\n.NET Core & ASP.NET Core are the next generation of .NET that provide a familiar and modern framework for web and cloud scenarios. These products are actively developed by the .NET and ASP.NET team in collaboration with a community of open source developers, running on Windows, Mac OS X and Linux. When .NET Core was released, the version number was reset to 1.0.0 to reflect the fact that it is a separate product from its predecessor -.NET.\r\n\r\n## Discussion\r\nTo discuss the ASP.NET Core issues please see https://github.com/aspnet/Mvc/issues/6246\r\nTo discuss the CoreFX Core issues please see https://github.com/dotnet/corefx/issues/19535\r\n\r\n## Issue CVEs and Description\r\nCVE\t| Description\r\n----|-------------\r\n[CVE-2017-0248](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0248) | Security Feature Bypass\r\n[CVE-2017-0247](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0247) | Denial of Service\r\n[CVE-2017-0249](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249) | Elevation of Privilege \r\n[CVE-2017-0256](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0256) | Spoofing\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nSystem.Text.Encodings.Web | 4.0.0<br />4.3.0  | 4.0.1<br />4.3.1\r\nSystem.Net.Http | 4.1.1<br />4.3.1  | 4.1.2<br />4.3.2|\r\nSystem.Net.Http.WinHttpHandler | 4.0.1<br />4.3.0 |  4.0.2<br />4.3.1\r\nSystem.Net.Security | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nSystem.Net.WebSockets.Client | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nMicrosoft.AspNetCore.Mvc | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Abstractions | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ApiExplorer | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.DataAnnotations | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Json | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Xml | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Localization | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor.Host | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.TagHelpers | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.WebApiCompatShim | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version according to the affected versions table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2 or 1.0.3 you should update your package version to 1.0.4. If you are using version 1.1.0, 1.1.1 or 1.1.2 you should update your package version to 1.1.3. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.0.4.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.4\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has two direct package dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows two packages `Microsoft.AspNetCore` version 1.1.1, and `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.1.2.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.1.3.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Routing` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.4, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.4 expected Microsoft.AspNetCore.Routing >= 1.0.4 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.lock.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.0.0 you would add a reference to the appropriate fixed version, 4.0.1. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.Net.Security\": \"4.0.1\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.1\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.3.0 you would add a reference to the appropriate fixed version, 4.3.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Security\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\nMicrosoft [thanks](https://go.microsoft.com/fwlink/?LinkId=21127) the following for working with us to help protect customers:\r\n\r\n- David Fernandez of [Sidertia Solutions](https://www.sidertia.com/Home) for reporting the ASP.NET Core Denial of Service Vulnerability (CVE-2017-0247)\r\n- Joonwoo Yu, Hyoung-Kee Choi of [Sungkyunkwan University](http://hit.skku.edu/~hkchoi/) for reporting the .NET Security Feature Bypass (CVE-2017-0248)\r\n- [Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov) for reporting the ASP.NET Core Spoofing Vulnerability (CVE-2017-0256)\r\n\r\n### Revisions\r\n\r\n- V1.0 (May 9, 2017): Advisory published.\r\n- V1.1 (May 10, 2017): Advisory revised to include a table of issue CVEs and their descriptions. This is an informational change only."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6835624459","Type":"IssuesEvent","CreatedAt":"2017-11-10T02:16:55","Actor":"CalArabshahi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14972","RelatedDescription":"Closed issue \"Cannot load Japanese Satellite Assembly\" (#14972) at dotnet/coreclr","RelatedBody":"My product targets .NETStandard 2.0 and .NET Framework 4.5.2. \r\n\r\nA satellite-assembly test running on an English-US Windows laptop changes the thread.CurrentUICulture and thread.CurrentCulture to ja-JP and throws an exception. This test cases succeeds in .NET Framework but fails in .NET Core 2.0. The exception is  \r\n\r\n> The active test run was aborted. Reason: me fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n>    at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n>    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n>    at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n>    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n>    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n>    at System.Resources.ResourceManager.GetObject(String name, CultureInfo culture, Boolean wrapUnmanagedMemStream)\r\n> \r\n\r\n \r\nThis issue is similar to #12668 .  \r\n\r\nI debugged it to \r\n\r\n        internal RuntimeAssembly InternalGetSatelliteAssembly(String name,\r\n                                                              CultureInfo culture,\r\n                                                              Version version,\r\n                                                              bool throwOnFileNotFound,\r\n                                                              ref StackCrawlMark stackMark)\r\n        {\r\n            AssemblyName an = new AssemblyName();\r\n\r\n            an.SetPublicKey(GetPublicKey());\r\n            an.Flags = GetFlags() | AssemblyNameFlags.PublicKey;\r\n\r\n            if (version == null)\r\n                an.Version = GetVersion();\r\n            else\r\n                an.Version = version;\r\n\r\n            an.CultureInfo = culture;\r\n            an.Name = name;\r\n\r\n            RuntimeAssembly retAssembly = nLoad(an, null, null, this, ref stackMark,\r\n                                IntPtr.Zero,\r\n                                throwOnFileNotFound, false);\r\n\r\n            if (retAssembly == this || (retAssembly == null && throwOnFileNotFound))\r\n            {\r\n                throw new FileNotFoundException(String.Format(culture, SR.IO_FileNotFound_FileName, an.Name));\r\n            }\r\n\r\n            return retAssembly;\r\n        }\r\n\r\nThe \"name\", \"culture\" and version are correct. The satellite assembly is built and available in \"ja\" directory. \r\n\r\nHow can I identify the root cause? \r\n"},{"Id":"6835428685","Type":"IssuesEvent","CreatedAt":"2017-11-10T01:06:57","Actor":"CalArabshahi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14972","RelatedDescription":"Opened issue \"Cannot load Japanese Satellite Assembly\" (#14972) at dotnet/coreclr","RelatedBody":"My product targets .NETStandard 2.0 and .NET Framework 4.5.2. \r\n\r\nA satellite-assembly test running on an English-US Windows laptop changes the thread.CurrentUICulture and thread.CurrentCulture to ja-JP and throws an exception. This test cases succeeds in .NET Framework but fails in .NET Core 2.0. The exception is  \r\n\r\n> The active test run was aborted. Reason: me fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks, IntPtr ptrLoadContextBinder)\r\n>    at System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(String name, CultureInfo culture, Version version, Boolean throwOnFileNotFound, StackCrawlMark& stackMark)\r\n>    at System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(CultureInfo lookForCulture, StackCrawlMark& stackMark)\r\n>    at System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(CultureInfo culture, Dictionary`2 localResourceSets, Boolean tryParents, Boolean createIfNotExists, StackCrawlMark& stackMark)\r\n>    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo requestedCulture, Boolean createIfNotExists, Boolean tryParents, StackCrawlMark& stackMark)\r\n>    at System.Resources.ResourceManager.InternalGetResourceSet(CultureInfo culture, Boolean createIfNotExists, Boolean tryParents)\r\n>    at System.Resources.ResourceManager.GetObject(String name, CultureInfo culture, Boolean wrapUnmanagedMemStream)\r\n> \r\n\r\n \r\nThis issue is similar to #12668 .  \r\n\r\nI debugged it to \r\n\r\n        internal RuntimeAssembly InternalGetSatelliteAssembly(String name,\r\n                                                              CultureInfo culture,\r\n                                                              Version version,\r\n                                                              bool throwOnFileNotFound,\r\n                                                              ref StackCrawlMark stackMark)\r\n        {\r\n            AssemblyName an = new AssemblyName();\r\n\r\n            an.SetPublicKey(GetPublicKey());\r\n            an.Flags = GetFlags() | AssemblyNameFlags.PublicKey;\r\n\r\n            if (version == null)\r\n                an.Version = GetVersion();\r\n            else\r\n                an.Version = version;\r\n\r\n            an.CultureInfo = culture;\r\n            an.Name = name;\r\n\r\n            RuntimeAssembly retAssembly = nLoad(an, null, null, this, ref stackMark,\r\n                                IntPtr.Zero,\r\n                                throwOnFileNotFound, false);\r\n\r\n            if (retAssembly == this || (retAssembly == null && throwOnFileNotFound))\r\n            {\r\n                throw new FileNotFoundException(String.Format(culture, SR.IO_FileNotFound_FileName, an.Name));\r\n            }\r\n\r\n            return retAssembly;\r\n        }\r\n\r\nThe \"name\", \"culture\" and version are correct. The satellite assembly is built and available in \"ja\" directory. \r\n\r\nHow can I identify the root cause? \r\n"},{"Id":"6835414010","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:01:45","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14971","RelatedDescription":"Opened pull request \"[WIP] dummy change\" (#14971) at dotnet/coreclr","RelatedBody":""},{"Id":"6835388222","Type":"PullRequestEvent","CreatedAt":"2017-11-10T00:52:59","Actor":"vancem","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14948","RelatedDescription":"Merged pull request \"Fix build break when VS2015 is not installed.\" (#14948) at dotnet/coreclr","RelatedBody":"If you ONLY install VS2017 (now the common scneario)\r\nand build coreclr, it will fail  with COM with a Class_Not_Registered error\r\n\r\nThis is because a build-tools package is depending on an old COM object\r\nthat has gone way in VS2017.\r\n\r\nWhile we sort getting a proper fix, this makes the work-around (which\r\nis registering the DLL by hand) discoverable.\r\n\r\nSee https://github.com/dotnet/coreclr/issues/11305 for details.\r\n\r\n@lt72 @russellhadley @briansull "},{"Id":"6835234734","Type":"PullRequestEvent","CreatedAt":"2017-11-10T00:02:31","Actor":"mmitche","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14969","RelatedDescription":"Merged pull request \"Fix clean.cmd to work if no parameters are passed\" (#14969) at dotnet/coreclr","RelatedBody":""},{"Id":"6835212121","Type":"PullRequestEvent","CreatedAt":"2017-11-09T23:55:21","Actor":"ViktorHofer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14847","RelatedDescription":"Merged pull request \"Release/2.0.0 - Make coreclr exceptions serializable and add typeforwards\" (#14847) at dotnet/coreclr","RelatedBody":"Related https://github.com/dotnet/corefx/issues/24424"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6835691363","Type":"PullRequestEvent","CreatedAt":"2017-11-10T02:41:16","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7986","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to dev/release/2.0\" (#7986) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into dev/release/2.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-dev/release/2.0-20171109-080036\ngit reset --hard upstream/dev/release/2.0\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-dev/release/2.0-20171109-080036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6835688088","Type":"PullRequestEvent","CreatedAt":"2017-11-10T02:40:00","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7985","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#7985) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171109-080034\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171109-080034 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6835684235","Type":"PullRequestEvent","CreatedAt":"2017-11-10T02:38:33","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7980","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#7980) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171108-080037\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171108-080037 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6835439357","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:10:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7991","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25909-03 (master)\" (#7991) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6835432923","Type":"IssuesEvent","CreatedAt":"2017-11-10T01:08:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7993","RelatedDescription":"Closed issue \"Tracking related nugets packaged for a cli/msbuild release\" (#7993) at dotnet/cli","RelatedBody":"I am responsible for packaging msbuild for mono. Say, I am looking at tracking the current 15.5 release.\r\nAnd I need to figure out how to obtain some non-msbuild bits to package with msbuild.\r\n\r\n1. I am using https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props to get the nuget\r\n    versions for the SDKs (https://github.com/dotnet/cli/blob/release/15.5/build/BundledSdks.props).\r\n\r\n2. I get the Microsoft.NET.Build.Extensions nuget using https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L17\r\n\r\n3. I get NuGet.Build.Tasks with version https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L19\r\n\r\n4. I get runtime.osx-x64.Microsoft.NETCore.DotNetHostResolver with version https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L4\r\n\r\nQuestion:\r\n\r\n1. I want to find the corresponding nuget version for https://dotnet.myget.org/feed/dotnet-cli/package/nuget/Microsoft.DotNet.MSBuildSdkResolver .\r\n    But I don't know how to relate the cli 15.5 branch with the sdk one and figure out the nuget version I should be using.\r\n     "},{"Id":"6835216342","Type":"IssuesEvent","CreatedAt":"2017-11-09T23:56:44","Actor":"radical","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7993","RelatedDescription":"Opened issue \"Tracking related nugets packaged for a cli/msbuild release\" (#7993) at dotnet/cli","RelatedBody":"I am responsible for packaging msbuild for mono. Say, I am looking at tracking the current 15.5 release.\r\nAnd I need to figure out how to obtain some non-msbuild bits to package with msbuild.\r\n\r\n1. I am using https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props to get the nuget\r\n    versions for the SDKs (https://github.com/dotnet/cli/blob/release/15.5/build/BundledSdks.props).\r\n\r\n2. I get the Microsoft.NET.Build.Extensions nuget using https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L17\r\n\r\n3. I get NuGet.Build.Tasks with version https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L19\r\n\r\n4. I get runtime.osx-x64.Microsoft.NETCore.DotNetHostResolver with version https://github.com/dotnet/cli/blob/release/15.5/build/DependencyVersions.props#L4\r\n\r\nQuestion:\r\n\r\n1. I want to find the corresponding nuget version for https://dotnet.myget.org/feed/dotnet-cli/package/nuget/Microsoft.DotNet.MSBuildSdkResolver .\r\n    But I don't know how to relate the cli 15.5 branch with the sdk one and figure out the nuget version I should be using.\r\n     "},{"Id":"6835193024","Type":"PullRequestEvent","CreatedAt":"2017-11-09T23:49:25","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7984","RelatedDescription":"Merged pull request \"Changes in the Transport feed DLL requires our response; release/2.0.0\" (#7984) at dotnet/cli","RelatedBody":"Changes in the Transport feed DLL requires our response; update Transport feed DLL version and base URL.\r\n\r\nDefining \"BuildTasksFeedDll\" & relevent 'UsingTask' no longer needed as PublishNupkgToTransportFeed.targets uses the imported Microsoft.DotNet.Build.Tasks.Feed.targets to locate the Feed DLL\r\n\r\n\r\n"},{"Id":"6835185568","Type":"PullRequestEvent","CreatedAt":"2017-11-09T23:47:13","Actor":"seancpeters","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7992","RelatedDescription":"Opened pull request \"Inserting dotnet/templating rel/2.1.0-preview1 into cli master\" (#7992) at dotnet/cli","RelatedBody":"dotnet/templating build 1.0.0-beta3-20171109-311\r\n"},{"Id":"6834953902","Type":"PullRequestEvent","CreatedAt":"2017-11-09T22:44:54","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7991","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25909-03 (master)\" (#7991) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6835759086","Type":"IssuesEvent","CreatedAt":"2017-11-10T03:07:30","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/550","RelatedDescription":"Closed issue \"Where can I find release notes for NETStandard.Library 2.0.1\" (#550) at dotnet/standard","RelatedBody":"Today VS showed me an update for .net standard. But I can't find any release notes for this. Also update button in VS is disabled.\r\n\r\nI am talking about this package - https://www.nuget.org/packages/NETStandard.Library/2.0.1/"},{"Id":"6835606425","Type":"IssuesEvent","CreatedAt":"2017-11-10T02:10:19","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/489","RelatedDescription":"Closed issue \"UWP SDK 16267 - The type 'Object' is defined in an assembly that is not referenced \" (#489) at dotnet/standard","RelatedBody":"I am trying to UWP to work with .NET Standard 2.0, and am being presented with the following error when trying to build the project:\r\n\r\n> error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n\r\nI reported this as a comment on issue #391 and have been asked to open this as a new issue due to being related to UWP.\r\n\r\nI am running Visual Studio 2017 15.4 Preview 2 (problem was also present on Preview 1). I also have the Insider SDK 16267 installed - According to the following blog post UWP & .NET Standard 2.0 are supposed to work together:\r\nhttps://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview\r\n\r\nIn the comments of that blog post, people were getting issues similar to this (which I also had originally)\r\n> error : Project ‘.csproj’ targets ‘.NETStandard,Version=v2.0’. It cannot be referenced by a project that targets ‘UAP,Version=v10.0.16267\r\n\r\nThe fix was to install the .NET Standard SDK 2.0.2 which is available from:\r\nhttps://aka.ms/ns2x64\r\nhttps://aka.ms/ns2x86\r\n\r\nNow, VS attempts to build the project, but fails with the error above that `Object` is defined in an un-referenced assembly.\r\n\r\nCopied in those relevant from the original comment on issue #391\r\ncc: @weshaggard @joperezr @nattress \r\n"},{"Id":"6825131750","Type":"IssuesEvent","CreatedAt":"2017-11-08T09:26:05","Actor":"xiedongweo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/578","RelatedDescription":"Opened issue \"SqlConnection in .net standard 2.0 can't access SQL Server\" (#578) at dotnet/standard","RelatedBody":"I'm using \"System.Data.SqlClient\" namespace relevant APIs in .net standard 2.0 to access data from my remote sql server. I'm using these APIs in UWP app.\r\n\r\nThis is my sql connection string:\r\n`String connsql = @\"Data Source=10.1xx.xxx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";`\r\n\r\nI used this connection string to connect to my sql server, but I got the following exception:\r\n`System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught) ---> System.AggregateException: One or more errors occurred. (An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433) ---> System.Net.Internals.SocketExceptionFactory+ExtendedSocketException: An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait(TimeSpan timeout)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle..ctor(String serverName, Int32 port, Int64 timerExpire, Object callbackObject, Boolean parallel)\r\n---> (Inner Exception #0) System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (0x80004005): An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()<---\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at SQLServerSample.MainPage.OnNavigatedTo(NavigationEventArgs e)\r\nClientConnectionId:00000000-0000-0000-0000-000000000000`\r\n\r\nBut, the same code worked well in windows console application:\r\n` String connsql = @\"Data Source=10.1xx.xx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";\r\n\r\n            try\r\n            {\r\n                using (SqlConnection conn = new SqlConnection())\r\n                {\r\n                    conn.ConnectionString = connsql;\r\n                    conn.Open(); \r\n                    String sql = \"select * from dbo.Table_1\";\r\n                    SqlCommand cmd = new SqlCommand(sql, conn);\r\n                    SqlDataReader dr = cmd.ExecuteReader();\r\n                    while (dr.Read())\r\n                    {\r\n                        Debug.WriteLine(dr[\"ID\"] + \": \" + dr[\"Name\"]);\r\n                    }\r\n                    conn.Close();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Debug.WriteLine(ex);\r\n            }`\r\n\r\nSo, I do not know where  the issue is. \r\nAre there any different things between UWP and classic win32 application in .net standard 2.0?\r\nHow to solve this issue?"},{"Id":"6822836123","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:29:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/577","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02207-01 (master)\" (#577) at dotnet/standard","RelatedBody":""},{"Id":"6822322355","Type":"IssuesEvent","CreatedAt":"2017-11-07T19:40:46","Actor":"twtdev","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/576","RelatedDescription":"Opened issue \"WPF Design-time exceptions with NET Standard 2.0 class library, citing System.ComponentModel.Annotations, Version=4.2.0.0\" (#576) at dotnet/standard","RelatedBody":"I have posted [this](https://stackoverflow.com/q/46865023/1628429) StackOverflow question, but to no avail. \r\nTL;DR I only experience problems at _design-time_, not run-time. I only started experiencing the problem after upgrading my PCL projects to NET Standard 2.0 and my NuGet format to PackageReference.\r\nAs a result, pretty much all of my dialog boxes are crippled at design-time. \r\n\r\nHere is a simple repro:\r\n[WpfAppToTestDesignTimeError.zip](https://github.com/dotnet/standard/files/1451363/WpfAppToTestDesignTimeError.zip)\r\n\r\nOpen the solution, compile, open MainWindow.xaml--no problem.\r\nNow, open MainWindowViewModel and uncomment the 2nd property (the one whose type comes from the NET Standard 2 library), compile and note the exception in MainWindow.\r\n"},{"Id":"6819512071","Type":"IssuesEvent","CreatedAt":"2017-11-07T10:28:41","Actor":"WalterEbbers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/575","RelatedDescription":"Opened issue \".NET Standard 2.0 / .NET Framework 4.6.1 Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\" (#575) at dotnet/standard","RelatedBody":"Hi,\r\nI have a .NET Standard 2.0 library which references a few NET 4.6.1 libraries. \r\nThe .NET Standard library will be used in a .NET Core web application. \r\nThe .NET 4.6.1 Framework uses library 'System.ServiceModel.dll' FOR WCF calls.\r\n\r\nI try to do the following. \r\nMy .NET Core webapp goes to the .NET Standard library which calls something from my .NET Framework 4.6.1 project. But at that moment i get the following error: \r\n'Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.'\r\n\r\nThe 'System.ServiceModel.dll' is referenced as a assemblyreference in the .NET Standard project and the .NET Core webapp. \r\n\r\nI really thought that this would work but sadly it doesn't. Is this a issue with the .NET libraries?\r\nDo i need to change things in my .NET Standard / Core project?\r\n\r\nThnx in advance :) \r\n\r\nWalter\r\n\r\n\r\n\r\n"},{"Id":"6818599708","Type":"IssuesEvent","CreatedAt":"2017-11-07T06:35:50","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Closed issue \"Serializing DataTable object to Json  with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n\r\n\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n\r\n\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6818144609","Type":"IssuesEvent","CreatedAt":"2017-11-07T03:25:15","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Opened issue \"DataTable Serialized with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6817738225","Type":"PullRequestEvent","CreatedAt":"2017-11-07T01:01:08","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/515","RelatedDescription":"Merged pull request \"Merge Dev/release/2.0.0 into release/2.0.0\" (#515) at dotnet/standard","RelatedBody":"cc @eerhardt \r\n\r\nJust putting this PR to be ready to merge and test it in CI. "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6835996212","Type":"PullRequestEvent","CreatedAt":"2017-11-10T04:52:52","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25169","RelatedDescription":"Opened pull request \"Adding tests for System.Runtime.Caching\" (#25169) at dotnet/corefx","RelatedBody":"Also adding a solution file for all System.Runtime.Caching projects\r\n"},{"Id":"6835964606","Type":"PullRequestEvent","CreatedAt":"2017-11-10T04:37:50","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25165","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02210-01, preview1-25910-03, preview1-25910-02, preview1-25909-03, beta-25909-01, beta-25909-01, respectively (master)\" (#25165) at dotnet/corefx","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`044590d`](https://github.com/dotnet-maestro-bot/corefx/commits/044590d83e01734c3dba796b3422a6b6de90298d) Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02210-01, preview1-25910-03, preview1-25910-02, preview1-25909-03, beta-25909-01, beta-25909-01, respectively\r\n   * :hourglass: **Linux arm Release Build** Triggered.\r\n   * :hourglass: **Linux x64 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/5306/)\r\n   * :hourglass: **NETFX x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5104/)\r\n   * :hourglass: **OSX x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5259/)\r\n   * :hourglass: **Packaging All Configurations x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5055/)\r\n   * :hourglass: **Tizen armel Debug Build** Triggered.\r\n   * :hourglass: **UWP CoreCLR x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5159/)\r\n   * :hourglass: **UWP NETNative x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5077/)\r\n   * :hourglass: **Windows x64 Debug Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5164/)\r\n   * :hourglass: **Windows x86 Release Build** Started [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5142/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/CROSS_check_prtest/8970/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/corefx?pullRequest=25165)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`970431d`](https://github.com/dotnet-maestro-bot/corefx/commits/970431d4bfd31747cf581de11df5f454f5cab632) Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02210-01, preview1-25908-23, preview1-25909-05, preview1-25909-03, beta-25909-01, beta-25909-01, respectively\r\n   * :x: **Linux x64 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/5305/)\r\n   * :x: **OSX x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5258/)\r\n   * :x: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5054/)\r\n   * :x: **Tizen armel Debug Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/tizen_armel_cross_debug_prtest/8979/)\r\n   * :x: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5076/)\r\n   * :hourglass: **Linux arm Release Build** Started. [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/linux_arm_cross_release_prtest/5052/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/CROSS_check_prtest/8969/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/corefx?pullRequest=25165)\r\n   * :heavy_check_mark: **NETFX x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5103/)\r\n   * :heavy_check_mark: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5158/)\r\n   * :heavy_check_mark: **Windows x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5163/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5141/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`0a3b739`](https://github.com/dotnet-maestro-bot/corefx/commits/0a3b739977045889c2b4435ddb4ca3997d0057e2) Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02209-01, preview1-25908-23, preview1-25909-05, preview1-25909-03, beta-25909-01, beta-25909-01, respectively\r\n   * :x: **Linux arm Release Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/linux_arm_cross_release_prtest/5047/)\r\n   * :x: **Linux x64 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/5302/)\r\n   * :x: **OSX x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5255/)\r\n   * :x: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5051/)\r\n   * :x: **Tizen armel Debug Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/tizen_armel_cross_debug_prtest/8976/)\r\n   * :x: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5073/)\r\n   * :x: **Windows x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5160/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/CROSS_check_prtest/8966/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/corefx?pullRequest=25165)\r\n   * :heavy_check_mark: **NETFX x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5100/)\r\n   * :heavy_check_mark: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5155/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5138/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`cbbf83e`](https://github.com/dotnet-maestro-bot/corefx/commits/cbbf83e39e7d477fe1d7f07be0ff18fb09cb092e) Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02209-01, preview1-25908-23, preview1-25909-01, preview1-25909-03, beta-25909-01, beta-25909-01, respectively\r\n   * :x: **Linux arm Release Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/linux_arm_cross_release_prtest/5045/)\r\n   * :x: **Linux x64 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_false_prtest/5300/)\r\n   * :x: **OSX x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5253/)\r\n   * :x: **Packaging All Configurations x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_all+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5049/)\r\n   * :x: **Tizen armel Debug Build** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/tizen_armel_cross_debug_prtest/8974/)\r\n   * :x: **UWP NETNative x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uapaot+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5071/)\r\n   * :heavy_check_mark: **CROSS Check** Build finished.  [Details](https://ci.dot.net/job/dotnet_corefx/job/master/job/CROSS_check_prtest/8964/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/corefx?pullRequest=25165)\r\n   * :heavy_check_mark: **NETFX x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5098/)\r\n   * :heavy_check_mark: **UWP CoreCLR x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_uap+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5153/)\r\n   * :heavy_check_mark: **Windows x64 Debug Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/5158/)\r\n   * :heavy_check_mark: **Windows x86 Release Build** Build finished.  [Details](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netcoreapp+CGroup_Release+AGroup_x86+TestOuter_false_prtest/5136/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6835754558","Type":"IssuesEvent","CreatedAt":"2017-11-10T03:05:42","Actor":"KKhurin","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25168","RelatedDescription":"Opened issue \"Refactor S.R.Caching ObjectCache.Host tests to be able to run without creating a separate AppDomain\" (#25168) at dotnet/corefx","RelatedBody":"A handful of tests for System.Runtime.Caching borrowed from Mono are using a separate app domains to test ObjectCache.Host extensibility points. They would need some refactoring before we can run them in Core. \r\n\r\nOne simple option would be to put each of them into a separate project; another is to combine them all to run once. In my preliminary tests they would add about 2-3% of additional code coverage."},{"Id":"6835626208","Type":"PullRequestEvent","CreatedAt":"2017-11-10T02:17:36","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25160","RelatedDescription":"Merged pull request \"Delete forced GC during System.Drawing.Common shutdown\" (#25160) at dotnet/corefx","RelatedBody":"This is potential reliability and performance and problem. The forced GC is only going to collect unreachable objects, and so it is not providing any sort of guarantees that there are no outstanding GDI references. It should not be required.\r\n\r\nFixes #25159"},{"Id":"6835626186","Type":"IssuesEvent","CreatedAt":"2017-11-10T02:17:35","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25159","RelatedDescription":"Closed issue \"Remove forced GC during System.Drawing.Common shutdown\" (#25159) at dotnet/corefx","RelatedBody":"System.Drawing.Common is forcing GC and waiting for pending finalizers during shutdown: https://github.com/dotnet/corefx/blob/7d3cd2adff8272efcf1bc6e0bf1902de6fd9e8e9/src/System.Drawing.Common/src/System/Drawing/GdiplusNative.Unix.cs#L95\r\n\r\nThis is potential reliability and performance and problem. This sequence is only going to collect unreachable objects, and so it is not providing any sort of guarantees that there are no outstanding GDI references.\r\n\r\nIf this is really necessary for some reason, the code needs to have a good comment describing why."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6836078816","Type":"IssuesEvent","CreatedAt":"2017-11-10T05:25:33","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22994","RelatedDescription":"Closed issue \"Wrong error message for `in ref` parameters\" (#22994) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nhttps://github.com/dotnet/roslyn/commit/7dfc2fa4ee55c7c8c391ddbfc3fc4312c0c617db\r\n\r\n**Steps to Reproduce**:\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDZICYgNQA+AAgAwAERAjANwCwAUEQMwUBMZAwmQN4Nn8UWRACxkAsgAo0AOzII4AMzIyYygJQ8+AgL4NtQA===\r\n```\r\nusing System;\r\npublic class C {\r\n    public void M(in ref int i) {\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\n```\r\nerror CS8328: The parameter modifier 'ref' cannot be used with 'in'\r\n```\r\n**Actual Behavior**:\r\n```\r\nerror CS8328: The parameter modifier 'out' cannot be used with 'in'\r\n```"},{"Id":"6836078350","Type":"PullRequestEvent","CreatedAt":"2017-11-10T05:25:20","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23035","RelatedDescription":"Merged pull request \"Fix error message strings on conflicting parameter modifiers\" (#23035) at dotnet/roslyn","RelatedBody":"Fixes #22994\r\n\r\nAs part of reverting back ref-readonly parameters to be in parameters for the second time (went in #22424), the error message was using the incorrect modifier. Fixed the tests and the source code in this PR."},{"Id":"6835474361","Type":"IssuesEvent","CreatedAt":"2017-11-10T01:23:12","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21674","RelatedDescription":"Closed issue \"Intellisense suggests fully-qualified type name when property has same name as other type\" (#21674) at dotnet/roslyn","RelatedBody":"Intellisense should suggest `A` at `$$` below rather than `ConsoleApplication1.A`.\r\n```\r\nnamespace ConsoleApplication1\r\n{\r\n    class Program\r\n    {\r\n        static A B { get; set; }\r\n        static B A { get; set; }\r\n\r\n        static void Main()\r\n        {\r\n            B = new $$\r\n        }\r\n    }\r\n    class A { }\r\n    class B { }\r\n}\r\n```"},{"Id":"6835473562","Type":"IssuesEvent","CreatedAt":"2017-11-10T01:22:56","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/2644","RelatedDescription":"Closed issue \"IntelliSense incorrectly attempts to disambiguate generic arguments when they clash with a member\" (#2644) at dotnet/roslyn","RelatedBody":"Given the following:\n\n``` C#\nusing System.Collections.ObjectModel;\n\nnamespace ConsoleApplication34\n{\n    class Program\n    {\n        public static ReadOnlyCollection<Bar> Bar\n        {\n            get;\n        }\n\n        static void Main(string[] args)\n        {\n            Bar = new \n        }\n    }\n\n    class Bar\n    {\n    }\n}\n```\n\nIntelliSense incorrectly attempts to disambiguate the `Bar` type in the `ReadOnlyCollection<ConsoleApplication34.Bar>` suggestion. It appears to do this because it thinks there is a clash with the `Bar` property.\n\n![image](https://cloud.githubusercontent.com/assets/1103906/7572788/b2381010-f7d5-11e4-85d4-98b847637565.png)\n\nAfter this, you are immediately asked to simplify the expression:\n\n![image](https://cloud.githubusercontent.com/assets/1103906/7572891/6c9e03d8-f7d6-11e4-802f-fda64b049a8d.png)\n"},{"Id":"6835471874","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:22:19","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/21379","RelatedDescription":"Merged pull request \"Fixed IntelliSense completion for initializing a generic class member when a class member has the same name as generic type argument\" (#21379) at dotnet/roslyn","RelatedBody":"**Customer scenario**\r\nIntelliSense incorrectly attempts to disambiguate generic arguments when they clash with a member\r\n\r\n**Bugs this fixes:**\r\nFixes #2644\r\nFixes #21674\r\n\r\n**Workarounds, if any**\r\nNone\r\n\r\n**Risk**\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\nNo\r\n\r\n**How was the bug found?**\r\ncustomer reported"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6835307365","Type":"PullRequestEvent","CreatedAt":"2017-11-10T00:26:20","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4902","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4902) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6835053130","Type":"PullRequestEvent","CreatedAt":"2017-11-09T23:10:20","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4902","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4902) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6833064245","Type":"PullRequestEvent","CreatedAt":"2017-11-09T16:23:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4901","RelatedDescription":"Opened pull request \"Enable generation of stack trace data\" (#4901) at dotnet/corert","RelatedBody":"The stack trace metadata supplements reflection metadata to provide information about method names in stack traces (ex. obtained from `Exception.StackTrace` at runtime). I made the emission optional in the compiler. Enabling emission of this data increases the size of a HelloWord-style app by about 300 kB.\r\n\r\nIn this change:\r\n* Actual emission of the data in the compiler. This is done by checking what compiled method bodies don't have reflection information and generating metadata for those.\r\n* Making the mapping table cross platform. The Project X/N version of this emits `ADDR32NB` relocs (RVA) that are Windows-only. I'm switching to `RELPTR32` outside of N/X.\r\n* Enabling S.P.StackTraceMetadata library initializer to run at startup to register a callback from CoreLib.\r\n* Weakening an assert in MetadataTransfor to prevent generation of definition metadata for blocked types. We would have probably done this anyway with the work to enable poking random holes into metadata blocking."},{"Id":"6832885795","Type":"PullRequestEvent","CreatedAt":"2017-11-09T15:53:10","Actor":"alpencolt","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4900","RelatedDescription":"Opened pull request \"[armel][cross] Added proper command line arguments to documentation.\" (#4900) at dotnet/corert","RelatedBody":"This infomation wasn't exist in documentation, but now we can find which command line argument we should use for running RuyJIT.\r\n@dotnet/arm32-corert-contrib PTAL"},{"Id":"6831970938","Type":"PullRequestEvent","CreatedAt":"2017-11-09T13:01:46","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4899","RelatedDescription":"Opened pull request \"[ARM32/ObjWriter] Implementation thumb mode\" (#4899) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"6831638433","Type":"PullRequestEvent","CreatedAt":"2017-11-09T11:43:02","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4896","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4896) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6835528679","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:42:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1721","RelatedDescription":"Opened pull request \"[Perf] Retarget to .NET Core 2.0 and remove unnecessary assemblies\" (#1721) at dotnet/sdk","RelatedBody":"This removes 2 MB of files that were being copied unnecessarily to the netcoreapp folder of the sdk. They were:\r\n\r\n1. duplicates of shared framework assemblies (because dependencies pulled in 4.3.x/1.1 assemblies, but we targeted 1.0)\r\n\r\n2. nuget assemblies that are loaded from CLI directory\r\n\r\n3. core-setup dependencies that are loaded from CLI directory\r\n\r\nI'm doing this as step 1 to crossgen'ing the netcoreapp variant of the SDK. I didn't want to have to crossgen and sign the extra unnecessary files, which would slow down the build and make the bloat even bigger.\r\n"},{"Id":"6835388788","Type":"IssuesEvent","CreatedAt":"2017-11-10T00:53:11","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1720","RelatedDescription":"Opened issue \"ServerGarbageCollection is not honored in SDK project and TargetFramework net47\" (#1720) at dotnet/sdk","RelatedBody":"_From @Tornhoof on October 17, 2017 7:58_\n\nThe setting server garbage collection in the new SDK project format is not honored for TargetFramework net47, it works for netcoreapp 2.0\r\n```xml\r\n<ServerGarbageCollection>true</ServerGarbageCollection>\r\n```\r\n# Steps to repreoduce\r\n1. Create Console project\r\n2. TargetFramework net47\r\n3. Change project format to new format\r\n4. Add setting from above to property group\r\n5. Put in the main method:\r\n```csharp\r\nvar latencyMode = System.Runtime.GCSettings.LatencyMode;\r\nvar isServerGC = System.Runtime.GCSettings.IsServerGC;\r\nConsole.WriteLine($\"Server: {isServerGC}, Mode: {latencyMode}\");\r\n```\r\n## Expected result\r\n1. Output: ``Server: True, Mode: Interactive``\r\n## Actual result\r\n1. Output is: ``Server: False, Mode: Interactive`` \r\n\r\nNote: if you multi target the project with ``<TargetFrameworks>net47;netcoreapp2.0</TargetFrameworks``\r\nyou can see that the setting is properly used in .net core 2.0\r\n\r\nThis bug is kinda annoying since it means my Web App for ASP.NET Core 2.0 on .NET 4.7 is running on workstation GC and not on server background gc as it's usually done.\r\n\r\nAll my attempts to ``set complus_gcServer=true`` didn't make any difference.\r\n\r\nRepro:\r\n[ServerGcRepro.zip](https://github.com/dotnet/project-system/files/1390201/ServerGcRepro.zip)\r\n\r\nFor reference:\r\n```\r\n.NET-Befehlszeilentools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\nVS version is VS 2017 15.4.0\n\n_Copied from original issue: dotnet/project-system#2896_"},{"Id":"6833629412","Type":"PullRequestEvent","CreatedAt":"2017-11-09T18:06:08","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1719","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#1719) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171109-080041\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171109-080041 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6830674728","Type":"PullRequestEvent","CreatedAt":"2017-11-09T08:00:42","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1719","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1719) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171109-080041\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171109-080041 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6829912215","Type":"PullRequestEvent","CreatedAt":"2017-11-09T03:08:08","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1718","RelatedDescription":"Opened pull request \"Add perf tests\" (#1718) at dotnet/sdk","RelatedBody":"Adds some initial perf tests.\r\n\r\n@tannergooding @nguerrera @livarcocc for review"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":45,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2017-11-10T05:30:22.5840728Z","RunDurationInMilliseconds":8716}