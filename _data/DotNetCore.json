{"Data":{"Blog":{"FeedItems":[{"Title":"The F# development home on GitHub is now dotnet/fsharp","PublishedOn":"2019-05-20T18:16:50+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"TL;DR We&#8217;ve moved the F# GitHub repository from microsoft/visualfsharp to dotnet/fsharp, as specified in the corresponding RFC.\nF# has a somewhat strange history in its name and brand. If we...","Href":"https://devblogs.microsoft.com/dotnet/the-f-development-home-on-github-is-now-dotnet-fsharp/","RawContent":null},{"Title":"Create Interactive .NET Documentation with Try .NET","PublishedOn":"2019-05-16T20:01:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"When it comes to developers&#8217; documentation, it is essential that we capture their interest and lead them down the path of success as soon as possible. Across multiple languages, developer...","Href":"https://devblogs.microsoft.com/dotnet/creating-interactive-net-documentation/","RawContent":null},{"Title":"Performance Improvements in .NET Core 3.0","PublishedOn":"2019-05-15T19:17:00+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Back when we were getting ready to ship .NET Core 2.0, I wrote a blog post exploring some of the many performance improvements that had gone into it. I enjoyed putting it together so much and received...","Href":"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Default implementations in interfaces","PublishedOn":"2019-05-14T23:47:18+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Default implementations in interfaces\nWith last week&#8217;s posts Announcing .NET Core 3.0 Preview 5 and Visual Studio 2019 version 16.1 Preview 3, the last major feature of C# 8.0 is now available...","Href":"https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/","RawContent":null},{"Title":".NET Core May 2019 Updates – 1.0.16, 1.1.14, 2.1.11 and 2.2.5","PublishedOn":"2019-05-14T19:06:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a Visual...","Href":"https://devblogs.microsoft.com/dotnet/net-core-may-2019/","RawContent":null},{"Title":".NET Framework May 2019 Security and Quality Rollup","PublishedOn":"2019-05-14T18:29:22+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the May 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update.\nSecurity\nCVE-2019-0820 – Denial of Service Vulnerability\nA denial of service...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing the new Microsoft.Data.SqlClient","PublishedOn":"2019-05-08T22:05:21+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post was written by Vicky Harp, Program Manager on SqlClient and SQL Server Tools.\nThose of you who have been following .NET development closely have very likely seen Scott Hunter&#8217;s latest...","Href":"https://devblogs.microsoft.com/dotnet/introducing-the-new-microsoftdatasqlclient/","RawContent":null},{"Title":"Announcing Entity Framework 6.3 Preview with .NET Core Support","PublishedOn":"2019-05-08T22:00:28+00:00","CommentsCount":28,"FacebookCount":0,"Summary":"The first preview of the EF 6.3 runtime is now available in NuGet.\nNote that the package is versioned as 6.3.0-preview5. We plan to continue releasing previews of EF 6.3 every month in alignment with...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-6-3-preview-with-net-core-support/","RawContent":null},{"Title":"Introducing diagnostics improvements in .NET Core 3.0","PublishedOn":"2019-05-08T16:00:57+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In .NET Core 3.0, we are introducing a suite of tools that utilize new features in the .NET runtime that make it easier to diagnose and solve performance problems.\nThese runtime features help you...","Href":"https://devblogs.microsoft.com/dotnet/introducing-diagnostics-improvements-in-net-core-3-0/","RawContent":null},{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":103,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9664387995","Type":"PullRequestEvent","CreatedAt":"2019-05-21T05:16:14","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24610","RelatedDescription":null,"RelatedBody":"Tools like Benchmark.NET use this API to get total allocated memory.  Any reason not to make it work by just calling GC.GetTotalAllocatedBytes?\r\n\r\ncc: @jkotas, @Maoni0, @VSadov, @luhenry "},{"Id":"9664387851","Type":"PullRequestEvent","CreatedAt":"2019-05-21T05:16:13","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24610","RelatedDescription":"Closed pull request \"Implement AppDomain.Monitoring*MemorySize\" (#24610) at dotnet/coreclr","RelatedBody":"Tools like Benchmark.NET use this API to get total allocated memory.  Any reason not to make it work by just calling GC.GetTotalAllocatedBytes?\r\n\r\ncc: @jkotas, @Maoni0, @VSadov, @luhenry "},{"Id":"9664239403","Type":"IssuesEvent","CreatedAt":"2019-05-21T04:32:25","Actor":"iskiselev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24676","RelatedDescription":"Opened issue \"Incorrect parameters passed when profiler set COR_PRF_DISABLE_INLINING\" (#24676) at dotnet/coreclr","RelatedBody":"When profiler `SetEventMask` with `COR_PRF_DISABLE_INLINING` flag set (disable inlining), method get incorrect arguments (on Linux and MacOs, it works correct on Windows).\r\nTry to use next application (compile with release from console app template):\r\n```c#\r\nusing System;\r\n\r\nnamespace repro\r\n{\r\n    public class SomeClass\r\n    {\r\n        public string SomeMethod(string s1, string s2,\r\n            string s3, string s4, string s5, string s6)\r\n        {\r\n            Console.WriteLine($\"{s1}:{s2}:{s3}:{s4}:{s5}:{s6}\");\r\n            return s1;\r\n        }\r\n    }\r\n\r\n    public struct Struct\r\n    {\r\n        public object o1;\r\n        public object o2;\r\n    }\r\n\r\n    public static class BadClass\r\n    {\r\n        //[MethodImpl(MethodImplOptions.NoInlining)]\r\n        public static string BadInline(string s1,\r\n            string s2, Struct @struct, string s3, string s4,\r\n            string s5, string s6)\r\n        {\r\n                var mapperExpression = new SomeClass().SomeMethod(s1, s2,\r\n                    s3, s4, s5, s6);\r\n                return mapperExpression;\r\n        }\r\n    }\r\n    \r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            BadClass.BadInline(\r\n                \"s1\",\r\n                \"s2\",\r\n                new Struct(), \r\n                \"s3\",\r\n                \"s4\",\r\n                \"s5\",\r\n                \"s6\");\r\n        }\r\n    }\r\n}\r\n```\r\nExpected console output: `s1:s2:s3:s4:s5:s6`\r\nBroken console output: `s1:s2:s3:s4:s6:s6`\r\n\r\nIf `BadInline` method marked with `MethodImplOptions.NoInlining` issue is not reproducible.\r\nIssue is only reproducible when profiler that set `COR_PRF_DISABLE_INLINING`  is loaded.\r\nI've reproduced it on version 2.2.5 and only with test application release build.\r\n\r\nIf it is required, I may create test sample with profiler included (thought it will take some time).\r\n\r\nAutomapper 8.0 use pattern affected by this issue, so some of applications that use Automapper  will crash if loaded with profiler requested `COR_PRF_DISABLE_INLINING`."},{"Id":"9664176085","Type":"PullRequestEvent","CreatedAt":"2019-05-21T04:12:51","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24675","RelatedDescription":"Opened pull request \"Exclude superpmicollect with JitStress on arm.\" (#24675) at dotnet/coreclr","RelatedBody":"Revert this when https://github.com/dotnet/coreclr/issues/24633 get fixed.\r\n\r\nStress jobs are failing because of that https://dev.azure.com/dnceng/public/_build/results?buildId=193952&view=ms.vss-test-web.build-test-results-tab."},{"Id":"9663863355","Type":"PullRequestEvent","CreatedAt":"2019-05-21T02:41:56","Actor":"am11","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24674","RelatedDescription":"Opened pull request \"Add header check for atomic_ops.h\" (#24674) at dotnet/coreclr","RelatedBody":"gcc reported the following (warning_as)error on a system, which this PR fixes:\r\n\r\n```sh\r\n/datadrive/projects/coreclr/src/pal/src/libunwind/src/mi/flush_cache.c:56:3: error: #warning unw_flush_cache(): need a way to atomically increment an integer. [-Werror=cpp]\r\n # warning unw_flush_cache(): need a way to atomically increment an integer.\r\n   ^~~~~~~\r\n```\r\n\r\ncc @janvorli "},{"Id":"9663608814","Type":"PullRequestEvent","CreatedAt":"2019-05-21T01:30:31","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24673","RelatedDescription":"Opened pull request \"Improve corefx testing\" (#24673) at dotnet/coreclr","RelatedBody":"1. Add many more platforms.\r\n2. Test using checked in `public`.\r\n3. Test using release in official build.\r\n4. Move corefx results to a separate Mission Control grid\r\n(not just appended to coreclr tests)"},{"Id":"9663545351","Type":"PullRequestEvent","CreatedAt":"2019-05-21T01:11:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24672","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-04021-01 (release/2.2)\" (#24672) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9663412272","Type":"PullRequestEvent","CreatedAt":"2019-05-21T00:29:48","Actor":"MattGal","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24572","RelatedDescription":null,"RelatedBody":"The old Nano queue is unreliable, stuck at version 1709, and will be deprecated; this change moves to running on a Server RS4 host with an 1803 version, and an 1809 version should be available soonish.\r\n\r\n@jkoritzinsky  - it seems like  https://github.com/dotnet/coreclr/issues/21693 is closed, should this also be on the open runs?\r\n\r\n(Weird \"\" and ` syntax is to work around the funkiness of Yaml / PS1)"},{"Id":"9663402990","Type":"PullRequestEvent","CreatedAt":"2019-05-21T00:26:54","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24034","RelatedDescription":null,"RelatedBody":"Fixes #7592.\r\n\r\nUnfortunately, I wasn't able to run benchmarks and even tests. An application fails with a `NullReferenceException` and I can't understand why it happens:\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(CharacteristicObject other, IEnumerable`1 characteristicsToApply)\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore()\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.CreateConfig(CommandLineOptions options, IConfig globalConfig)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.<>c__DisplayClass4_0.<Parse>b__0(CommandLineOptions options)\r\n   at CommandLine.ParserResultExtensions.WithParsed[T](ParserResult`1 result, Action`1 action)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.Parse(String[] args, ILogger logger, IConfig globalConfig)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.RunWithDirtyAssemblyResolveHelper(String[] args, IConfig config)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.Run(String[] args, IConfig config)\r\n   at Npgsql.Benchmarks.Program.Main(String[] args)\r\n```\r\n\r\n```csharp\r\n[Config(typeof(Config))]\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class ActivatorTests\r\n{\r\n    public class Config : ManualConfig\r\n    {\r\n        public Config() => Add(StatisticColumn.OperationsPerSecond);\r\n    }\r\n\r\n    [Benchmark]\r\n    public Address CreateClass() => Activator.CreateInstance<Address>();\r\n\r\n    [Benchmark]\r\n    public Coordinates CreateStruct() => Activator.CreateInstance<Coordinates>();\r\n}\r\n\r\npublic class Address\r\n{\r\n    public string Street { get; set; }\r\n    public string City { get; set; }\r\n    public int Zip { get; set; }\r\n}\r\n\r\npublic struct Coordinates\r\n{\r\n    public double Latitude { get; set; }\r\n    public double Longitude { get; set; }\r\n}\r\n```\r\n\r\nI had no other exceptions while debugging. Anyway, I moved implementation into the benchmark (`Allocate` was replaced by `GetUninitializedObject`) and ran it on the official .NET Core 3 preview 3. There is a little performance degradation in the class initialization case, but for value types there is 5 time boost and zero memory allocation.\r\n\r\nAny help with debugging is very appreciated.\r\n\r\n/cc @GrabYourPitchforks @jkotas "},{"Id":"9663402783","Type":"PullRequestEvent","CreatedAt":"2019-05-21T00:26:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24034","RelatedDescription":"Closed pull request \"Optimized instance creation via activator\" (#24034) at dotnet/coreclr","RelatedBody":"Fixes #7592.\r\n\r\nUnfortunately, I wasn't able to run benchmarks and even tests. An application fails with a `NullReferenceException` and I can't understand why it happens:\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(CharacteristicObject other, IEnumerable`1 characteristicsToApply)\r\n   at BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore()\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.CreateConfig(CommandLineOptions options, IConfig globalConfig)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.<>c__DisplayClass4_0.<Parse>b__0(CommandLineOptions options)\r\n   at CommandLine.ParserResultExtensions.WithParsed[T](ParserResult`1 result, Action`1 action)\r\n   at BenchmarkDotNet.ConsoleArguments.ConfigParser.Parse(String[] args, ILogger logger, IConfig globalConfig)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.RunWithDirtyAssemblyResolveHelper(String[] args, IConfig config)\r\n   at BenchmarkDotNet.Running.BenchmarkSwitcher.Run(String[] args, IConfig config)\r\n   at Npgsql.Benchmarks.Program.Main(String[] args)\r\n```\r\n\r\n```csharp\r\n[Config(typeof(Config))]\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class ActivatorTests\r\n{\r\n    public class Config : ManualConfig\r\n    {\r\n        public Config() => Add(StatisticColumn.OperationsPerSecond);\r\n    }\r\n\r\n    [Benchmark]\r\n    public Address CreateClass() => Activator.CreateInstance<Address>();\r\n\r\n    [Benchmark]\r\n    public Coordinates CreateStruct() => Activator.CreateInstance<Coordinates>();\r\n}\r\n\r\npublic class Address\r\n{\r\n    public string Street { get; set; }\r\n    public string City { get; set; }\r\n    public int Zip { get; set; }\r\n}\r\n\r\npublic struct Coordinates\r\n{\r\n    public double Latitude { get; set; }\r\n    public double Longitude { get; set; }\r\n}\r\n```\r\n\r\nI had no other exceptions while debugging. Anyway, I moved implementation into the benchmark (`Allocate` was replaced by `GetUninitializedObject`) and ran it on the official .NET Core 3 preview 3. There is a little performance degradation in the class initialization case, but for value types there is 5 time boost and zero memory allocation.\r\n\r\nAny help with debugging is very appreciated.\r\n\r\n/cc @GrabYourPitchforks @jkotas "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9664044375","Type":"PullRequestEvent","CreatedAt":"2019-05-21T03:32:55","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11274","RelatedDescription":"Merged pull request \"Insert NuGet Build 5.0.2-rtm.5988 into cli\" (#11274) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.0.2-rtm.5988 into cli release/2.1.6xx branch"},{"Id":"9664022634","Type":"PullRequestEvent","CreatedAt":"2019-05-21T03:26:52","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11383","RelatedDescription":"Merged pull request \"Update branding to 2.2.108\" (#11383) at dotnet/cli","RelatedBody":""},{"Id":"9664022185","Type":"PullRequestEvent","CreatedAt":"2019-05-21T03:26:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11381","RelatedDescription":"Merged pull request \"Update branding to 2.1.605\" (#11381) at dotnet/cli","RelatedBody":""},{"Id":"9664021236","Type":"PullRequestEvent","CreatedAt":"2019-05-21T03:26:27","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11379","RelatedDescription":"Merged pull request \"Update branding to 2.1.508\" (#11379) at dotnet/cli","RelatedBody":""},{"Id":"9663813792","Type":"IssuesEvent","CreatedAt":"2019-05-21T02:28:10","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10537","RelatedDescription":"Closed issue \"File lists in targeting packs and runtime packs\" (#10537) at dotnet/cli","RelatedBody":"In dotnet/sdk#2774, we are starting by globbing all of the reference assemblies. In the past, this has been a source of performance problems so we should instead be consuming a file list like the traditional redist list.\r\n\r\nWe can also leverage this to allow for the WindowsDesktop targeting pack to provide distinct profiles for WPF, Winforms, or both: #10536\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9663498555","Type":"PullRequestEvent","CreatedAt":"2019-05-21T00:56:58","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11369","RelatedDescription":"Merged pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#11369) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9662302527","Type":"PullRequestEvent","CreatedAt":"2019-05-20T20:27:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Merged pull request \"Add asymmetric key import/export APIs\" (#1197) at dotnet/standard","RelatedBody":"This fixes #1178."},{"Id":"9662302502","Type":"IssuesEvent","CreatedAt":"2019-05-20T20:27:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Closed issue \"Consider asymmetric key import/export API for NS2.1\" (#1178) at dotnet/standard","RelatedBody":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)"},{"Id":"9662269105","Type":"PullRequestEvent","CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Merged pull request \"Enable C# mode command line diff\" (#1196) at dotnet/standard","RelatedBody":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```"},{"Id":"9659524879","Type":"PullRequestEvent","CreatedAt":"2019-05-20T13:38:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1201) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n"},{"Id":"9659216513","Type":"PullRequestEvent","CreatedAt":"2019-05-20T12:58:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1201) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n"},{"Id":"9654326128","Type":"PullRequestEvent","CreatedAt":"2019-05-19T13:14:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1200) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n"},{"Id":"9654283516","Type":"PullRequestEvent","CreatedAt":"2019-05-19T12:54:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1200) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n"},{"Id":"9651985164","Type":"PullRequestEvent","CreatedAt":"2019-05-18T13:13:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1199) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n"},{"Id":"9651957462","Type":"PullRequestEvent","CreatedAt":"2019-05-18T12:58:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1199) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9664108208","Type":"IssuesEvent","CreatedAt":"2019-05-21T03:52:06","Actor":"buyaa-n","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/37735","RelatedDescription":"Reopened issue \"Deserialize invalid string should throw but it is parsing to default value\" (#37735) at dotnet/corefx","RelatedBody":"Deserialize invalid string should throw but it is parsing to default value. (MyEnum.Alpha in this case)\r\n```csharp\r\n[Fact] \r\npublic static void DeserializeInvalidString()\r\n{\r\n    string json = \"{ \\\"Value\\\" : \\\"Three\\\" }\";\r\n    JsonReaderException e = Assert.Throws<JsonReaderException>(() =>\r\n    {\r\n        Bucket b = JsonSerializer.Parse<Bucket>(json);\r\n    });\r\n}\r\n\r\npublic static void DeserializeInvalidValue()\r\n{\r\n    string json = \"{ \\\"Value\\\" : \\\"3\\\" }\";\r\n    JsonReaderException e = Assert.Throws<JsonReaderException>(() =>\r\n    {\r\n        Bucket b = JsonSerializer.Parse<Bucket>(json);\r\n    });\r\n}\r\n\r\npublic class Bucket\r\n{\r\n    public MyEnum Value;\r\n}\r\n\r\npublic enum MyEnum\r\n{\r\n    Alpha,\r\n    Beta,\r\n}\r\n```"},{"Id":"9664098741","Type":"IssuesEvent","CreatedAt":"2019-05-21T03:49:12","Actor":"buyaa-n","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37735","RelatedDescription":"Closed issue \"Deserialize invalid string should throw but it is parsing to default value\" (#37735) at dotnet/corefx","RelatedBody":"Deserialize invalid string should throw but it is parsing to default value. (MyEnum.Alpha in this case)\r\n```csharp\r\n[Fact] \r\npublic static void DeserializeInvalidString()\r\n{\r\n    string json = \"{ \\\"Value\\\" : \\\"Three\\\" }\";\r\n    JsonReaderException e = Assert.Throws<JsonReaderException>(() =>\r\n    {\r\n        Bucket b = JsonSerializer.Parse<Bucket>(json);\r\n    });\r\n}\r\n\r\npublic static void DeserializeInvalidValue()\r\n{\r\n    string json = \"{ \\\"Value\\\" : \\\"3\\\" }\";\r\n    JsonReaderException e = Assert.Throws<JsonReaderException>(() =>\r\n    {\r\n        Bucket b = JsonSerializer.Parse<Bucket>(json);\r\n    });\r\n}\r\n\r\npublic class Bucket\r\n{\r\n    public MyEnum Value;\r\n}\r\n\r\npublic enum MyEnum\r\n{\r\n    Alpha,\r\n    Beta,\r\n}\r\n```"},{"Id":"9663959065","Type":"IssuesEvent","CreatedAt":"2019-05-21T03:08:56","Actor":"windsOne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/37742","RelatedDescription":"Closed issue \"HttpWebRequest set host no need port;how can set\" (#37742) at dotnet/corefx","RelatedBody":"\r\n![image](https://user-images.githubusercontent.com/14890297/57901109-22748580-7896-11e9-81d6-e2dfbd985622.png)\r\n\r\n![image](https://user-images.githubusercontent.com/14890297/57900979-995d4e80-7895-11e9-9f07-571478cc2912.png)\r\n\r\n\r\nWhat should I do to avoid the port being added?"},{"Id":"9663803585","Type":"PullRequestEvent","CreatedAt":"2019-05-21T02:25:24","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35705","RelatedDescription":"Merged pull request \"Implement GetComment API\" (#35705) at dotnet/corefx","RelatedBody":"Implement GetComment API with test cases.\r\n\r\nFixes #33347.\r\n\r\nPlease note that this depends on PR #33393 for successful handling of single line comment with different line terminators.\r\n\r\n@ahsonkhan @terrajobst please review."},{"Id":"9663803574","Type":"IssuesEvent","CreatedAt":"2019-05-21T02:25:24","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33347","RelatedDescription":"Closed issue \"Add GetCommentValue to Utf8JsonReader\" (#33347) at dotnet/corefx","RelatedBody":"We have a GetStringValue today and although comments are strings, the GetCommentValue would have different semantics. For instance, it would not do any unescaping (and you would get the comment delimiters here where you don't for strings, i.e. quotes). Keeping comment reading as part of GetStringValue makes documenting the semantics of the API difficult.\r\n\r\nContext: https://github.com/dotnet/corefx/commit/3d24832abe217779fd9886e1a01ab4ee06f1488e#r31224311\r\n\r\nHence, add a separate API:\r\n```C#\r\npublic ref partial struct Utf8JsonReader\r\n{\r\n    public string GetCommentValue();\r\n}\r\n```\r\n\r\ncc @bartonjs, @stephentoub "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9664331829","Type":"PullRequestEvent","CreatedAt":"2019-05-21T05:00:21","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35524","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#35524) at dotnet/roslyn","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n\r\n"},{"Id":"9663939204","Type":"IssuesEvent","CreatedAt":"2019-05-21T03:03:31","Actor":"NMSAzulX","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35782","RelatedDescription":"Closed issue \"roslyn for benchmark.\" (#35782) at dotnet/roslyn","RelatedBody":"Who can tell me how to test the performance of roslyn?\r\nThis is the source issue [address](https://github.com/dotnet/BenchmarkDotNet/issues/1152)."},{"Id":"9663926529","Type":"PullRequestEvent","CreatedAt":"2019-05-21T03:00:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35833","RelatedDescription":"Merged pull request \"Merge master to features/lspSupport\" (#35833) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9663821345","Type":"PullRequestEvent","CreatedAt":"2019-05-21T02:30:11","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35796","RelatedDescription":"Merged pull request \"Merge release/dev16.2-preview1-vs-deps to master-vs-deps\" (#35796) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.2-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9662829664","Type":"PullRequestEvent","CreatedAt":"2019-05-20T22:00:07","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n"},{"Id":"9662829336","Type":"PullRequestEvent","CreatedAt":"2019-05-20T22:00:01","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 9\" (#7434) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n"},{"Id":"9661603559","Type":"PullRequestEvent","CreatedAt":"2019-05-20T18:29:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7438) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9660864756","Type":"PullRequestEvent","CreatedAt":"2019-05-20T16:27:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7437","RelatedDescription":"Opened pull request \"Initial script changes to enable CPAOT on Linux\" (#7437) at dotnet/corert","RelatedBody":"This is a small set of script changes I made to enable\r\nCPAOT build on Linux. I have basically added the new\r\noption to runtest.sh and fixed a few trivial issues\r\nI hit in my local testing. I haven't yet figured out\r\nhow to cleanly pull down the CoreClrRuntime folder,\r\nfor now I'm copying it over manually from a live CoreCLR\r\nbuild on my DTL VM.\r\n\r\nWith these changes (and after manually copying the Core_Root\r\nfolder from CoreCLR to bin/obj/Linux.x64.Debug/CoreClrRuntme)\r\nI'm able to build the ReadyToRunUnit test. Sadly it doesn't\r\nrun yet, corerun claims that \"coreclr_initialize failed:\r\n0x80070057\"; I have however found out that I'm receiving\r\nexactly the same error when trying to run the same test\r\ncompiled with Crossgen so I guess it's rather a problem\r\nwith my local enlistment and / or build. I'm looking into\r\nthis right now.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9657113896","Type":"PullRequestEvent","CreatedAt":"2019-05-20T07:44:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7428","RelatedDescription":"Merged pull request \"CPAOT support for large version bubble, take #2\" (#7428) at dotnet/corert","RelatedBody":"As I haven't found out how to reopen my original PR after reverting it, I have prepared a new one. In the first commit I have pushed the original change rebased to the preparatory change moving CanInline\r\nto CompilationModuleGroup. In the second commit I added logic for clean separation of input assembly set from the version bubble assembly set.\r\n\r\nEarlier in CPAOT development, we used to use CompilationModuleGroup.ContainsType / ContainsMethodBody for checking whether a given typesystem element belongs to either of these sets. To facilitate the separation I have added two new methods on CompilationModuleGroup, VersionsWithType and VersionsWithMethodBody. I audited all calls to ContainsMethodBody & ContainsType in the CPAOT codebase and I modified those querying the version bubble to call VersionsWithType/MethodBody instead.\r\n\r\nThanks\r\n\r\nTomas\r\n"},{"Id":"9652900882","Type":"PullRequestEvent","CreatedAt":"2019-05-18T21:35:30","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7436","RelatedDescription":"Opened pull request \"SuperIlc fixes for building the entire Pri#1 suite\" (#7436) at dotnet/corert","RelatedBody":"After adding support for the issues.targets file I became\r\nable to run the entire Pri# 1 test suite using SuperIlc.\r\nThis change fixes issues uncovered by this more extensive\r\ntesting.\r\n\r\n1) We need to slightly special-case the Core_Root folder\r\nas it technically lies under the CoreCLR\\bin\\tests\\(cfg)\r\nfolder; when building this entire folder, SuperIlc used to\r\npick it up as one of the folders to compile and was\r\nsubsequently racing between the build of this folder and\r\nof the tests that refer to it in CPAOT framework mode.\r\n\r\n2) BuildFolder construction was collecting test references\r\ntoo early i.e. before the framework was built. I came to\r\nthe conclusion that this is a general problem stemming from\r\nthe fact that ProcessInfo was an arbitrary mixture of the\r\nprocess parameters and the state machine used during the\r\nactual build. I have cleaned this up by separating the\r\nparameter file into a new class ProcessParameters; this let\r\nme add logic for constructing the actual paramterers later.\r\n\r\n3) I have added new options to specify explicit compilation\r\nand execution timeouts to add at least minimum support for\r\nlong-building and long-running tests.\r\n\r\n4) I have parallelized folder deletion and subtree lookup\r\nto improve their performance.\r\n\r\n5) I have added caching to the check for managed assemblies.\r\nPreviously, in the Pri# 1 tests we used to open framework\r\nassemblies about 3 million times just for the purpose of\r\nthis lookup.\r\n\r\n6) I have reduced the batch size for running ETW processes\r\nfrom 100 to 10 as the larger number of events collected\r\nwithin a single session was apparently slowing down test\r\nexecution.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9663818953","Type":"IssuesEvent","CreatedAt":"2019-05-21T02:29:32","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2933","RelatedDescription":"Closed issue \"Get platform manifest and conflict resolution data from targeting packs or runtime packs if appropriate\" (#2933) at dotnet/sdk","RelatedBody":"For .NET Core 2.x, the `Microsoft.NETCore.App` package includes a platform manifest .txt file as well as `PackageConflictOverrides` MSBuild items for conflict resolution.  For .NET Core 3.0, these should come from the targeting pack for framework dependent apps, and from the runtime pack for self-contained apps.\r\n\r\nThis means that both targeting packs and runtime packs need to include this data, and the SDK needs to use the data from the appropriate type of pack depending on whether the app is self-contained or not."},{"Id":"9663642212","Type":"IssuesEvent","CreatedAt":"2019-05-21T01:39:57","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2937","RelatedDescription":"Closed issue \"Get package overrides from txt file in targeting pack instead of msbuild item\" (#2937) at dotnet/sdk","RelatedBody":"https://github.com/aspnet/AspNetCore/pull/7555\r\n\r\nThe file format is very similar to the item.\r\n\r\nBefore: build\\netcoreapp3.0\\Microsoft.AspNetCore.App.props:\r\n ```xml\r\n<ItemGroup>\r\n   <PackageConflictOverrides Include=\"Microsoft.AspNetCore.App\">\r\n       <OverriddenPackages>\r\n         Microsoft.AspNetCore.Antiforgery|3.0.0-preview3-19111-04;\r\n         Microsoft.AspNetCore.Authentication.Abstractions|3.0.0-preview3-19111-04;\r\n         Microsoft.AspNetCore.Authentication.Cookies|3.0.0-preview3-19111-04;\r\n         // ...\r\n \r\n```              \r\n \r\n\r\nAfter: build\\netcoreapp3.0\\Microsoft.AspNetCore.App.PackageOverrides.txt:\r\n\r\n```\r\nMicrosoft.AspNetCore.Antiforgery|3.0.0-preview3-19111-04\r\nMicrosoft.AspNetCore.Authentication.Abstractions|3.0.0-preview3-19111-04\r\nMicrosoft.AspNetCore.Authentication.Cookies|3.0.0-preview3-19111-04\r\n// ...\r\n```\r\n\r\nThe identity of the item follows from the package/file name, the metadata is the body of the txt file, where newlines delimit instead of `;` with whitespace ignored.\r\n"},{"Id":"9663092463","Type":"PullRequestEvent","CreatedAt":"2019-05-20T23:00:26","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3250","RelatedDescription":"Opened pull request \"Update stage 0\" (#3250) at dotnet/sdk","RelatedBody":"Should unblock #3243"},{"Id":"9662903037","Type":"IssuesEvent","CreatedAt":"2019-05-20T22:15:12","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2552","RelatedDescription":"Closed issue \"ThrowExceptionForHR from an SDK task fails due to missing resource\" (#2552) at dotnet/sdk","RelatedBody":"An MSBuild task in this repo that calls Marshal.ThrowExceptionForHR fails due to a missing resource assembly:\r\n\r\n```\r\nd:\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(308,5): error MSB4018: System.IO.FileNotFoundException: Could not load the specified file. [d:\\sdk\\artifacts\\Debug\\tmp\\It_contains_r---AB2009D8\\ResourceTest\\ResourceTest.csproj]\r\nd:\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(308,5): error MSB4018: File name: 'Microsoft.Build.Tasks.CodeAnalysis.resources' [d:\\sdk\\artifacts\\Debug\\tmp\\It_contains_r---AB2009D8\\ResourceTest\\ResourceTest.csproj]\r\nd:\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(308,5): error MSB4018:    at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName assemblyName) [d:\\sdk\\artifacts\\Debug\\tmp\\It_contains_r---AB2009D8\\ResourceTest\\ResourceTest.csproj]\r\nd:\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(308,5): error MSB4018:    at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingResolvingEvent(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName) [d:\\sdk\\artifacts\\Debug\\tmp\\It_contains_r---AB2009D8\\ResourceTest\\ResourceTest.csproj]\r\nd:\\sdk\\artifacts\\Debug\\bin\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(308,5): error MSB4018:    at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) [d:\\sdk\\artifacts\\Debug\\tmp\\It_contains_r---AB2009D8\\ResourceTest\\ResourceTest.csproj]\r\n```\r\n\r\nI'm not sure why this specific resource is needed by ThrowExceptionForHR. It looks like it may be caused by https://github.com/dotnet/roslyn/issues/26777."},{"Id":"9661559491","Type":"IssuesEvent","CreatedAt":"2019-05-20T18:22:22","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2729","RelatedDescription":"Closed issue \"Represent FrameworkReference of transitive projects and packages in the deps.json file.\" (#2729) at dotnet/sdk","RelatedBody":"Today transitive project/package references aren't properly represented in a deps.json. For instance given this project (Bug4332 is a web app, Bug4332RCL is a Razor class library, both targeting netcoreapp3.0):\r\n![image](https://user-images.githubusercontent.com/2008729/49620733-0f6c9980-f977-11e8-8da3-e2d28605a2e1.png)\r\n\r\nToday you get the following `Bug4332.deps.json` entry for `Bug4332RCL`:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThe min-bar expectation would be for the deps.json to look something like:\r\n```JSON\r\n      \"Bug4332RCL/1.0.0\": {\r\n        \"dependencies\": {\r\n          \"Microsoft.AspNetCore.App\": \"3.0.0-preview-18579-0056\"\r\n        },\r\n        \"runtime\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        },\r\n        \"compile\": {\r\n          \"Bug4332RCL.dll\": {}\r\n        }\r\n      },\r\n```\r\n\r\nThis is blocking [a core scenario](https://github.com/aspnet/AspNetCore/issues/4332) in ASP.NET Core MVC 3.0 of having Razor views in a class library.\r\n\r\nLastly, I imagine this issue depends on the completion of the following (please correct me if i'm wrong):\r\n- **Referencing a shared framework does not flow across ProjectReference** https://github.com/dotnet/sdk/issues/2420 \r\n- **Represent FrameworkReferences in NuGet packages and assets files** https://github.com/NuGet/Home/issues/7342 \r\n\r\n\r\n@livarcocc @dsplaisted @natemcmaster @mkArtakMSFT @rynowak"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"446412045","IsPullRequest":false,"CreatedAt":"2019-05-21T04:32:25","Actor":"iskiselev","Number":"24676","RawContent":null,"Title":"Incorrect parameters passed when profiler set COR_PRF_DISABLE_INLINING","State":"open","Body":"When profiler `SetEventMask` with `COR_PRF_DISABLE_INLINING` flag set (disable inlining), method get incorrect arguments (on Linux and MacOs, it works correct on Windows).\r\nTry to use next application (compile with release from console app template):\r\n```c#\r\nusing System;\r\n\r\nnamespace repro\r\n{\r\n    public class SomeClass\r\n    {\r\n        public string SomeMethod(string s1, string s2,\r\n            string s3, string s4, string s5, string s6)\r\n        {\r\n            Console.WriteLine($\"{s1}:{s2}:{s3}:{s4}:{s5}:{s6}\");\r\n            return s1;\r\n        }\r\n    }\r\n\r\n    public struct Struct\r\n    {\r\n        public object o1;\r\n        public object o2;\r\n    }\r\n\r\n    public static class BadClass\r\n    {\r\n        //[MethodImpl(MethodImplOptions.NoInlining)]\r\n        public static string BadInline(string s1,\r\n            string s2, Struct @struct, string s3, string s4,\r\n            string s5, string s6)\r\n        {\r\n                var mapperExpression = new SomeClass().SomeMethod(s1, s2,\r\n                    s3, s4, s5, s6);\r\n                return mapperExpression;\r\n        }\r\n    }\r\n    \r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            BadClass.BadInline(\r\n                \"s1\",\r\n                \"s2\",\r\n                new Struct(), \r\n                \"s3\",\r\n                \"s4\",\r\n                \"s5\",\r\n                \"s6\");\r\n        }\r\n    }\r\n}\r\n```\r\nExpected console output: `s1:s2:s3:s4:s5:s6`\r\nBroken console output: `s1:s2:s3:s4:s6:s6`\r\n\r\nIf `BadInline` method marked with `MethodImplOptions.NoInlining` issue is not reproducible.\r\nIssue is only reproducible when profiler that set `COR_PRF_DISABLE_INLINING`  is loaded.\r\nI've reproduced it on version 2.2.5 and only with test application release build.\r\n\r\nIf it is required, I may create test sample with profiler included (thought it will take some time).\r\n\r\nAutomapper 8.0 use pattern affected by this issue, so some of applications that use Automapper  will crash if loaded with profiler requested `COR_PRF_DISABLE_INLINING`.","Url":"https://github.com/dotnet/coreclr/issues/24676","RelatedDescription":"Open issue \"Incorrect parameters passed when profiler set COR_PRF_DISABLE_INLINING\" (#24676)"},{"Id":"446408192","IsPullRequest":true,"CreatedAt":"2019-05-21T04:12:50","Actor":"sandreenko","Number":"24675","RawContent":null,"Title":"Exclude superpmicollect with JitStress on arm.","State":"open","Body":"Revert this when https://github.com/dotnet/coreclr/issues/24633 get fixed.\r\n\r\nStress jobs are failing because of that https://dev.azure.com/dnceng/public/_build/results?buildId=193952&view=ms.vss-test-web.build-test-results-tab.","Url":"https://github.com/dotnet/coreclr/pull/24675","RelatedDescription":"Open PR \"Exclude superpmicollect with JitStress on arm.\" (#24675)"},{"Id":"446390680","IsPullRequest":true,"CreatedAt":"2019-05-21T02:41:55","Actor":"am11","Number":"24674","RawContent":null,"Title":"Add header check for atomic_ops.h","State":"open","Body":"gcc reported the following (warning_as)error on a system, which this PR fixes:\r\n\r\n```sh\r\n/datadrive/projects/coreclr/src/pal/src/libunwind/src/mi/flush_cache.c:56:3: error: #warning unw_flush_cache(): need a way to atomically increment an integer. [-Werror=cpp]\r\n # warning unw_flush_cache(): need a way to atomically increment an integer.\r\n   ^~~~~~~\r\n```\r\n\r\ncc @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/24674","RelatedDescription":"Open PR \"Add header check for atomic_ops.h\" (#24674)"},{"Id":"446376345","IsPullRequest":true,"CreatedAt":"2019-05-21T01:30:31","Actor":"BruceForstall","Number":"24673","RawContent":null,"Title":"Improve corefx testing","State":"open","Body":"1. Add many more platforms.\r\n2. Test using checked in `public`.\r\n3. Test using release in official build.\r\n4. Move corefx results to a separate Mission Control grid\r\n(not just appended to coreclr tests)","Url":"https://github.com/dotnet/coreclr/pull/24673","RelatedDescription":"Open PR \"Improve corefx testing\" (#24673)"},{"Id":"446372638","IsPullRequest":true,"CreatedAt":"2019-05-21T01:11:29","Actor":"dotnet-maestro-bot","Number":"24672","RawContent":null,"Title":"Update BuildTools to preview1-04021-01 (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24672","RelatedDescription":"Open PR \"Update BuildTools to preview1-04021-01 (release/2.2)\" (#24672)"},{"Id":"446220939","IsPullRequest":true,"CreatedAt":"2019-05-20T23:05:55","Actor":"jkoritzinsky","Number":"24665","RawContent":null,"Title":"Disable Interop/WinRT/NETClients/Primitives test on Nano Server.","State":"closed","Body":"Fixes #24661 ","Url":"https://github.com/dotnet/coreclr/pull/24665","RelatedDescription":"Closed or merged PR \"Disable Interop/WinRT/NETClients/Primitives test on Nano Server.\" (#24665)"},{"Id":"445979112","IsPullRequest":false,"CreatedAt":"2019-05-20T23:05:55","Actor":"AriNuer","Number":"24661","RawContent":null,"Title":"Test failure: Interop_WinRT._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_/_NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd","State":"closed","Body":"The test `Interop_WinRT._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_/_NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd` has failed.\r\n\r\nFailure Message:\r\n```\r\n\\r\r\nReturn code:      1\\r\r\nRaw output file:      C:\\\\work\\\\a41b0e25-9123-49be-81b6-6d0e4c6a89b9\\\\Work\\\\5ff48737-f514-4c3e-a14e-6fea1160135f\\\\Exec\\\\Interop\\\\WinRT\\\\Reports\\\\Interop.WinRT\\\\NETClients\\\\Primitives\\\\NETClientPrimitives\\\\NETClientPrimitives.output.txt\\r\r\nRaw output:\\r\r\nBEGIN EXECUTION\\r\r\n \\\"C:\\\\work\\\\a41b0e25-9123-49be-81b6-6d0e4c6a89b9\\\\Payload\\\\corerun.exe\\\" NETClientPrimitives.exe \\r\r\nSystem.Runtime.InteropServices.COMException (0x80040154): Class not registered (0x80040154 (REGDB_E_CLASSNOTREG))\\r\r\n   at System.StubHelpers.UriMarshaler.CreateNativeUriInstanceHelper(Char* rawUri, Int32 strLen)\\r\r\n   at System.StubHelpers.UriMarshaler.CreateNativeUriInstance(String rawUri)\\r\r\n   at Component.Contracts.IUriTesting.GetFromUri(Uri uri)\\r\r\n   at NetClient.UriTests.RunTest() in F:\\\\workspace\\\\_work\\\\1\\\\s\\\\tests\\\\src\\\\Interop\\\\WinRT\\\\NETClients\\\\Primitives\\\\UriTests.cs:line 15\\r\r\n   at NetClient.Program.Main(String[] args) in F:\\\\workspace\\\\_work\\\\1\\\\s\\\\tests\\\\src\\\\Interop\\\\WinRT\\\\NETClients\\\\Primitives\\\\Program.cs:line 28\\r\r\nExpected: 100\\r\r\nActual: 101\\r\r\nEND EXECUTION - FAILED\\r\r\nFAILED\\r\r\nTest Harness Exitcode is : 1\\r\r\nTo run the test:\\r\r\n> set CORE_ROOT=C:\\\\work\\\\a41b0e25-9123-49be-81b6-6d0e4c6a89b9\\\\Payload\\r\r\n> C:\\\\work\\\\a41b0e25-9123-49be-81b6-6d0e4c6a89b9\\\\Work\\\\5ff48737-f514-4c3e-a14e-6fea1160135f\\\\Exec\\\\Interop\\\\WinRT\\\\NETClients\\\\Primitives\\\\NETClientPrimitives\\\\NETClientPrimitives.cmd\\r\r\nExpected: True\\r\r\nActual:   False\r\n```\r\n\r\nStack Trace:\r\n```\r\n   at Interop_WinRT._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd() in F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Interop.WinRT\\Interop.WinRT.XUnitWrapper.cs:line 218\r\n```\r\n\r\nBuild : Master - 20190519.72 (Core Tests)\r\nFailing configurations:\r\n- Windows.10.Nano.Amd64-x64\r\n  - \r\n  - \r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190519.72/workItem/Interop/analysis/xunit/Interop_WinRT._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_~2F_NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd","Url":"https://github.com/dotnet/coreclr/issues/24661","RelatedDescription":"Closed issue \"Test failure: Interop_WinRT._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_/_NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd\" (#24661)"},{"Id":"446340353","IsPullRequest":true,"CreatedAt":"2019-05-20T22:38:56","Actor":"sdmaclea","Number":"24671","RawContent":null,"Title":"Add CreateNativeDelegate flags argument","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24671","RelatedDescription":"Open PR \"Add CreateNativeDelegate flags argument\" (#24671)"},{"Id":"445778085","IsPullRequest":true,"CreatedAt":"2019-05-20T22:12:28","Actor":"mikem8361","Number":"24655","RawContent":null,"Title":"Comment the include files that have SOS dependencies","State":"closed","Body":"Added back the TlsIdx_StackProbe slot (as TlsIdx_Unused) because it\r\nbroke the \"clrthreads -special\" command in the diagnostics repo.\r\n\r\nAdd warning headers\r\n\r\nIssue https://github.com/dotnet/diagnostics/issues/38","Url":"https://github.com/dotnet/coreclr/pull/24655","RelatedDescription":"Closed or merged PR \"Comment the include files that have SOS dependencies\" (#24655)"},{"Id":"446333079","IsPullRequest":true,"CreatedAt":"2019-05-20T22:11:30","Actor":"davmason","Number":"24670","RawContent":null,"Title":"WIP - Profiler attach over the diagnostics pipe","State":"open","Body":"CC @dotnet/dotnet-diag ","Url":"https://github.com/dotnet/coreclr/pull/24670","RelatedDescription":"Open PR \"WIP - Profiler attach over the diagnostics pipe\" (#24670)"},{"Id":"446327203","IsPullRequest":true,"CreatedAt":"2019-05-20T21:53:04","Actor":"jkotas","Number":"24669","RawContent":null,"Title":"Avoid PAL LoadLibrary simulator for regular PInvoke","State":"open","Body":"Fixes #21009","Url":"https://github.com/dotnet/coreclr/pull/24669","RelatedDescription":"Open PR \"Avoid PAL LoadLibrary simulator for regular PInvoke\" (#24669)"},{"Id":"446319142","IsPullRequest":false,"CreatedAt":"2019-05-20T21:28:55","Actor":"jeremyVignelles","Number":"24668","RawContent":null,"Title":"Proposal - Introduce IDisposable ownership annotations","State":"open","Body":"Hi,\r\n\r\nI have thought about this for a while, and I finally got time for that, so I'm posting here.\r\nPlease tell me if that's not the right place to ask for that.\r\n\r\n# Rationale\r\n\r\nI am an average developper that wants to make sure that I don't forget to call `Dispose()` on `IDisposable`. What is great is that there's a roslyn analyzer for that : https://github.com/DotNetAnalyzers/IDisposableAnalyzers\r\n\r\nHowever, sometimes, that analyzer doesn't know how things work, and a signature like\r\n\r\n```cs\r\npublic MyDisposableClass GetInstance()\r\n```\r\n\r\nwill trigger a warning, while sometime it's just returning a cached copy which is owned by the class.\r\n\r\nThere is no way for the analyser to know the semantic of what should be disposed and what should not.\r\n\r\nThen came the idea that we could provide some attributes that could help the analyzer.\r\n\r\n# The problem\r\nHow to redistribute that kind of attributes?\r\n- Embedding the attributes with the analyzer? The analyzer itself is a development dependency, and we shouldn't leak that kind of implementation details into the project.\r\n- Having a package dependency for this kind of annotations? What about version conflicts between two projects that uses different versions of the annotations? \r\n- Having a .cs file that the project that wants to check embeds, similar to LibLog ? How would the analyzer check the attributes? with only the class name?\r\n- Maintaining external annotations like [JetBrains](https://github.com/JetBrains/ExternalAnnotations) ? That would be probably feasible, and makes it possible to annotate existing code, but we are not JetBrains...\r\n\r\nEach of those options have drawbacks, and probably more than exposed above. Then we thought about it in a different way :\r\nIf we truly want to analyze the behavior of the code, what if we find a more universal way : introduce the annotations directly in .net.\r\n\r\n# The proposition\r\nHere comes the IDisposable ownership attributes. The first formal definition was made [here](https://github.com/DotNetAnalyzers/IDisposableAnalyzers/pull/130/files), and I think that the API shape is understandable.\r\n\r\n```cs\r\n    /// <summary>\r\n    /// The return value must be disposed by the caller.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.ReturnValue | AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class GivesOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// The return value must not be disposed by the caller.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.ReturnValue | AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class KeepsOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    /// <summary>\r\n    /// The ownership of instance is transferred and the receiver is responsible for disposing.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]\r\n    public class TakesOwnershipAttribute : Attribute\r\n    {\r\n    }\r\n```\r\n\r\nLet's dig into this : \r\nBy defining these attributes, we state that \"The owner of the object is responsible to `Dispose()` it\".\r\n\r\nOwnership can be given (i.e. transferred to caller):\r\n\r\n```cs\r\npublic class ResourceFactory {\r\n   [return: GivesOwnership]\r\n   public Resource Create()\r\n   {\r\n        return new MyResource();\r\n   }\r\n}\r\n```\r\n\r\nIt can be taken\r\n\r\n```cs\r\npublic class ResourceHandler : IDisposable {\r\n   private Resource _resource;\r\n   public void SetResource([TakesOwnership] Resource resource) => this._resource = resource;\r\n   public void Dispose()\r\n   {\r\n      this._resource.Dispose();\r\n   }\r\n}\r\n\r\nnew ResourceHandler().SetResource(new Resource);\r\n```\r\n\r\nWe can also say explicitely that the resource is kept:\r\n```cs\r\npublic class ResourceCache : IDisposable {\r\n    private Resource _resource;\r\n    [return: KeepsOwnership]\r\n    public Resource GetResource()\r\n    {\r\n       return this._resource;\r\n    }\r\n}\r\n```\r\n\r\n# Why in .NET?\r\nHaving a way to express ownership is really nice to know what is happening, and many places in the framework itself could benefit from that.\r\n\r\nTake this code for example:\r\n\r\n``` cs\r\nvar stream = File.Open...;\r\nvar reader = new StreamReader(stream);\r\n```\r\n\r\nWhich one should I dispose?\r\n\r\nIf `StreamReader` declared this constructor as `TakesOwnership`, the question is no more.\r\n\r\nAnother question I often have is : \"When using `IServiceCollection.AddSingleton()`, are my objects correctly `Dispose()` 'd?\"\r\n\r\n# Potential uses\r\n\r\n- Documentation : The documentation could automatically state that the method has a special behavior regarding the object ownership\r\n- Analyzers : IDisposableAnalyzers would be one of them, but maybe something more integrated, like in the compiler or in VS ?\r\n\r\nWhat do you think?","Url":"https://github.com/dotnet/coreclr/issues/24668","RelatedDescription":"Open issue \"Proposal - Introduce IDisposable ownership annotations\" (#24668)"},{"Id":"446286225","IsPullRequest":true,"CreatedAt":"2019-05-20T20:05:39","Actor":"dotnet-maestro-bot","Number":"24667","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @dotnet-maestro-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24667","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#24667)"},{"Id":"446174343","IsPullRequest":true,"CreatedAt":"2019-05-20T19:52:02","Actor":"jkotas","Number":"24662","RawContent":null,"Title":"Disable FEATURE_INTERPRETER for crossgen","State":"closed","Body":"Fixes #24627","Url":"https://github.com/dotnet/coreclr/pull/24662","RelatedDescription":"Closed or merged PR \"Disable FEATURE_INTERPRETER for crossgen\" (#24662)"},{"Id":"446267745","IsPullRequest":true,"CreatedAt":"2019-05-20T19:13:32","Actor":"mmitche","Number":"24666","RawContent":null,"Title":"[WIP] Move to AzDO for 2.1/2.2 (build only)","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24666","RelatedDescription":"Open PR \"[WIP] Move to AzDO for 2.1/2.2 (build only)\" (#24666)"},{"Id":"446207397","IsPullRequest":true,"CreatedAt":"2019-05-20T18:25:00","Actor":"AArnott","Number":"24664","RawContent":null,"Title":"Avoid boxing in TextWriter.Write(StringBuilder)","State":"closed","Body":"Fixes #24663 by calling `Write(ReadOnlySpan<char>)` instead of `Write(object)` with a boxed `Memory<char>`.","Url":"https://github.com/dotnet/coreclr/pull/24664","RelatedDescription":"Closed or merged PR \"Avoid boxing in TextWriter.Write(StringBuilder)\" (#24664)"},{"Id":"446188310","IsPullRequest":false,"CreatedAt":"2019-05-20T18:25:00","Actor":"AArnott","Number":"24663","RawContent":null,"Title":"TextWriter.Write(StringBuilder) inadvertently incurs box allocation cost per chunk","State":"closed","Body":"In the `TextWriter.Write(StringBuilder)` method, each individual `StringBuilder` chunk is enumerated to write individually to avoid allocating an entire string. But in enumerating, `Memory<char>` is used as the argument to `Write(object)` (since no `Write(Memory<char>)` overload exists), so the C# compiler emits a `box` instruction for each enumerated chunk:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/c5a44f58952c5014f5e1c25b667dca3901fd84a7/src/System.Private.CoreLib/shared/System/IO/TextWriter.cs#L303-L310\r\n\r\nI believe the fix should be to simply append `.Span` on the argument:\r\n\r\n```diff\r\n- Write(chunk); \r\n+ Write(chunk.Span);\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24663","RelatedDescription":"Closed issue \"TextWriter.Write(StringBuilder) inadvertently incurs box allocation cost per chunk\" (#24663)"},{"Id":"445959949","IsPullRequest":false,"CreatedAt":"2019-05-20T07:23:01","Actor":"spacelg","Number":"24660","RawContent":null,"Title":"CoreCLR failed to build due to error MIDL2011 with MSVC on windows","State":"open","Body":"We tried to build CoreCLR and it failed to build due to error MIDL2011with MSVC on windows. It can be first reproduced on 6a2c6a4 revision. It should be a CoreCLR source issue. Could you look at this issue? Thanks a lot. \r\n\r\nRepro steps:\r\n1. git clone https://github.com/dotnet/coreclr D:\\CoreCLR\\src\r\n2. Open a clean x86 prompt and browse to D:\\CoreCLR\\src\r\n3. build x86 release -- /clp:ShowCommandLine\r\n\r\n[log_x86_build.log](https://github.com/dotnet/coreclr/files/3196684/log_x86_build.log)\r\n\r\nError info:\r\nD:\\CoreCLR\\src\\tests\\src\\Interop\\WinRT\\NativeComponent\\..\\Contracts\\Component.Contracts.idl(105): error MIDL2011: [msg]unresolved type declaration [context]: Windows.Networking.Connectivity.WwanConnectionProfileDetails [ Procedure 'get_WwanConnectionProfileDetails' ( Interface 'Windows.Networking.Connectivity.IConnectionProfile2' ) ] [D:\\CoreCLR\\src\\bin\\tests\\obj\\Windows_NT.x86.Release\\Native\\src\\Interop\\WinRT\\NativeComponent\\WinRTNativeComponent.vcxproj]\r\nD:\\CoreCLR\\src\\tests\\src\\Interop\\WinRT\\NativeComponent\\..\\Contracts\\Component.Contracts.idl(105): error MIDL2011: [msg]unresolved type declaration [context]: Windows.Networking.Connectivity.WwanConnectionProfileDetails [ Procedure 'get_WwanConnectionProfileDetails' ( Interface 'Windows.Networking.Connectivity.IConnectionProfile2' ) ] [D:\\CoreCLR\\src\\bin\\tests\\obj\\Windows_NT.x86.Release\\Native\\src\\Interop\\WinRT\\NativeComponent\\WinRTNativeComponent.vcxproj]\r\n    1 Warning(s)\r\n    1 Error(s)\r\n","Url":"https://github.com/dotnet/coreclr/issues/24660","RelatedDescription":"Open issue \"CoreCLR failed to build due to error MIDL2011 with MSVC on windows\" (#24660)"},{"Id":"445773278","IsPullRequest":true,"CreatedAt":"2019-05-20T07:03:32","Actor":"xiangzhai","Number":"24653","RawContent":null,"Title":"[X86/Linux] Fix fail to SkipCrossgen when enabled Interpreter issue","State":"closed","Body":"Hi,\r\n\r\nPR: https://github.com/dotnet/coreclr/issues/24627\r\n\r\nHow to prove that skipcrossgen works:\r\n\r\n```\r\ndiff --git a/src/inc/switches.h b/src/inc/switches.h\r\nindex 60034602c3..19833330ac 100644\r\n--- a/src/inc/switches.h\r\n+++ b/src/inc/switches.h\r\n@@ -193,6 +193,10 @@\r\n #define FEATURE_STACK_SAMPLING\r\n #endif // defined (ALLOW_SXS_JIT)\r\n \r\n+#ifdef FEATURE_INTERPRETER\r\n+#pragma message(\"just enable FEATURE_INTERPRETER but disable CROSSGEN_COMPILE for hacking Interpreter\")\r\n+#endif\r\n+\r\n #endif // !defined(CROSSGEN_COMPILE)\r\n \r\n #if defined(FEATURE_INTERPRETER) && defined(CROSSGEN_COMPILE)\r\n```\r\n\r\nThen run `./build.sh cmakeargs \"-DFEATURE_INTERPRETER=1\" ignorewarnings skipcrossgen`\r\n\r\n```\r\n[ 74%] Building CXX object src/utilcode/dyncrt/CMakeFiles/utilcode.dir/__/clrhost_nodependencies.cpp.o\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/strongname/api/strongname.cpp:11:\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/strongname/api/common.h:76:\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/inc/stdmacros.h:22:\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/inc/contract.h:254:\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/inc/check.h:17:\r\nIn file included from /home/loongson/zhaixiang/coreclr-mips64/src/inc/daccess.h:531:\r\n/home/loongson/zhaixiang/coreclr-mips64/src/inc/switches.h:197:9: warning: just enable FEATURE_INTERPRETER but disable\r\n      CROSSGEN_COMPILE for hacking Interpreter [-W#pragma-messages]\r\n#pragma message(\"just enable FEATURE_INTERPRETER but disable CROSSGEN_COMPILE for hacking Interpreter\")\r\n        ^\r\n```\r\n\r\nSo skipcrossgen works!\r\n\r\nPlease review it.\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/pull/24653","RelatedDescription":"Closed or merged PR \"[X86/Linux] Fix fail to SkipCrossgen when enabled Interpreter issue\" (#24653)"},{"Id":"445948114","IsPullRequest":false,"CreatedAt":"2019-05-20T06:47:03","Actor":"xiangzhai","Number":"24659","RawContent":null,"Title":"[X86/Linux] Failed to initialize CoreCLR, HRESULT: 0x80004005 when skipcrossgen","State":"open","Body":"Hi,\r\n\r\nPatch this https://github.com/jkotas/coreclr/commit/0b00027c6e90f5edd25f1acd5ea2ca00139ca282  to skipcrossgen.\r\n\r\nThen build:\r\n\r\n```\r\n./build.sh cmakeargs \"-DFEATURE_INTERPRETER=1\" ignorewarnings skipcrossgen\r\n```\r\n\r\nNew console HelloWorld demo:\r\n\r\n```\r\ndotnet new console -o HelloWorld\r\n```\r\n\r\nChange HelloWorld.csproj:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nRun `dotnet publish -c Debug` and sort of things by following the [document](https://github.com/dotnet/coreclr/blob/master/Documentation/building/viewing-jit-dumps.md):\r\n\r\n```\r\ncp -rT bin/Product/Linux.x64.Debug HelloWorld/bin/Debug/netcoreapp2.1/linux-x64/publish\r\n./HelloWorld/bin/Debug/netcoreapp2.1/linux-x64/publish/HelloWorld\r\n\r\nFailed to initialize CoreCLR, HRESULT: 0x80004005\r\n```\r\n\r\nIt is about `initializeCoreCLR` in the [src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp:425](https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp#L425)\r\n\r\nBTW: the patch https://github.com/jkotas/coreclr/commit/0b00027c6e90f5edd25f1acd5ea2ca00139ca282  works for release/2.1 branch.\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/issues/24659","RelatedDescription":"Open issue \"[X86/Linux] Failed to initialize CoreCLR, HRESULT: 0x80004005 when skipcrossgen\" (#24659)"},{"Id":"445927422","IsPullRequest":false,"CreatedAt":"2019-05-20T05:20:45","Actor":"smoogipoo","Number":"24658","RawContent":null,"Title":"Gen-0 collections happens more frequently on macOS","State":"open","Body":"We've observed the GC running much more frequently on .NET Core 3.0 preview 5 than .NET Core 2.2.5 on macOS.\r\n\r\nThe data I provide may be replicated via the following benchmark:\r\n```csharp\r\n[MemoryDiagnoser]\r\npublic class ConcurrentQueueBenchmarks\r\n{\r\n    [Benchmark]\r\n    public ConcurrentQueue<int> Queue()\r\n    {\r\n        return new ConcurrentQueue<int>();\r\n    }\r\n}\r\n```\r\n\r\n| Method |     Mean |     Error |    StdDev |  Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|------- |---------:|----------:|----------:|-------:|------:|------:|----------:|\r\n|  macOS (.NET Core 2.2.5) | 96.63 ns | 0.8469 ns | 0.7922 ns | 0.2441 |     - |     - |     768 B |\r\n|  macOS (.NET Core 3.0-preview5) | 278.4 ns | 1.203 ns | 1.066 ns | 3.5210 |     - |     - |     576 B |\r\n|  Windows (.NET Core 2.2.5) | 104.2 ns | 2.094 ns | 1.958 ns | 0.2440 |     - |     - |     768 B |\r\n|  Windows (.NET Core 3.0-preview5) | 97.15 ns | 0.5990 ns | 0.5002 ns | 0.1836 |     - |     - |     576 B |\r\n\r\nThis is not only exhibited by `ConcurrentQueue`; for example, `Lazy` experiences a similar ~10x increase in Gen 0 collections per 1000 instances.\r\n\r\nI'm unsure of how to debug this further (please let me know how to, if required) - going this deep into the CLR without memory profiling tools on macOS is outside of my area of expertise at the moment.","Url":"https://github.com/dotnet/coreclr/issues/24658","RelatedDescription":"Open issue \"Gen-0 collections happens more frequently on macOS\" (#24658)"},{"Id":"445807381","IsPullRequest":true,"CreatedAt":"2019-05-19T19:44:28","Actor":"MarcoRossignoli","Number":"24656","RawContent":null,"Title":"Fix typo","State":"closed","Body":"Fix comment typo","Url":"https://github.com/dotnet/coreclr/pull/24656","RelatedDescription":"Closed or merged PR \"Fix typo\" (#24656)"},{"Id":"445814458","IsPullRequest":false,"CreatedAt":"2019-05-19T12:31:00","Actor":"BastianBlokland","Number":"24657","RawContent":null,"Title":"[x64/MacOs] Memory corruption with optimisations enabled.","State":"open","Body":"Hi,\r\n\r\nI'm facing an issue where a specific scenario causes the runtime to write outside of the struct boundary when run with optimisations enabled.\r\n\r\nRepro:\r\n```c#\r\npublic class Program\r\n{\r\n    struct Wrapper<T>\r\n    {\r\n        public T Val { get; set; }\r\n\r\n        public static implicit operator Wrapper<T>(T val) => new Wrapper<T> { Val = val };\r\n    }\r\n\r\n    struct TestStruct\r\n    {\r\n        public Wrapper<int> Field1;\r\n        public Wrapper<short> Field2;\r\n        public Wrapper<short> Field3;\r\n\r\n        public TestStruct(int field1)\r\n        {\r\n            this.Field1 = field1;\r\n            this.Field2 = 0;\r\n            this.Field3 = 0;\r\n        }\r\n    }\r\n\r\n    public static void Main(string[] args)\r\n    {\r\n        var array = new [] { new TestStruct(123), new TestStruct(456) };\r\n        if (array[1].Field1.Val != 456)\r\n            throw new System.Exception(\"Does not happen\");\r\n\r\n        array[0].Field3 = 100;\r\n\r\n        if (array[1].Field1.Val != 456)\r\n            throw new System.Exception(\"Corrupt: \" + array[1].Field1.Val);\r\n\r\n        System.Console.WriteLine(\"Success\");\r\n    }\r\n}\r\n```\r\nSorry for the slightly convoluted repro but this seems to be the smallest i can have it before the issue disappears.\r\n \r\nOutput when running that in a fresh `netcoreapp2.2` console project on mac-os:\r\n`dotnet run -c debug`: `Success`\r\n`dotnet run -c release`: `Unhandled Exception: System.Exception: Corrupt: 0`\r\n\r\nThis issues doesn't seem to exist on `Windows` but i've seen similar failures on `Linux`.\r\n\r\nGreetings,\r\nBastian","Url":"https://github.com/dotnet/coreclr/issues/24657","RelatedDescription":"Open issue \"[x64/MacOs] Memory corruption with optimisations enabled.\" (#24657)"},{"Id":"445775637","IsPullRequest":false,"CreatedAt":"2019-05-19T03:21:59","Actor":"xiangzhai","Number":"24654","RawContent":null,"Title":"[X86/Linux] Fail to GenerateInterpreterStub when enabled Interpreter and disabled crossgen","State":"open","Body":"Hi,\r\n\r\n`FEATURE_INTERPRETER` and `CROSSGEN_COMPILE` are mutually exclusive https://github.com/dotnet/coreclr/pull/11252  So disable `FEATURE_INTERPRETER` for crossgen for hacking Interpreter https://github.com/dotnet/coreclr/pull/24662\r\n\r\nBut failed to `GenerateInterpreterStub`:\r\n\r\n```\r\ndiff --git a/src/vm/jitinterface.cpp b/src/vm/jitinterface.cpp\r\nindex 502b5ada13..70e41e468a 100644\r\n--- a/src/vm/jitinterface.cpp\r\n+++ b/src/vm/jitinterface.cpp\r\n@@ -12146,6 +12146,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n     bool isInterpreterStub   = false;\r\n     bool interpreterFallback = (s_InterpreterFallback.val(CLRConfig::INTERNAL_InterpreterFallback) != 0);\r\n \r\n+    printf(\"DEBUG: %s:%d interpreterFallback: %d FAILED(ret): %d CORJIT_FLAG_IMPORT_ONLY: %d CORJIT_FLAG_MAKEFINALCODE: %d\\n\", __FILE__, __LINE__, interpreterFallback, FAILED(ret), jitFlags.IsSet(CORJIT_FLAGS::CORJIT_FLAG_IMPORT_ONLY), jitFlags.IsSet(CORJIT_FLAGS::CORJIT_FLAG_MAKEFINALCODE));\r\n     if (interpreterFallback == false)\r\n     {\r\n         // If we're doing an \"import_only\" compilation, it's for verification, so don't interpret.\r\n@@ -12156,9 +12157,11 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n             {\r\n                 isInterpreterStub = true;\r\n             }\r\n-        }\r\n+        } else {\r\n+\t    printf(\"FIXME: %s:%d NO GenerateInterpreterStub!\\n\", __FILE__, __LINE__);\r\n+\t}\r\n     }\r\n-    \r\n+\r\n     if (FAILED(ret) && jitMgr->m_jit)\r\n     {\r\n         ret = CompileMethodWithEtwWrapper(jitMgr, \r\n@@ -12169,6 +12172,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n                                           nativeSizeOfCode);\r\n     }\r\n \r\n+    printf(\"DEBUG: %s:%d interpreterFallback: %d FAILED(ret): %d CORJIT_FLAG_IMPORT_ONLY: %d CORJIT_FLAG_MAKEFINALCODE: %d\\n\", __FILE__, __LINE__, interpreterFallback, FAILED(ret), jitFlags.IsSet(CORJIT_FLAGS::CORJIT_FLAG_IMPORT_ONLY), jitFlags.IsSet(CORJIT_FLAGS::CORJIT_FLAG_MAKEFINALCODE));\r\n     if (interpreterFallback == true)\r\n     {\r\n         // If we're doing an \"import_only\" compilation, it's for verification, so don't interpret.\r\n@@ -12179,7 +12183,9 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n             {\r\n                 isInterpreterStub = true;\r\n             }\r\n-        }\r\n+        } else {\r\n+\t    printf(\"FIXME: %s:%d NO GenerateInterpreterStub!\\n\", __FILE__, __LINE__);\r\n+\t}\r\n     }\r\n #else\r\n     if (FAILED(ret))\r\n@@ -12212,6 +12218,7 @@ CorJitResult invokeCompileMethodHelper(EEJitManager *jitMgr,\r\n #endif // !defined(CROSSGEN_COMPILE)\r\n     \r\n \r\n+    printf(\"DEBUG: %s:%d isInterpreterStub: %d\\n\", __FILE__, __LINE__, isInterpreterStub);\r\n #if defined(FEATURE_GDBJIT)\r\n     bool isJittedEntry = SUCCEEDED(ret) && *nativeEntry != NULL;\r\n \r\n\r\n```\r\n\r\nHere is the output after setted the configuration variables https://github.com/dotnet/coreclr/issues/17294#issuecomment-493094555\r\n\r\n```\r\n...\r\nDEBUG: src/vm/jitinterface.cpp:12149 interpreterFallback: 0 FAILED(ret): 1 CORJIT_FLAG_IMPORT_ONLY: 0 CORJIT_FLAG_MAKEFINALCODE: 1\r\nFIXME: src/vm/jitinterface.cpp:12161 NO GenerateInterpreterStub!\r\nDEBUG: src/vm/jitinterface.cpp:12175 interpreterFallback: 0 FAILED(ret): 0 CORJIT_FLAG_IMPORT_ONLY: 0 CORJIT_FLAG_MAKEFINALCODE: 1\r\nDEBUG: src/vm/jitinterface.cpp:12221 isInterpreterStub: 0\r\n...\r\n```\r\n\r\n`CORJIT_FLAGS::CORJIT_FLAG_MAKEFINALCODE` is setted by `TieredCompilationManager::GetJitFlags` in the commit https://github.com/dotnet/coreclr/commit/fd1998903d5  So it will not call `Interpreter::GenerateInterpreterStub` at all.  Does it means `FEATURE_TIERED_COMPILATION` (release/2.1 added) has an implementation *INCOMPATIBLE* with `FEATURE_INTERPRETER`? https://github.com/dotnet/coreclr/pull/11252#issue-117844498\r\n\r\nPlease give me some hint.\r\n\r\nThanks,\r\nLeslie Zhai","Url":"https://github.com/dotnet/coreclr/issues/24654","RelatedDescription":"Open issue \"[X86/Linux] Fail to GenerateInterpreterStub when enabled Interpreter and disabled crossgen\" (#24654)"},{"Id":"445744135","IsPullRequest":true,"CreatedAt":"2019-05-18T20:36:52","Actor":"franksinankaya","Number":"24652","RawContent":null,"Title":"fix compilation with gcc7.x","State":"closed","Body":"In file included from src/inc/sstring.h:1029:0,\r\n                 from src/inc/ex.h:19,\r\n                 from src/inc/stgpool.h:28,\r\n                 from src/inc/../md/inc/metamodel.h:18,\r\n                 from src/inc/../md/inc/metamodelro.h:19,\r\n                 from src/inc/metadata.h:17,\r\n                 from src/inc/corpriv.h:21,\r\n                 from src/md/compiler/stdafx.h:20,\r\n                 from src/md/compiler/mdutil.cpp:12:\r\nsrc/inc/sstring.inl: In member function ‘const WCHAR* SString::GetUnicode() const’:\r\nsrc/inc/sstring.inl:650:5: error: nonnull argument ‘this’ compared to NULL [-Werror=nonnull-compare]\r\n     if (this == NULL)\r\n     ^~","Url":"https://github.com/dotnet/coreclr/pull/24652","RelatedDescription":"Closed or merged PR \"fix compilation with gcc7.x\" (#24652)"},{"Id":"445729644","IsPullRequest":false,"CreatedAt":"2019-05-18T16:34:29","Actor":"quantrpeter","Number":"24651","RawContent":null,"Title":"Where is the comamand csc c# compiler?","State":"closed","Body":"Hi\r\n  Where is the command **csc** c# compiler?\r\nthanks\r\nPeter","Url":"https://github.com/dotnet/coreclr/issues/24651","RelatedDescription":"Closed issue \"Where is the comamand csc c# compiler?\" (#24651)"},{"Id":"445728226","IsPullRequest":true,"CreatedAt":"2019-05-18T15:48:35","Actor":"tannergooding","Number":"24650","RawContent":null,"Title":"Adding a jitstressregs_x86_noavx outerloop job group","State":"open","Body":"As per https://github.com/dotnet/coreclr/pull/24630#discussion_r285189916, this adds an outerloop build definition group that runs the register jitstress tests with AVX also disabled.\r\n\r\nThis, unlike many of the other configurations, is particularly interesting as AVX changes most SIMD instructions from `ins op1, src` (where `op1` is both a dst and src) to `ins dst, src, src`. This can end up impacting register allocation in interesting ways.","Url":"https://github.com/dotnet/coreclr/pull/24650","RelatedDescription":"Open PR \"Adding a jitstressregs_x86_noavx outerloop job group\" (#24650)"},{"Id":"445714291","IsPullRequest":false,"CreatedAt":"2019-05-18T14:19:39","Actor":"AArnott","Number":"24648","RawContent":null,"Title":"Environment.GetEnvironmentVariables throws ArgumentException due to internal error","State":"closed","Body":"We saw [a test failure](https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=2686250&_a=summary&view=ms.vss-test-web.unified-test-results-tab&runId=6183152&resultId=100094&paneView=attachments) in an Azure Pipelines test run of our own product that failed after switching from msbuild to `dotnet build`. It appears that `Environment.GetEnvironmentVariables()` may have encountered an unfamiliar environment. \r\n\r\n```\r\nscript stdout: VERBOSE: dotnet build ServiceHub.Sample.NugetClientApp.csproj /p:Configuration=Release /v:m /nr:false\r\nscript stderr: System.ArgumentException: Item has already been added. Key in dictionary: 'CODE_COVERAGE_SESSION_NAME'  Key being added: 'CODE_COVERAGE_SESSION_NAME'\r\nscript stderr:    at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\nscript stderr:    at System.Environment.ToHashtable(IEnumerable`1 pairs)\r\nscript stderr:    at System.Environment.GetEnvironmentVariables()\r\nscript stderr:    at System.Diagnostics.ProcessStartInfo.get_Environment()\r\nscript stderr:    at Microsoft.DotNet.Cli.Utils.ForwardingAppImplementation.GetProcessStartInfo()\r\nscript stderr:    at Microsoft.DotNet.Cli.Utils.MSBuildForwardingAppWithoutLogging.GetProcessStartInfo()\r\nscript stderr:    at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingApp.GetProcessStartInfo()\r\nscript stderr:    at Microsoft.DotNet.Tools.RestoringCommand.Execute()\r\nscript stderr:    at Microsoft.DotNet.Tools.Build.BuildCommand.Run(String[] args)\r\nscript stderr:    at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\nscript stderr:    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nscript stderr: dotnet build failure. Exit code: 1\r\n```\r\n\r\n.NET SDK version: 2.2.105","Url":"https://github.com/dotnet/coreclr/issues/24648","RelatedDescription":"Closed issue \"Environment.GetEnvironmentVariables throws ArgumentException due to internal error\" (#24648)"},{"Id":"445719942","IsPullRequest":true,"CreatedAt":"2019-05-18T14:16:14","Actor":"tannergooding","Number":"24649","RawContent":null,"Title":"Fixing EnableSSE3_4=0 and EnableHWIntrinsic=0 to control the right things","State":"open","Body":"As part of enabling the outerloop ISA jobs in https://github.com/dotnet/coreclr/pull/24630, it was discovered that `EnableSSE3_4=0` and `EnableHWIntrinsic=0` were not functioning correctly.\r\n\r\nIn the case of `EnableSSE3_4=0` we were not checking `(JitConfig.EnableSSE3_4() != 0` as part of `CILJit::getMaxIntrinsicSIMDVectorLength` which meant that we would report an incorrect max supported vector length.\r\n\r\nIn the case of `EnableHWIntrinsic=0` we were in a similar boat. However, the fix for this is slightly different as we don't necessarily want `EnableHWIntrinsic=0` to also impact the `System.Numerics.Vector<T>` support which currently goes through an entirely different code path.","Url":"https://github.com/dotnet/coreclr/pull/24649","RelatedDescription":"Open PR \"Fixing EnableSSE3_4=0 and EnableHWIntrinsic=0 to control the right things\" (#24649)"},{"Id":"445711937","IsPullRequest":true,"CreatedAt":"2019-05-18T12:38:00","Actor":"dotnet-maestro[bot]","Number":"24647","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190517.14\r\n- **Date Produced**: 5/18/2019 7:38 AM\r\n- **Commit**: 5fe287f34ad0bf403b75ce17d8c7b19f21c744de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27717-14\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190518.08\r\n- **Date Produced**: 5/19/2019 4:22 AM\r\n- **Commit**: 7c7a2e90741b0efcba4bea89f7fcbcfbc1f61120\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27718-08\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190519.10\r\n- **Date Produced**: 5/20/2019 8:53 AM\r\n- **Commit**: 278cf168efcf3adf053aa07b8773ced47887f416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27719-10\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24647","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#24647)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"446312019","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:51","Actor":"livarcocc","Number":"11383","RawContent":null,"Title":"Update branding to 2.2.108","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11383","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.108\" (#11383)"},{"Id":"446311115","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:42","Actor":"livarcocc","Number":"11381","RawContent":null,"Title":"Update branding to 2.1.605","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11381","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.605\" (#11381)"},{"Id":"446310541","IsPullRequest":true,"CreatedAt":"2019-05-21T03:26:26","Actor":"livarcocc","Number":"11379","RawContent":null,"Title":"Update branding to 2.1.508","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11379","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.508\" (#11379)"},{"Id":"445207601","IsPullRequest":true,"CreatedAt":"2019-05-21T00:56:58","Actor":"dotnet-bot","Number":"11369","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11369","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11369)"},{"Id":"445195589","IsPullRequest":true,"CreatedAt":"2019-05-20T23:41:30","Actor":"peterhuene","Number":"11368","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.3xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11368","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.3xx\" (#11368)"},{"Id":"445193802","IsPullRequest":true,"CreatedAt":"2019-05-20T23:41:19","Actor":"peterhuene","Number":"11367","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.1.7xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11367","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.1.7xx\" (#11367)"},{"Id":"446321270","IsPullRequest":false,"CreatedAt":"2019-05-20T21:35:29","Actor":"wli3","Number":"11386","RawContent":null,"Title":"Local tools vs2019 v16.1 -- There was an error running the selected code generator","State":"open","Body":"From @restrellasosa\r\n\r\n[\r\n![Capture](https://user-images.githubusercontent.com/6253560/57991475-38906a80-7a7d-11e9-9ff6-5bad861fe8b6.JPG)\r\n](url)\r\n\r\nHow i can fix this. I try all! I dont know why and if anybody have knowlegde pls!\r\n\r\n--------------------------\r\n\r\nFrom @tebeco\r\n@restrellasosa \r\nis that related to local tool ? or should it be in another issue ?\r\n\r\n--------------------------\r\nFrom @restrellasosa \r\n\r\nLocal tools vs2019 v16.1\r\n[cid:image002.png@01D50E9E.F9466720]\r\n\r\n[cid:image006.png@01D50E9E.F9466720]\r\n\r\nEnviado desde Correo<https://go.microsoft.com/fwlink/?LinkId=550986> para Windows 10\r\n\r\n----------------------------\r\nFrom @tebeco\r\n\r\nit's visual studio right ?\r\nVisual Studio is your IDE\r\nLocal tool are the name given to a specific tooling ship via nuget to extend `dotnet.exe`\r\n\r\nif your issue is related to Visual Studio and it installation\r\nCan delete your comments here and create an issue in Visual Studio feedback hub ?\r\nfor that just click the \"Feedback\" button in visual studio ? It's in the top right corner next to the \"Live Share\" button","Url":"https://github.com/dotnet/cli/issues/11386","RelatedDescription":"Open issue \"Local tools vs2019 v16.1 -- There was an error running the selected code generator\" (#11386)"},{"Id":"446312935","IsPullRequest":true,"CreatedAt":"2019-05-20T21:13:15","Actor":"livarcocc","Number":"11385","RawContent":null,"Title":"Update branding to 2.2.301","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11385","RelatedDescription":"Open PR \"Update branding to 2.2.301\" (#11385)"},{"Id":"446312584","IsPullRequest":true,"CreatedAt":"2019-05-20T21:12:20","Actor":"livarcocc","Number":"11384","RawContent":null,"Title":"Update branding to 2.2.205","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11384","RelatedDescription":"Open PR \"Update branding to 2.2.205\" (#11384)"},{"Id":"446311673","IsPullRequest":true,"CreatedAt":"2019-05-20T21:09:59","Actor":"livarcocc","Number":"11382","RawContent":null,"Title":"Update branding to 2.1.701","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11382","RelatedDescription":"Open PR \"Update branding to 2.1.701\" (#11382)"},{"Id":"446311091","IsPullRequest":false,"CreatedAt":"2019-05-20T21:08:23","Actor":"nguerrera","Number":"11380","RawContent":null,"Title":"dotnet tool install uses current runtime's dotnet.exe and not current dotnet.exe to restore tool","State":"open","Body":"If multilevel lookup is enabled (current default), the sdk can be running on a runtime from a different directory than the dotnet.exe that launched the sdk command. When tool install shells out to dotnet restore, it picks the dotnet.exe next to the runtime that is being used and not the dotnet.exe that hosted the tool install command. \r\n\r\n## Steps to reproduce\r\n\r\n1. Have some 2.1.x runtime newer than 2.1.0 installed to global c:\\program files\\dotnet\r\n2. Have [SDK 2.1.300](https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.300/dotnet-sdk-2.1.300-win-x64.zip) unzipped to c:\\example\r\n3. `set PATH=c:\\example;%PATH%` \r\n4. `set DOTNET_MULTILEVEL_LOOKUP=`\r\n5. `mkdir repro && cd repro`\r\n6. `dotnet new global.json --sdk-version 2.1.300`\r\n7. `dotnet -d tool install -g some-tool`\r\n\r\n\r\n## Expected  behavior\r\n\r\nRestore uses the dotnet.exe from c:\\example and succeeds\r\n\r\n## Actual behavior\r\n\r\nRestore uses the dotnet.exe from Program Files, and then fails to find the 2.1.300 SDK pinned in global.json\r\n```\r\nD:\\repro>dotnet -d tool install -g some-tool\r\nTelemetry is: Enabled\r\nRunning C:\\Program Files\\dotnet\\dotnet.exe restore C:\\Users\\nicholg\\AppData\\Local\\Temp\\a4mqhtjd.cnm\\restore.csproj --runtime any -property:BaseIntermediateOutputPath=C:\\Users\\nicholg\\.dotnet\\tools\\.store\\.stage\\ujrqo0tp.121 -verbosity:quiet\r\nProcess ID: 12388\r\nA compatible installed dotnet SDK for global.json version: [2.1.300] from [D:\\repro\\global.json] was not found\r\nPlease install the [2.1.300] SDK or update [D:\\repro\\global.json] with an installed dotnet SDK:\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nThe tool package could not be restored.\r\nTool 'some-tool' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11380","RelatedDescription":"Open issue \"dotnet tool install uses current runtime's dotnet.exe and not current dotnet.exe to restore tool\" (#11380)"},{"Id":"445323710","IsPullRequest":false,"CreatedAt":"2019-05-20T17:06:21","Actor":"yuki233","Number":"11372","RawContent":null,"Title":"\"dotnet build\" for mvc failed with error  MSB4064","State":"closed","Body":"## Steps to reproduce\r\n1. Install .NET core SDK 3.0.100-preview6-011991\r\n2. Run \"dotnet new mvc -o mymvc\"\r\n3. Run \"dotnet build\" to observe the result\r\n\r\n## Expected  behavior\r\n1. Dotnet build works fine.\r\n\r\n## Actual behavior\r\n1. dotnet build failed with error MSB4064\r\n\r\n/usr/share/dotnet/sdk/3.0.100-preview6-011991/Sdks/Microsoft.NET.Sdk.Razor/build                                  /netstandard2.0/Microsoft.NET.Sdk.Razor.Compilation.targets(156,10): error MSB40                                  64: The \"NullableContextOptions\" parameter is not supported by the \"Csc\" task. V                                  erify the parameter exists on the task, and it is a settable public instance pro                                  perty. [/home/nicole/mymvc/mymvc.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview6-011991/Sdks/Microsoft.NET.Sdk.Razor/build                                  /netstandard2.0/Microsoft.NET.Sdk.Razor.Compilation.targets(120,5): error MSB406                                  3: The \"Csc\" task could not be initialized with its input parameters.  [/home/ni                                  cole/mymvc/mymvc.csproj]\r\n![image](https://user-images.githubusercontent.com/1578239/57913940-3b922c00-78c0-11e9-8bb0-3583cc136408.png)\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011991\r\n Commit:    c4f1cf02c2\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview6-011991/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27716-10\r\n  Commit:  6defcc2f37\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview6-011991 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19265-03 [/usr/share/dotnet/shared/Mic                                  rosoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27716-10 [/usr/share/dotnet/shared/Micros                                  oft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11372","RelatedDescription":"Closed issue \"\"dotnet build\" for mvc failed with error  MSB4064\" (#11372)"},{"Id":"445987717","IsPullRequest":false,"CreatedAt":"2019-05-20T08:32:37","Actor":"Jepson109","Number":"11378","RawContent":null,"Title":"\"dotnet build\" failed with error NETSDK1073 for the .NET core 3.0 app with reference to a .NET Standard 2.1 class lib","State":"open","Body":"## Steps to reproduce\r\n1. Install .NET core sdk 3.0.100-preview6-012012 \r\n2. Create a  .NET core 3.0 app with reference to a .NET Standard **2.1** class lib with below CLI\r\n    dotnet new console -o consoleapp30\r\n    dotnet new classlib -n CSNS21Lib -f **netstandard2.1**\r\n    dotnet add reference ..\\CSNS21Lib\\CSNS21Lib.csproj \r\n3. run \"dotnet build\" to observe the result\r\n\r\n##Note\r\n1. This issue also repro with VS\r\n2. This issue is not repro on the .NET core 3.0 app with reference to a .NET Standard **2.0** class lib\r\n     \r\n\r\n## Expected  behavior\r\nThe project can be built successfully\r\n\r\n## Actual behavior\r\nBuild with error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\r\n![image](https://user-images.githubusercontent.com/38854445/58007716-75ac3980-7b1d-11e9-9308-75e6561ac645.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-012012\r\n Commit:    94b54a5ef6\r\n\r\nRuntime Environment:  \r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012012\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27718-08\r\n  Commit:  7c7a2e9074\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010195 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012012 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19265-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27718-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27718-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11378","RelatedDescription":"Open issue \"\"dotnet build\" failed with error NETSDK1073 for the .NET core 3.0 app with reference to a .NET Standard 2.1 class lib\" (#11378)"},{"Id":"445709506","IsPullRequest":true,"CreatedAt":"2019-05-18T12:46:06","Actor":"dotnet-maestro[bot]","Number":"11377","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190517.5\r\n- **Date Produced**: 5/18/2019 1:20 AM\r\n- **Commit**: efc78834f8816aeea9d26168f887248732fd9fda\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19267.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11377","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11377)"},{"Id":"445634274","IsPullRequest":false,"CreatedAt":"2019-05-17T22:04:09","Actor":"ardove","Number":"11376","RawContent":null,"Title":"Global tools should be allowed to update themselves","State":"open","Body":"I previously opened https://github.com/dotnet/cli/issues/11375 but on the wrong account, so reopening here.\r\n\r\nThis is handy for making sure that someone using your tool doesn't need to understand the dotnet cli to update their tools (we can simply provide useful contextual information from our global tool that guides them through the process). Typically, something like a `<toolName> update` is less verbose and easier to remember than `dotnet tool install -g <toolName>`). \r\n\r\n## Steps to reproduce\r\n* Create a global tool which allows for an update command (`dotnet tool install -g <toolName>`)\r\n* Publish version 0.0.0 of the tool\r\n* Implement the update command in such a way that it invokes `dotnet tool update -g <toolName>` to update to the latest version of the tool\r\n* Install version 0.0.0 of the tool\r\n* Publish version 0.0.1 of the tool \r\n* Run the update command (`<toolName> update`)\r\n\r\n## Expected  behavior\r\n* The tool can update itself successfully\r\n* Any future invocations of the tool use the updated version \r\n\r\n## Actual behavior\r\n```\r\nFailed to uninstall tool package '<toolName>': Access to the path '<userPath>\\.dotnet\\tools\\.store\\<toolName>\\0.0.0' is denied\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11376","RelatedDescription":"Open issue \"Global tools should be allowed to update themselves\" (#11376)"},{"Id":"445632581","IsPullRequest":false,"CreatedAt":"2019-05-17T21:57:34","Actor":"adovepf","Number":"11375","RawContent":null,"Title":"Global tool should be able to update itself","State":"closed","Body":"## Steps to reproduce\r\n* Create a global tool which allows for an update command (`dotnet install -g <toolName>`)\r\n* Publish version 0.0.0 of the tool\r\n* Implement the update command in such a way that it invokes `dotnet tool update -g <toolName>` to update to the latest version of the tool\r\n* Install version 0.0.0 of the tool\r\n* Publish version 0.0.1 of the tool \r\n* Run the update command (`<toolName> update`)\r\n\r\n## Expected  behavior\r\n* The tool can update itself successfully\r\n* Any future invocations of the tool use the updated version \r\n\r\n## Actual behavior\r\n```\r\nFailed to uninstall tool package '<toolName>': Access to the path '<userPath>\\.dotnet\\tools\\.store\\<toolName>\\0.0.0' is denied\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11375","RelatedDescription":"Closed issue \"Global tool should be able to update itself\" (#11375)"},{"Id":"445212455","IsPullRequest":true,"CreatedAt":"2019-05-17T21:02:58","Actor":"nguerrera","Number":"11370","RawContent":null,"Title":"Remove stale, unused xlf files","State":"closed","Body":"There were ancient \"neutral\" xlf files with no language, and some left over from a rename of LocalizableStrings to CommonLocalizableStrings.\r\n","Url":"https://github.com/dotnet/cli/pull/11370","RelatedDescription":"Closed or merged PR \"Remove stale, unused xlf files\" (#11370)"},{"Id":"445077082","IsPullRequest":true,"CreatedAt":"2019-05-17T21:02:19","Actor":"tdykstra","Number":"11363","RawContent":null,"Title":"Remove 'please' from message text","State":"closed","Body":"Fixes #11336 :\r\n\r\n>Per the MS Style guide\r\n>\r\n>Avoid please except in situations where the customer is asked to do something inconvenient or the application or site is to blame for the situation.\r\n>\r\n>A search yields 864 lines with please. In almost every case, please should be removed.\r\n\r\ncc @Rick-Anderson @livarcocc @peterhuene ","Url":"https://github.com/dotnet/cli/pull/11363","RelatedDescription":"Closed or merged PR \"Remove 'please' from message text\" (#11363)"},{"Id":"445253878","IsPullRequest":true,"CreatedAt":"2019-05-17T15:48:03","Actor":"wli3","Number":"11371","RawContent":null,"Title":"Increase the time out","State":"closed","Body":"A normal run could take 2000ms, since all tests run in parallel.\r\nIt is very likely to go over the existing limit due to not enough resource\r\n","Url":"https://github.com/dotnet/cli/pull/11371","RelatedDescription":"Closed or merged PR \"Increase the time out\" (#11371)"},{"Id":"445496514","IsPullRequest":true,"CreatedAt":"2019-05-17T15:24:57","Actor":"dsychin","Number":"11374","RawContent":null,"Title":"WIP add no-self-contained option for dotnet publish","State":"open","Body":"This is an attempt to fix #9949\r\n\r\nI am not sure whether the way I have done it is the best way.","Url":"https://github.com/dotnet/cli/pull/11374","RelatedDescription":"Open PR \"WIP add no-self-contained option for dotnet publish\" (#11374)"},{"Id":"445409695","IsPullRequest":true,"CreatedAt":"2019-05-17T13:26:49","Actor":"dotnet-maestro[bot]","Number":"11373","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190516.1\r\n- **Date Produced**: 5/17/2019 1:04 AM\r\n- **Commit**: f8a2a0fa2fd3b5676b7e93e9a16d4fdae540140d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19266.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11373","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11373)"},{"Id":"444717144","IsPullRequest":true,"CreatedAt":"2019-05-16T23:35:09","Actor":"johnbeisner","Number":"11359","RawContent":null,"Title":"Updates to the dotnet installation scripts.","State":"closed","Body":"Addresses:\r\nhttps://github.com/dotnet/cli/issues/10663\r\n\"-Runtime aspnetcore\" fails because the 'latest.version' file at blob storage is missing the commit sha.\r\nhttps://github.com/dotnet/cli/issues/10664\r\nWe should be printing an accurate and usable \"repeatable command\".\r\n\r\nTrivial:\r\nMirroring some of the non-similar output; mirroring some comments.","Url":"https://github.com/dotnet/cli/pull/11359","RelatedDescription":"Closed or merged PR \"Updates to the dotnet installation scripts.\" (#11359)"},{"Id":"445058069","IsPullRequest":true,"CreatedAt":"2019-05-16T18:30:57","Actor":"peterhuene","Number":"11362","RawContent":null,"Title":"Update Roslyn to 3.2.0-beta1-19266-05.","State":"closed","Body":"This commit updates Roslyn to `3.2.0-beta1-19266-05`.\r\n","Url":"https://github.com/dotnet/cli/pull/11362","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.2.0-beta1-19266-05.\" (#11362)"},{"Id":"445057265","IsPullRequest":true,"CreatedAt":"2019-05-16T18:30:53","Actor":"peterhuene","Number":"11361","RawContent":null,"Title":"Update Roslyn to 3.2.0-beta1-19266-05.","State":"closed","Body":"This commit updates Roslyn to `3.2.0-beta1-19266-05`.\r\n","Url":"https://github.com/dotnet/cli/pull/11361","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.2.0-beta1-19266-05.\" (#11361)"},{"Id":"445091867","IsPullRequest":true,"CreatedAt":"2019-05-16T18:11:23","Actor":"zivkan","Number":"11366","RawContent":null,"Title":"Insert NuGet 5.2.0-preview2.6020 into master","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11366","RelatedDescription":"Open PR \"Insert NuGet 5.2.0-preview2.6020 into master\" (#11366)"},{"Id":"445077527","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:43","Actor":"nugetlurker","Number":"11365","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into cli","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into cli release/2.1.8xx branch","Url":"https://github.com/dotnet/cli/pull/11365","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into cli\" (#11365)"},{"Id":"445077503","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:40","Actor":"nugetlurker","Number":"11364","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into cli","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into cli release/2.2.4xx branch","Url":"https://github.com/dotnet/cli/pull/11364","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into cli\" (#11364)"},{"Id":"444917460","IsPullRequest":true,"CreatedAt":"2019-05-16T16:34:45","Actor":"dotnet-maestro[bot]","Number":"11360","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190515.6\r\n- **Date Produced**: 5/16/2019 2:37 AM\r\n- **Commit**: 260d55d2a1b5fe6961b1b7454d8ebf971181b177\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19265.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11360)"},{"Id":"444710505","IsPullRequest":true,"CreatedAt":"2019-05-16T14:38:24","Actor":"peterhuene","Number":"11358","RawContent":null,"Title":"Merge release/2.2.3xx to release/2.2.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11358","RelatedDescription":"Closed or merged PR \"Merge release/2.2.3xx to release/2.2.4xx\" (#11358)"},{"Id":"444702817","IsPullRequest":true,"CreatedAt":"2019-05-16T03:57:53","Actor":"livarcocc","Number":"11357","RawContent":null,"Title":"Update Roslyn to 3.1.0-beta4-19265-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11357","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.1.0-beta4-19265-02\" (#11357)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"445640404","IsPullRequest":true,"CreatedAt":"2019-05-20T20:27:35","Actor":"terrajobst","Number":"1197","RawContent":null,"Title":"Add asymmetric key import/export APIs","State":"closed","Body":"This fixes #1178.","Url":"https://github.com/dotnet/standard/pull/1197","RelatedDescription":"Closed or merged PR \"Add asymmetric key import/export APIs\" (#1197)"},{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-20T20:27:35","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"closed","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Closed issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"445635400","IsPullRequest":true,"CreatedAt":"2019-05-20T20:22:04","Actor":"terrajobst","Number":"1196","RawContent":null,"Title":"Enable C# mode command line diff","State":"closed","Body":"When diffing on the command line, enabling this ensures that hunk headers will use the containing construct (i.e. method, type, or namespace).\r\n\r\nFor example, instead of this (pay attention to the `@@` line):\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ namespace System.Security.Cryptography\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```\r\n\r\nYou'll see this:\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex 9f68653..19d239a 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -101,8 +101,20 @@ public abstract partial class AsymmetricAlgorithm : System.IDisposable\r\n         public virtual byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<char> password, System.Security.Cryptography.PbeParameters pbeParameters) { throw null; }\r\n         public virtual byte[] ExportPkcs8PrivateKey() { throw null; }\r\n+        public virtual byte[] ExportSubjectPublicKeyInfo() { throw null; }\r\n         public virtual void FromXmlString(string xmlString) { }\r\n     }\r\n     public abstract partial class AsymmetricKeyExchangeDeformatter\r\n     {\r\n```","Url":"https://github.com/dotnet/standard/pull/1196","RelatedDescription":"Closed or merged PR \"Enable C# mode command line diff\" (#1196)"},{"Id":"446103850","IsPullRequest":true,"CreatedAt":"2019-05-20T13:38:53","Actor":"dotnet-maestro[bot]","Number":"1201","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 11:22 AM\r\n- **Commit**: e58b35cd0f8fe6caa194ca7e48388d8d59854fe0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19270.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19270.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1201)"},{"Id":"445816606","IsPullRequest":true,"CreatedAt":"2019-05-19T13:14:40","Actor":"dotnet-maestro[bot]","Number":"1200","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190518.5\r\n- **Date Produced**: 5/18/2019 11:19 PM\r\n- **Commit**: 36ad1c62d4bb753a489d4c055b909af2cb6d407f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19268.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19268.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1200","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1200)"},{"Id":"445713531","IsPullRequest":true,"CreatedAt":"2019-05-18T13:13:40","Actor":"dotnet-maestro[bot]","Number":"1199","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190517.12\r\n- **Date Produced**: 5/18/2019 4:32 AM\r\n- **Commit**: c671ce2be16ae3c6086a061d9d94b81005217735\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19267.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19267.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1199)"},{"Id":"445645996","IsPullRequest":true,"CreatedAt":"2019-05-17T23:00:38","Actor":"terrajobst","Number":"1198","RawContent":null,"Title":"Add missing members to MemoryMarshal","State":"open","Body":"This fixes #1193.","Url":"https://github.com/dotnet/standard/pull/1198","RelatedDescription":"Open PR \"Add missing members to MemoryMarshal\" (#1198)"},{"Id":"445427447","IsPullRequest":true,"CreatedAt":"2019-05-17T14:02:55","Actor":"dotnet-maestro[bot]","Number":"1195","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190516.12\r\n- **Date Produced**: 5/17/2019 8:31 AM\r\n- **Commit**: 6f9570e012054bf407778c0b07632e7733ecbb13\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview6.19266.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview6.19266.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1195","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1195)"},{"Id":"444869749","IsPullRequest":false,"CreatedAt":"2019-05-16T10:11:58","Actor":"KexyBiscuit","Number":"1194","RawContent":null,"Title":"Is ValueTask<> missing in latest NetStandard?","State":"open","Body":"```\r\nerror CS0012: The type 'ValueTask<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Threading.Tasks.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n\r\nMight be related to #1180?\r\n\r\n```\r\n> dotnet --version\r\n3.0.100-preview6-011910\r\n```\r\n\r\n```\r\n<TargetFramework>netstandard2.1</TargetFramework>\r\n<NetStandardImplicitPackageVersion>2.1.0-prerelease.19265.2</NetStandardImplicitPackageVersion>\r\n```","Url":"https://github.com/dotnet/standard/issues/1194","RelatedDescription":"Open issue \"Is ValueTask<> missing in latest NetStandard?\" (#1194)"},{"Id":"442461759","IsPullRequest":true,"CreatedAt":"2019-05-15T21:27:47","Actor":"terrajobst","Number":"1183","RawContent":null,"Title":"Seal types that cannot be inherited","State":"closed","Body":"These changes are related to #1176 and address the same problem.\r\n\r\nFixes #1171.","Url":"https://github.com/dotnet/standard/pull/1183","RelatedDescription":"Closed or merged PR \"Seal types that cannot be inherited\" (#1183)"},{"Id":"444621714","IsPullRequest":false,"CreatedAt":"2019-05-15T20:07:05","Actor":"wtgodbe","Number":"1193","RawContent":null,"Title":"Fix APICompat issues with netstandard2.0 System.Memory","State":"open","Body":"After adding a shim for `System.Memory` to netstandard2.1, we uncovered an incompatibility with netstandard2.0:\r\n\r\nhttps://github.com/dotnet/standard/blob/d3413ee9ec761bdf067114a498b9da3ebf0149df/src/apicompat/baselines/ApiCompatBaseline.netstandard2.0.txt#L72-L74\r\n\r\nIndeed, these members exist in CoreFx's ref, but are missing in Standard:  https://github.com/dotnet/corefx/blob/1f9b84a0804e868c7e0f37a3c10fbaf7c735ae14/src/System.Memory/ref/System.Memory.cs#L471\r\n\r\n@terrajobst we should add these missing members to the surface area for `netstandard2.1`","Url":"https://github.com/dotnet/standard/issues/1193","RelatedDescription":"Open issue \"Fix APICompat issues with netstandard2.0 System.Memory\" (#1193)"},{"Id":"441943870","IsPullRequest":true,"CreatedAt":"2019-05-15T19:22:33","Actor":"wtgodbe","Number":"1180","RawContent":null,"Title":"Add shims to netstandard2.1 for types that used to have OOB packages","State":"closed","Body":"Resolves https://github.com/dotnet/corefx/issues/36719 & https://github.com/dotnet/standard/issues/1063. These TypeForward files were generated with `GenApi`, using the `netstandard2.0` assets from the packages I added to `netstandard.depproj`. \r\n\r\nStill to do:\r\n- Add a DARC subscription from CoreFx -> Standard\r\n- Add a placeholder file for `netstandard2.1` to the `System.Reflection.Emit*` packages in CoreFx - will be done by https://github.com/dotnet/corefx/pull/37532\r\n\r\n@ericstj @terrajobst PTAL\r\n\r\nCC @bartonjs ","Url":"https://github.com/dotnet/standard/pull/1180","RelatedDescription":"Closed or merged PR \"Add shims to netstandard2.1 for types that used to have OOB packages\" (#1180)"},{"Id":"444399962","IsPullRequest":true,"CreatedAt":"2019-05-15T12:04:11","Actor":"dotnet-maestro[bot]","Number":"1192","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19270.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1192","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1192)"},{"Id":"442864446","IsPullRequest":true,"CreatedAt":"2019-05-14T17:23:33","Actor":"wtgodbe","Number":"1185","RawContent":null,"Title":"Fail CI build if APICompat baseline files would change","State":"closed","Body":"Currently, if a change in Arcade would cause changes in the APICompat baseline files, the baseline files are rewritten without throwing an error. If somebody makes such a change without checking in the changes to the APICompat baselines, the CI should fail. This change achieves that. Resolves https://github.com/dotnet/standard/issues/1184.\r\n\r\n@ericstj @terrajobst PTAL","Url":"https://github.com/dotnet/standard/pull/1185","RelatedDescription":"Closed or merged PR \"Fail CI build if APICompat baseline files would change\" (#1185)"},{"Id":"442475952","IsPullRequest":false,"CreatedAt":"2019-05-14T17:23:33","Actor":"wtgodbe","Number":"1184","RawContent":null,"Title":"Fail CI when APICompat Baseline files change","State":"closed","Body":"Right now, when a change to Standard causes a change to the APICompat baseline(s), the build succeeds, and the baseline files are re-written with the change. In CI, we should fail the build on changes to the APICompat baseline files (rather than silently rewriting them).\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1184","RelatedDescription":"Closed issue \"Fail CI when APICompat Baseline files change\" (#1184)"},{"Id":"443876288","IsPullRequest":true,"CreatedAt":"2019-05-14T12:39:27","Actor":"dotnet-maestro[bot]","Number":"1191","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1191)"},{"Id":"443629557","IsPullRequest":true,"CreatedAt":"2019-05-14T00:00:25","Actor":"JohnTortugo","Number":"1189","RawContent":null,"Title":"Update azure-pipelines.yml","State":"closed","Body":"Related to: https://github.com/dotnet/core-eng/issues/6291","Url":"https://github.com/dotnet/standard/pull/1189","RelatedDescription":"Closed or merged PR \"Update azure-pipelines.yml\" (#1189)"},{"Id":"443632814","IsPullRequest":false,"CreatedAt":"2019-05-13T22:41:56","Actor":"yangsong2828","Number":"1190","RawContent":null,"Title":"HttpModule with Microsoft.AspNetCore.Http","State":"open","Body":"We have multiple projects depend on one common IIS module, say Logging module.\r\nHowever, we can't move all projects to asp.net core at one shot. But we want to move one at a time.\r\nIf I port it to middleware, it can't be used by legacy IIS projects any more.\r\nSo what is your recommendation to move those common piece to asp .net core? Thanks.","Url":"https://github.com/dotnet/standard/issues/1190","RelatedDescription":"Open issue \"HttpModule with Microsoft.AspNetCore.Http\" (#1190)"},{"Id":"443361033","IsPullRequest":true,"CreatedAt":"2019-05-13T12:19:21","Actor":"dotnet-maestro[bot]","Number":"1188","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1188","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1188)"},{"Id":"443096722","IsPullRequest":true,"CreatedAt":"2019-05-12T12:18:57","Actor":"dotnet-maestro[bot]","Number":"1187","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1187","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1187)"},{"Id":"442986105","IsPullRequest":true,"CreatedAt":"2019-05-11T12:28:56","Actor":"dotnet-maestro[bot]","Number":"1186","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1186","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1186)"},{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-10T20:25:17","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.12\r\n- **Date Produced**: 5/7/2019 5:12 AM\r\n- **Commit**: c31fac9f6899094226cb5cd77c85b8f60ecafa3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190507.7\r\n- **Date Produced**: 5/8/2019 12:49 AM\r\n- **Commit**: bda52d7619f9420de46f2c39ffc972864bbcab63\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19257.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19257.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190508.5\r\n- **Date Produced**: 5/8/2019 10:17 PM\r\n- **Commit**: 9005cee9510d23535c09bd9b6be7c426e526c067\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19258.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19258.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-09T21:46:08","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"closed","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Closed or merged PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"442425601","IsPullRequest":true,"CreatedAt":"2019-05-09T21:41:45","Actor":"joperezr","Number":"1182","RawContent":null,"Title":"Fix official build which is failing when trying to publish the packages to BAR","State":"closed","Body":"cc: @wtgodbe \r\n\r\nOfficial builds are failing when trying to publish packages to BAR because the AssetsManifest file isn't being generated any longer. This was caused because of a breaking change in Arcade. These changes will fix this issue.","Url":"https://github.com/dotnet/standard/pull/1182","RelatedDescription":"Closed or merged PR \"Fix official build which is failing when trying to publish the packages to BAR\" (#1182)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-09T20:13:26","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"closed","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Closed or merged PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"442368786","IsPullRequest":true,"CreatedAt":"2019-05-09T19:01:19","Actor":"joperezr","Number":"1181","RawContent":null,"Title":"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions","State":"closed","Body":"cc: @stephentoub @terrajobst \r\n\r\nResponding to changes made by https://github.com/dotnet/corefx/pull/37367 where the extnsion methods where moved to a new type. This is the first time I make a change like this so please do let me know if I missed anything.","Url":"https://github.com/dotnet/standard/pull/1181","RelatedDescription":"Closed or merged PR \"Move WithCancellation/ConfigureAwait extension methods to TaskAsyncEnumerableExtensions\" (#1181)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-08T17:55:44","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"closed","Body":"CC @ViktorHofer @ericstj. This also contains a maestro update of Arcade dependencies.","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Closed or merged PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"441500740","IsPullRequest":false,"CreatedAt":"2019-05-08T00:36:05","Actor":"PHuhn","Number":"1179","RawContent":null,"Title":"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework","State":"open","Body":"Thanks for creating .Net Standard...\r\n\r\nI am attempting to migrate my .Net Framework libraries to .Net Standard, so my libraries will be available in .Net Framework and .Net Core. One of the libraries is using DataAnnotations as follows:\r\n```\r\npublic partial class LogData\r\n{\r\n    [Key, Column(Order = 1)]\r\n    [Required(ErrorMessage = \"Id is required.\")]\r\n    public long Id { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Date is required.\")]\r\n    public DateTime Date { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Application is required.\"), MaxLength(30, ErrorMessage = \"'Application' must be 30 or less characters.\")]\r\n    public string Application { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Method is required.\"), MaxLength(255, ErrorMessage = \"'Method' must be 255 or less characters.\")]\r\n    public string Method { get; set; }\r\n\r\n    [Required(ErrorMessage = \"LogLevel is required.\")]\r\n    [Range(typeof(byte), \"0\", \"4\", ErrorMessage = \"'LogLevel' must be between 0 and 4\")]\r\n    public byte LogLevel { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Level is required.\"), MaxLength(8, ErrorMessage = \"'Level' must be 8 or less characters.\")]\r\n    public string Level { get; set; }\r\n\r\n    [Required(ErrorMessage = \"UserAccount is required.\"), MaxLength(255, ErrorMessage = \"'UserAccount' must be 255 or less characters.\")]\r\n    public string UserAccount { get; set; }\r\n\r\n    [Required(ErrorMessage = \"Message is required.\"), MaxLength(4000, ErrorMessage = \"'Message' must be 4000 or less characters.\")]\r\n    public string Message { get; set; }\r\n\r\n    [MaxLength(4000, ErrorMessage = \"'Exception' must be 4000 or less characters.\")]\r\n    public string Exception { get; set; }\r\n}\r\n```\r\nThe migration **up** method in the .Net Core console applications is as follows:\r\n```\r\nmigrationBuilder.CreateTable(\r\n    name: \"Logs\",\r\n    columns: table => new\r\n    {\r\n        Id = table.Column<long>(nullable: false)\r\n            .Annotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn),\r\n        Date = table.Column<DateTime>(nullable: false),\r\n        Application = table.Column<string>(maxLength: 30, nullable: false),\r\n        Method = table.Column<string>(maxLength: 255, nullable: false),\r\n        LogLevel = table.Column<byte>(nullable: false),\r\n        Level = table.Column<string>(maxLength: 8, nullable: false),\r\n        UserAccount = table.Column<string>(maxLength: 255, nullable: false),\r\n        Message = table.Column<string>(maxLength: 4000, nullable: false),\r\n        Exception = table.Column<string>(maxLength: 4000, nullable: true)\r\n    },\r\n    constraints: table =>\r\n    {\r\n        table.PrimaryKey(\"PK_Logs\", x => x.Id);\r\n    });\r\n```\r\nThis as I would expect it to be.\r\n\r\nThe migration **up** method in the .Net Framework console applications is as follows:\r\n```\r\nCreateTable(\r\n    \"dbo.Logs\",\r\n    c => new\r\n        {\r\n            Id = c.Long(nullable: false, identity: true),\r\n            Date = c.DateTime(nullable: false),\r\n            Application = c.String(),\r\n            Method = c.String(),\r\n            LogLevel = c.Byte(nullable: false),\r\n            Level = c.String(),\r\n            UserAccount = c.String(),\r\n            Message = c.String(),\r\n            Exception = c.String(),\r\n        })\r\n    .PrimaryKey(t => t.Id);\r\n```\r\nThis is lacking the various length constraints.  Is this the intended output?\r\n\r\nI have attached a test solution. It has three projects as follows:\r\n*\tNSG.LogData (.NetStandard library containing annotated-data class),\r\n*\tNSG.ConsoleCore (.Net Core console project, that includes NSG.LogData library, and creates a code-first database),\r\n*\tNSG.ConsoleNet (.Net Framework console project, that includes NSG.LogData library, and creates a code-first database).\r\n\r\nPackage installation for NSG.ConsoleCore:\r\n\r\n\tInstall-Package Microsoft.EntityFrameworkCore.SqlServer\r\n\tInstall-Package Microsoft.EntityFrameworkCore.Tools\r\n\r\nMigration command for NSG.ConsoleCore:\r\n\r\n\tEntityFrameworkCore\\Add-Migration -name InitialCreate -Project NSG.ConsoleCore -StartupProject NSG.ConsoleCore\r\n\r\nMigration command for NSG.ConsoleNet:\r\n\r\n\tEntityFramework\\Add-Migration -name InitialCreate -Project NSG.ConsoleNet -StartupProject NSG.ConsoleNet\r\n\r\n\r\n\r\n\r\n[NSG.DataAnnotations.zip](https://github.com/dotnet/standard/files/3154973/NSG.DataAnnotations.zip)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1179","RelatedDescription":"Open issue \"System.ComponentModel.Annotations V4.5.0 attributes in .Net Standard library not working in .Net framework\" (#1179)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"446372304","IsPullRequest":true,"CreatedAt":"2019-05-21T01:37:39","Actor":"dotnet-maestro-bot","Number":"37831","RawContent":null,"Title":"Update BuildTools to preview1-04021-01 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37831","RelatedDescription":"Closed or merged PR \"Update BuildTools to preview1-04021-01 (release/2.2)\" (#37831)"},{"Id":"446355863","IsPullRequest":false,"CreatedAt":"2019-05-20T23:45:03","Actor":"kamsar","Number":"37830","RawContent":null,"Title":"Dataflow TransformBlock silently fails if TaskCanceledException is thrown","State":"open","Body":"If an operation executing in the context of a `TransformBlock` throws a `TaskCanceledException` - specifically that exception - it does NOT fault the dataflow pipeline and silently continues execution.\r\n\r\nIn my case, I was making some HTTP calls and an overloaded server caused HttpClient to throw that exception.\r\n\r\n> .NET Core SDK (reflecting any global.json):\r\n> Version:   3.0.100-preview3-010431\r\n> Commit:    d72abce213\r\n> System.Threading.Tasks.Dataflow, Version=4.6.4.0\r\n\r\nSample program that will reproduce the issue (it should throw an exception, but instead it just prints 'Done'):\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Threading.Tasks.Dataflow;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static async Task<int> Main(string[] args)\r\n        {\r\n            var producer = new BufferBlock<int>();\r\n\r\n            var processor = new TransformBlock<int, int>(async input =>\r\n            {\r\n                throw new TaskCanceledException(\"Silent failure\");\r\n            });\r\n\r\n            producer.LinkTo(processor, new DataflowLinkOptions { PropagateCompletion = true });\r\n\r\n            var results = new List<int>();\r\n\r\n            var consumer = new ActionBlock<int>(result =>\r\n            { \r\n                results.Add(result);\r\n            });\r\n\r\n            processor.LinkTo(consumer, new DataflowLinkOptions { PropagateCompletion = true });\r\n\r\n            // add each spec to the pipeline\r\n            foreach (var spec in Enumerable.Range(0, 10))\r\n            {\r\n                producer.Post(spec);\r\n            }\r\n\r\n            // done adding to queue\r\n            producer.Complete();\r\n\r\n            await Task.WhenAll(producer.Completion, processor.Completion, consumer.Completion).ConfigureAwait(false);\r\n\r\n            foreach (var result in results)\r\n            {\r\n                Console.WriteLine(result);\r\n            }\r\n\r\n            Console.WriteLine(\"Done!\");\r\n\r\n            return 0;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n```\r\n\r\nChanging the thrown exception to say `InvalidOperationException` fixes the problem and an exception is thrown when we await the dataflow completion.","Url":"https://github.com/dotnet/corefx/issues/37830","RelatedDescription":"Open issue \"Dataflow TransformBlock silently fails if TaskCanceledException is thrown\" (#37830)"},{"Id":"446225914","IsPullRequest":true,"CreatedAt":"2019-05-20T23:40:03","Actor":"Anipik","Number":"37810","RawContent":null,"Title":"Converting SystemColors into InstanceDescriptors using Color Convertor","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/34252\r\n\r\nWe combined the check of the known colors and system colors into one check in .net Core.\r\nBut this created a bug as ```typeof(Color).GetProperty(c.Name);``` on system colors donot give the required output.\r\n\r\n we can do almost a similar thing i.e first try as it was a system color, if it returns null try for colors.","Url":"https://github.com/dotnet/corefx/pull/37810","RelatedDescription":"Closed or merged PR \"Converting SystemColors into InstanceDescriptors using Color Convertor\" (#37810)"},{"Id":"446353114","IsPullRequest":true,"CreatedAt":"2019-05-20T23:32:39","Actor":"maryamariyan","Number":"37829","RawContent":null,"Title":"Make JsonPropertyNameAttribute.Name property readonly","State":"open","Body":"@ahsonkhan the test coverage for this class is already at 100%\r\n\r\n- [ ] Pending API approval.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/37552","Url":"https://github.com/dotnet/corefx/pull/37829","RelatedDescription":"Open PR \"Make JsonPropertyNameAttribute.Name property readonly\" (#37829)"},{"Id":"446350695","IsPullRequest":false,"CreatedAt":"2019-05-20T23:22:07","Actor":"AdamYoblick","Number":"37828","RawContent":null,"Title":"Corefx coding conventions don't match .editorconfig settings","State":"open","Body":"The coding convensions say to use var when the type is apparent, but the editorconfig specifies to never use var:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/.editorconfig#L41\r\n\r\n:)","Url":"https://github.com/dotnet/corefx/issues/37828","RelatedDescription":"Open issue \"Corefx coding conventions don't match .editorconfig settings\" (#37828)"},{"Id":"446348303","IsPullRequest":true,"CreatedAt":"2019-05-20T23:12:34","Actor":"ViktorHofer","Number":"37827","RawContent":null,"Title":"Test DetermineCanModifyStores disabled tests","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/9293\r\n\r\ncc @bartonjs @MattGal ","Url":"https://github.com/dotnet/corefx/pull/37827","RelatedDescription":"Open PR \"Test DetermineCanModifyStores disabled tests\" (#37827)"},{"Id":"446342219","IsPullRequest":false,"CreatedAt":"2019-05-20T22:46:36","Actor":"terrajobst","Number":"37826","RawContent":null,"Title":"Attributes for nullable annotations","State":"open","Body":"The nullable reference types feature allows developers to express which APIs can accept and return `null` values. Some framework APIs, such as generic APIs, or `TryXxx` methods use specific patterns that the normal type system of C# can't express. This proposal lists all the attributes.\r\n\r\n### Base type\r\n\r\nSince we're proposing quite a set of attributes, we should make sure they can be\r\ngrouped, for which we have the following options:\r\n\r\n1. Common prefix\r\n2. Separate namespace\r\n3. Common base type\r\n\r\nOption (1) isn't feasible without making the names quite verbose, which will\r\nmake usage quite cumbersome. Option (2) doesn't seem desirable yet because there\r\ndoesn't seem \"enough meat\" to warrant a dedicated namespace for this feature.\r\n\r\nSo option (3) seems most appealing:\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // Allows null as the input, even if the type disallows it\r\n    public abstract class NullableAnnotationAttribute : Attribute\r\n    {\r\n        protected NullableAnnotationAttribute();\r\n    }\r\n}\r\n```\r\n\r\n### Simple preconditions\r\n\r\nApplied to input.\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // Allows null as the input, even if the type disallows it\r\n    public sealed class AllowNullAttribute : NullableAnnotationAttribute\r\n    {\r\n        public AllowNullAttribute();\r\n    }\r\n\r\n    // Disallows null as the input, even if the type allows it\r\n    public sealed class DisallowNullAttribute : NullableAnnotationAttribute\r\n    {\r\n        public DisallowNullAttribute();\r\n    }\r\n}\r\n```\r\n\r\n### Simple postconditions\r\n\r\nApplied to output.\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // The output may be null, even if the type disallows it\r\n    public sealed class MaybeNullAttribute : NullableAnnotationAttribute\r\n    {\r\n        public MaybeNullAttribute();\r\n    }\r\n\r\n    // The output will not be null, even if the type allows it\r\n    public sealed class NotNullAttribute : NullableAnnotationAttribute\r\n    {\r\n        public NotNullAttribute();\r\n    }\r\n}\r\n```\r\n\r\n### Conditional postconditions\r\n\r\nApplied to both input and output parameters of methods returning a Boolean.\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // When the method returns <condition>, the parameter may be null, even if the type disallows it\r\n    public sealed class MaybeNullWhenAttribute : NullableAnnotationAttribute\r\n    {\r\n        public MaybeNullWhenAttribute(bool condition);\r\n    }\r\n\r\n    // When the method returns cond, the parameter will not be null, even if the type allows it\r\n    public sealed class NotNullWhenAttribute : NullableAnnotationAttribute\r\n    {\r\n        public NotNullWhenAttribute(bool condition);\r\n    }\r\n}\r\n```\r\n\r\n### Dependent postconditions\r\n\r\nApplied to output of members taking parameters.\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // The output will not be null if the parameter specified by name is non-null\r\n    public sealed class NotNullIfNotNullAttribute : NullableAnnotationAttribute\r\n    {\r\n        public NotNullIfNotNullAttribute(string name);\r\n    }\r\n}\r\n```\r\n\r\n### Flow-related postconditions\r\n\r\nApplied to a member or to a Boolean parameter of a member respectively.\r\n\r\n```C#\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    // Applied to a member. Code after calling the member is unreachable.\r\n    public sealed class DoesNotReturnAttribute : NullableAnnotationAttribute\r\n    {\r\n        public DoesNotReturnAttribute();\r\n    }\r\n\r\n    // Applied to a boolean parameter.Code after calling the member is unreachable if the parameter value is cond.\r\n    public sealed class DoesNotReturnIfAttribute : NullableAnnotationAttribute\r\n    {\r\n        public DoesNotReturnIfAttribute(bool condition);\r\n    }\r\n}\r\n","Url":"https://github.com/dotnet/corefx/issues/37826","RelatedDescription":"Open issue \"Attributes for nullable annotations\" (#37826)"},{"Id":"446241853","IsPullRequest":true,"CreatedAt":"2019-05-20T22:39:17","Actor":"safern","Number":"37811","RawContent":null,"Title":"Generate System.Runtime.Extensions reference assembly against implementation","State":"closed","Body":"Generating ref assembly against implementation to simplify diff when adding nullable annotations.\r\n\r\ncc: @stephentoub @ahsonkhan @tannergooding @jkotas @danmosemsft @ericstj ","Url":"https://github.com/dotnet/corefx/pull/37811","RelatedDescription":"Closed or merged PR \"Generate System.Runtime.Extensions reference assembly against implementation\" (#37811)"},{"Id":"446337787","IsPullRequest":true,"CreatedAt":"2019-05-20T22:28:30","Actor":"saurabh500","Number":"37825","RawContent":null,"Title":"Adding debug logs for OleDb test failures","State":"open","Body":"Adding some diagnostics to get more information from the SEHException to debug OleDb Test failures in OuterLoop.\r\nRelated issue at https://github.com/dotnet/corefx/issues/37823","Url":"https://github.com/dotnet/corefx/pull/37825","RelatedDescription":"Open PR \"Adding debug logs for OleDb test failures\" (#37825)"},{"Id":"446280676","IsPullRequest":false,"CreatedAt":"2019-05-20T21:58:33","Actor":"Sergio0694","Number":"37817","RawContent":null,"Title":"Char.IsWhiteSpace should also apply to the 0-width space","State":"closed","Body":"The `char.IsWhiteSpace` API ([here](https://docs.microsoft.com/en-us/dotnet/api/system.char.iswhitespace?view=netcore-2.2)) doesn't contain the [0-width space](http://www.codetable.net/decimal/8203) character (`8203`, or `200B`).\r\n\r\nThis can be quickly tested like so:\r\n```csharp\r\nchar space = (char)8203;\r\nConsole.WriteLine(char.IsWhiteSpace(space)); // FALSE\r\nstring empty = space.ToString();\r\nConsole.WriteLine(string.IsNullOrEmpty(empty)); // FALSE\r\n```\r\n\r\nUnless this has been done deliberately for some specific reason (why?), I think it might be a good idea to just add this other character to that list, so that it could be used indirectly by both the `char.IsWhiteSpace` and `string.IsNullOrWhiteSpace` APIs.","Url":"https://github.com/dotnet/corefx/issues/37817","RelatedDescription":"Closed issue \"Char.IsWhiteSpace should also apply to the 0-width space\" (#37817)"},{"Id":"446299403","IsPullRequest":false,"CreatedAt":"2019-05-20T20:38:59","Actor":"Anipik","Number":"37824","RawContent":null,"Title":"Long running test hang: System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext ","State":"closed","Body":"`System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext` hangs randomly on `OSX.1013.Amd64.Open-x64:Release`:\r\n\r\n```\r\n  Discovering: System.Net.Mail.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.Mail.Functional.Tests (found 135 of 136 test cases)\r\n  Starting:    System.Net.Mail.Functional.Tests (parallel test collections = on, max threads = 4)\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:02:00\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:04:01\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:06:02\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:08:03\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:10:04\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:12:06\r\n   System.Net.Mail.Functional.Tests: [Long Running Test] 'System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext', Elapsed: 00:14:07\r\n```\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2Finnerloop~2F/20190518.8/workItem/System.Net.Mail.Functional.Tests/wilogs\r\n\r\n@stephentoub maybe `SmtpClient.SendMailAsync` happens before the `TcpListener.AcceptTcpClient` (SmtpServer) blocking call?","Url":"https://github.com/dotnet/corefx/issues/37824","RelatedDescription":"Closed issue \"Long running test hang: System.Net.Mail.Tests.SmtpClientTest.TestCredentialsCopyInAsyncContext \" (#37824)"},{"Id":"446296808","IsPullRequest":false,"CreatedAt":"2019-05-20T20:30:41","Actor":"maryamariyan","Number":"37823","RawContent":null,"Title":"[Outerloop] System.Data.OleDb tests SEHException - External component has thrown an exception","State":"open","Body":"Looking at the results of outerloop tests run on master I noticed some of outerloop OLEDB tests are failing:\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=194048&view=ms.vss-test-web.build-test-results-tab\r\n\r\nError message\r\n```\r\nSystem.Runtime.InteropServices.SEHException : External component has thrown an exception.\r\n```\r\n\r\nStack trace\r\n```\r\n   at System.Data.Common.UnsafeNativeMethods.ICommandText.Execute(IntPtr pUnkOuter, Guid& riid, tagDBPARAMS pDBParams, IntPtr& pcRowsAffected, Object& ppRowset)\r\n   at System.Data.OleDb.OleDbCommand.ExecuteCommandTextForSingleResult(tagDBPARAMS dbParams, Object& executeResult) in D:\\a\\1\\s\\src\\System.Data.OleDb\\src\\OleDbCommand.cs:line 857\r\n   at System.Data.OleDb.OleDbCommand.ExecuteCommandText(Object& executeResult) in D:\\a\\1\\s\\src\\System.Data.OleDb\\src\\OleDbCommand.cs:line 810\r\n   at System.Data.OleDb.OleDbCommand.ExecuteReaderInternal(CommandBehavior behavior, String method) in D:\\a\\1\\s\\src\\System.Data.OleDb\\src\\OleDbCommand.cs:line 601\r\n   at System.Data.OleDb.OleDbCommand.ExecuteNonQuery() in D:\\a\\1\\s\\src\\System.Data.OleDb\\src\\OleDbCommand.cs:line 916\r\n   at System.Data.OleDb.Tests.OleDbCommandBuilderTests.RunTest(Action`2 testAction, String memberName) in D:\\a\\1\\s\\src\\System.Data.OleDb\\tests\\OleDbCommandBuilderTests.cs:line 152\r\n\r\n```\r\n\r\nThe failure is on both netcoreapp and netfx and not intermittent.\r\n\r\nAll non outerloop tests seem fixed since https://github.com/dotnet/corefx/pull/37540, because the only trace of OleDb failures I've seen so far is on outerloop results.\r\n\r\nAnother related open issue: https://github.com/dotnet/corefx/issues/37411\r\n\r\nIt is yet to be confirmed if this is a product issue or the test needs to be fixed. \r\ncc: @saurabh500 @ViktorHofer ","Url":"https://github.com/dotnet/corefx/issues/37823","RelatedDescription":"Open issue \"[Outerloop] System.Data.OleDb tests SEHException - External component has thrown an exception\" (#37823)"},{"Id":"446296121","IsPullRequest":false,"CreatedAt":"2019-05-20T20:29:04","Actor":"aaronfranke","Number":"37822","RawContent":null,"Title":"Add Tuple operators to System.Numerics.Vectors structs","State":"open","Body":"The basic idea of `Tuple` operators is to allow easy conversion between these types and the types of any other math library, without them having to know about each other:\r\n\r\n        Vector2 v = new Vector2(5, 6);\r\n        // Option 1\r\n        OtherVec2 m = (Tuple<float, float>)v;\r\n        // Option 2\r\n        Tuple<float, float> t = v;\r\n        OtherVec2 n = t;\r\n\r\nExample implementation:\r\n\r\n        public static implicit operator Tuple<float, float>(Vector2 value)\r\n        {\r\n            return Tuple.Create(value.X, value.Y);\r\n        }\r\n\r\n        public static implicit operator Vector2(Tuple<float, float> value)\r\n        {\r\n            return new Vector2(value.Item1, value.Item2);\r\n        }\r\n\r\nYou may notice that the `Tuple` operators are all `implicit`. C# cannot implicitly double-cast:\r\n\r\n        Vector2 v = new Vector2(5, 6);\r\n        OtherVec2 m = v; // Error cannot convert type\r\n\r\nIt is impossible to perform any conversions with `Tuple` operators without the file containing the word \"`Tuple`\", so there is no danger of a `Vector4` accidentally becoming a `Quaternion` or anything.\r\n\r\nImplementing this proposal would mean greater interoperability with math libraries that choose to also implement `Tuple` operators.\r\n\r\nNote: I'm not sure if it would be better to use `Tuple` or `ValueTuple`.","Url":"https://github.com/dotnet/corefx/issues/37822","RelatedDescription":"Open issue \"Add Tuple operators to System.Numerics.Vectors structs\" (#37822)"},{"Id":"446292752","IsPullRequest":true,"CreatedAt":"2019-05-20T20:21:03","Actor":"dotnet-maestro-bot","Number":"37821","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/37821","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#37821)"},{"Id":"446251700","IsPullRequest":true,"CreatedAt":"2019-05-20T20:19:37","Actor":"Dotnet-GitSync-Bot","Number":"37812","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AArnott","Url":"https://github.com/dotnet/corefx/pull/37812","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37812)"},{"Id":"446286354","IsPullRequest":true,"CreatedAt":"2019-05-20T20:07:35","Actor":"dotnet-maestro-bot","Number":"37819","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/37819","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#37819)"},{"Id":"446286678","IsPullRequest":true,"CreatedAt":"2019-05-20T20:06:54","Actor":"tannergooding","Number":"37820","RawContent":null,"Title":"Adding some additional tests to validating formatting is correct with regards to rounding.","State":"open","Body":"This resolves https://github.com/dotnet/corefx/issues/37524 by adding to tests to validate the fix made in https://github.com/dotnet/coreclr/pull/24484","Url":"https://github.com/dotnet/corefx/pull/37820","RelatedDescription":"Open PR \"Adding some additional tests to validating formatting is correct with regards to rounding.\" (#37820)"},{"Id":"446252881","IsPullRequest":true,"CreatedAt":"2019-05-20T20:03:07","Actor":"dotnet-maestro-bot","Number":"37813","RawContent":null,"Title":"Update BuildTools to rc1-04020-01 (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37813","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-04020-01 (release/2.1)\" (#37813)"},{"Id":"446282370","IsPullRequest":true,"CreatedAt":"2019-05-20T19:54:56","Actor":"steveharter","Number":"37818","RawContent":null,"Title":"Avoid StackOverflowException when cyclic Type reference","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/37313\r\n\r\nThis is fixed by lazy evaluating the `ElementClassInfo` property so we don't end up in a recursive loop. To do this, the `JsonPropertyInfo`  now holds a reference to the options class which it uses during lazy evaluation; when the code was originally written this was not possible since an instance of `JsonPropertyInfo` was not linked with the options instance.\r\n\r\nAlso removed a `// todo: to minimize hashtable lookups, cache JsonClassInfo:` by leveraging the same lazy evaluation approach (also not possible before). This has a minor perf gain for lists and dictionaries.","Url":"https://github.com/dotnet/corefx/pull/37818","RelatedDescription":"Open PR \"Avoid StackOverflowException when cyclic Type reference\" (#37818)"},{"Id":"446271223","IsPullRequest":false,"CreatedAt":"2019-05-20T19:23:17","Actor":"danmosemsft","Number":"37816","RawContent":null,"Title":"Show nested exceptions more clearly","State":"open","Body":"We need to make output like this ([original](https://github.com/dotnet/corefx/issues/37815#issue-446260820)) easier to read:\r\n```\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> System.TypeInitializationException: The type initializer for 'SslMethods' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Ssl' threw an exception. ---> System.TypeInitializationException: The type initializer for 'SslInitializer' threw an exception. ---> Interop+Crypto+OpenSslCryptographicException: error:25070067:DSO support routines:DSO_load:could not load the shared library\r\n   at Interop.SslInitializer..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.Ssl..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.Ssl.SslV2_3Method()\r\n   at Interop.Ssl.SslMethods..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.OpenSsl.AllocateSslContext(SslProtocols protocols, SafeX509Handle certHandle, SafeEvpPKeyHandle certKeyHandle, EncryptionPolicy policy, SslAuthenticationOptions sslAuthenticationOptions)\r\n  ...long trace\r\n   at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n...long trace\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n...long trace\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n```\r\n\r\nAmongst other issues the message is too hard to read since is 630 characters all on one line, with the most interesting part usually at the far end. It's hard to figure out which stack trace belongs to which message, and which is nested in which. \r\n\r\nIn most cases the action is in Exception.ToString() but several exception subclasses have their own similar or identical scheme for handling inner exceptions (eg search for `-->`) and AggregateException is particularly special.\r\n\r\nI plan to improve at least part of this, opening this issue for now.","Url":"https://github.com/dotnet/corefx/issues/37816","RelatedDescription":"Open issue \"Show nested exceptions more clearly\" (#37816)"},{"Id":"446213517","IsPullRequest":false,"CreatedAt":"2019-05-20T19:11:53","Actor":"watfordgnf","Number":"37807","RawContent":null,"Title":"JsonSerializer.Parse throws unexpected exception parsing invalid DateTime(Offset) and Guid's","State":"closed","Body":"While writing tests to cover #36901, the following additional test cases were found to fail:\r\n```csharp\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<DateTime>(@\"[]\"));\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<DateTimeOffset>(@\"[]\"));\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<Guid>(@\"[]\"));\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<DateTime>(@\"{}\"));\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<DateTimeOffset>(@\"{}\"));\r\nAssert.Throws<JsonException>(() => JsonSerializer.Parse<Guid>(@\"{}\"));\r\n```\r\nThe exception received is:\r\n```\r\n    System.Text.Json.Serialization.Tests.ValueTests.ReadPrimitivesFail [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.Text.Json.JsonException)\r\n      Actual:   typeof(System.InvalidOperationException): Cannot get the value of a token type 'StartArray' as a string.\r\n      ---- System.InvalidOperationException : Cannot get the value of a token type 'StartArray' as a string.\r\n```\r\nThis should be JsonException as with the other parsing failures.","Url":"https://github.com/dotnet/corefx/issues/37807","RelatedDescription":"Closed issue \"JsonSerializer.Parse throws unexpected exception parsing invalid DateTime(Offset) and Guid's\" (#37807)"},{"Id":"446224395","IsPullRequest":true,"CreatedAt":"2019-05-20T19:11:18","Actor":"watfordgnf","Number":"37809","RawContent":null,"Title":"Ensure JsonException is thrown parsing invalid DateTime, DateTimeOffset, and Guid #37807","State":"closed","Body":"While investigating #36901 with additional tests, I found that DateTime, DateTimeOffset, and Guid all unexpectedly throw InvalidOperationException when parsing `\"[]\"` or `\"{}\"`, instead of JsonException. This adds tests to ensure the correct behavior, and updates their implementations of JsonValueConverter to return false in those cases.\r\n\r\nThis also adds tests for every primitive with a JsonValueConverter to cover regressions down that path, covering #36901.","Url":"https://github.com/dotnet/corefx/pull/37809","RelatedDescription":"Closed or merged PR \"Ensure JsonException is thrown parsing invalid DateTime, DateTimeOffset, and Guid #37807\" (#37809)"},{"Id":"446260820","IsPullRequest":false,"CreatedAt":"2019-05-20T18:54:15","Actor":"Priya91","Number":"37815","RawContent":null,"Title":"Crypto error on linux solus","State":"open","Body":"Getting the following error when using HttpClient.GetAsync on Linux Solus:\r\n\r\nI have openssl 1.0.2r installed.\r\nRunning Solus, https://getsol.us\r\n\r\n```\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception. ---> System.TypeInitializationException: The type initializer for 'SslMethods' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Ssl' threw an exception. ---> System.TypeInitializationException: The type initializer for 'SslInitializer' threw an exception. ---> Interop+Crypto+OpenSslCryptographicException: error:25070067:DSO support routines:DSO_load:could not load the shared library\r\n   at Interop.SslInitializer..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.Ssl..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.Ssl.SslV2_3Method()\r\n   at Interop.Ssl.SslMethods..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Interop.OpenSsl.AllocateSslContext(SslProtocols protocols, SafeX509Handle certHandle, SafeEvpPKeyHandle certKeyHandle, EncryptionPolicy policy, SslAuthenticationOptions sslAuthenticationOptions)\r\n   at System.Net.Security.SafeDeleteSslContext..ctor(SafeFreeSslCredentials credential, SslAuthenticationOptions sslAuthenticationOptions)\r\n   at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, SslAuthenticationOptions sslAuthenticationOptions)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_0(SslClientAuthenticationOptions arg1, CancellationToken arg2, AsyncCallback callback, Object state)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2](Func`5 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state)\r\n   at System.Net.Security.SslStream.AuthenticateAsClientAsync(SslClientAuthenticationOptions sslClientAuthenticationOptions, CancellationToken cancellationToken)\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n```","Url":"https://github.com/dotnet/corefx/issues/37815","RelatedDescription":"Open issue \"Crypto error on linux solus\" (#37815)"},{"Id":"446252887","IsPullRequest":true,"CreatedAt":"2019-05-20T18:32:33","Actor":"dotnet-maestro-bot","Number":"37814","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04020-01, uwp62-27322-01, servicing-27617-02, rel-27421-00, rel-27421-00, respectively (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37814","RelatedDescription":"Open PR \"Update BuildTools, CoreClr, CoreFx, ProjectNTfs, ProjectNTfsTestILC to rc1-04020-01, uwp62-27322-01, servicing-27617-02, rel-27421-00, rel-27421-00, respectively (release/uwp6.2)\" (#37814)"},{"Id":"446215135","IsPullRequest":false,"CreatedAt":"2019-05-20T16:49:22","Actor":"buyaa-n","Number":"37808","RawContent":null,"Title":"Parsing invalid Enum value throwing NRE instead of corresponding JsonReaderException","State":"open","Body":"Parsing invalid Enum value throwing NRE, i am not sure what exception it should throw but pretty sure  NRE is not expected\r\n```csharp\r\n    [Flags]\r\n    public enum StoreColor\r\n    {\r\n        Black = 1,\r\n        Red = 2,\r\n        Yellow = 4,\r\n        White = 8,\r\n        DarkGoldenrod = 16\r\n    }\r\n    [Fact]\r\n    public static void InvalidValueNegativeStringNumber()\r\n    {\r\n        JsonReaderException ex = Assert.Throws<JsonReaderException>(() =>\r\n        {\r\n            JsonSerializer.Parse<StoreColor>(\"\\\"-1\\\"\");\r\n        });\r\n\r\n        Assert.Equal(\"Error message\", ex.Message);\r\n    }\r\n\r\n    [Fact]\r\n    public static void InvalidValueDash()\r\n    {\r\n        JsonReaderException ex = Assert.Throws<JsonReaderException>(() =>\r\n        {\r\n            JsonSerializer.Parse<StoreColor>(\"\\\"-\\\"\");\r\n        });\r\n\r\n        Assert.Equal(\"Error message.\", ex.Message);\r\n    }\r\n\r\n<message>\r\n<![CDATA[\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n]]>\r\n</message>\r\n<stack-trace>\r\n<![CDATA[\r\nat System.Text.Json.Serialization.Tests.EnumTests.InvalidValueDash() in D:\\dotnet\\corefx\\src\\System.Text.Json\\tests\\Serialization\\EnumTests.cs:line 516\r\n]]>\r\n</stack-trace>\r\n```","Url":"https://github.com/dotnet/corefx/issues/37808","RelatedDescription":"Open issue \"Parsing invalid Enum value throwing NRE instead of corresponding JsonReaderException\" (#37808)"},{"Id":"446143373","IsPullRequest":true,"CreatedAt":"2019-05-20T16:36:11","Actor":"dotnet-maestro[bot]","Number":"37804","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 2:08 PM\r\n- **Commit**: 2f630cd85d291fbace35b5d047c19504637322e5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19270.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37804","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#37804)"},{"Id":"446210192","IsPullRequest":false,"CreatedAt":"2019-05-20T16:36:02","Actor":"ViktorHofer","Number":"37806","RawContent":null,"Title":"System.Net.Tests.HttpListenerWebSocketTests.ReceiveAsync_ReadWholeBuffer_Success(messageType: Binary, endOfMessage: True) fails on CI","State":"open","Body":"`System.Net.Tests.HttpListenerWebSocketTests.ReceiveAsync_ReadWholeBuffer_Success(messageType: Binary, endOfMessage: True)` fails on `netcoreapp-OSX-Debug-x64-OSX.1012.Amd64.Open`: https://dev.azure.com/dnceng/public/_build/results?buildId=194209&view=ms.vss-test-web.build-test-results-tab&runId=4686970&resultId=484291\r\n\r\n```\r\nSystem.Net.WebSockets.WebSocketException : Unable to connect to the remote server\\n---- System.Net.Http.HttpRequestException : Connection refused\\n-------- System.Net.Sockets.SocketException : Connection refused\r\n\r\nat System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 230\r\n   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/ClientWebSocket.cs:line 152\r\n   at System.Net.Tests.HttpListenerWebSocketTests.GetWebSocketContext(String[] subProtocols) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.HttpListener/tests/HttpListenerWebSocketTests.cs:line 397\r\n   at System.Net.Tests.HttpListenerWebSocketTests.ReceiveAsync_ReadWholeBuffer_Success(WebSocketMessageType messageType, Boolean endOfMessage) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.HttpListener/tests/HttpListenerWebSocketTests.cs:line 98\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 84\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 758\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 610\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 758\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 650\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 758\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 316\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 758\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 508\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.WebSockets.Client/src/System/Net/WebSockets/WebSocketHandle.Managed.cs:line 171\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 65\r\n```\r\n\r\ncc @davidsh @wfurt ","Url":"https://github.com/dotnet/corefx/issues/37806","RelatedDescription":"Open issue \"System.Net.Tests.HttpListenerWebSocketTests.ReceiveAsync_ReadWholeBuffer_Success(messageType: Binary, endOfMessage: True) fails on CI\" (#37806)"},{"Id":"446195748","IsPullRequest":true,"CreatedAt":"2019-05-20T16:25:58","Actor":"ViktorHofer","Number":"37805","RawContent":null,"Title":"Fix testscope usage in yml and sh script","State":"closed","Body":"In the build.sh bash script, `testscope` was set to a switch instead of an option which causes outerloop osx and linux build definitions to fail.","Url":"https://github.com/dotnet/corefx/pull/37805","RelatedDescription":"Closed or merged PR \"Fix testscope usage in yml and sh script\" (#37805)"},{"Id":"446129398","IsPullRequest":false,"CreatedAt":"2019-05-20T13:50:26","Actor":"Bartolomeus-649","Number":"37803","RawContent":null,"Title":"Doc: Duplicate references to the same Interface: BufferBlock","State":"open","Body":"In the doc for [BufferBlock<T> Class](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.dataflow.bufferblock-1?view=netcore-2.2) the same interface is listed multiple times.\r\n> Implements\r\n> IDataflowBlock, IPropagatorBlock\\<T,T>, IReceivableSourceBlock\\<T>, \r\n> ISourceBlock\\<T>, ISourceBlock\\<TOutput>,      **// There is only one ISourceBlock interface**\r\n> ITargetBlock\\<T>, ITargetBlock\\<TInput>            **// There is only one ITargetBlock interface**\r\n\r\nEven though their declaration seem a bit different, they link to the same doc page.\r\n\r\nAlso, if you look in the namespace doc, the listed Intefaces are these:\r\n\r\n> ## Interfaces\r\n> Interface | Description\r\n> :-- | :--\r\n> IDataflowBlock | Represents a dataflow block.\r\n> IPropagatorBlock<TInput,TOutput> | Represents a dataflow block that is both a target for data and a source of data.\r\n> IReceivableSourceBlock<TOutput> | Represents a dataflow block that supports receiving messages without linking.\r\n> ISourceBlock<TOutput> | Represents a dataflow block that is a source of data.\r\n> ITargetBlock<TInput> | Represents a dataflow block that is a target for data.\r\n\r\nAt least [BatchBlock ](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.dataflow.batchblock-1?view=netcore-2.2)has the same problem as well.","Url":"https://github.com/dotnet/corefx/issues/37803","RelatedDescription":"Open issue \"Doc: Duplicate references to the same Interface: BufferBlock\" (#37803)"},{"Id":"446129000","IsPullRequest":false,"CreatedAt":"2019-05-20T13:49:41","Actor":"shutdown256","Number":"37802","RawContent":null,"Title":"PipeReader.CopyToAsync stuck in an endless loop","State":"open","Body":"There is a bug either in `PipeReader.CopyToAsyncCore()` or `ReadOnlySequence.TryGet()`: \r\n\r\nWhen `ReadOnlySequence.TryGet()` reaches final segment it will return true and this final memory but it will also set position as `default(SequencePosition)` - I don't know if this is by design but `CopyToAsyncCore()` method does not take it in consideration and it will copy the memory but not advance the reader - this will cause it to repeat this data indefinitely.\r\n\r\nI propose 2 solutions:\r\na) return `ReadOnlySequence.End` as position when returning final segment in `TryGet()`\r\nb) check if position is `.equal(default)` in `PipeReader.CopyToAsyncCore()` and if so, set `consumed = buffer.End` and break","Url":"https://github.com/dotnet/corefx/issues/37802","RelatedDescription":"Open issue \"PipeReader.CopyToAsync stuck in an endless loop\" (#37802)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"446359311","IsPullRequest":true,"CreatedAt":"2019-05-21T03:00:07","Actor":"dotnet-bot","Number":"35833","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35833","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#35833)"},{"Id":"446368765","IsPullRequest":true,"CreatedAt":"2019-05-21T00:49:08","Actor":"ivanbasov","Number":"35837","RawContent":null,"Title":"Set non-blocking mode per textView","State":"open","Body":"Since 16.1, the Editor support blocking/non-blocking mode per textView. This fixes a situation when users turned the _non-blocking_ option ON for TypeScript/F# and could never turned it OFF.\r\n\r\nThere still can happen mixed scenarios with TypeScript and C# in the same file. However, the right fix for them would be to send the value to the Editor not via the option but as a result.","Url":"https://github.com/dotnet/roslyn/pull/35837","RelatedDescription":"Open PR \"Set non-blocking mode per textView\" (#35837)"},{"Id":"446362956","IsPullRequest":false,"CreatedAt":"2019-05-21T00:17:36","Actor":"333fred","Number":"35836","RawContent":null,"Title":"Revisit speculative semantic handling of switch statements/expressions","State":"open","Body":"Because of the decision dag, it's complicated to get a checkpoint for switch expressions/statements if the speculative position is in the pattern section of the code. A simple example:\r\n\r\n```C#\r\nswitch (o)\r\n{\r\n    case object o1 when o != null: break;\r\n    /* Speculate here */ default: throw new Exception();\r\n}\r\n```\r\n\r\nCurrently, I'm taking state after the break, but we should revisit this to see whether this the behavior we want.","Url":"https://github.com/dotnet/roslyn/issues/35836","RelatedDescription":"Open issue \"Revisit speculative semantic handling of switch statements/expressions\" (#35836)"},{"Id":"446362188","IsPullRequest":false,"CreatedAt":"2019-05-21T00:13:58","Actor":"nguerrera","Number":"35835","RawContent":null,"Title":"Proposal: Allow secondary invocations of Csc task to inherit default options without repeating them","State":"open","Body":"Whenever someone else in the build needs to invoke Csc, they generally want most options to be inherited from the defaults while controlling others. \r\n\r\nExisting use cases for such secondary invocations of Csc, WPF xaml builds, razor, and satellite assembly generation. WPF has a completely different approach today where it generates a secondary project and builds it. This solves the repetition problem, but comes with a whole other set of problems around that temporary project. Other ways of invoking CoreCompile more than once are also cumbersome.\r\n\r\nThis is a proposal to allow passing the inherited set of options decided by Microsoft.CSharp.Core.targets plus some customization while only having to write the part that is customized, and not having to repeat the part that isn't.\r\n\r\nThe core idea is to have an additional argument to the Csc task that can represent all of the other arguments. Csc invocations will fall back to this representation of the arguments for any argument that is not otherwise passed.\r\n\r\n``` c#\r\nclass Csc : Microsoft.Build.Task {\r\n   // New argument that can capture all of the other arguments\r\n   public ITaskItem[] Arguments { get; set; }\r\n\r\n   // Existing arguments, when passed, take precedence over new argument above\r\n   ...\r\n}\r\n```\r\n\r\nThen a new target is responsible for stashing the arguments that would be passed to Csc:\r\n\r\n```xml\r\n<Target Name=\"PrepareCoreCompile\" Returns=\"@(CompilationArguments)\">\r\n  <!-- \r\n     Interprets the project properties and items as CoreCompile does today, but \r\n     instead of running Csc, produces @(CompilationArguments) that can be \r\n     passed to Csc later.\r\n   -->\r\n  ...\r\n</Target>   \r\n```\r\n\r\nThen the CoreCompile Csc invocation reduces to:\r\n\r\n``` xml\r\n<Target Name=\"CoreCompile\" DependsOnTargets=\"PrepareCoreCompile\">\r\n  <Csc Arguments=\"@(CompilationArguments)\" />\r\n</Target>\r\n```\r\n\r\nAnd custom Csc invocation could be:\r\n``` xml\r\n<Target Name=\"MyCustomCompile\" DependsOnTargets=\"PrepareCoreCompile\">\r\n   <Csc Arguments=\"@(CompilationArguments)\"\r\n            OutputAssembly=\"$(CustomOutputAssembly)\"\r\n            RefOnly=\"true\" \r\n           />\r\n</Target>\r\n```\r\n\r\nThis says compile as CoreCompile would, but change the output assembly to $(CustomOutputAssembly) and set RefOnly to true.","Url":"https://github.com/dotnet/roslyn/issues/35835","RelatedDescription":"Open issue \"Proposal: Allow secondary invocations of Csc task to inherit default options without repeating them\" (#35835)"},{"Id":"446361528","IsPullRequest":false,"CreatedAt":"2019-05-21T00:11:08","Actor":"AlekseyTs","Number":"35834","RawContent":null,"Title":"VB DIM: An attempt to use protected static method declared in an interface from code targeting desktop framework doesn't cause runtime capability error","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub MethodImplementation_27()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    protected static string M1()\r\n    {\r\n        return \"\"I1.M1\"\";\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\n    Shared Sub Main()\r\n        System.Console.WriteLine(I1.M1())\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.DesktopLatestExtended, references:={csCompiation})\r\n            comp1.AssertTheseDiagnostics(\r\n<error>\r\nBC30390: 'I1.Function M1() As String' is not accessible in this context because it is 'Protected'.\r\n        System.Console.WriteLine(I1.M1())\r\n                                 ~~~~~\r\n</error>)\r\n        End Sub\r\n```\r\n\r\nExpect to see an error similar to:\r\n```\r\nerror CS8707: Target runtime doesn't support 'protected', 'protected internal', or 'private protected' accessibility for a member of an interface.\r\n```\r\n\r\nObserved: Only accessibility error is reported which will go away once https://github.com/dotnet/roslyn/issues/35827 is fixed.","Url":"https://github.com/dotnet/roslyn/issues/35834","RelatedDescription":"Open issue \"VB DIM: An attempt to use protected static method declared in an interface from code targeting desktop framework doesn't cause runtime capability error\" (#35834)"},{"Id":"446358454","IsPullRequest":true,"CreatedAt":"2019-05-20T23:57:14","Actor":"RikkiGibson","Number":"35832","RawContent":null,"Title":"Allow nullable variance for in/out params when converting method group to delegate","State":"open","Body":"Resolves #32563\r\nResolves #32564","Url":"https://github.com/dotnet/roslyn/pull/35832","RelatedDescription":"Open PR \"Allow nullable variance for in/out params when converting method group to delegate\" (#35832)"},{"Id":"446356659","IsPullRequest":true,"CreatedAt":"2019-05-20T23:48:41","Actor":"dibarbet","Number":"35831","RawContent":null,"Title":"Modify get contained document to accept null id as input.","State":"open","Body":"Liveshare is broken for 16.1 P4 or greater clients because a null check was misplaced in a refactoring.\r\n\r\n[This method](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/VisualStudioSupportsFeatureService.cs#L57) returns null because liveshare uses their own workspace type.  This causes [TryGetContainedDocument ](https://github.com/dotnet/roslyn/blob/master/src/VisualStudio/Core/Def/Implementation/VisualStudioSupportsFeatureService.cs#L87)to throw an argument exception as the id is null.\r\n\r\nThe fix implementing here is to either modify all the call sites to skip this call when null or return null when passed in null to TryGetContainedDocument.  In all reference locations I could find, a null check is performed before the result of TryGetContainedDocument was used, so this seems safe (and it's already TryGet)\r\n\r\nTested in a liveshare session that a > 16.1p4 client can use preview code actions.","Url":"https://github.com/dotnet/roslyn/pull/35831","RelatedDescription":"Open PR \"Modify get contained document to accept null id as input.\" (#35831)"},{"Id":"446354866","IsPullRequest":true,"CreatedAt":"2019-05-20T23:40:51","Actor":"heejaechang","Number":"35830","RawContent":null,"Title":"added code lens resource file in vsix","State":"open","Body":"I forgot to add new resource file to vsix for new code lens dll.","Url":"https://github.com/dotnet/roslyn/pull/35830","RelatedDescription":"Open PR \"added code lens resource file in vsix\" (#35830)"},{"Id":"446281987","IsPullRequest":true,"CreatedAt":"2019-05-20T23:16:41","Actor":"RikkiGibson","Number":"35819","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\r\n\r\n``` bash\r\ngit fetch --all\r\ngit checkout merges/rigibson/master-to-master-vs-deps\r\ngit reset --hard upstream/master-vs-deps\r\ngit merge upstream/master\r\n# Fix merge conflicts\r\ngit commit\r\ngit push upstream merges/rigibson/master-to-master-vs-deps --force\r\n```","Url":"https://github.com/dotnet/roslyn/pull/35819","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35819)"},{"Id":"446330977","IsPullRequest":false,"CreatedAt":"2019-05-20T22:04:42","Actor":"AlekseyTs","Number":"35829","RawContent":null,"Title":"Non-virtual Private Protected members are not excluded from import by default","State":"open","Body":"Compare the errors reported for MethodImplementation_12 and MethodImplementation_15\r\n\r\n```\r\n        <Fact>\r\n        Public Sub MethodImplementation_12()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    internal static void M1()\r\n    {\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Shared Sub Main()\r\n        I1.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            comp1.AssertTheseDiagnostics(\r\n<error>\r\nBC30456: 'M1' is not a member of 'I1'.\r\n        I1.M1()\r\n        ~~~~~\r\n</error>)\r\n\r\n            Dim comp2 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation}, options:=TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All))\r\n            comp2.AssertTheseDiagnostics(\r\n<error>\r\nBC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Friend'.\r\n        I1.M1()\r\n        ~~~~~\r\n</error>)\r\n        End Sub\r\n\r\n        <Fact>\r\n        Public Sub MethodImplementation_15()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    private protected static void M1()\r\n    {\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\n    Shared Sub Main()\r\n        I1.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            comp1.AssertTheseDiagnostics(\r\n<error>\r\nBC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.\r\n        I1.M1()\r\n        ~~~~~\r\n</error>)\r\n            Dim comp2 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation}, options:=TestOptions.DebugDll.WithMetadataImportOptions(MetadataImportOptions.All))\r\n            comp2.AssertTheseDiagnostics(\r\n<error>\r\nBC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.\r\n        I1.M1()\r\n        ~~~~~\r\n</error>)\r\n        End Sub\r\n```\r\n\r\nNote that with default MetadataImportOptions MethodImplementation_12 reports the following error:\r\n```\r\nBC30456: 'M1' is not a member of 'I1'.\r\n        I1.M1()\r\n        ~~~~~\r\n```\r\nThis indicates that the method was not imported.\r\n\r\nUnder the same conditions MethodImplementation_15 reports: \r\n```\r\nBC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Private Protected'.\r\n        I1.M1()\r\n        ~~~~~\r\n```\r\nThis indicates that the method was imported.\r\n\r\nExpected:\r\nThe method shouldn't be imported because it cannot be accessible outside of the assembly.  \r\n\r\nThe issue is not specific to VB or to DIM feature.","Url":"https://github.com/dotnet/roslyn/issues/35829","RelatedDescription":"Open issue \"Non-virtual Private Protected members are not excluded from import by default\" (#35829)"},{"Id":"446318797","IsPullRequest":true,"CreatedAt":"2019-05-20T21:28:05","Actor":"CyrusNajmabadi","Number":"35828","RawContent":null,"Title":"Add helper to simplify a common parsing pattern.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35828","RelatedDescription":"Open PR \"Add helper to simplify a common parsing pattern.\" (#35828)"},{"Id":"446314003","IsPullRequest":false,"CreatedAt":"2019-05-20T21:15:57","Actor":"AlekseyTs","Number":"35827","RawContent":null,"Title":"VB DIM: Unexpected accessibility error while trying to access protected static method declared in an interface","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub MethodImplementation_13()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    protected static void M1()\r\n    {\r\n        System.Console.WriteLine(\"\"I1.M1\"\");\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\n    Shared Sub Main()\r\n        I1.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, \"I1.M1\", Nothing), verify:=VerifyOnMonoOrCoreClr)\r\n        End Sub\r\n```\r\n\r\nObserved:\r\n```\r\nc.vb(4) : error BC30390: 'I1.Sub M1()' is not accessible in this context because it is 'Protected'.\r\n```\r\n\r\nConsuming public static methods works","Url":"https://github.com/dotnet/roslyn/issues/35827","RelatedDescription":"Open issue \"VB DIM: Unexpected accessibility error while trying to access protected static method declared in an interface\" (#35827)"},{"Id":"446307501","IsPullRequest":true,"CreatedAt":"2019-05-20T20:58:40","Actor":"fayrose","Number":"35826","RawContent":null,"Title":"Parsing for Parameter Nullchecking","State":"open","Body":"Contains parsing for general case, lambda case and lambda case with multiple parameters, as well as initial test cases.","Url":"https://github.com/dotnet/roslyn/pull/35826","RelatedDescription":"Open PR \"Parsing for Parameter Nullchecking\" (#35826)"},{"Id":"446305010","IsPullRequest":true,"CreatedAt":"2019-05-20T20:52:08","Actor":"YairHalberstadt","Number":"35825","RawContent":null,"Title":"don't suggest this in a static local function alternative","State":"open","Body":"This is the alternative option suggested in #35822, shown here for comparison.","Url":"https://github.com/dotnet/roslyn/pull/35825","RelatedDescription":"Open PR \"don't suggest this in a static local function alternative\" (#35825)"},{"Id":"446296692","IsPullRequest":false,"CreatedAt":"2019-05-20T20:30:22","Actor":"AlekseyTs","Number":"35824","RawContent":null,"Title":"VB DIM: No error is reported for an attempt to implement an inaccessible interface method","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub MethodImplementation_07()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    internal void M1();\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\n\r\n    Sub M1() Implements I1.M1\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            comp1.AssertTheseDiagnostics(\r\n<errors>\r\n</errors>\r\n            )\r\n        End Sub\r\n```\r\n\r\nObserved: No error is reported\r\n\r\nExpected: An error saying something like: \"'I1.M1' is inaccessible due to its protection level\"","Url":"https://github.com/dotnet/roslyn/issues/35824","RelatedDescription":"Open issue \"VB DIM: No error is reported for an attempt to implement an inaccessible interface method\" (#35824)"},{"Id":"446293159","IsPullRequest":false,"CreatedAt":"2019-05-20T20:22:02","Actor":"AlekseyTs","Number":"35823","RawContent":null,"Title":"VB DIM: Class is required to implement a method representing a re-abstraction of an interface method from base interface","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub MethodImplementation_06()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    void M1();\r\n}\r\n\r\npublic interface I2 : I1\r\n{\r\n    abstract void I1.M1();\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I2\r\n\r\n    Sub M1() Implements I1.M1\r\n        System.Console.WriteLine(\"C.M1\")\r\n    End Sub\r\n\r\n    Shared Sub Main()\r\n        Dim i1 As I1 = new C()\r\n        i1.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, \"C.M1\", Nothing), verify:=VerifyOnMonoOrCoreClr)\r\n        End Sub\r\n```\r\n\r\nObserved:\r\n```\r\nc.vb(2) : error BC30149: Class 'C' must implement 'Sub I1.M1()' for interface 'I2'.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35823","RelatedDescription":"Open issue \"VB DIM: Class is required to implement a method representing a re-abstraction of an interface method from base interface\" (#35823)"},{"Id":"446290703","IsPullRequest":true,"CreatedAt":"2019-05-20T20:16:43","Actor":"YairHalberstadt","Number":"35822","RawContent":null,"Title":"Dont suggest this in static local functions","State":"open","Body":"See #35644, #27719\r\n\r\n### The Problem\r\n\r\nCurrently `Symbol.IsStatic` is not very well defined. The compiler assumes it means any/all of the following:\r\n\r\n1. A type is marked static,\r\n2. A member is marked static,\r\n3. A member does not require an instance receiver (with the exception of a non-static constructor - I will need to investigate more there)\r\n4. A member cannot capture `this`\r\n5. For some reason a namespace is considered static, but an assembly is not 🤷\r\n\r\nIn general this has worked till now because these definitions have mostly coincided, and when they haven't it has usually been in an understandable way (eg. constants are static even though they are not marked static).\r\n\r\nUnfortunately Local Functions break that:\r\n\r\nStatic local functions are marked static, cannot capture this, and do not require an instance receiver.\r\n\r\nNon-Static local functions are not marked static, can capture this, but do not require an instance receiver.\r\n\r\nCurrently all local functions are marked static, in order to make the compiler work with the fact that they do not require an instance receiver. This causes two problems:\r\n\r\n1. It is non-intuitive that a non-static local functions IsStatic returns true. Since this is a public API, that's a problem.\r\n\r\n2. We need an API to tell us if a local function is static or not. Indeed the ultimate purpose of this PR is to prevent `this` being suggested in local functions, which depends on such an API.\r\n\r\n### Solutions\r\n\r\nWe need to decide what IsStatic means:\r\n\r\n#### Option 1.\r\n\r\nMake non-static local functions IsStatic return false. Replace all usages of IsStatic where we are checking to see if a member Requires an instance receiver with a new property, RequiresInstanceReciever. This property can be internal, since it is only really of interest to the compiler.\r\n\r\n**advantages**\r\nIsStatic now matches our intuition much better.\r\nWe've now increased the explicitness of the compiler. Rather than mashing up lots of different concepts into one, we've begun seperating them out into different concepts.\r\n\r\n**disadvantages**\r\nThis is risky. RequiresInstanceReciever now behaves exactly like IsStatic used to, but IsStatic behaves slightly differently. If we forget to replace all relevant usages of IsStatic with RequiresInstanceReciever, we may introduce subtle bugs that only occur with non-static local functions.\r\n\r\n#### Option 2.\r\n\r\nWe currently have a temporary internal API `IsStaticLocalfunction`. Make this public and move it to IMethodSymbol. Document what IsStatic means.\r\n\r\n**advantages**\r\nVery low risk. Simple to do.\r\n\r\n**disadvantages**\r\nIsStatic now doesn't match our intuitions.\r\nRather than solving the problem, we've worked around it. We've just increased the technical debt of the codebase, rather than decreasing it.\r\n\r\n\r\n### Approach taken here\r\n\r\nThe ideal solution is obviously the first, which is what I've done, so that the risk can be properly evaluated. I've created a pr for the second solution at #35825 so they can be compared.\r\n\r\nChanging a call from `IsStatic` to `RequiresInstanceReciever` is always safe, since the latter behaves like the former used to.\r\n\r\nLeaving a call as a call to `IsStatic` is dangerous, as `IsStatic` now has different behaviour.\r\n\r\nFor fields/events/properties `IsStatic` and `RequiresInstanceReciever` are synonyms.\r\n\r\nI've gone through every usage of `IsStatic` in the compiler code (not tests/workspaces/IDE) and if it appears to be about receivers, and is not explicitly talking about a field property or event, I have replaced it with a call to `RequiresInstanceReciever`.\r\n\r\nThis requires changing 27 files.\r\n\r\nDepending on the opinion of the roslyn team, I am happy to either take the alternative solution, do more work here, or drop this altogether.\r\n","Url":"https://github.com/dotnet/roslyn/pull/35822","RelatedDescription":"Open PR \"Dont suggest this in static local functions\" (#35822)"},{"Id":"446285656","IsPullRequest":false,"CreatedAt":"2019-05-20T20:03:58","Actor":"AlekseyTs","Number":"35821","RawContent":null,"Title":"VB DIM: Class cannot implement a virtual interface method","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub MethodImplementation_02()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    void M1() \r\n    {\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\n\r\n    Sub M1() Implements I1.M1\r\n        System.Console.WriteLine(\"C.M1\")\r\n    End Sub\r\n\r\n    Shared Sub Main()\r\n        Dim i1 As I1 = new C()\r\n        i1.M1()\r\n    End Sub\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, options:=TestOptions.DebugExe, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            CompileAndVerify(comp1, expectedOutput:=If(ExecutionConditionUtil.IsMonoOrCoreClr, \"C.M1\", Nothing), verify:=VerifyOnMonoOrCoreClr)\r\n        End Sub\r\n```\r\n\r\nObserved:\r\n```\r\nc.vb(4) : error BC30401: 'M1' cannot implement 'M1' because there is no matching sub on interface 'I1'.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35821","RelatedDescription":"Open issue \"VB DIM: Class cannot implement a virtual interface method\" (#35821)"},{"Id":"446284004","IsPullRequest":false,"CreatedAt":"2019-05-20T19:59:20","Actor":"AlekseyTs","Number":"35820","RawContent":null,"Title":"VB DIM: Class is not required to implement a virtual interface method","State":"open","Body":"\r\n```\r\n        <Fact>\r\n        Public Sub MethodImplementation_01()\r\n\r\n            Dim csSource =\r\n\"\r\npublic interface I1\r\n{\r\n    void M1() \r\n    {\r\n    }\r\n}\r\n\"\r\n            Dim csCompiation = GetCSharpCompiation(csSource).EmitToImageReference()\r\n\r\n            Dim source1 =\r\n<compilation>\r\n    <file name=\"c.vb\"><![CDATA[\r\nPublic Class C\r\n    Implements I1\r\nEnd Class\r\n]]></file>\r\n</compilation>\r\n\r\n            Dim comp1 = CreateCompilation(source1, targetFramework:=TargetFramework.NetStandardLatest, references:={csCompiation})\r\n            comp1.AssertTheseDiagnostics(\r\n<errors>\r\nBC30149: Class 'C' must implement 'Sub M1()' for interface 'I1'.\r\n    Implements I1\r\n               ~~\r\n</errors>\r\n            )\r\n        End Sub\r\n```\r\n\r\nObserved: The expected error is not reported","Url":"https://github.com/dotnet/roslyn/issues/35820","RelatedDescription":"Open issue \"VB DIM: Class is not required to implement a virtual interface method\" (#35820)"},{"Id":"446262694","IsPullRequest":false,"CreatedAt":"2019-05-20T18:59:20","Actor":"heejaechang","Number":"35818","RawContent":null,"Title":"IOperation SetParent exception","State":"open","Body":"```\r\n[30176]    at Microsoft.CodeAnalysis.Operation.SetParentOperation(IOperation parent) in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs:line 142\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operation.SetParentOperation[T](T operation, IOperation parent) in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\Operation.cs:line 163\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.ArgumentOperation..ctor(IOperation value, ArgumentKind argumentKind, IParameterSymbol parameter, IConvertibleConversion inConversionOpt, IConvertibleConversion outConversionOpt, SemanticModel semanticModel, SyntaxNode syntax, Boolean isImplicit) in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\OperationNodes.cs:line 306\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.CreateArgumentOperation(ArgumentKind kind, IParameterSymbol parameter, BoundExpression expression) in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory_Methods.cs:line 62\r\n\r\n[30176]    at Microsoft.CodeAnalysis.CSharp.LocalRewriter.MakeArgumentsInEvaluationOrder(CSharpOperationFactory operationFactory, Binder binder, SyntaxNode syntax, ImmutableArray`1 arguments, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, Boolean expanded, ImmutableArray`1 argsToParamsOpt, Boolean invokedAsExtensionMethod) in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Lowering\\LocalRewriter\\LocalRewriter_Call.cs:line 599\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode boundNode, Binder binder, Symbol methodOrIndexer, MethodSymbol optionalParametersMethod, ImmutableArray`1 boundArguments, ImmutableArray`1 argumentNamesOpt, ImmutableArray`1 argumentsToParametersOpt, ImmutableArray`1 argumentRefKindsOpt, ImmutableArray`1 parameters, Boolean expanded, SyntaxNode invocationSyntax, Boolean invokedAsExtensionMethod) in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory_Methods.cs:line 337\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.CSharpOperationFactory.DeriveArguments(BoundNode containingExpression) in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationFactory_Methods.cs:line 280\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.CSharpLazyInvocationOperation.CreateArguments() in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Operations\\CSharpOperationNodes.cs:line 799\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.LazyInvocationOperation.get_Arguments() in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\OperationNodes.cs:line 3889\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.<get_Children>d__8.MoveNext() in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\OperationNodes.cs:line 3805\r\n\r\n[30176]    at Microsoft.CodeAnalysis.Operations.OperationExtensions.<Descendants>d__3.MoveNext() in D:\\dd\\roslyn6\\src\\Compilers\\Core\\Portable\\Operations\\OperationExtensions.cs:line 85\r\n\r\n[30176]    at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)\r\n\r\n[30176]    at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetOperationWorker(CSharpSyntaxNode node, CancellationToken cancellationToken) in D:\\dd\\roslyn6\\src\\Compilers\\CSharp\\Portable\\Compilation\\MemberSemanticModel.cs:line 1060\r\n\r\n```\r\n\r\nrepro step.\r\nfirst clone this repo - https://github.com/nopSolutions/nopCommerce\r\n\r\nwill update once I find actual file.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35818","RelatedDescription":"Open issue \"IOperation SetParent exception\" (#35818)"},{"Id":"446260860","IsPullRequest":false,"CreatedAt":"2019-05-20T18:54:22","Actor":"stephentoub","Number":"35817","RawContent":null,"Title":"Nullable warnings for contravariant interface implementations","State":"open","Body":"**Version Used**: \r\n3.2.0-beta1-19266-05+04c76c9d58c7911e2fd199da145cd97bbf283438\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\nclass Program : IFoo\r\n{\r\n    static void Main() { }\r\n\r\n    public bool MyEquals(object? o) => true;\r\n}\r\n\r\ninterface IFoo\r\n{\r\n    bool MyEquals(object o);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nCompiles without warning.\r\n\r\n**Actual Behavior**:\r\n```\r\nwarning CS8614: Nullability of reference types in type of parameter 'o' doesn't match implicitly implemented member 'bool IFoo.MyEquals(object o)'.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35817","RelatedDescription":"Open issue \"Nullable warnings for contravariant interface implementations\" (#35817)"},{"Id":"446255124","IsPullRequest":false,"CreatedAt":"2019-05-20T18:38:29","Actor":"jaredpar","Number":"35816","RawContent":null,"Title":"Nullable Reference Type Changes","State":"open","Body":"Reacting to the [C# LDM](https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md) changes to nullable reference types\r\n\r\n- 6/10\r\n    - Support for `nonnull` constraint @AlekseyTs \r\n    - Support for `AllowNull`, `DisallowNull`, `NotNull`, `MaybeNull`, `NotNullWhen(bool)`, `MaybeNullWhen(bool)` @jcouv @cston \r\n    - Support for older attributes is deleted @jcouv @cston \r\n    - Use of `where T: object` is a warning\r\n- 7/10\r\n    - Equality support \r\n    - Use of `where T: object` is an error\r\n    - Support for `Interlocked.CompareExchange` \r\n- RTW\r\n    - Support for `DoesNotReturn`, `DoesNotReturnIf(bool)`, `NotNullIfNotNull(string)`\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35816","RelatedDescription":"Open issue \"Nullable Reference Type Changes\" (#35816)"},{"Id":"446250126","IsPullRequest":false,"CreatedAt":"2019-05-20T18:24:46","Actor":"gafter","Number":"35815","RawContent":null,"Title":"Missing warning with default expression converted to tuple","State":"open","Body":"The following program throws a `NullReferenceException` but there are no diagnostics at compile-time.\r\n\r\n``` c#\r\n#nullable enable\r\n\r\nnamespace ConsoleApp6\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            M(default);\r\n        }\r\n\r\n        static void M((string, int) p)\r\n        {\r\n            p.Item1.ToString();\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35815","RelatedDescription":"Open issue \"Missing warning with default expression converted to tuple\" (#35815)"},{"Id":"446247327","IsPullRequest":true,"CreatedAt":"2019-05-20T18:17:01","Actor":"sharwell","Number":"35814","RawContent":null,"Title":"Remove the use of asynchronous APIs in analyzer","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35814","RelatedDescription":"Open PR \"Remove the use of asynchronous APIs in analyzer\" (#35814)"},{"Id":"446236004","IsPullRequest":false,"CreatedAt":"2019-05-20T17:46:42","Actor":"mavasani","Number":"35813","RawContent":null,"Title":"ExceptionUtilities.UnexpectedValue in VisualBasicOperationFactory for BoundKind.TypeArguments","State":"open","Body":"1. Build `\\src\\Tools\\AnalyzerRunner\\AnalyzerRunner.csproj` (you might have to manually apply the work around in https://github.com/dotnet/roslyn/issues/35812 before building)\r\n2. cd `$(RepoRoot)\\artifacts\\bin\\AnalyzerRunner\\Release\\net472`\r\n3. Execute `AnalyzerRunner.exe . $(RepoRoot)\\Compilers.sln /concurrent`\r\n\r\nException thrown in VisualBasicOperationFactory [here](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Operations/VisualBasicOperationFactory.vb,348) for unhandled [BoundKind.TypeArguments](http://source.roslyn.io/#Microsoft.CodeAnalysis.VisualBasic/Generated/BoundNodes.xml.Generated.vb,80d4f4d60add9bd5,references)\r\n\r\n```\r\n \tMicrosoft.CodeAnalysis.dll!Roslyn.Utilities.ExceptionUtilities.UnexpectedValue(object o) Line 18\tC#\r\n>\tMicrosoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.CreateInternal(Microsoft.CodeAnalysis.VisualBasic.BoundNode boundNode) Line 348\tBasic\r\n \tmscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary<Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation>.GetOrAdd(Microsoft.CodeAnalysis.VisualBasic.BoundNode key, System.Func<Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation> valueFactory)\tUnknown\r\n \tMicrosoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.Create(Microsoft.CodeAnalysis.VisualBasic.BoundNode boundNode) Line 84\tBasic\r\n \tMicrosoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicOperationFactory.CreateFromArray(Of Microsoft.CodeAnalysis.VisualBasic.BoundNode, Microsoft.CodeAnalysis.IOperation)(System.Collections.Immutable.ImmutableArray(Of Microsoft.CodeAnalysis.VisualBasic.BoundNode) nodeArray) Line 90\tBasic\r\n \tMicrosoft.CodeAnalysis.VisualBasic.dll!Microsoft.CodeAnalysis.Operations.VisualBasicLazyInvalidOperation.CreateChildren() Line 536\tBasic\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.LazyInvalidOperation.Children.get() Line 3768\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Operations.OperationExtensions.Descendants(Microsoft.CodeAnalysis.IOperation operation, bool includeSelf) Line 99\tC#\r\n \tSystem.Collections.Immutable.dll!System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation>.Builder.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation> items)\tUnknown\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.IOperation>.AddRange(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.IOperation> items) Line 471\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.GetOperationsToAnalyze(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> operationBlocks) Line 2176\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.TryExecuteDeclaringReferenceActions.__getOperationsToAnalyzeWithStackGuard|4(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.IOperation> operationBlocksToAnalyze) Line 1949\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.TryExecuteDeclaringReferenceActions.__executeExecutableCodeActions|3() Line 1928\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.SyntaxReference decl, int declarationIndex, Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.GroupedAnalyzerActions additionalPerSymbolActions, bool shouldExecuteSyntaxNodeActions, bool shouldExecuteOperationActions, bool shouldExecuteCodeBlockActions, bool shouldExecuteOperationBlockActions, bool isInGeneratedCode, System.Threading.CancellationToken cancellationToken) Line 1851\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver<Microsoft.CodeAnalysis.VisualBasic.SyntaxKind>.TryExecuteDeclaringReferenceActions(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool isGeneratedCodeSymbol, Microsoft.CodeAnalysis.Diagnostics.AnalyzerActions additionalPerSymbolActionsOpt, System.Threading.CancellationToken cancellationToken) Line 1739\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(Microsoft.CodeAnalysis.Diagnostics.SymbolDeclaredCompilationEvent symbolEvent, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1060\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 1001\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(Microsoft.CodeAnalysis.Diagnostics.CompilationEvent e, Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, System.Threading.CancellationToken cancellationToken) Line 935\tC#\r\n \tMicrosoft.CodeAnalysis.dll!Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(Microsoft.CodeAnalysis.Diagnostics.AnalysisScope analysisScope, Microsoft.CodeAnalysis.Diagnostics.AnalysisState analysisStateOpt, bool prePopulatedEventQueue, System.Threading.CancellationToken cancellationToken) Line 922\tC#\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35813","RelatedDescription":"Open issue \"ExceptionUtilities.UnexpectedValue in VisualBasicOperationFactory for BoundKind.TypeArguments\" (#35813)"},{"Id":"446234899","IsPullRequest":false,"CreatedAt":"2019-05-20T17:43:30","Actor":"mavasani","Number":"35812","RawContent":null,"Title":"AnalyzerRunner throws exceptions at MSBuildWorkspace.Create","State":"open","Body":"**Version Used**: \r\nVS2019 16.2 latest preview dogfood build\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Build `$(RepoRoot)\\src\\Tools\\AnalyzerRunner\\AnalyzerRunner.csproj` in Release mode\r\n2. cd `$(RepoRoot)\\artifacts\\bin\\AnalyzerRunner\\Release\\net472`\r\n3. Execute `AnalyzerRunner.exe . $(RepoRoot)\\Compilers.sln /concurrent`\r\n\r\n**Expected Behavior**:\r\nAnalyzerRunner executes fine\r\n\r\n**Actual Behavior**:\r\nAnalyzerRunner fails with exceptions trying to find MSBuild dependencies. If I manually edit AnalyzerRunner.csproj to replace `$(MicrosoftBuildLocatorVersion)` with `1.1.2` then it works fine. It seems current version of MSBuildLocator (1.0.3) doesn't work on latest VS2019 builds.","Url":"https://github.com/dotnet/roslyn/issues/35812","RelatedDescription":"Open issue \"AnalyzerRunner throws exceptions at MSBuildWorkspace.Create\" (#35812)"},{"Id":"446232496","IsPullRequest":false,"CreatedAt":"2019-05-20T17:36:38","Actor":"dsteketee","Number":"35811","RawContent":null,"Title":"Automated Code Snippets","State":"open","Body":"Rather than creating code snippets, Visual Studio should be able to prescribe sensible methods to get from Object A to Object B. For example, I have an object, but it's not the right type to send to a particular method. I usually end up googling for samples and they're pretty easy to find, but I suspect some clever tidbits built into the IDE could improve on this approach. There are lots of other common things I encounter regularly like when creating an object with a nullable integer value, there are pretty standard ways to handle that in the code so you don't end up with exceptions. Think of all the time saved if the IDE were smart enough to help developers avoid null reference exception errors by proposing well written code. ","Url":"https://github.com/dotnet/roslyn/issues/35811","RelatedDescription":"Open issue \"Automated Code Snippets\" (#35811)"},{"Id":"446220600","IsPullRequest":true,"CreatedAt":"2019-05-20T17:03:39","Actor":"sharwell","Number":"35810","RawContent":null,"Title":"Remove unnecessary uses of IInProcessAnalyzer","State":"open","Body":"* Remove unnecessary uses of IInProcessAnalyzer\r\n* Ban the ongoing use of IInProcessAnalyzer \r\n\r\n    RenameTrackingDiagnosticAnalyzer is the only remaining in-process analyzer, which is tracked by #35808. Use of IInProcessAnalyzer in new locations is not allowed.","Url":"https://github.com/dotnet/roslyn/pull/35810","RelatedDescription":"Open PR \"Remove unnecessary uses of IInProcessAnalyzer\" (#35810)"},{"Id":"446197356","IsPullRequest":false,"CreatedAt":"2019-05-20T16:05:15","Actor":"ltcmelo","Number":"35809","RawContent":null,"Title":"Consider renaming `ForEachVariableStatementSyntax`","State":"open","Body":"I just spent a few extra minutes debugging an issue which, ultimately, was caused by a lapse of mine: I never noticed such AST node `ForEachVariableStatementSyntax`.\r\n\r\nI **think** that I understand the reason for the existence of \"another foreach\" node, given that `ForEachStatementSyntax` already has an identifier for the *singly* declared variable. Yet, I still wonder why not just creating an additional child node ...?\r\n\r\nIn the worst case, I'd suggest renaming `ForEachVariableStatementSyntax` to `ComplexForEachStatementSyntax` or something in the like. The current name is not very distinguishing and also misleading (i.e., i'd imply that the original `ForEachStatementSyntax` doesn't declare a variable).\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35809","RelatedDescription":"Open issue \"Consider renaming `ForEachVariableStatementSyntax`\" (#35809)"},{"Id":"446171113","IsPullRequest":false,"CreatedAt":"2019-05-20T15:10:57","Actor":"sharwell","Number":"35808","RawContent":null,"Title":"Update RenameTrackingDiagnosticAnalyzer to run out-of-process","State":"open","Body":"Currently `RenameTrackingDiagnosticAnalyzer` depends on data stored on `ITextBuffer` instances which is not not available out-of-process. This analyzer will cease to work in its current form when the analyzer infrastructure is moved out-of-process. The analyzer should be updated to remove the in-process dependency, or the analyzer for this feature should be replaced with an alternative implementation that does not rely on analyzers.","Url":"https://github.com/dotnet/roslyn/issues/35808","RelatedDescription":"Open issue \"Update RenameTrackingDiagnosticAnalyzer to run out-of-process\" (#35808)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"446251764","IsPullRequest":true,"CreatedAt":"2019-05-20T18:29:13","Actor":"Dotnet-GitSync-Bot","Number":"7438","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AArnott","Url":"https://github.com/dotnet/corert/pull/7438","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7438)"},{"Id":"446206809","IsPullRequest":true,"CreatedAt":"2019-05-20T16:27:32","Actor":"trylek","Number":"7437","RawContent":null,"Title":"Initial script changes to enable CPAOT on Linux","State":"open","Body":"This is a small set of script changes I made to enable\r\nCPAOT build on Linux. I have basically added the new\r\noption to runtest.sh and fixed a few trivial issues\r\nI hit in my local testing. I haven't yet figured out\r\nhow to cleanly pull down the CoreClrRuntime folder,\r\nfor now I'm copying it over manually from a live CoreCLR\r\nbuild on my DTL VM.\r\n\r\nWith these changes (and after manually copying the Core_Root\r\nfolder from CoreCLR to bin/obj/Linux.x64.Debug/CoreClrRuntme)\r\nI'm able to build the ReadyToRunUnit test. Sadly it doesn't\r\nrun yet, corerun claims that \"coreclr_initialize failed:\r\n0x80070057\"; I have however found out that I'm receiving\r\nexactly the same error when trying to run the same test\r\ncompiled with Crossgen so I guess it's rather a problem\r\nwith my local enlistment and / or build. I'm looking into\r\nthis right now.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7437","RelatedDescription":"Open PR \"Initial script changes to enable CPAOT on Linux\" (#7437)"},{"Id":"445072772","IsPullRequest":true,"CreatedAt":"2019-05-20T07:44:09","Actor":"trylek","Number":"7428","RawContent":null,"Title":"CPAOT support for large version bubble, take #2","State":"closed","Body":"As I haven't found out how to reopen my original PR after reverting it, I have prepared a new one. In the first commit I have pushed the original change rebased to the preparatory change moving CanInline\r\nto CompilationModuleGroup. In the second commit I added logic for clean separation of input assembly set from the version bubble assembly set.\r\n\r\nEarlier in CPAOT development, we used to use CompilationModuleGroup.ContainsType / ContainsMethodBody for checking whether a given typesystem element belongs to either of these sets. To facilitate the separation I have added two new methods on CompilationModuleGroup, VersionsWithType and VersionsWithMethodBody. I audited all calls to ContainsMethodBody & ContainsType in the CPAOT codebase and I modified those querying the version bubble to call VersionsWithType/MethodBody instead.\r\n\r\nThanks\r\n\r\nTomas\r\n","Url":"https://github.com/dotnet/corert/pull/7428","RelatedDescription":"Closed or merged PR \"CPAOT support for large version bubble, take #2\" (#7428)"},{"Id":"445756425","IsPullRequest":true,"CreatedAt":"2019-05-18T21:35:30","Actor":"trylek","Number":"7436","RawContent":null,"Title":"SuperIlc fixes for building the entire Pri#1 suite","State":"open","Body":"After adding support for the issues.targets file I became\r\nable to run the entire Pri# 1 test suite using SuperIlc.\r\nThis change fixes issues uncovered by this more extensive\r\ntesting.\r\n\r\n1) We need to slightly special-case the Core_Root folder\r\nas it technically lies under the CoreCLR\\bin\\tests\\(cfg)\r\nfolder; when building this entire folder, SuperIlc used to\r\npick it up as one of the folders to compile and was\r\nsubsequently racing between the build of this folder and\r\nof the tests that refer to it in CPAOT framework mode.\r\n\r\n2) BuildFolder construction was collecting test references\r\ntoo early i.e. before the framework was built. I came to\r\nthe conclusion that this is a general problem stemming from\r\nthe fact that ProcessInfo was an arbitrary mixture of the\r\nprocess parameters and the state machine used during the\r\nactual build. I have cleaned this up by separating the\r\nparameter file into a new class ProcessParameters; this let\r\nme add logic for constructing the actual paramterers later.\r\n\r\n3) I have added new options to specify explicit compilation\r\nand execution timeouts to add at least minimum support for\r\nlong-building and long-running tests.\r\n\r\n4) I have parallelized folder deletion and subtree lookup\r\nto improve their performance.\r\n\r\n5) I have added caching to the check for managed assemblies.\r\nPreviously, in the Pri# 1 tests we used to open framework\r\nassemblies about 3 million times just for the purpose of\r\nthis lookup.\r\n\r\n6) I have reduced the batch size for running ETW processes\r\nfrom 100 to 10 as the larger number of events collected\r\nwithin a single session was apparently slowing down test\r\nexecution.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7436","RelatedDescription":"Open PR \"SuperIlc fixes for building the entire Pri#1 suite\" (#7436)"},{"Id":"445661755","IsPullRequest":true,"CreatedAt":"2019-05-18T05:14:47","Actor":"Dotnet-GitSync-Bot","Number":"7435","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7435","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7435)"},{"Id":"445624997","IsPullRequest":true,"CreatedAt":"2019-05-18T00:48:06","Actor":"Dotnet-GitSync-Bot","Number":"7433","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7433","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7433)"},{"Id":"445642704","IsPullRequest":true,"CreatedAt":"2019-05-17T22:43:30","Actor":"Suchiman","Number":"7434","RawContent":null,"Title":"Port GC changes from coreclr - 9","State":"open","Body":"This port continues https://github.com/dotnet/corert/pull/7416\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab):**\r\n- https://github.com/dotnet/coreclr/commit/7eb6865565fbd3c45ca58e398a72750fa43c432e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/59f2a57563b7488779a9b93220a9dfe5c6a45700 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bdf219c364e15cae908f9c87446ff4ae26a9fe1e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/55ce686a6092cf38458d2dce6da18aef8eab7c43 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bed0a5e263324d3e035a2140c24cc70f1e143d93 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/fa01b864246bb588e5088be36dbfe3af833b266f (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8acf6c9f7e33b1bfe77205cd2e61f2c60e8c00ce (manual port)\r\n- https://github.com/dotnet/coreclr/commit/1eea080a7b3a13110975b92034a22e4fc473df46 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/9f38303221294f45740feefc1b6ddf72347ff882 (gc only port)\r\n","Url":"https://github.com/dotnet/corert/pull/7434","RelatedDescription":"Open PR \"Port GC changes from coreclr - 9\" (#7434)"},{"Id":"445569920","IsPullRequest":true,"CreatedAt":"2019-05-17T22:23:58","Actor":"jkotas","Number":"7432","RawContent":null,"Title":"Mark CustomAttributeNamedArgument and CustomAttributeTypedArgument as readonly","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7432","RelatedDescription":"Closed or merged PR \"Mark CustomAttributeNamedArgument and CustomAttributeTypedArgument as readonly\" (#7432)"},{"Id":"445509182","IsPullRequest":true,"CreatedAt":"2019-05-17T18:08:27","Actor":"Dotnet-GitSync-Bot","Number":"7431","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7431","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7431)"},{"Id":"445259095","IsPullRequest":true,"CreatedAt":"2019-05-17T15:51:42","Actor":"Dotnet-GitSync-Bot","Number":"7430","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @Anipik","Url":"https://github.com/dotnet/corert/pull/7430","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7430)"},{"Id":"445085554","IsPullRequest":true,"CreatedAt":"2019-05-17T04:25:54","Actor":"Dotnet-GitSync-Bot","Number":"7429","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7429","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7429)"},{"Id":"444773127","IsPullRequest":true,"CreatedAt":"2019-05-16T13:56:26","Actor":"Dotnet-GitSync-Bot","Number":"7427","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7427","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7427)"},{"Id":"444513464","IsPullRequest":true,"CreatedAt":"2019-05-15T22:10:39","Actor":"jkotas","Number":"7426","RawContent":null,"Title":"Move IlcBuildTasksPath default to Microsoft.NETCore.Native.targets","State":"closed","Body":"It is used by DumpNativeResources task in Microsoft.NETCore.Native.targets\r\n\r\nFixes #7425","Url":"https://github.com/dotnet/corert/pull/7426","RelatedDescription":"Closed or merged PR \"Move IlcBuildTasksPath default to Microsoft.NETCore.Native.targets\" (#7426)"},{"Id":"444383256","IsPullRequest":false,"CreatedAt":"2019-05-15T22:10:39","Actor":"ctaggart","Number":"7425","RawContent":null,"Title":"NativeCompilationDuringPublish=false leads to msbuild error evaluating \"$(IlcBuildTasksPath)\"","State":"closed","Body":"When I set `/p:NativeCompilationDuringPublish=false ` as described in [the documentation](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#disabling-native-compilation) and [recommended](https://github.com/dotnet/corert/issues/258#issuecomment-492331206), I get this error:\r\n\r\n```\r\nroot@5d9313239163:/src/Shirley# dotnet publish -r ubuntu.16.04-x64 -c Release /p:NativeCompilationDuringPublish=false\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-02/build/Microsoft.NETCore.Native.targets(301,45): error MSB4022: The result \"\" of evaluating the value \"$(IlcBuildTasksPath)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid. [/src/Shirley/Shirley.fsproj]\r\n```\r\n\r\nAs a work-a-round I'm going to try a variation of [another way to disable the ILCompiler](https://github.com/dotnet/corert/issues/258#issuecomment-492331624).","Url":"https://github.com/dotnet/corert/issues/7425","RelatedDescription":"Closed issue \"NativeCompilationDuringPublish=false leads to msbuild error evaluating \"$(IlcBuildTasksPath)\"\" (#7425)"},{"Id":"444137558","IsPullRequest":true,"CreatedAt":"2019-05-15T15:45:52","Actor":"jkotas","Number":"7424","RawContent":null,"Title":"Update dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7424","RelatedDescription":"Closed or merged PR \"Update dependencies\" (#7424)"},{"Id":"444029647","IsPullRequest":true,"CreatedAt":"2019-05-14T21:13:10","Actor":"Dotnet-GitSync-Bot","Number":"7423","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @cshung @sywhang @tannergooding","Url":"https://github.com/dotnet/corert/pull/7423","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7423)"},{"Id":"441935856","IsPullRequest":true,"CreatedAt":"2019-05-14T20:38:16","Actor":"trylek","Number":"7410","RawContent":null,"Title":"SuperIlc support for the issues.targets file","State":"closed","Body":"This change implements a new option --issues-path that can be used\r\nto specify the path to explicit CoreCLR test exclusion XML file.\r\nThis is useful when running CoreCLR test suites so that we filter\r\nout tests known to be failing or hanging and thus reduce noise in\r\nour CPAOT results.\r\n\r\nAs the issues.targets is technically an msbuild project file, I have\r\nleveraged MSBuild interface libraries to evaluate the conditional\r\nexpressions in the file much like we do in .NET Native when evaluating\r\nthe bugdata.ProjectN.xml file. For now I have set many of the project\r\nproperties to arbitrary values, that's up to further cleanup once\r\nwe start expanding our targeting matrix.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7410","RelatedDescription":"Closed or merged PR \"SuperIlc support for the issues.targets file\" (#7410)"},{"Id":"443016643","IsPullRequest":true,"CreatedAt":"2019-05-14T17:01:52","Actor":"trylek","Number":"7415","RawContent":null,"Title":"Move CanInline to CompilationModuleGroup","State":"closed","Body":"As a preparatory change towards adding support for large version\r\nbubble to CPAOT I'm proposing to move CanInline from Compilation to\r\nCompilationModuleGroup in accordance with Simon's and Michal's\r\nfeedback - this refactoring will make it much easier to decouple\r\nthe set of assemblies being compiled from the set of assemblies\r\nwe can inline against (in large version bubble mode anything\r\ncan be inlined).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7415","RelatedDescription":"Closed or merged PR \"Move CanInline to CompilationModuleGroup\" (#7415)"},{"Id":"443994361","IsPullRequest":false,"CreatedAt":"2019-05-14T16:25:03","Actor":"ctaggart","Number":"7422","RawContent":null,"Title":"RhpETWLogLiveCom error on Debian 9 build","State":"closed","Body":"I got `dotnet publish -r win-x64`  working on Windows for my project, but when I try to build from `mcr.microsoft.com/dotnet/core/sdk:2.2.203-stretch` docker image, I get an error about `RhpETWLogLiveCom` missing.\r\n\r\n```\r\nroot@5d9313239163:/src/Shirley# dotnet publish -r linux-x64 -c release\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54.08 ms for /src/Shirley/Shirley.fsproj.\r\n  Shirley -> /src/Shirley/bin/release/netcoreapp2.2/linux-x64/Shirley.dll\r\n  /usr/bin/clang-3.9\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(ReadOnlySpan`1<char>)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(System.ReadOnlySpan`1<Char>) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*,int32,int32,Encoding)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*, Int32, Int32, System.Text.Encoding) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*,int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*, Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(int8*)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(SByte*) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char*,int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char*, Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char*)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char*) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char[],int32,int32)` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char[], Int32, Int32) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `string..ctor(char[])` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: Void System.String..ctor(Char[]) [/src/Shirley/Shirley.fsproj]\r\nEXEC : warning : Method `[S.P.CoreLib]System.Activator.CreateInstanceIntrinsic<__Canon>()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] InvalidProgramSpecific: System.__Canon System.Activator.CreateInstanceIntrinsic() [/src/Shirley/Shirley.fsproj]\r\n  obj/release/netcoreapp2.2/linux-x64/native/Shirley.o: In function `S_P_CoreLib_System_Runtime_InteropServices_InteropExtensions__RhpETWShouldWalkCom':\r\n  (__managedcode+0x613573): undefined reference to `RhpETWShouldWalkCom'\r\n  obj/release/netcoreapp2.2/linux-x64/native/Shirley.o: In function `S_P_CoreLib_System_Runtime_InteropServices_InteropExtensions__RhpETWLogLiveCom':\r\n  (__managedcode+0x61359b): undefined reference to `RhpETWLogLiveCom'\r\nclang : error : linker command failed with exit code 1 (use -v to see invocation) [/src/Shirley/Shirley.fsproj]\r\n/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/build/Microsoft.NETCore.Native.targets(337,5): error MSB3073: The command \"clang-3.9 \"obj/release/netcoreapp2.2/linux-x64/native/Shirley.o\" -o \"bin/release/netcoreapp2.2/linux-x64/native/Shirley\" /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libbootstrapper.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libRuntime.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libSystem.Private.CoreLib.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/sdk/libSystem.Private.TypeLoader.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Globalization.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.IO.Compression.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Net.Security.Native.a /root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27714-01/framework/System.Security.Cryptography.Native.OpenSsl.a -g -Wl,-rpath,'$ORIGIN' -Wl,--as-needed -pthread -lstdc++ -ldl -lm -lz -lgssapi_krb5 -lrt\" exited with code 1. [/src/Shirley/Shirley.fsproj]\r\n```\r\n\r\nBased on https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md, I installed clang with:\r\n```\r\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\r\necho \"deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main\" | tee -a /etc/apt/sources.list\r\napt-get update\r\napt-get install cmake clang-3.9 libicu-dev uuid-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev -y\r\n```\r\n\r\nThe CoreRT version is:\r\n```\r\n      \"Microsoft.DotNet.ILCompiler\": {\r\n        \"type\": \"Direct\",\r\n        \"requested\": \"[1.0.0-alpha-*, )\",\r\n        \"resolved\": \"1.0.0-alpha-27714-01\",\r\n        \"contentHash\": \"Xa2TzZJKoyhMJF7rx+/WjXYOYfQEprdr6CGptdQ0ix4kVI2icYJQnbm+TALQHfb9okW0X3ebNrlPxXhJW461Qw==\"\r\n      },\r\n```\r\n\r\nI noticed this import here and noticed it hasn't been changed in a while.\r\nhttps://github.com/dotnet/corert/blame/master/src/System.Private.CoreLib/src/System/Runtime/RuntimeImports.cs#L724-L729\r\n\r\nAm I missing a dependency?\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7422","RelatedDescription":"Closed issue \"RhpETWLogLiveCom error on Debian 9 build\" (#7422)"},{"Id":"443767461","IsPullRequest":false,"CreatedAt":"2019-05-14T08:04:14","Actor":"mariopasquali","Number":"7421","RawContent":null,"Title":"Compiling ARM on x64","State":"open","Body":"Hi all,\r\n\r\nIt is a few weeks I am trying to set up an environment for compiling a Linux-ARM executable on a x64 machine, without much luck for now.  \r\n\r\nI have set up multiple machines including Debian 9, Ubuntu 16, Ubuntu 18, all 64-bits, even tried with 32-bits versions.  I am currently working on a Ubuntu 16 x64.  Probably an obvious question, but could someone confirm this is supported for compiling an ARM32 output?\r\n\r\nThere are a few possible typos in the following document that are possibly confusing:\r\nhttps://github.com/dotnet/corert/blob/master/Documentation/cross-building.md\r\n\r\n- `\"In addition, to cross compile CoreCLR\"` should it be CoreRT?\r\n- `\"Cross compiling CoreCLR\"` should it be CoreRT?\r\n- `\"$ ROOTFS_DIR=~/coreclr-cross/\"` should it be corert?\r\n- `\"$ ROOTFS_DIR=~/coreclr-cross/arm ./build.sh\"` should it be corert?\r\n\r\nAnother aspect that I didn't get right is the section \"Using CoreRT for cross compiling under arm on x86 host\".  Is this the section applying to my case where I whish building an output for ARM32 on x86?  If yes, then when would the previous section \"Cross compiling CoreCLR\" apply?\r\n\r\nA few more remarks on the section \"Using CoreRT for cross compiling under arm on x86 host\":\r\n- The steps for \"Build CoreFX\" seems outdated.  Should probably by updated with https://github.com/dotnet/corefx/blob/master/Documentation/building/cross-building.md.  \r\n- `\"./build.sh x86 debug verbose cross crosstarget skiptests\"` There is no parameter crosstarget in build.sh as far as I can see.  Is this outdated?  I am running into various issues when trying to run this step without \"crosstarget\" parameter, like file not found of ConstrainedCallSupportHelpers.S, `\"GetUnwindProcInfo is not supported on this arch yet.\"`, etc.\r\n- Regarding step 4, it would be helpful to give examples of the variables.  What is supposed to be ${WORKING_DIR}?  The output of the application that should be compiled?\r\n\r\nThank you,\r\nMario ","Url":"https://github.com/dotnet/corert/issues/7421","RelatedDescription":"Open issue \"Compiling ARM on x64\" (#7421)"},{"Id":"442385927","IsPullRequest":true,"CreatedAt":"2019-05-14T05:35:48","Actor":"Dotnet-GitSync-Bot","Number":"7412","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7412","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7412)"},{"Id":"443568119","IsPullRequest":true,"CreatedAt":"2019-05-14T03:14:10","Actor":"jkotas","Number":"7418","RawContent":null,"Title":"Opt-in more Windows PInvokes into direct calls","State":"closed","Body":"Fixes intermittent infinited recursion inside lazy PInvoke resolver","Url":"https://github.com/dotnet/corert/pull/7418","RelatedDescription":"Closed or merged PR \"Opt-in more Windows PInvokes into direct calls\" (#7418)"},{"Id":"443634094","IsPullRequest":true,"CreatedAt":"2019-05-14T03:13:57","Actor":"JohnTortugo","Number":"7419","RawContent":null,"Title":"Update xplat-job.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @MattGal ","Url":"https://github.com/dotnet/corert/pull/7419","RelatedDescription":"Closed or merged PR \"Update xplat-job.yml\" (#7419)"},{"Id":"443662831","IsPullRequest":true,"CreatedAt":"2019-05-14T03:02:47","Actor":"MichalStrehovsky","Number":"7420","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7420","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7420)"},{"Id":"441964184","IsPullRequest":true,"CreatedAt":"2019-05-13T19:45:58","Actor":"nattress","Number":"7411","RawContent":null,"Title":"Add SuperIlc compile-nuget command","State":"closed","Body":"Add support for compiling assemblies from Nuget packages with Crossgen / CPAOT to validate them on real-world code. The compile-nuget command takes a list of Nuget packages and for each package creates an empty console app, adds the package to the app, publishes, and then runs Crossgen / CPAOT. This initial command does not run the app and is meant for gathering data on noisiness of compile logs, ensuring compilation regressions don't happen, tracking ready-to-run binary sizes, etc.\r\n\r\nTop100Nuget.txt is provided as an example, and contains the 100 most popular Nuget packages on nuget.org as of this commit.","Url":"https://github.com/dotnet/corert/pull/7411","RelatedDescription":"Closed or merged PR \"Add SuperIlc compile-nuget command\" (#7411)"},{"Id":"443059474","IsPullRequest":true,"CreatedAt":"2019-05-13T17:38:45","Actor":"Suchiman","Number":"7416","RawContent":null,"Title":"Port GC changes from coreclr - 8","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7389\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0):**\r\n- https://github.com/dotnet/coreclr/commit/0ee3b5e64a98dc71aefed2304fe4bcf7f66ca9f5 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/dda6b6136e21901842758970d831f31687913a35 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/e7725a6ff986879f8ff2fd9e09ab636545ba7bca (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3a24095610ecaba62495740bf8319ad467af4997 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3bd82d1935806a87d668f4ea102de37077996005 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/8b8231291ded137c49632ef808bbbdc9a500507b (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0372174871c1e27f483c9877c2c5181720be8722 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/df214e67d3cbccb42d2733f4cbe8097a378a731a (skipped)\r\n- https://github.com/dotnet/coreclr/commit/8415a8933844c9d92c435f6ac268612a9563eb3a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/5e82b75a22e9f1ee379beab45c2ddc6146132aab (gc only port)\r\n\r\n**Points of interest**:\r\nhttps://github.com/dotnet/coreclr/commit/d23a2bc131eae32c473e39fcb3b640af1a95d244 made some changes to volatile on the runtime side that i've only partially applied\r\nI've skipped the patch for `Add CGroup CFS CPU limit support` because cgroups support is missing","Url":"https://github.com/dotnet/corert/pull/7416","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 8\" (#7416)"},{"Id":"443513642","IsPullRequest":false,"CreatedAt":"2019-05-13T17:21:02","Actor":"ctaggart","Number":"7417","RawContent":null,"Title":"Please provide a .vsconfig","State":"open","Body":"Please provide a .vsconfig with the minimal required Visual Studio 2019 dependencies needed to build. For an example, see:\r\n\r\nhttps://github.com/microsoft/visualfsharp/blob/master/.vsconfig\r\n\r\nRight now the experience is:\r\n```\r\nPS C:\\Users\\taggac\\github\\corert> .\\build.cmd\r\nChecking pre-requisites...\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.1.0-pre.3.0\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nCould not find Visual C++ under C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\Tools\\. Visual C++ is a pre-requisite to build this repository.\r\nSee: https://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n```\r\n\r\nI'd like to be able to open a solution and have Visual Studio prompt to install all the dependencies via Visual Studio Installer.","Url":"https://github.com/dotnet/corert/issues/7417","RelatedDescription":"Open issue \"Please provide a .vsconfig\" (#7417)"},{"Id":"442915094","IsPullRequest":true,"CreatedAt":"2019-05-11T21:57:05","Actor":"nattress","Number":"7414","RawContent":null,"Title":"Clean publish test output folders before run","State":"closed","Body":"Incremental build was hiding failures in our local enlistments that only CI would catch due to it always starting with a fresh enlistment.","Url":"https://github.com/dotnet/corert/pull/7414","RelatedDescription":"Closed or merged PR \"Clean publish test output folders before run\" (#7414)"},{"Id":"442866699","IsPullRequest":true,"CreatedAt":"2019-05-10T21:13:18","Actor":"trylek","Number":"7413","RawContent":null,"Title":"Revert \"Initial CPAOT support for large version bubble\"","State":"closed","Body":"Reverts dotnet/corert#7403","Url":"https://github.com/dotnet/corert/pull/7413","RelatedDescription":"Closed or merged PR \"Revert \"Initial CPAOT support for large version bubble\"\" (#7413)"},{"Id":"441867767","IsPullRequest":true,"CreatedAt":"2019-05-08T18:24:16","Actor":"MichalStrehovsky","Number":"7409","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7409","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7409)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"446345530","IsPullRequest":true,"CreatedAt":"2019-05-20T23:00:26","Actor":"dsplaisted","Number":"3250","RawContent":null,"Title":"Update stage 0","State":"open","Body":"Should unblock #3243","Url":"https://github.com/dotnet/sdk/pull/3250","RelatedDescription":"Open PR \"Update stage 0\" (#3250)"},{"Id":"445519479","IsPullRequest":false,"CreatedAt":"2019-05-20T17:14:41","Actor":"sebastienros","Number":"3245","RawContent":null,"Title":"NullableContextOptions error during build","State":"closed","Body":"Using the latest build of the SDK, since yesterday.\r\n\r\n```\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(156,10): error MSB4064: The \"NullableContextOptions\" parameter is not supported by the \"Csc\" task. Verify the parameter exists on the task, and it is a settable public instance property. [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\nC:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\xx1da5ap.ru4\\sdk\\3.0.100-preview6-011991\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Microsoft.NET.Sdk.Razor.Compilation.targets(120,5): error MSB4063: The \"Csc\" task could not be initialized with its input parameters.  [C:\\Users\\Administrator\\AppData\\Local\\Temp\\BenchmarksServer\\2hgsxukz.hiy\\benchmarks\\src\\Benchmarks\\Benchmarks.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3245","RelatedDescription":"Closed issue \"NullableContextOptions error during build\" (#3245)"},{"Id":"446041376","IsPullRequest":false,"CreatedAt":"2019-05-20T10:31:08","Actor":"fubar-coder","Number":"3249","RawContent":null,"Title":"*.dll.config from package reference not copied to output on publish","State":"open","Body":"# Description\r\n\r\nIt seems that the `*.dll.config` files from a package reference aren't copied to the output directory during a `dotnet publish`.\r\n\r\n# Use case\r\n\r\nI stumbled across this problem while consuming my `FubarDev.PamSharp` package, which **requires** having the ´.dll.config` file, because it contains a `dllmap` that is needed to find the correct native library.\r\n\r\n# `dotnet --info`\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /home/fubar-coder/dotnet/sdk/3.0.100-preview5-011568/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview5-011568 [/home/fubar-coder/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/home/fubar-coder/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/home/fubar-coder/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# System information\r\n\r\nWindows 10 Pro for Workstation 1809 (Build 17763.475)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3249","RelatedDescription":"Open issue \"*.dll.config from package reference not copied to output on publish\" (#3249)"},{"Id":"444047284","IsPullRequest":true,"CreatedAt":"2019-05-17T23:36:22","Actor":"sbomer","Number":"3231","RawContent":null,"Title":"Flow IsTrimmable from FrameworkReference to resolved assets","State":"closed","Body":"Follow-up to https://github.com/dotnet/core-sdk/pull/1992/files. The next step is to flow the metadata from `RuntimePack` to the resolved files.\r\n\r\nThis flows `IsTrimmable` metadata from `FrameworkReference` and `KnownFrameworkReference` (`FrameworkReference` has priority) to the `RuntimePack` ItemGroup produced by `ResolveFrameworkReferences`. The metadata will ultimately influence the default linker behavior.\r\n\r\n@dsplaisted @nguerrera PTAL.","Url":"https://github.com/dotnet/sdk/pull/3231","RelatedDescription":"Closed or merged PR \"Flow IsTrimmable from FrameworkReference to resolved assets\" (#3231)"},{"Id":"445620306","IsPullRequest":true,"CreatedAt":"2019-05-17T23:25:17","Actor":"wli3","Number":"3248","RawContent":null,"Title":"Remove _WriteAppConfigWithSupportedRuntime Input dependency ","State":"closed","Body":"on ResolveAssemblyReferencesStateFile\r\n\r\nfix https://github.com/dotnet/sdk/issues/3131\r\n\r\nI tried to get a repro in test. However, I cannot pin down a minimal repro to cause rar cache file to be invalid between builds.\r\n\r\ncc @KirillOsenkov","Url":"https://github.com/dotnet/sdk/pull/3248","RelatedDescription":"Closed or merged PR \"Remove _WriteAppConfigWithSupportedRuntime Input dependency \" (#3248)"},{"Id":"445606690","IsPullRequest":true,"CreatedAt":"2019-05-17T22:37:25","Actor":"peterhuene","Number":"3247","RawContent":null,"Title":"Copy runtime pack resource assemblies on self-contained build/publish.","State":"closed","Body":"This commit implements copying resource assemblies for self-contained\r\nbuild/publish from runtime packs.\r\n\r\nCloses #3068.","Url":"https://github.com/dotnet/sdk/pull/3247","RelatedDescription":"Closed or merged PR \"Copy runtime pack resource assemblies on self-contained build/publish.\" (#3247)"},{"Id":"445600954","IsPullRequest":true,"CreatedAt":"2019-05-17T22:09:36","Actor":"dsplaisted","Number":"3246","RawContent":null,"Title":"Skip tests where .NET Core version they use isn't supported on current OS","State":"closed","Body":"Update some tests to skip running if the current operating system doesn't support the right version of .NET Core.\r\n\r\nThis will help run the sdk tests in dotnet/core-sdk, which tests more operating systems than this repo does.","Url":"https://github.com/dotnet/sdk/pull/3246","RelatedDescription":"Closed or merged PR \"Skip tests where .NET Core version they use isn't supported on current OS\" (#3246)"},{"Id":"445498451","IsPullRequest":false,"CreatedAt":"2019-05-17T15:29:08","Actor":"fr0","Number":"3244","RawContent":null,"Title":"How to set version metadata?","State":"open","Body":"1. I want to use the `VersionPrefix` property inside my `csproj` to define my package's semver 2.0 (3-part) version.\r\n2. I want to attach a 4th part and build metadata on the command line.\r\n\r\nIn other words, I want to have the version be, e.g. \"1.2.3.4+f0c432\"\r\n\r\nWhere `1.23` is stored in the `csproj`\r\nand `.4` comes from the CI environment\r\nand `+40c432` is the commit hash.\r\n\r\nThe problem I've run into is that using `--version-suffix` automatically makes it a pre-release version, which I don't want.\r\n\r\nEven if I ignore the 4th number (build number), I can't even do this:\r\n\r\n```\r\ndotnet build MyProj  --version-suffix \"+f0c432\"\r\n```\r\n\r\nBecause:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/2.2.107/NuGet.targets(114,5): error : '1.2.3-+f0c432' is not a valid version string\r\n```","Url":"https://github.com/dotnet/sdk/issues/3244","RelatedDescription":"Open issue \"How to set version metadata?\" (#3244)"},{"Id":"444685384","IsPullRequest":true,"CreatedAt":"2019-05-16T23:10:13","Actor":"sbomer","Number":"3237","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3237","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3237)"},{"Id":"445092425","IsPullRequest":true,"CreatedAt":"2019-05-16T18:12:47","Actor":"zivkan","Number":"3243","RawContent":null,"Title":"Insert NuGet 5.2.0-preview2.6020 into master","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3243","RelatedDescription":"Open PR \"Insert NuGet 5.2.0-preview2.6020 into master\" (#3243)"},{"Id":"445077491","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:38","Actor":"nugetlurker","Number":"3242","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3242","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3242)"},{"Id":"445077453","IsPullRequest":true,"CreatedAt":"2019-05-16T17:35:32","Actor":"nugetlurker","Number":"3241","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6020 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6020 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3241","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6020 into sdk\" (#3241)"},{"Id":"444694510","IsPullRequest":true,"CreatedAt":"2019-05-15T23:56:30","Actor":"MSLukeWest","Number":"3240","RawContent":null,"Title":"Setting IsKeyOutput metadata on AppHost file in PublishItemsOutputGroup","State":"open","Body":"Updating the publishing targets to set the IsKeyOutput metadata on the apphost file (exe).  The key output is used when creating shortcuts using Installer Projects.\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3240","RelatedDescription":"Open PR \"Setting IsKeyOutput metadata on AppHost file in PublishItemsOutputGroup\" (#3240)"},{"Id":"444692644","IsPullRequest":true,"CreatedAt":"2019-05-15T23:47:44","Actor":"dotnet-bot","Number":"3239","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3239","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#3239)"},{"Id":"444692635","IsPullRequest":true,"CreatedAt":"2019-05-15T23:47:41","Actor":"dotnet-bot","Number":"3238","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3238","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#3238)"},{"Id":"444669751","IsPullRequest":false,"CreatedAt":"2019-05-15T22:16:18","Actor":"shhsu","Number":"3236","RawContent":null,"Title":"Question: why does publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)","State":"open","Body":"Hi dotnet:\r\n\r\nI am wondering why publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)\r\nhttps://github.com/dotnet/sdk/blob/77677cd4cd4d033e2a30e33f2e7dc49d7f3c8095/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L354\r\n\r\nBackground:\r\nI created a VSTS pipeline that calls msbuild to build/sign/publish my application (publish to file). However, I am finding that a bunch of binaries in my publish directory is not signed.\r\n\r\nAfter some investigations I have found out that all bits in my $(OutDir) are signed, but the files got copied to publish directory are not from $(OutDir), instead they are from `obj\\Release\\` directory. After looking at the target file I finally found the line that indicates this behavior.\r\n\r\nI have yet to find a good around for this issue. I was wondering why is the reason for this behavior and if there is a workaround for this.\r\n\r\nthanks\r\nPeter","Url":"https://github.com/dotnet/sdk/issues/3236","RelatedDescription":"Open issue \"Question: why does publish pull binaries from $(IntermediateAssembly) instead of $(OutDir)\" (#3236)"},{"Id":"444061058","IsPullRequest":true,"CreatedAt":"2019-05-15T21:16:56","Actor":"kouvel","Number":"3232","RawContent":null,"Title":"Make QuickJitForLoops configurable","State":"closed","Body":"- Enabling this option may improve startup time, may be useful in some scenarios\r\n- Enabling this option opens up the possibility that long-running hot loops remain for too long in code that is not optimized. Methods containing such hot loops may be attributed with `AggressiveOptimizationAttribute` to work around the issue on a case-by-case basis.","Url":"https://github.com/dotnet/sdk/pull/3232","RelatedDescription":"Closed or merged PR \"Make QuickJitForLoops configurable\" (#3232)"},{"Id":"444575344","IsPullRequest":true,"CreatedAt":"2019-05-15T18:11:45","Actor":"livarcocc","Number":"3235","RawContent":null,"Title":"Update branding to 2.2.4xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3235","RelatedDescription":"Open PR \"Update branding to 2.2.4xx\" (#3235)"},{"Id":"444575055","IsPullRequest":true,"CreatedAt":"2019-05-15T18:11:04","Actor":"livarcocc","Number":"3234","RawContent":null,"Title":"Update branding to 2.1.8xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3234","RelatedDescription":"Open PR \"Update branding to 2.1.8xx\" (#3234)"},{"Id":"444400167","IsPullRequest":true,"CreatedAt":"2019-05-15T12:04:41","Actor":"dotnet-maestro[bot]","Number":"3233","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190514.13\r\n- **Date Produced**: 5/15/2019 2:37 AM\r\n- **Commit**: 670f6ee1a619a2a7c84cfdfe2a1c84fbe94e1c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19264.13\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19264.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.2\r\n- **Date Produced**: 5/16/2019 8:24 AM\r\n- **Commit**: 37c11672ee11dc2b3365b95a29e0c012f44032be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19266.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190516.4\r\n- **Date Produced**: 5/16/2019 7:11 PM\r\n- **Commit**: 61cc7d4d347300835925ce5245bfc3ecb6b621d7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19266.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19266.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190517.7\r\n- **Date Produced**: 5/18/2019 4:34 AM\r\n- **Commit**: 55ce2900743cb609e51e2c6487e87e42eb627880\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19267.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19267.7\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190518.2\r\n- **Date Produced**: 5/18/2019 3:22 PM\r\n- **Commit**: 6d0514d3da59137630b9add5b5e619bce2631f02\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19268.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19268.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190520.1\r\n- **Date Produced**: 5/20/2019 8:30 AM\r\n- **Commit**: e913fb3b02d4089a91ff91c041c5f6e7c29038b0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19270.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19270.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3233","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3233)"},{"Id":"443611004","IsPullRequest":true,"CreatedAt":"2019-05-14T18:10:31","Actor":"dsplaisted","Number":"3228","RawContent":null,"Title":"Add ability to use test config file to list tests to skip","State":"closed","Body":"Add support for passing a `-testConfigFile` parameter when running tests.  This allows individual tests to be skipped without having to modify the test source code.  This will be helpful to allow tests to be run on other repos, such as with https://github.com/dotnet/core-sdk/pull/1454.\r\n\r\nThe test config file looks like this\r\n\r\n```xml\r\n<Tests>\r\n  <Method Name=\"Microsoft.NET.Clean.Tests.GivenThatWeWantToCleanAHelloWorldProject.It_can_clean_and_build_without_using_rebuild\"\r\n          Skip=\"true\"\r\n          Issue=\"https://github.com/dotnet/sdk/issues/1234\"\r\n          Reason=\"Reason for skip\"/>\r\n</Tests>\r\n```\r\n\r\nThe `Issue` and `Reason` attributes aren't currently used, they are merely informational to help us keep such a list up-to-date.","Url":"https://github.com/dotnet/sdk/pull/3228","RelatedDescription":"Closed or merged PR \"Add ability to use test config file to list tests to skip\" (#3228)"},{"Id":"443876478","IsPullRequest":true,"CreatedAt":"2019-05-14T14:10:53","Actor":"dotnet-maestro[bot]","Number":"3230","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190513.3\r\n- **Date Produced**: 5/13/2019 6:32 PM\r\n- **Commit**: e6712584bba6e2f0e35a3704793c459ff97c09af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19263.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19263.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3230","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3230)"},{"Id":"443634084","IsPullRequest":true,"CreatedAt":"2019-05-14T04:43:11","Actor":"JohnTortugo","Number":"3229","RawContent":null,"Title":"Update .vsts-ci.yml","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/6291\r\n\r\n/cc @mattgal","Url":"https://github.com/dotnet/sdk/pull/3229","RelatedDescription":"Closed or merged PR \"Update .vsts-ci.yml\" (#3229)"},{"Id":"442475750","IsPullRequest":true,"CreatedAt":"2019-05-14T01:08:18","Actor":"dsplaisted","Number":"3221","RawContent":null,"Title":"Add support for transitive framework references","State":"closed","Body":"Fixes dotnet/cli#10666","Url":"https://github.com/dotnet/sdk/pull/3221","RelatedDescription":"Closed or merged PR \"Add support for transitive framework references\" (#3221)"},{"Id":"443361175","IsPullRequest":true,"CreatedAt":"2019-05-13T13:35:29","Actor":"dotnet-maestro[bot]","Number":"3227","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190512.1\r\n- **Date Produced**: 5/12/2019 12:58 PM\r\n- **Commit**: 30682cda0dd7ca1765463749dd91ec3cfec75eb9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19262.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19262.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3227","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3227)"},{"Id":"443096756","IsPullRequest":true,"CreatedAt":"2019-05-12T13:49:50","Actor":"dotnet-maestro[bot]","Number":"3226","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190511.1\r\n- **Date Produced**: 5/11/2019 1:13 PM\r\n- **Commit**: 136dfbfa8a6173dadc107bf7393bdeaceecb4d3a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19261.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19261.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3226","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3226)"},{"Id":"442986145","IsPullRequest":true,"CreatedAt":"2019-05-11T13:34:45","Actor":"dotnet-maestro[bot]","Number":"3225","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190510.2\r\n- **Date Produced**: 5/10/2019 8:01 PM\r\n- **Commit**: 810920cf8a5fc183585304193f8b4e4e189497e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19260.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19260.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3225","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3225)"},{"Id":"442909757","IsPullRequest":true,"CreatedAt":"2019-05-10T22:01:18","Actor":"wli3","Number":"3224","RawContent":null,"Title":"WIP test ci Add hello world winforms and wpf tests","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3224","RelatedDescription":"Open PR \"WIP test ci Add hello world winforms and wpf tests\" (#3224)"},{"Id":"442888741","IsPullRequest":false,"CreatedAt":"2019-05-10T20:47:19","Actor":"wli3","Number":"3223","RawContent":null,"Title":"Add performance test for WPF and Winform","State":"open","Body":"- [ ] Add hello world test for WPF and Winform for netcore and full framework, make sure infrastructure supports that.\r\n- [ ] Add large realistic project\r\n==================================\r\n- [ ] Combine RunPerfTestsOnHelix.fullframework.cmd into one\r\n- [ ] Solve bench view upload collision\r\n- [ ] Add in the large test assets\r\n- [ ] emailer for comparison\r\n","Url":"https://github.com/dotnet/sdk/issues/3223","RelatedDescription":"Open issue \"Add performance test for WPF and Winform\" (#3223)"},{"Id":"442684448","IsPullRequest":true,"CreatedAt":"2019-05-10T13:50:37","Actor":"dotnet-maestro[bot]","Number":"3222","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190509.9\r\n- **Date Produced**: 5/10/2019 12:31 AM\r\n- **Commit**: 155080ecb738e189db75f8f2461ebad75d955aa7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19259.9\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19259.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3222","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3222)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1129054452357271553","CreatedAt":"2019-05-16T16:02:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the .NET, C#, and F# teams https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":3,"RawContent":null},{"Id":"1129053721206304769","CreatedAt":"2019-05-16T15:59:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":2,"FavoriteCount":1,"RawContent":null},{"Id":"1128765757175631872","CreatedAt":"2019-05-15T20:55:02+00:00","UserScreenname":"dotnet","Text":"We just blogged about all the performance works we did in .NET Core 3.0 https://t.co/2JGXxF7ejn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":314,"FavoriteCount":151,"RawContent":null},{"Id":"1128672633665384449","CreatedAt":"2019-05-15T14:45:00+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst in 15 minutes when he's implementing functions in his compiler. https://t.co/SYndeEbdMY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null},{"Id":"1128343453970993152","CreatedAt":"2019-05-14T16:56:57+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1128339508414410757","CreatedAt":"2019-05-14T16:41:16+00:00","UserScreenname":"dotnet","Text":"ML .NET  CLI: Learn how to automatically generate an ML .NET  machine learning model and C# related code with this… https://t.co/i8zHrBa1UM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":51,"RawContent":null},{"Id":"1126254867708727296","CreatedAt":"2019-05-08T22:37:39+00:00","UserScreenname":"dotnet","Text":"Introducing the new https://t.co/YEWOJxOW2B.SqlClient #DOTNET #dotnetcore #build2019\nhttps://t.co/JhNYQ1GDni https://t.co/44c9wGLwsC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":139,"FavoriteCount":70,"RawContent":null},{"Id":"1126254256850231296","CreatedAt":"2019-05-08T22:35:14+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework 6.3 Preview with .NET Core Support #dotnetcore #entityframework #DOTNET… https://t.co/9jFIJBJRB4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":98,"FavoriteCount":43,"RawContent":null}]}},"RunOn":"2019-05-21T05:30:33.5308182Z","RunDurationInMilliseconds":9676}