{"Data":{"Blog":{"FeedItems":[{"Title":"Blazor 0.5.0 experimental release now available","PublishedOn":"2018-07-25T22:20:41+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Update: We released Blazor 0.5.1 to address several customer reported issues. If you have already installed Blazor 0.5.0 please update to the 0.5.1 patch (release notes). Blazor 0.5.0 is now...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/07/25/blazor-0-5-0-experimental-release-now-available/","RawContent":null},{"Title":"Exploring Azure App Service – Azure Diagnostics","PublishedOn":"2018-07-16T20:08:27+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"If you’ve followed our previous posts about using Azure App Service to host web apps in the cloud (1. Introduction to App Service, 2. Hosting web apps that use SQL) you’re already familiar with how...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/07/16/exploring-azure-app-service-azure-diagnostics/","RawContent":null},{"Title":"Razor Improvements – Feedback Wanted","PublishedOn":"2018-07-11T17:42:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In recent releases of Visual Studio 2017, there has been a great focus on improving the experience of working with Razor files (*.cshtml). The improvements were aimed at addressing the most pressing...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/07/11/razor-improvements-feedback-wanted/","RawContent":null},{"Title":"Workaround for Bower Version Deprecation","PublishedOn":"2018-07-05T20:34:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"As of June 25, the version of Bower shipped with Visual Studio was deprecated, resulting in Bower operations failing when run in Visual Studio. If you use Bower, you will see an error something like:...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/07/05/workaround-for-bower-version-deprecation/","RawContent":null},{"Title":"Changes to script debugging in Visual Studio 15.7","PublishedOn":"2018-06-29T18:31:22+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We’re always looking for ways to make developing with Visual Studio faster.  One of the tasks developers do many times a day is launching debugging sessions.  We identified that script debugging added...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/06/29/changes-to-script-debugging-in-visual-studio-15-7/","RawContent":null},{"Title":"Blazor 0.4.0 experimental release now available","PublishedOn":"2018-06-07T21:28:56+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Blazor 0.4.0 is now available! This release includes important bug fixes and several new feature enhancements. New features in Blazor 0.4.0 (details below): Add event payloads for common event types...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/06/07/blazor-0-4-0-experimental-release-now-available/","RawContent":null},{"Title":"Use Dependency Injection In WebForms Application","PublishedOn":"2018-06-05T18:13:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dependency Injection design pattern is widely used in modern applications.  It decouples objects to the extent that no client code needs to be changed simply because an object it depends changes to a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/06/05/use-dependency-injection-in-webforms-application/","RawContent":null},{"Title":"ASP.NET Core 2.1.0 now available","PublishedOn":"2018-05-30T17:20:27+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we&#039;re thrilled to announce the release of ASP.NET Core 2.1.0! This is the latest release of our open-source and cross-platform web framework for .NET and it&#039;s now ready for production...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/30/asp-net-core-2-1-0-now-available/","RawContent":null},{"Title":"Troubleshooting ASP.NET Core Performance Problems","PublishedOn":"2018-05-23T14:26:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos I recently had an opportunity to help a developer with an ASP.NET Core app that was functionally correct but slow when under a heavy user load. We found a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/23/asp-net-core-performance-improvements/","RawContent":null},{"Title":"Announcing ASP.NET Providers Connected Service Visual Studio Extension","PublishedOn":"2018-05-22T17:43:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Provider pattern was introduced in ASP.NET 2.0 and it gives the developers the flexibility of where to store the state of ASP.NET features (e.g. Session State, Membership, Output Cache etc.). In...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/05/22/announcing-asp-net-providers-connected-service-visual-studio-extension/","RawContent":null}],"ResultType":"Feed"},"Home-Issues":{"Issues":[{"Id":"347129825","IsPullRequest":false,"CreatedAt":"2018-08-02T18:44:32","Actor":"Eilon","Number":"3381","RawContent":null,"Title":"Migrate from ASP.NET Core 2.0 to 2.1- Request to Web API failed(503-Service Unavailable )","State":"open","Body":"_From @280919911 on August 1, 2018 16:33_\n\nI have changed target framework 2.1 and also replaced the packages Microsoft.AspNetCore.All to Microsoft.AspNetCore.App.\r\n\r\nOn Web API project- I have set environment variable and enabled SSL from the project property\r\nI am able to run the Web project but while calling Web API from web project \r\nI'm getting following error\r\nResponse status code does not indicate success: 503 (Service Unavailable).\n\n_Copied from original issue: dotnet/core#1830_","Url":"https://github.com/aspnet/Home/issues/3381","RelatedDescription":"Open issue \"Migrate from ASP.NET Core 2.0 to 2.1- Request to Web API failed(503-Service Unavailable )\" (#3381)"},{"Id":"347099934","IsPullRequest":false,"CreatedAt":"2018-08-02T17:11:26","Actor":"beefo","Number":"3380","RawContent":null,"Title":"Microsoft.AspNetCore.Proxy: ProxyService.cs HttpClient Timeout","State":"open","Body":"I realize Proxy is an unsupported experiment at this time, but wanted to make a suggestion from our experience testing with it.\r\n\r\n**Issue**\r\n[ProxyService.cs](https://github.com/aspnet/Proxy/blob/master/src/Microsoft.AspNetCore.Proxy/ProxyService.cs#L20) creates a HttpClient object with [default timeout](https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/HttpClient.cs#L17). This means any proxied request will timeout if it persists longer than 100 secs. There is currently no way to override the timeout of the HttpClient used by ProxyService.cs.\r\n\r\n```cs\r\npublic ProxyService(IOptions<SharedProxyOptions> options)\r\n{\r\n\tif (options == null)\r\n\t{\r\n\t\tthrow new ArgumentNullException(nameof(options));\r\n\t}\r\n\r\n\tOptions = options.Value;\r\n\tClient = new HttpClient(Options.MessageHandler ?? new HttpClientHandler { AllowAutoRedirect = false, UseCookies = false });\r\n}\r\n```\r\n\r\n**Suggested Improvement**\r\nProvide mechanism to override the default timeout of the HttpClient object which is created and managed by ProxyService.cs.","Url":"https://github.com/aspnet/Home/issues/3380","RelatedDescription":"Open issue \"Microsoft.AspNetCore.Proxy: ProxyService.cs HttpClient Timeout\" (#3380)"},{"Id":"347095086","IsPullRequest":false,"CreatedAt":"2018-08-02T16:56:12","Actor":"blowdart","Number":"3379","RawContent":null,"Title":"Move Microsoft.AspNetCore.DataProtection.Redis to production status","State":"open","Body":"The Redis store is still pre-release, but people are using it. We should move it to production status if we feel it's ready.\r\n\r\n@Eilon ","Url":"https://github.com/aspnet/Home/issues/3379","RelatedDescription":"Open issue \"Move Microsoft.AspNetCore.DataProtection.Redis to production status\" (#3379)"},{"Id":"346979283","IsPullRequest":false,"CreatedAt":"2018-08-02T11:55:42","Actor":"gkinsman","Number":"3378","RawContent":null,"Title":"Self contained ASP.NET Core deployment to win7-x64 (Server2008R2) fails to run","State":"open","Body":"I'm testing a scenario in which we want to deploy a self contained ASP.NET Core app to a Windows Server 2008R2 server that doesn't have any .NET Core artefacts at all installed on it, and it needs to use HTTPS.\r\n\r\nI created an app using the dotnet CLI, with version 2.1.2\r\n`.NET Command Line Tools (2.1.302)`, running \r\n`dotnet new webapi --no-https false`.\r\n\r\nThe project references Microsoft.AspNetCore.App 2.1.2:\r\n`<PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.2\" />`.\r\n\r\nI then changed the csproj file to add a runtime identifier for the target environment, adding:\r\n`<RuntimeIdentifiers>win7-x64</RuntimeIdentifiers>`. \r\nThe version of windows on the target machine is `Version    6.1.7601 Service Pack 1 Build 7601`.\r\n\r\nI then added this to the csproj file to ensure that the published artefacts had no dependencies on the runtime store:\r\n`<PublishWithAspNetCoreTargetManifest>false<PublishWithAspNetCoreTargetManifest>`.\r\n\r\nThe project source is here: https://github.com/gkinsman/kestrel-sample\r\n\r\nI ran `dotnet restore`, and then `dotnet publish -c Debug -r win7-x64 --self-contained`. I zipped up the win-x64 folder in the debug output folder, and copied it over to the target machine.\r\n\r\nI then opened up a powershell prompt, and tried to execute the executable generated by dotnet publish. I received the following error:\r\n\r\n```\r\nc:\\temp\\fooo\\f>kestrel-sample.exe\r\nError:\r\n An assembly specified in the application dependencies manifest (kestrel-sample\r\n.deps.json) was not found:\r\n   package: 'Microsoft.AspNet.WebApi.Client', version: '5.2.6'\r\n   path: 'lib/netstandard2.0/System.Net.Http.Formatting.dll'\r\n```\r\n\r\nIndeed, there is no `Microsoft.AspNet.WebApi.Client` assembly in the output publish directory, despite my efforts to remove the dependency on the runtime store during publish. I don't think there's any problems with the target machine here, as the error is directly related to the missing assembly referenced in the deps.json file.\r\n\r\nIs there anything I'm missing here?\r\n\r\nThanks,\r\nGeorge","Url":"https://github.com/aspnet/Home/issues/3378","RelatedDescription":"Open issue \"Self contained ASP.NET Core deployment to win7-x64 (Server2008R2) fails to run\" (#3378)"},{"Id":"346852080","IsPullRequest":false,"CreatedAt":"2018-08-02T06:48:11","Actor":"Oldmoooon","Number":"3377","RawContent":null,"Title":"I try to install aspnet by brew on mac os, but it try to fetch branch \"dev\"","State":"closed","Body":"```bash\r\n➜ brew install dnvm\r\n==> Installing dnvm from aspnet/k\r\n==> Cloning https://github.com/aspnet/Home.git\r\nCloning into '/Users/***/Library/Caches/Homebrew/dnvm--git'...\r\nwarning: Could not find remote branch dev to clone.\r\nfatal: Remote branch dev not found in upstream origin\r\nError: Failed to download resource \"dnvm\"\r\nFailure while executing; `git clone --depth 1 --branch dev https://github.com/aspnet/Home.git /Users/***/Library/Caches/Homebrew/dnvm--git` exited with 128.\r\n```\r\n","Url":"https://github.com/aspnet/Home/issues/3377","RelatedDescription":"Closed issue \"I try to install aspnet by brew on mac os, but it try to fetch branch \"dev\"\" (#3377)"},{"Id":"346800337","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:17","Actor":"pranavkm","Number":"3376","RawContent":null,"Title":"[Discussion] CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Home/issues/3376","RelatedDescription":"Open issue \"[Discussion] CorsMiddleware must be explicitly configured to specify all allowed headers\" (#3376)"},{"Id":"346638262","IsPullRequest":false,"CreatedAt":"2018-08-01T18:42:18","Actor":"jack0x539","Number":"3375","RawContent":null,"Title":"XmlSerializer does not support ulong enums","State":"closed","Body":"```c#\r\npublic enum MessageDestination : ulong \r\n{\r\n    None = 0,\r\n    /* ... */\r\n    All = ulong.MaxValue\r\n}\r\n\r\n...\r\n\r\npublic class Message\r\n{\r\n    public MessageDestination Destination { get; set; }\r\n    /* ... */\r\n}\r\n\r\n...\r\n\r\nXmlSerializer serialiser = new XmlSerializer(typeof(Message));\r\n```\r\n\r\nException thrown \"Value was either too large or too small for an Int64.\". I'm not sure why enum reflection for XML serialisation assumes that all enum values will be convertable to int64, when it's perfectly legit to have an enum extend uint64.","Url":"https://github.com/aspnet/Home/issues/3375","RelatedDescription":"Closed issue \"XmlSerializer does not support ulong enums\" (#3375)"},{"Id":"346494979","IsPullRequest":false,"CreatedAt":"2018-08-01T08:16:52","Actor":"ygoe","Number":"3374","RawContent":null,"Title":"IHostedService can't be resolved","State":"open","Body":"Running a background service in an ASP.NET Core application requires registering it with the DI container as IHostedService. This ensures that the service is properly shut down when the host terminates.\r\n\r\nWhile this works well for the service itself, it's absolutely unusable for dependency injection, which should be the main purpose of DI. When resolving a service, I need to ask for the interface type. When I have three background services, resolving IHostedService doesn't work because I can't specify which of the services I need. Resolving the implementation type doesn't work either because it won't find it.\r\n\r\n    services.AddSingleton<IHostedService, MyService>();\r\n    services.AddSingleton<IHostedService, MyOtherService>();\r\n\r\nRegistering the implementation type alone also doesn't work because the IHostedService methods StartAsync and StopAsync are no longer called.\r\n\r\n    services.AddSingleton<MyService>();\r\n\r\nThe only thing that works is using a helper class and making two registrations, as described here: https://stackoverflow.com/a/51584615/143684\r\n\r\nSo I feel this DI use for IHostedService is broken design. Registering an implementation type by the IHostedService isn't dependency injection, it's misuse for a different purpose, which is not dependency resolving but host lifetime management. There should be another way to write this.","Url":"https://github.com/aspnet/Home/issues/3374","RelatedDescription":"Open issue \"IHostedService can't be resolved\" (#3374)"},{"Id":"346353312","IsPullRequest":false,"CreatedAt":"2018-07-31T20:51:28","Actor":"abhinavgalodha","Number":"3373","RawContent":null,"Title":"Asp.net core Self Contained Application Exe Getting deletedon the windows Server","State":"open","Body":"### Application Environment Details:\r\nWindows Server: 2012 R2\r\n.Net Core Version : 2.1.0\r\nApplication Deployment Model : Self Contained Deployment\r\n\r\n### Problem\r\nWe have an Asp.net core web API developed using .net core 2.1.0 and deployed as a Self contained Deployment. The Application is hosted in IIS. IIS acts as an Reverse Proxy to the Kestrel Server.\r\nThe first time we deployed our application into production, we encountered an issue with the Symantec Antivirus. The Symantec Endpoint protection didn't like the exe on the Server and flagged it as virus and quarantined it. \r\n\r\nWe asked Symantec to whitelist the exe and after the Antivirus update, the Exe was working fine.\r\nFew weeks later, we noticed that few of the Production Servers was reporting 502.5 Process failure issue. We noticed that the exe was missing on the servers. We raised a ticket with Symantec and they confirmed that the Antivirus is not removing the exe using the Antivirus Diagnostics logs. This is a restricted environment and no user has access to directly delete an exe. Additionally, event viewer also didn't provide any useful details.\r\n\r\nWhat can be the other possibilities of the exe being removed? Can IISAspnetCore module be doing anything which can cause file to be deleted? \r\n\r\nWe are exploring the option to add file auditing to see who deleted the file. \r\n\r\n### Output of dotnet --info Command\r\n```\r\ndotnet --info\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0\r\n  Commit:  caa7b7e2ba\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft\r\n.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft\r\n.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NE\r\nTCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3373","RelatedDescription":"Open issue \"Asp.net core Self Contained Application Exe Getting deletedon the windows Server\" (#3373)"},{"Id":"345440440","IsPullRequest":false,"CreatedAt":"2018-07-31T19:02:08","Actor":"ryanbrandenburg","Number":"3366","RawContent":null,"Title":"Flaky test: ScriptTags_SubresourceIntegrityCheck","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517794&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException : Resource temporarily unavailable\r\n---- System.Net.Sockets.SocketException : Resource temporarily unavailable\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at System.Net.Http.HttpClient.FinishGetStreamAsync(Task`1 getTask)\r\n   at Microsoft.VisualStudio.Web.CodeGenerators.Mvc.CdnScriptTagTests.ScriptTags_SubresourceIntegrityCheck() in /_/test/VS.Web.CG.Mvc.Test/CdnScriptTagTests.cs:line 50\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n------- Stdout: -------\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validate/1.17.0/jquery.validate.min.js' integrity='sha384-rZfj/ogBloos6wzLGpPkkOr/gpkBNLZ6b6yLy4o+ok+t/SAKlL5mvXLr0OXNi1Hp'\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.9/jquery.validate.unobtrusive.min.js' integrity='sha384-ifv0TYDWxBHzvAk2Z0n8R434FL1Rlv/Av18DXE43N/1rvHyOG4izKst0f2iSLdds'\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validate/1.17.0/jquery.validate.min.js' integrity='sha384-rZfj/ogBloos6wzLGpPkkOr/gpkBNLZ6b6yLy4o+ok+t/SAKlL5mvXLr0OXNi1Hp'\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.9/jquery.validate.unobtrusive.min.js' integrity='sha384-ifv0TYDWxBHzvAk2Z0n8R434FL1Rlv/Av18DXE43N/1rvHyOG4izKst0f2iSLdds'\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validate/1.17.0/jquery.validate.min.js' integrity='sha384-rZfj/ogBloos6wzLGpPkkOr/gpkBNLZ6b6yLy4o+ok+t/SAKlL5mvXLr0OXNi1Hp'\r\nFound script tag in '_ValidationScriptsPartial.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery.validation.unobtrusive/3.2.9/jquery.validate.unobtrusive.min.js' integrity='sha384-ifv0TYDWxBHzvAk2Z0n8R434FL1Rlv/Av18DXE43N/1rvHyOG4izKst0f2iSLdds'\r\nFound script tag in '_Layout.cshtml', src='https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.3.1.min.js' integrity='sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT'\r\nFound script tag in '_Layout.cshtml', src='https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.7/bootstrap.min.js' integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa'\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3366","RelatedDescription":"Closed issue \"Flaky test: ScriptTags_SubresourceIntegrityCheck\" (#3366)"},{"Id":"345677514","IsPullRequest":false,"CreatedAt":"2018-07-31T16:44:17","Actor":"chamaraonline","Number":"3369","RawContent":null,"Title":"How to update bootstap 4","State":"closed","Body":"HI \r\nhow to update defult  Bootstrap v3.3.5 to BS4 without Node/ Gulp","Url":"https://github.com/aspnet/Home/issues/3369","RelatedDescription":"Closed issue \"How to update bootstap 4\" (#3369)"},{"Id":"345440062","IsPullRequest":false,"CreatedAt":"2018-07-31T16:23:23","Actor":"ryanbrandenburg","Number":"3365","RawContent":null,"Title":"Flaky test: TestValidateAndBuild","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517794&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.InvalidOperationException : Restore failed with exit code: 1 :: Dotnet path: /mnt/work/33bdfc1cae7b2a38/.dotnet/dotnet\r\n   at Microsoft.VisualStudio.Web.CodeGeneration.MsBuildProjectSetupHelper.RestoreAndBuild(String path, ITestOutputHelper output) in /_/test/Shared/MsBuildProjectSetupHelper.cs:line 114\r\n   at Microsoft.VisualStudio.Web.CodeGenerators.Mvc.IdentityGeneratorTemplateModelBuilderTests.TestValidateAndBuild() in /_/test/VS.Web.CG.Mvc.Test/IdentityGeneratorTemplateModelBuilderTests.cs:line 44\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\nRestoring packages for /mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Library1/Library1.csproj...\r\n  Restoring packages for /mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj...\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error : Unable to load the service index for source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json. [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :   Resource temporarily unavailable [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error : NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json. ---> System.Net.Http.HttpRequestException: Resource temporarily unavailable ---> System.Net.Sockets.SocketException: Resource temporarily unavailable [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    --- End of inner exception stack trace --- [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.DecompressionHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at NuGet.Protocol.ServerWarningLogHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) [/mnt/temp/buildTmp/tmpfiles/dddbf267-b7c9-4975-a80d-51eb1df52637/Root/Test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at NuGet.P\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3365","RelatedDescription":"Closed issue \"Flaky test: TestValidateAndBuild\" (#3365)"},{"Id":"345440484","IsPullRequest":false,"CreatedAt":"2018-07-31T16:02:03","Actor":"ryanbrandenburg","Number":"3367","RawContent":null,"Title":"Flaky test: GeneratesAssemblyAttributeFile","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517794&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   1\r\n   at Microsoft.Extensions.Configuration.UserSecrets.MsBuildTargetTest.GeneratesAssemblyAttributeFile() in /_/test/Config.UserSecrets.Test/MsBuildTargetTest.cs:line 71\r\n------- Stdout: -------\r\nTempdir = /mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt\r\n  Restoring packages for /mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj...\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error : Unable to load the service index for source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json. [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :   Resource temporarily unavailable [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error : NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json. ---> System.Net.Http.HttpRequestException: Resource temporarily unavailable ---> System.Net.Sockets.SocketException: Resource temporarily unavailable [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    --- End of inner exception stack trace --- [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at System.Net.Http.DecompressionHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at NuGet.Protocol.ServerWarningLogHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSecrets.Test/bin/Release/netcoreapp2.2/5cfo3mxi.rzt/test.csproj]\r\n/mnt/work/33bdfc1cae7b2a38/.dotnet/sdk/2.1.302/NuGet.targets(114,5): error :    at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [/mnt/work/33bdfc1cae7b2a38/modules/Configuration/test/Config.UserSec\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3367","RelatedDescription":"Closed issue \"Flaky test: GeneratesAssemblyAttributeFile\" (#3367)"},{"Id":"345041326","IsPullRequest":false,"CreatedAt":"2018-07-30T21:14:32","Actor":"kichalla","Number":"3362","RawContent":null,"Title":"MeidaType's subtype with suffix should be a subset of a subtype without suffix","State":"closed","Body":"According to https://tools.ietf.org/html/rfc6839#section-2, content like `application/problem+json` should be able to be processed as though its `application\\json` too, but currently we don't consider `application/problem+json` as a subtype of `application\\json`.\r\n\r\nRelated issue: https://github.com/aspnet/Mvc/issues/8156\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3362","RelatedDescription":"Closed issue \"MeidaType's subtype with suffix should be a subset of a subtype without suffix\" (#3362)"},{"Id":"345909483","IsPullRequest":false,"CreatedAt":"2018-07-30T19:51:15","Actor":"anurse","Number":"3372","RawContent":null,"Title":"Add default implementation for HttpContext.WebSockets.IsWebSocketRequest","State":"open","Body":"We should provide a default implementation for this property, even when there is no feature installed. There's nothing in the logic for detecting a WebSocket request that inherently requires the middleware. This property should just check for:\r\n\r\n* `Connection: Upgrade` header\r\n* `Upgrade: WebSocket` header\r\n\r\nIt's still up to the middleware to validate the `Sec-WebSocket-*` headers during `Accept`. Any request with the above two headers should be considered a WebSocket request though, even if the other headers are invalid (then it's an *invalid* WebSocket request).","Url":"https://github.com/aspnet/Home/issues/3372","RelatedDescription":"Open issue \"Add default implementation for HttpContext.WebSockets.IsWebSocketRequest\" (#3372)"},{"Id":"345846807","IsPullRequest":false,"CreatedAt":"2018-07-30T17:00:24","Actor":"Tratcher","Number":"3371","RawContent":null,"Title":"Drastic network io performance degradation in Docker","State":"open","Body":"_From @itrofimow on July 16, 2018 15:10_\n\nHi.\r\n\r\nWe've dockerized one of our apps recently and everything seemed to be fine except we just couldn't make it pass load test. Symptoms seem pretty strange to me, later about them. However after 'full desperado mode' took over we tried to run it on host machine with just dotnet binaries (no dotnet installed) and test passed with ease.\r\n\r\nThe app itself is simple fully async .NetCore 2.1.0 CRUD Web Api with network related work mostly - it communicates with mongodb, rabbitmq and a couple of WCF services and that's it.\r\n\r\nSo symptoms that are 100% reproducible under load: \r\nany request takes enormous amount of time to complete, as simple as this controller is:\r\n```\r\n        [HttpGet]\r\n        [Route(\"test2\")]\r\n        public async Task<string> Test2()\r\n        {\r\n            return \"Ok\";\r\n        }\r\n``` \r\nafter hitting some load rate(~50% ) the time for completion grows linearly and shortly after takes >1m so 504 from Nginx. However our logging shows that processing of the whole request pipeline takes ~3ms, so we inspected what actually happens with tcpdump:\r\n0.00 - packet with that Get received\r\n~2.00 - processing started (according to app logs)\r\n~2.00 - processing finished (according to app logs)\r\n~4.00 - packet with 'Ok' sent.\r\n(these timings are just after completion time starts to grow up)\r\nSo we thought this is Kestrel related and these 2s + 2s are wasted somewhere in there, but second test contoller came in:\r\n```\r\n        private readonly HttpClient _client = new HttpClient();\r\n\r\n        [HttpGet]\r\n        public async Task<string> Test()\r\n        {\r\n            _logger.LogInformation(\"starting test async io\");\r\n            var response = await _client.GetAsync(\"http://<some intranet url that just returns static ~40 bytes string in no time>\");\r\n            var result = await response.Content.ReadAsStringAsync();\r\n            _logger.LogInformation(\"finished test async io\");\r\n\r\n            return result;\r\n        }\r\n```\r\nand there's ~2s between first and second log entries(and it behaves same as in test 1 - delay before and after processing). Tcpdump shows that response from url comes almost immediately after request packet has been sent, as expected.\r\n\r\nThere's absolutely no ThreadPool starvation, as number of threads is ~50 and minThreads is set to (1024, 1024) anyways. \r\nI believe there's no network issues neither with host or container itself.\r\n\r\nWhat we tried:\r\n1. We tried .netCore 2.0.0, .netCore 2.1.0, .netCore 2.1.0 with UseLibuv\r\n2. Alpine, Debian and Ubuntu base images\r\n3. --net=host\r\n4. perfcollect, but couldnt figure out the bottleneck\r\n\r\nHost os information:\r\n```\r\ncat /etc/lsb-release\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=16.04\r\nDISTRIB_CODENAME=xenial\r\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.2 LTS\"\r\n```\r\n```\r\nlscpu\r\nArchitecture:          x86_64\r\nCPU op-mode(s):        32-bit, 64-bit\r\nByte Order:            Little Endian\r\nCPU(s):                8\r\nOn-line CPU(s) list:   0-7\r\nThread(s) per core:    1\r\nCore(s) per socket:    1\r\nSocket(s):             8\r\nNUMA node(s):          1\r\nVendor ID:             GenuineIntel\r\nCPU family:            6\r\nModel:                 79\r\nModel name:            Intel(R) Xeon(R) CPU E5-2697A v4 @ 2.60GHz\r\nStepping:              1\r\nCPU MHz:               2593.993\r\nBogoMIPS:              5187.98\r\nHypervisor vendor:     VMware\r\nVirtualization type:   full\r\nL1d cache:             32K\r\nL1i cache:             32K\r\nL2 cache:              256K\r\nL3 cache:              40960K\r\nNUMA node0 CPU(s):     0-7\r\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 invpcid rtm rdseed adx smap xsaveopt arat\r\n```\r\nDocker info:\r\n```\r\nsudo docker info\r\nContainers: xxx\r\n Running: xxx\r\n Paused: xxx\r\n Stopped: xxx\r\nImages: xxx\r\nServer Version: 17.12.0-ce\r\nStorage Driver: overlay2\r\n Backing Filesystem: extfs\r\n Supports d_type: true\r\n Native Overlay Diff: true\r\nLogging Driver: json-file\r\nCgroup Driver: cgroupfs\r\nPlugins:\r\n Volume: local\r\n Network: bridge host macvlan null overlay\r\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\r\nSwarm: inactive\r\nRuntimes: runc\r\nDefault Runtime: runc\r\nInit Binary: docker-init\r\ncontainerd version: 89623f28b87a6004d4b785663257362d1658a729\r\nrunc version: b2567b37d7b75eb4cf325b77297b140ea686ce8f\r\ninit version: 949e6fa\r\nSecurity Options:\r\n apparmor\r\n seccomp\r\n  Profile: default\r\nKernel Version: 4.4.0-62-generic\r\nOperating System: Ubuntu 16.04.2 LTS\r\nOSType: linux\r\nArchitecture: x86_64\r\nCPUs: 8\r\nTotal Memory: 7.796GiB\r\nName: xxxxxxxx\r\nID: 7IDX:SAWS:SUKX:MJW5:RNDJ:TVCR:PZ2S:V2GB:KWPF:ZEGU:MLPV:KU6C\r\nDocker Root Dir: /var/lib/docker\r\nDebug Mode (client): false\r\nDebug Mode (server): false\r\nHTTPS Proxy: xxxxxxxx\r\nRegistry: https://index.docker.io/v1/\r\nLabels:\r\nExperimental: false\r\nInsecure Registries:\r\n 127.0.0.0/8\r\nLive Restore Enabled: false\r\n\r\nWARNING: No swap limit support\r\n```\r\nDockerfile:\r\n```\r\nFROM microsoft/dotnet:2.1-sdk AS build-env\r\nWORKDIR src\r\n\r\nENV TZ=Europe/Moscow\r\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\r\n\r\nCOPY src ./\r\n\r\nRUN dotnet restore xxx.sln -s https://api.nuget.org/v3/index.json --packages /nuget/packages\r\n\r\nRUN dotnet build xxx.sln -c Release --no-restore\r\n\r\nRUN dotnet publish xxx.Web -c Release -o ../published/Web --no-restore\r\n\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime AS base\r\nWORKDIR /app\r\n\r\nENV TZ=Europe/Moscow\r\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\r\n\r\nFROM base AS production\r\nWORKDIR /app\r\nCOPY --from=build-env ./src/published/Web ./\r\n\r\nRUN  apt-get update -y && \\\r\n     apt-get upgrade -y && \\\r\n     apt-get dist-upgrade -y && \\\r\n\t apt-get install -y net-tools && \\\r\n\t apt-get install -y procps && \\\r\n\t apt-get install -y tcpdump\r\n\r\nENTRYPOINT [\"dotnet\", \"xxx.Web.dll\"]\r\n```\r\nI can provide any necessary debug information/traces/dumps\r\n\r\nP.S. Again i'd like to point out that it's not just some 'user code' failing, everything is ok on the host machine, but **not** in docker.\n\n_Copied from original issue: dotnet/corefx#31094_","Url":"https://github.com/aspnet/Home/issues/3371","RelatedDescription":"Open issue \"Drastic network io performance degradation in Docker\" (#3371)"},{"Id":"345777503","IsPullRequest":false,"CreatedAt":"2018-07-30T14:16:55","Actor":"da1rren","Number":"3370","RawContent":null,"Title":"An error occurred while reading the key ring","State":"open","Body":"We are running some integration tests in a docker container and it appears that we are encountering the following exception.  Everything is pretty standard we don't even directly reference the data protector and it all works outside the container.\r\n\r\n.NET core 2.1\r\n\r\n## Exception\r\n\r\n```\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.7.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\nStarting test execution, please wait...\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35]\r\n      No XML encryptor configured. Key {d53a4cf9-f22c-4723-833b-1c9d3d92de1c} may be persisted to storage in unencrypted form.\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35]\r\n      No XML encryptor configured. Key {c882fb25-423d-40b0-af65-175dc37bd26f} may be persisted to storage in unencrypted form.\r\nMicrosoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider[48]\r\n      An error occurred while reading the key ring.\r\nSystem.IO.IOException: The process cannot access the file '/root/.aspnet/DataProtection-Keys/key-c882fb25-423d-40b0-af65-175dc37bd26f.xml' because it is being used by another process.\r\n   at System.IO.FileStream.Init(FileMode mode, FileShare share)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at System.IO.File.OpenRead(String path)\r\n   at Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository.ReadElementFromFile(String fullPath)\r\n   at Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository.GetAllElementsCore()+MoveNext()\r\n   at System.Collections.Generic.List`1.AddEnumerable(IEnumerable`1 enumerable)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository.GetAllElements()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager.GetAllKeys()\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider.CreateCacheableKeyRingCore(DateTimeOffset now, IKey keyJustAdded)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider.CreateCacheableKeyRingCore(DateTimeOffset now, IKey keyJustAdded)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider.Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.ICacheableKeyRingProvider.GetCacheableKeyRing(DateTimeOffset now)\r\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider.GetCurrentKeyRingCore(DateTime utcNow)\r\n```\r\n\r\n## Dockerfile\r\n\r\n```# Setup base images\r\nFROM microsoft/dotnet:2.1-sdk AS build\r\nWORKDIR /src\r\n\r\n# Copy supporting projects\r\nCOPY Onboard.Api.sln ./\r\nCOPY docker-compose.dcproj ./\r\nCOPY Onboard.Core.Tests/Onboard.Core.Tests.csproj Onboard.Core.Tests/\r\n\r\n# Copy Core\r\nCOPY Onboard.Core/Onboard.Core.csproj Onboard.Core/\r\nCOPY Onboard.Core/Nuget.config Onboard.Core/\r\n\r\n# Copy main project\r\nCOPY Onboard.Api.People/Onboard.Api.People.csproj Onboard.Api.People/\r\n\r\n# Copy test project\r\nCOPY Onboard.Api.People.Tests/Onboard.Api.People.Tests.csproj Onboard.Api.People.Tests/\r\n\r\n\r\n# Restore packages\r\nRUN dotnet restore Onboard.Core --configfile Onboard.Core/Nuget.config -nowarn:msb3202,nu1503\r\nRUN dotnet restore Onboard.Core.Tests --configfile Onboard.Core/Nuget.config -nowarn:msb3202,nu1503\r\nRUN dotnet restore Onboard.Api.People --configfile Onboard.Core/Nuget.config -nowarn:msb3202,nu1503\r\nRUN dotnet restore Onboard.Api.People.Tests --configfile Onboard.Core/Nuget.config -nowarn:msb3202,nu1503\r\n\r\nCOPY . .\r\n\r\n# Build project\r\nWORKDIR /src/Onboard.Api.People.Tests\r\nENTRYPOINT [\"dotnet\", \"test\", \"Onboard.Api.People.Tests.csproj\", \"-l\", \"trx;LogFileName=/artifacts/people-results.trx\"]\r\n```","Url":"https://github.com/aspnet/Home/issues/3370","RelatedDescription":"Open issue \"An error occurred while reading the key ring\" (#3370)"},{"Id":"345513750","IsPullRequest":false,"CreatedAt":"2018-07-30T12:45:45","Actor":"bhaidar","Number":"3368","RawContent":null,"Title":"Help: ASP.NET Core 2.1 on Ubuntu 18.04 - COnfigure SSL Certificate","State":"closed","Body":"Hello,\r\nI am trying to run an ASP.NET Core 2.1 app on Ubuntu 18.04.\r\nWhen I use the development self-signed certificate, the browsers Chrome and Firefox need me to add an exception to allow the App to run.\r\n\r\nWhat is the proper way to trust a development self-signed certificate on Ubuntu 18.04? \r\n\r\nSomething related to the above. Where is the development self-signed certificate located on hard disk?\r\n\r\nOn the other hand, if I want to create my own self-signed certificate. Then, how to tell Kestrel about it?\r\n\r\nThanks","Url":"https://github.com/aspnet/Home/issues/3368","RelatedDescription":"Closed issue \"Help: ASP.NET Core 2.1 on Ubuntu 18.04 - COnfigure SSL Certificate\" (#3368)"},{"Id":"344958526","IsPullRequest":false,"CreatedAt":"2018-07-27T23:00:49","Actor":"JunTaoLuo","Number":"3360","RawContent":null,"Title":"AddResponseCaching unnecessarily adds IMemoryCache to the DI","State":"closed","Body":"The response caching middleware used to rely on the memory cache from the DI until we decided to use a private instance of memory cache: https://github.com/aspnet/ResponseCaching/pull/132. As such we no longer need to add IMemoryCache to the DI services as part of AddResponseCaching. ","Url":"https://github.com/aspnet/Home/issues/3360","RelatedDescription":"Closed issue \"AddResponseCaching unnecessarily adds IMemoryCache to the DI\" (#3360)"},{"Id":"344999979","IsPullRequest":false,"CreatedAt":"2018-07-27T19:25:33","Actor":"ckams","Number":"3361","RawContent":null,"Title":"Response Caching Middleware — Config Cache-Control max-age per Content-Type","State":"closed","Body":"How, with Response Caching in Middleware, can we configure:\r\n\r\n- `Cache-Control` 's `max-age` per `Content-Type`?\r\n- Override cache policy by `Location`?\r\n\r\nWith `Microsoft.AspNetCore.Builder.StaticFileOptions`, we can use if/else/switch, but how to do the same thing with `Microsoft.Net.Http.Headers.CacheControlHeaderValue()`","Url":"https://github.com/aspnet/Home/issues/3361","RelatedDescription":"Closed issue \"Response Caching Middleware — Config Cache-Control max-age per Content-Type\" (#3361)"},{"Id":"345058765","IsPullRequest":false,"CreatedAt":"2018-07-27T19:09:20","Actor":"NabinR","Number":"3363","RawContent":null,"Title":"ASP.NET Core 2.1 - Identity Pages Override","State":"closed","Body":"While overwriting Identity Pages on Visual Studio via Add > New Scaffolded Items > Identity, if the \"Overwrite all files\" is ticked, all Identity Pages (Accounts, Manage) are overwritten. This is the intended behaviour. \r\n\r\nIn addition to that, the default CSS, JS and image files (site.css, site.js, banner*.svg) also gets overwritten. That surely doesn't look like the intended behaviour.\r\n","Url":"https://github.com/aspnet/Home/issues/3363","RelatedDescription":"Closed issue \"ASP.NET Core 2.1 - Identity Pages Override\" (#3363)"},{"Id":"345194285","IsPullRequest":false,"CreatedAt":"2018-07-27T18:20:30","Actor":"nickball-granta","Number":"3364","RawContent":null,"Title":"ASP .Net Core 2.1 targetting .Net Framework?","State":"closed","Body":"Hi, \r\n\r\nIs it possible to target the .Net Framework with ASP .Net Core 2.1? I can target 4.6.2 with ASP .Net Core 2.0, but all attempts up to 4.7.2 with .Net Core 2.1 don't work. I get Nuget errors restoring AspNetCore:\r\n\r\nPackage Microsoft.AspNetCore.App 2.1.0 is not compatible with net472 … supports netcoreapp2.1 (.NETCoreApp, Version=2.1)\r\n\r\nThis page:\r\n\r\nhttps://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1#aspnet-core-targeting-net-framework\r\n\r\nSuggest I should be able to target the .Net Framework with ASP Net Core 2.1. If so, how? \r\n\r\n-Nick","Url":"https://github.com/aspnet/Home/issues/3364","RelatedDescription":"Closed issue \"ASP .Net Core 2.1 targetting .Net Framework?\" (#3364)"},{"Id":"344790267","IsPullRequest":false,"CreatedAt":"2018-07-27T16:07:40","Actor":"nabinkjha","Number":"3359","RawContent":null,"Title":"Model binding of datetime set value of Date  field to NULL if date is more than the 12th day of the month.","State":"closed","Body":" When any datetime field is posted the datetime always remains as mm/DD/yyyy format.\r\nThe **startup.cs** file contains the following code.\r\n\r\n```c#\r\npublic CultureInfo EnGbCulture = new CultureInfo(\"en-GB\");\r\n public void ConfigureServices(IServiceCollection services)\r\n        {\r\n services.Configure<RequestLocalizationOptions>(options =>\r\n            {\r\n               options.DefaultRequestCulture = new RequestCulture(EnGbCulture);\r\n                options.SupportedCultures = new List<CultureInfo> { EnGbCulture };\r\n            });\r\n        }\r\n  public void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n        {\r\n            CultureInfo.DefaultThreadCurrentCulture = EnGbCulture;\r\n            CultureInfo.DefaultThreadCurrentUICulture = EnGbCulture;\r\n            app.UseRequestLocalization(new RequestLocalizationOptions\r\n            {\r\n                DefaultRequestCulture = new RequestCulture(EnGbCulture),\r\n                // Formatting numbers, dates, etc.\r\n                SupportedCultures = new List<CultureInfo> { EnGbCulture },\r\n                // UI strings that we have localized.\r\n                SupportedUICultures = new List < CultureInfo > { EnGbCulture },\r\n                RequestCultureProviders = new List<IRequestCultureProvider>\r\n                    {\r\n                    new QueryStringRequestCultureProvider { },\r\n                    new CookieRequestCultureProvider { },\r\n            },\r\n            });\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Home/issues/3359","RelatedDescription":"Closed issue \"Model binding of datetime set value of Date  field to NULL if date is more than the 12th day of the month.\" (#3359)"},{"Id":"344630715","IsPullRequest":false,"CreatedAt":"2018-07-26T00:27:38","Actor":"guylando","Number":"3358","RawContent":null,"Title":"Accessing Application level IServiceProvider","State":"closed","Body":"When executing a task without awaiting it from an mvc controller and using IServiceProvider instance which was initialized by DI from controller constructor, then the IServiceProvider instance throws an error that its disposed in case the request was over while the async task which uses the IServiceProvider  instance is still running.\r\n\r\nThe problem is that the IServiceProvider  initialized from the controller constructor has a scope which disposes it after request is over. I thought to solve this by using an Application level IServiceProvider  in the unawaited async task. I saw that application level IServiceProvider is available in Startup.cs Configure method as ApplicationServices property of IApplicationBuilder  instance.\r\n\r\nHow do I access the application level IServiceProvider in the controller?","Url":"https://github.com/aspnet/Home/issues/3358","RelatedDescription":"Closed issue \"Accessing Application level IServiceProvider\" (#3358)"},{"Id":"344587111","IsPullRequest":false,"CreatedAt":"2018-07-25T20:04:09","Actor":"Tratcher","Number":"3357","RawContent":null,"Title":"System.ArgumentOutOfRangeException: Count cannot be less than zero. Parameter name: count","State":"open","Body":"_From @nagarjunacts on July 25, 2018 13:8_\n\nMy app hosted in azure had lot of failure on secondary instance. When investigating the app logs we had x number of requests returning 500 and no corresponding exception in application insights. The ones that did made to server returned this error tagged to operation_Id.\r\n\r\n> System.ArgumentOutOfRangeException: Count cannot be less than zero.\r\n> Parameter name: count\r\n>    at System.String.CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count)\r\n>    at System.IO.StreamWriter.Write(String value)\r\n>    at Microsoft.AspNetCore.Hosting.Views.ErrorPage.<ExecuteAsync>d__6.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.Extensions.RazorViews.BaseView.<ExecuteAsync>d__29.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\n\r\n\r\nI am not sure if this is an issue, could anyone tell me how to solve this from happening. THis happens intermittently and i believe this brings the app down.\r\n\r\nExtra information\r\n```\r\n{\r\n   \"parsedStack\":[\r\n      {\r\n         \"method\":\"System.String.CopyTo\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":0,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.IO.StreamWriter.Write\",\r\n         \"assembly\":\"System.Runtime.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",\r\n         \"level\":1,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.AspNetCore.Hosting.Views.ErrorPage+<ExecuteAsync>d__6.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Hosting, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":2,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":3,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":4,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":5,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.Extensions.RazorViews.BaseView+<ExecuteAsync>d__29.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Hosting, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":6,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":7,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":8,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1+<ProcessRequestsAsync>d__2.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Server.Kestrel.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":9,\r\n         \"line\":0\r\n      }\r\n   ],\r\n   \"outerId\":\"0\",\r\n   \"message\":\"Connection id \\\"0HLFGA416MUIK\\\", Request id \\\"0HLFGA416MUIK:00000313\\\": An unhandled exception was thrown by the application.\",\r\n   \"type\":\"System.ArgumentOutOfRangeException\",\r\n   \"id\":\"28060465\",\r\n   \"severityLevel\":\"Error\"\r\n}\r\n```\r\n\r\nThanks\r\n \n\n_Copied from original issue: aspnet/KestrelHttpServer#2753_","Url":"https://github.com/aspnet/Home/issues/3357","RelatedDescription":"Open issue \"System.ArgumentOutOfRangeException: Count cannot be less than zero. Parameter name: count\" (#3357)"},{"Id":"344254813","IsPullRequest":false,"CreatedAt":"2018-07-25T01:05:02","Actor":"ryanbrandenburg","Number":"3356","RawContent":null,"Title":"Flaky test: GetMemoryTryGetArrayOfDisposedPoolThrows","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=513995&buildTypeId=XPlat_Windows_Win8_Universe) occasionally with the following error:\r\n```\r\nAssert.Throws() Failure\r\nExpected: typeof(System.InvalidOperationException)\r\nActual:   typeof(System.IO.FileLoadException): Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at System.Memory`1.op_Implicit(Memory`1 memory)\r\n   at Microsoft.Extensions.Internal.Test.DiagnosticMemoryPoolTests.<>c__DisplayClass7_0.<GetMemoryTryGetArrayOfDisposedPoolThrows>b__0()\r\n```\r\n","Url":"https://github.com/aspnet/Home/issues/3356","RelatedDescription":"Open issue \"Flaky test: GetMemoryTryGetArrayOfDisposedPoolThrows\" (#3356)"},{"Id":"344254313","IsPullRequest":false,"CreatedAt":"2018-07-25T01:01:55","Actor":"ryanbrandenburg","Number":"3355","RawContent":null,"Title":"Flaky test: ReturnsCorrectCursor","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=513995&buildTypeId=XPlat_Windows_Win8_Universe) occasionally with the following error:\r\n```\r\nSystem.IO.FileLoadException : Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n   at System.Memory`1.op_Implicit(Memory`1 memory)\r\n   at System.Buffers.ReadOnlySequenceFactory.CreateSegments(Byte[][] inputs)\r\n   at System.Buffers.ReadOnlySequenceFactory.SingleSegmentTestSequenceFactory.CreateWithContent(Byte[] data)\r\n   at System.Buffers.Tests.ReadableBufferReaderFacts.ReturnsCorrectCursor(Int32 takes, Boolean end)\r\n```\r\n","Url":"https://github.com/aspnet/Home/issues/3355","RelatedDescription":"Open issue \"Flaky test: ReturnsCorrectCursor\" (#3355)"},{"Id":"343732570","IsPullRequest":false,"CreatedAt":"2018-07-23T17:52:04","Actor":"ryanbrandenburg","Number":"3354","RawContent":null,"Title":"Flaky tests: EnsureCreateIdentityTokenSigningCertificate_CreatesACertificate_WhenThereAreNoHttpsCertificates et al","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=512272&buildTypeId=Releases_22xPublic_HighSierraOsxUniverse) occasionally with the following error:\r\n```\r\nAssert.Equal() Failure\r\nExpected: Succeeded\r\nActual:   ErrorSavingTheCertificateIntoTheCurrentUserPersonalStore\r\n   at Microsoft.AspNetCore.Certificates.Generation.Tests.CertificateManagerTests.EnsureCreateIdentityTokenSigningCertificate_CreatesACertificate_WhenThereAreNoHttpsCertificates() in /_/test/Microsoft.Extensions.Internal.Test/CertificateManagerTests.cs:line 220\r\n```\r\nPossibly this is an agent state issue since we only have one High-Sierra agent and no code appears to have changed before the failures started.","Url":"https://github.com/aspnet/Home/issues/3354","RelatedDescription":"Open issue \"Flaky tests: EnsureCreateIdentityTokenSigningCertificate_CreatesACertificate_WhenThereAreNoHttpsCertificates et al\" (#3354)"},{"Id":"343729098","IsPullRequest":false,"CreatedAt":"2018-07-23T17:41:22","Actor":"pranavkm","Number":"3353","RawContent":null,"Title":"[CORS] Normalize internationalized domain names when adding to CORS","State":"open","Body":"Follow up to https://github.com/aspnet/CORS/pull/170. `CorsPolicyBuilder` should normalize IDNs to use punycode. This would match the format browsers send for IDN urls.","Url":"https://github.com/aspnet/Home/issues/3353","RelatedDescription":"Open issue \"[CORS] Normalize internationalized domain names when adding to CORS\" (#3353)"},{"Id":"343662123","IsPullRequest":false,"CreatedAt":"2018-07-23T16:15:18","Actor":"jmhmaine","Number":"3352","RawContent":null,"Title":"Contribute Link 404","State":"closed","Body":"The \"How to contribute\" link on [Wiki](https://github.com/aspnet/Home/wiki) points to a DEV location that no longer exists. It should point to: https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md\r\n","Url":"https://github.com/aspnet/Home/issues/3352","RelatedDescription":"Closed issue \"Contribute Link 404\" (#3352)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"347164527","IsPullRequest":false,"CreatedAt":"2018-08-02T20:52:17","Actor":"rashmi-carevalet","Number":"2724","RawContent":null,"Title":"405 Method Not Allowed","State":"closed","Body":"I have a .Net Core 2.0 server and my client is ASP.NET Web Application.\r\nsignalR server is using Microsoft.AspNetCore.SignalR 1.0.2 and my javascript client library is jquery.signalR-2.2.2.js\r\nI have added the javascript library manually to the project and referencing it in my code. (not using any client nuget packages).\r\n\r\nWhen connecting I get a 405 Method Not Allowed error. \r\n\r\nIn one of the posts I found that the error occurs because of signalR version compatibility issues between signalR server and signalR client. If that is the case then could you please suggest the version of signalR javascript library that is compatible with AspNetCore.SignalR 1.0.2","Url":"https://github.com/aspnet/SignalR/issues/2724","RelatedDescription":"Closed issue \"405 Method Not Allowed\" (#2724)"},{"Id":"347153513","IsPullRequest":true,"CreatedAt":"2018-08-02T20:00:07","Actor":"anurse","Number":"2723","RawContent":null,"Title":"remove Jenkins configs already covered by VSTS (#2706)","State":"closed","Body":"I was wrong. It does need to be merged in to 2.2 as well. Will merge to master and insert the ghost commit.","Url":"https://github.com/aspnet/SignalR/pull/2723","RelatedDescription":"Closed or merged PR \"remove Jenkins configs already covered by VSTS (#2706)\" (#2723)"},{"Id":"347152541","IsPullRequest":true,"CreatedAt":"2018-08-02T19:56:33","Actor":"BrennanConroy","Number":"2722","RawContent":null,"Title":"Log when closing connection due to timeout","State":"open","Body":"Was debugging and took a long time to figure out why the connection was closing. This should be logged.","Url":"https://github.com/aspnet/SignalR/pull/2722","RelatedDescription":"Open PR \"Log when closing connection due to timeout\" (#2722)"},{"Id":"347149708","IsPullRequest":true,"CreatedAt":"2018-08-02T19:47:21","Actor":"BrennanConroy","Number":"2721","RawContent":null,"Title":"Fix ODE race with cancellationtokensource","State":"open","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2721","RelatedDescription":"Open PR \"Fix ODE race with cancellationtokensource\" (#2721)"},{"Id":"347097651","IsPullRequest":true,"CreatedAt":"2018-08-02T17:03:57","Actor":"mikaelm12","Number":"2720","RawContent":null,"Title":"[WIP] Java Client Logging","State":"open","Body":"Starting to add logging on the Java client\r\nIssue: https://github.com/aspnet/SignalR/issues/2638","Url":"https://github.com/aspnet/SignalR/pull/2720","RelatedDescription":"Open PR \"[WIP] Java Client Logging\" (#2720)"},{"Id":"347089970","IsPullRequest":true,"CreatedAt":"2018-08-02T16:40:49","Actor":"dotnet-maestro-bot","Number":"2719","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @davidfowl\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2719","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2719)"},{"Id":"347089706","IsPullRequest":false,"CreatedAt":"2018-08-02T16:40:03","Actor":"BrennanConroy","Number":"2718","RawContent":null,"Title":"Increase poll timeout on TS client to be more than server timeout","State":"open","Body":"It's cleaner to let the server timeout the client poll. Right now the client and server have the same timeout duration (90 seconds), we should increase the client one to 100.","Url":"https://github.com/aspnet/SignalR/issues/2718","RelatedDescription":"Open issue \"Increase poll timeout on TS client to be more than server timeout\" (#2718)"},{"Id":"347088492","IsPullRequest":false,"CreatedAt":"2018-08-02T16:36:16","Actor":"BrennanConroy","Number":"2717","RawContent":null,"Title":".NET Client expects server pings on LongPolling connections which will close idle connections","State":"open","Body":"LongPolling has an inherent keep alive system and so we correctly turn off server-side pinging. However the .NET Client is still expecting the pings, so after 30 seconds it will close the connection.\r\n\r\nThe TS client already checks for inherent keep alive, so it doesn't have this issue.","Url":"https://github.com/aspnet/SignalR/issues/2717","RelatedDescription":"Open issue \".NET Client expects server pings on LongPolling connections which will close idle connections\" (#2717)"},{"Id":"347070885","IsPullRequest":true,"CreatedAt":"2018-08-02T16:09:25","Actor":"davidfowl","Number":"2716","RawContent":null,"Title":"Don't send WebSocketCloseStatus.Empty, it's invalid","State":"closed","Body":"Turns out this is a protocol violation:\r\n\r\n> 1005 is a reserved value and MUST NOT be set as a status code in a\r\nClose control frame by an endpoint.  It is designated for use in applications expecting a status code to indicate that no status code was actually present.\r\n\r\n","Url":"https://github.com/aspnet/SignalR/pull/2716","RelatedDescription":"Closed or merged PR \"Don't send WebSocketCloseStatus.Empty, it's invalid\" (#2716)"},{"Id":"346800655","IsPullRequest":true,"CreatedAt":"2018-08-01T23:01:36","Actor":"DylanDmitri","Number":"2715","RawContent":null,"Title":"Dygray/typescript streaming","State":"open","Body":"Support for typescript. It uses a custom `UploadStream` object rather than C# channels. This mostly means that there's no queue on the client side, and that putting a message into the \"pipe\" before invoking results in an error. Makes the serialization cleaner though.\r\n\r\nAlso sneaking in a small change that allows streaming invocations to take channel parameters. There's an example that I used for manual verification, and I'm working on unit tests and will push a commit soon™.","Url":"https://github.com/aspnet/SignalR/pull/2715","RelatedDescription":"Open PR \"Dygray/typescript streaming\" (#2715)"},{"Id":"346266640","IsPullRequest":true,"CreatedAt":"2018-08-01T20:21:26","Actor":"anurse","Number":"2706","RawContent":null,"Title":"remove Jenkins configs already covered by VSTS","State":"closed","Body":"Removing macOS Jenkins config for PR builds. It seems to have an issue with Docker causing our Redis end-to-end tests to fail.\r\n\r\n1. We have coverage of those end-to-end scenarios from other images (Jenkins Windows, for example).\r\n2. We have macOS coverage from VSTS.\r\n\r\nIt's my understanding that it's **only** the version of these files in `master` that matters (cc @pranavkm) so there's no need to port this. Also you won't see the build disabled in this PR because it won't take effect until it's merged.","Url":"https://github.com/aspnet/SignalR/pull/2706","RelatedDescription":"Closed or merged PR \"remove Jenkins configs already covered by VSTS\" (#2706)"},{"Id":"346690749","IsPullRequest":true,"CreatedAt":"2018-08-01T20:19:43","Actor":"dotnet-maestro-bot","Number":"2713","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2713","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2713)"},{"Id":"346679746","IsPullRequest":true,"CreatedAt":"2018-08-01T20:19:41","Actor":"mikaelm12","Number":"2712","RawContent":null,"Title":"Merge rel/2.2","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2712","RelatedDescription":"Closed or merged PR \"Merge rel/2.2\" (#2712)"},{"Id":"346691011","IsPullRequest":false,"CreatedAt":"2018-08-01T17:15:23","Actor":"BrennanConroy","Number":"2714","RawContent":null,"Title":"[2.1.4] LongPolling: Setting connection to inactive while there is still an active poll","State":"open","Body":"@Eilon For 2.1.4 consideration\r\n\r\nPR for change in release/2.2 https://github.com/aspnet/SignalR/pull/2697\r\nOriginal Issue: #2700","Url":"https://github.com/aspnet/SignalR/issues/2714","RelatedDescription":"Open issue \"[2.1.4] LongPolling: Setting connection to inactive while there is still an active poll\" (#2714)"},{"Id":"346373642","IsPullRequest":true,"CreatedAt":"2018-08-01T16:42:36","Actor":"mikaelm12","Number":"2708","RawContent":null,"Title":"Move .pom file in gradle build task","State":"closed","Body":"We're now generating .pom files. Adding it to the .gitignore file at the Java client level","Url":"https://github.com/aspnet/SignalR/pull/2708","RelatedDescription":"Closed or merged PR \"Move .pom file in gradle build task\" (#2708)"},{"Id":"346456354","IsPullRequest":false,"CreatedAt":"2018-08-01T15:57:01","Actor":"zlzforever","Number":"2711","RawContent":null,"Title":"Is there any .NET4.0 client?","State":"closed","Body":"I setup a asp.net core signalr service, and some machines use Microsoft.AspNetCore.SignalR.Client connect my service works well, but i have some machines only support .NET4.0, so i try to use Microsoft.AspNet.SignalR.Client to connect asp.net core signalr service, but failed. ","Url":"https://github.com/aspnet/SignalR/issues/2711","RelatedDescription":"Closed issue \"Is there any .NET4.0 client?\" (#2711)"},{"Id":"345888168","IsPullRequest":false,"CreatedAt":"2018-08-01T15:56:12","Actor":"BrennanConroy","Number":"2700","RawContent":null,"Title":"LongPolling: Setting connection to inactive while there is still an active poll","State":"closed","Body":"There was a race where we could set the connection state to Inactive even though there was an active poll which could cause the connection to be closed by the server.\r\n\r\nThe fix was to add a \"task queue\" so all new poll requests would wait until the previous poll finished all state updates before starting the new poll state updates.\r\n\r\nDetails:\r\nBrowser could abort the http request (normal timeout behavior) and then send a new poll, on the server we might start processing the poll and see that there is an active poll which we could proceed to cancel and wait for the transport task to finish. The transport task would get an operation canceled exception and see that the http request was aborted so would just return normally, Then it would proceed to wait for the state lock which the new poll is currently holding, the new poll would see the transport task is finished and set the status as active and start the new transport task and then release the lock. Now the previous poll can aquire the lock, see that the connection is active (which it assumed was from when it polled) and set it to inactive. Then our heartbeat would come along 5 seconds later and clean the connection up.\r\n\r\nTLDR:\r\nPoll is canceled by client, client sends new poll, race between previous poll and new poll where status could be set as inactive and heartbeat could clean up connection.","Url":"https://github.com/aspnet/SignalR/issues/2700","RelatedDescription":"Closed issue \"LongPolling: Setting connection to inactive while there is still an active poll\" (#2700)"},{"Id":"346388389","IsPullRequest":true,"CreatedAt":"2018-08-01T02:04:26","Actor":"dotnet-maestro-bot","Number":"2709","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @BrennanConroy\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2709","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2709)"},{"Id":"346393383","IsPullRequest":true,"CreatedAt":"2018-08-01T02:04:24","Actor":"BrennanConroy","Number":"2710","RawContent":null,"Title":"Merge release/2.2 to master","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2710","RelatedDescription":"Closed or merged PR \"Merge release/2.2 to master\" (#2710)"},{"Id":"345861588","IsPullRequest":true,"CreatedAt":"2018-07-31T23:36:54","Actor":"BrennanConroy","Number":"2697","RawContent":null,"Title":"Fix race when connection is canceled and new poll comes in","State":"closed","Body":"#2700\r\nThere was a race where we could set the connection state to `Inactive` even though there was an active poll which could cause the connection to be closed by the server.\r\n\r\nThe fix was to add a \"task queue\" so all new poll requests would wait until the previous poll finished all state updates before starting the new poll state updates.\r\n\r\n\r\nDetails:\r\nBrowser could abort the http request (normal timeout behavior) and then send a new poll, on the server we might start processing the poll and see that there is an active poll which we could proceed to cancel and wait for the transport task to finish. The transport task would get an operation canceled exception and see that the http request was aborted so would just return normally, Then it would proceed to wait for the state lock which the new poll is currently holding, the new poll would see the transport task is finished and set the status as active and start the new transport task and then release the lock. Now the previous poll can aquire the lock, see that the connection is active (which it assumed was from when it polled) and set it to inactive. Then our heartbeat would come along 5 seconds later and clean the connection up.\r\n\r\nTLDR:\r\nPoll is canceled by client, client sends new poll, race between previous poll and new poll where status could be set as inactive and heartbeat could clean up connection.","Url":"https://github.com/aspnet/SignalR/pull/2697","RelatedDescription":"Closed or merged PR \"Fix race when connection is canceled and new poll comes in\" (#2697)"},{"Id":"346005399","IsPullRequest":true,"CreatedAt":"2018-07-31T20:38:44","Actor":"dotnet-maestro-bot","Number":"2704","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2704","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2704)"},{"Id":"346282775","IsPullRequest":true,"CreatedAt":"2018-07-31T20:38:43","Actor":"mikaelm12","Number":"2707","RawContent":null,"Title":"Merge rel/2.2","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2707","RelatedDescription":"Closed or merged PR \"Merge rel/2.2\" (#2707)"},{"Id":"345933796","IsPullRequest":true,"CreatedAt":"2018-07-31T17:25:50","Actor":"BrennanConroy","Number":"2702","RawContent":null,"Title":"Fix query string name in transport spec","State":"closed","Body":"#2691","Url":"https://github.com/aspnet/SignalR/pull/2702","RelatedDescription":"Closed or merged PR \"Fix query string name in transport spec\" (#2702)"},{"Id":"345878372","IsPullRequest":false,"CreatedAt":"2018-07-31T17:18:18","Actor":"BrennanConroy","Number":"2698","RawContent":null,"Title":"Consider removing Debugger.IsAttached checks from shipping code","State":"closed","Body":"It was useful when originally writing the library but now can just cause weird unexpected behavior.","Url":"https://github.com/aspnet/SignalR/issues/2698","RelatedDescription":"Closed issue \"Consider removing Debugger.IsAttached checks from shipping code\" (#2698)"},{"Id":"345930278","IsPullRequest":true,"CreatedAt":"2018-07-31T16:52:10","Actor":"BrennanConroy","Number":"2701","RawContent":null,"Title":"Close LongPolling connection on poll exception","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/2701","RelatedDescription":"Closed or merged PR \"Close LongPolling connection on poll exception\" (#2701)"},{"Id":"346136218","IsPullRequest":false,"CreatedAt":"2018-07-31T10:55:08","Actor":"alexiordan","Number":"2705","RawContent":null,"Title":"Frequent disconnects","State":"open","Body":"I cannot make a whole day without some disconnects. \r\nThey are very short (under 1 minute, and tipically below 10 s) and appear at irregular intervals (online: 1h, offline: 2 s, online: 30 min, offline 2s and so on)\r\n\r\nOnly meaningful log I get is on client side complaining the server did not send a message:\r\n\r\n> [Error] Connection is shutting down due to an error.\r\nSystem.TimeoutException: Server timeout (6000.00ms) elapsed without receiving a message from the server.\r\n\r\nWeb app is hosted on Azure.\r\n\r\nI have 2 clients and they both get disconnected simoultaneously. So I kind of excluding Client side errors. I can think about 2 options:\r\n\r\n- Misconfigured SignalR server/client (please Help!)\r\n- Network delays. As I wrote below I don't have any network traces yet, but as soon as I will have something, I'l post here.\r\n\r\nAlthough I set Always On for WebApp on Azure sometimes I see request response delays... Could this be an issue?\r\n\r\nWhat should I look for in server side logs to see that KeepAlive message have been sent correctly? I see in Fiddler that KeepAlive (Type: 6 messages) sometimes come at 4 seconds instead of 3. \r\nCould some long-running code on the web app to delay the KeepAlive sending?\r\n\r\nConfiguration below:\r\n\r\n**Client**\r\nMicrosoft.AspNetCore.SignalR v 1.0.0 ( Just updated to 1.0.2 I'll keep testing and come up with feedback)\r\n`HubConnection.ServerTimeout = TimeSpan.FromSeconds(6);\r\n`\r\n**Server**\r\nMicrosoft.AspNetCore.SignalR (1.0.0)\r\n```\r\n\r\n services.AddSignalR(\r\n                options =>\r\n                {\r\n                    options.KeepAliveInterval = TimeSpan.FromSeconds(3);\r\n                });\r\n```\r\n\r\nI have logs according to following article:\r\nhttps://github.com/aspnet/SignalR/wiki/Diagnostics-Guide\r\n\r\nNo network traces yet.\r\n\r\n\r\n**UPDATE:**\r\nAs can be seen below, disconnect occur due to client not receiving the KeepAlive. \r\n![image](https://user-images.githubusercontent.com/15249495/43461792-0265d7a0-94dd-11e8-8929-05096e4830cc.png)\r\n\r\n1. Can someone please confirm that type:6 is the KeepAlive\r\n2. I want to know where is the delay coming from. My code or the network. Please help.","Url":"https://github.com/aspnet/SignalR/issues/2705","RelatedDescription":"Open issue \"Frequent disconnects\" (#2705)"},{"Id":"345987689","IsPullRequest":true,"CreatedAt":"2018-07-31T01:17:44","Actor":"mikaelm12","Number":"2703","RawContent":null,"Title":"Using the version suffix variable","State":"closed","Body":"Using the VersionSuffix variable instead of hard coding \"preview1\"","Url":"https://github.com/aspnet/SignalR/pull/2703","RelatedDescription":"Closed or merged PR \"Using the version suffix variable\" (#2703)"},{"Id":"345659379","IsPullRequest":false,"CreatedAt":"2018-07-30T20:56:35","Actor":"realwanpengli","Number":"2695","RawContent":null,"Title":"HubConneciton.On execute multiple times when callbackName and the method are exactly the same but HubConneciton.On defined several times","State":"closed","Body":"\r\n\r\n### Please include as much of the following as you can in your bug report\r\n\r\n* Versions of Server-Side NuGet Packages: 1.0.0-preview1-*\r\n* Versions of Client-Side NuGet/NPM Packages: 1.0.1\r\n* Are you using the C# client or the JavaScript client: C#\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): Kestrel\r\n* The Operating System on the Server (Windows/Linux/macOS): Windows/Linux/macOS\r\n* The Operating System on the Client (Windows/Linux/macOS): Windows/Linux/macOS\r\n\r\nWhen the HubConneciton.On(callbackName, method) defined m times, the callback will execute m times.\r\nthe callbackName and the method are exactly the same. Why not execute only 1 time.","Url":"https://github.com/aspnet/SignalR/issues/2695","RelatedDescription":"Closed issue \"HubConneciton.On execute multiple times when callbackName and the method are exactly the same but HubConneciton.On defined several times\" (#2695)"},{"Id":"345879137","IsPullRequest":false,"CreatedAt":"2018-07-30T18:28:23","Actor":"anurse","Number":"2699","RawContent":null,"Title":"Client-server streaming tracking item","State":"open","Body":"This issue tracks things still to do before client-server streaming could be releases:\r\n\r\n* [ ] Update spec #2619 \r\n* [ ] TypeScript support #2595 \r\n* [ ] Review protocol changes\r\n* [ ] Consider support for additional input types (`Stream` in C#, `Blob`/`FileReader` in TS, etc.)","Url":"https://github.com/aspnet/SignalR/issues/2699","RelatedDescription":"Open issue \"Client-server streaming tracking item\" (#2699)"},{"Id":"345687753","IsPullRequest":false,"CreatedAt":"2018-07-30T09:51:37","Actor":"Misiu","Number":"2696","RawContent":null,"Title":"Releases page - latest one is 1.0.0-alpha2","State":"open","Body":"This issue is similar to https://github.com/aspnet/EntityFrameworkCore/issues/12550.\r\nWhen navigating to https://github.com/aspnet/SignalR/releases latest release is 1.0.0-alpha2,","Url":"https://github.com/aspnet/SignalR/issues/2696","RelatedDescription":"Open issue \"Releases page - latest one is 1.0.0-alpha2\" (#2696)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"345571392","IsPullRequest":false,"CreatedAt":"2018-08-02T18:48:40","Actor":"replaysMike","Number":"1898","RawContent":null,"Title":"ASP.Net Identity not being injected as expected","State":"closed","Body":"I've run into an issue where controllers can't be instantiated because my custom UserManager and SignInManager aren't injected (latest 2.1.2):\r\n\r\n`InvalidOperationException: Unable to resolve service for type 'TestAuthentication.Data.Identity.ApplicationUserManager' while attempting to activate 'TestAuthentication.Controllers.DefaultController'.`\r\n\r\nI had this working in another project and I don't know what's causing it. I created a brand new test project which duplicates the issue at https://github.com/replaysMike/TestAuthentication\r\n\r\n```\r\n// Controller.cs\r\n[Produces(\"application/json\")]\r\n[AllowAnonymous]\r\npublic class DefaultController : Controller\r\n{\r\n    public DefaultController(ApplicationUserManager userManager)\r\n    {\r\n    }\r\n\r\n    [HttpGet]\r\n    [Route(\"api/test\")]\r\n    [ProducesResponseType(typeof(string), 200)]\r\n    public IActionResult TestMethod()\r\n    {\r\n        return Ok(\"Welcome\");\r\n    }\r\n}\r\n\r\n// Startup.cs\r\npublic IServiceProvider ConfigureServices(IServiceCollection services)\r\n{\r\n    services.Configure<CookiePolicyOptions>(options =>\r\n    {\r\n        options.CheckConsentNeeded = context => true;\r\n        options.MinimumSameSitePolicy = SameSiteMode.None;\r\n    });\r\n\r\n    services\r\n        .AddMvc()\r\n        .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\r\n        //.AddControllersAsServices();  // tell asp.net to use LightInject to create controllers\r\n\r\n    services.AddDbContext<AuthenticationDbContext>(options =>\r\n        options.UseSqlServer(Configuration.GetConnectionString(\"AuthenticationConnection\")));\r\n\r\n    services.AddIdentity<ApplicationUser, ApplicationRole>(options =>\r\n    {\r\n        // User settings\r\n        options.User.RequireUniqueEmail = true;\r\n    })\r\n    .AddEntityFrameworkStores<AuthenticationDbContext>()\r\n    .AddUserStore<ApplicationUserStore>()\r\n    .AddUserManager<ApplicationUserManager>()\r\n    .AddSignInManager<ApplicationSignInManager>()\r\n    .AddDefaultTokenProviders();\r\n\r\n    services.AddScoped<UserStore<ApplicationUser, ApplicationRole, AuthenticationDbContext, int>,ApplicationUserStore>();\r\n    services.AddScoped<UserManager<ApplicationUser>, ApplicationUserManager>();\r\n    services.AddScoped<SignInManager<ApplicationUser>, ApplicationSignInManager>();\r\n    services.AddScoped<ApplicationUserStore>();\r\n    services.AddScoped<ApplicationUserManager>();\r\n    services.AddScoped<ApplicationSignInManager>();\r\n\r\n    services.AddRouting();\r\n\r\n    // use lightinject to instantiate controllers\r\n    var serviceProvider = Container.CreateServiceProvider(services);\r\n    //var userStore = serviceProvider.GetRequiredService<IUserStore<ApplicationUser>>(); // error\r\n    return serviceProvider;\r\n}\r\n\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n{\r\n    if (env.IsDevelopment())\r\n    {\r\n        app.UseDeveloperExceptionPage();\r\n    }\r\n    else\r\n    {\r\n        app.UseExceptionHandler(\"/Error\");\r\n        app.UseHsts();\r\n    }\r\n\r\n    app.UseStaticFiles();\r\n    app.UseCookiePolicy();\r\n\r\n    app.UseMvc();\r\n}\r\n```\r\n\r\nand other files:\r\n```\r\npublic class ApplicationUserStore : UserStore<ApplicationUser, ApplicationRole, AuthenticationDbContext, int>\r\n{\r\n    public ApplicationUserStore(AuthenticationDbContext context) : base(context)\r\n    {\r\n    }\r\n\r\n    public async Task<ApplicationUser> FindByTemporaryLoginTokenAsync(string token)\r\n    {\r\n        var tokenGuid = Guid.Empty;\r\n        var bytes = Convert.FromBase64String(token);\r\n        tokenGuid = new Guid(bytes);\r\n\r\n        var user = await Context.Users\r\n            .Where(x =>\r\n                x.TemporaryTwoFactorLoginToken.Equals(tokenGuid)\r\n                && x.DateTemporaryTwoFactorLoginTokenExpiresUtc > DateTime.UtcNow\r\n            )\r\n            .FirstOrDefaultAsync();\r\n\r\n        return user;\r\n    }\r\n}\r\n\r\npublic class ApplicationUserManager : UserManager<ApplicationUser>\r\n{\r\n    public ApplicationUserManager(ApplicationUserStore store, IOptions<IdentityOptions> optionsAccessor, \r\n        IPasswordHasher<ApplicationUser> passwordHasher, IEnumerable<IUserValidator<ApplicationUser>> userValidators, \r\n        IEnumerable<IPasswordValidator<ApplicationUser>> passwordValidators, ILookupNormalizer keyNormalizer, \r\n        IdentityErrorDescriber errors, IServiceProvider services, \r\n        ILogger<UserManager<ApplicationUser>> logger)\r\n        : base(store, optionsAccessor, passwordHasher, userValidators, passwordValidators, keyNormalizer, errors, services, logger)\r\n    {\r\n    }\r\n}\r\n\r\npublic class ApplicationSignInManager : SignInManager<ApplicationUser>\r\n{\r\n    public ApplicationSignInManager(\r\n        ApplicationUserManager userManager,\r\n        IHttpContextAccessor contextAccessor,\r\n        IUserClaimsPrincipalFactory<ApplicationUser> claimsFactory,\r\n        IOptions<IdentityOptions> optionsAccessor,\r\n        ILogger<SignInManager<ApplicationUser>> logger,\r\n        IAuthenticationSchemeProvider schemes)\r\n    : base(userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes)\r\n    {\r\n    }\r\n}\r\n\r\n[Table(\"Users\")]\r\npublic class ApplicationUser : IdentityUser<int>\r\n{\r\n}\r\n\r\npublic class ApplicationRole : IdentityRole<int>\r\n{\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/Identity/issues/1898","RelatedDescription":"Closed issue \"ASP.Net Identity not being injected as expected\" (#1898)"},{"Id":"346573522","IsPullRequest":false,"CreatedAt":"2018-08-01T12:13:37","Actor":"chandu1507","Number":"1902","RawContent":null,"Title":"ASP.NET Core application giving object reference not set to an instance of an object exception in production but works fine in development","State":"open","Body":"Ours website is school management application built on Asp.Net Core 2.0. I've requirement to enable users to have multiple roles across different schools with same credentials.For that I used cookies to share identity(ASP.NET Core identity).But it works perfect in development environment but when I host it to azure I'm getting object reference not set to an instance of an object exception in production.\r\n\r\nthis is the error in log file.\r\n\r\n     failfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n     Connection id \"0HLFNDU99T5DB\", Request id \"0HLFNDU99T5DB:00000001\": An unhandled exception was thrown by the application.\r\n     System.NullReferenceException: Object reference not set to an instance of an object.\r\n        at Guru.Web.Controllers.AccountController.<Login>d__16.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor.TaskOfIActionResultExecutor.<Execute>d__0.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__13.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__23.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__18.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__16.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.<Invoke>d__5.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at IdentityServer4.Hosting.IdentityServerMiddleware.<Invoke>d__3.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.<Invoke>d__8.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at IdentityServer4.Hosting.BaseUrlMiddleware.<Invoke>d__3.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.<Invoke>d__7.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n        at Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.<Invoke>d__13.MoveNext()\r\n     --- End of stack trace from previous location where exception was thrown ---\r\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n        at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.<ProcessRequests>d__186`1.MoveNext()\r\n     info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\nWhen I remove these lines of code from startup.cs it works absolutely fine.\r\n\r\n      services.AddSession(options =>\r\n            {\r\n                options.IdleTimeout = TimeSpan.FromHours(1);\r\n                options.Cookie.Domain = \".zipschool.com\";\r\n                options.Cookie.Name = \"ZipSchoolSession\";\r\n            });\r\n\r\n    services.ConfigureApplicationCookie(options =>\r\n            {\r\n                options.Cookie.Name = \".AspNet.ZipschoolSharedCookie\";\r\n                options.Cookie.Domain = \".zipschool.com\";\r\n\r\n           });\r\n\r\n    .AddCookie(options =>\r\n             {\r\n                 options.Cookie.Name = \"zipcookie\";\r\n                 options.Cookie.Domain = \"zipschools.com\";\r\n                 //options.Cookie.SameSite = SameSiteMode.Strict;\r\n             });\r\nThis is the login method\r\n\r\n     [HttpPost]\r\n        [AllowAnonymous]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Login(LoginInputModel model)\r\n        {\r\n            if (SessionState.TenantName.Equals(K_HOME) && model.IsHomeTenant)\r\n            {\r\n                //string[] homePasswordSkip = { \"Password\" };\r\n                //foreach (var modelKey in ModelState.Keys)\r\n                //{\r\n                //    if (homePasswordSkip.Contains(modelKey))\r\n                //    {\r\n                //        ModelState[modelKey].Errors.Clear();\r\n                //        ModelState[modelKey].ValidationState = ModelValidationState.Valid;\r\n                //    }\r\n                //}\r\n\r\n                var url = HttpContext.Request.Host.Value;\r\n                var identityUserId = _userManager.FindByEmailAsync(model.Email);\r\n\r\n                var tenant = _tenantService.GetUserTenant(identityUserId.Result.Id);\r\n\r\n                SessionState.TenantId = tenant.Id;\r\n                SessionState.TenantName = tenant.Name;\r\n                SessionState.EnvironmentType = tenant.EnvironmentType;\r\n                SessionState.SchoolId = tenant.SchoolId;\r\n\r\n                //session[\"LoginInput\"] = \r\n\r\n                var newPath = url.Replace(K_HOME, tenant.Name);// + \"/Home/Index\";\r\n\r\n                CCACrypto ccaCrypto = new CCACrypto();\r\n                var rediredcturl = HttpContext.Request.Scheme + \"://\" + newPath + \"/Nav/\" + ccaCrypto.Encrypt(model.Email, \"Guru\");\r\n\r\n                //return RedirectPermanent(rediredcturl);\r\n                //TempData[\"LoginInput\"] = model;\r\n\r\n                return Redirect(rediredcturl);\r\n\r\n            }\r\n            if (ModelState.IsValid)\r\n            {\r\n                var identityUserId = _userManager.FindByEmailAsync(model.Email);\r\n\r\n                var activity = false;\r\n                if (identityUserId.Result != null)\r\n                {\r\n                    activity = _tenantService.GetUserActivity(identityUserId.Result.Id, SessionState.TenantId);\r\n                }\r\n                if (!activity)\r\n                {\r\n                    ViewBag.message = \"You Are UnAuthorized\";\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login attempt.\");\r\n                    return View(await GetLoginViewModel(model));\r\n                }\r\n                // This doesn't count login failures towards account lockout\r\n                // To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberLogin, lockoutOnFailure: false);\r\n                //var useractivity =  _guruDbContext.User.FirstOrDefault(x => x.Email == model.Email );\r\n\r\n                if (result.Succeeded)\r\n                {\r\n                    _logger.LogInformation(1, \"User logged in.\");\r\n\r\n                    return RedirectToLocal(model.Email, model.ReturnUrl);\r\n                }\r\n                if (result.RequiresTwoFactor)\r\n                {\r\n                    return RedirectToAction(nameof(SendCode), new { ReturnUrl = model.ReturnUrl, RememberMe = model.RememberLogin });\r\n                }\r\n                if (result.IsLockedOut)\r\n                {\r\n                    _logger.LogWarning(2, \"User account locked out.\");\r\n                    return View(\"Lockout\");\r\n                }\r\n                else\r\n                {\r\n                    ApplicationUser au = await _userManager.FindByEmailAsync(model.Email);\r\n                    if (au.IsNull())\r\n                    {\r\n                        ViewBag.CredentialError = \"Account does not exist. Try using a valid email id OR create new account.\";\r\n                    }\r\n                    else\r\n                    {\r\n                        ViewBag.CredentialError = \"Wrong user name or password.\";\r\n                    }\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login attempt.\");\r\n                    //LoginViewModel loginViewModel = ;\r\n\r\n                    return View(await GetLoginViewModel(model));\r\n                }\r\n            }\r\n\r\n            LoginViewModel loginViewModel = await GetLoginViewModel(model);\r\n            // If we got this far, something failed, redisplay form\r\n            return View(await GetLoginViewModel(model));\r\n        }","Url":"https://github.com/aspnet/Identity/issues/1902","RelatedDescription":"Open issue \"ASP.NET Core application giving object reference not set to an instance of an object exception in production but works fine in development\" (#1902)"},{"Id":"346301293","IsPullRequest":false,"CreatedAt":"2018-07-31T18:12:30","Actor":"Karthik2610","Number":"1901","RawContent":null,"Title":"asp.net Core Activate/deativate User","State":"open","Body":"Hi\r\nI am deactivating the user with the following code\r\n await _userManager.SetLockoutEndDateAsync(user, DateTime.MaxValue.AddYears(-1));\r\nnow i need to create a new user with same credentials that locked out user has because that username and email will be given to new joined user.\r\nPlease let me know if there is any other way\r\nPlease guide me if we can do this.","Url":"https://github.com/aspnet/Identity/issues/1901","RelatedDescription":"Open issue \"asp.net Core Activate/deativate User\" (#1901)"},{"Id":"345440948","IsPullRequest":false,"CreatedAt":"2018-07-31T18:04:59","Actor":"ryanbrandenburg","Number":"1897","RawContent":null,"Title":"Flaky test: IdentityUI_ScriptTags_SubresourceIntegrityCheck","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517757&buildTypeId=Lite_UniverseTest) occasionally with the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException : No such host is known.\r\n---- System.Net.Sockets.SocketException : No such host is known.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at System.Net.Http.HttpClient.FinishGetStreamAsync(Task`1 getTask)\r\n   at Microsoft.AspNetCore.Identity.Test.IdentityUIScriptsTest.IdentityUI_ScriptTags_SubresourceIntegrityCheck(ScriptTag scriptTag) in /_/test/Identity.Test/IdentityUIScriptsTest.cs:line 44\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Identity/issues/1897","RelatedDescription":"Closed issue \"Flaky test: IdentityUI_ScriptTags_SubresourceIntegrityCheck\" (#1897)"},{"Id":"345440026","IsPullRequest":false,"CreatedAt":"2018-07-31T18:03:02","Actor":"ryanbrandenburg","Number":"1896","RawContent":null,"Title":"Flaky test: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517794&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException : Resource temporarily unavailable\r\n---- System.Net.Sockets.SocketException : Resource temporarily unavailable\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at System.Net.Http.HttpClient.GetStringAsyncCore(Task`1 getTask)\r\n   at Microsoft.AspNetCore.Identity.Test.IdentityUIScriptsTest.IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent(ScriptTag scriptTag) in /_/test/Identity.Test/IdentityUIScriptsTest.cs:line 71\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Identity/issues/1896","RelatedDescription":"Closed issue \"Flaky test: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent\" (#1896)"},{"Id":"345839641","IsPullRequest":false,"CreatedAt":"2018-07-30T16:40:54","Actor":"blowdart","Number":"1900","RawContent":null,"Title":"Documentation of `RefreshSignInAsync` is misleading","State":"open","Body":"_From @Whathecode on July 30, 2018 12:40_\n\n#### Is this a Bug or Feature request?:\r\nThis is a documentation bug report, in the sense that the [`SignInManager.RefreshSignInAsync` documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.signinmanager-1.refreshsigninasync?view=aspnetcore-2.1) is highly misleading.\r\n\r\n#### Description of the problem:\r\nThe current documentation on this method states:\r\n\r\n> Regenerates the user's application cookie, whilst preserving the\r\n> existing AuthenticationProperties like rememberMe, as an asynchronous\r\n> operation.\r\n>\r\n> Parameters\r\n> **user** The user whose sign-in cookie should be refreshed.\r\n\r\nThis has [lead me](https://stackoverflow.com/q/51571852/590790) and at least [one other user](https://stackoverflow.com/q/45347956/590790) down the wrong path, in that we believed we could pass a different user than the currently logged in user to this method in order to refresh their claims (i.e., next time they perform a request). Instead, what happens is the currently logged in user becomes logged in as this other user which was passed to `RefreshSignInAsync`.\r\n\r\nI read the documentation prior to using this call, but could not derive from the current documentation this is what would happen (and I still cannot).\r\n\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\nMicrosoft.AspNetCore.All\n\n_Copied from original issue: aspnet/Mvc#8172_","Url":"https://github.com/aspnet/Identity/issues/1900","RelatedDescription":"Open issue \"Documentation of `RefreshSignInAsync` is misleading\" (#1900)"},{"Id":"345727075","IsPullRequest":true,"CreatedAt":"2018-07-30T11:58:09","Actor":"thomaslevesque","Number":"1899","RawContent":null,"Title":"Fix provider display name","State":"open","Body":"Fixes #1892 ","Url":"https://github.com/aspnet/Identity/pull/1899","RelatedDescription":"Open PR \"Fix provider display name\" (#1899)"},{"Id":"345379515","IsPullRequest":true,"CreatedAt":"2018-07-27T23:01:05","Actor":"dotnet-maestro-bot","Number":"1894","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1894","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1894)"},{"Id":"345389121","IsPullRequest":false,"CreatedAt":"2018-07-27T22:57:45","Actor":"natemcmaster","Number":"1895","RawContent":null,"Title":"VSTS: 690 test failures. Many Identity + SQL Server tests fail to connect to LocalDB","State":"open","Body":"Something about the way the EF Core tests are configured does not work in the Hosted VS2017 agent pool. It seems most of the EF Core + SQL server tests are broken.\r\n\r\nhttps://dotnet.visualstudio.com/public/_build/results?buildId=8559&view=ms.vss-test-web.test-result-details\r\n\r\n```\r\nSystem.Data.SqlClient.SqlException : Connection Timeout Expired. The timeout period elapsed while attempting to consume the pre-login handshake acknowledgement. This could be because the pre-login handshake failed or the server was unable to respond back in time. The duration spent while attempting to connect to this server was - [Pre-Login] initialization=44133; handshake=39; \r\n---- System.ComponentModel.Win32Exception : The wait operation timed out.\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.Utilities.SqlServerTestStore.DatabaseExists(String name) in /_/test/EF.Test/Utilities/SqlServerTestStore.cs:line 110\r\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.Utilities.SqlServerTestStore.GetScratchDbName() in /_/test/EF.Test/Utilities/SqlServerTestStore.cs:line 44\r\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.Utilities.SqlServerTestStore.CreateScratch(Boolean createDatabase) in /_/test/EF.Test/Utilities/SqlServerTestStore.cs:line 27\r\n   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()\r\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.ScratchDatabaseFixture.get_ConnectionString() in /_/test/EF.Test/Utilities/ScratchDatabaseFixture.cs:line 19\r\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.CustomPocoTest.CanCreateUserInt() in /_/test/EF.Test/CustomPocoTest.cs:line 100\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n```\r\n\r\ncc @HaoK ","Url":"https://github.com/aspnet/Identity/issues/1895","RelatedDescription":"Open issue \"VSTS: 690 test failures. Many Identity + SQL Server tests fail to connect to LocalDB\" (#1895)"},{"Id":"344718100","IsPullRequest":false,"CreatedAt":"2018-07-26T06:57:35","Actor":"slaneyrw","Number":"1893","RawContent":null,"Title":"RFC6238 AuthenticatorService","State":"open","Body":"Can you please expose the internal Rfc6238AuthenticatorService ( and Base32 ), mostly so we are able to utilize it for TwoFactor authentication using the Google Authenticator class of apps.\r\n\r\nThe existing TotpSecurityStampBaseTokenProvider cannot be used as the security stamp should not be involved in the code check.\r\n\r\nThe TimeStep and interval range also needs to be customizable **per token provider** as the default TOTP settings are not always appropriate - effectively this forces us to re-implement ALL of the token providers.\r\n\r\nAt the moment we have to import 3rd party libraries Base32 and OptSharp to be able to provide this functionality\r\n\r\nThe PIN length consideration from #1564 should also be customizable.\r\n\r\nLastly, please consider converting this to a instance class, not static, so we can configure the TOTP settings within individual token providers and set the TokenOptions provider instance ( I'd love to do this solely via DI but the MS DI engine cannot support parallel named DI graphs )","Url":"https://github.com/aspnet/Identity/issues/1893","RelatedDescription":"Open issue \"RFC6238 AuthenticatorService\" (#1893)"},{"Id":"344480469","IsPullRequest":false,"CreatedAt":"2018-07-25T14:56:44","Actor":"thomaslevesque","Number":"1892","RawContent":null,"Title":"ExternalLoginInfo.ProviderDisplayName doesn't use the authentication scheme display name","State":"open","Body":"I use ASP.NET Identity with Azure AD as an external identity provider. I configured Azure AD with a display name:\r\n\r\n```csharp\r\nservices.AddAuthentication()\r\n    .AddOpenIdConnect(\"AzureAD\", \"Azure Active Directory\", options =>\r\n            {\r\n                ...\r\n            });\r\n```\r\n\r\nWhen I call `SignInManager.GetExternalAuthenticationSchemesAsync()`, I would expect `ProviderDisplayName` in the result to be \"Azure Active Directory\", but it's \"AzureAD\" instead.","Url":"https://github.com/aspnet/Identity/issues/1892","RelatedDescription":"Open issue \"ExternalLoginInfo.ProviderDisplayName doesn't use the authentication scheme display name\" (#1892)"},{"Id":"344353162","IsPullRequest":false,"CreatedAt":"2018-07-25T08:58:24","Actor":"Ztarbox","Number":"1891","RawContent":null,"Title":"Why isn't MemoryStream in DataProtectionTokenProvider disposed?","State":"open","Body":"This question is a duplicate from https://github.com/aspnet/AspNetIdentity/issues/7\r\n\r\nBut since core has more contributors, I reissue it over here:\r\nThe `MemoryStream `in `GenerateAsync `and `ValidateAsync `are both not disposed.\r\nhttps://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/Identity/DataProtectionTokenProvider.cs#L72\r\nAlso the disposing by the `BinaryReader `and `BinaryWriter `is \"disabled\" through setting the `leaveOpen `parameter to `true`.\r\nhttps://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/Identity/DataProtectionTokenProvider.cs#L174\r\n\r\nShouldn't the `MemoryStream `be disposed, cause we don't need him anymore?\r\n","Url":"https://github.com/aspnet/Identity/issues/1891","RelatedDescription":"Open issue \"Why isn't MemoryStream in DataProtectionTokenProvider disposed?\" (#1891)"},{"Id":"344257523","IsPullRequest":false,"CreatedAt":"2018-07-25T01:22:38","Actor":"tstivers1990","Number":"1890","RawContent":null,"Title":"Remove Microsoft.AspNetCore.Identity.UI from Microsoft.AspNetCore.App","State":"open","Body":"I'm not sure if this is the right project to place the issue in, as I'm not sure what project manages the relevant nuget package. But I believe Identity UI should be removed from `Microsoft.AspNetCore.App`. The reason for this is because if one chooses not to use Identity UI, and instead write their own UI for Identity, they're not going to be using any of Identity UI. I would imagine this is a common scenario, as most production websites aren't likely to be using Identity UI in my eyes. Normally, it's a non-issue. But because of the nature, it's likely people will be using the same names for their own implementation as are used in Identity UI, such as `LoginModel`, `LogoutModel`, etc. This presents issues when using something like ReSharper, which can automatically import missing namespaces. It quickly becomes cumbersome. I believe Visual Studio has a similar feature as well, which also becomes more cumbersome because of this.\r\n\r\nNormally, I wouldn't submit an issue over NuGet package organization, as it's largely cosmetic. But I believe that, because of the extremely high likelihood of your class names being the same as Identity UI class names, and the potential for error that this creates, it should be separated from the `Microsoft.AspNetCore.App` package. In my case, these issues have led me to move from using `Microsoft.AspNetCore.App` to manually adding the necessary individual nuget packages to my project to solve the issue. I don't feel this is the ideal scenario, as `Microsoft.AspNetCore.App` is a good package in my eyes. But because of these issues, this is my only acceptable option.\r\n\r\nFurther, I don't believe that Identity UI will be used often enough in production projects to warrant including it in the all-encompassing package. I believe it is very likely Identity UI will only be used for prototyping projects at most and, therefore, doesn't really fit in `Microsoft.AspNetCore.App`.","Url":"https://github.com/aspnet/Identity/issues/1890","RelatedDescription":"Open issue \"Remove Microsoft.AspNetCore.Identity.UI from Microsoft.AspNetCore.App\" (#1890)"},{"Id":"341346866","IsPullRequest":true,"CreatedAt":"2018-07-24T19:16:42","Actor":"dotnet-maestro-bot","Number":"1877","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1877","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1877)"},{"Id":"344134976","IsPullRequest":true,"CreatedAt":"2018-07-24T18:39:24","Actor":"natemcmaster","Number":"1889","RawContent":null,"Title":"Merge release/2.1 to release/2.2","State":"closed","Body":"@javiercn it looks like this didn't make it back into the 2.2 branch. Should it?","Url":"https://github.com/aspnet/Identity/pull/1889","RelatedDescription":"Closed or merged PR \"Merge release/2.1 to release/2.2\" (#1889)"},{"Id":"343719379","IsPullRequest":false,"CreatedAt":"2018-07-23T17:11:04","Actor":"Rick-Anderson","Number":"1888","RawContent":null,"Title":"No way to resend confirmation email","State":"open","Body":"From #1662\r\n\r\n**No way to resend confirmation email**\r\n\r\nIf you somehow didn't receive (or accidentally deleted, etc.) your confirmation email, then your account is dead forever, because there's no way to resend it. It's worse still if v1 of your site didn't implement confirmation emails, but v2 does, because then all existing users lose their accounts.\r\n\r\nThis is the `#1` ask from the docs feedback.\r\n","Url":"https://github.com/aspnet/Identity/issues/1888","RelatedDescription":"Open issue \"No way to resend confirmation email\" (#1888)"},{"Id":"343572939","IsPullRequest":false,"CreatedAt":"2018-07-23T10:19:35","Actor":"binhghi5","Number":"1887","RawContent":null,"Title":"Why you remove ApplicationUser?","State":"open","Body":"In 2.0 we use to have an ApplicationUser class. I can add some custom fields and create relationship with another classes. Why you remove ApplicationUser class. Any reason?","Url":"https://github.com/aspnet/Identity/issues/1887","RelatedDescription":"Open issue \"Why you remove ApplicationUser?\" (#1887)"},{"Id":"341647823","IsPullRequest":false,"CreatedAt":"2018-07-20T17:50:38","Actor":"postb99","Number":"1879","RawContent":null,"Title":"Why isn't there a FindByNormalizedName method?","State":"closed","Body":"Hello,\r\n\r\nI'm reading UserManager and RoleManager API documentation. I've understood the usefulness of normalized name/email, to have consistent comparison, maybe also a uniqueness value check.\r\n\r\nWhy aren't there FindByNormalizedNameAsync (UserManager and RoleManager) and FindByNormalizedEmail (UserManager) methods?\r\n\r\nThanks for information.","Url":"https://github.com/aspnet/Identity/issues/1879","RelatedDescription":"Closed issue \"Why isn't there a FindByNormalizedName method?\" (#1879)"},{"Id":"342687415","IsPullRequest":false,"CreatedAt":"2018-07-20T17:47:44","Actor":"Ponant","Number":"1884","RawContent":null,"Title":"Difference between AddDefaultIdentity and AddIdentity??","State":"closed","Body":"In scaffolding Identity I get this in ASP.NET Core 2.1:\r\n\r\n```\r\n  services.AddDefaultIdentity<ApplicationUser>()\r\n                    .AddEntityFrameworkStores<ApplicationDbContext>();\r\n\r\n```\r\n\r\nWhereas the previous templates produced this\r\n\r\n ```\r\n  services.AddIdentity<ApplicationUser, IdentityRole>()\r\n        .AddEntityFrameworkStores<ApplicationDbContext>()\r\n        .AddDefaultTokenProviders();\r\n```\r\nWhich was clearer.\r\nIs is possible to understand the difference please? What does the former has that the latter does not? Can I just replace the former by the latter?\r\nThanks\r\n","Url":"https://github.com/aspnet/Identity/issues/1884","RelatedDescription":"Closed issue \"Difference between AddDefaultIdentity and AddIdentity??\" (#1884)"},{"Id":"342268347","IsPullRequest":false,"CreatedAt":"2018-07-20T13:09:21","Actor":"Dolphinsimon","Number":"1882","RawContent":null,"Title":"Register users keep login failed in the default scaffolded identity razor pages.","State":"closed","Body":"In the default scaffolded Identity razor page-Login, users can login with email and password.\r\n```\r\n                <div class=\"form-group\">\r\n                    <label asp-for=\"Input.Email\"></label>\r\n                    <input asp-for=\"Input.Email\" class=\"form-control\" />\r\n                    <span asp-validation-for=\"Input.Email\" class=\"text-danger\"></span>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label asp-for=\"Input.Password\"></label>\r\n                    <input asp-for=\"Input.Password\" class=\"form-control\" />\r\n                    <span asp-validation-for=\"Input.Password\" class=\"text-danger\"></span>\r\n                </div>\r\n```\r\n\r\nHowever, the OnPostAsync() checks email and password with PasswordSignInAsync() witch sign in users\r\nby username and password.\r\n\r\n\r\n```\r\npublic async Task<IActionResult> OnPostAsync(string returnUrl = null)\r\n        {\r\n            returnUrl = returnUrl ?? Url.Content(\"~/\");\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n                // This doesn't count login failures towards account lockout\r\n                // To enable password failures to trigger account lockout, set lockoutOnFailure: true\r\n                var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);\r\n                if (result.Succeeded)\r\n                {\r\n                    _logger.LogInformation(\"User logged in.\");\r\n                    return LocalRedirect(returnUrl);\r\n                }\r\n                if (result.RequiresTwoFactor)\r\n                {\r\n                    return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });\r\n                }\r\n                if (result.IsLockedOut)\r\n                {\r\n                    _logger.LogWarning(\"User account locked out.\");\r\n                    return RedirectToPage(\"./Lockout\");\r\n                }\r\n                else\r\n                {\r\n                    ModelState.AddModelError(string.Empty, \"Invalid login attempt.\");\r\n                    return Page();\r\n                }\r\n            }\r\n\r\n            // If we got this far, something failed, redisplay form\r\n            return Page();\r\n        }\r\n```\r\n\r\n\r\nIt seems that you won't login to your system forever.\r\nSo, witch situation was by designed? Login with username or email?\r\n","Url":"https://github.com/aspnet/Identity/issues/1882","RelatedDescription":"Closed issue \"Register users keep login failed in the default scaffolded identity razor pages.\" (#1882)"},{"Id":"342706152","IsPullRequest":false,"CreatedAt":"2018-07-19T18:04:02","Actor":"huxiaozhong","Number":"1885","RawContent":null,"Title":"How can i use AspNetCore.Identity  in .net4.7 mvc5","State":"closed","Body":"i want use AspNetCore.Identity in  .net4.7 mvc5 ,can you  help me  or  give me some example;\r\n\r\ni want to know  how to resoleve  SignInManager<User> in Controller","Url":"https://github.com/aspnet/Identity/issues/1885","RelatedDescription":"Closed issue \"How can i use AspNetCore.Identity  in .net4.7 mvc5\" (#1885)"},{"Id":"342777573","IsPullRequest":false,"CreatedAt":"2018-07-19T18:02:50","Actor":"Ponant","Number":"1886","RawContent":null,"Title":"Scaffold Identity omits custom ApplicationUser","State":"closed","Body":"**Works**\r\n1) New project 2.1 MVC with no auth\r\n2) Scaffold identity and choose the plus button for the user class\r\n\r\n![scaffoldidentity21](https://user-images.githubusercontent.com/19961806/42952012-cef98632-8b77-11e8-9c61-219423f81672.PNG)\r\n\r\nThe resulting code is expected because it refers to `ApplicationUser`\r\n\r\n`    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>\r\n`\r\n`                services.AddDefaultIdentity<ApplicationUser>()\r\n`\r\n\r\n**Does not work**\r\n1) New project 2.1 MVC with no auth\r\n2) Create a class ApplicationUser that derives from IdentityUser\r\n`    public class ApplicationUser : IdentityUser\r\n`\r\n3) Scaffold identity and choose the **dropdown** button for the user class\r\n\r\n![scaffoldidentity21bug](https://user-images.githubusercontent.com/19961806/42952344-8aa84c10-8b78-11e8-96d4-c37ede8b262c.PNG)\r\n\r\n\r\nThe resulting code is unexpected because it refers to `IdentityUser`. `ApplicationUser `is totally ignored\r\n\r\n`    public class ApplicationDbContext : IdentityDbContext<IdentityUser>\r\n`\r\n`                services.AddDefaultIdentity<IdentityUser>()\r\n`\r\n\r\nBug?","Url":"https://github.com/aspnet/Identity/issues/1886","RelatedDescription":"Closed issue \"Scaffold Identity omits custom ApplicationUser\" (#1886)"},{"Id":"342559767","IsPullRequest":false,"CreatedAt":"2018-07-19T02:48:12","Actor":"christiansk","Number":"1883","RawContent":null,"Title":"Make Context virtual in UserStore","State":"open","Body":"Could the [Context property](https://github.com/aspnet/Identity/blob/9ecbefcf21d12d90ac187e1eefe02ed0219edc23/src/EF/UserStore.cs#L126) be marked as virtual in UserStore? I would like to implement my own getter so I can better manage the lifecycle of the DbContext (to enforce better control over the transaction boundaries).\r\nI have implemented an unit of work using the [DbContextScope library](https://github.com/apawsey/DbContextScope) and it's working great throughout my app, so I would like to use it for Identity as well.","Url":"https://github.com/aspnet/Identity/issues/1883","RelatedDescription":"Open issue \"Make Context virtual in UserStore\" (#1883)"},{"Id":"342187541","IsPullRequest":false,"CreatedAt":"2018-07-18T06:00:53","Actor":"maxwang","Number":"1881","RawContent":null,"Title":"How can I inject custom code to account controller in Identity core 2.1","State":"open","Body":"Dear Sir/Madam,\r\n\r\nI tried to update my project from .net core 2.0 to core 2.1 and could not find the place to inject my code to account controller. Do I have to change back to .net Identity core 2.0 code? Or could you give me some suggestions?\r\n\r\nThanks.\r\n\r\nRegards,\r\nMax\r\n","Url":"https://github.com/aspnet/Identity/issues/1881","RelatedDescription":"Open issue \"How can I inject custom code to account controller in Identity core 2.1\" (#1881)"},{"Id":"341810304","IsPullRequest":false,"CreatedAt":"2018-07-17T08:09:50","Actor":"tiljanssen","Number":"1880","RawContent":null,"Title":"AddIdentity should check if IUserSecurityStampStore is implemented before registering a check on securityStamp","State":"open","Body":"If the UserStore does not implement IUserSecurityStampStore, most functionality regarding security stamps will be skipped, but AddIdentity() does register a validation on the securityStamp every 30 minutes.\r\n\r\nThis results in the confusing behaviour that the user is logged out after 30 minutes, even though the cookies did not expire.\r\n\r\nAddIdentity should check whether the UserSecurityStampStore is supported before registering the check, and either throw, or skip the check.\r\n\r\nSee also #1425 ","Url":"https://github.com/aspnet/Identity/issues/1880","RelatedDescription":"Open issue \"AddIdentity should check if IUserSecurityStampStore is implemented before registering a check on securityStamp\" (#1880)"},{"Id":"341347083","IsPullRequest":false,"CreatedAt":"2018-07-15T19:58:33","Actor":"dazinator","Number":"1878","RawContent":null,"Title":"Custom IdentityUserLogin<int> and EF user store","State":"closed","Body":"I'm using the EF stores.\r\n\r\nThe only change I'd like to make is to add a column to the `AspNetUserLogins` table so that I can also store the refresh token associated with the external login. I think adding a column to an EF model should be fairly straightforward, and it was, but then getting identity to work with it is turning out to be a bit painful :-)\r\n\r\nI derived my own entity from `IdentityUserLogin<int>` and added the additional property:\r\n\r\n```\r\n   public class DennisUserLogin : IdentityUserLogin<int>\r\n   {\r\n        public string RefreshToken { get; set; }\r\n   }\r\n```\r\n\r\nAnd therefore had to derive my own `IdentityDbContext`, passing in that replacement type:\r\n\r\n```\r\n\r\n public class DennisContext : IdentityDbContext<DennisUser, IdentityRole<int>, int, IdentityUserClaim<int>, IdentityUserRole<int>, DennisUserLogin, IdentityRoleClaim<int>, IdentityUserToken<int>>\r\n    {\r\n        public DennisContext(DbContextOptions<DennisContext> options)\r\n            : base(options)\r\n        {\r\n        }\r\n\r\n        protected override void OnModelCreating(ModelBuilder builder)\r\n        {\r\n            base.OnModelCreating(builder);         \r\n            \r\n        }\r\n    }\r\n```\r\n\r\nI was able to then add a new ef migration, and apply that, and I can see the additional column in the database - great.\r\n\r\nNext I needed to be able to set this new property. So I had to find the locations where a new `IdentityUserLogin` entity is created, so that I could also set my additional property before its saved.\r\n\r\nUnfortunately the `UserStore` seems to create this entity, and the there is nowhere in the existing API where I could pass an additional value to it (i.e referesh token). Therefore overriding any existing method on UserStore or UserManager wouldn't cater for my scenario. So I had to add some additional method to UserManager and UserStore that also took a \"refresh token\":\r\n\r\n```\r\n\r\n  public class DennisUserStore : UserStore<DennisUser, IdentityRole<int>, DennisContext, int>, IDennisUserStore\r\n    {\r\n\r\n        private readonly DennisContext _context;\r\n\r\n        public DennisUserStore(DennisContext context, IdentityErrorDescriber describer = null) : base(context, describer)\r\n        {\r\n            _context = context;\r\n        }\r\n        \r\n        \r\n        /// <summary>\r\n        /// Adds the <paramref name=\"login\"/> given to the specified <paramref name=\"user\"/>.\r\n        /// </summary>\r\n        /// <param name=\"user\">The user to add the login to.</param>\r\n        /// <param name=\"login\">The login to add to the user.</param>\r\n        /// <param name=\"cancellationToken\">The <see cref=\"CancellationToken\"/> used to propagate notifications that the operation should be canceled.</param>\r\n        /// <returns>The <see cref=\"Task\"/> that represents the asynchronous operation.</returns>\r\n        public Task AddLoginAsync(DennisUser user, UserLoginInfo login, string refreshToken,\r\n            CancellationToken cancellationToken = default(CancellationToken))\r\n        {\r\n            cancellationToken.ThrowIfCancellationRequested();\r\n            ThrowIfDisposed();\r\n            if (user == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(user));\r\n            }\r\n            if (login == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(login));\r\n            }\r\n            var userLogins = _context.UserLogins;\r\n            var newLogin = CreateDennisUserLogin(user, login);\r\n            newLogin.RefreshToken = refreshToken;\r\n            userLogins.Add(newLogin);\r\n            return Task.FromResult(false);\r\n        }\r\n\r\n        private DennisUserLogin CreateDennisUserLogin(DennisUser user, UserLoginInfo login)\r\n        {\r\n            var dennisUserLogin = new DennisUserLogin();\r\n            dennisUserLogin.LoginProvider = login.LoginProvider;\r\n            dennisUserLogin.ProviderDisplayName = login.ProviderDisplayName;\r\n            dennisUserLogin.ProviderKey = login.ProviderKey;\r\n            dennisUserLogin.UserId = user.Id;\r\n            return dennisUserLogin;\r\n        }\r\n\r\n    }\r\n\r\n```\r\n\r\nand `UserManager`:\r\n\r\n```\r\n\r\n\r\n   public class DennisUserManager : UserManager<DennisUser>\r\n    {\r\n        public DennisUserManager(IUserStore<DennisUser> store, IOptions<IdentityOptions> optionsAccessor, IPasswordHasher<DennisUser> passwordHasher, IEnumerable<IUserValidator<DennisUser>> userValidators, IEnumerable<IPasswordValidator<DennisUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger<UserManager<DennisUser>> logger) : base(store, optionsAccessor, passwordHasher, userValidators, passwordValidators, keyNormalizer, errors, services, logger)\r\n        {\r\n\r\n        }\r\n\r\n        // IUserLoginStore methods\r\n        private IDennisUserStore GetStore()\r\n        {\r\n\r\n            var cast = Store as IDennisUserStore;\r\n            if (cast == null)\r\n            {\r\n                throw new NotSupportedException(\"Store Not IUserLoginStore\");\r\n            }\r\n            return cast;\r\n        }     \r\n\r\n        public async Task<IdentityResult> AddLoginAsync(DennisUser user, UserLoginInfo login, string refreshToken)\r\n        {\r\n            ThrowIfDisposed();\r\n            var loginStore = GetStore();\r\n            if (login == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(login));\r\n            }\r\n            if (user == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(user));\r\n            }\r\n\r\n            var existingUser = await FindByLoginAsync(login.LoginProvider, login.ProviderKey);\r\n            if (existingUser != null)\r\n            {\r\n                Logger.LogWarning(4, \"AddLogin for user {userId} failed because it was already associated with another user.\", await GetUserIdAsync(user));\r\n                return IdentityResult.Failed(ErrorDescriber.LoginAlreadyAssociated());\r\n            }\r\n            await loginStore.AddLoginAsync(user, login, refreshToken, CancellationToken);\r\n            return await UpdateUserAsync(user);\r\n        }\r\n    }\r\n\r\n```\r\n\r\nSo far this is a lot of work in order to be able to add one property to this entity but I thought I was close.\r\n\r\nI changed the razor UI code to call the new method on my UserManager instead which takes the refresh token,\r\n\r\nNow when I run the app, when attempting an external login, I get the following error:\r\n\r\n> InvalidOperationException: Cannot create a DbSet for 'IdentityUserLogin<int>' because this type is not included in the model for the context.\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityType()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.get_EntityQueryable()\r\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet<TEntity>.System.Linq.IQueryable.get_Provider()\r\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, Expression expression, CancellationToken cancellationToken)\r\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync<TSource, TResult>(MethodInfo operatorMethodInfo, IQueryable<TSource> source, LambdaExpression expression, CancellationToken cancellationToken)\r\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync<TSource>(IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>.FindUserLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>.FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Identity.SignInManager<TUser>.ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent, bool bypassTwoFactor)\r\nDennis.Areas.Identity.Pages.Account.ExternalLoginModel.OnGetCallbackAsync(string returnUrl, string remoteError) in ExternalLogin.cshtml.cs\r\n-\r\n            {\r\n                ErrorMessage = \"Error loading external login information.\";\r\n                return RedirectToPage(\"./Login\", new { ReturnUrl = returnUrl });\r\n            }\r\n            // Sign in the user with this external login provider if the user already has a login.\r\n            var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor : true);\r\n            if (result.Succeeded)\r\n            {\r\n                var tokens = info.AuthenticationTokens.ToArray();\r\n                // save the users \r\n                _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", info.Principal.Identity.Name, info.LoginProvider);\r\n                return LocalRedirect(returnUrl);\r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.ExecutorFactory+GenericTaskHandlerMethod.Convert<T>(object taskAsObject)\r\n\r\n\r\nIt seems something about the store is still specifically looking for `IdentityUserLogin<int>` which isn't part of my model anymore - because I am using my own derived type `DennisUserLogin`. However it doesn't appear I can inform the user store of that.. What am I missing?","Url":"https://github.com/aspnet/Identity/issues/1878","RelatedDescription":"Closed issue \"Custom IdentityUserLogin<int> and EF user store\" (#1878)"},{"Id":"341165815","IsPullRequest":false,"CreatedAt":"2018-07-13T21:32:17","Actor":"NinoFloris","Number":"1876","RawContent":null,"Title":"Can PasswordValidator errors pretty please be merged with UserValidator errors on user create?","State":"open","Body":"Talking about https://github.com/aspnet/Identity/blame/master/src/Core/UserManager.cs#L597\r\nCould instead of returning on `!succeeded` store them, run CreateAsync and merge them with those errors.\r\nThis is blocking a nice api where you get all errors of a registration in one go.","Url":"https://github.com/aspnet/Identity/issues/1876","RelatedDescription":"Open issue \"Can PasswordValidator errors pretty please be merged with UserValidator errors on user create?\" (#1876)"},{"Id":"340801603","IsPullRequest":true,"CreatedAt":"2018-07-13T02:40:43","Actor":"natemcmaster","Number":"1875","RawContent":null,"Title":"[2.1]: pin baseline package versions to 2.1.2","State":"closed","Body":"Part of https://github.com/aspnet/Home/issues/3316\n\nThis pins package versions to the 2.1.2 baseline. Universe will not override variables in the 'Pinned' section. This helps ensure that this repo does not upgrade its dependency versions for all future patches of 2.1.","Url":"https://github.com/aspnet/Identity/pull/1875","RelatedDescription":"Closed or merged PR \"[2.1]: pin baseline package versions to 2.1.2\" (#1875)"},{"Id":"340410768","IsPullRequest":false,"CreatedAt":"2018-07-11T21:23:15","Actor":"bigpodgurc","Number":"1874","RawContent":null,"Title":"using same ASP.net core identity for multiple web applicaitons","State":"open","Body":"Hello\r\n\r\nI want to have 3 different web applications but want to use same identity back end application so i have SSO. im using Individual user accounts\r\n\r\nthanks","Url":"https://github.com/aspnet/Identity/issues/1874","RelatedDescription":"Open issue \"using same ASP.net core identity for multiple web applicaitons\" (#1874)"},{"Id":"340388845","IsPullRequest":true,"CreatedAt":"2018-07-11T20:27:19","Actor":"dotnet-maestro-bot","Number":"1873","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @HaoK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1873","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1873)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"346394378","IsPullRequest":true,"CreatedAt":"2018-08-02T20:29:19","Actor":"Tratcher","Number":"2769","RawContent":null,"Title":"Verify request Content-Length","State":"closed","Body":" #2733 \r\nI had to re-order a few things to make sure the content-length header had been received and parsed before we acted on the end-of-stream flag.\r\n\r\nI'll do a seperate PR for the response length verification.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2769","RelatedDescription":"Closed or merged PR \"Verify request Content-Length\" (#2769)"},{"Id":"346692002","IsPullRequest":true,"CreatedAt":"2018-08-01T17:18:15","Actor":"JunTaoLuo","Number":"2771","RawContent":null,"Title":"Gracefully shutdown HTTP/2 connections on server shutdown","State":"open","Body":"Addresses https://github.com/aspnet/KestrelHttpServer/issues/2703 and https://github.com/aspnet/KestrelHttpServer/issues/2671. \r\n\r\nAdding a FSM to Http2Connection:\r\n1. Open - This is the initial state. During this state, we will process all incoming requests\r\n2. Closing - This state is reached upon receiving a GOAWAY from the client or when the server receives the signal to shutdown (via ctrl-c for example). During this state we will still process incoming frames on streams that are open. Once all streams complete, the connection will be closed. During server initiated shutdown, we will send a GOAWAY to the client with max value for highest opened stream id as a notification to the client that shutdown is imminent but we are still processing existing requests.\r\n3. Closed - This state is reached upon abortive shutdown, or when all remaining streams have been closed while in the Closing state. We send a final GOAWAY to the client that also include the actual highest opened stream ID we processed.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2771","RelatedDescription":"Open PR \"Gracefully shutdown HTTP/2 connections on server shutdown\" (#2771)"},{"Id":"346431060","IsPullRequest":false,"CreatedAt":"2018-08-01T03:05:58","Actor":"ryanbrandenburg","Number":"2770","RawContent":null,"Title":"Flaky test: DoesNotThrowObjectDisposedExceptionOnConnectionAbort","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=520317&buildTypeId=Lite_UniverseTest) occasionally with the following error:\r\n```\r\nSystem.Security.Cryptography.CryptographicException : Not enough storage is available to complete this operation.\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.<StartAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Start()\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.HttpsTests.<DoesNotThrowObjectDisposedExceptionOnConnectionAbort>d__6.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test DoesNotThrowObjectDisposedExceptionOnConnectionAbort at 2018-08-01T01:15:53\r\n| [0.026s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.191s] Microsoft.AspNetCore.Hosting.Internal.WebHost Critical: Application startup exception\r\n| System.Security.Cryptography.CryptographicException: Not enough storage is available to complete this operation.\r\n|    at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n|    at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n|    at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n|    at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureServer()\r\n|    at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n| [0.197s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hos\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2770","RelatedDescription":"Open issue \"Flaky test: DoesNotThrowObjectDisposedExceptionOnConnectionAbort\" (#2770)"},{"Id":"345903348","IsPullRequest":true,"CreatedAt":"2018-07-30T21:33:46","Actor":"halter73","Number":"2768","RawContent":null,"Title":"Disable memory pool late return validation in H2SpecTests","State":"closed","Body":"See https://ci3.dot.net/job/aspnet_KestrelHttpServer/job/release_2.2/job/linux-Configuration_Debug_prtest/42/console for the test failure this prevents.\r\n\r\n@JunTaoLuo We'll want to reenable this validation once graceful shutdown is implemented for HTTP/2.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2768","RelatedDescription":"Closed or merged PR \"Disable memory pool late return validation in H2SpecTests\" (#2768)"},{"Id":"345888716","IsPullRequest":true,"CreatedAt":"2018-07-30T19:25:33","Actor":"halter73","Number":"2767","RawContent":null,"Title":"Don't ACK ACKs","State":"closed","Body":"This should unblock our h2load tests.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2767","RelatedDescription":"Closed or merged PR \"Don't ACK ACKs\" (#2767)"},{"Id":"345441646","IsPullRequest":false,"CreatedAt":"2018-07-28T11:32:24","Actor":"ryanbrandenburg","Number":"2766","RawContent":null,"Title":"Flaky test: ClosingConnectionMidChunkPrefixThrows","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517539&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nSystem.Threading.Tasks.TaskCanceledException : The request was aborted\r\n---- Microsoft.AspNetCore.Connections.ConnectionAbortedException : The connection was aborted\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.<CopyToAsyncInternal>d__23.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ChunkedRequestTests.<>c__DisplayClass15_0.<<ClosingConnectionMidChunkPrefixThrows>b__0>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.<TimeoutAfter>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ChunkedRequestTests.<ClosingConnectionMidChunkPrefixThrows>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n----- Inner Stack Trace -----\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream.<ReadAsyncInternal>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline.<ReadInputAsync>d__18.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.<PumpAsync>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.<CopyToAsync>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.<CopyToAsyncInternal>d__23.MoveNext()\r\n------- Stdout: -------\r\n| [0.002s] TestLifetime Information: Starting test ClosingConnectionMidChunkPrefixThrows-http://127.0.0.1:0 at 2018-07-28T02:49:25\r\n| [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.059s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.059s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.073s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6IT8SMST\" started.\r\n| [0.077s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http:///  \r\n| [0.078s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6IT8SMST\", Request id \"0HLFK6IT8SMST:00000001\": started reading request body.\r\n| [0.078s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFK6IT8SMST\" received FIN.\r\n| [0.078s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6IT8SMST\" disconnecting.\r\n| [0.078s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFK6IT8SMST\" sending FIN.\r\n| [0.080s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6IT8SMST\", Request id \"0HLFK6IT8SMST:00000001\": done reading request body.\r\n| [0.080s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 2.9645ms 0 \r\n| [0.080s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6IT8SMST\" stopped.\r\n| [0.081s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.124s] TestLifetime Information: Finished test ClosingConnectionMidChunkPrefixThrows-http://127.0.0.1:0 in 0\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2766","RelatedDescription":"Open issue \"Flaky test: ClosingConnectionMidChunkPrefixThrows\" (#2766)"},{"Id":"345441641","IsPullRequest":false,"CreatedAt":"2018-07-28T11:32:20","Actor":"ryanbrandenburg","Number":"2765","RawContent":null,"Title":"Flaky test: AppCanHandleClientAbortingConnectionMidRequest","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517539&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nAssert.Throws() Failure\r\nExpected: typeof(System.IO.IOException)\r\nActual:   typeof(System.Threading.Tasks.TaskCanceledException): The request was aborted\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.<CopyToAsyncInternal>d__23.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.<>c__DisplayClass33_0.<<AppCanHandleClientAbortingConnectionMidRequest>b__1>d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test AppCanHandleClientAbortingConnectionMidRequest-http://127.0.0.1:0 at 2018-07-28T02:49:26\r\n| [0.021s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Debug: Connection id \"0HLFK6IT8SN2B\" started.\r\n| [0.047s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Debug: Connection id \"0HLFK6IT8SN2B\" disconnecting.\r\n| [0.048s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Debug: Connection id \"0HLFK6IT8SN2B\", Request id \"0HLFK6IT8SN2B:00000001\": started reading request body.\r\n| [0.049s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Debug: Connection id \"0HLFK6IT8SN2B\", Request id \"0HLFK6IT8SN2B:00000001\": done reading request body.\r\n| [0.051s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Error: Connection id \"0HLFK6IT8SN2B\", Request id \"0HLFK6IT8SN2B:00000001\": An unhandled exception was thrown by the application.\r\n| System.Threading.Tasks.TaskCanceledException: The request was aborted ---> Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n|    at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.<PumpAsync>d__4.MoveNext()\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n|    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.<CopyToAsync>d__22.MoveNext()\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.<CopyToAsyncInternal>d__23.MoveNext()\r\n|    --- End of inner exception stack trace ---\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.<CopyToAsyncInternal>d__23.MoveNext()\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.<>c__DisplayClass33_0.<<AppCanHandleClientAbortingConnectionMidRequest>b__1>d.MoveNext()\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n|    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n|    at Xunit.Assert.<RecordExceptionAsync>d__79.MoveNext()\r\n| [0.051s] Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests Debug: Connection id \"0HLFK6IT8SN2B\" stopped.\r\n| [0.064s] TestLifetime Information: Finished test AppCanHandleClientAbortingConnectionMidRequest-http://127.0.0.1:0 in 0.0637094s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2765","RelatedDescription":"Open issue \"Flaky test: AppCanHandleClientAbortingConnectionMidRequest\" (#2765)"},{"Id":"345441443","IsPullRequest":false,"CreatedAt":"2018-07-28T11:28:35","Actor":"ryanbrandenburg","Number":"2764","RawContent":null,"Title":"Flaky test: AppCanHandleClientAbortingConnectionMidResponse","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517722&buildTypeId=Releases_22xPublic_OsxUniverse) occasionally with the following error:\r\n```\r\nAssert.Empty() Failure\r\nCollection: [WriteContext { EventId = ConnectionError, Exception = System.IO.IOException: Protocol wrong type for socket ---> System.Net.Sockets.SocketException: Protocol wrong type for socket\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitable.GetResult() in /_/src/Kestrel.Transport.Sockets/Internal/SocketAwaitable.cs:line 40\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessSends() in /_/src/Kestrel.Transport.Sockets/Internal/SocketConnection.cs:line 264\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoSend() in /_/src/Kestrel.Transport.Sockets/Internal/SocketConnection.cs:line 207\r\n   --- End of inner exception stack trace ---, Formatter = Func`3 { ... }, LoggerName = \"Microsoft.AspNetCore.Server.Kestrel.Transport.Sock\"..., LogLevel = Information, ... }]\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.AppCanHandleClientAbortingConnectionMidResponse(ListenOptions listenOptions) in /_/test/Kestrel.FunctionalTests/ResponseTests.cs:line 2504\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test AppCanHandleClientAbortingConnectionMidResponse-http://127.0.0.1:0 at 2018-07-28T02:36:06\r\n| [0.002s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.002s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.002s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.004s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6BCT8FNS\" started.\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLFK6BCT8FNS\" reset.\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6BCT8FNS\" disconnecting.\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Information: Connection id \"0HLFK6BCT8FNS\" communication error.\r\n| System.IO.IOException: Protocol wrong type for socket ---> System.Net.Sockets.SocketException: Protocol wrong type for socket\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitable.GetResult() in /_/src/Kestrel.Transport.Sockets/Internal/SocketAwaitable.cs:line 40\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessSends() in /_/src/Kestrel.Transport.Sockets/Internal/SocketConnection.cs:line 264\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoSend() in /_/src/Kestrel.Transport.Sockets/Internal/SocketConnection.cs:line 207\r\n|    --- End of inner exception stack trace ---\r\n| [0.007s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLFK6BCT8FNS\" sending FIN.\r\n| [3.670s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 3665.804ms 200 \r\n| [3.670s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [3.671s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK6BCT8FNS\" stopped.\r\n| [3.673s] TestLifetime Information: Finished test AppCanHandleClientAbortingConnectionMidResponse-http://127.0.0.1:0 in 3.671811s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2764","RelatedDescription":"Open issue \"Flaky test: AppCanHandleClientAbortingConnectionMidResponse\" (#2764)"},{"Id":"345405958","IsPullRequest":false,"CreatedAt":"2018-07-28T01:28:03","Actor":"ryanbrandenburg","Number":"2763","RawContent":null,"Title":"Flaky test: ThrowsOnReadAfterConnectionError","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517557&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.ThrowsOnReadAfterConnectionError() in /_/test/Kestrel.FunctionalTests/RequestTests.cs:line 510\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.004s] TestLifetime Information: Starting test ThrowsOnReadAfterConnectionError at 2018-07-28T01:16:12\r\n| [0.032s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.052s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.053s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests\r\n| [0.056s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK4TJPI61V\" started.\r\n| [0.058s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  1\r\n| [0.071s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFK4TJPI61V\" reset.\r\n| [0.071s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK4TJPI61V\" disconnecting.\r\n| [0.072s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFK4TJPI61V\" sending FIN.\r\n| [0.073s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK4TJPI61V\", Request id \"0HLFK4TJPI61V:00000001\": done reading request body.\r\n| [0.074s] Microsoft.AspNetCore.Server.Kestrel Error: Connection id \"0HLFK4TJPI61V\", Request id \"0HLFK4TJPI61V:00000001\": An unhandled exception was thrown by the application.\r\n| System.Threading.Tasks.TaskCanceledException: The request was aborted ---> Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n|    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync() in /_/src/Kestrel.Core/Internal/Http/Http1MessageBody.cs:line 36\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n|    at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/MessageBody.cs:line 45\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.ReadAsyncInternal(Memory`1 buffer, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 129\r\n|    --- End of inner exception stack trace ---\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.ReadAsyncInternal(Memory`1 buffer, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 133\r\n|    at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.<>c__DisplayClass14_0.<<ThrowsOnReadAfterConnectionError>b__1>d.MoveNext() in /_/test/Kestrel.FunctionalTests/RequestTests.cs:line 485\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 554\r\n| [0.078s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 19.525ms 0 \r\n| [0.078s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFK4TJPI61V\" stopped.\r\n| [2.703s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [2.707s] TestLifetime Information: Finished test ThrowsOnReadAfterConnectionError in 2.70312s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2763","RelatedDescription":"Open issue \"Flaky test: ThrowsOnReadAfterConnectionError\" (#2763)"},{"Id":"345395630","IsPullRequest":true,"CreatedAt":"2018-07-27T23:42:54","Actor":"dotnet-maestro-bot","Number":"2762","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2762","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2762)"},{"Id":"345344763","IsPullRequest":false,"CreatedAt":"2018-07-27T23:12:27","Actor":"Tratcher","Number":"2760","RawContent":null,"Title":"Mitigate UseIIS conflict","State":"closed","Body":"Today CreateDefaultBuilder calls UseKestrel and then it calls UseIIS for conditional in-proc support. Each of these register IServer and the last one wins.\r\n\r\nThe conflict comes when you call UseKestrel again after CreateDefaultBuilder to set some options. This works fine when you run self-host (e.g. on your Mac), but when switch to IIS in-proc (like publishing to Azure) Kestrel replaces IIS in-proc and the server fails to start.\r\n\r\nThere's a workaround today where instead of calling UseKestrel you can call\r\n```\r\n                builder.ConfigureServices(services =>\r\n                {\r\n                    services.Configure<KestrelServerOptions>(options =>\r\n                    {\r\n                        // ...\r\n                    });\r\n                })\r\n```\r\n\r\nProposal: Promote the workaround to a top level API\r\n```\r\n                builder.ConfigureKestrel(options =>\r\n                {\r\n                    // ...\r\n                })\r\n```\r\n\r\nThis becomes a drop in replacement for anyone already calling UseKestrel. Discovery would be a problem still, but we could update our samples to help with that.\r\n\r\n@shirhatti @halter73 @pakrym @jkotalik \r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2760","RelatedDescription":"Closed issue \"Mitigate UseIIS conflict\" (#2760)"},{"Id":"345384266","IsPullRequest":true,"CreatedAt":"2018-07-27T23:11:30","Actor":"Tratcher","Number":"2761","RawContent":null,"Title":"Add new ConfigureKestrel extensions","State":"closed","Body":" #2760 To avoid conflicts with UseIIS.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2761","RelatedDescription":"Closed or merged PR \"Add new ConfigureKestrel extensions\" (#2761)"},{"Id":"345320992","IsPullRequest":true,"CreatedAt":"2018-07-27T20:03:10","Actor":"dotnet-maestro-bot","Number":"2759","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2759","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2759)"},{"Id":"343269349","IsPullRequest":true,"CreatedAt":"2018-07-27T20:01:44","Actor":"Tratcher","Number":"2743","RawContent":null,"Title":"Enable Http/2 by default","State":"closed","Body":" #2720 Making the default protocols Http1 and Http2. We want this for the previews to gather feedback. If it doesn't work out we can disable it again for RTM.\r\n\r\nWith these defaults:\r\nFor TLS it will rely on ALPN to select Http2 or else fall back to Http1.\r\nFor non-TLS it will pick Http1 (I removed one error check to enable this).\r\n\r\nOnce we get stephen's flow control [PR](#2740) in then we should be ready for this.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2743","RelatedDescription":"Closed or merged PR \"Enable Http/2 by default\" (#2743)"},{"Id":"345292984","IsPullRequest":false,"CreatedAt":"2018-07-27T16:39:38","Actor":"Tratcher","Number":"2758","RawContent":null,"Title":"Tune Window Update batching algorithm","State":"open","Body":"Http2 request data flow control needs to periodically send window updates for both the stream and connection to inform the client they're allowed to send more data. The current algorithm uses a minWindowSizeIncrement to prevent sending updates too frequently. The default for this value is 32kb, half of the total window size of 64kb. That seems too large when most of HTTP/2 is over TLS and TLS frame sizes are limited to 16kb. We also plan to provide settings to raise the window size and may even set the default higher.\r\n\r\nProposals:\r\n- Make initial window size and minWindowSizeIncrement independently configurable.\r\n- Run perf tests with different window sizes with particular attention to the TLS frame size.\r\n- Make sure the perf tests include variable levels of latency. High latency and infrequent window updates will cause significant jitter in the throughput.\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2758","RelatedDescription":"Open issue \"Tune Window Update batching algorithm\" (#2758)"},{"Id":"345055120","IsPullRequest":false,"CreatedAt":"2018-07-27T01:03:40","Actor":"ryanbrandenburg","Number":"2757","RawContent":null,"Title":"Flaky test: DoesNotThrowOnFin","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=516438&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nMicrosoft.AspNetCore.Connections.ConnectionResetException : Error -4077 ECONNRESET connection reset by peer\r\n---- Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException : Error -4077 ECONNRESET connection reset by peer\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync()\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.CopyToAsync(Stream destination, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 157\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.UpgradeTests.<>c__DisplayClass8_0.<<DoesNotThrowOnFin>b__0>d.MoveNext() in /_/test/Kestrel.FunctionalTests/UpgradeTests.cs:line 314\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.UpgradeTests.DoesNotThrowOnFin() in /_/test/Kestrel.FunctionalTests/UpgradeTests.cs:line 334\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test DoesNotThrowOnFin at 2018-07-27T00:15:06\r\n| [0.009s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.018s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.018s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.020s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFJAO0AVU8J\" started.\r\n| [0.020s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n| [0.140s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFJAO0AVU8J\" reset.\r\n| [0.140s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFJAO0AVU8J\" disconnecting.\r\n| [0.141s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFJAO0AVU8J\" sending FIN.\r\n| [0.144s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.144s] Microsoft.AspNetCore.Server.Kestrel Error: Connection id \"0HLFJAO0AVU8J\", Request id \"0HLFJAO0AVU8J:00000001\": An unhandled exception was thrown by the application.\r\n| Microsoft.AspNetCore.Connections.ConnectionResetException: Error -4077 ECONNRESET connection reset by peer ---> Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -4077 ECONNRESET connection reset by peer\r\n|    --- End of inner exception stack trace ---\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync()\r\n|    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n|    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n|    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.CopyToAsync(Stream destination, CancellationToken cancellationToken)\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 157\r\n|    at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.UpgradeTests.<>c__DisplayClass8_0.<<DoesNotThrowOnFin>b__0>d.MoveNext() in /_/test/Kestrel.FunctionalTests/UpgradeTests.cs:line 314\r\n| --- End of stack trace from previous location where exception was thrown ---\r\n|    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 555\r\n| [0.149s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 128.7423ms 101 \r\n| [0.149s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFJAO0AVU8J\" stopped.\r\n| [0.165s] TestLifetime Information: Finished test DoesNotThrowOnFin in 0.1639264s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2757","RelatedDescription":"Open issue \"Flaky test: DoesNotThrowOnFin\" (#2757)"},{"Id":"345041634","IsPullRequest":false,"CreatedAt":"2018-07-26T23:40:28","Actor":"halter73","Number":"2756","RawContent":null,"Title":"Send an HTTP/2 RST_STREAM frame when an app completes prior to receiving END_STREAM","State":"open","Body":"This should prevent any stalls on the client caused by not sending stream-level window updates for streams after the app completes.\r\n\r\n@Tratcher also suggested starting a timeout when the RST_STREAM frame is sent after which Kestrel would stop tracking the stream. From that point on, the connection would be aborted if any data frames are received for the reset stream.\r\n\r\nSee #2740\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2756","RelatedDescription":"Open issue \"Send an HTTP/2 RST_STREAM frame when an app completes prior to receiving END_STREAM\" (#2756)"},{"Id":"344158360","IsPullRequest":true,"CreatedAt":"2018-07-26T16:06:49","Actor":"natemcmaster","Number":"2747","RawContent":null,"Title":"Merge/release/2.1 to release/2.2","State":"closed","Body":"Notably, includes @halter73's change to merge BufferWriter and CountingBufferWriter and #2717.\r\n\r\nSee also https://github.com/aspnet/Common/pull/390","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2747","RelatedDescription":"Closed or merged PR \"Merge/release/2.1 to release/2.2\" (#2747)"},{"Id":"344904428","IsPullRequest":false,"CreatedAt":"2018-07-26T15:55:22","Actor":"natemcmaster","Number":"2755","RawContent":null,"Title":"Investigate why Kestrel tests almost always fail in VSTS","State":"open","Body":"We tried enabled Kestrel in VSTS. Something in that environment does not agree with the way we've written tests. I've disabled VSTS altogether because it is not a useful PR validation check if it always fails.\r\n\r\nhttps://dotnet.visualstudio.com/public/_build/index?context=allDefinitions&path=%5Caspnet%5CKestrelHttpServer&definitionId=66&_a=completed\r\n\r\n![image](https://user-images.githubusercontent.com/2696087/43273532-8634c62a-90b1-11e8-97da-9220393f1c3a.png)\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2755","RelatedDescription":"Open issue \"Investigate why Kestrel tests almost always fail in VSTS\" (#2755)"},{"Id":"344681640","IsPullRequest":false,"CreatedAt":"2018-07-26T03:28:23","Actor":"ryanbrandenburg","Number":"2754","RawContent":null,"Title":"Flaky test: CanRebindToMultipleEndPoints","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=515652&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nSystem.IO.IOException : Failed to bind to address http://127.0.0.1:63406: address already in use.\r\n---- Microsoft.AspNetCore.Connections.AddressInUseException : Only one usage of each socket address (protocol/network address/port) is normally permitted.\r\n-------- System.Net.Sockets.SocketException : Only one usage of each socket address (protocol/network address/port) is normally permitted.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 108\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/ListenOptions.cs:line 196\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 234\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 46\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 162\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Start()\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.CanRebindToMultipleEndPoints() in /_/test/Kestrel.FunctionalTests/AddressRegistrationTests.cs:line 768\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 99\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext() in /_/src/Kestrel.Core/KestrelServer.cs:line 159\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 104\r\n----- Inner Stack Trace -----\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 95\r\n------- Stdout: -------\r\n| [0.002s] TestLifetime Information: Starting test CanRebindToMultipleEndPoints at 2018-07-26T01:53:08\r\n| [0.010s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.012s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.012s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.FunctionalTests\r\n| [0.016s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCN\" started.\r\n| [0.016s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.0 GET http://127.0.0.1:63406/  \r\n| [0.017s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 0.6529ms 200 \r\n| [0.017s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCN\" disconnecting.\r\n| [0.017s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLFIJA3FAJCN\" sending FIN.\r\n| [0.017s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCN\" stopped.\r\n| [0.020s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCO\" started.\r\n| [0.020s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.0 GET http://[::1]:63406/  \r\n| [0.021s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 0.2822ms 200 \r\n| [0.021s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCO\" disconnecting.\r\n| [0.021s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \"0HLFIJA3FAJCO\" sending FIN.\r\n| [0.021s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.021s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFIJA3FAJCO\" stopped.\r\n| [0.026s] TestLifetime Information: Finished test CanRebindToMultipleEndPoints in 0.0243292s\r\n```\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2754","RelatedDescription":"Open issue \"Flaky test: CanRebindToMultipleEndPoints\" (#2754)"},{"Id":"344436248","IsPullRequest":false,"CreatedAt":"2018-07-25T20:04:11","Actor":"nagarjunacts","Number":"2753","RawContent":null,"Title":"System.ArgumentOutOfRangeException: Count cannot be less than zero. Parameter name: count","State":"closed","Body":"My app hosted in azure had lot of failure on secondary instance. When investigating the app logs we had x number of requests returning 500 and no corresponding exception in application insights. The ones that did made to server returned this error tagged to operation_Id.\r\n\r\n> System.ArgumentOutOfRangeException: Count cannot be less than zero.\r\n> Parameter name: count\r\n>    at System.String.CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count)\r\n>    at System.IO.StreamWriter.Write(String value)\r\n>    at Microsoft.AspNetCore.Hosting.Views.ErrorPage.<ExecuteAsync>d__6.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.Extensions.RazorViews.BaseView.<ExecuteAsync>d__29.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\n\r\n\r\nI am not sure if this is an issue, could anyone tell me how to solve this from happening. THis happens intermittently and i believe this brings the app down.\r\n\r\nExtra information\r\n```\r\n{\r\n   \"parsedStack\":[\r\n      {\r\n         \"method\":\"System.String.CopyTo\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":0,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.IO.StreamWriter.Write\",\r\n         \"assembly\":\"System.Runtime.Extensions, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\",\r\n         \"level\":1,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.AspNetCore.Hosting.Views.ErrorPage+<ExecuteAsync>d__6.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Hosting, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":2,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":3,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":4,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":5,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.Extensions.RazorViews.BaseView+<ExecuteAsync>d__29.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Hosting, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":6,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":7,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess\",\r\n         \"assembly\":\"System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\",\r\n         \"level\":8,\r\n         \"line\":0\r\n      },\r\n      {\r\n         \"method\":\"Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1+<ProcessRequestsAsync>d__2.MoveNext\",\r\n         \"assembly\":\"Microsoft.AspNetCore.Server.Kestrel.Core, Version=2.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\",\r\n         \"level\":9,\r\n         \"line\":0\r\n      }\r\n   ],\r\n   \"outerId\":\"0\",\r\n   \"message\":\"Connection id \\\"0HLFGA416MUIK\\\", Request id \\\"0HLFGA416MUIK:00000313\\\": An unhandled exception was thrown by the application.\",\r\n   \"type\":\"System.ArgumentOutOfRangeException\",\r\n   \"id\":\"28060465\",\r\n   \"severityLevel\":\"Error\"\r\n}\r\n```\r\n\r\nThanks\r\n ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2753","RelatedDescription":"Closed issue \"System.ArgumentOutOfRangeException: Count cannot be less than zero. Parameter name: count\" (#2753)"},{"Id":"344278761","IsPullRequest":false,"CreatedAt":"2018-07-25T15:35:39","Actor":"ryanbrandenburg","Number":"2752","RawContent":null,"Title":"Flaky test: ClosingConnectionMidChunkPrefixThrows","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=514205&buildTypeId=Releases_21Public_Win2012) occasionally with the following error:\r\n```\r\nAssert.Equal() Failure\r\n          ↓ (pos 0)\r\nExpected: \r\nActual:   HTTP/1.1 200 OK\\r\\nDate: Wed, 25 Jul 2018 0···\r\n          ↑ (pos 0)\r\n   at Microsoft.AspNetCore.Testing.TestConnection.<ReceiveEnd>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ChunkedRequestTests.<ClosingConnectionMidChunkPrefixThrows>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2752","RelatedDescription":"Closed issue \"Flaky test: ClosingConnectionMidChunkPrefixThrows\" (#2752)"},{"Id":"344275007","IsPullRequest":false,"CreatedAt":"2018-07-25T03:04:41","Actor":"ryanbrandenburg","Number":"2751","RawContent":null,"Title":"Flaky test: DefaultsServerAddress_BindsToIPv6WithHttps","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=514255&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.AggregateException : An error occurred while writing to logger(s). (Unexpected critical error. Log Critical[0]: Unable to start Kestrel. System.IO.IOException: Failed to bind to address https://[::1]:5001: address already in use. ---> Microsoft.AspNetCore.Connections.AddressInUseException: Address already in use ---> System.Net.Sockets.SocketException: Address already in use\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 95\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 99\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext() in /_/src/Kestrel.Core/KestrelServer.cs:line 159\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 104\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 108\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/LocalhostListenOptions.cs:line 56\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.DefaultAddressStrategy.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 177\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 46\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 162)\r\n---- System.Exception : Unexpected critical error. Log Critical[0]: Unable to start Kestrel. System.IO.IOException: Failed to bind to address https://[::1]:5001: address already in use. ---> Microsoft.AspNetCore.Connections.AddressInUseException: Address already in use ---> System.Net.Sockets.SocketException: Address already in use\r\n   at System.Net.Sockets.Socket.UpdateStatusAfterSocketErrorAndThrowException(SocketError error, String callerName)\r\n   at System.Net.Sockets.Socket.DoBind(EndPoint endPointSnapshot, SocketAddress socketAddress)\r\n   at System.Net.Sockets.Socket.Bind(EndPoint localEP)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 95\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.SocketTransport.BindAsync() in /_/src/Kestrel.Transport.Sockets/SocketTransport.cs:line 99\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext() in /_/src/Kestrel.Core/KestrelServer.cs:line 159\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 104\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(ListenOptions endpoint, AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 108\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/LocalhostListenOptions.cs:line 56\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.DefaultAddressStrategy.BindAsync(AddressBindContext context) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 177\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2 createBinding) in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 46\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StartAsync[TContext](IHttpApplication`1 application, CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 162\r\n-------- System.IO.IOException : Failed to bind to address https://[::1]:5001: address already in use.\r\n------------ Microsoft.AspNetCore.Connections.AddressInUseException : Address already in use\r\n---------------- System.Net.Sockets.SocketException : Address already in use\r\n   at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.KestrelTrace.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/src/Kestrel.Core/Internal/Infrastructure/KestrelTrace.cs:line 232\r\n   at Microsoft.Extensions.Logging.LoggerExtensions.Log(ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, String message, Object[] args)\r\n   at Microsoft.Extensions.Logging.LoggerExtensions.LogCritical(ILogger logger, EventId eventId, Exception exception, String message, Object[] args)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.Sta\r\n...\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2751","RelatedDescription":"Open issue \"Flaky test: DefaultsServerAddress_BindsToIPv6WithHttps\" (#2751)"},{"Id":"344254201","IsPullRequest":false,"CreatedAt":"2018-07-25T01:01:19","Actor":"ryanbrandenburg","Number":"2750","RawContent":null,"Title":"Flaky test: WritingToConnectionAfterUnobservedCloseTriggersRequestAbortedToken","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=514027&buildTypeId=Releases_21Public_UbuntuUniverse) occasionally with the following error:\r\n```\r\nMoq.MockException : \r\nExpected invocation on the mock once, but was 0 times: t => t.ConnectionStop(It.IsAny<String>())\r\nNo setups configured.\r\nPerformed invocations:\r\nKestrelTrace.IsEnabled(Critical)\r\nKestrelTrace.BeginScope<ConnectionLogScope>([[ConnectionId, 0HLFHOOITD5M5]])\r\nKestrelTrace.ConnectionStart(\"0HLFHOOITD5M5\")\r\nKestrelTrace.ConnectionDisconnect(\"0HLFHOOITD5M5\")\r\nKestrelTrace.ApplicationError(\"0HLFHOOITD5M5\", \"0HLFHOOITD5M5:00000001\", System.OperationCanceledException: The operation was canceled.\r\n   at System.Threading.CancellationToken.ThrowOperationCanceledException()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseStream.ValidateState(CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpResponseStream.cs:line 168\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpResponseStream.cs:line 111\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<>c__DisplayClass61_0.<<WritingToConnectionAfterUnobservedCloseTriggersRequestAbortedToken>b__6>d.MoveNext() in /_/test/Kestrel.FunctionalTests/ResponseTests.cs:line 2398\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\Record.cs:line 82)\r\n   at Moq.Mock.ThrowVerifyException(MethodCall expected, IEnumerable`1 setups, IEnumerable`1 actualCalls, Expression expression, Times times, Int32 callCount)\r\n   at Moq.Mock.VerifyCalls(Interceptor targetInterceptor, MethodCall expected, Expression expression, Times times)\r\n   at Moq.Mock.Verify[T](Mock`1 mock, Expression`1 expression, Times times, String failMessage)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.WritingToConnectionAfterUnobservedCloseTriggersRequestAbortedToken(ListenOptions listenOptions) in /_/test/Kestrel.FunctionalTests/ResponseTests.cs:line 2432\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2750","RelatedDescription":"Open issue \"Flaky test: WritingToConnectionAfterUnobservedCloseTriggersRequestAbortedToken\" (#2750)"},{"Id":"344239417","IsPullRequest":false,"CreatedAt":"2018-07-24T23:31:18","Actor":"ryanbrandenburg","Number":"2749","RawContent":null,"Title":"Flaky test: OnCompletedCallbacksAreCalledInLastInFirstOutOrder","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=513798&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nSystem.IO.IOException : Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..\r\n---- System.Net.Sockets.SocketException : An existing connection was forcibly closed by the remote host.\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)\r\n   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)\r\n   at System.IO.StreamReader.ReadBufferAsync()\r\n   at System.IO.StreamReader.ReadAsyncInternal(Memory`1 buffer, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task`1 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n   at Microsoft.AspNetCore.Testing.TestConnection.ReceiveEnd(String[] lines) in /_/test/shared/TestConnection.cs:line 157\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.OnCompletedCallbacksAreCalledInLastInFirstOutOrder(ListenOptions listenOptions) in /_/test/Kestrel.FunctionalTests/ResponseTests.cs:line 2742\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test OnCompletedCallbacksAreCalledInLastInFirstOutOrder-http://127.0.0.1:0 at 2018-07-24T22:27:33\r\n| [0.002s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.005s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFHMID37HQB\" started.\r\n| [0.006s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFHMID37HQB\" completed keep alive response.\r\n| [0.006s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 0.2481ms 200 \r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFHMID37HQB\" received FIN.\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFHMID37HQB\" disconnecting.\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLFHMID37HQB\" sending FIN.\r\n| [0.006s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFHMID37HQB\" stopped.\r\n| [0.057s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.060s] TestLifetime Information: Finished test OnCompletedCallbacksAreCalledInLastInFirstOutOrder-http://127.0.0.1:0 in 0.0590048s\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2749","RelatedDescription":"Open issue \"Flaky test: OnCompletedCallbacksAreCalledInLastInFirstOutOrder\" (#2749)"},{"Id":"344237658","IsPullRequest":false,"CreatedAt":"2018-07-24T23:22:04","Actor":"ryanbrandenburg","Number":"2748","RawContent":null,"Title":"Flaky test: LoggingConnectionAdapterCanBeAddedBeforeAndAfterHttpsAdapter","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=514007&buildTypeId=Lite_KestrelStressTest) occasionally with the following error:\r\n```\r\nSystem.IO.IOException : Authentication failed because the remote party has closed the transport stream.\r\n   at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.<GetStream>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.<GetStringAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.<GetStringAsync>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Testing.TaskExtensions.<TimeoutAfter>d__0`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.LoggingConnectionAdapterTests.<LoggingConnectionAdapterCanBeAddedBeforeAndAfterHttpsAdapter>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n------- Stdout: -------\r\n| [0.014s] TestLifetime Information: Starting test LoggingConnectionAdapterCanBeAddedBeforeAndAfterHttpsAdapter at 2018-07-24T22:59:13\r\n| [0.138s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [16.079s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [16.079s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests\r\n| [17.132s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLFHN4EFEI6B\" started.\r\n| [17.141s] LoggingConnectionAdapter Debug: ReadAsync[5] 16 03 03 00 C8 \r\n|                                           \\x16\\x03\\x03\\0È\r\n| [17.143s] LoggingConnectionAdapter Debug: ReadAsync[200] 01 00 00 C4 03 03 5B 57 AF 53 A0 07 5D DC BE E1 C6 BD 40 0E F8 00 29 3F 00 79 51 F6 49 CC BA 7B CE 48 3E 6D BF C8 20 38 20 00 00 C3 7B 2C F9 7D C1 97 E4 C3 77 D9 C4 3C 91 49 6F AE A8 5C 8E C3 EE 29 62 CD 60 35 FC 00 34 C0 28 C0 27 C0 14 C0 13 00 9F 00 9E 00 9D 00 9C 00 3D 00 3C 00 35 00 2F C0 2C C0 2B C0 24 C0 23 C0 0A C0 09 00 6A 00 40 00 38 00 32 00 0A 00 13 00 05 00 04 01 00 00 47 00 00 00 0E 00 0C 00 00 09 6C 6F 63 61 6C 68 6F 73 74 00 0A 00 06 00 04 00 17 00 18 00 0B 00 02 01 00 00 0D 00 14 00 12 06 01 06 03 04 01 05 01 02 01 04 03 05 03 02 03 02 02 00 23 00 00 00 17 00 00 FF 01 00 01 00 \r\n|                                           \\x01\\0\\0Ä\\x03\\x03[W¯S \\x07]Ü¾áÆ½@\\x0eø\\0)?\\0yQöIÌº{ÎH>m¿È 8 \\0\\0Ã{,ù}ÁäÃwÙÄ<Io®¨\\Ãî)bÍ`5ü\\04À(À'À\\x14À\\x13\\0\\0\\0\\0\\0=\\0<\\05\\0/À,À+À$À#À\r\nÀ    \\0j\\0@\\08\\02\\0\r\n\\0\\x13\\0\\x05\\0\\x04\\x01\\0\\0G\\0\\0\\0\\x0e\\0\\u000c\\0\\0    localhost\\0\r\n\\0\\x06\\0\\x04\\0\\x17\\0\\x18\\0\\u000b\\0\\x02\\x01\\0\\0\r\n\\0\\x14\\0\\x12\\x06\\x01\\x06\\x03\\x04\\x01\\x05\\x01\\x02\\x01\\x04\\x03\\x05\\x03\\x02\\x03\\x02\\x02\\0#\\0\\0\\0\\x17\\0\\0ÿ\\x01\\0\\x01\\0\r\n| [17.144s] Microsoft.AspNetCore.Server.Kestrel Error: Uncaught exception from the OnConnectionAsync method of an IConnectionAdapter.\r\n| System.AggregateException: One or more errors occurred. ---> System.AggregateException: An error occurred while writing to logger(s). ---> System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n|    at Serilog.Parsing.MessageTemplateParser.ParsePropertyToken(Int32 startAt, String messageTemplate, Int32& next)\r\n|    at Serilog.Parsing.MessageTemplateParser.<Tokenize>d__1.MoveNext()\r\n|    at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n|    at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n|    at Serilog.Events.MessageTemplate..ctor(String text, IEnumerable`1 tokens)\r\n|    at Serilog.Parsing.MessageTemplateParser.Parse(String messageTemplate)\r\n|    at Serilog.Extensions.Logging.SerilogLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n|    at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exce\r\n...\r\n```\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2748","RelatedDescription":"Open issue \"Flaky test: LoggingConnectionAdapterCanBeAddedBeforeAndAfterHttpsAdapter\" (#2748)"},{"Id":"344150883","IsPullRequest":true,"CreatedAt":"2018-07-24T20:16:28","Actor":"dotnet-maestro-bot","Number":"2746","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @Eilon\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2746","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2746)"},{"Id":"343991840","IsPullRequest":false,"CreatedAt":"2018-07-24T11:14:16","Actor":"fschlaef","Number":"2745","RawContent":null,"Title":"System.InvalidOperationException: Concurrent reads or writes are not supported (possible denial of service)","State":"open","Body":"I got a very strange bug happening yesterday, seemingly randomly. I was debugging an issue with Internet Explorer 11 when suddenly the whole app went haywire, GC triggering tons of time back-to-back and debug log filling with the same exception over and over.\r\n\r\nHowever, I was unable to reproduce the bug. Here is all the information I have :\r\n\r\nError message : `Long Polling transport was terminated due to an error on connection.`\r\n\r\nStack trace (there is no mistake here, this is **one** stack trace).\r\n```\r\nSystem.InvalidOperationException: Concurrent reads or writes are not supported.\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport.ProcessRequestAsync(HttpContext context, CancellationToken token)\r\n```\r\n\r\nThe very same exception with the same stack trace was thrown over 600 times in less than a minute (and not showing any sign of stopping on its own before I shut it down), considerably slowing down the application, hence the \"possible DoS\" in the title.\r\n\r\n### Steps to reproduce\r\nI have no idea. However I can confidently say that the use of Internet Explorer 11 played a big role, because the only thing possibly using Long Polling on my project is SignalR, and every other browser supports WebSockets, which IE11 doesn't.\r\n\r\nI couldn't decide in which repo to open this bug in, I chose this one by default. Let me know if it is misplaced.\r\n\r\n### Further technical details\r\nASP.Net Core version : 2.1.2\r\nOperating system: Windows 7\r\nIDE: Visual Studio 2017 15.7.5\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2745","RelatedDescription":"Open issue \"System.InvalidOperationException: Concurrent reads or writes are not supported (possible denial of service)\" (#2745)"},{"Id":"343743677","IsPullRequest":false,"CreatedAt":"2018-07-23T18:26:03","Actor":"joshfree","Number":"2744","RawContent":null,"Title":"System.IO.IOException in Kestrel (.net core 2.1.300) on Windows","State":"open","Body":"Original issue from https://github.com/dotnet/core/issues/1798 \r\n\r\n\r\n**_@tamasVajda commented 5 days ago_**\r\nWe use .net core app with hosted Kestrel web server. During Some requests Kestrel throw the following exception at the end of the corresponding request:\r\n\r\n> info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n>       Request finished in 1.0512ms 200\r\n> info: Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets[14]\r\n>       Connection id \"0HLFB5I99V5O0\" communication error.\r\n> System.IO.IOException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitable.GetResult()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n>    --- End of inner exception stack trace ---\r\n> info: Microsoft.AspNetCore.Server.Kestrel[20]\r\n>       Connection id \"0HLFB5I99V5O0\" request processing ended abnormally.\r\n> System.IO.IOException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketAwaitable.GetResult()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessReceives()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoReceive()\r\n>    --- End of inner exception stack trace ---\r\n>    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n>    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n>    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n>    at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n>    at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n>    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.ProcessSends()\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.Internal.SocketConnection.DoSend() \r\n\r\nThe server tries to provide a file to the client like the following example:\r\n\r\n>  public async Task ProcessRequest(HttpContext context)\r\n>         {\r\n>  // some file operations\r\n>    string sourcePath = context.Request.Query[\"File2Download\"].ToString();\r\n>                if (!File.Exists(fileToSend))\r\n>                 {\r\n>                     context.Response.StatusCode = StatusCodes.Status404NotFound;\r\n>                     return;\r\n>                 }\r\n>                 await context.Response.SendFileAsync(fileToSend);\r\n> }\r\n\r\nOn client site we use System.Net.Http.HttpClient without redefining Default request header, and PostAsync to sending the get request to the server.\r\n\r\nIf the connection would broken it would throw kestrel connection lost exception instead of this. \r\n\r\nThis issue occurred just on Windows 10, on Cent OS 7, and on Debian 9 the same scenario doesn't cause this problem.\r\n\r\n Have you any idea what can cause this \r\n\r\n> System.IO.IOException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond   exception?\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2744","RelatedDescription":"Open issue \"System.IO.IOException in Kestrel (.net core 2.1.300) on Windows\" (#2744)"},{"Id":"343205219","IsPullRequest":false,"CreatedAt":"2018-07-20T18:27:28","Actor":"Tratcher","Number":"2742","RawContent":null,"Title":"Consider using response headers & data padding","State":"open","Body":"https://tools.ietf.org/html/rfc7540#section-6.1\r\n\"   DATA frames MAY also contain padding.  Padding can be added to DATA\r\n   frames to obscure the size of messages.  Padding is a security\r\n   feature; see Section 10.7.\"\r\n\r\n\"The HEADERS frame can include padding. \"\r\n\r\nhttps://tools.ietf.org/html/rfc7540#section-10.7\r\n\"   Padding can be used to obscure the exact size of frame content and is\r\n   provided to mitigate specific attacks within HTTP, for example,\r\n   attacks where compressed content includes both attacker-controlled\r\n   plaintext and secret data (e.g., [BREACH]).\"\r\n\r\n@blowdart \r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2742","RelatedDescription":"Open issue \"Consider using response headers & data padding\" (#2742)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"346983563","IsPullRequest":false,"CreatedAt":"2018-08-02T12:11:45","Actor":"gregoryagu","Number":"2524","RawContent":null,"Title":"How to set default page during development","State":"closed","Body":"I have already posted this [question](https://stackoverflow.com/questions/48684461/razor-pages-default-page-in-aspnetcore-2) on stack overflow, but it is still unresolved.\r\n\r\nThe issue is that during development, you don't want to always start with the Index page. For example you are working on a SignIn page.\r\n\r\nYou don't want to always start the app on the Index page, then navigate to the SignIn page.\r\n\r\nBut there is no way to set the default to the signin page without removing the Index page.\r\n\r\nBut you don't want to remove or rename the Index page, because that page is also needed just like it is.\r\n\r\nIf you right click the SignIn page and select \"View In Browser\" the Index Page appears, not the signin page.\r\n\r\n","Url":"https://github.com/aspnet/Razor/issues/2524","RelatedDescription":"Closed issue \"How to set default page during development\" (#2524)"},{"Id":"346818012","IsPullRequest":false,"CreatedAt":"2018-08-02T00:38:41","Actor":"PerdixDaedalus","Number":"2523","RawContent":null,"Title":"Localizer For Partial Views Issue (.Net Core)","State":"open","Body":"Localizer For Partial Views Issue\r\n\r\nHi,\r\n\r\nI already acquiring the strings from Localizer but only in the main view. How can I use the Localizer of the main view for the partial views inside of it? Because when I see the instance of Localizer of the partial views, it is trying to find the folder reference. I don't want that, I want it to use the Localizer of the certain main view that called the partial views. \r\n\r\nI also know that I can pass the Localizer as ViewData to the partial views but I'm not satisfied with that way.\r\n\r\nOr is their a way to force what Localizer should be used?\r\n\r\nThanks in advance!","Url":"https://github.com/aspnet/Razor/issues/2523","RelatedDescription":"Open issue \"Localizer For Partial Views Issue (.Net Core)\" (#2523)"},{"Id":"346814296","IsPullRequest":true,"CreatedAt":"2018-08-02T00:15:44","Actor":"ajaybhargavb","Number":"2522","RawContent":null,"Title":" Initial infrastrucure for a better html parser ","State":"open","Body":"#2508 \r\n\r\nThis PR contains the initial infrastructure to make the html syntax tree more structured. This includes adding new syntax node types and adding a way for them to cooperate with the existing node types.\r\n\r\nMore specifically this PR aims to represent any HTML text content with these new syntax nodes.\r\n\r\nSome examples, \r\n```HTML\r\n<div>Foo</div>\r\n     ^ ^\r\n\r\n<span>Hello<span>  Foo  <span>World </span>\r\n      ^   ^      ^     ^      ^    ^\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2522","RelatedDescription":"Open PR \" Initial infrastrucure for a better html parser \" (#2522)"},{"Id":"346321523","IsPullRequest":true,"CreatedAt":"2018-07-31T20:01:45","Actor":"dotnet-maestro-bot","Number":"2521","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @ajaybhargavb\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2521","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2521)"},{"Id":"346274042","IsPullRequest":false,"CreatedAt":"2018-07-31T18:55:46","Actor":"pranavkm","Number":"2519","RawContent":null,"Title":"rzc.dll - Do a better job handling AggregateExceptions","State":"closed","Body":"Instead of looking at the first [`InnerException`](https://github.com/aspnet/Razor/blob/master/src/Microsoft.AspNetCore.Razor.Tools/Application.cs#L58-L63), this should call `Flatten` and print all available inner exceptions. This should handle both nested AggregateExceptions as well as multiple thrown exceptions. Vitally important for good stack traces since code generation occurs inside of a `Parallel.For`.","Url":"https://github.com/aspnet/Razor/issues/2519","RelatedDescription":"Closed issue \"rzc.dll - Do a better job handling AggregateExceptions\" (#2519)"},{"Id":"346304750","IsPullRequest":true,"CreatedAt":"2018-07-31T18:40:51","Actor":"ajaybhargavb","Number":"2520","RawContent":null,"Title":"Flatten AggregateExceptions in rzc","State":"closed","Body":"#2519 \r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2520","RelatedDescription":"Closed or merged PR \"Flatten AggregateExceptions in rzc\" (#2520)"},{"Id":"345938000","IsPullRequest":false,"CreatedAt":"2018-07-31T17:19:02","Actor":"josejmoran","Number":"2515","RawContent":null,"Title":"@ViewData[\"Title\"] is of IndexModel type error","State":"closed","Body":"After I scaffold Identity to have the files in my project. Initially everything works well, but when I try to click on the email link that appears next to Logout I get an error stating that ViewData somehow is of the wrong type. I replace the code with a string instead of using ViewData and the error moves to where you are assigning a value to ViewData on Index.cshtml of the Identity code. I commented those lines too and I do get still an error.\r\n\r\nBelow is the error:\r\n\r\nAn unhandled exception occurred while processing the request.\r\nInvalidOperationException: The model item passed into the ViewDataDictionary is of type 'WebApplication7.Areas.Identity.Pages.Account.Manage.IndexModel', but this ViewDataDictionary instance requires a model item of type 'System.String'.\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.EnsureCompatible(object value)\r\n\r\nStack Query Cookies Headers\r\nInvalidOperationException: The model item passed into the ViewDataDictionary is of type 'WebApplication7.Areas.Identity.Pages.Account.Manage.IndexModel', but this ViewDataDictionary instance requires a model item of type 'System.String'.\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.EnsureCompatible(object value)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary..ctor(ViewDataDictionary source, object model, Type declaredModelType)\r\nlambda_method(Closure , ViewDataDictionary )\r\nMicrosoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.CreateViewDataDictionary(ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.Activate(object page, ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorPageActivator.Activate(IRazorPage page, ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, bool invokeViewStarts)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.RenderPartialViewAsync(TextWriter writer, object model)\r\nMicrosoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.ProcessAsync(TagHelperContext context, TagHelperOutput output)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner.RunAsync(TagHelperExecutionContext executionContext)\r\nWebApplication7.Areas.Identity.Pages.Account.Manage.Areas_Identity_Pages_Account_Manage_Index.ExecuteAsync() in Index.cshtml\r\n+\r\n<h4>@ViewData[\"Title\"]</h4>\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageCoreAsync(IRazorPage page, ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderPageAsync(IRazorPage page, ViewContext context, bool invokeViewStarts)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView.RenderAsync(ViewContext context)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.ExecuteAsync(ViewContext viewContext, string contentType, Nullable<int> statusCode)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync<TFilter, TFilterAsync>()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext<TFilter, TFilterAsync>(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\nShow raw exception details","Url":"https://github.com/aspnet/Razor/issues/2515","RelatedDescription":"Closed issue \"@ViewData[\"Title\"] is of IndexModel type error\" (#2515)"},{"Id":"345974547","IsPullRequest":true,"CreatedAt":"2018-07-30T23:36:07","Actor":"pranavkm","Number":"2518","RawContent":null,"Title":"Lock when reading \\ writing process output","State":"closed","Body":"Fixes #2516","Url":"https://github.com/aspnet/Razor/pull/2518","RelatedDescription":"Closed or merged PR \"Lock when reading \\ writing process output\" (#2518)"},{"Id":"345938427","IsPullRequest":false,"CreatedAt":"2018-07-30T23:22:01","Actor":"ryanbrandenburg","Number":"2516","RawContent":null,"Title":"Flaky test: Pack_Works_IncludesRazorAssembly","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=518632&buildTypeId=XPlat_Windows_Win10Universe) occasionally with the following error:\r\n```\r\nSystem.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: chunkLength\r\n   at System.Text.StringBuilder.ToString()\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__1() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 89\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.PackIntegrationTest.Pack_Works_IncludesRazorAssembly() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/PackIntegrationTest.cs:line 83\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Razor/issues/2516","RelatedDescription":"Closed issue \"Flaky test: Pack_Works_IncludesRazorAssembly\" (#2516)"},{"Id":"345949863","IsPullRequest":true,"CreatedAt":"2018-07-30T23:21:43","Actor":"pranavkm","Number":"2517","RawContent":null,"Title":"Lock when reading \\ writing process output","State":"closed","Body":"Fixes #2516","Url":"https://github.com/aspnet/Razor/pull/2517","RelatedDescription":"Closed or merged PR \"Lock when reading \\ writing process output\" (#2517)"},{"Id":"345440967","IsPullRequest":false,"CreatedAt":"2018-07-30T21:23:48","Actor":"ryanbrandenburg","Number":"2514","RawContent":null,"Title":"Flaky test: Publish_SimpleMvcFSharp_NoopsWithoutFailing","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517757&buildTypeId=Lite_UniverseTest) occasionally with the following error:\r\n```\r\nMicrosoft.AspNetCore.Razor.Design.IntegrationTests.Assert+BuildFailedException : Build failed.\r\ndotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreAppVersion=2.2.0-preview1-26618-02 /p:NETStandardLibraryPackageVersion=2.0.3 /restore /p:_RazorBuildServerPipeName=\"02d08dce-e4c5-4d7e-907f-fa4935b30505\" /t:Publish /p:Configuration=Release \r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n  Restoring packages for D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj...\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :   No such host is known [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error : NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json. ---> System.Net.Http.HttpRequestException: No such host is known ---> System.Net.Sockets.SocketException: No such host is known [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    --- End of inner exception stack trace --- [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Threading.Tasks.ValueTask`1.get_Result() [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.AuthenticationHelper.SendWithAuthAsync(HttpRequestMessage request, Uri authUri, ICredentials credentials, Boolean preAuthenticate, Boolean isProxyAuth, Boolean doRequestAuth, HttpConnectionPool pool, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.DecompressionHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at NuGet.Protocol.ServerWarningLogHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T](Func`2 getTask, TimeSpan timeout, String timeoutMessage, CancellationToken token) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fsproj]\r\nD:\\b\\w\\33bdfc1cae7b2a38\\.dotnet\\x64\\sdk\\2.1.301\\NuGet.targets(114,5): error :    at NuGet.Protocol.HttpRetryHandler.SendAsync(HttpRetryHandlerRequest request, ILogger log, CancellationToken cancellationToken) [D:\\b\\t\\buildTmp\\Razor\\wxr50eoh.3qx\\SimpleMvcFSharp\\SimpleMvcFSharp.fs\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Razor/issues/2514","RelatedDescription":"Closed issue \"Flaky test: Publish_SimpleMvcFSharp_NoopsWithoutFailing\" (#2514)"},{"Id":"345440494","IsPullRequest":false,"CreatedAt":"2018-07-30T21:23:43","Actor":"ryanbrandenburg","Number":"2513","RawContent":null,"Title":"Flaky test: Build_SimpleMvcFSharp_NoopsWithoutFailing","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=517794&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.TimeoutException : command '$dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreAppVersion=2.2.0-preview1-26618-02 /p:NETStandardLibraryPackageVersion=2.0.3 /restore /p:_RazorBuildServerPipeName=\"e7ef4975-e535-4c0a-b958-d563539a701b\" /t:Build /p:Configuration=Release ' timed out after 00:01:00.\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__0(Task t) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 79\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIntegrationTest.Build_SimpleMvcFSharp_NoopsWithoutFailing() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIntegrationTest.cs:line 473\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nCC @Eilon,@muratg,@mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact @ryanbrandenburg.","Url":"https://github.com/aspnet/Razor/issues/2513","RelatedDescription":"Closed issue \"Flaky test: Build_SimpleMvcFSharp_NoopsWithoutFailing\" (#2513)"},{"Id":"345377241","IsPullRequest":true,"CreatedAt":"2018-07-27T22:46:06","Actor":"dotnet-maestro-bot","Number":"2512","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @NTaylorMullen\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2512","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2512)"},{"Id":"345002019","IsPullRequest":false,"CreatedAt":"2018-07-27T21:49:40","Actor":"natemcmaster","Number":"2506","RawContent":null,"Title":"Flaky tests: Queue_ProcessesNotifications_AndRestarts and Queue_ProcessesNotifications_AndGoesBackToSleep","State":"closed","Body":"These tests have been failing on the release/2.2 branch.\r\n\r\nhttps://ci3.dot.net/job/aspnet_Razor/job/release_2.2/job/windows-Configuration_Release_prtest/29\r\n```\r\nQueue_ProcessesNotifications_AndRestarts [FAIL]\r\n13:35:56    Worker should have taken all notifications\r\n13:35:56   Expected: False\r\n13:35:56   Actual:   True\r\n13:35:56   Stack Trace:\r\n13:35:56      at Microsoft.CodeAnalysis.Razor.ProjectSystem.BackgroundDocumentGeneratorTest.<Queue_ProcessesNotifications_AndRestarts>d__20.MoveNext()\r\n13:35:56   --- End of stack trace from previous location where exception was thrown ---\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n13:35:56   --- End of stack trace from previous location where exception was thrown ---\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n13:35:56   --- End of stack trace from previous location where exception was thrown ---\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n13:35:56      at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nhttps://dotnet.visualstudio.com/public/_build/results?buildId=8226&view=ms.vss-test-web.test-result-details\r\n\r\n```\r\n[FAIL] Queue_ProcessesNotifications_AndGoesBackToSleep\r\nQueue should not have restarted\r\nExpected: False\r\nActual: True\r\n\r\n   at Microsoft.CodeAnalysis.Razor.ProjectSystem.BackgroundDocumentGeneratorTest.<Queue_ProcessesNotifications_AndGoesBackToSleep>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)","Url":"https://github.com/aspnet/Razor/issues/2506","RelatedDescription":"Closed issue \"Flaky tests: Queue_ProcessesNotifications_AndRestarts and Queue_ProcessesNotifications_AndGoesBackToSleep\" (#2506)"},{"Id":"345334300","IsPullRequest":true,"CreatedAt":"2018-07-27T21:49:14","Actor":"NTaylorMullen","Number":"2509","RawContent":null,"Title":"Fix BackgroundDocumentGenerator flaky tests.","State":"closed","Body":"- Some time spans were too aggressive for parsing a Razor file on a slow environment.\r\n- Fixed an obvious race where we'd expect 0 pending notifications when it was possible to be in the process of clearing notifications.\r\n\r\n#2506","Url":"https://github.com/aspnet/Razor/pull/2509","RelatedDescription":"Closed or merged PR \"Fix BackgroundDocumentGenerator flaky tests.\" (#2509)"},{"Id":"345370257","IsPullRequest":true,"CreatedAt":"2018-07-27T21:39:23","Actor":"pranavkm","Number":"2511","RawContent":null,"Title":"Skip BuildIncremental_SimpleMvc_PersistsTargetInputFile on xplat","State":"closed","Body":"For some inexplicable reason timestamps returned as part of the test often show up\r\nas being different resulting in test flakiness. We've manually verified that this\r\nis not a product issue and builds are correctly incremental on xplat. See #2219\r\nfor past discussions.\r\n\r\nFixes https://github.com/aspnet/Razor/issues/2503","Url":"https://github.com/aspnet/Razor/pull/2511","RelatedDescription":"Closed or merged PR \"Skip BuildIncremental_SimpleMvc_PersistsTargetInputFile on xplat\" (#2511)"},{"Id":"344433374","IsPullRequest":false,"CreatedAt":"2018-07-27T21:39:23","Actor":"ryanbrandenburg","Number":"2503","RawContent":null,"Title":"Flaky test: BuildIncremental_SimpleMvc_PersistsTargetInputFile","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=514689&buildTypeId=Releases_21Public_OsxUniverse) occasionally with the following error:\r\n```\r\nAssert.Equal() Failure\r\nExpected: FileThumbPrint { Hash = \"7jDrtMrusoaX92QPguyJZ8rpKfk=\", LastWriteTimeUtc = 2018-07-25T12:16:01.0000000Z }\r\nActual:   FileThumbPrint { Hash = \"7jDrtMrusoaX92QPguyJZ8rpKfk=\", LastWriteTimeUtc = 2018-07-25T12:16:10.0000000Z }\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIncrementalismTest.<BuildIncremental_SimpleMvc_PersistsTargetInputFile>d__1.MoveNext() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIncrementalismTest.cs:line 66\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n","Url":"https://github.com/aspnet/Razor/issues/2503","RelatedDescription":"Closed issue \"Flaky test: BuildIncremental_SimpleMvc_PersistsTargetInputFile\" (#2503)"},{"Id":"345343126","IsPullRequest":true,"CreatedAt":"2018-07-27T21:22:25","Actor":"pranavkm","Number":"2510","RawContent":null,"Title":"Skip BuildIncremental_SimpleMvc_PersistsTargetInputFile on xplat","State":"closed","Body":"For some inexplicable reason timestamps returned as part of the test often show up\r\nas being different resulting in test flakiness. We've manually verified that this\r\nis not a product issue and builds are correctly incremental on xplat. See #2219\r\nfor past discussions.\r\n\r\nFixes https://github.com/aspnet/Razor/issues/2503","Url":"https://github.com/aspnet/Razor/pull/2510","RelatedDescription":"Closed or merged PR \"Skip BuildIncremental_SimpleMvc_PersistsTargetInputFile on xplat\" (#2510)"},{"Id":"345318720","IsPullRequest":false,"CreatedAt":"2018-07-27T18:11:18","Actor":"ajaybhargavb","Number":"2508","RawContent":null,"Title":"Razor parser improvements","State":"open","Body":"As a follow-up to #2263 and as a prerequisite for a bunch of future Razor improvements, we want to have our current Razor parser to have a deeper understanding of HTML. Here is a detailed description of what this will enable us to do https://github.com/aspnet/Razor/issues/2211#issue-307854491.","Url":"https://github.com/aspnet/Razor/issues/2508","RelatedDescription":"Open issue \"Razor parser improvements\" (#2508)"},{"Id":"344980533","IsPullRequest":true,"CreatedAt":"2018-07-26T22:06:51","Actor":"dotnet-maestro-bot","Number":"2505","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @ajaybhargavb\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2505","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2505)"},{"Id":"345003670","IsPullRequest":false,"CreatedAt":"2018-07-26T21:00:14","Actor":"natemcmaster","Number":"2507","RawContent":null,"Title":"Enable Linux tests on VSTS","State":"open","Body":"There are issues with VSTS Linux test agents which cause test runs to hang indefinitely. When this is fixed, we should re-enable Linux tests in VSTS builds.\r\n\r\ncref https://github.com/aspnet/Razor/pull/2395\r\nInternal bug: https://dotnet.visualstudio.com/internal/_workitems/edit/28 ","Url":"https://github.com/aspnet/Razor/issues/2507","RelatedDescription":"Open issue \"Enable Linux tests on VSTS\" (#2507)"},{"Id":"343248245","IsPullRequest":false,"CreatedAt":"2018-07-26T19:14:07","Actor":"pranavkm","Number":"2496","RawContent":null,"Title":"Honor NoBuild flag during RazorCompile","State":"closed","Body":"See https://github.com/dotnet/cli/issues/9581 for details. One way to do this would be to avoid wiring up `_RazorPrepareForPublish` when `NoBuild` is set. ","Url":"https://github.com/aspnet/Razor/issues/2496","RelatedDescription":"Closed issue \"Honor NoBuild flag during RazorCompile\" (#2496)"},{"Id":"344669600","IsPullRequest":true,"CreatedAt":"2018-07-26T19:13:36","Actor":"ajaybhargavb","Number":"2504","RawContent":null,"Title":"Honor NoBuild flag during publish","State":"closed","Body":"Issue #2496 \r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2504","RelatedDescription":"Closed or merged PR \"Honor NoBuild flag during publish\" (#2504)"},{"Id":"344176472","IsPullRequest":true,"CreatedAt":"2018-07-24T20:37:55","Actor":"dotnet-maestro-bot","Number":"2502","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2502","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2502)"},{"Id":"343821361","IsPullRequest":true,"CreatedAt":"2018-07-23T23:04:01","Actor":"dougbu","Number":"2500","RawContent":null,"Title":"Merge #2497 fix to master branch","State":"closed","Body":"FYI only\r\n\r\n(Done manually due to interim dependencies.props update.)","Url":"https://github.com/aspnet/Razor/pull/2500","RelatedDescription":"Closed or merged PR \"Merge #2497 fix to master branch\" (#2500)"},{"Id":"343825261","IsPullRequest":true,"CreatedAt":"2018-07-23T23:02:50","Actor":"dotnet-maestro-bot","Number":"2501","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @dougbu\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2501","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2501)"},{"Id":"343351529","IsPullRequest":false,"CreatedAt":"2018-07-23T22:28:46","Actor":"dougbu","Number":"2497","RawContent":null,"Title":"`DefaultTagHelperContent.IsEmptyOrWhiteSpace` is incorrectly `false` when only content is `null`","State":"closed","Body":"See https://github.com/aspnet/Mvc/pull/8087#discussion_r204217356\r\n\r\nAnd, see where the bug lies: https://github.com/aspnet/Razor/blob/7bdad8fdd30dea9b5b5ebcc0d9e8dc7a257466f1/src/Microsoft.AspNetCore.Razor/TagHelpers/DefaultTagHelperContent.cs#L281-L286","Url":"https://github.com/aspnet/Razor/issues/2497","RelatedDescription":"Closed issue \"`DefaultTagHelperContent.IsEmptyOrWhiteSpace` is incorrectly `false` when only content is `null`\" (#2497)"},{"Id":"343364301","IsPullRequest":true,"CreatedAt":"2018-07-23T22:28:26","Actor":"dougbu","Number":"2498","RawContent":null,"Title":"Handle `null` entries correctly for `IsEmptyOrWhiteSpace`","State":"closed","Body":"- #2497","Url":"https://github.com/aspnet/Razor/pull/2498","RelatedDescription":"Closed or merged PR \"Handle `null` entries correctly for `IsEmptyOrWhiteSpace`\" (#2498)"},{"Id":"343370071","IsPullRequest":false,"CreatedAt":"2018-07-22T02:11:49","Actor":"dougbu","Number":"2499","RawContent":null,"Title":"Can't build VSIX locally with VS 15.8 or later installed","State":"open","Body":"Tried changing `korebuild.json` to extend the VS version range (`\"versionRange\": \"[15.0.26730.03, 15.9)\"`) but that leads to numerous restoration failures when building `tooling\\Microsoft.VisualStudio.RazorExtension\\Microsoft.VisualStudio.RazorExtension.csproj` with `msbuild.exe`.\r\n\r\nCurrent workaround is to build with `/p:BuildVsix=false` and the above VS version range extension. (Tests fail whether building the VSIX or not when `msbuild.exe` isn't found.) Not sure how to clean up restore errors seen in VS&hellip;\r\n\r\nSuspect I'm missing something that must change when extending the VS version range. Either that or the latest build tools (`msbuild.exe` et cetera) have a bug affecting restore operations.","Url":"https://github.com/aspnet/Razor/issues/2499","RelatedDescription":"Open issue \"Can't build VSIX locally with VS 15.8 or later installed\" (#2499)"},{"Id":"343094612","IsPullRequest":false,"CreatedAt":"2018-07-20T20:11:43","Actor":"Worble","Number":"2495","RawContent":null,"Title":"Escaping Razor syntax with '@:' while preserving white-space","State":"closed","Body":"Hi there, I've been bashing my head against this problem for a while now and I can't seem to get through it.\r\nI'm trying to iterate through a series of words and display them preserving whitespace. If certain words match a criteria, I need to display them differently, so I try to put them in a span tag with a certain class. \r\n\r\nSome example code:\r\n```\r\n@{ var words = \"the quick brown fox jumps over the lazy dog\"; }\r\n<p style=\"white-space:pre;\">\r\n    @foreach (var word in words.Split(' '))\r\n    {\r\n        @if (word == \"fox\")\r\n        {\r\n            @:<span class=\"fox-word\"> \r\n        }\r\n        @(word + \" \")\r\n        @if (word == \"fox\")\r\n        {\r\n            @:</span>\r\n        }\r\n    }\r\n</p>\r\n```\r\n\r\nThe main issue with this is that the `@:` preserves the newline at the end of the `span` definition and closing tag, so it displays like this:\r\n```\r\nthe quick brown              \r\nfox             \r\njumps over the lazy dog \r\n```\r\ninstead of simply\r\n```\r\nthe quick brown fox jumps over the lazy dog\r\n```\r\nI've tried using the `<text>` tag, however that errors out on trying to do `<text></span></text>` stating that\r\n```\r\nThe \"text\" element was not closed. All elements must be either self-closing or have a matching end tag.\r\n\r\n                <text></span></text>\r\n\r\nEncountered end tag \"text\" with no matching start tag. Are your start/end tags properly balanced?\r\n\r\n                <text></span></text>\r\n```\r\n\r\nMy only other option would be to use `Html.Raw()`, however I am using the experimental framework Blazor, which doesn't support the Html helpers yet, and while I don't see any way a user could potentially inject a script, I wouldn't like running the risk.\r\n\r\nIs it possible to achieve what I want here?\r\n\r\n(Also as an aside, the contributing guide currently returns a 404 (https://github.com/aspnet/Home/blob/dev/CONTRIBUTING.md))","Url":"https://github.com/aspnet/Razor/issues/2495","RelatedDescription":"Closed issue \"Escaping Razor syntax with '@:' while preserving white-space\" (#2495)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2017-10-10T17:47:02","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"open","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Open PR \"Change Lockout wording of comment\" (#870)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"open","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Open issue \"Cannot force version of the template to install\" (#867)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2017-06-06T16:59:43","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"open","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Open issue \"File new default names inconsistency.\" (#850)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2018-06-25T20:46:49","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"closed","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Closed issue \"Support for multi-line string values\" (#1057)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"237065229","IsPullRequest":false,"CreatedAt":"2017-07-05T16:21:28","Actor":"Jerajo","Number":"1047","RawContent":null,"Title":"Tooling Preview 2 don't recognize VS 2015 Update 3","State":"closed","Body":"Here is my VS 2015.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312048-4fe10f30-5533-11e7-8319-e09f99059615.png)\r\n\r\nHere is the Error.\r\n\r\n![image](https://user-images.githubusercontent.com/26252994/27312066-8be0e6ea-5533-11e7-9f9e-ada4da2187e4.png)\r\n\r\nLook the Log File.\r\n\r\netc...\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: WebToolsAzureVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVS14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: DotNetToolsVWD14_trk, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: Preparation_ASPNET, state: Absent, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i101: Detected package: SetupBlocked_Uninstall, state: Present, cached: None\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR NOT(NetFx45Release < 378675) OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR VS2015DevEnvExists OR VS2015WebExpressExists OR (WixBundleAction=2)' evaluates to true.\r\n[0DBC:1AB0][2017-06-19T21:09:04]i052: Condition 'WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)' evaluates to false.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: \r\n### This product requires Visual Studio 2015 Update 3 or later. Please install Visual Studio 2015 Update 3 or later, then install this product again.\r\n[0DBC:1AB0][2017-06-19T21:09:04]e000: Error 0x81f40001: Bundle condition evaluated to false: WixBundleInstalled OR (((VS2015CommunityUpdateVersion >= v14.0.25420) OR (VS2015ProfessionalUpdateVersion >= v14.0.25420) OR (VS2015EnterpriseUpdateVersion >= v14.0.25420)) OR (VS2015WebExpressUpdateVersion >= v14.0.25420)) OR (SKIP_VSU_CHECK=1) OR (WixBundleAction=2)\r\n[0DBC:1AB0][2017-06-19T21:09:04]i199: Detect complete, result: 0x0","Url":"https://github.com/aspnet/Tooling/issues/1047","RelatedDescription":"Closed issue \"Tooling Preview 2 don't recognize VS 2015 Update 3\" (#1047)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"},{"Id":"287579430","IsPullRequest":false,"CreatedAt":"2018-01-10T21:14:16","Actor":"dougbu","Number":"286","RawContent":null,"Title":"Remove project file elements added for WebApiCompatShim in 2.0","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim package now depends on the latest (5.2.4-preview1) Microsoft.AspNet.WebApi.Client package. That dependency includes a new .NET Standard 2.0 assembly. This assembly supports all platforms the Microsoft.AspNetCore.Mvc.WebApiCompatShim package supports and includes the full Web API Client feature set.\r\n\r\nWhen upgrading projects using the Microsoft.AspNetCore.Mvc.WebApiCompatShim package to our nightly builds or the forthcoming 2.1.0-preview1 release, we recommend removing the following elements from the project file. (Of course, some projects may need the elements for other reasons.)\r\n``` xml\r\n<PackageTargetFallback>$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>\r\n<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>\r\n```\r\n\r\nFYI the `<PackageTargetFallback>` element caused the application to build and run against the Portable Class Library (PCL) assembly from the Microsoft.AspNet.WebApi.Client package.\r\n\r\nFor discussion of this change, see aspnet/Mvc#7229.","Url":"https://github.com/aspnet/Announcements/issues/286","RelatedDescription":"Open issue \"Remove project file elements added for WebApiCompatShim in 2.0\" (#286)"},{"Id":"287180286","IsPullRequest":false,"CreatedAt":"2018-01-09T18:08:18","Actor":"blowdart","Number":"285","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0784\r\n##  ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of an elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\r\n\r\nTo exploit the vulnerability, an attacker could send a specially crafted email, containing a malicious link, to a user. Alternatively, an attacker could use a chat client to social engineer a user into clicking the malicious link. However, in all cases to exploit this vulnerability a user must click a maliciously crafted link from an attacker.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0785](https://github.com/aspnet/Announcements/issues/284), which is in the same templates. Finally installing the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ will update the templates to correct the issue for any new applications created.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/225 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method and search for the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nReplace this line with the following code, removing the call to `Html.Raw()`\r\n\r\n```C#\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` and search for the following line, inside the `OnGetAsync()` method;\r\n\r\n```C#\r\nawait LoadSharedKeyAndQrCodeUriAsync(user);\r\n```\r\n\r\nRemove the code shown below which follows the call to `LoadSharedKeyAndQrCodeUriAsync(user);`\r\n\r\n```C#\r\nif (string.IsNullOrEmpty(SharedKey))\t\t\r\n{\t\t\r\n    await _userManager.ResetAuthenticatorKeyAsync(user);\t\t\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\t\t\r\n}\r\n```\r\n\r\nThe `OnGetAsync()` method should now look like\r\n\r\n```C#\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\r\n\r\n    return Page();\r\n}\r\n```\r\n\r\n3. Still in the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` file  and search for the `LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) function` and replace it with \r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)\r\n{\r\n    // Load the authenticator key & QR code URI to display on the form\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n     }\r\n\r\n    SharedKey = FormatKey(unformattedKey);\r\n    AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n }\r\n```\r\n\r\n4. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find the declaration for `private const string AuthenticatorUriFormat`. Add the following new const declaration below it;\r\n\r\n```C#\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator()` function. Replace its contents with\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> EnableAuthenticator()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    var model = new EnableAuthenticatorViewModel();\r\n    await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n\r\n    return View(model);\r\n}\r\n```\r\n\r\n3. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. Replace its contents with\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!ModelState.IsValid)\r\n    {\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n     }\r\n\r\n    // Strip spaces and hypens\r\n    var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n    var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\r\n        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n    if (!is2faTokenValid)\r\n    {\r\n        ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n    }\r\n\r\n    await _userManager.SetTwoFactorEnabledAsync(user, true);\r\n    _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\n\r\n    return RedirectToAction(nameof(ShowRecoveryCodes));\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` file create the following method after `EnableAuthenticator(EnableAuthenticatorViewModel model)`;\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file create the following method after the `GenerateQrCodeUri(string email, string unformattedKey)` method\r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\r\n{\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    }\r\n\r\n    model.SharedKey = FormatKey(unformattedKey);\r\n    model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n}\r\n```\r\n\r\n6. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n7. Open the `Models\\ManageViewModels\\EnableAuthenticatorViewModel.cs` file and add the following `using` reference;\r\n\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\n```\r\n\r\nthen replace the class declaration with \r\n\r\n```C# \r\npublic class EnableAuthenticatorViewModel\r\n{\r\n    [Required]\r\n    [StringLength(7, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n    [DataType(DataType.Text)]\r\n    [Display(Name = \"Verification Code\")]\r\n    public string Code { get; set; }\r\n\r\n    [BindNever]\r\n    public string SharedKey { get; set; }\r\n\r\n    [BindNever]\r\n    public string AuthenticatorUri { get; set; }\r\n}\r\n```\r\n\r\n8. Open the `Views\\Manage\\EnableAuthenticator.cshtml` file and replace the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nwith\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\nremove the call to `Html.Raw()`.\r\n\r\n9. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0784](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0784)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Corrected text in link to CVE-2018-0785.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-10_","Url":"https://github.com/aspnet/Announcements/issues/285","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\" (#285)"},{"Id":"287180045","IsPullRequest":false,"CreatedAt":"2018-01-09T18:07:26","Actor":"blowdart","Number":"284","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0785\r\n## ASP.NET Core Templates enable Cross Site Request Forgery\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Cross Site Request Forgery vulnerability in the individual authentication templates for ASP.NET Core 2.0. An attacker who successfully exploited this vulnerability could change the recovery codes associated with the victim's user account without his/her consent. As a result, a victim of this attack may be permanently locked out of his/her account after loosing access to his/her 2FA device, as the initial recovery codes would be no longer valid.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0784](https://github.com/aspnet/Announcements/issues/284), which is in the same templates.\r\n\r\nYou should also install the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ as will update the templates to correct the issue for any _new_ applications created after its installation. Existing applications must be manually updated using the instructions below.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/224 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method. The last line of this file should be\r\n\r\n```C#\r\nreturn RedirectToPage(\"./GenerateRecoveryCodes\");\r\n```\r\n\r\nReplace this line with the following code\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\nreturn RedirectToPage(\"./ShowRecoveryCodes\");\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml` and replace its contents with \r\n\r\n```C#\r\n@page\r\n@model GenerateRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-page=\"./ResetAuthenticator\">reset your authenticator keys</a>.\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n3. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml.cs` file. Replace its contents with\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\nusing Microsoft.Extensions.Logging;\r\nusing Company.WebApplication1.Data;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class GenerateRecoveryCodesModel : PageModel\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userManager;\r\n        private readonly ILogger<GenerateRecoveryCodesModel> _logger;\r\n\r\n        public GenerateRecoveryCodesModel(\r\n            UserManager<ApplicationUser> userManager,\r\n            ILogger<GenerateRecoveryCodesModel> logger)\r\n        {\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n        }\r\n\r\n        public async Task<IActionResult> OnGetAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n            }\r\n\r\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n            TempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\n\r\n            _logger.LogInformation(\"User with ID '{UserId}' has generated new 2FA recovery codes.\", user.Id);\r\n\r\n            return RedirectToPage(\"./ShowRecoveryCodes\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Create a new file, `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml` with the following contents \r\n\r\n```C#\r\n@page\r\n@model ShowRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n5. Create a new file `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml.cs` with the following contents\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class ShowRecoveryCodesModel : PageModel\r\n    {\r\n        public string[] RecoveryCodes { get; private set; }\r\n\r\n        public IActionResult OnGet()\r\n        {\r\n            RecoveryCodes = (string[])TempData[\"RecoveryCodes\"];\r\n            if (RecoveryCodes == null)\r\n            {\r\n                return RedirectToPage(\"TwoFactorAuthentication\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find \r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n```\r\n  and add a new declaration underneath,\r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. The last line in this method should be\r\n\r\n```C#\r\nreturn RedirectToAction(nameof(GenerateRecoveryCodes));\r\n```\r\n\r\nReplace this final line with\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\nreturn RedirectToAction(nameof(ShowRecoveryCodes));\r\n```\r\n\r\n3. Create a new method in `Controllers\\ManageController.cs` called `ShowRecoveryCodes()` with the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file and find the `GenerateRecoveryCodes()` method. The code should look as follows\r\n\r\n```C# \r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    ...\r\n}\r\n```\r\nReplace the method with the following\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n    }\r\n\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\r\n\r\n    return View(nameof(ShowRecoveryCodes), model);\r\n}\r\n```\r\n\r\n6. Create a new View in `Views\\Manage\\ShowRecoveryCodes.cshtml` with the following content\r\n\r\n```\r\n@model ShowRecoveryCodesViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n7. Create a new `ShowRecoveryCodesViewModel` class in the `Models\\ManageViewModels` folder and create the class as follows\r\n\r\n```c#\r\npublic class ShowRecoveryCodesViewModel\r\n{\r\n    public string[] RecoveryCodes { get; set; }\r\n}\r\n``` \r\n\r\n8.  Delete the `Models\\ManageViewModels\\generateRecoveryCodesViewModel.cs` file.\r\n\r\n9. Open the `Views\\Manage\\GenerateRecoveryCodes.cshtml` file. Replace the contents with \r\n\r\n```\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h2>@ViewData[\"Title\"]</h2>\r\n\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form asp-action=\"GenerateRecoveryCodes\" method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n\r\n10. Edit `Views\\Manage\\TwoFactorAuthentication.cshtml` to change `<a asp-action=\"GenerateRecoveryCodes\" class=\"btn btn-default\">Reset recovery codes</a>` to ` <a asp-action=\"GenerateRecoveryCodesWarning\" class=\"btn btn-default\">Reset recovery codes</a>`.\r\n\r\n11. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0785)\r\n\r\n### Revisions\r\n\r\nV1.1 (Jan 9, 2018): Updated Razor Pages fix to be correct. Note that [new generated applications will have the incorrect link](https://github.com/aspnet/templating/issues/226).  Thanks @scottsauber.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-09_\r\n\r\n  \r\n  \r\n  \r\n  \r\n  ","Url":"https://github.com/aspnet/Announcements/issues/284","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery\" (#284)"}],"ResultType":"GitHubIssue"},"Announcements":{"Issues":[{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"},{"Id":"287579430","IsPullRequest":false,"CreatedAt":"2018-01-10T21:14:16","Actor":"dougbu","Number":"286","RawContent":null,"Title":"Remove project file elements added for WebApiCompatShim in 2.0","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim package now depends on the latest (5.2.4-preview1) Microsoft.AspNet.WebApi.Client package. That dependency includes a new .NET Standard 2.0 assembly. This assembly supports all platforms the Microsoft.AspNetCore.Mvc.WebApiCompatShim package supports and includes the full Web API Client feature set.\r\n\r\nWhen upgrading projects using the Microsoft.AspNetCore.Mvc.WebApiCompatShim package to our nightly builds or the forthcoming 2.1.0-preview1 release, we recommend removing the following elements from the project file. (Of course, some projects may need the elements for other reasons.)\r\n``` xml\r\n<PackageTargetFallback>$(PackageTargetFallback);portable-net451+win8</PackageTargetFallback>\r\n<DisableImplicitAssetTargetFallback>true</DisableImplicitAssetTargetFallback>\r\n```\r\n\r\nFYI the `<PackageTargetFallback>` element caused the application to build and run against the Portable Class Library (PCL) assembly from the Microsoft.AspNet.WebApi.Client package.\r\n\r\nFor discussion of this change, see aspnet/Mvc#7229.","Url":"https://github.com/aspnet/Announcements/issues/286","RelatedDescription":"Open issue \"Remove project file elements added for WebApiCompatShim in 2.0\" (#286)"},{"Id":"287180286","IsPullRequest":false,"CreatedAt":"2018-01-09T18:08:18","Actor":"blowdart","Number":"285","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0784\r\n##  ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of an elevation of privilege vulnerability exists when a ASP.NET Core web application, created using vulnerable project templates, fails to properly sanitize web requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\r\n\r\nTo exploit the vulnerability, an attacker could send a specially crafted email, containing a malicious link, to a user. Alternatively, an attacker could use a chat client to social engineer a user into clicking the malicious link. However, in all cases to exploit this vulnerability a user must click a maliciously crafted link from an attacker.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0785](https://github.com/aspnet/Announcements/issues/284), which is in the same templates. Finally installing the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ will update the templates to correct the issue for any new applications created.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/225 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method and search for the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nReplace this line with the following code, removing the call to `Html.Raw()`\r\n\r\n```C#\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` and search for the following line, inside the `OnGetAsync()` method;\r\n\r\n```C#\r\nawait LoadSharedKeyAndQrCodeUriAsync(user);\r\n```\r\n\r\nRemove the code shown below which follows the call to `LoadSharedKeyAndQrCodeUriAsync(user);`\r\n\r\n```C#\r\nif (string.IsNullOrEmpty(SharedKey))\t\t\r\n{\t\t\r\n    await _userManager.ResetAuthenticatorKeyAsync(user);\t\t\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\t\t\r\n}\r\n```\r\n\r\nThe `OnGetAsync()` method should now look like\r\n\r\n```C#\r\npublic async Task<IActionResult> OnGetAsync()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    await LoadSharedKeyAndQrCodeUriAsync(user);\r\n\r\n    return Page();\r\n}\r\n```\r\n\r\n3. Still in the `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` file  and search for the `LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) function` and replace it with \r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)\r\n{\r\n    // Load the authenticator key & QR code URI to display on the form\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n     }\r\n\r\n    SharedKey = FormatKey(unformattedKey);\r\n    AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n }\r\n```\r\n\r\n4. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find the declaration for `private const string AuthenticatorUriFormat`. Add the following new const declaration below it;\r\n\r\n```C#\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator()` function. Replace its contents with\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> EnableAuthenticator()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    var model = new EnableAuthenticatorViewModel();\r\n    await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n\r\n    return View(model);\r\n}\r\n```\r\n\r\n3. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. Replace its contents with\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!ModelState.IsValid)\r\n    {\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n     }\r\n\r\n    // Strip spaces and hypens\r\n    var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\r\n\r\n    var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\r\n        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\r\n\r\n    if (!is2faTokenValid)\r\n    {\r\n        ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\r\n        await LoadSharedKeyAndQrCodeUriAsync(user, model);\r\n        return View(model);\r\n    }\r\n\r\n    await _userManager.SetTwoFactorEnabledAsync(user, true);\r\n    _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\n\r\n    return RedirectToAction(nameof(ShowRecoveryCodes));\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` file create the following method after `EnableAuthenticator(EnableAuthenticatorViewModel model)`;\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file create the following method after the `GenerateQrCodeUri(string email, string unformattedKey)` method\r\n\r\n```C#\r\nprivate async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\r\n{\r\n    var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    if (string.IsNullOrEmpty(unformattedKey))\r\n    {\r\n        await _userManager.ResetAuthenticatorKeyAsync(user);\r\n        unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\r\n    }\r\n\r\n    model.SharedKey = FormatKey(unformattedKey);\r\n    model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\r\n}\r\n```\r\n\r\n6. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n7. Open the `Models\\ManageViewModels\\EnableAuthenticatorViewModel.cs` file and add the following `using` reference;\r\n\r\n```C#\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\n```\r\n\r\nthen replace the class declaration with \r\n\r\n```C# \r\npublic class EnableAuthenticatorViewModel\r\n{\r\n    [Required]\r\n    [StringLength(7, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\r\n    [DataType(DataType.Text)]\r\n    [Display(Name = \"Verification Code\")]\r\n    public string Code { get; set; }\r\n\r\n    [BindNever]\r\n    public string SharedKey { get; set; }\r\n\r\n    [BindNever]\r\n    public string AuthenticatorUri { get; set; }\r\n}\r\n```\r\n\r\n8. Open the `Views\\Manage\\EnableAuthenticator.cshtml` file and replace the following line\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Html.Raw(Model.AuthenticatorUri)\"></div>\r\n```\r\n\r\nwith\r\n\r\n```\r\n<div id=\"qrCodeData\" data-url=\"@Model.AuthenticatorUri\"></div>\r\n```\r\n\r\nremove the call to `Html.Raw()`.\r\n\r\n9. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0784](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0784)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Corrected text in link to CVE-2018-0785.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-10_","Url":"https://github.com/aspnet/Announcements/issues/285","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0784 - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability\" (#285)"},{"Id":"287180045","IsPullRequest":false,"CreatedAt":"2018-01-09T18:07:26","Actor":"blowdart","Number":"284","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0785\r\n## ASP.NET Core Templates enable Cross Site Request Forgery\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of ASP.NET Core  2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Cross Site Request Forgery vulnerability in the individual authentication templates for ASP.NET Core 2.0. An attacker who successfully exploited this vulnerability could change the recovery codes associated with the victim's user account without his/her consent. As a result, a victim of this attack may be permanently locked out of his/her account after loosing access to his/her 2FA device, as the initial recovery codes would be no longer valid.\r\n\r\nThe security update addresses the vulnerability by correcting the ASP.NET Core project templates.\r\n\r\nDevelopers who have generated applications from the vulnerable templates should change their code using the following instructions. They should also change their code to address a further vulnerability,  [CVE-2018-0784](https://github.com/aspnet/Announcements/issues/284), which is in the same templates.\r\n\r\nYou should also install the latest .NET Core SDK, version 2.1.4, from https://www.microsoft.com/net/download/ as will update the templates to correct the issue for any _new_ applications created after its installation. Existing applications must be manually updated using the instructions below.\r\n\r\n### Discussion\r\n\r\nPlease use https://github.com/aspnet/templating/issues/224 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications which are not created using the ASP.NET Core 2.0 Individual Authentication templates are not vulnerable to this issue.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed below and have generated applications using Individual Authentication with usernames and passwords stored within the application. Applications which use Azure Active Directory, or Azure Active Directory B2C are not affected.\r\n\r\nVulnerable .NET SDK Version | Fixed SDK Version\r\n----------------| -------------------------\r\n2.0.0, 2.0.2, 2.0.3, 2.1.2, 2.1.3 |  2.1.4\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nYour application will be affected if you generated it using the ASP.NET 2.0 Web Application template or the ASP.NET 2.0 Web Application (Model/View/Controller) template from a vulnerable SDK version where you have selected individual authentication where user accounts are stored in-app.\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\sdk\\ |\r\n| macOS | /usr/local/share/dotnet/sdk/    |\r\n| Supported Linux platforms | /usr/share/dotnet/sdk/   |\r\n\r\nEach SDK version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 2.1.4 then any applications generated for ASP.NET Core 2.0 using Individual Authentication may be vulnerable.. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by changing the code created during application generation using the following instructions.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Razor Pages)\r\n\r\n1. Open `Pages\\Account\\Manage\\EnableAuthenticator.cshtml.cs` find the `OnPostAsync()` method. The last line of this file should be\r\n\r\n```C#\r\nreturn RedirectToPage(\"./GenerateRecoveryCodes\");\r\n```\r\n\r\nReplace this line with the following code\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\nreturn RedirectToPage(\"./ShowRecoveryCodes\");\r\n```\r\n\r\n2. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml` and replace its contents with \r\n\r\n```C#\r\n@page\r\n@model GenerateRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-page=\"./ResetAuthenticator\">reset your authenticator keys</a>.\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n3. Open the `Pages\\Account\\Manage\\GenerateRecoveryCodes.cshtml.cs` file. Replace its contents with\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\nusing Microsoft.Extensions.Logging;\r\nusing Company.WebApplication1.Data;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class GenerateRecoveryCodesModel : PageModel\r\n    {\r\n        private readonly UserManager<ApplicationUser> _userManager;\r\n        private readonly ILogger<GenerateRecoveryCodesModel> _logger;\r\n\r\n        public GenerateRecoveryCodesModel(\r\n            UserManager<ApplicationUser> userManager,\r\n            ILogger<GenerateRecoveryCodesModel> logger)\r\n        {\r\n            _userManager = userManager;\r\n            _logger = logger;\r\n        }\r\n\r\n        public async Task<IActionResult> OnGetAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n\r\n        public async Task<IActionResult> OnPostAsync()\r\n        {\r\n            var user = await _userManager.GetUserAsync(User);\r\n            if (user == null)\r\n            {\r\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n            }\r\n\r\n            if (!user.TwoFactorEnabled)\r\n            {\r\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n            }\r\n\r\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n            TempData[\"RecoveryCodes\"] = recoveryCodes.ToArray();\r\n\r\n            _logger.LogInformation(\"User with ID '{UserId}' has generated new 2FA recovery codes.\", user.Id);\r\n\r\n            return RedirectToPage(\"./ShowRecoveryCodes\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. Create a new file, `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml` with the following contents \r\n\r\n```C#\r\n@page\r\n@model ShowRecoveryCodesModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData[\"ActivePage\"] = \"TwoFactorAuthentication\";\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n5. Create a new file `Pages\\Account\\Manage\\ShowRecoveryCodes.cshtml.cs` with the following contents\r\n\r\n```C#\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Company.WebApplication1.Pages.Account.Manage\r\n{\r\n    public class ShowRecoveryCodesModel : PageModel\r\n    {\r\n        public string[] RecoveryCodes { get; private set; }\r\n\r\n        public IActionResult OnGet()\r\n        {\r\n            RecoveryCodes = (string[])TempData[\"RecoveryCodes\"];\r\n            if (RecoveryCodes == null)\r\n            {\r\n                return RedirectToPage(\"TwoFactorAuthentication\");\r\n            }\r\n\r\n            return Page();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n6. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n#### For ASP.NET Core 2.0 Web Application (Model/View/Controller)\r\n\r\n1. Open the `Controllers\\ManageController.cs` file and find \r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\n```\r\n  and add a new declaration underneath,\r\n\r\n```C#\r\nprivate const string AuthenicatorUriFormat = \"otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6\";\r\nprivate const string RecoveryCodesKey = nameof(RecoveryCodesKey);\r\n```\r\n\r\n2. Still in `Controllers\\ManageController.cs` file and find the `EnableAuthenticator(EnableAuthenticatorViewModel model)` method. The last line in this method should be\r\n\r\n```C#\r\nreturn RedirectToAction(nameof(GenerateRecoveryCodes));\r\n```\r\n\r\nReplace this final line with\r\n\r\n```C#\r\nvar recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\nTempData[RecoveryCodesKey] = recoveryCodes.ToArray();\r\nreturn RedirectToAction(nameof(ShowRecoveryCodes));\r\n```\r\n\r\n3. Create a new method in `Controllers\\ManageController.cs` called `ShowRecoveryCodes()` with the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic IActionResult ShowRecoveryCodes()\r\n{\r\n    var recoveryCodes = (string[])TempData[RecoveryCodesKey];\r\n    if (recoveryCodes == null)\r\n    {\r\n        return RedirectToAction(nameof(TwoFactorAuthentication));\r\n    }\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\r\n    return View(model);\r\n}\r\n```\r\n\r\n4. Still in `Controllers\\ManageController.cs` Create a new action method in the controller file, `GenerateRecoveryCodesWarning()` containing the following code\r\n\r\n```C#\r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodesWarning()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\r\n    }\r\n\r\n    return View(nameof(GenerateRecoveryCodesWarning));\r\n}\r\n```\r\n\r\n5. Still in `Controllers\\ManageController.cs` file and find the `GenerateRecoveryCodes()` method. The code should look as follows\r\n\r\n```C# \r\n[HttpGet]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    ...\r\n}\r\n```\r\nReplace the method with the following\r\n\r\n```C#\r\n[HttpPost]\r\n[ValidateAntiForgeryToken]\r\npublic async Task<IActionResult> GenerateRecoveryCodes()\r\n{\r\n    var user = await _userManager.GetUserAsync(User);\r\n    if (user == null)\r\n    {\r\n        throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\r\n    }\r\n\r\n    if (!user.TwoFactorEnabled)\r\n    {\r\n        throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\r\n    }\r\n\r\n    var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\r\n    _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\r\n\r\n    var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\r\n\r\n    return View(nameof(ShowRecoveryCodes), model);\r\n}\r\n```\r\n\r\n6. Create a new View in `Views\\Manage\\ShowRecoveryCodes.cshtml` with the following content\r\n\r\n```\r\n@model ShowRecoveryCodesViewModel\r\n@{\r\n    ViewData[\"Title\"] = \"Recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h4>@ViewData[\"Title\"]</h4>\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>Put these codes in a safe place.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        @for (var row = 0; row < Model.RecoveryCodes.Length; row += 2)\r\n        {\r\n            <code>@Model.RecoveryCodes[row]</code><text>&nbsp;</text><code>@Model.RecoveryCodes[row + 1]</code><br />\r\n        }\r\n    </div>\r\n</div>\r\n```\r\n\r\n7. Create a new `ShowRecoveryCodesViewModel` class in the `Models\\ManageViewModels` folder and create the class as follows\r\n\r\n```c#\r\npublic class ShowRecoveryCodesViewModel\r\n{\r\n    public string[] RecoveryCodes { get; set; }\r\n}\r\n``` \r\n\r\n8.  Delete the `Models\\ManageViewModels\\generateRecoveryCodesViewModel.cs` file.\r\n\r\n9. Open the `Views\\Manage\\GenerateRecoveryCodes.cshtml` file. Replace the contents with \r\n\r\n```\r\n@{\r\n    ViewData[\"Title\"] = \"Generate two-factor authentication (2FA) recovery codes\";\r\n    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);\r\n}\r\n\r\n<h2>@ViewData[\"Title\"]</h2>\r\n\r\n<div class=\"alert alert-warning\" role=\"alert\">\r\n    <p>\r\n        <span class=\"glyphicon glyphicon-warning-sign\"></span>\r\n        <strong>This action generates new recovery codes.</strong>\r\n    </p>\r\n    <p>\r\n        If you lose your device and don't have the recovery codes you will lose access to your account.\r\n    </p>\r\n    <p>\r\n        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key\r\n        used in an authenticator app you should <a asp-action=\"ResetAuthenticatorWarning\">reset your authenticator keys.</a>\r\n    </p>\r\n</div>\r\n\r\n<div>\r\n    <form asp-action=\"GenerateRecoveryCodes\" method=\"post\" class=\"form-group\">\r\n        <button class=\"btn btn-danger\" type=\"submit\">Generate Recovery Codes</button>\r\n    </form>\r\n</div>\r\n```\r\n\r\n10. Edit `Views\\Manage\\TwoFactorAuthentication.cshtml` to change `<a asp-action=\"GenerateRecoveryCodes\" class=\"btn btn-default\">Reset recovery codes</a>` to ` <a asp-action=\"GenerateRecoveryCodesWarning\" class=\"btn btn-default\">Reset recovery codes</a>`.\r\n\r\n11. Recompile your application and test you can generate 2fa recovery codes correctly, then redeploy your application.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Acknowledgments\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0785](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0785)\r\n\r\n### Revisions\r\n\r\nV1.1 (Jan 9, 2018): Updated Razor Pages fix to be correct. Note that [new generated applications will have the incorrect link](https://github.com/aspnet/templating/issues/226).  Thanks @scottsauber.\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-01-09_\r\n\r\n  \r\n  \r\n  \r\n  \r\n  ","Url":"https://github.com/aspnet/Announcements/issues/284","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0785 - ASP.NET Core Templates enable Cross Site Request Forgery\" (#284)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1024410637982547968","CreatedAt":"2018-07-31T21:45:03+00:00","UserScreenname":"aspnet","Text":"Don't miss today's #ASPNET Community Standup at 3:45 Pacific / 22:45 UTC\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/PS5c7tfQh8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":7,"RawContent":null},{"Id":"1022251478616952832","CreatedAt":"2018-07-25T22:45:19+00:00","UserScreenname":"aspnet","Text":"Blazor 0.5.0 experimental release now available:\nhttps://t.co/M9ebowK4zB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":218,"FavoriteCount":120,"RawContent":null},{"Id":"1019628403316740096","CreatedAt":"2018-07-18T17:02:09+00:00","UserScreenname":"aspnet","Text":"Open source and open standards in the age of cloud AI by @timoreilly on stage now at #OSCON","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":2,"RawContent":null},{"Id":"1019621755286106114","CreatedAt":"2018-07-18T16:35:44+00:00","UserScreenname":"aspnet","Text":"Helping us understand Diversity and representation in #AI bias and development at #OSCON is @NikkyMill @GIRLSTEMSTARS #oscon2018","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"1019618189506957312","CreatedAt":"2018-07-18T16:21:34+00:00","UserScreenname":"aspnet","Text":"Open source means working together to achieve a common goal. Ying Xiong of @Huawei #oscon","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":3,"RawContent":null},{"Id":"1019616466692378624","CreatedAt":"2018-07-18T16:14:43+00:00","UserScreenname":"aspnet","Text":"Awesome start to #OSCON from @noopkat, with an Arduino-powered waving hand live coded on stage!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":1,"RawContent":null},{"Id":"1019614091424555008","CreatedAt":"2018-07-18T16:05:17+00:00","UserScreenname":"aspnet","Text":"To show how fun live coding can be, @noopkat takes the #OSCON keynote stage! https://t.co/StiEPmZfQT","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":1,"FavoriteCount":0,"RawContent":null},{"Id":"1019354525172314112","CreatedAt":"2018-07-17T22:53:52+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! \n\nCome join the party at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1014286989200199681","CreatedAt":"2018-07-03T23:17:17+00:00","UserScreenname":"aspnet","Text":"It's the #ASPNET Community Standup! Starting now - join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":12,"RawContent":null},{"Id":"1011656002049961985","CreatedAt":"2018-06-26T17:02:41+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup on the HTTP REPL is live now at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-08-02T21:20:20.7770023Z","RunDurationInMilliseconds":10655}