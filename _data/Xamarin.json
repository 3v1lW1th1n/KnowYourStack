{"Data":{"Blog":{"FeedItems":[{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7855398567","Type":"PullRequestEvent","CreatedAt":"2018-06-21T01:32:41","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1863","RelatedDescription":"Merged pull request \"[build] cmake fixes for Windows\" (#1863) at xamarin/xamarin-android","RelatedBody":"Fixes for unzipping the cmake download:\r\n- `android-toolchain.projitems` doesn't need to specify `.zip`, as the\r\n  targets append this extension automatically\r\n- It appears that the zip of cmake doesn't have a subdirectory\r\n  - Added a `NoSubdirectory` item metadata\r\n  - Set `<UnzipDirectoryChildren NoSubdirectory=\"True\" />` so that\r\n    cmake is extracted correctly\r\n\r\nIssues with paths:\r\n- cmake does not appear to like odd combinations of paths, such as\r\n  `\\/` or `\\\\`. These are likely mistakes that *happen to work*, so we\r\n  should clean them up.\r\n- `Configuration.props` had a double path separator in\r\n  `$(XAInstallPrefix)`, since `$(MSBuildThisFileDirectory)` contains a\r\n  trailing slash\r\n- `monodroid.targets` had a path with `\\/` on Windows, since\r\n  `$(OutputPath)` has a trailing slash\r\n- `CMakeLists.txt` had two places I needed to replace Windows-style\r\n  paths `\\` -> `/`, since these were generating paths that had a\r\n  combination of `\\` and `/`"},{"Id":"7854906321","Type":"PullRequestEvent","CreatedAt":"2018-06-20T22:34:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1864","RelatedDescription":"Merged pull request \"[build] Split out bundle download from xa-prep-tasks\" (#1864) at xamarin/xamarin-android","RelatedBody":"A minor SNAFU was observed earlier this week: *all* macOS PR builds\r\nwere [failing][0] because `NuGet.exe` couldn't be downloaded:\r\n\r\n\tbuild-tools/xa-prep-tasks/xa-prep-tasks.targets(91,5): error :\r\n\tUnable to download URL `https://dist.nuget.org/win-x86-commandline/latest/nuget.exe` to `/Users/builder/jenkins/workspace/xamarin-android-pr-builder/xamarin-android/build-tools/xa-prep-tasks/../../.nuget/NuGet.exe`:\r\n\tAn error occurred while sending the request\r\n\r\nWhat we believe happened was as follows:\r\n\r\n 1. A [PR to use mono:2018-06 was built][1], which\r\n    [updated the *system* mono to 5.16.0 (also from mono:2018-06)][2].\r\n\r\n        Downloading `https://xamjenkinsartifact.azureedge.net/build-package-osx-mono/2018-06/7/7627a5f9eeba0fd846731ad0c498556f55be1a34/MonoFramework-MDK-5.16.0.5.macos10.xamarin.universal.pkg` to `/Users/builder/android-archives/.MonoFramework-MDK-5.16.0.5.macos10.xamarin.universal.pkg.download`.\r\n        sudo installer -pkg \"/Users/builder/android-archives/MonoFramework-MDK-5.16.0.5.macos10.xamarin.universal.pkg\" -target /\r\n\r\n 2. This particular mono had a \"broken\" `HttpClient`, in that it\r\n    couldn't download `https://dist.nuget.org/win-x86-commandline/latest/nuget.exe`\r\n\r\n 3. All following PR builds that ran on xam-mac-mini-6 would fail, as\r\n    mono 5.16.0 would fail to download `nuget.exe`, causing the\r\n    overall build to fail.\r\n\r\n\"Funnily enough,\" this is more or less why we have the\r\n`$(MonoRequiredMaximumVersion)` MSBuild property; see 2bf62cb9.  The\r\nproblem *here* is that the download failure and subsequent build\r\nfailure happened *before* the mono version was checked, meaning our\r\nbuild system code to check the mono version was ~useless.\r\n\r\nOuch.\r\n\r\nThus, the *real* problem is that our dependency checks were being\r\nperformed *after* we attempted to download anything.  If instead we\r\nchecked the mono version *before* we tried to download files, we would\r\nhave installed a \"known good\" mono, and everything would have worked.\r\n\r\nThis in turn means that `build-tools/xa-prep-tasks` should *not*\r\nperform any downloads, as `xa-prep-tasks` is a dependency for building\r\n`build-tools/dependencies`.\r\n\r\nFix our build ordering problem by moving the download logic out of\r\n`build-tools/xa-prep-tasks` and into a new\r\n`build-tools/download-bundle` project.  This will allow xa-prep-tasks\r\nto build (which is necessary), after which `build-tools/dependencies`\r\ncan sanity-check the build environment, and only *after* that\r\nvalidation is performed will we attempt to download anything and\r\ncontinue the normal build.\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/3424/\r\n[1]: https://github.com/xamarin/xamarin-android/pull/1836\r\n[2]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/3373/"},{"Id":"7854350518","Type":"IssuesEvent","CreatedAt":"2018-06-20T20:28:41","Actor":"onesadjam","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1843","RelatedDescription":"Closed issue \"BluetoothGattCallback.OnCharacteristicWrite not called on OS prior to 8.0\" (#1843) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Use BluetoothDevice.ConnectGatt to connect to a known bluetooth device\r\n2. OnConnectionStateChange to connected, make call to BluetoothGatt.DiscoverServices\r\n3. OnServicesDiscovered success, identify expected service and characteristic.  Call BluetoothGattCharacteristic.SetValue to assign a new value, then BluetoothGatt.WriteCharacteristic(characteristicToWrite) to send the request to the device.\r\n\r\n### Expected Behavior\r\nOnce BluetoothGatt.WriteCharacteristic is called the OnCharacteristicWrite callback should be called to either indicate the value was successfully written to the device or the write failed.\r\n\r\n### Actual Behavior\r\nWhen the target platform is running Android OS 8.0 or higher the behavior is as expected.  If running an earlier version of the OS the callback is never called.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.7.3\r\nVisualStudio.15.Release/15.7.3+27703.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nMicrosoft Visual Studio Tools for Applications 2017   00369-60000-00001-AA736\r\nMicrosoft Visual Studio Tools for Applications 2017\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40522.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2012   4.0.21208.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40424.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nC# Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJetBrains ReSharper Ultimate 2017.3.3    Build 111.0.20180302.65130\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.1\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10420.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSlowCheetah - XML config transforms   1.0\r\nThis package enables you to transform your app.config or any other XML file based on the build configuration. It also adds additional tooling to help you create XML transforms.\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nSQL Server Integration Services   \r\nMicrosoft SQL Server Integration Services Designer\r\nVersion 14.0.800.98\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 2527e6829ecdc8281ee60d83be8cfd0fa720a648.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.10.10.1 (f1760154c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n"},{"Id":"7854269706","Type":"PullRequestEvent","CreatedAt":"2018-06-20T20:12:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1865","RelatedDescription":"Merged pull request \"Remove Android.mk from src/monodroid\" (#1865) at xamarin/xamarin-android","RelatedBody":"https://github.com/xamarin/xamarin-android/commit/7c8b6e4ce93b2395f71ff7762afe7aadc416d3f3 switched our `src/monodroid/` builds from `ndk-build` + `.csproj` custom code to\r\nuniform use of `cmake` across all the supported platforms thus making\r\n`Android.mk`, a file used by `ndk-build`, no longer needed.\r\n\r\nThis commit removes the file."},{"Id":"7854072968","Type":"IssuesEvent","CreatedAt":"2018-06-20T19:31:42","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1853","RelatedDescription":"Closed issue \"Certificate pinning using AndroidClientHandler and ServicePointManager\" (#1853) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nSimilar to [this issue](https://github.com/xamarin/xamarin-macios/issues/4170) on Xamarin.iOS. \r\n\r\n1. Configure Droid project to use AndroidClientHandler as HttpClient implementation.\r\n2. Register a callback: ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => {};\r\n3. Create new HttpClient: var client = new HttpClient(); \r\n4. Make a GET request: client.GetStringAsync(\"https://www.xamarin.com\"); \r\n\r\nRepro project: \r\n[ReproProject.zip](https://github.com/xamarin/xamarin-android/files/2115931/ReproProject.zip)\r\n\r\n### Expected Behavior\r\nI expect the ServerCertificateValidationCallback to be called for every request, but this does not happen when using the AndroidClientHandler.\r\n\r\n### Actual Behavior\r\nThe ServerCertificateValidationCallback is <ins>not</ins> called at all when using AndroidClientHandler. When using the default HttpClientHandler, the ServerCertificateValidationCallback gets called as expected.\r\n\r\n### Version Information\r\n\r\n=== Visual Studio Enterprise 2017 for Mac ===\r\n\r\nVersion 7.5.2 (build 40)\r\nInstallation UUID: 621e6bd4-594e-47fd-9aaa-510f440c3a87\r\nRuntime:\r\n\tMono 5.10.1.57 (2017-12/ea8a24b1bbf) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 510010057\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.0.5\r\n\t2.0.0\r\nSDK: /usr/local/share/dotnet/sdk/2.1.4/Sdks\r\nSDK Versions:\r\n\t2.1.4\r\n\t2.0.0\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.2\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 8.3.3.2 (Visual Studio Enterprise)\r\nAndroid SDK: /Users/gebruiker/Library/Android/sdk\r\n\tSupported Android versions:\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 9.4.1 (14161)\r\nBuild 9F2000\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 4.4.1.193 (Visual Studio Enterprise)\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 11.12.0.4 (Visual Studio Enterprise)\r\nHash: 64fece5f\r\nBranch: d15-7\r\nBuild date: 2018-05-29 20:00:44-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.0\r\nHash: b3f92f9\r\nBranch: master\r\nBuild date: Fri, 19 Jan 2018 22:00:34 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 705020040\r\nGit revision: cfe2fc0566bc4db990242959de40505a13f58352\r\nBuild date: 2018-05-30 11:24:18-04\r\nXamarin addins: 3ac7413ef51a88e06367313c27aec8f7292752a6\r\nBuild lane: monodevelop-lion-d15-7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.4\r\nDarwin 17.5.0 Darwin Kernel Version 17.5.0\r\n    Fri Apr 13 19:32:32 PDT 2018\r\n    root:xnu-4570.51.2~1/RELEASE_X86_64 x86_64\r\n\r\n=== Enabled user installed addins ===\r\n\r\nStraight8's SpecFlow Integration 1.11.1.0\r\nStraight8's SpecFlow Intergration 1.11.0.0\r\nInternet of Things (IoT) development (Preview) 7.5"},{"Id":"7853817469","Type":"IssuesEvent","CreatedAt":"2018-06-20T18:39:36","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1847","RelatedDescription":"Closed issue \"Xamarin Forms App occasionally hangs during Resource.UpdateIdValues call\" (#1847) at xamarin/xamarin-android","RelatedBody":"This might be related to #1544 \r\nAbout 1/4 the time the app boots, we hang during the Resources.UpdateIdValues call. Appears to happen in both debug and release builds.\r\nI originally thought this was related to 1544 as we'll have about 50 calls to UpdateIdValues on the stack. But I added some code to UpdateIdValues to not allow it to be reentrant, and we still see the same hang.\r\nIf it hangs, it appears to hang on the line:\r\n`global::Xamarin.Forms.Platform.Android.Resource.Attribute.actionBarSize = global::.....Droid.Resource.Attribute.actionBarSize;`\r\nIf I comment this line out, we won't hang.\r\nThe hang isn't consistent, but when it does happen, there is nothing on the stack. Almost like the stack was overwritten (again, making it seem like #1544 is the issue)\r\nWe have just under 4000 items in UpdateIdValues\r\n\r\nCurrently using VS 15.7.3 and this started happening when we switched to Xamarin Forms 3.0. We are considering switching back the previous release\r\n"},{"Id":"7853809169","Type":"PullRequestEvent","CreatedAt":"2018-06-20T18:38:02","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1865","RelatedDescription":"Opened pull request \"Remove Android.mk from src/monodroid\" (#1865) at xamarin/xamarin-android","RelatedBody":"https://github.com/xamarin/xamarin-android/commit/7c8b6e4ce93b2395f71ff7762afe7aadc416d3f3\r\nswitched our `src/monodroid/` builds from `ndk-build` + `.csproj` custom code to\r\nuniform use of `cmake` across all the supported platforms thus making\r\n`Android.mk`, a file used by `ndk-build`, no longer needed.\r\n\r\nThis commit removes the file."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7855789430","Type":"IssuesEvent","CreatedAt":"2018-06-21T04:04:57","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2624","RelatedDescription":"Closed issue \"ListView.ItemTemplate = new DataTemplate(...); is not working... in uwp only (Xamarin.Forms 3.0)\" (#2624) at xamarin/Xamarin.Forms","RelatedBody":""},{"Id":"7855604042","Type":"PullRequestEvent","CreatedAt":"2018-06-21T02:51:34","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3101","RelatedDescription":"Opened pull request \"Change animation extensions to use TrySetResult when finishing tasks\" (#3101) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThe animation extensions to `VisualElement` are using `SetResult` to set the result of the Task. If a second animation with the same name is started before the named animation is finished, the `SetResult` can be called twice on the same `Task`, which throws an exception. \r\n\r\nThis change uses `TrySetResult` for the animation extensions to prevent the exception. \r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #2482 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7855247865","Type":"IssuesEvent","CreatedAt":"2018-06-21T00:32:23","Actor":"POFerro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3061","RelatedDescription":"Closed issue \"ListView Crashed with InvalidCast when GroupHeaderTemplate is defined\" (#3061) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nListView is throwing an InvalidCastException when a GroupHeaderTemplate is defined\r\n### Steps to Reproduce\r\n\r\n1. Having this xaml:\r\n```xml\r\n<ListView ItemsSource=\"{Binding Categorias}\" \r\n                  GroupDisplayBinding=\"{Binding Titulo}\"\r\n                  GroupShortNameBinding=\"{Binding Titulo}\"\r\n                  IsGroupingEnabled=\"true\">\r\n            <ListView.HeaderTemplate>\r\n                <DataTemplate>\r\n                    <Grid>\r\n                        <Grid.ColumnDefinitions>\r\n                            <ColumnDefinition Width=\"*\" />\r\n                            <ColumnDefinition Width=\"*\" />\r\n                        </Grid.ColumnDefinitions>\r\n\r\n                        <Label Grid.Column=\"0\"\r\n                               Text=\"Despesas\" \r\n                               HorizontalOptions=\"Center\" />\r\n                        <Label Grid.Column=\"1\"\r\n                               Text=\"Receitas\" \r\n                               HorizontalOptions=\"Center\" />\r\n                    </Grid>\r\n                </DataTemplate>\r\n            </ListView.HeaderTemplate>\r\n            <ListView.GroupHeaderTemplate>\r\n                <DataTemplate>\r\n                    <Grid>\r\n                        <Grid.ColumnDefinitions>\r\n                            <ColumnDefinition Width=\"Auto\" />\r\n                            <ColumnDefinition Width=\"*\" />\r\n                        </Grid.ColumnDefinitions>\r\n\r\n                        <Label Grid.Column=\"1\"\r\n                               Text=\"{Binding Titulo}\" />\r\n                    </Grid>\r\n                </DataTemplate>\r\n            </ListView.GroupHeaderTemplate>\r\n            <ListView.ItemTemplate>\r\n                <DataTemplate>\r\n                    <TextCell Text=\"{Binding Titulo}\" Detail=\"{Binding RegExpStr}\" />\r\n                </DataTemplate>\r\n            </ListView.ItemTemplate>\r\n        </ListView>\r\n```\r\n2.  With this Model:\r\n```c#\r\n    public class ViewModel\r\n    {\r\n        public ObservableCollection<Categoria> Categorias { get; set; }\r\n    }\r\n    public class Categoria\r\n    {\r\n        public string Titulo { get; set; }\r\n\r\n        public static implicit operator ReadOnlyObservableCollection<SubCategoria>(Categoria d)\r\n        {\r\n            return d.SubCategorias;\r\n        }\r\n        [DataMember()]\r\n        public ObservableCollection<SubCategoria> subCategorias = new ObservableCollection<SubCategoria>();\r\n\r\n        [IgnoreDataMember]\r\n        public ReadOnlyObservableCollection<SubCategoria> SubCategorias { get { return new ReadOnlyObservableCollection<SubCategoria>(this.subCategorias); } }\r\n\r\n        public Categoria()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class SubCategoria\r\n    {\r\n        [IgnoreDataMember]\r\n        public Categoria Categoria { get; private set; }\r\n        public string Titulo { get; set; }\r\n        public string RegExpStr { get; set; }\r\n\r\n        public SubCategoria()\r\n        {\r\n        }\r\n    }\r\n```\r\n### Expected Behavior\r\nShould show grouped items in listView\r\n\r\n### Actual Behavior\r\nThrows an InvalidCastException\r\nSystem.InvalidCastException: Specified cast is not valid.\r\n  at at (wrapper castclass) System.Object.__castclass_with_cache(object,intptr,intptr)\r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].InsertGrouped (System.Object item, System.Int32 index) [0x000a1] in <ce2b877421c54ec290ac8c22bb563f4b>:0\r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].GroupedReset () [0x00083] in <ce2b877421c54ec290ac8c22bb563f4b>:0\r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].OnCollectionChangedGrouped (System.Collections.Specialized.NotifyCollectionChangedEventArgs e) [0x00459] in <ce2b877421c54ec290ac8c22bb563f4b>:0\r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].OnProxyCollectionChanged \r\n...\r\n### Basic Information\r\n\r\n- Version with issue:\r\nLooking at current code in GitHub I see the function:\r\n`\t\tTemplatedItemsList<TView, TItem> InsertGrouped(object item, int index)\r\n\t\t{\r\n\t\t\tvar children = item as IEnumerable;\r\n\r\n\t\t\tvar groupProxy = new TemplatedItemsList<TView, TItem>(this, children, _itemsView, _itemTemplateProperty);\r\n...\r\n\t\t\tif (GroupHeaderTemplate != null)\r\n\t\t\t{\r\n\t\t\t\tgroupProxy.HeaderContent = (TItem)GroupHeaderTemplate.CreateContent(groupProxy.ItemsSource, _itemsView);\r\n...\r\n`\r\nShould this last cast exist? GroupHeaderTemplate.CreateContent doesn't seem to create an object of type <TItem> isn't it returning a view? Not of type View but some regular View?\r\n\r\nBest regards\r\nPOFerro"},{"Id":"7854609578","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:21:35","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2961","RelatedDescription":null,"RelatedBody":"### Description of Change ###\r\n\r\nFor a project, I needed to color the spinner which is shown when you pull to refresh on a `ListView`. To my big surprise, this isn't available by default. So, I thought I would add it since I could find any issue or PR for it.\r\n\r\nImplemented for iOS and Android only. For other platforms, I did not see a loading indicator at all, or not one that could be colored.\r\n\r\nNo tests were added since it's a visual only thing.\r\n\r\n### Bugs Fixed ###\r\n\r\n- N/A\r\n\r\n### API Changes ###\r\n\r\nAdded: \r\n```csharp\r\npublic static readonly BindableProperty ListView.RefreshControlColorProperty;\r\npublic Color ListView.RefreshControlColor { get; set; }\r\n```\r\n\r\n### Behavioral Changes ###\r\n\r\nBy default the color of the spinner will be black as is it now, but by setting the new `SpinnerColor` property you can influence the color of the spinner.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"7854609193","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:21:30","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2961","RelatedDescription":"Closed pull request \" Implemented colored refresh indicator for ListView pull-to-refresh\" (#2961) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor a project, I needed to color the spinner which is shown when you pull to refresh on a `ListView`. To my big surprise, this isn't available by default. So, I thought I would add it since I could find any issue or PR for it.\r\n\r\nImplemented for iOS and Android only. For other platforms, I did not see a loading indicator at all, or not one that could be colored.\r\n\r\nNo tests were added since it's a visual only thing.\r\n\r\n### Bugs Fixed ###\r\n\r\n- N/A\r\n\r\n### API Changes ###\r\n\r\nAdded: \r\n```csharp\r\npublic static readonly BindableProperty ListView.RefreshControlColorProperty;\r\npublic Color ListView.RefreshControlColor { get; set; }\r\n```\r\n\r\n### Behavioral Changes ###\r\n\r\nBy default the color of the spinner will be black as is it now, but by setting the new `SpinnerColor` property you can influence the color of the spinner.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense"},{"Id":"7854591445","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:17:42","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3074","RelatedDescription":"Merged pull request \"[UWP] Allow PageControl to find its template if a NavigationPage is the app root\" (#3074) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor some reason, if a Navigation Page was the root page of a Forms application, on UWP the containing PageControl could not properly load its ControlTemplate. This had the side effect of preventing the ActivityIndicator from displaying or running.\r\n\r\nThis change allows the PageControl to find its template even when the Navigation Page is the root, which allows the ActivityIndicator to display properly.\r\n\r\nUnfortunately, there's no good way to automate the test for this (we can't verify that the ActivityIndicator is displaying correctly, and the test app can't launch with the test page as its root).\r\n\r\nRelated to #730\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #1483 \r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7854751082","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:54:01","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4303","RelatedDescription":"Merged pull request \"[Intents] Update bindings to Xcode 10 Beta 2\" (#4303) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7854740416","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:51:23","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4304","RelatedDescription":"Merged pull request \"[ReplayKit] Update bindings to Xcode 10 beta 2\" (#4304) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7854714146","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:45:20","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4307","RelatedDescription":"Opened pull request \"Bump maccore to get mlaunch fix to make os_log write to stderr.\" (#4307) at xamarin/xamarin-macios","RelatedBody":"Commit list for xamarin/maccore:\n\n* xamarin/maccore@a49e4f2ca1 Bump maciostools to get logging improvement. (#864)\n\nDiff: https://github.com/xamarin/maccore/compare/01da40688303635dd7a11d4b0543aed9ebc3107e...a49e4f2ca17086ddebade8100a1a06d2c816a63d"},{"Id":"7854702287","Type":"PullRequestEvent","CreatedAt":"2018-06-20T21:42:26","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4306","RelatedDescription":"Opened pull request \"[introspection] CMMovementDisorderManager isn't usable for now.\" (#4306) at xamarin/xamarin-macios","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":41,"FavoriteCount":16,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":63,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":19,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":27,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":23,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":158,"FavoriteCount":84,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":32,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null}]}},"RunOn":"2018-06-21T05:30:59.3981497Z","RunDurationInMilliseconds":4496}