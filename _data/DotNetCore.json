{"Data":{"Blog":{"FeedItems":[{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":102,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6750142231","Type":"PullRequestEvent","CreatedAt":"2017-10-23T02:25:09","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14621","RelatedDescription":"Merged pull request \"Fix gtHashValue to properly hash all the bits when we have a 64-bit item\" (#14621) at dotnet/coreclr","RelatedBody":""},{"Id":"6750074217","Type":"PullRequestEvent","CreatedAt":"2017-10-23T01:51:29","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14653","RelatedDescription":"Merged pull request \"Remove low value purpose comments\" (#14653) at dotnet/coreclr","RelatedBody":"Most of the purpose comments removed referred to the struct as a \"class\" which is confusing. In addition, these value types are simple enough they don't warrant a full purpose description. Resolves #13479."},{"Id":"6749994730","Type":"PullRequestEvent","CreatedAt":"2017-10-23T01:05:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14654","RelatedDescription":"Opened pull request \"Cleanup BCLDebug\" (#14654) at dotnet/coreclr","RelatedBody":"- Delete correctness, performance and safe handle stacktrace logging\r\n- Change remaining BCLDebug.Assert uses to Debug.Assert"},{"Id":"6749954807","Type":"PullRequestEvent","CreatedAt":"2017-10-23T00:39:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14652","RelatedDescription":"Merged pull request \"Hide post exception stack frames\" (#14652) at dotnet/coreclr","RelatedBody":"Not hiding\r\n```\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nKeeping it simple\r\n\r\nI think there was consensus at this level?\r\n\r\n/cc @stephentoub @noahfalk @jkotas PTAL"},{"Id":"6749871895","Type":"PullRequestEvent","CreatedAt":"2017-10-22T23:38:54","Actor":"aerotog","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14653","RelatedDescription":"Opened pull request \"Remove low value purpose comments\" (#14653) at dotnet/coreclr","RelatedBody":"Most of the purpose comments removed referred to the struct as a \"class\" which is confusing. In addition, these value types are simple enough they don't warrant a full purpose description. Resolves #13479."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6748141370","Type":"IssuesEvent","CreatedAt":"2017-10-22T01:46:07","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7882","RelatedDescription":"Closed issue \"Cannot get required symbol TLSv1_1_method from libssl\" (#7882) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new console -o hwapp`  \r\n## Expected  behavior\r\nCreate a new application with dotnet cli\r\n## Actual behavior\r\n`Cannot get required symbol TLSv1_1_method from libssl\r\nAborted (`core' generado)`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nHerramientas de la línea de comandos .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  26\r\n OS Platform: Linux\r\n RID:         fedora.26-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6748050315","Type":"IssuesEvent","CreatedAt":"2017-10-22T00:13:18","Actor":"jafg1222","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7882","RelatedDescription":"Opened issue \"Cannot get required symbol TLSv1_1_method from libssl\" (#7882) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new console -o hwapp`  \r\n## Expected  behavior\r\nCreate a new application with dotnet cli\r\n## Actual behavior\r\n`Cannot get required symbol TLSv1_1_method from libssl\r\nAborted (`core' generado)`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nHerramientas de la línea de comandos .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  26\r\n OS Platform: Linux\r\n RID:         fedora.26-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6747855664","Type":"IssuesEvent","CreatedAt":"2017-10-21T21:20:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7881","RelatedDescription":"Closed issue \"Bad help \"--version\"\" (#7881) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nrun `dotnet` from command line.\r\nthis outputs:\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help            Display help.\r\n  --version         Display version.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nThen run `dotnet --version`\r\nTo receive:\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\n## Expected  behavior\r\nEither --version will work or -- version will not appear in the help.\r\n\r\n## Actual behavior\r\nIrrelevant error message - turn out I needed to use --info instead of --version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n"},{"Id":"6747851083","Type":"IssuesEvent","CreatedAt":"2017-10-21T21:17:19","Actor":"HarelM","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7881","RelatedDescription":"Opened issue \"Bad help \"--version\"\" (#7881) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nrun\r\n>dotnet\r\nthis outputs:\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help            Display help.\r\n  --version         Display version.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nThen run\r\n>dotnet --version\r\nDid you mean to run dotnet SDK commands? Please install dotnet SDK from:\r\n  http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\n## Expected  behavior\r\nEither --version will work or -- version will not appear in the help.\r\n\r\n## Actual behavior\r\nIrrelevant error message - turn out I needed to use --info instead of --version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n"},{"Id":"6746094823","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:43:58","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7880","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25820-05 (master)\" (#7880) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6746002921","Type":"PullRequestEvent","CreatedAt":"2017-10-20T22:09:48","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7877","RelatedDescription":"Merged pull request \"Update Microsoft.ApplicationInsights to 2.4.0\" (#7877) at dotnet/cli","RelatedBody":"The surface area we used for Microsoft.ApplicationInsights is small, basically one API -- \"to send\". I tested it with Fiddler on a clean machine, the captured data looks good."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6749336295","Type":"IssuesEvent","CreatedAt":"2017-10-22T17:42:32","Actor":"ghelyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/545","RelatedDescription":"Opened issue \"net462 referencing netstandard2.0 - can the large number of dlls be avoided?\" (#545) at dotnet/standard","RelatedBody":"If I have a net standard 2.0 library and it's referenced by a net framework 4.6.2 console application, building the net 462 application copies almost 100 dlls to the output directory, such as System.IO.dll, System.Console.dll, etc. It also copies netstandard.dll.\r\n\r\nIf I copy just the console app .exe, the netstandard2.0 project's dll and netstandard.dll to their own directory, the exe seems to work.\r\n\r\nI had heard that all these System.* dlls were going to go away in netstandard 2.0. Are all those other dlls necessary? If net framework 4.6.2 implements net standard 2.0, shouldn't having net462 be enough? Is there any way to prevent output of all of the individual System.* dlls?\r\n\r\nMy reason for asking is that I have installers that need to be maintained, and at the moment this is causing me to avoid pulling in nuget packages which target netstandard because of the maintenance burden of installing all of the dlls they output, but more and more nuget packages are just targeting netstandard in their latest versions now, which is preventing me from keeping them up to date."},{"Id":"6745741520","Type":"IssuesEvent","CreatedAt":"2017-10-20T20:51:57","Actor":"isaac2004","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/544","RelatedDescription":"Opened issue \"DotNet Standard 2.0 Project downgraded to 1.6 and cannot update\" (#544) at dotnet/standard","RelatedBody":"I have a CL that was Standard 2.0 and after installing the 2.0.1 SDK it got downgraded somehow to 1.6 (.csproj still says 2.0). The application fails on build because of namespaces not available. When I try to upgrade through VS, I get this\r\n\r\n![capture](https://user-images.githubusercontent.com/8878502/31841261-baa2e134-b5b6-11e7-856d-2f8eeac5d88b.PNG)\r\n \r\nI am blocked to upgrade the package. If I try to upgrade via CLI, I get\r\n\r\n````\r\nPS C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper> dotnet add package NETStandard.Library --version 2.0.0\r\n  Writing C:\\Users\\Isaac\\AppData\\Local\\Temp\\tmp5E87.tmp\r\ninfo : Adding PackageReference for package 'NETStandard.Library' into project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nlog  : Restoring packages for C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj...\r\ninfo : Package 'NETStandard.Library' is compatible with all the specified frameworks in project 'C:\\Development\\YahooFantasyWrapper\\src\\YahooFantasyWrapper\\YahooFantasyWrapper.csproj'.\r\nerror: Error while performing Update for package 'NETStandard.Library'. Cannot edit items in imported files -\r\nerror:   Item 'PackageReference' for 'NETStandard.Library' in Imported file 'C:\\Program Files\\dotnet\\sdk\\2.1.0-preview1-007228\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props'.\r\n````\r\nI imagine this has to do with me upgrading to 2.0.1, but I am unable to rollback in anyway. Do I need to uninstal 2.0.1 to have 2.0.0 work?"},{"Id":"6741695643","Type":"IssuesEvent","CreatedAt":"2017-10-20T02:39:56","Actor":"jcouv","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/543","RelatedDescription":"Opened issue \"Issue with ValueTuple on net471\" (#543) at dotnet/standard","RelatedBody":"@terrajobst @ryanelian If it's ok, let's move the investigation to a dedicated issue.\r\n\r\nHere's the latest comment from Ryan, in the thread for https://github.com/dotnet/standard/issues/514.\r\n\r\n----\r\n[msbuild.zip](https://github.com/dotnet/standard/files/1400613/msbuild.zip)\r\n\r\nbtw, just curious, how do you 'see' the content of the binary log?\r\n\r\nNo, adding those lines does not make the warning message disappear...\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"6740753772","Type":"IssuesEvent","CreatedAt":"2017-10-19T21:04:19","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/542","RelatedDescription":"Opened issue \"You must add a reference to assembly netstandard errors\" (#542) at dotnet/standard","RelatedBody":"@fahadabdulaziz opened this here: https://github.com/Microsoft/dotnet/issues/527\r\n\r\nHi,\r\n\r\nAfter targeting .Net Framework 4.7.1, in many projects referencing net standard libraries. I get these errors:\r\n![errs](https://user-images.githubusercontent.com/5483584/31769585-f06cdab6-b4dc-11e7-9a58-f6d3f52341da.png)\r\n\r\n`csharp\r\nThe type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n`\r\n\r\nThough I all the projects including that targeting net471 are building successfully!\r\n\r\nAny thoughts ? "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6750498314","Type":"IssuesEvent","CreatedAt":"2017-10-23T05:21:37","Actor":"rvhuang","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24806","RelatedDescription":"Opened issue \"Unknown character appears after Path.Combine()\" (#24806) at dotnet/corefx","RelatedBody":"Dotnet Core version: 2.0.2 (x64)\r\nOS: Windows 10 x64 (build 15063)\r\n\r\nConsidering simple code below:\r\n\r\n```csharp\r\n    var path = AppDomain.CurrentDomain.BaseDirectory;\r\n    var file = Path.Combine(path, \"‪testing.json\");\r\n\r\n    Console.WriteLine(AppDomain.CurrentDomain.BaseDirectory);\r\n    Console.WriteLine(file);\r\n\r\n```\r\n\r\nThe output shows strange behavior which has an unknown character between `path` and \"testing.json\".\r\n\r\n    C:\\ConsoleApp3\\ConsoleApp3\\bin\\Debug\\netcoreapp2.0\\\r\n    C:\\ConsoleApp3\\ConsoleApp3\\bin\\Debug\\netcoreapp2.0\\?testing.json\r\n\r\nThe following code shows additional details about the unknown character: \r\n\r\n```csharp\r\n    Console.WriteLine(char.GetNumericValue(file[path.Length]));\r\n    Console.WriteLine(char.GetUnicodeCategory(file[path.Length]));\r\n    Console.WriteLine((int)file[path.Length]);\r\n```\r\n And the output is:\r\n\r\n    -1\r\n    Format\r\n    8234\r\n\r\n\r\n"},{"Id":"6750229508","Type":"IssuesEvent","CreatedAt":"2017-10-23T03:05:44","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24805","RelatedDescription":"Opened issue \"Test failure: System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests/Verify_InvalidPaddingMode_Throws\" (#24805) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests/Verify_InvalidPaddingMode_Throws` has failed.\n\n$BlockedFromReflection_5_22711b8a : A device attached to the system is not functioning\n\n        Stack Trace:\n\n           at Internal.NativeCrypto.CapiHelper.SignValue($SafeProvHandle hProv, $SafeKeyHandle hKey, Int32 keyNumber, Int32 calgKey, Int32 calgHash, Byte[] hash) in E:\\A\\_work\\1190\\s\\corefx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\CapiHelper.Windows.cs:line 1223\n       at System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[] buffer, Object halg) in E:\\A\\_work\\1190\\s\\corefx\\src\\System.Security.Cryptography.Csp\\src\\System\\Security\\Cryptography\\RSACryptoServiceProvider.Windows.cs:line 420\n       at System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests.Verify_InvalidPaddingMode_Throws() in E:\\A\\_work\\1190\\s\\corefx\\src\\System.Security.Cryptography.Csp\\tests\\RSACryptoServiceProviderTests.cs:line 373\n       at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)\n       at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean isTargetThisCall)\n       at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean wrapInTargetInvocationException, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566\n    \nBuild : Master - 20171023.01 (UWP ILC Tests)\nFailing configurations:\n- Windows.10.Amd64-arm\n  - Debug\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Filc~2F/build/20171023.01/workItem/System.Security.Cryptography.Csp.Tests.Execution/analysis/xunit/System.Security.Cryptography.Csp.Tests.RSACryptoServiceProviderTests~2FVerify_InvalidPaddingMode_Throws"},{"Id":"6750150076","Type":"IssuesEvent","CreatedAt":"2017-10-23T02:28:46","Actor":"dotnet-mc-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24804","RelatedDescription":"Opened issue \"Test: System.Net.Sockets.Tests.TimeoutTest/SendTimesOut_Throws failed with \"Xunit.Sdk.InRangeException\"\" (#24804) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Net.Sockets.Tests.TimeoutTest/SendTimesOut_Throws(forceNonBlocking: False)` has failed.\n\nAssert.InRange() Failure\\r\n    Range:  (1000 - 4000)\\r\n    Actual: 4846.0518\n\n        Stack Trace:\n\n           at System.Net.Sockets.Tests.TimeoutTest.SendTimesOut_Throws(Boolean forceNonBlocking) in /root/corefx-1079585/src/System.Net.Sockets/tests/FunctionalTests/TimeoutTest.cs:line 130\nBuild : Master - 20171023.01 (Core Tests)\nFailing configurations:\n- suse.422.amd64-x64\n  - Debug\n\nDetail: https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20171023.01/workItem/System.Net.Sockets.Tests/analysis/xunit/System.Net.Sockets.Tests.TimeoutTest~2FSendTimesOut_Throws(forceNonBlocking:%20False)"},{"Id":"6749789264","Type":"PullRequestEvent","CreatedAt":"2017-10-22T22:37:12","Actor":"sh3ev","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24803","RelatedDescription":"Opened pull request \"A just link fit to other URLs\" (#24803) at dotnet/corefx","RelatedBody":""},{"Id":"6749705983","Type":"IssuesEvent","CreatedAt":"2017-10-22T21:38:13","Actor":"Trolldemorted","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24802","RelatedDescription":"Opened issue \"the WinRT websocket bug is still killing apps on W10 Mobile\" (#24802) at dotnet/corefx","RelatedBody":"As as been reported [here](https://github.com/dotnet/corefx/issues/17317), if the connection of a `ClientWebSocket` in NETStandard16 is terminated, the process will crash because the exception cannot be handled.\r\n\r\nThis issue has been adressed in NETStandard20/UWP6.0 and the FCU, and it works if you target W10 build 16299 on a desktop. However, on W10M devices like the Lumia 640, the build and thus NETStandard20 is unavailable and everytime a connection is disrupted the app will crash.\r\n\r\nCould a fix for this be made available, preferably in the near future? Seeing your app being killed without anything you can do for several months because of a known and identified issue is tiresome."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6749809702","Type":"IssuesEvent","CreatedAt":"2017-10-22T22:51:42","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22804","RelatedDescription":"Opened issue \"cast redundant but it's not\" (#22804) at dotnet/roslyn","RelatedBody":"see attachement\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/118692/cast-redundant-but-its-not.html\nVSTS ticketId: 499179_\n_These are the original issue comments:_\n\nDavid Poeschl [MSFT] on 9/25/2017, 00:41 PM (27 days ago): <p>Thank you for your feedback! Unfortunately, I can't find the attachment you mention. Can you upload it again or just paste the code into a comment? Thanks!</p>\n\n_These are the original issue solutions:_\n\nClemens Schneider solved on 9/25/2017, 01:38 PM (27 days ago), 0 votes: \n<p>using System.Text; namespace ConsoleApp2 \\{ class Program \\{ static void Main(string[] args) \\{ StringBuilder numbers = new StringBuilder(); int?[] position = new int?[2]; numbers[(int)position[1]] = 'x'; } } }</p> \n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6750416938","Type":"PullRequestEvent","CreatedAt":"2017-10-23T04:39:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4780","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4780) at dotnet/corert","RelatedBody":""},{"Id":"6750416482","Type":"PullRequestEvent","CreatedAt":"2017-10-23T04:38:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4780","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4780) at dotnet/corert","RelatedBody":""},{"Id":"6750262277","Type":"PullRequestEvent","CreatedAt":"2017-10-23T03:21:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4779","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4779) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6750187572","Type":"PullRequestEvent","CreatedAt":"2017-10-23T02:46:45","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4779","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4779) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6750186527","Type":"PullRequestEvent","CreatedAt":"2017-10-23T02:46:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4777","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4777) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6750103987","Type":"IssuesEvent","CreatedAt":"2017-10-23T02:06:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4778","RelatedDescription":"Opened issue \"Port exception frame filtering logic from CoreCLR\" (#4778) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/14652 and https://github.com/dotnet/corert/pull/4777"},{"Id":"6749956255","Type":"PullRequestEvent","CreatedAt":"2017-10-23T00:40:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4777","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4777) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6749679512","Type":"IssuesEvent","CreatedAt":"2017-10-22T21:21:26","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4529","RelatedDescription":"Closed issue \"Implement nop opcode\" (#4529) at dotnet/corert","RelatedBody":"Implement the nop opcode. This opcode doesn't do anything, but it would be good to emit a nop in debug builds since it can affect debugging. It might be possible do this by calling the llvm.donothing intrinsic. The method to fill in is:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L266"},{"Id":"6749679445","Type":"PullRequestEvent","CreatedAt":"2017-10-22T21:21:24","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4776","RelatedDescription":"Merged pull request \"Emit donothing on nop. Fix #4529\" (#4776) at dotnet/corert","RelatedBody":"Emit donothing call on nops"},{"Id":"6749394368","Type":"PullRequestEvent","CreatedAt":"2017-10-22T18:19:38","Actor":"jacano","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4776","RelatedDescription":"Opened pull request \"Emit donothing on nop. Fix #4529\" (#4776) at dotnet/corert","RelatedBody":"Emit donothing call on nops"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":38,"FavoriteCount":19,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":380,"FavoriteCount":345,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":76,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":108,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":21,"RawContent":null}]}},"RunOn":"2017-10-23T05:30:19.2803943Z","RunDurationInMilliseconds":6273}