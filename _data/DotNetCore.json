{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7493771884","Type":"PullRequestEvent","CreatedAt":"2018-04-07T00:40:33","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17466","RelatedDescription":"Opened pull request \"Update CoreClr to preview3-26407-01 (master)\" (#17466) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7493759882","Type":"IssuesEvent","CreatedAt":"2018-04-07T00:33:39","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16482","RelatedDescription":"Closed issue \"Publish symbols using Microsoft.SymbolUploader.Build.Task package\" (#16482) at dotnet/coreclr","RelatedBody":"The `Microsoft.SymbolUploader.Build.Task` package on the BuildTools feed is the new way to index and publish symbols to the symbol server. It should be used instead of the current combination of BuildTools' `GetAllSymbolFilesToPublish` and the VSTS symbol publish build step.\r\n\r\nExample implementation in Core-Setup: https://github.com/dotnet/core-setup/pull/3465"},{"Id":"7493758588","Type":"PullRequestEvent","CreatedAt":"2018-04-07T00:32:53","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17463","RelatedDescription":"Merged pull request \"Publish symbols using Microsoft.SymbolUploader.Build.Task package\" (#17463) at dotnet/coreclr","RelatedBody":"Added PB_SymbolExpirationInDays (settable at queue time), PB_MsdlSymbolServerPAT, PB_SymwebSymbolServerPAT variables.\r\n\r\nAdded \"msdl\" (publish symbols to public Microsoft server) and \"symweb\" (publish symbols to symweb) variables to PB_PublishType.\r\n\r\nUpdate to version 1.0.0-beta-62806-01 of the symbol uploader.\r\n\r\nIssue #16482"},{"Id":"7493733517","Type":"IssuesEvent","CreatedAt":"2018-04-07T00:18:41","Actor":"jainaashish","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17465","RelatedDescription":"Opened issue \"Directory.EnumerateDirectories doesn't return directory list on rhel7.2\" (#17465) at dotnet/coreclr","RelatedBody":"I've created a simple application to demonstrate the issue where `Directory.EnumerateDirectories` api doesn't return the list of child directories on rhel 7.2, although it works fine on Windows or Ubuntu. \r\n\r\nSample Project - https://github.com/jainaashish/CoreClrIssue/tree/master/EnumerateDirectoriesIssue/EnumerateDirectoriesIssue\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7493863270","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:37:59","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9014","RelatedDescription":"Closed pull request \"WIP consume bring your own shim(byos)\" (#9014) at dotnet/cli","RelatedBody":"pending loc. and rebase master. and order commits"},{"Id":"7493862950","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:37:43","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9018","RelatedDescription":"Opened pull request \"WIP consume bring your own shim(byos)\" (#9018) at dotnet/cli","RelatedBody":"pending loc and order commits"},{"Id":"7493770750","Type":"PullRequestEvent","CreatedAt":"2018-04-07T00:39:59","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8997","RelatedDescription":"Merged pull request \"Add TryGetMostFitRuntimeIdentifier\" (#8997) at dotnet/cli","RelatedBody":"This is the most tricky part of consume bring your own shim. CLI will need to select the most fit RID given the shims folder layout in nupkg. This function is to pick that. \r\n\r\nSay there is folder `win10-x64, win-x64, win, linux`, CLI need to pick the right shim folder to use according to machine RID (say it is windows 10 x64). And this function take these rids as input and return `win10-x64`."},{"Id":"7493586483","Type":"PullRequestEvent","CreatedAt":"2018-04-06T23:11:21","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8982","RelatedDescription":"Closed pull request \"WIP Embed relative path\" (#8982) at dotnet/cli","RelatedBody":"After review I will squash this PR and add to master merge. Since master has no side car apphost already https://github.com/dotnet/cli/pull/9012#issuecomment-379310833"},{"Id":"7493436025","Type":"IssuesEvent","CreatedAt":"2018-04-06T22:17:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9017","RelatedDescription":"Closed issue \"Restore hangs when referenced project targets only .net standard 2.0\" (#9017) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Try to install an Expecto Template via `dotnet new -i Expecto.Template`\r\n\r\n## Expected  behavior\r\n2. Everything is ok, the template is installed as expected.\r\n\r\n## Actual behavior\r\n```bash\r\n$ dotnet new -i Expecto.Template\r\n...\r\n...\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202: Package Expecto 7.0.0 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). Package Expecto 7.0.0 supports:\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202:   - net461 (.NETFramework,Version=v4.6.1)\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202:   - netstandard2.0 (.NETStandard,Version=v2.0)\r\n  Generating MSBuild file ~/.templateengine/dotnetcli/v2.1.4/scratch/obj/restore.csproj.nuget.g.props.\r\n  Generating MSBuild file ~/.templateengine/dotnetcli/v2.1.4/scratch/obj/restore.csproj.nuget.g.targets.\r\n  Restore failed in 6.24 sec for ~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj.\r\n```\r\n2. Installation hangs with an error that Expecto library doesn't support .net core 1.0 (Expecto supports .net standard 2.0, and drops support to .net standard 1.6 after 7.0 release).\r\n3. When we cancel the installation, regardless of the error from point 2, a template would be installed properly.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.103)\r\n\r\nProduct Information:\r\n Version:            2.1.103\r\n Commit SHA-1 hash:  60218cecb5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.103\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\r\n\r\n[Related issue](https://github.com/MNie/Expecto.Template/issues/10)\r\n\r\n"},{"Id":"7493383048","Type":"IssuesEvent","CreatedAt":"2018-04-06T22:01:33","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7995","RelatedDescription":"Closed issue \"Error when case does not match between dependencies\" (#7995) at dotnet/cli","RelatedBody":"Let me preface this by saying. I understand this may be a *wontfix*, because most operating systems use a case sensitive file system. However, it would be nice to have a custom error message for this, or at least this issue as a reference for anyone else who has this problem.\r\n\r\n## Steps to reproduce\r\n\r\nAttempt to `Rebuild` the solution.\r\n\r\n## Expected  behavior\r\n\r\nThe solution builds.\r\n\r\n## Actual behavior\r\n\r\nError Cannot find project info for 'PROJECT2.csproj'. This can indicate a missing project reference.\t\r\n\r\n## Solution\r\n\r\nI had a dependency tree that looked like this:\r\n\r\nUI => Project 1 => Project 2\r\n\r\nProject 1 had a reference to `project2.csproj`.\r\n\r\nProject 2's csproj file was named `PROJECT2.csproj` on the disk.\r\n\r\nI just renamed `PROJECT2.csproj` to `~PROJECT2.csproj` then to `project2.csproj` and did a `git mv PROJECT2.csproj project2.csproj`.\r\n\r\nI think the ideal solution would be to make the error message match the *expected* casing. This would allow the developer to identify the problem faster, while still meeting the cross platform requirements.\r\n\r\n`Error Cannot find project info for 'project2.csproj'. This can indicate a missing project reference.`\r\n\r\n## Environment data\r\n\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```"},{"Id":"7493126020","Type":"IssuesEvent","CreatedAt":"2018-04-06T20:53:02","Actor":"MNie","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9017","RelatedDescription":"Opened issue \"Restore hungs when referenced project targets only .net standard 2.0\" (#9017) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Try to install an Expecto Template via `dotnet new -i Expecto.Template`\r\n\r\n## Expected  behavior\r\n2. Everything is ok, the template is installed as expected.\r\n\r\n## Actual behavior\r\n```bash\r\n$ dotnet new -i Expecto.Template\r\n...\r\n...\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202: Package Expecto 7.0.0 is not compatible with netcoreapp1.0 (.NETCoreApp,Version=v1.0). Package Expecto 7.0.0 supports:\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202:   - net461 (.NETFramework,Version=v4.6.1)\r\n~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj : error NU1202:   - netstandard2.0 (.NETStandard,Version=v2.0)\r\n  Generating MSBuild file ~/.templateengine/dotnetcli/v2.1.4/scratch/obj/restore.csproj.nuget.g.props.\r\n  Generating MSBuild file ~/.templateengine/dotnetcli/v2.1.4/scratch/obj/restore.csproj.nuget.g.targets.\r\n  Restore failed in 6.24 sec for ~/.templateengine/dotnetcli/v2.1.4/scratch/restore.csproj.\r\n```\r\n2. Installation hangs with an error that Expecto library doesn't support .net core 1.0 (Expecto supports .net standard 2.0, and drops support to .net standard 1.6 after 7.0 release).\r\n3. When we cancel the installation, regardless of the error from point 2, a template would be installed properly.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.103)\r\n\r\nProduct Information:\r\n Version:            2.1.103\r\n Commit SHA-1 hash:  60218cecb5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.103\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\r\n\r\n[Related issue](https://github.com/MNie/Expecto.Template/issues/10)\r\n\r\n"},{"Id":"7493071100","Type":"PullRequestEvent","CreatedAt":"2018-04-06T20:39:38","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9012","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#9012) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7493163502","Type":"PullRequestEvent","CreatedAt":"2018-04-06T21:02:10","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Merged pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7489176150","Type":"IssuesEvent","CreatedAt":"2018-04-06T06:21:59","Actor":"RajeshBalakrishnan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/702","RelatedDescription":"Opened issue \".Net Standard - Directory Services\" (#702) at dotnet/standard","RelatedBody":"Greetings,\r\n\r\nWe are migrating ,net code to ,net standard 2.0. We see \"PrincipalContext\", \"ConnectionOptions\", \"ManagementPath\", \"ObjectQuery\", \"ManagementObjectSearcher\", and \"ManagementObject\" classes are mssing in .Net standard 2.0.\r\n\r\n1. We have used \"PrincipalContext\" class to authenciate Windows user credentials. Can you let us know how to authenciate the user credentials in .Net standard??? Is there any API available???\r\n\r\n2. We have used \"WMI\" query to read the \"Manufacturer\" and \"Model\" details. Can you let us know how to read the same in .Net standard??? Is there any API available???\r\n\r\nThank you"},{"Id":"7487635910","Type":"PullRequestEvent","CreatedAt":"2018-04-05T21:08:50","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Opened pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7481565567","Type":"PullRequestEvent","CreatedAt":"2018-04-04T21:05:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/700","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02704-01 (master)\" (#700) at dotnet/standard","RelatedBody":""},{"Id":"7481560439","Type":"PullRequestEvent","CreatedAt":"2018-04-04T21:04:25","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/695","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02703-02 (master)\" (#695) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7494081985","Type":"PullRequestEvent","CreatedAt":"2018-04-07T04:37:00","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28893","RelatedDescription":null,"RelatedBody":"Related to https://github.com/dotnet/corefx/issues/28856"},{"Id":"7494081935","Type":"PullRequestEvent","CreatedAt":"2018-04-07T04:36:57","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28893","RelatedDescription":"Closed pull request \"Registry Test SetValueWithEnvironmentVariable disabled\" (#28893) at dotnet/corefx","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/28856"},{"Id":"7494081471","Type":"PullRequestEvent","CreatedAt":"2018-04-07T04:36:31","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28872","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/27626"},{"Id":"7494081391","Type":"PullRequestEvent","CreatedAt":"2018-04-07T04:36:27","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28872","RelatedDescription":"Closed pull request \"Data.Common tests fixed for non english windows\" (#28872) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/27626"},{"Id":"7494015014","Type":"IssuesEvent","CreatedAt":"2018-04-07T03:39:04","Actor":"EssenRoc","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28909","RelatedDescription":"Opened issue \"How to use \"RSA/ECB/PKCS1Padding\" and \"RSA/ECB/OAEPPadding\"\" (#28909) at dotnet/corefx","RelatedBody":"I need to use these two algorithms but I don't know how to use the .net core\r\nhelp me!!!"},{"Id":"7493988633","Type":"PullRequestEvent","CreatedAt":"2018-04-07T03:16:54","Actor":"MisinformedDNA","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28908","RelatedDescription":"Opened pull request \"Clean dead code for System.Console\" (#28908) at dotnet/corefx","RelatedBody":""},{"Id":"7493891775","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:59:06","Actor":"MisinformedDNA","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28907","RelatedDescription":"Opened pull request \"Clean code for System.ComponentModel*\" (#28907) at dotnet/corefx","RelatedBody":"#17905 "},{"Id":"7493813497","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:04:29","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28906","RelatedDescription":"Opened pull request \"Update the System.Runtime and System.Memory ref based on new buildtools\" (#28906) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/28870\r\nBased on changes in https://github.com/dotnet/buildtools/pull/2003.\r\n\r\ncc @weshaggard, @nguerrera, @joshfree, @bartonjs, @agocke, @jaredpar, @gafter, @terrajobst, @jcouv, @MadsTorgersen "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7494030479","Type":"PullRequestEvent","CreatedAt":"2018-04-07T03:52:15","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25968","RelatedDescription":"Merged pull request \"Prefer dashes in compiler help message\" (#25968) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/24394"},{"Id":"7494030475","Type":"IssuesEvent","CreatedAt":"2018-04-07T03:52:15","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24394","RelatedDescription":"Closed issue \"Prefer '-' over '/' for options in \"csc - help\"\" (#24394) at dotnet/roslyn","RelatedBody":"This is related to dotnet/docs#4072  \"Inconsistent switch usage for C# compiler options.\r\n\r\nWe found that the options documentation used a mixture of `/` and `-` and we wanted to standardize (knowing that both are supported.)  The community response was overwhelmingly in favor of `-`.  \r\n\r\nWe are well on the way to updating the docs.  \r\n\r\nI would make the same changes to https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/CSharpResources.resx so that \"csc -help\" provided the same experience.\r\n\r\n/cc @jcouv \r\n"},{"Id":"7494029205","Type":"PullRequestEvent","CreatedAt":"2018-04-07T03:51:06","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26011","RelatedDescription":"Opened pull request \"IntroduceLocal: adjust selection when pointing at trailing trivia\" (#26011) at dotnet/roslyn","RelatedBody":"Repro: try to invoke IntroduceLocal on an expression, but start the selection on a preceding line. The refactoring will not trigger.\r\nFor instance:\r\n```C#\r\nint x = [|\r\n     2 * 5 |]\r\n     ;\r\n```\r\n\r\nThe reason is that the region starts on the trailing trivia of the preceding token, so that preceding token gets included (`=` in this example). But the refactoring cannot proceed on `= 2 * 5` as that is not an expression.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/25990"},{"Id":"7493935312","Type":"IssuesEvent","CreatedAt":"2018-04-07T02:33:12","Actor":"bryanar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26005","RelatedDescription":"Closed issue \"SyntaxGenerator ToFullString() not producing legal code.\" (#26005) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft.CodeAnalysis Nuget 2.7.0.\r\n\r\n**Steps to Reproduce**:\r\n\r\n            var workspace = new AdhocWorkspace();\r\n            var generator = SyntaxGenerator.GetGenerator(workspace, LanguageNames.CSharp);\r\n\r\n            var unit = generator.CompilationUnit(generator.NamespaceImportDeclaration(\"System\"),\r\n                generator.ClassDeclaration(\"TestClass\",\r\n                members: new[]\r\n                {\r\n                    generator.FieldDeclaration(\"Name\", generator.TypeExpression(SpecialType.System_String)),\r\n                    generator.MethodDeclaration(\"Main\", null, modifiers: DeclarationModifiers.Static)\r\n                }));\r\n\r\n\r\n**Expected Behavior**:\r\nLegitimate Code.\r\n\r\n**Actual Behavior**:\r\n`usingSystem;classTestClass{stringName;staticvoidMain(){}}\r\n`\r\nI think that my actual issue is with the ToFullString() method, but I haven't checked the source to confirm. A pretty-print of the source would be nice, but I'd settle for something that simply doesn't break intellisense + can be compiled."},{"Id":"7493887659","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:55:56","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25937","RelatedDescription":"Merged pull request \"cleanup some OOP code \" (#25937) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nThere is no customer experience change\r\n\r\n### Bugs this fixes\r\n\r\nN/A\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\nN/A\r\n\r\n### Performance impact\r\n\r\nN/A\r\n\r\n### Is this a regression from a previous update?\r\n\r\nN/A\r\n\r\n### Root cause analysis\r\n\r\njust moving around code. no functional or perf changes.\r\n\r\n### How was the bug found?\r\n\r\nN/A"},{"Id":"7493872738","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:45:10","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25986","RelatedDescription":"Merged pull request \"Parens on tuple literals can be simplified\" (#25986) at dotnet/roslyn","RelatedBody":"When inlining a local that is defined with a tuple literal, the inlined expression doesn't need to be parenthesized.\r\n\r\nAddresses part of https://github.com/dotnet/roslyn/issues/11028"},{"Id":"7493862836","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:37:37","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/20220","RelatedDescription":"Closed pull request \"Assert that we have actually subscribed before calling EnsureSubscription\" (#20220) at dotnet/roslyn","RelatedBody":"@Pilchie realized we didn't have this, and it's a good idea.\r\n\r\n**Review:** @dotnet/roslyn-ide"},{"Id":"7493845057","Type":"PullRequestEvent","CreatedAt":"2018-04-07T01:24:42","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25693","RelatedDescription":"Merged pull request \"Delete VisualStudioSetup.Next\" (#25693) at dotnet/roslyn","RelatedBody":"This project originally existed to support a Dev14 vs. Dev15 split, which we no longer version that way. This project had it's contents moved out a few minor updates of Dev15 ago, and is now empty, only so that way if you had an older VS Update F5 would still work. Now we require 15.6 as a base drop, which also has this containing nothing, so we can just delete this.\r\n\r\nPutting this in master so we have sufficient time to shake out any silly side-effects of this.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7493938989","Type":"IssuesEvent","CreatedAt":"2018-04-07T02:36:10","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5173","RelatedDescription":"Closed issue \"Implement Main return code on WebAssembly\" (#5173) at dotnet/corert","RelatedBody":"Currently, the generated WebAssembly method that calls into Main doesn't handle Main's return code and just returns a hard-coded value. The code that generates it is in ```WebAssemblyObjectWriter.EmitNativeMain```. If Main returns a value, the native caller should ```alloca``` a spot for it to write the return value and pass that as the second parameter to Main and then return the value from that spot."},{"Id":"7493937892","Type":"PullRequestEvent","CreatedAt":"2018-04-07T02:35:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5621","RelatedDescription":"Merged pull request \"Initialize modules and run StartupCodeMain in wasm\" (#5621) at dotnet/corert","RelatedBody":"Enables running InitializeModules and StartupCodeMain for WebAssembly. This should be at least most of what we need for runtime/codegen integration (interfaces, reflection, etc). Also includes some miscellaneous bug fixes required to make those work and a workaround for #5614 in ```CreateTypeManagers```.\r\n\r\nFixes #5554  #5173"},{"Id":"7493937885","Type":"IssuesEvent","CreatedAt":"2018-04-07T02:35:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5554","RelatedDescription":"Closed issue \"Initialize modules on startup\" (#5554) at dotnet/corert","RelatedBody":"In order to use many runtime features (interface dispatch, reflection, resources, etc), we need to call InitializeModules on startup and call the compiler-generated StartupCodeMain method to initialize those features. \r\n\r\nAn initial attempt at doing that and fixing some of the issues is at https://github.com/morganbr/corert/commit/47fe52829be365a4133ef1d833569d858a8f98d6. There are still (undebugged) failures on startup in that commit."},{"Id":"7491941890","Type":"PullRequestEvent","CreatedAt":"2018-04-06T16:30:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5660","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5660) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7491924262","Type":"PullRequestEvent","CreatedAt":"2018-04-06T16:26:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5658","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5658) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7491593092","Type":"PullRequestEvent","CreatedAt":"2018-04-06T15:22:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5659","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5659) at dotnet/corert","RelatedBody":""},{"Id":"7491591256","Type":"PullRequestEvent","CreatedAt":"2018-04-06T15:22:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5659","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5659) at dotnet/corert","RelatedBody":""},{"Id":"7491047539","Type":"PullRequestEvent","CreatedAt":"2018-04-06T13:48:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5658","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5658) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7490785432","Type":"PullRequestEvent","CreatedAt":"2018-04-06T12:57:59","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5657","RelatedDescription":"Merged pull request \"Port Dictionary CopyTo regression fix to nmirror\" (#5657) at dotnet/corert","RelatedBody":"git cherry-pick d2a2400241aeb7604e8acc1c3be7f3146bf24662"},{"Id":"7490782209","Type":"PullRequestEvent","CreatedAt":"2018-04-06T12:57:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5657","RelatedDescription":"Opened pull request \"Port Dictionary CopyTo regression fix to nmirror\" (#5657) at dotnet/corert","RelatedBody":"git cherry-pick d2a2400241aeb7604e8acc1c3be7f3146bf24662"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7492542805","Type":"IssuesEvent","CreatedAt":"2018-04-06T18:41:06","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1570","RelatedDescription":"Closed issue \"Explicit restore for self-contained app behaves differently than implicit restore\" (#1570) at dotnet/sdk","RelatedBody":"## Steps to reproduce\r\n1. mkdir ExplicitRestore\r\n1. cd ExplicitRestore\r\n1. dotnet new console --no-restore\r\n1. dotnet restore -r debian.8-x64\r\nInspect the obj/project.assets.json to see what version of Microsoft.NETCore.App is used - Microsoft.NETCore.App/2.0.0\r\n\r\n1. mkdir ImplicitRestore\r\n1. cd ImplicitRestore\r\n1. dotnet new console --no-restore\r\n1. dotnet build -r debian.8-x64\r\nThe build step fails - notice the version of Microsoft.NETCore.App being used - \r\n'''\r\n/ImplicitRestore/ImplicitRestore.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.0.1)\r\n/ImplicitRestore/ImplicitRestore.csproj : error NU1102:   - Found 14 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n'''\r\n\r\n## Expected  behavior\r\nI was expecting the two scenarios to behave the same.  Specifically I would expect them to be using the same version of Microsoft.NETCore.App - 2.0.1\r\n\r\n## Actual behavior\r\nExplicit restore uses Microsoft.NETCore.App 2.0.0 while the implicit restore uses 2.0.1.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.0.1-servicing-006955)\r\n\r\nProduct Information:\r\n Version:            2.0.1-servicing-006955\r\n Commit SHA-1 hash:  6734510020\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         debian.8-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.1-servicing-006955/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.1\r\n  Build    : 5eb2f9bd659ad2161a8e035ac4bccd8f892caa0a\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2018-04-07T05:30:19.054024Z","RunDurationInMilliseconds":7439}