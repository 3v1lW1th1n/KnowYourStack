{"Data":{"Blog":{"FeedItems":[{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2017 version 15.9","PublishedOn":"2018-11-13T18:09:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting with Visual Studio 2017 version 15.9, we’ve changed how the Visual Studio tooling for .NET consumes .NET Core SDKs. Prior to this change, installing a preview version of the .NET Core SDK...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-core-tooling-update-for-visual-studio-2017-version-15-9/","RawContent":null},{"Title":"Cross-platform Time Zones with .NET Core","PublishedOn":"2018-11-13T18:00:21+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Developing applications that span multiple operating systems in .NET Core while working with Time Zone information can lead to unexpected results for developers not familiar with the differences in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/cross-platform-time-zones-with-net-core/","RawContent":null},{"Title":"Building C# 8.0","PublishedOn":"2018-11-13T00:00:02+00:00","CommentsCount":112,"FacebookCount":0,"Summary":"Building C# 8.0 The next major version of C# is C# 8.0. It&#8217;s been in the works for quite some time, even as we built and shipped the minor releases C# 7.1, 7.2 and 7.3, and I&#8217;m quite...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/","RawContent":null},{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8578321898","Type":"PullRequestEvent","CreatedAt":"2018-11-13T04:22:33","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8573927252","Type":"PullRequestEvent","CreatedAt":"2018-11-12T13:30:25","Actor":"scottbrady91","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Opened pull request \"Update to IdentityManager project\" (#116) at dotnet/foundation","RelatedBody":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo."},{"Id":"8573265026","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:25:41","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Opened pull request \"Create identitymodel.md\" (#115) at dotnet/foundation","RelatedBody":""},{"Id":"8573235551","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:20:18","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8593016398","Type":"PullRequestEvent","CreatedAt":"2018-11-15T05:29:20","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21018","RelatedDescription":"Opened pull request \"Combine ExcludeList in AltJit scenarios for both host and altjit archs\" (#21018) at dotnet/coreclr","RelatedBody":"Right now during x86_arm altjit scenario we combine all exclusions defined in ExcludeList in issues.targets for BuildArch==x86 (but not for BuildArch==arm). However, some of the tests would fail when arm targeting JIT runs (e.g. #20631).\r\nThis change would combine exclusions for both BuildArch and AltJitArch.\r\n\r\n@jashook I re-did these PR as you suggested in https://github.com/dotnet/coreclr/pull/20827\r\nAlso confirmed in dev/unix_test_workflow that this indeed re-build xunit wrappers during runtest.py and solves the original issue.\r\n\r\nFixes #20631"},{"Id":"8592678671","Type":"PullRequestEvent","CreatedAt":"2018-11-15T03:31:00","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21017","RelatedDescription":"Opened pull request \"Fixes for Azure DevOps official build\" (#21017) at dotnet/coreclr","RelatedBody":"Fixes that allow us to run official builds in Azure DevOps. This is enough for Windows and Linux builds and testing. Once this is in, we'll be able to create an official build definition pointed at master."},{"Id":"8592592179","Type":"IssuesEvent","CreatedAt":"2018-11-15T03:03:58","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20970","RelatedDescription":"Closed issue \"Reverse_LPWStr_OutAttr in COM tests are wrong\" (#20970) at dotnet/coreclr","RelatedBody":"I was debugging a problem with one of the COM tests (Interop\\COM\\NETClients\\Primitives). When the test was loaded into an unloadable ALC, it was executed, then the ALC was unloaded, a new ALC was created and the whole thing was repeated, it crashed in the string interning code in the native runtime.\r\n\r\nIt turns out that the test does something bad - it marshalls a string as LPWSTR by ref and then modifies its contents (reverses the string). That breaks immutability of managed strings. For interned strings, the crash happens because when we try to remove the entry from per-LoaderAllocator string literal map, we also need to remove it from the global map. To remove it from the global map, we compute the hash from the string contents – but since the string was modified, it doesn’t match the original hash and the stale entry is left in the global map. However, this entry is a pointer shared between the global and per-LoaderAllocator maps. The loader allocator cleanup code deletes the entry, since its refcount went to zero. So now the global map’s entry is pointing to the deleted memory. \r\nThe next run of the test in a new ALC then tries to add an entry for the same string to the global map, it finds the broken entry for the string hash and crashes.\r\n\r\nSince strings are immutable, this test case should be removed or fixed."},{"Id":"8592559325","Type":"PullRequestEvent","CreatedAt":"2018-11-15T02:54:13","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21012","RelatedDescription":"Merged pull request \"Fix invalid tests for COM native server\" (#21012) at dotnet/coreclr","RelatedBody":"see #20970 \r\n\r\ncc @janvorli "},{"Id":"8592555969","Type":"IssuesEvent","CreatedAt":"2018-11-15T02:53:11","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20986","RelatedDescription":"Closed issue \"[Windows] R2R Interop_COM._NETClients_Primitives Failure\" (#20986) at dotnet/coreclr","RelatedBody":"For example, here\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x86_release_windows_nt_r2r/2395/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_windows_nt_r2r/2678/\r\n\r\n```\r\nReturn code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Reports\\Interop.COM\\NETClients\\Primitives\\NETClientPrimitives\\NETClientPrimitives.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n                1 file(s) copied.\r\n        \" D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\crossgen.exe\" /Platform_Assemblies_Paths D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Primitives\\NETClientPrimitives\\IL;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Primitives\\NETClientPrimitives /in NETClientPrimitives.org /out NETClientPrimitives.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image NETClientPrimitives.exe generated successfully.\r\n         \"D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\corerun.exe\" NETClientPrimitives.exe \r\n        Numeric RNG seed: 37\r\n        Test Failure: System.Runtime.InteropServices.COMException (0x80040154): Retrieving the COM class factory for component with CLSID {53169A33-E85D-4E3C-B668-24E438D0929B} failed due to the following error: 80040154 Class not registered (Exception from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).\r\n           at NetClient.NumericTests..ctor(Int32 seed) in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\Primitives\\NumericTests.cs:line 22\r\n           at NetClient.Program.Main(String[] doNotUse) in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\Primitives\\Program.cs:line 21\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Primitives\\NETClientPrimitives\\NETClientPrimitives.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(391,0): at Interop_COM._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd()\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Reports\\Interop.COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n                1 file(s) copied.\r\n        \" D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\crossgen.exe\" /Platform_Assemblies_Paths D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\IL;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch /in NETClientIDispatch.org /out NETClientIDispatch.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image NETClientIDispatch.exe generated successfully.\r\n         \"D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\corerun.exe\" NETClientIDispatch.exe \r\n        Test Failure: System.Runtime.InteropServices.COMException (0x80040154): Retrieving the COM class factory for component with CLSID {0F8ACD0C-ECE0-4F2A-BD1B-6BFCA93A0726} failed due to the following error: 80040154 Class not registered (Exception from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).\r\n           at NetClient.Program.Validate_Numeric_In_ReturnByRef() in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\IDispatch\\Program.cs:line 19\r\n           at NetClient.Program.Main(String[] doNotUse) in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\IDispatch\\Program.cs:line 165\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\IDispatch\\NETClientIDispatch\\NETClientIDispatch.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(321,0): at Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd()\r\n      Interop_COM._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_._NETClients_Primitives_NETClientPrimitives_NETClientPrimitives_cmd [FAIL]\r\n      Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd [FAIL]\r\n      Interop_COM._NETClients_Aggregation_NETClientAggregation_NETClientAggregation_._NETClients_Aggregation_NETClientAggregation_NETClientAggregation_cmd [FAIL]\r\n        \r\n  \r\n  Return code:      1\r\n  Raw output file:      D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Reports\\Interop.COM\\NETClients\\Aggregation\\NETClientAggregation\\NETClientAggregation.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n                1 file(s) copied.\r\n        \" D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\crossgen.exe\" /Platform_Assemblies_Paths D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Aggregation\\NETClientAggregation\\IL;D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Aggregation\\NETClientAggregation /in NETClientAggregation.org /out NETClientAggregation.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image NETClientAggregation.exe generated successfully.\r\n         \"D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\corerun.exe\" NETClientAggregation.exe \r\n        Test Failure: System.Runtime.InteropServices.COMException (0x80040154): Retrieving the COM class factory for component with CLSID {4CEFE36D-F377-4B6E-8C34-819A8BB9CB04} failed due to the following error: 80040154 Class not registered (Exception from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).\r\n           at NetClient.Program.ValidateNativeOuter() in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\Aggregation\\Program.cs:line 22\r\n           at NetClient.Program.Main(String[] doNotUse) in D:\\j\\workspace\\x64_release_w---f2b03790\\tests\\src\\Interop\\COM\\NETClients\\Aggregation\\Program.cs:line 40\r\n        Expected: 100\r\n        Actual: 101\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\r\n  > D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\Interop\\COM\\NETClients\\Aggregation\\NETClientAggregation\\NETClientAggregation.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_release_w---f2b03790\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Interop.COM\\Interop.COM.XUnitWrapper.cs(251,0): at Interop_COM._NETClients_Aggregation_NETClientAggregation_NETClientAggregation_._NETClients_Aggregation_NETClientAggregation_NETClientAggregation_cmd()\r\n```"},{"Id":"8592553983","Type":"PullRequestEvent","CreatedAt":"2018-11-15T02:52:36","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21010","RelatedDescription":"Merged pull request \"Disable COM tests being CrossGen'd\" (#21010) at dotnet/coreclr","RelatedBody":"The CrossGen tool doesn't support propagating embedded app manifests on Windows so add support to skip running the CrossGen tool on tests.\r\n\r\n#20986 \r\n#21006\r\n\r\ncc @jkoritzinsky @erozenfeld @echesakovMSFT \r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8592073632","Type":"IssuesEvent","CreatedAt":"2018-11-15T00:35:03","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10340","RelatedDescription":"Opened issue \"Update the developer guide following changes introduced by Arcade.\" (#10340) at dotnet/cli","RelatedBody":"The [developer guide](https://github.com/dotnet/cli/blob/master/Documentation/project-docs/developer-guide.md) needs to be updated regarding the new build locations and any additional changes that resulted from migrating the repo to Arcade.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8591954780","Type":"PullRequestEvent","CreatedAt":"2018-11-15T00:01:36","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10339","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10339) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8591891403","Type":"IssuesEvent","CreatedAt":"2018-11-14T23:44:57","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9978","RelatedDescription":"Closed issue \"Simplify first run experience flags\" (#9978) at dotnet/cli","RelatedBody":"When DOTNET_CLI_TELEMETRY_OPTOUT is set to 1 or true, SDK should not print the telemetry message notice.  When this behavior is corrected, the SDK no longer needs the DOTNET_PRINT_TELEMETRY_MESSAGE environmental variable, and it will no longer be checked or used. \r\n\r\nThe reason of the flag is added: https://github.com/dotnet/cli/pull/6869#discussion_r122033436"},{"Id":"8591890623","Type":"IssuesEvent","CreatedAt":"2018-11-14T23:44:44","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10323","RelatedDescription":"Closed issue \"Remove use of `PRINT_TELEMETRY_MESSAGE` environmental variable\" (#10323) at dotnet/cli","RelatedBody":"Today, `PRINT_TELEMETRY_MESSAGE` is intended to suppress the display of the telemetry message. The telemetry message should only be suppressed when `DOTNET_CLI_TELEMETRY_OPTOUT` is set to true, and in this case the `DOTNET_CLI_TELEMETRY_OPTOUT` variable is sufficient. It also suppressed the welcome message. \r\n\r\nGoing forward:\r\n\r\n* `PRINT_TELEMETRY_MESSAGE` will be ignored\r\n* The welcome message will always be displayed\r\n* When `DOTNET_CLI_TELEMETRY_OPTOUT` is set to true, no telemetry message will be displayed\r\n* When `DOTNET_CLI_TELEMETRY_OPTOUT` is NOT set to true, the telemetry message will be displayed\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8591890291","Type":"IssuesEvent","CreatedAt":"2018-11-14T23:44:40","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10322","RelatedDescription":"Closed issue \"`DOTNET_SKIP_FIRST_TIME_EXPERIENCE` should not control telemetry behavior\" (#10322) at dotnet/cli","RelatedBody":"The purpose of the `DOTNET_SKIP_FIRST_TIME_EXPERIENCE` environmental variable is to skip the expansion of NuGetFallBackFolder. Today it is coupled with telemetry and disables telemetry when it is `true`. We should remove this coupling. Telemetry should only be controlled by the environment variable `DOTNET_CLI_TELEMETRY_OPTOUT`. And when `DOTNET_SKIP_FIRST_TIME_EXPERIENCE` is `true`, a shorter welcome message and telemetry notice will show.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8591889667","Type":"PullRequestEvent","CreatedAt":"2018-11-14T23:44:30","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10325","RelatedDescription":"Merged pull request \"First run experience flags change\" (#10325) at dotnet/cli","RelatedBody":"issue https://github.com/dotnet/cli/issues/10322 and https://github.com/dotnet/cli/issues/10323\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8588084500","Type":"PullRequestEvent","CreatedAt":"2018-11-14T13:12:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/969","RelatedDescription":"Merged pull request \"Update dependency files\" (#969) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18563.21\r\n\r\n"},{"Id":"8588027346","Type":"PullRequestEvent","CreatedAt":"2018-11-14T13:01:58","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/969","RelatedDescription":"Opened pull request \"Update dependency files\" (#969) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18563.21\r\n\r\n"},{"Id":"8582682814","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:35:50","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/968","RelatedDescription":"Opened issue \"Clarify which facades we need to for .NET Standard 2.1\" (#968) at dotnet/standard","RelatedBody":"With .NET Standard 2.1 we've in-boxed several types that were previously available as an OOB only, such as `Span<T>`. We need to put these in-box so that when people retarget an existing project to .NET Standard 2.1 and reference the OOB, they don't get compilation errors."},{"Id":"8580964101","Type":"PullRequestEvent","CreatedAt":"2018-11-13T13:31:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/967","RelatedDescription":"Merged pull request \"[Darc-Update] Update dependencies from build 20181112.25 of https://github.com/dotnet/arcade\" (#967) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18562.25.symbols.nupkg - 2.2.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18562.25.symbols.nupkg - 2.4.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18562.25\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18562.25\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Darc - 1.0.0-beta.18562.25\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18562.25\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18562.25\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18562.25"},{"Id":"8580782483","Type":"PullRequestEvent","CreatedAt":"2018-11-13T13:01:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/967","RelatedDescription":"Opened pull request \"[Darc-Update] Update dependencies from build 20181112.25 of https://github.com/dotnet/arcade\" (#967) at dotnet/standard","RelatedBody":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18562.25.symbols.nupkg - 2.2.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18562.25.symbols.nupkg - 2.4.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18562.25\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18562.25\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Darc - 1.0.0-beta.18562.25\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18562.25\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18562.25\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18562.25"},{"Id":"8579646391","Type":"IssuesEvent","CreatedAt":"2018-11-13T09:45:17","Actor":"LadislavLang","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/966","RelatedDescription":"Opened issue \"DateTime Kind is lost during serialization via BinaryFormatter\" (#966) at dotnet/standard","RelatedBody":"    using System;\r\n    using System.IO;\r\n    using System.Runtime.Serialization.Formatters.Binary;\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var input = new[]\r\n            {\r\n                new DateTime(2018, 11, 13, 0, 0, 0, DateTimeKind.Local),\r\n                new DateTime(2018, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),\r\n                new DateTime(2018, 11, 13, 0, 0, 0, DateTimeKind.Utc)\r\n            };\r\n\r\n            var formatter = new BinaryFormatter();\r\n            using (var stream = new MemoryStream())\r\n            {\r\n                formatter.Serialize(stream, input);\r\n\r\n                stream.Seek(0, SeekOrigin.Begin);\r\n\r\n                var output = (DateTime[])formatter.Deserialize(stream);\r\n\r\n                // Output:\r\n                // NetFramework (4.7):  Local, Unspecified, Utc\r\n                // CoreApp (2.1):       Unspecified, Unspecified, Unspecified\r\n\r\n                Console.WriteLine($\"{output[0].Kind}, {output[1].Kind}, {output[2].Kind}\");\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n    }"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8592945457","Type":"PullRequestEvent","CreatedAt":"2018-11-15T05:04:40","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33516","RelatedDescription":"Opened pull request \"Update JSON road map doc - rename image files, remove unused files, and update links\" (#33516) at dotnet/corefx","RelatedBody":""},{"Id":"8592918258","Type":"PullRequestEvent","CreatedAt":"2018-11-15T04:54:50","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33512","RelatedDescription":"Merged pull request \"Merge relevant changes from the auto-generated System.Runtime ref\" (#33512) at dotnet/corefx","RelatedBody":"Though documentation on updating the System.Runtime ref is a bit lacking, the steps I followed might help others (in particular for System.Runtime):\r\n\r\n1) Build coreclr release.\r\n2) Build corefx release with coreclr bits (see link below for details).\r\n3) Run `msbuild /t:GenerateReferenceSource /p:ConfigurationGroup=Release` from the System.Runtime/ref directory.\r\n4) Filter out all unrelated changes and extract the changes you care about (ignore certain attributes being removed). Generally, this step is not required for other reference assemblies.\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/developer-guide.md#testing-with-private-coreclr-bits\r\n\r\nAdded this documentation here: https://github.com/dotnet/corefx/pull/33515"},{"Id":"8592915230","Type":"PullRequestEvent","CreatedAt":"2018-11-15T04:53:40","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33515","RelatedDescription":"Merged pull request \"Add documentation which explains how to update reference assembly sources\" (#33515) at dotnet/corefx","RelatedBody":"@GrabYourPitchforks requested some documentation: https://github.com/dotnet/corefx/pull/33395#discussion_r232524002"},{"Id":"8592877627","Type":"PullRequestEvent","CreatedAt":"2018-11-15T04:39:59","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33493","RelatedDescription":"Merged pull request \"Updating System.Numerics.Tensors to be v0.2.0\" (#33493) at dotnet/corefx","RelatedBody":"FYI. @ericst, @eerhardt, @danmosemsft "},{"Id":"8592595737","Type":"PullRequestEvent","CreatedAt":"2018-11-15T03:05:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33505","RelatedDescription":"Merged pull request \"Cache HttpClient in CertificateAssetDownloader\" (#33505) at dotnet/corefx","RelatedBody":"Today every time we download a certificate we spin up a new connection for it which is then torn down immediately after.  In constrained environments where this is done frequently, that has overhead but more impactfully can lead to port exhaustion.  This change modifies the downloader to cache the HttpClient instance so that connections can be pooled, but restricts the connections to only be idle for at most 15 seconds, as a compromise between consuming lots of resources with pooled connections hanging around for minutes and being able to reuse connections when bursts of downloads are required.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/30693\r\ncc: @bartonjs, @ayende \r\n\r\n@bartonjs, we have tests that already exercise this code, right?"},{"Id":"8592595725","Type":"IssuesEvent","CreatedAt":"2018-11-15T03:05:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30693","RelatedDescription":"Closed issue \"Certificate usage cause connection leak and self DOS on Azure\" (#30693) at dotnet/corefx","RelatedBody":"TLDR, this piece of code:\r\n\r\nhttps://github.com/dotnet/corefx/blob/123b4ed1014df2beb9d36598eff956d8e1f4bb7c/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/CertificateAssetDownloader.cs#L85-L93\r\n\r\nCan cause high connection usage in some scenarios.\r\n\r\nIn particular, `DownloadAsset` is called whenever we need to validate the chain on a certificate.\r\n\r\nHere is one example stack trace:\r\n\r\n```\r\n\tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.CertificateAssetDownloader.DownloadAsset(string uri, ref System.TimeSpan remainingDownloadTime)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.CertificateAssetDownloader.DownloadCertificate(string uri, ref System.TimeSpan remainingDownloadTime)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.OpenSslX509ChainProcessor.DownloadCertificate(byte[] authorityInformationAccess, ref System.TimeSpan remainingDownloadTime)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.OpenSslX509ChainProcessor.FindIssuer(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, System.Security.Cryptography.X509Certificates.X509Certificate2Collection[] stores, System.Collections.Generic.HashSet<System.Security.Cryptography.X509Certificates.X509Certificate2> downloadedCerts, ref System.TimeSpan remainingDownloadTime)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.OpenSslX509ChainProcessor.FindCandidates(System.Security.Cryptography.X509Certificates.X509Certificate2 leaf, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, System.Collections.Generic.HashSet<System.Security.Cryptography.X509Certificates.X509Certificate2> downloaded, System.Collections.Generic.HashSet<System.Security.Cryptography.X509Certificates.X509Certificate2> systemTrusted, ref System.TimeSpan remainingDownloadTime)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!Internal.Cryptography.Pal.ChainPal.BuildChain(bool useMachineContext, Internal.Cryptography.ICertificatePal cert, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, System.Security.Cryptography.OidCollection applicationPolicy, System.Security.Cryptography.OidCollection certificatePolicy, System.Security.Cryptography.X509Certificates.X509RevocationMode revocationMode, System.Security.Cryptography.X509Certificates.X509RevocationFlag revocationFlag, System.DateTime verificationTime, System.TimeSpan timeout)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool throwOnException)\r\n \tSystem.Security.Cryptography.X509Certificates.dll!System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)\r\n \tSystem.Net.Security.dll!System.Net.Http.TLSCertificateExtensions.BuildNewChain(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool includeClientApplicationPolicy)\r\n \tSystem.Net.Security.dll!Interop.OpenSsl.AllocateSslContext(System.Security.Authentication.SslProtocols protocols, Microsoft.Win32.SafeHandles.SafeX509Handle certHandle, System.Security.Cryptography.SafeEvpPKeyHandle certKeyHandle, System.Net.Security.EncryptionPolicy policy, bool isServer, bool remoteCertRequired)\r\n \tSystem.Net.Security.dll!System.Net.Security.SafeDeleteSslContext.SafeDeleteSslContext(System.Net.Security.SafeFreeSslCredentials credential, bool isServer, bool remoteCertRequired)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamPal.HandshakeInternal(System.Net.Security.SafeFreeCredentials credential, ref System.Net.Security.SafeDeleteContext context, System.Net.Security.SecurityBuffer inputBuffer, System.Net.Security.SecurityBuffer outputBuffer, bool isServer, bool remoteCertRequired)\r\n \tSystem.Net.Security.dll!System.Net.Security.SecureChannel.GenerateToken(byte[] input, int offset, int count, ref byte[] output)\r\n \tSystem.Net.Security.dll!System.Net.Security.SecureChannel.NextMessage(byte[] incoming, int offset, int count)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.StartSendBlob(byte[] incoming, int count, System.Net.AsyncProtocolRequest asyncRequest)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.ProcessReceivedBlob(byte[] buffer, int count, System.Net.AsyncProtocolRequest asyncRequest)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.StartReadFrame(byte[] buffer, int readBytes, System.Net.AsyncProtocolRequest asyncRequest)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.StartReceiveBlob(byte[] buffer, System.Net.AsyncProtocolRequest asyncRequest)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.ForceAuthentication(bool receiveFirst, byte[] buffer, System.Net.AsyncProtocolRequest asyncRequest)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.ProcessAuthentication(System.Net.LazyAsyncResult lazyResult)\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation)\r\n```\r\n\r\nAs you can see, this method is called _whenever_ SslStream is used (Kestrel, HTTPS, etc) this will be called.\r\n\r\nNow, if you are using Let's Encrypt certificate on Ubuntu, for example, the full certificate chain is not available, so it will download it on every connection.\r\nThat issue is already discussed here: https://github.com/dotnet/corefx/issues/26061 and isn't the subject to this issue.\r\n\r\nThe key here is this code, though:\r\nhttps://github.com/dotnet/corefx/blob/123b4ed1014df2beb9d36598eff956d8e1f4bb7c/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Unix/CertificateAssetDownloader.cs#L85-L93\r\n\r\nSkipping the reflection, this is basically:\r\n\r\n```\r\nvar httpClient = new HttpClient();\r\nreturn httpClient.GetAsync(uri).Result;\r\n```\r\n\r\nAnd that is a problem, because HttpClient is not meant for use and throw in this manner.  Instead, it is meant to be a long lived object.\r\nThis means that it is doing connection pooling.\r\n\r\nNow, eventually this will be GCed and finalized. However, in the meantime, if we have a lot of such requests, each of them will spawn a separate connection to the source server.\r\n\r\nNow, when you are running on Azure, if your VM doesn't have a public IP, you run through SNAT: https://blogs.msdn.microsoft.com/mast/2015/07/13/azure-snat/\r\n\r\nThat means that you have about 160 outgoing connections available for the same destination server. \r\nIf you have multiple containers all talking to the same destination server, the number is much lower.\r\nAt this point, you basically violate TCP and fun stuff happens. (The destination server get SYN packets for already established connection, in which case you spend 30+ seconds on blocking network wait until the `HttpListener` gives up). \r\n\r\nA possible solution is to cache the `httpClient` instance in `DownloadAsset`, but that has its own risks.  Especially: https://github.com/dotnet/corefx/issues/11224\r\nNot sure whatever that can be ignored at this point.\r\n\r\nWorkaround is to make sure that the certificate chain can be resolved completely locally, but that isn't always possible and easy to miss. \r\n"},{"Id":"8592430143","Type":"IssuesEvent","CreatedAt":"2018-11-15T02:16:03","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33483","RelatedDescription":"Closed issue \"BlockingCollection<T> isn't Serializable\" (#33483) at dotnet/corefx","RelatedBody":"https://referencesource.microsoft.com/#System/sys/system/collections/concurrent/BlockingCollection.cs,3fc8b6e4e28ee36c"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8592786809","Type":"PullRequestEvent","CreatedAt":"2018-11-15T04:07:13","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31092","RelatedDescription":"Merged pull request \"Add a new SuppressMessageAttribute target scope to suppress diagnosti…\" (#31092) at dotnet/roslyn","RelatedBody":"…cs in a namespace and all its descendant symbols\r\n\r\nFixes #486\r\n\r\nThis SuppressMessageAttribute feature has been requested for a very long time and still gets frequent customer requests to date.\r\n\r\nThe current \"Namespace\" target scope for SuppressMessageAttribute suppresses diagnostics only in nodes directly contained within the namespace, but not in any of it's descendant symbols. This makes it very tedious to suppress certain analyzer diagnostics in entire namespace as one needs to add suppressions to individual types/namespaces within the namespace. This also creates a maintenance nightmare.\r\n\r\nThis PR adds a new target scope \"NamespaceAndChildren\" which suppresses diagnostics on the corresponding namespace and all its descendant symbols/members. Better naming suggestions for this scope name are welcome!\r\n\r\nExample: `[assembly: SuppressMessage(\"Test\", \"Declaration\", Scope=\"NamespaceAndChildren\", Target=\"N.N1\")]`"},{"Id":"8592375640","Type":"PullRequestEvent","CreatedAt":"2018-11-15T02:00:06","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31186","RelatedDescription":"Merged pull request \"Merge dev16.0-preview2-vs-deps to master-vs-deps\" (#31186) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev16.0-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8592342717","Type":"IssuesEvent","CreatedAt":"2018-11-15T01:50:30","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31189","RelatedDescription":"Opened issue \"async completion: DebuggerTextView should not save topBuffer for the editor\" (#31189) at dotnet/roslyn","RelatedBody":"This new code in DebuggerTextView looks suspicious:\r\n ```\r\n     // The editor requires the current top buffer.\r\n            _innerTextView.Properties.AddProperty(CompletionRoot, bufferGraph.TopBuffer);\r\n```\r\n\r\nHere is how Editor consumes it:\r\n// In certain scenarios, TextView.TextSnapshot is not the appropriate snapshot to use.\r\n// For example, in the watch window (C# debugger), TextView.TextSnapshot corresponds to the single line for the expression.\r\n// Roslyn uses the property bag to indicate the correct snapshot to use.\r\n\r\n@AmadeusW responded:\r\n\r\n> Correct, weird projection things are happening. To recap meetings we had about this issue:\r\n> Roslyn overrides implements DebuggerTextView which is not a standard text view (built using Editor APIs). In Roslyn’s implementation, the top snapshot is the single line visible in the debugger UI. If Editor built this TextView, the top snapshot would contain the entirety of other buffers, including the front matter (usings), the line visible in the UI, extra semicolon and the rest of the document. We would then use projection to display just the single line. Logic that finds appropriate buffers would be simplified, such that we’d simply map down from this top buffer.\r\n> Roslyn is not refactoring the way DebuggerTextView works, so we need to work around this arguably bad design.\r\n> \r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8592308780","Type":"IssuesEvent","CreatedAt":"2018-11-15T01:41:25","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6580","RelatedDescription":"Opened issue \"wasm: NativeCallable function is not used\" (#6580) at dotnet/corert","RelatedBody":"I don't know if I'm doing something wrong, or its the wasm compiler.  I have this c#:\r\n```\r\n    private static unsafe void ThreadTest()\r\n    {\r\n        p_thread pThread;\r\n        int arg = 0;\r\n        int join;\r\n        var t = pthread_create((IntPtr)(&pThread), (IntPtr)(0), System.Runtime.InteropServices.AddrofIntrinsics.AddrOf<ThreadStartFunc>(ThreadStart), (IntPtr)(&arg));\r\n        join = pthread_join((IntPtr)(&pThread), (IntPtr)0);\r\n    }\r\n\r\n    [NativeCallable(CallingConvention = CallingConvention.StdCall)]\r\n    private static unsafe void* ThreadStart(void* arg)\r\n    {\r\n...\r\n    }\r\n```\r\nSo I'm trying to get `pthread_create` to callback into `ThreadStart`.  When I run this it complains:\r\n```\r\nInvalid function pointer '6920' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this) HelloWasm.js:6610:27\r\nThis pointer might make sense in another type signature: i: 0  iii: _HelloWasm_Program__ThreadStart  iiii: 0  iiiii: 0  iiiiii: 0  iiiiiii: undefined  iiiiiiii: 0  iiiiiiiiii: undefined  vii: 0  di: undefined  vi: 0  viii: 0  v: 0  viiii: 0  viiiii: 0  viiiiii: 0  viiiiiii: 0 \r\n```\r\nSo you can see that its looking for a method in the function table `ii` whereas the one that its been given, `_HelloWasm_Program__ThreadStart` is in the `iii` table.  Indeed `_HelloWasm_Program__ThreadStart` is the wrong signature, its has the signature for any other method, i.e. the first param is the shadow stack:\r\n```\r\ndefine i8* @HelloWasm_Program__ThreadStart(i8*, i8*) \r\n```\r\nThere is another function emitted which looks like the right one:\r\n```\r\ndefine i8* @ThreadStart(i8*) {\r\nShadowStackSetupBlock:\r\n  %ShadowStackPtr = alloca i8*\r\n  %SavedShadowStack = load i8*, i8** @t_pShadowStackTop\r\n  store i8* %SavedShadowStack, i8** %ShadowStackPtr\r\n  %ShadowStackNull = icmp eq i8* %SavedShadowStack, null\r\n  br i1 %ShadowStackNull, label %allocateShadowStackBlock, label %ManagedCallBlock\r\n\r\nallocateShadowStackBlock:                         ; preds = %ShadowStackSetupBlock\r\n  %NewShadowStack = tail call i8* @malloc(i32 mul (i32 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i32), i32 1000000))\r\n  store i8* %NewShadowStack, i8** %ShadowStackPtr\r\n  br label %ManagedCallBlock\r\n\r\nManagedCallBlock:                                 ; preds = %allocateShadowStackBlock, %ShadowStackSetupBlock\r\n  %ReversePInvokeFrame = alloca { i8*, i8* }\r\n  call void @RhpReversePInvoke2({ i8*, i8* }* %ReversePInvokeFrame)\r\n  %ShadowStack = load i8*, i8** %ShadowStackPtr\r\n  %calleeFrame = getelementptr i8, i8* %ShadowStack, i32 4\r\n  %1 = call i8* @HelloWasm_Program__ThreadStart(i8* %calleeFrame, i8* %0)\r\n  call void @RhpReversePInvokeReturn2({ i8*, i8* }* %ReversePInvokeFrame)\r\n  ret i8* %1\r\n}\r\n```\r\nBut this does not seem to be used anywhere else in the LLVM file.  I'm not sure what the right question is.  What should the parameters to `InitializeReversePInvokeThunk` be for this?  \r\n\r\n\r\n\r\nI have these attributes defined:\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    /// <summary>\r\n    /// Any method marked with NativeCallableAttribute can be directly called from\r\n    /// native code. The function token can be loaded to a local variable using LDFTN\r\n    /// and passed as a callback to native method.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public sealed class NativeCallableAttribute : Attribute\r\n    {\r\n        public NativeCallableAttribute()\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Optional. If omitted, compiler will choose one for you.\r\n        /// </summary>\r\n        public CallingConvention CallingConvention;\r\n\r\n        /// <summary>\r\n        /// Optional. If omitted, then the method is native callable, but no EAT is emitted.\r\n        /// </summary>\r\n        public string EntryPoint;\r\n    }\r\n\r\n    [AttributeUsage((System.AttributeTargets.Method | System.AttributeTargets.Class))]\r\n    internal class McgIntrinsicsAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    [McgIntrinsics]\r\n    internal static class AddrofIntrinsics\r\n    {\r\n        // This method is implemented elsewhere in the toolchain\r\n        internal static IntPtr AddrOf<T>(T ftn)\r\n        {\r\n            throw new PlatformNotSupportedException();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n"},{"Id":"8591531535","Type":"PullRequestEvent","CreatedAt":"2018-11-14T22:24:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6568","RelatedDescription":"Merged pull request \"Add check to avoid possible InvalidCastException\" (#6568) at dotnet/corert","RelatedBody":"Encountered an `InvalidCastException `in ILVerify when `EcmaModule `is passed instead of an `EcmaAssembly `instance."},{"Id":"8589789667","Type":"IssuesEvent","CreatedAt":"2018-11-14T17:17:08","Actor":"kvochko","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6579","RelatedDescription":"Opened issue \"[armel] Assertion `executionAborted' failed\" (#6579) at dotnet/corert","RelatedBody":"I am hitting an assertion on Tizen/armel target:\r\n```\r\n#> ./System.Collections.Tests/xunit.console.netcore System.Collections.Tests/System.Collections.Tests.dll @System.Collections.Tests/System.Collections.Tests.rsp -xml System.Collections.Tests/testResults.xml -notrait category=nonnetcoreapptests -notrait category=failing\r\n \r\n \r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n \r\nxunit.console.netcore: /home/akvochko/dotnet/corert/src/Native/Runtime/Full/../coreclr/gcinfodecoder.cpp:675: bool GcInfoDecoder::EnumerateLiveSlots(PREGDISPLAY, bool, unsigned int, GCEnumCallback, void *): Assertion `executionAborted' failed.\r\n \r\nAborted (core dumped)\r\n```\r\nBacktrace:\r\n```\r\n#0  0xf7253094 in raise () from /lib/libc.so.6\r\n#1  0xf72543f0 in abort () from /lib/libc.so.6\r\n#2  0xf724bf0c in ?? () from /lib/libc.so.6\r\n#3  0xf724bfe8 in __assert_fail () from /lib/libc.so.6\r\n#4  0x000e9838 in GcInfoDecoder::EnumerateLiveSlots (this=0xfffeebf8, pRD=0xfffeeda8, reportScratchSlots=false, inputFlags=0, pCallBack=\r\n    0x4a7e9 <EnumGcRefsCallback(void*, void**, unsigned int)>, hCallBack=0xfffeecb0) at /dotnet/corert/src/Native/Runtime/Full/../coreclr/gcinfodecoder.cpp:675\r\n#5  0x000ece20 in UnixNativeCodeManager::EnumGcRefs (this=0x13ee640, pMethodInfo=0xfffeee34, safePointAddress=0x21a0cf <System_IO_FileSystem_System_IO_File__ReadAllLines+114>, \r\n    pRegisterSet=0xfffeeda8, hCallback=0xfffeecb0) at /dotnet/corert/src/Native/Runtime/unix/UnixNativeCodeManager.cpp:162\r\n#6  0x0004a7c8 in RedhawkGCInterface::EnumGcRefs (pCodeManager=0x13ee640, pMethodInfo=0xfffeee34, \r\n    safePointAddress=0x21a0cf <System_IO_FileSystem_System_IO_File__ReadAllLines+114>, pRegisterSet=0xfffeeda8, pfnEnumCallback=\r\n    0xa3d01 <WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, pvCallbackData=0xfffef1d0) at /dotnet/corert/src/Native/Runtime/gcrhenv.cpp:534\r\n#7  0x0005ac64 in Thread::GcScanRootsWorker (this=0xf77e74c8, pfnEnumCallback=0xa3d01 <WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, pvCallbackData=0xfffef1d0, \r\n    frameIterator=...) at /dotnet/corert/src/Native/Runtime/thread.cpp:510\r\n#8  0x0005aac2 in Thread::GcScanRoots (this=0xf77e74c8, pfnEnumCallback=0xa3d01 <WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, pvCallbackData=0xfffef1d0)\r\n    at /dotnet/corert/src/Native/Runtime/thread.cpp:412\r\n#9  0x0004cd12 in GCToEEInterface::GcScanRoots (fn=0xa3d01 <WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, condemned=0, max_gen=2, sc=0xfffef1d0)\r\n    at /dotnet/corert/src/Native/Runtime/gcrhscan.cpp:85\r\n#10 0x000dab9c in GCScan::GcScanRoots (fn=0xa3d01 <WKS::GCHeap::Promote(Object**, ScanContext*, unsigned int)>, condemned=0, max_gen=2, sc=0xfffef1d0)\r\n    at /dotnet/corert/src/Native/gc/gcscan.cpp:170\r\n#11 0x0008ab6a in WKS::gc_heap::mark_phase (condemned_gen_number=0, mark_only_p=0) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:19600\r\n#12 0x0008483c in WKS::gc_heap::gc1 () at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:15270\r\n#13 0x0009960a in WKS::gc_heap::garbage_collect (n=0) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:16861\r\n#14 0x0007afa6 in WKS::GCHeap::GarbageCollectGeneration (this=0x13e0020, gen=0, reason=reason_alloc_soh) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:35196\r\n#15 0x0007ec98 in WKS::gc_heap::try_allocate_more_space (acontext=0xf77e74c8, size=296, gen_number=0) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:13074\r\n#16 0x0007ee00 in WKS::gc_heap::allocate_more_space (acontext=0xf77e74c8, size=296, alloc_generation_number=0) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:13370\r\n#17 0x000d1464 in WKS::gc_heap::allocate (jsize=296, acontext=0xf77e74c8) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:13401\r\n#18 WKS::GCHeap::Alloc (this=0x13e0020, context=0xf77e74c8, size=296, flags=0) at /dotnet/corert/src/Native/Runtime/Full/../../gc/gc.cpp:34542\r\n#19 0x0004a5b4 in RhpGcAlloc (pEEType=0x125efb4, uFlags=0, cbSize=296, pTransitionFrame=0xfffef8a8) at /dotnet/corert/src/Native/Runtime/gcrhenv.cpp:273\r\n#20 0x000f0f12 in RhpNewArrayRare () at /dotnet/corert/src/Native/Runtime/arm/AllocFast.S:324\r\n#21 0x0125efb4 in vtable for xunit_abstractions_Xunit_Abstractions_ITestFailed ()\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n```\r\nCould you give any pointers as to where the problem could be?"},{"Id":"8589374024","Type":"PullRequestEvent","CreatedAt":"2018-11-14T16:18:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6578","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6578) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"8588962525","Type":"PullRequestEvent","CreatedAt":"2018-11-14T15:22:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6578","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6578) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8588958392","Type":"IssuesEvent","CreatedAt":"2018-11-14T15:21:58","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6577","RelatedDescription":"Opened issue \"Update the native compiler to support the new math functions\" (#6577) at dotnet/corert","RelatedBody":"https://github.com/dotnet/coreclr/pull/20788 added some new functions to `System.Math` and `System.MathF`, we should update the CoreRT native compiler to support these new methods."},{"Id":"8586598013","Type":"PullRequestEvent","CreatedAt":"2018-11-14T08:49:13","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6576","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6576) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @erozenfeld"},{"Id":"8585702187","Type":"PullRequestEvent","CreatedAt":"2018-11-14T04:52:03","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6576","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6576) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8585687922","Type":"PullRequestEvent","CreatedAt":"2018-11-14T04:46:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6574","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6574) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8592656554","Type":"PullRequestEvent","CreatedAt":"2018-11-15T03:23:59","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2665","RelatedDescription":"Opened pull request \"Fix publishing WPF assets\" (#2665) at dotnet/sdk","RelatedBody":"Fixes #2654 "},{"Id":"8592386843","Type":"PullRequestEvent","CreatedAt":"2018-11-15T02:03:22","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2664","RelatedDescription":"Opened pull request \"Add telemetry for wpf and winform\" (#2664) at dotnet/sdk","RelatedBody":""},{"Id":"8592279265","Type":"PullRequestEvent","CreatedAt":"2018-11-15T01:33:08","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2663","RelatedDescription":"Opened pull request \"Bump Arcade version.\" (#2663) at dotnet/sdk","RelatedBody":"Bumping Arcade version to `1.0.0-beta.18564.18`."},{"Id":"8590181747","Type":"IssuesEvent","CreatedAt":"2018-11-14T18:23:17","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2473","RelatedDescription":"Closed issue \"Remove overwriteExisting flag on Apphost.Create\" (#2473) at dotnet/sdk","RelatedBody":"Per https://github.com/dotnet/sdk/pull/2467#issuecomment-413014603"},{"Id":"8590177920","Type":"IssuesEvent","CreatedAt":"2018-11-14T18:22:37","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2493","RelatedDescription":"Closed issue \"AppHost cannot embed a custom app manifest \" (#2493) at dotnet/sdk","RelatedBody":"The logic in `AppHost` and its associated `CreateAppHost` MSBuild task, has no mechanism today to provide a custom application manifest file. It has a default one embedded. That means we cannot provide an external one either because [embedded manifests win over an external one](https://blogs.msdn.microsoft.com/patricka/2009/12/09/answers-to-several-application-manifest-mysteries-and-questions/). That means we have to remove the embedded one since embedded manifests in a post build step before providing our own, which is nasty."},{"Id":"8590173911","Type":"IssuesEvent","CreatedAt":"2018-11-14T18:21:54","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2553","RelatedDescription":"Closed issue \"Decide when an apphost should be created\" (#2553) at dotnet/sdk","RelatedBody":"Framework-dependent apphost via `/p:UseAppHost=true` was implemented in https://github.com/dotnet/sdk/pull/2282, and https://github.com/dotnet/sdk/pull/2462 made `UseAppHost=true` by default. The result is that `dotnet publish --self-contained false --rid win-x64`, for example, produces a framework-dependent app with an apphost. See some related discussion in https://github.com/dotnet/cli/pull/9460 about exposing this via a --mode option. AFAIK the conclusion was that `--self-contained false --rid win-x64` will be the way to get a framework-dependent apphost.\r\n\r\nThe remaining question is:\r\n- Should we ever generate an apphost when no rid was specified? This was suggested in https://github.com/dotnet/sdk/issues/1899#issuecomment-418901033.\r\n\r\nThis might reduce to\r\n- Should we set the RID implicitly in some circumstances (wpf/winforms for example)?\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1062754536018898946","CreatedAt":"2018-11-14T17:10:01+00:00","UserScreenname":"dotnet","Text":"Hear the latest and greatest on the future of .NET and check out demos of #dotNET Core . You'll also get a chance t… https://t.co/yskyvl0xjt","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":32,"FavoriteCount":19,"RawContent":null}]}},"RunOn":"2018-11-15T05:30:30.8666977Z","RunDurationInMilliseconds":7947}