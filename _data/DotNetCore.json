{"Data":{"Blog":{"FeedItems":[{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null},{"Title":"Try the new System.Text.Json APIs","PublishedOn":"2019-06-13T17:39:05+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"For .NET Core 3.0, we&#8217;re shipping a brand new namespace called System.Text.Json with support for a reader/writer, a document object model (DOM), and a serializer. In this blog post, I&#8217;m...","Href":"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"},{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9997570511","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:08:49","Actor":"ts2do","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25658","RelatedDescription":"Opened pull request \"Eliminate extra time zone conversions in DateTimeOffset\" (#25658) at dotnet/coreclr","RelatedBody":"PR reopened here (originally dotnet/corefx#38790)\r\n\r\nRevised members dealing specifically with local time by removing delegation to `DateTime` methods to avoid an extra call to `TimeZoneInfo` to determine offset:\r\n> Now\r\n> FromFileTime(long)\r\n> ToLocalTime()\r\n\r\n**Before**\r\n\r\n|        Method |      Mean |     Error |    StdDev |  Gen 0 |  Gen 1 |  Gen 2 |  Allocated |\r\n| ------------- | --------- | --------- | --------- | ------ | ------ | ------ | ---------- |\r\n|           Now |  474.7 ns |  1.913 ns |  1.790 ns |      - |      - |      - |          - |\r\n|  FromFileTime |  498.1 ns |  1.685 ns |  1.494 ns |      - |      - |      - |          - |\r\n|  ToLocalTime  |  459.5 ns |  1.732 ns |  1.620 ns |      - |      - |      - |          - |\r\n\r\n**After**\r\n\r\n|        Method |      Mean |     Error |    StdDev |  Gen 0 |  Gen 1 |  Gen 2 |  Allocated |\r\n| ------------- | --------- | --------- | --------- | ------ | ------ | ------ | ---------- |\r\n|           Now |  303.8 ns |  1.438 ns |  1.269 ns |      - |      - |      - |          - |\r\n|  FromFileTime |  290.1 ns |  1.611 ns |  1.507 ns |      - |      - |      - |          - |\r\n|   ToLocalTime |  236.7 ns |  0.881 ns |  0.824 ns |      - |      - |      - |          - |\r\n\r\n```csharp\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private long _fileTime;\r\n    private DateTimeOffset _utc;\r\n\r\n    [GlobalSetup]\r\n    public void GlobalSetup()\r\n    {\r\n        _utc = DateTimeOffset.UtcNow;\r\n        _fileTime = _utc.ToFileTime();\r\n    }\r\n\r\n    [Benchmark] public DateTimeOffset Now() => DateTimeOffset.Now;\r\n    [Benchmark] public DateTimeOffset FromFileTime() => DateTimeOffset.FromFileTime(_fileTime);\r\n    [Benchmark] public DateTimeOffset ToLocalTime() => _utc.ToLocalTime();\r\n}\r\n```"},{"Id":"9996625653","Type":"PullRequestEvent","CreatedAt":"2019-07-12T00:26:16","Actor":"andy-ms","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25657","RelatedDescription":"Opened pull request \"Document new GC configuration knobs\" (#25657) at dotnet/coreclr","RelatedBody":"* Adds a new column \"Minimum `dotnet` Version\" as the new knobs are only available in dotnet 3.0+.\r\n* The changes to `clr-configuration-knobs.md` are due to running\r\n  `dotnet-script clr-configuration-knobs.csx` which causes some\r\n  unrelated changes. Only `clr-configuration-knobs.csx` was manually\r\n  edited.\r\n* The new properties are:\r\n  - \"System.GC.HeapHardLimit\"\r\n  - \"System.GC.HeapHardLimitPercent\"\r\n  - \"System.GC.HeapAffinitizeMask\"\r\n  - \"System.GC.HeapCount\"\r\n  - \"System.GC.NoAffinitize\"\r\n* These properties are supported as of #25574 and #25653"},{"Id":"9996553123","Type":"PullRequestEvent","CreatedAt":"2019-07-12T00:04:57","Actor":"VSadov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25656","RelatedDescription":"Opened pull request \"[WIP] GC reliability tests\" (#25656) at dotnet/coreclr","RelatedBody":"\r\nnot done yet"},{"Id":"9996510815","Type":"PullRequestEvent","CreatedAt":"2019-07-11T23:52:30","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25655","RelatedDescription":"Opened pull request \"[TEST-ONLY] disable gcstress on Linux_arm, Linux_arm64 and Windows_NT_x86\" (#25655) at dotnet/coreclr","RelatedBody":"This allows me to run gcstress on Linux_x64 and Windows_NT_x64 only"},{"Id":"9995939005","Type":"PullRequestEvent","CreatedAt":"2019-07-11T21:37:48","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25638","RelatedDescription":"Merged pull request \"PerfMap should output file offset instead of RVAs\" (#25638) at dotnet/coreclr","RelatedBody":"Fixes #24966\r\n\r\nThere is a mismatch between `perf`, `crossgen` and `PerfView` causing this bug.\r\n\r\n- I believe when `perf script` output a number of a stack frame, it outputs the file offset (*)\r\n- `crossgen` outputs three tuple, `rva`, `size`, `name` of all methods. [Here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/vm/perfmap.cpp#L391) is the code that computes the rva.\r\n- PerfView takes the number generated by `perf script` and do a binary search in the `crossgen` output.\r\n\r\nEssentially, PerfView is taking file offsets and comparing it against rva. That is why the lookup fails. Once I change `crossgen` to output file offset as is done in this PR, the lookup is successful.\r\n\r\nThe above is sufficient to understand the change, below is just a record on what I did to 'believe' perf output file offsets.\r\n\r\n(*) Here is my experiment to 'prove' that perf outputs file offset. The prove is in quotes because it is really just a prove by observation.\r\n\r\nThe key problem is that `perf` is output random numbers, in order to diagnose what is going on, I need a way to make `perf` output something known, so I hacked CoreLib and added a method in it that does an infinite loop, and call it in my test, that way I know most of the number outputted in `perf` should correlate to my method.\r\n\r\nI figured a tool `perf report -D` that can dump the raw `perf.data` outputted by the perf tool. There I found a raw IP. Cross-checking with the `perf.data.txt`. I subtracted them to figure out the base address assumed by `perf script` tool that generates the `perf.data.txt`. The base address is page aligned, making me believe it is a true base address.\r\n\r\nThe true base address was a mystery. If I look at the true IP and use the `memory region` command in `lldb`, it is slightly before the page that actually contains the executable code. The executable page base address together with its difference between the executable page is found in the same `perf report` output as an unnamed field on an event related to `mmap`, making me believe `perf` knew that offset and accounts for it.\r\n\r\nTurning on the LOADER tracing in PAL using `export PAL_DBG_CHANNELS=\"+LOADER.all\"`, I  discovered why. We used the `mmap` system call to map a file with an offset [here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/pal/src/map/map.cpp#L2164). I believe the `perf` tool noted that and computes the file offset based on that information.\r\n\r\nTo prove it is indeed a file offset, I read the Linux binary as a byte array on a Windows machine, and I successfully disassembled the code at that address, it is indeed the instructions that correspond to my infinite loop method. That concludes my 'prove' that perf indeed output file offsets."},{"Id":"9995938983","Type":"IssuesEvent","CreatedAt":"2019-07-11T21:37:48","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24966","RelatedDescription":"Closed issue \"[Linux / perfcollect] R2R image perf map offsets don't correspond with offsets collected in perf trace\" (#24966) at dotnet/coreclr","RelatedBody":"I see stacks like this:\r\n\r\n```\r\nName\r\n test.dll!unknown\r\n+ System.Private.CoreLib.dll!unknown\r\n|+ libcoreclr.so!CallDescrWorkerInternal\r\n```\r\n\r\nThis is with test.dll crossgen'ed with R2R. Sometimes it says \"unknown\" and sometimes (often in System.Private.CoreLib), it shows an incorrect method.\r\n\r\ntest.ni.{guid}.map - these are the only methods from test.dll that show up in the perf trace, and the first two are the lowest offsets in the map:\r\n\r\n```\r\n00028450 147 void [test] PerfViewTierEventsTest::Main()[ReadyToRun]\r\n000285a0 3a void [test] PerfViewTierEventsTest::Run(bool)[ReadyToRun]\r\n...\r\n0002ba80 16 instance void [test] PerfViewTierEventsTest+<>c::<Main>b__0_0()[ReadyToRun]\r\n```\r\n\r\nperf.data.txt - code offsets recorded for test.dll are lower than the lowest entries in test.ni.{guid}.map and don't correspond with methods in the map:\r\n\r\n```\r\n\t          250e7e DelayLoad_MethodCall (/home/kount/temp/dotnet/test/libcoreclr.so)\r\n\t            84ea [unknown] (/home/kount/test/code.r2r/test.dll)\r\n\t          250cbf CallDescrWorkerInternal (/home/kount/temp/dotnet/test/libcoreclr.so)\r\n```\r\n\r\n```\r\n\t            85cf [unknown] (/home/kount/test/code.r2r/test.dll)\r\n\t            ba90 [unknown] (/home/kount/test/code.r2r/test.dll)\r\n```\r\n\r\nLooks like the map is using a different base for calculating the offset than the base being used for code offsets that are collected in the trace."},{"Id":"9995873009","Type":"PullRequestEvent","CreatedAt":"2019-07-11T21:26:16","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25628","RelatedDescription":"Merged pull request \"Fix GS cookie check on ARM in functions with stackalloc\" (#25628) at dotnet/coreclr","RelatedBody":"The GS cookie check was failing during GC stack walking on ARM for frames\r\nof functions using stackalloc and pinvoke. The InlinedCallFrame stores\r\nonly the SP after the stackalloc adjustment and unwinder needs R9\r\nthat contains SP before the stackalloc to be able to unwind the frame\r\nto get caller SP. The caller SP is used as a base for getting the GS\r\ncookie address. We were incorrectly setting the R9 in the CONTEXT\r\nto the same value as SP and so the unwinding was getting an incorrect\r\ncaller SP.\r\n\r\nThe fix is to store R9 in the InlinedCallFrame for ARM.\r\n\r\nClose #25483"},{"Id":"9995872998","Type":"IssuesEvent","CreatedAt":"2019-07-11T21:26:16","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25483","RelatedDescription":"Closed issue \"[Arm32/Linux] GS cookie corruption when running some corefx tests.\" (#25483) at dotnet/coreclr","RelatedBody":"While running release build of corefx tests on checked build of coreclr on ARM32 (tested on my RPi3 with Raspbian), I have found that couple of corefx test suites fail due to GS cookie corruption detected at GC stack walk time.\r\nThis happens:\r\n* in System.Globalization.Extensions.Tests for GS cookie in the frame of System.Globalization.IdnMapping.GetAsciiCore\r\n* in System.Collections.Specialized.Tests and System.Data.Common.Tests for GS cookie in the frame of System.Globalization.CompareInfo.GetHashCodeOfStringCore\r\n\r\nThe issue reproes in 80..100% runs of the test suites. I was trying to debug both cases, but the functions with corrupted GS cookies are called many times before the issue reproes, so I cannot use something as simple as memory watchpoint to find who's corrupting the cookie.\r\n\r\nUnfortunately, LLDB / sos plugin on this platform are quite unstable together, so e.g. the clrstack sos command kills LLDB. At least the ip2md works so that I can see what's on the managed stack.\r\n\r\nHere is a call stack of the thread with the System.Globalization.IdnMapping.GetAsciiCore on the stack when another thread runs GC and finds the corrupted cookie:\r\n\r\n```\r\n* thread #26, name = 'dotnet'\r\n  * frame #0: 0x76f9b9a4 libpthread.so.0`__pthread_cond_wait(cond=0x001317a0, mutex=0x00131788) at pthread_cond_wait.c:188\r\n    frame #1: 0x768692a8 libcoreclr.so`CorUnix::CPalSynchronizationManager::ThreadNativeWait(ptnwdNativeWaitData=0x00131788, dwTimeout=4294967295, ptwrWakeupReason=0x674ffac8, pdwSignaledObject=0x674ffac4) at synchmanager.cpp:479:28\r\n    frame #2: 0x76868814 libcoreclr.so`CorUnix::CPalSynchronizationManager::BlockThread(this=0x0005e4c8, pthrCurrent=0x001315e8, dwTimeout=4294967295, fAlertable=false, fIsSleep=false, ptwrWakeupReason=0x674ffd68, pdwSignaledObject=0x674ffd90) at synchmanager.cpp:302:22\r\n    frame #3: 0x7687580c libcoreclr.so`CorUnix::InternalWaitForMultipleObjectsEx(pThread=0x001315e8, nCount=1, lpHandles=0x674ffe90, bWaitAll=NO, dwMilliseconds=4294967295, bAlertable=NO, bPrioritize=NO) at wait.cpp:636:45\r\n    frame #4: 0x768761be libcoreclr.so`::WaitForSingleObjectEx(hHandle=0x00000084, dwMilliseconds=4294967295, bAlertable=NO) at wait.cpp:139:13\r\n    frame #5: 0x764b1a34 libcoreclr.so`CLREventWaitHelper2(handle=0x00000084, dwMilliseconds=4294967295, alertable=NO) at synch.cpp:377:12\r\n    frame #6: 0x764b1924 libcoreclr.so`CLREventWaitHelper(this=0x674fff3c, pParam=0x674fff44)::$_1::operator()(CLREventWaitHelper(void*, unsigned int, int)::Param*) const at synch.cpp:402:26\r\n    frame #7: 0x764b073e libcoreclr.so`CLREventWaitHelper(handle=0x00000084, dwMilliseconds=4294967295, alertable=NO) at synch.cpp:404:5\r\n    frame #8: 0x764b06a6 libcoreclr.so`CLREventBase::WaitEx(this=0x000bbb68, dwMilliseconds=4294967295, mode=WaitMode_None, syncState=0x00000000) at synch.cpp:471:20\r\n    frame #9: 0x764b0550 libcoreclr.so`CLREventBase::Wait(this=0x000bbb68, dwMilliseconds=4294967295, alertable=NO, syncState=0x00000000) at synch.cpp:417:12\r\n    frame #10: 0x765d080a libcoreclr.so`GCEvent::Impl::Wait(this=0x000bbb68, timeout=4294967295, alertable=false) at gcenv.os.cpp:1153:24\r\n    frame #11: 0x765cff6c libcoreclr.so`GCEvent::Wait(this=0x000bbb50, timeout=4294967295, alertable=false) at gcenv.os.cpp:1231:20\r\n    frame #12: 0x766893b6 libcoreclr.so`WKS::GCHeap::WaitUntilGCComplete(this=0x00060c60, bConsiderGCStart=false) at gcee.cpp:309:40\r\n    frame #13: 0x764b53e0 libcoreclr.so`Thread::RareDisablePreemptiveGC(this=0x00130860) at threadsuspend.cpp:2576:60\r\n    frame #14: 0x7642109c libcoreclr.so`::JIT_PInvokeEndRarePath() at jithelpers.cpp:5456:13\r\n    frame #15: 0x6fff238c - this is System.Globalization.IdnMapping.GetAsciiCore(System.String, Char*, Int32)\r\n    frame #16: 0x6ffeed3e - this is System.Globalization.IdnMapping.GetAscii(System.String, Int32, Int32)\r\n    frame #17: 0x6ffeec2e - this is System.Globalization.IdnMapping.GetAscii(System.String, Int32)\r\n    frame #18: 0x6ffeec00 - this is System.Globalization.IdnMapping.GetAscii(System.String)\r\n    frame #19: 0x66c4dc8c - this is Xunit.Assert.All[[System.__Canon, System.Private.CoreLib]](System.Collections.Generic.IEnumerable`1<System.__Canon>, System.Action`1<System.__Canon>)\r\n    frame #20: 0x66c4c4c2 - this is System.Globalization.Tests.IdnMappingIdnaConformanceTests.GetAscii_Success()\r\n    frame #21: 0x764fab22 libcoreclr.so`CallDescrWorkerInternal at asmhelpers.S:79\r\n```\r\n\r\nDisassembling the System.Globalization.IdnMapping.GetAsciiCore, I can see that the GS cookie location matches what the stack walker expects. But instead of having 0x12345678 in the cookie, there is a \"random\" value at the point of failure.\r\n\r\nThe same is true for the System.Globalization.CompareInfo.GetHashCodeOfStringCore.\r\n\r\nThe failure in both of the test suites and the stack traces (at least the frame with corrupted GS cookie and all other frames towards the TOS) is always the same. "},{"Id":"9995838801","Type":"PullRequestEvent","CreatedAt":"2019-07-11T21:20:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25654","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25654) at dotnet/coreclr","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"9995823121","Type":"PullRequestEvent","CreatedAt":"2019-07-11T21:17:51","Actor":"wtgodbe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25620","RelatedDescription":"Closed pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25620) at dotnet/coreclr","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9997641740","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:29:51","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11846","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11846) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 5:29 AM\r\n- **Commit**: 6b10ed5d5e92d6eddca00c20aa948c23d656c076\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9997640828","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:29:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11845","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11845) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190711.5\r\n- **Date Produced**: 7/12/2019 4:58 AM\r\n- **Commit**: a27b9fc335f60fc1360981bba96ae02693c18fc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19361.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"9997538946","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:59:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11845","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11845) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190711.5\r\n- **Date Produced**: 7/12/2019 4:58 AM\r\n- **Commit**: a27b9fc335f60fc1360981bba96ae02693c18fc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19361.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"9997526666","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:55:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11844","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11844) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.12\r\n- **Date Produced**: 7/12/2019 4:24 AM\r\n- **Commit**: fa95a7b33e27183d88504b11b736d2738c923ae7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9997432849","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:25:10","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11844","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11844) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.12\r\n- **Date Produced**: 7/12/2019 4:24 AM\r\n- **Commit**: fa95a7b33e27183d88504b11b736d2738c923ae7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9997198593","Type":"PullRequestEvent","CreatedAt":"2019-07-12T03:14:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11823","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11823) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190711.4\r\n- **Date Produced**: 7/12/2019 2:43 AM\r\n- **Commit**: 62f00a77e69755da9936a7abb97b1c6b32a06167\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19361.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9997195806","Type":"PullRequestEvent","CreatedAt":"2019-07-12T03:13:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11843","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11843) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.10\r\n- **Date Produced**: 7/12/2019 2:42 AM\r\n- **Commit**: 1e735dffdfb4532a7d2687dc8da36defe5eccf22\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"9997087352","Type":"PullRequestEvent","CreatedAt":"2019-07-12T02:43:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11843","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11843) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.10\r\n- **Date Produced**: 7/12/2019 2:42 AM\r\n- **Commit**: 1e735dffdfb4532a7d2687dc8da36defe5eccf22\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9996444381","Type":"IssuesEvent","CreatedAt":"2019-07-11T23:32:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Closed issue \"Clarify .NET Standard 2.1 platform support\" (#1330) at dotnet/standard","RelatedBody":"The current .NET Standard 2.1 platform support [is listed](https://github.com/dotnet/standard/blob/master/docs/versions.md) as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard @rowanmiller "},{"Id":"9996431347","Type":"PullRequestEvent","CreatedAt":"2019-07-11T23:29:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Merged pull request \"Update Xamarin versions for NS2.1 support\" (#1333) at dotnet/standard","RelatedBody":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?"},{"Id":"9994449094","Type":"PullRequestEvent","CreatedAt":"2019-07-11T17:42:07","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Merged pull request \"Add RefEmit nullability annotations to baseline\" (#1329) at dotnet/standard","RelatedBody":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c"},{"Id":"9993410545","Type":"IssuesEvent","CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Opened issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334) at dotnet/standard","RelatedBody":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?"},{"Id":"9993230168","Type":"PullRequestEvent","CreatedAt":"2019-07-11T14:57:23","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Opened pull request \"Update Xamarin versions for NS2.1 support\" (#1333) at dotnet/standard","RelatedBody":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?"},{"Id":"9992178038","Type":"PullRequestEvent","CreatedAt":"2019-07-11T12:55:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1332","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1332) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 5:40 AM\r\n- **Commit**: e75dd151c9e5aa94cf33c7c9d14a53180df747dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9997452633","Type":"IssuesEvent","CreatedAt":"2019-07-12T04:31:34","Actor":"foxjazz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39422","RelatedDescription":"Opened issue \"Behavior differences between fileInfo and reading length\" (#39422) at dotnet/corefx","RelatedBody":"[RepoSteps](https://github.com/evetoolsblue/WritingShared)\r\n\r\n"},{"Id":"9997016707","Type":"PullRequestEvent","CreatedAt":"2019-07-12T02:24:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39418","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/standard\" (#39418) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190711.4\r\n- **Date Produced**: 7/11/2019 11:45 PM\r\n- **Commit**: 90cd813874b98b92a75f5f6f5e0ada5cc8e43a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19361.4\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9997617945","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:23:07","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37115","RelatedDescription":null,"RelatedBody":"Allow editing existing interface member bodies.\r\n\r\nDisallow adding new ones - virtual and abstract ones are not supported in general in abstract types, non-virtual should in theory work but don't (https://github.com/dotnet/roslyn/issues/37128).\r\n\r\nAdding a nested types is supported.\r\n\r\nDisallow declaring a new local function in a body of an interface method. We synthesize the IL method directly to the containing interface, which does not work. Lambdas, async, and iterators are supported since they synthesize a nested type.\r\n\r\n\r\n"},{"Id":"9997617769","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:23:05","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37115","RelatedDescription":"Closed pull request \"EnC support for DIM\" (#37115) at dotnet/roslyn","RelatedBody":"Allow editing existing interface member bodies.\r\n\r\nDisallow adding new ones - virtual and abstract ones are not supported in general in abstract types, non-virtual should in theory work but don't (https://github.com/dotnet/roslyn/issues/37128).\r\n\r\nAdding a nested types is supported.\r\n\r\nDisallow declaring a new local function in a body of an interface method. We synthesize the IL method directly to the containing interface, which does not work. Lambdas, async, and iterators are supported since they synthesize a nested type.\r\n\r\n\r\n"},{"Id":"9997500985","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:47:00","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37186","RelatedDescription":"Merged pull request \"Full-ngen ResultProvider\" (#37186) at dotnet/roslyn","RelatedBody":"Working around an optprof issue. The assembly seems to be just 150kb in size so it feels like we should be able to get away with a full ngen."},{"Id":"9997351660","Type":"PullRequestEvent","CreatedAt":"2019-07-12T03:59:16","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37048","RelatedDescription":"Merged pull request \"Add nullability parameters to Compilation.Create*Type()\" (#37048) at dotnet/roslyn","RelatedBody":"Fixes #36047"},{"Id":"9997351650","Type":"IssuesEvent","CreatedAt":"2019-07-12T03:59:16","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36047","RelatedDescription":"Closed issue \"Compilation.Create*Type does not give a way to pass top-level nullabilities\" (#36047) at dotnet/roslyn","RelatedBody":"Right now the API gives you no way to specify top-level nullability of the members."},{"Id":"9997203151","Type":"PullRequestEvent","CreatedAt":"2019-07-12T03:15:34","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37186","RelatedDescription":"Opened pull request \"Full-ngen ResultProvider\" (#37186) at dotnet/roslyn","RelatedBody":"Working around an optprof issue. The assembly seems to be just 150kb in size so it feels like we should be able to get away with a full ngen."},{"Id":"9996856020","Type":"PullRequestEvent","CreatedAt":"2019-07-12T01:37:42","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37135","RelatedDescription":"Merged pull request \"Apply Maybe/NotNull when getting default value of fields and properties\" (#37135) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/36830"},{"Id":"9996855995","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:37:42","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36830","RelatedDescription":"Closed issue \"Debug.Assert() does not change tracked nullability of field\" (#36830) at dotnet/roslyn","RelatedBody":"```C#\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass C<T>\r\n{\r\n    [AllowNull, MaybeNull] T F = default!;\r\n\r\n    void M()\r\n    {\r\n        Debug.Assert(F != null);\r\n        F.ToString();\r\n    }\r\n}\r\n```\r\n```\r\n(11,9): warning CS8602: Dereference of a possibly null reference.\r\n```\r\ncc @safern\r\n\r\nRelates to https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-05-15.md (attributes for nullability analysis)"},{"Id":"9996788695","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:17:41","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37185","RelatedDescription":"Opened issue \"Class view / object browser doesn't show ? for nullable annotated types\" (#37185) at dotnet/roslyn","RelatedBody":""},{"Id":"9996779440","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:15:02","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37184","RelatedDescription":"Opened issue \"Navigate to decompiled source doesn't handle nullable attributes\" (#37184) at dotnet/roslyn","RelatedBody":"We'll need to update to a newer ILSpy library."},{"Id":"9996774136","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:13:25","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37183","RelatedDescription":"Opened issue \"Navigation bars should show nullable annotations\" (#37183) at dotnet/roslyn","RelatedBody":"Navigation bars don't show nullable annotations when showing method signatures. This is actually kinda useful if you're in a method since it shows you your signature if it's scrolled off the screen."},{"Id":"9996760812","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:09:23","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37182","RelatedDescription":"Opened issue \"Convert to full property loses nullability\" (#37182) at dotnet/roslyn","RelatedBody":"If you write:\r\n\r\n```\r\nstring? S { get; set; }\r\n```\r\n\r\nand try converting this to a full property, the backing field loses the ?."},{"Id":"9996745309","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:04:34","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37181","RelatedDescription":"Opened issue \"Convert Get/Set to properties doesn't handle differing nullabilities well\" (#37181) at dotnet/roslyn","RelatedBody":"Consider a case like:\r\n\r\n```\r\n        public string? GetFoo() { return \"\"; }\r\n        public void SetFoo(string s) { }\r\n\r\n```\r\n\r\nWe suggest to convert this to a property of type string?, which loses the fact that SetFoo can't take nulls. If you reverse this and have SetFoo take the null we also throw that away too which seems bad.\r\n\r\nThe simple approach is just to not offer the refactoring if the top-level-nullabilities differ."},{"Id":"9996743598","Type":"IssuesEvent","CreatedAt":"2019-07-12T01:04:03","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37180","RelatedDescription":"Opened issue \"Handle ImplicitStackAllocArrayCreationExpressionSyntax\" (#37180) at dotnet/roslyn","RelatedBody":"This is new syntax node in C# 7.3 and needs to be handled in `InlineTemporaryCodeRefactoringProvider` where `StackAllocArrayCreationExpression` is:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a393757e7056f390c5673a419e9d8c7c7536d496/src/Features/CSharp/Portable/CodeRefactorings/InlineTemporary/InlineTemporaryCodeRefactoringProvider.cs#L70"},{"Id":"9996709264","Type":"IssuesEvent","CreatedAt":"2019-07-12T00:53:15","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37179","RelatedDescription":"Opened issue \"Generate overrides UI needs to show ?s for parameters\" (#37179) at dotnet/roslyn","RelatedBody":""},{"Id":"9996692585","Type":"IssuesEvent","CreatedAt":"2019-07-12T00:47:36","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37178","RelatedDescription":"Opened issue \"The simplifier should simplify away ? annotations if in a nullable annotation disabled context\" (#37178) at dotnet/roslyn","RelatedBody":"Once #36101 is complete, we're going to update the simplifier to disregard generated ? annotations on nullable reference types. We definitely want to be smarter in some cases (see #37177 as an example) but this is a minimum bar we need to do to keep refactorings working."},{"Id":"9996677153","Type":"IssuesEvent","CreatedAt":"2019-07-12T00:42:49","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37177","RelatedDescription":"Opened issue \"Extract interface needs to copy along #nullable context\" (#37177) at dotnet/roslyn","RelatedBody":"If you invoke extract interface into a new file, right now we aren't copying along the nullable context so you might get ?s where you don't support them.\r\n\r\nThis needs #36101 for us to implement it properly."},{"Id":"9996667316","Type":"IssuesEvent","CreatedAt":"2019-07-12T00:39:46","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37176","RelatedDescription":"Opened issue \"Extract interface doesn't show nullability\" (#37176) at dotnet/roslyn","RelatedBody":"Extract interface doesn't show ?s for the types."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9996446143","Type":"PullRequestEvent","CreatedAt":"2019-07-11T23:33:26","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Opened pull request \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611) at dotnet/corert","RelatedBody":""},{"Id":"9995794026","Type":"PullRequestEvent","CreatedAt":"2019-07-11T21:13:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7609","RelatedDescription":"Merged pull request \"Converge to a single copy of volatile.h\" (#7609) at dotnet/corert","RelatedBody":"Fixes #7607"},{"Id":"9995794018","Type":"IssuesEvent","CreatedAt":"2019-07-11T21:13:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7607","RelatedDescription":"Closed issue \"build failing on mac os\" (#7607) at dotnet/corert","RelatedBody":"Trying to build on mac os 10.14.5 (18F132)\r\n\r\n```bash\r\nNitins-MacBook-Pro-2:corert vstest$ ./build.sh release\r\nUnknown CPU i386 detected, configuring as if for x64\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for OSX.x64.Release\r\n~/github/corert/bin/obj/Native/OSX.x64.Release ~/github/corert\r\nInvoking cmake with arguments: \"/Users/vstest/github/corert/buildscripts/..\" Release\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/vstest/github/corert/bin/obj/Native/OSX.x64.Release\r\nExecuting make install -j 9 \r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target jitinterface\r\n[  4%] Built target bootstrapperdll\r\n[  6%] Built target bootstrapper\r\n[  8%] Built target bootstrappercpp\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o\r\n[ 11%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o\r\n/Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310error: :34: unexpected token\r\nerror: error: DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nunexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                    ^ \r\n                             ^\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o] Error 1\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o] Error 1\r\nmake[1]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 13%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.incerror: :310:34: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^ \r\n                          error:       ^\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o] Error 1/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: \r\nerror: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n[ 16%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o] Error 1\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n   DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h \r\n                             ^\r\n                                 ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nunexpected token\r\n                                 ^\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: error: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake: *** [all] Error 2\r\nFailed to build corert native components.\r\n```"},{"Id":"9995601457","Type":"PullRequestEvent","CreatedAt":"2019-07-11T20:42:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7608","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7608) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9995198127","Type":"PullRequestEvent","CreatedAt":"2019-07-11T19:37:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7610","RelatedDescription":"Opened pull request \"Enable generic inlining\" (#7610) at dotnet/corert","RelatedBody":"RyuJIT is capable of some limited generic inlining - we just have to make sure we're resolving tokens in the inlining context."},{"Id":"9994926169","Type":"PullRequestEvent","CreatedAt":"2019-07-11T18:54:54","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7609","RelatedDescription":"Opened pull request \"[WIP] Converge to a single copy of volatile.h\" (#7609) at dotnet/corert","RelatedBody":""},{"Id":"9994414236","Type":"PullRequestEvent","CreatedAt":"2019-07-11T17:36:44","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7608","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7608) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"9994411601","Type":"PullRequestEvent","CreatedAt":"2019-07-11T17:36:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7606) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9991273239","Type":"IssuesEvent","CreatedAt":"2019-07-11T10:41:51","Actor":"karanjitsingh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7607","RelatedDescription":"Opened issue \"build failing on mac os\" (#7607) at dotnet/corert","RelatedBody":"Trying to build on mac os 10.14.5 (18F132)\r\n\r\n```bash\r\nNitins-MacBook-Pro-2:corert vstest$ ./build.sh release\r\nUnknown CPU i386 detected, configuring as if for x64\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for OSX.x64.Release\r\n~/github/corert/bin/obj/Native/OSX.x64.Release ~/github/corert\r\nInvoking cmake with arguments: \"/Users/vstest/github/corert/buildscripts/..\" Release\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/vstest/github/corert/bin/obj/Native/OSX.x64.Release\r\nExecuting make install -j 9 \r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target jitinterface\r\n[  4%] Built target bootstrapperdll\r\n[  6%] Built target bootstrapper\r\n[  8%] Built target bootstrappercpp\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o\r\n[ 11%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o\r\n/Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310error: :34: unexpected token\r\nerror: error: DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nunexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                    ^ \r\n                             ^\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o] Error 1\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o] Error 1\r\nmake[1]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 13%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.incerror: :310:34: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^ \r\n                          error:       ^\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o] Error 1/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: \r\nerror: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n[ 16%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o] Error 1\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n   DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h \r\n                             ^\r\n                                 ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nunexpected token\r\n                                 ^\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: error: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake: *** [all] Error 2\r\nFailed to build corert native components.\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9997599540","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:17:48","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3398","RelatedDescription":"Closed pull request \"Continue design time builds if resolving package assets fails\" (#3398) at dotnet/sdk","RelatedBody":"Design time builds are stopping if `ResolvePackageAssets` hits an error (https://github.com/dotnet/project-system/issues/4992). This PR sets `ContinueOnError` on `ResolvePackageAssets` to `ErrorAndContinue` for design time builds only.\r\n\r\nWould the property be better defined in `Microsoft.NET.Sdk.props` with a more general name for broader use?\r\n\r\nAlternatively, should this logic piggyback off the `DesignTimeBuild` property of the task itself?\r\n\r\nhttps://github.com/dotnet/sdk/blob/adf76a594158a742e2c22b49b0fb4942cb53317d/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L153"},{"Id":"9997587532","Type":"PullRequestEvent","CreatedAt":"2019-07-12T05:14:06","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3399","RelatedDescription":null,"RelatedBody":"(This is an alternative implementation of #3398.)\r\n\r\nDesign time builds are stopping if `ResolvePackageAssets` hits an error (dotnet/project-system#4992).\r\n\r\nThis PR uses the fact that design-time builds set the `ContinueOnError` property to `ErrorAndContinue`.\r\n\r\n"},{"Id":"9997533400","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:57:34","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3413","RelatedDescription":"Merged pull request \"Document testing local builds and remove VS version\" (#3413) at dotnet/sdk","RelatedBody":""},{"Id":"9997477795","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:39:39","Actor":"drewnoakes","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3413","RelatedDescription":"Opened pull request \"Document testing local builds and remove VS version\" (#3413) at dotnet/sdk","RelatedBody":""},{"Id":"9997444272","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:28:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3411","RelatedDescription":null,"RelatedBody":"This is for dotnet/core-setup#7173\r\n\r\nIt is also affecting Preview 7. This is just the change in master."},{"Id":"9997444123","Type":"PullRequestEvent","CreatedAt":"2019-07-12T04:28:46","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3411","RelatedDescription":"Closed pull request \"Update Microsoft.NET.HostModel version\" (#3411) at dotnet/sdk","RelatedBody":"This is for dotnet/core-setup#7173\r\n\r\nIt is also affecting Preview 7. This is just the change in master."},{"Id":"9996845647","Type":"PullRequestEvent","CreatedAt":"2019-07-12T01:34:30","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3410","RelatedDescription":"Merged pull request \"Disable flaky test against bug\" (#3410) at dotnet/sdk","RelatedBody":"Good news: The test found a product bug (#3409) that it is designed to catch.\r\n\r\nBad news: It can still pass depending on what's in the nuget cache from prior tests. So the change that regressed it slipped through and now we have flaky CI.\r\n\r\nDisabling the test against the bug that it caught for now."},{"Id":"9996554926","Type":"PullRequestEvent","CreatedAt":"2019-07-12T00:05:25","Actor":"elinor-fung","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3412","RelatedDescription":"Opened pull request \"Update Microsoft.NET.HostModel version\" (#3412) at dotnet/sdk","RelatedBody":"This is for dotnet/core-setup#7173\r\n\r\nSame change as #3411, but for Preview 7"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"467223641","IsPullRequest":true,"CreatedAt":"2019-07-12T05:08:49","Actor":"ts2do","Number":"25658","RawContent":null,"Title":"Eliminate extra time zone conversions in DateTimeOffset","State":"open","Body":"PR recreated here (originally dotnet/corefx#38790)\r\n\r\nRevised members dealing specifically with local time by removing delegation to `DateTime` methods to avoid an extra call to `TimeZoneInfo` to determine offset:\r\n> Now\r\n> FromFileTime(long)\r\n> ToLocalTime()\r\n\r\n**Before**\r\n\r\n|        Method |      Mean |     Error |    StdDev |  Gen 0 |  Gen 1 |  Gen 2 |  Allocated |\r\n| ------------- | --------- | --------- | --------- | ------ | ------ | ------ | ---------- |\r\n|           Now |  474.7 ns |  1.913 ns |  1.790 ns |      - |      - |      - |          - |\r\n|  FromFileTime |  498.1 ns |  1.685 ns |  1.494 ns |      - |      - |      - |          - |\r\n|  ToLocalTime  |  459.5 ns |  1.732 ns |  1.620 ns |      - |      - |      - |          - |\r\n\r\n**After**\r\n\r\n|        Method |      Mean |     Error |    StdDev |  Gen 0 |  Gen 1 |  Gen 2 |  Allocated |\r\n| ------------- | --------- | --------- | --------- | ------ | ------ | ------ | ---------- |\r\n|           Now |  303.8 ns |  1.438 ns |  1.269 ns |      - |      - |      - |          - |\r\n|  FromFileTime |  290.1 ns |  1.611 ns |  1.507 ns |      - |      - |      - |          - |\r\n|   ToLocalTime |  236.7 ns |  0.881 ns |  0.824 ns |      - |      - |      - |          - |\r\n\r\n```csharp\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private long _fileTime;\r\n    private DateTimeOffset _utc;\r\n\r\n    [GlobalSetup]\r\n    public void GlobalSetup()\r\n    {\r\n        _utc = DateTimeOffset.UtcNow;\r\n        _fileTime = _utc.ToFileTime();\r\n    }\r\n\r\n    [Benchmark] public DateTimeOffset Now() => DateTimeOffset.Now;\r\n    [Benchmark] public DateTimeOffset FromFileTime() => DateTimeOffset.FromFileTime(_fileTime);\r\n    [Benchmark] public DateTimeOffset ToLocalTime() => _utc.ToLocalTime();\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/pull/25658","RelatedDescription":"Open PR \"Eliminate extra time zone conversions in DateTimeOffset\" (#25658)"},{"Id":"467163880","IsPullRequest":true,"CreatedAt":"2019-07-12T00:26:16","Actor":"andy-ms","Number":"25657","RawContent":null,"Title":"Document new GC configuration knobs","State":"open","Body":"* Adds a new column \"Minimum `dotnet` Version\" as the new knobs are only available in dotnet 3.0+.\r\n* The changes to `clr-configuration-knobs.md` are due to running\r\n  `dotnet-script clr-configuration-knobs.csx` which causes some\r\n  unrelated changes. Only `clr-configuration-knobs.csx` was manually\r\n  edited.\r\n* The new properties are:\r\n  - \"System.GC.HeapHardLimit\"\r\n  - \"System.GC.HeapHardLimitPercent\"\r\n  - \"System.GC.HeapAffinitizeMask\"\r\n  - \"System.GC.HeapCount\"\r\n  - \"System.GC.NoAffinitize\"\r\n* These properties are supported as of #25574 and #25653","Url":"https://github.com/dotnet/coreclr/pull/25657","RelatedDescription":"Open PR \"Document new GC configuration knobs\" (#25657)"},{"Id":"467159237","IsPullRequest":true,"CreatedAt":"2019-07-12T00:04:56","Actor":"VSadov","Number":"25656","RawContent":null,"Title":"[WIP] GC reliability tests","State":"open","Body":"\r\nnot done yet","Url":"https://github.com/dotnet/coreclr/pull/25656","RelatedDescription":"Open PR \"[WIP] GC reliability tests\" (#25656)"},{"Id":"467156479","IsPullRequest":true,"CreatedAt":"2019-07-11T23:52:29","Actor":"briansull","Number":"25655","RawContent":null,"Title":"[TEST-ONLY] disable gcstress on Linux_arm, Linux_arm64 and Windows_NT_x86","State":"open","Body":"This allows me to run gcstress on Linux_x64 and Windows_NT_x64 only","Url":"https://github.com/dotnet/coreclr/pull/25655","RelatedDescription":"Open PR \"[TEST-ONLY] disable gcstress on Linux_arm, Linux_arm64 and Windows_NT_x86\" (#25655)"},{"Id":"466528947","IsPullRequest":true,"CreatedAt":"2019-07-11T21:37:47","Actor":"cshung","Number":"25638","RawContent":null,"Title":"PerfMap should output file offset instead of RVAs","State":"closed","Body":"Fixes #24966\r\n\r\nThere is a mismatch between `perf`, `crossgen` and `PerfView` causing this bug.\r\n\r\n- I believe when `perf script` output a number of a stack frame, it outputs the file offset (*)\r\n- `crossgen` outputs three tuple, `rva`, `size`, `name` of all methods. [Here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/vm/perfmap.cpp#L391) is the code that computes the rva.\r\n- PerfView takes the number generated by `perf script` and do a binary search in the `crossgen` output.\r\n\r\nEssentially, PerfView is taking file offsets and comparing it against rva. That is why the lookup fails. Once I change `crossgen` to output file offset as is done in this PR, the lookup is successful.\r\n\r\nThe above is sufficient to understand the change, below is just a record on what I did to 'believe' perf output file offsets.\r\n\r\n(*) Here is my experiment to 'prove' that perf outputs file offset. The prove is in quotes because it is really just a prove by observation.\r\n\r\nThe key problem is that `perf` is output random numbers, in order to diagnose what is going on, I need a way to make `perf` output something known, so I hacked CoreLib and added a method in it that does an infinite loop, and call it in my test, that way I know most of the number outputted in `perf` should correlate to my method.\r\n\r\nI figured a tool `perf report -D` that can dump the raw `perf.data` outputted by the perf tool. There I found a raw IP. Cross-checking with the `perf.data.txt`. I subtracted them to figure out the base address assumed by `perf script` tool that generates the `perf.data.txt`. The base address is page aligned, making me believe it is a true base address.\r\n\r\nThe true base address was a mystery. If I look at the true IP and use the `memory region` command in `lldb`, it is slightly before the page that actually contains the executable code. The executable page base address together with its difference between the executable page is found in the same `perf report` output as an unnamed field on an event related to `mmap`, making me believe `perf` knew that offset and accounts for it.\r\n\r\nTurning on the LOADER tracing in PAL using `export PAL_DBG_CHANNELS=\"+LOADER.all\"`, I  discovered why. We used the `mmap` system call to map a file with an offset [here](https://github.com/dotnet/coreclr/blob/ef2f9f41555c453451a5003f1be4bb9888ab078d/src/pal/src/map/map.cpp#L2164). I believe the `perf` tool noted that and computes the file offset based on that information.\r\n\r\nTo prove it is indeed a file offset, I read the Linux binary as a byte array on a Windows machine, and I successfully disassembled the code at that address, it is indeed the instructions that correspond to my infinite loop method. That concludes my 'prove' that perf indeed output file offsets.","Url":"https://github.com/dotnet/coreclr/pull/25638","RelatedDescription":"Closed or merged PR \"PerfMap should output file offset instead of RVAs\" (#25638)"},{"Id":"467112474","IsPullRequest":true,"CreatedAt":"2019-07-11T21:20:22","Actor":"dotnet-maestro-bot","Number":"25654","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25654","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25654)"},{"Id":"467099437","IsPullRequest":true,"CreatedAt":"2019-07-11T20:48:37","Actor":"andy-ms","Number":"25653","RawContent":null,"Title":"Handle more configs in GCToEEInterface","State":"open","Body":"Adds handling for the following configs:\r\n* \"GCNoAffinitize\" (from \"System.GC.NoAffinitize\")\r\n* \"GCHeapAffinitizeMask\" (from \"System.GC.HeapAffinitizeMask\")\r\n* \"GCHeapCount\" (from \"System.GC.HeapCount\")\r\n\r\nThese configs were already handled correctly in EEConfig::sync, so that\r\ndoes not need to be changed. Just the access from GC needs to be fixed.\r\n\r\nPreviously the configs were correctly read,\r\nbut GC did not see those values.\r\n\r\nVerified this change by debugging into\r\nGCToEEInterface::GetBooleanConfigValue and\r\nGCToEEInterface::GetIntConfigValue as well as their uses in\r\nSVR::GCHeap::Initialize.","Url":"https://github.com/dotnet/coreclr/pull/25653","RelatedDescription":"Open PR \"Handle more configs in GCToEEInterface\" (#25653)"},{"Id":"467093870","IsPullRequest":false,"CreatedAt":"2019-07-11T20:35:17","Actor":"iskiselev","Number":"25652","RawContent":null,"Title":"DoStackSnapshot from P/Invoke","State":"open","Body":"Is it safe to call DoStackSnapshot for Synchronous Stack Walk from P/Invoke call?\r\nPer my tests it works, but [documentation](https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method) states, that it can be done in response to the CLR calling one of your profiler's ICorProfilerCallback (or ICorProfilerCallback2) methods.\r\nIf it is safe, should documentation be updated? Should it be safe at least call it from any ICorProfilerCallbackX calls?","Url":"https://github.com/dotnet/coreclr/issues/25652","RelatedDescription":"Open issue \"DoStackSnapshot from P/Invoke\" (#25652)"},{"Id":"467069640","IsPullRequest":true,"CreatedAt":"2019-07-11T19:35:03","Actor":"andy-ms","Number":"25650","RawContent":null,"Title":"Fixes when accessing fgn_maxgen_percent","State":"open","Body":"PR #25350 changed `fgn_maxgen_percent` to be a per-heap property when\r\n`MULTIPLE_HEAPS` is set. A few uses need to be updated.\r\n\r\n* In `full_gc_wait`, must re-read `fgn_maxgen_percent` before the\r\n  second test of `maxgen_percent == 0`.\r\n  (Otherwise the second test is statically unreachable.)\r\n* In RegisterForFullGCNotification, must set `fgn_maxgen_percent` when\r\n  `MULTIPLE_HEAPS` is not set\r\n* In CancelFullGCNotification, must set `fgn_maxgen_percent` for each\r\n  heap separately when `MULTIPLE_HEAPS` is set.\r\n\r\nFix dotnet/corefx#39374","Url":"https://github.com/dotnet/coreclr/pull/25650","RelatedDescription":"Open PR \"Fixes when accessing fgn_maxgen_percent\" (#25650)"},{"Id":"466863658","IsPullRequest":false,"CreatedAt":"2019-07-11T17:59:24","Actor":"Symbai","Number":"25643","RawContent":null,"Title":"Performance regression on Object.Equals","State":"closed","Body":"When it's equal .NET Core is faster but when not, which happens probably more often, .NET Framework is faster.\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n```\r\n\r\n\r\n|  Method |  Job | Runtime |     Mean |     Error |    StdDev |\r\n|-------- |----- |-------- |---------:|----------:|----------:|\r\n| NoMatch |  Clr |     Clr | 2.297 ns | 0.0784 ns | 0.0992 ns |\r\n| NoMatch | Core |    Core | 2.566 ns | 0.0853 ns | 0.0757 ns |\r\n\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[RPlotExporter]\r\npublic class ObjectTest\r\n{\r\n    object One = new object();\r\n    object Two = new object();\r\n\r\n    [Benchmark]\r\n    public bool NoMatch() => One.Equals(Two);\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25643","RelatedDescription":"Closed issue \"Performance regression on Object.Equals\" (#25643)"},{"Id":"467023137","IsPullRequest":true,"CreatedAt":"2019-07-11T17:44:13","Actor":"Dotnet-GitSync-Bot","Number":"25649","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/25649","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#25649)"},{"Id":"467014367","IsPullRequest":false,"CreatedAt":"2019-07-11T17:19:50","Actor":"crhaglun","Number":"25648","RawContent":null,"Title":"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)","State":"open","Body":"When using a nullable value in EventSource.Write, it appears the ETW event gets corrupted.\r\n\r\nRepro steps (Visual Studio 2019)\r\n\r\n1. Create a new \"Blank App (Universal Windows)\" project in Visual Studio\r\nThis should give you a Universal Windows project depending on Microsoft.NETCore.UniversalWindowsPlatform 6.2.8\r\n2. Paste this snippet into the ``App`` class constructor\r\n````csharp\r\n            var eventSource = new EventSource(\"ETWBugRepro\");\r\n            uint? nullableValue = 0xAABBCCDD;\r\n            eventSource.Write(\"EventWithNullableValue\", new { nullableValue });\r\n````\r\n3. Start a trace\r\n(for instance ``xperf -start ETWBugTrace -on *ETWBugRepro -f trace.etl``)\r\n4. Build the Release configuration and run\r\n5. Build the Debug configuration (alternatively just disable .NET Native compilation) and run\r\n6. Inspect the trace file\r\n(for instance ``xperf -stop ETWBugTrace && wpa trace.etl``)\r\n\r\nWithout .NET Native compilation, the event payload is\r\n``nullableValue: { HasValue: 1; Value: 0xAABBCCDD; }``\r\n\r\nWith .NET Native compilation enabled, the event payload is\r\n``nullableValue: { HasValue: 0xDD; Value: 0;}``\r\n","Url":"https://github.com/dotnet/coreclr/issues/25648","RelatedDescription":"Open issue \"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)\" (#25648)"},{"Id":"467009146","IsPullRequest":false,"CreatedAt":"2019-07-11T17:06:45","Actor":"robertborr","Number":"25647","RawContent":null,"Title":"seg fault build failures in 'official/dotnet/corefx/refs/heads/master' - '20190710.11'","State":"open","Body":"@dotnet-mc-bot commented on [Wed Jul 10 2019](https://github.com/dotnet/core-eng/issues/6935)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=259945\r\n  - **Agent:** Hosted macOS 10\r\n  - **Error log:** /Users/vsts/agent/2.153.2/work/0/s/.packages/microsoft.net.compilers.toolset/3.3.0-beta1-19327-03/tasks/netcoreapp2.1/Microsoft.CSharp.Core.targets(0,0): error MSB6006: \"csc.dll\" exited with code 139. [/Users/vsts/agent/2.153.2/wo...\r\n\r\n@robertborr\r\n\n\n","Url":"https://github.com/dotnet/coreclr/issues/25647","RelatedDescription":"Open issue \"seg fault build failures in 'official/dotnet/corefx/refs/heads/master' - '20190710.11'\" (#25647)"},{"Id":"466636950","IsPullRequest":true,"CreatedAt":"2019-07-11T17:05:52","Actor":"stephentoub","Number":"25640","RawContent":null,"Title":"Remove stale nullable !s and pragmas","State":"closed","Body":"Also update TODO-NULLABLE comments to be more specific where appropriate.\r\n\r\ncc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/25640","RelatedDescription":"Closed or merged PR \"Remove stale nullable !s and pragmas\" (#25640)"},{"Id":"466510864","IsPullRequest":true,"CreatedAt":"2019-07-11T16:50:02","Actor":"sdmaclea","Number":"25636","RawContent":null,"Title":"Arm64 debug issues","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25636","RelatedDescription":"Closed or merged PR \"Arm64 debug issues\" (#25636)"},{"Id":"466815465","IsPullRequest":false,"CreatedAt":"2019-07-11T15:47:10","Actor":"glucaci","Number":"25642","RawContent":null,"Title":"Dictionary ctor in .NET Standard is missing","State":"closed","Body":"The following constructor can be found in `Microsoft.NetCore.App 2.2.0`\r\n```csharp\r\npublic Dictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection);\r\n```\r\nWhy is this constructor missing in `NetStandard.Library 2.0.3`?","Url":"https://github.com/dotnet/coreclr/issues/25642","RelatedDescription":"Closed issue \"Dictionary ctor in .NET Standard is missing\" (#25642)"},{"Id":"466961223","IsPullRequest":false,"CreatedAt":"2019-07-11T15:26:00","Actor":"RealDotNetDave","Number":"25646","RawContent":null,"Title":"Performance Issues Adding Items To List Is Slower in Core 3 than Core 2.2","State":"open","Body":"Below are the benchmark results, using BenchmarkDotnet, to test adding items to a List<> collection. As you can see, while .NET Core 3 is faster than the Clr, it seems the performance is slower when compared to .NET Core 2.2.\r\n\r\n![image](https://user-images.githubusercontent.com/15676130/61063713-472c3b80-a3b5-11e9-8519-aa9815fd54f7.png)\r\n\r\nBelow is the code for the benchmark test:\r\n\r\n```\r\n        [Benchmark(Description = \"COLLECTION CREATION: Using List<> & Add()\")]\r\n        public List<FakePerson> TestAddingItemsToCollections01()\r\n        {\r\n            var collection = new List<FakePerson>();\r\n\r\n            for (var count = 0; count < this.CollectionCount; count++)\r\n            {\r\n                collection.Add(this._fakePersonFixedCollection[count]);\r\n            }\r\n\r\n            return collection;\r\n        }\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25646","RelatedDescription":"Open issue \"Performance Issues Adding Items To List Is Slower in Core 3 than Core 2.2\" (#25646)"},{"Id":"466955709","IsPullRequest":false,"CreatedAt":"2019-07-11T15:16:09","Actor":"ThomasHjorslevFcn","Number":"25645","RawContent":null,"Title":"OutOfMemoryException in Thread.StartInternal() on Unix with plenty of mem free","State":"open","Body":"I'm experiencing an asp.net core application crashing regularly (every 30-60 minutes) with `System.OutOfMemoryException`. It seems to only happen on the Unix platform. \r\n\r\nThe stack trace is always:\r\n```\r\nUnhandled Exception: System.Threading.Tasks.TaskSchedulerException: An exception was thrown by a TaskScheduler. ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Threading.Thread.StartInternal()\r\n   at System.Threading.Tasks.Task.ScheduleAndStart(Boolean needsProtection)\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ScheduleAndStart(Boolean needsProtection)\r\n   at System.Threading.Tasks.Task.InternalStartNew(Task creatingTask, Delegate action, Object state, CancellationToken cancellationToken, TaskScheduler scheduler, TaskCreationOptions options, InternalTaskOptions internalOptions)\r\n   at System.Runtime.IOThreadScheduler.ScheduleCallbackHelper(SendOrPostCallback callback, Object state)\r\n   at System.Runtime.IOThreadScheduler.ScheduleCallbackNoFlow(SendOrPostCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.System.Runtime.CompilerServices.IStateMachineBoxAwareAwaiter.AwaitUnsafeOnCompleted(IAsyncStateMachineBox box)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted[TAwaiter,TStateMachine](TAwaiter& awaiter, TStateMachine& stateMachine)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\n* In [Thread.CoreRT.cs:370](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/System/Threading/Thread.CoreRT.cs#L370) we can see that `StartInternal()` can throw OOM when `CreateThread()` returns false.\r\n* In [Thread.CoreRT.Unix.cs:97](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/System/Threading/Thread.CoreRT.Unix.cs#L97) we can see that `CreateThread()` can only return false if `RuntimeThread_CreateThread()` does.\r\n* As far as I can see, that refers to [pal_threading.cpp:170](https://github.com/dotnet/corert/blob/master/src/Native/System.Private.CoreLib.Native/pal_threading.cpp#L170) which can return false if either of `pthread_attr_init(&attrs)`, `pthread_attr_setstacksize(&attrs, stackSize)` or `pthread_create(&threadId, &attrs, startAddress, parameter)` does not return 0 (SUCCESS).\r\n\r\nSince the server is far from out of memory, I suspect some other limit has been reached, but since `StartInternal()` throws OOM no matter what non-success code is returned, it's hard to know what and why.\r\n\r\nThe application in question is running in an Docker environment with 16GB memory. Because of the crashes, I have added a per-5-seconds logging of some key process figures. I never see Process.WorkingSet64 go over 2-3GB.\r\n\r\nHere is an example logging a few seconds before a crash:\r\n```\r\n2019-07-10T18:30:16.741Z concurrency:   4 proc thread cnt:   29 avail worker threads: 32,766 avail compl port threads:  1,000 ws: 1,733,996,544\r\n```\r\n* `concurrency` is a counter I increment/decrement on web service call start/end (it varies between a few and around 100)\r\n* `proc thread count` is the length of `Process.GetCurrentProcess().Length` \r\n* `avail worker threads` and `avail compl port threads` is from `ThreadPool.GetAvailableThreads()`\r\n* `ws` is `Process.GetCurrentProcess().WorkingSet64`\r\n\r\nI have been able to reproduce in our test env a few times, under synthetic load, but only after about 1 hour of heavy concurrent load.\r\n\r\nSome facts that may be relevant:\r\n\r\n* The base docker image is `microsoft/dotnet:2.2-aspnetcore-runtime`\r\n* The app is running on AWS ECS using FARGATE (managed Docker host)\r\n* `Environment.Is64BitOperatingSystem` is `true`\r\n* `Environment.Is64BitProcess` is `true`\r\n* `IntPtrSize` is `8`\r\n* `uname -a` returns `Linux ip-172-xxx-xxx-xxx.eu-central-1.compute.internal 4.14.123-111.109.amzn2.x86_64 #1 SMP Mon Jun 10 19:37:57 UTC 2019 x86_64 GNU/Linux`\r\n* The primary operation of the service is to serve binary (PDF) content, which comes from either a MongoDB database and/or a `WebRequest` HTTP or FTP fetch.\r\n* All api actions are marked `async` and all MongoDB access and HTTP/FTP requests make full use of `async/await`.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25645","RelatedDescription":"Open issue \"OutOfMemoryException in Thread.StartInternal() on Unix with plenty of mem free\" (#25645)"},{"Id":"467089238","IsPullRequest":false,"CreatedAt":"2019-07-11T15:05:20","Actor":"dude202","Number":"25651","RawContent":null,"Title":"core 3.0 preview 6 broke COM Interop usage, compiles but raises System.TypeLoadException \"The signature is incorrect\" on runtime","State":"open","Body":"Core 3.0 test project references and uses COM component.\r\nPreview 5 does function without problems. Proven by uninstalling Preview 6 and installing Preview 5 without any Project/Code changes.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25651","RelatedDescription":"Open issue \"core 3.0 preview 6 broke COM Interop usage, compiles but raises System.TypeLoadException \"The signature is incorrect\" on runtime\" (#25651)"},{"Id":"466865337","IsPullRequest":false,"CreatedAt":"2019-07-11T12:34:58","Actor":"Symbai","Number":"25644","RawContent":null,"Title":"Performance regression on Guid.Equals","State":"open","Body":"When it's equal .NET Core is faster but when not, which happens probably more often, .NET Framework is faster.\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n```\r\n\r\n\r\n|      Method |  Job | Runtime |     Mean |     Error |    StdDev |\r\n|------------ |----- |-------- |---------:|----------:|----------:|\r\n| NoMatchGuid |  Clr |     Clr | 1.780 ns | 0.0016 ns | 0.0012 ns |\r\n| NoMatchGuid | Core |    Core | 2.279 ns | 0.0010 ns | 0.0008 ns |\r\n\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[RPlotExporter]\r\npublic class GuidTest\r\n{\r\n\r\n    static byte[] FixedGUI = new byte[16] { 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x2 };\r\n    static byte[] FixedGUITwo = new byte[16] { 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5 };\r\n    Guid OneGuid = new Guid(FixedGUI);\r\n    Guid TwoGuid = new Guid(FixedGUITwo);\r\n\r\n    [Benchmark]\r\n    public bool NoMatchGuid() => OneGuid.Equals(TwoGuid);\r\n\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25644","RelatedDescription":"Open issue \"Performance regression on Guid.Equals\" (#25644)"},{"Id":"466682120","IsPullRequest":false,"CreatedAt":"2019-07-11T06:10:32","Actor":"tmds","Number":"25641","RawContent":null,"Title":"Child process debugging on Linux","State":"open","Body":"There is a nice tool for VS for doing Child Process Debugging: https://devblogs.microsoft.com/devops/introducing-the-child-process-debugging-power-tool/.\r\n\r\nI'm not sure what hooks are in coreclr/corefx to make this work.\r\n\r\nIs there a way to achieve something like this when debugging on Linux?","Url":"https://github.com/dotnet/coreclr/issues/25641","RelatedDescription":"Open issue \"Child process debugging on Linux\" (#25641)"},{"Id":"466499747","IsPullRequest":false,"CreatedAt":"2019-07-11T04:42:15","Actor":"Symbai","Number":"25635","RawContent":null,"Title":"Performance regression on String.Equals","State":"closed","Body":"While .NET Core is faster if the string matches, it's much slower than .NET Framework if not. It doesn't matter if Equals or == is used. See below:\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview7-012593\r\n  [Host] : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n  Clr    : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core   : .NET Core 3.0.0-preview7-27824-03 (CoreCLR 4.700.19.32302, CoreFX 4.700.19.32001), 64bit RyuJIT\r\n```\r\n\r\n\r\n|  Method |  Job | Runtime |      Mean |     Error |    StdDev |    Median | Rank | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------- |----- |-------- |----------:|----------:|----------:|----------:|-----:|------:|------:|------:|----------:|\r\n|   Match |  Clr |     Clr | 1.5775 ns | 0.0641 ns | 0.0629 ns | 1.5568 ns |    2 |     - |     - |     - |         - |\r\n| NoMatch |  Clr |     Clr | **3.6239 ns** | 0.1036 ns | 0.1108 ns | 3.6961 ns |    3 |     - |     - |     - |         - |\r\n|   Match | Core |    Core | 0.7763 ns | 0.0489 ns | 0.0502 ns | 0.7364 ns |    1 |     - |     - |     - |         - |\r\n| NoMatch | Core |    Core | **5.4398 ns** | 0.0852 ns | 0.0755 ns | 5.4599 ns |    4 |     - |     - |     - |         - |\r\n\r\nBenchmark:\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[MemoryDiagnoser]\r\n[RPlotExporter, RankColumn]\r\npublic class StringTest\r\n{\r\n    string One = \"sguiosdgsuodg\";\r\n    string Two = \"sguiosdgsuodg\";\r\n    string Three = \"ugitfgnhfihnf\";\r\n\r\n    [Benchmark]\r\n    public bool Match()\r\n    {\r\n        return One.Equals(Two);\r\n    }\r\n    [Benchmark]\r\n    public bool NoMatch()\r\n    {\r\n        return One.Equals(Three);\r\n    }\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25635","RelatedDescription":"Closed issue \"Performance regression on String.Equals\" (#25635)"},{"Id":"466560058","IsPullRequest":true,"CreatedAt":"2019-07-11T01:20:10","Actor":"benaadams","Number":"25639","RawContent":null,"Title":"String.Equals check first char for inequality","State":"closed","Body":"prior to moving into vectorized check\r\n\r\nResolves https://github.com/dotnet/coreclr/issues/25635\r\n\r\n/cc @jkotas @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/25639","RelatedDescription":"Closed or merged PR \"String.Equals check first char for inequality\" (#25639)"},{"Id":"466466803","IsPullRequest":true,"CreatedAt":"2019-07-10T23:12:39","Actor":"stephentoub","Number":"25633","RawContent":null,"Title":"Add AggressiveInlining to Single.GetHashCode","State":"closed","Body":"Fixes https://github.com/dotnet/coreclr/issues/25632\r\ncc: @billwert","Url":"https://github.com/dotnet/coreclr/pull/25633","RelatedDescription":"Closed or merged PR \"Add AggressiveInlining to Single.GetHashCode\" (#25633)"},{"Id":"466459029","IsPullRequest":false,"CreatedAt":"2019-07-10T23:12:39","Actor":"billwert","Number":"25632","RawContent":null,"Title":"Single.GetHashCode should be marked AgressiveInlining","State":"closed","Body":"A change (dotnet/coreclr#18645) affected the inlining decision for `Single.GetHashCode`. `Double.GetHashCode` is marked `AgressiveInlining`, and so should `Single`.\r\n\r\nThis surfaces as a perf regression in one of our tests for `Vector2` and `Vector3`.\r\n\r\n|               Method |     Toolchain |     Mean |\r\n|--------------------- |-------------- |---------:|\r\n| GetHashCodeBenchmark | netcoreapp2.2 | 2.336 ns |\r\n| GetHashCodeBenchmark | netcoreapp3.0 | 4.509 ns |","Url":"https://github.com/dotnet/coreclr/issues/25632","RelatedDescription":"Closed issue \"Single.GetHashCode should be marked AgressiveInlining\" (#25632)"},{"Id":"466514623","IsPullRequest":true,"CreatedAt":"2019-07-10T20:52:37","Actor":"sdmaclea","Number":"25637","RawContent":null,"Title":"Add a few #if... FEATURE_EMULATE_SINGLESTEP","State":"open","Body":"When the feature flag was added a few places were missed","Url":"https://github.com/dotnet/coreclr/pull/25637","RelatedDescription":"Open PR \"Add a few #if... FEATURE_EMULATE_SINGLESTEP\" (#25637)"},{"Id":"466481312","IsPullRequest":false,"CreatedAt":"2019-07-10T19:34:55","Actor":"stephentoub","Number":"25634","RawContent":null,"Title":"Missing TplEventSource events prohibiting correlation of work","State":"open","Body":"I've not fully explored history to see when this happened, but we're no longer outputting all of the events generally used to correlate work being scheduled with work executing, in particular around awaits, e.g. AwaitTaskContinuationScheduled.  The situation was made a bit worse by a recent change to how some await continuations were scheduled, which meant that workarounds which sometimes worked now work less often.  We're also not outputting the best IDs in all cases to enable correlation and activity tracking. Post 3.0, we should revisit our async tracing story all-up (cc: @noahfalk).","Url":"https://github.com/dotnet/coreclr/issues/25634","RelatedDescription":"Open issue \"Missing TplEventSource events prohibiting correlation of work\" (#25634)"},{"Id":"466446568","IsPullRequest":true,"CreatedAt":"2019-07-10T18:08:09","Actor":"EgorBo","Number":"25631","RawContent":null,"Title":"Remove a small allocation in MethodBase.ToString()","State":"open","Body":"Don't call `base.ToString()` and `Substring` if the type is void (the most popular return type I guess).\r\n\r\n```csharp\r\nMethodInfo method = typeof(Program).GetMethod(\"Main\");\r\nlong a = GC.GetAllocatedBytesForCurrentThread();\r\n\r\nstring str = method.ToString(); // \"Void Main(System.String[])\"\r\n\r\nlong b = GC.GetAllocatedBytesForCurrentThread();\r\nConsole.WriteLine((b - a) + \" bytes\");\r\n```\r\nBefore: `3792 bytes`\r\nAfter: `3592 bytes`\r\n\r\nI know the ToString() for methods is cached so this optimization affects only first calls of methodBase.ToString().\r\n","Url":"https://github.com/dotnet/coreclr/pull/25631","RelatedDescription":"Open PR \"Remove a small allocation in MethodBase.ToString()\" (#25631)"},{"Id":"466431025","IsPullRequest":false,"CreatedAt":"2019-07-10T17:29:16","Actor":"RealDotNetDave","Number":"25630","RawContent":null,"Title":"Trapping Exceptions Performance in .NET Core 3","State":"open","Body":"Below are the benchmark results, using BenchmarkDotnet, I've done with Exception handling that shows that it's slower in .NET Core.\r\n\r\n![image](https://user-images.githubusercontent.com/15676130/60989978-31a70b00-a2fc-11e9-8f34-550d8506a67d.png)\r\n\r\nBelow is the benchmark code:\r\n\r\n  ```\r\n        [Benchmark(Description = \"EXCEPTION TRAPPING: Using Try/Catch.\")]\r\n        public string TestException01()\r\n        {\r\n            try\r\n            {\r\n                ThrowException();\r\n            }\r\n            catch (ArgumentNullException anex)\r\n            {\r\n                return anex.Message;\r\n            }\r\n            catch (ArgumentOutOfRangeException aoorex)\r\n            {\r\n                return aoorex.Message;\r\n            }\r\n\r\n            return InvalidResultMessage;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Tests the exception when clause.\r\n        /// </summary>\r\n        /// <returns>System.String.</returns>\r\n        /// <exception cref=\"ArgumentOutOfRangeException\">Test #2 for trapping exceptions.</exception>\r\n        [Benchmark(Description = \"EXCEPTION TRAPPING: Using When() clause.\")]\r\n        public string TestException02()\r\n        {\r\n            try\r\n            {\r\n                ThrowException();\r\n            }\r\n            catch (Exception ex) when (ex is ArgumentNullException || ex is ArgumentOutOfRangeException)\r\n            {\r\n                return ex.Message;\r\n            }\r\n\r\n            return InvalidResultMessage;\r\n        }\r\n\r\n        private static void ThrowException()\r\n        {\r\n            throw new ArgumentOutOfRangeException(TestTrappingExMessage);\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/25630","RelatedDescription":"Open issue \"Trapping Exceptions Performance in .NET Core 3\" (#25630)"},{"Id":"466417661","IsPullRequest":false,"CreatedAt":"2019-07-10T16:56:04","Actor":"mattleibow","Number":"25629","RawContent":null,"Title":"Native runtime crashes on linux/mac in native delegate","State":"open","Body":"Exceptions in managed code running from a native delegate causes the app to crash - even if the original method is in a try/catch block. It runs fine on Windows with both .NET Core and .NET Framework and macOS/Linux with mono.\r\n\r\n```csharp\r\n// the managed call\r\nstatic void Main() {\r\n    add(a, b, AddImplementation);\r\n}\r\n\r\n// interop code\r\npublic delegate int adder_proc(int a, int b);\r\n\r\n[DllImport(\"libnativelibrary\")]\r\npublic static extern int add(int a, int b, adder_proc adder);\r\n\r\n// the managed callback\r\npublic static int AddImplementation(int a, int b) {\r\n    throw new Exception(\"You asked for an exception, here it is.\");\r\n}\r\n```\r\n\r\nI have created a sample app here: https://github.com/mattleibow/NetCoreExceptionsTest\r\nThe code file is here: https://github.com/mattleibow/NetCoreExceptionsTest/blob/master/source/Program.cs\r\nDevOps CI here: https://dev.azure.com/mattleibow/OpenSource/_build/results?buildId=149\r\n\r\nExpected output:\r\n```\r\n2 + 4 = 6\r\n2 + 4 = You asked for an exception, here it is.\r\n2 + 4 = 6\r\n```\r\n\r\nActual output:\r\n\r\n```\r\n2 + 4 = 6\r\n\r\nUnhandled Exception: System.Exception: You asked for an exception, here it is.\r\n   at managedapp.Program.AddImplementation(Int32 a, Int32 b) in /home/vsts/work/1/s/source/Program.cs:line 48\r\n   at managedapp.Program.add(Int32 a, Int32 b, adder_proc adder)\r\n   at managedapp.Program.Main(String[] args) in /home/vsts/work/1/s/source/Program.cs:line 24\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25629","RelatedDescription":"Open issue \"Native runtime crashes on linux/mac in native delegate\" (#25629)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"467228348","IsPullRequest":true,"CreatedAt":"2019-07-12T05:29:51","Actor":"dotnet-maestro[bot]","Number":"11846","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 5:29 AM\r\n- **Commit**: 6b10ed5d5e92d6eddca00c20aa948c23d656c076\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11846","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#11846)"},{"Id":"467221523","IsPullRequest":true,"CreatedAt":"2019-07-12T05:29:35","Actor":"dotnet-maestro[bot]","Number":"11845","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190711.5\r\n- **Date Produced**: 7/12/2019 4:58 AM\r\n- **Commit**: a27b9fc335f60fc1360981bba96ae02693c18fc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19361.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11845","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11845)"},{"Id":"467214542","IsPullRequest":true,"CreatedAt":"2019-07-12T04:55:24","Actor":"dotnet-maestro[bot]","Number":"11844","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.12\r\n- **Date Produced**: 7/12/2019 4:24 AM\r\n- **Commit**: fa95a7b33e27183d88504b11b736d2738c923ae7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11844","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11844)"},{"Id":"466504690","IsPullRequest":true,"CreatedAt":"2019-07-12T03:14:22","Actor":"dotnet-maestro[bot]","Number":"11823","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190711.4\r\n- **Date Produced**: 7/12/2019 2:43 AM\r\n- **Commit**: 62f00a77e69755da9936a7abb97b1c6b32a06167\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19361.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11823","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11823)"},{"Id":"467192991","IsPullRequest":true,"CreatedAt":"2019-07-12T03:13:33","Actor":"dotnet-maestro[bot]","Number":"11843","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.10\r\n- **Date Produced**: 7/12/2019 2:42 AM\r\n- **Commit**: 1e735dffdfb4532a7d2687dc8da36defe5eccf22\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11843","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11843)"},{"Id":"467132786","IsPullRequest":true,"CreatedAt":"2019-07-12T01:32:46","Actor":"peterhuene","Number":"11841","RawContent":null,"Title":"Ignore Ctrl-C for forwarding commands.","State":"closed","Body":"This commit ignores Ctrl-C for the remainder of the dotnet process for\r\nforwarding commands and the `run` command which simply spawn the child process\r\nand exit with the child's exit code.\r\n\r\nDoing this will prevent a race where SIGINT is handled after the child process\r\nterminates but before the dotnet process terminates.  After the child process\r\nterminates, the handler registered by the process reaper is unregistered.  If a\r\nSIGINT occurs after this, the default signal handler will execute and the\r\ndotnet process will exit with 130 (SIGINT) on POSIX systems.\r\n\r\nThis should hopefully fix the flakiness observed in the `ItIgnoresSIGINT` test.\r\n\r\nFixes #11088.\r\n","Url":"https://github.com/dotnet/cli/pull/11841","RelatedDescription":"Closed or merged PR \"Ignore Ctrl-C for forwarding commands.\" (#11841)"},{"Id":"467109287","IsPullRequest":true,"CreatedAt":"2019-07-11T23:56:06","Actor":"dotnet-maestro[bot]","Number":"11840","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.08\r\n- **Date Produced**: 7/11/2019 11:20 PM\r\n- **Commit**: 376ef04f75f03a108c15e968b670e9df4f4fac79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-08\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11840","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11840)"},{"Id":"467140653","IsPullRequest":false,"CreatedAt":"2019-07-11T22:45:34","Actor":"queen-of-code","Number":"11842","RawContent":null,"Title":"Incompat with dotnet test settings files and solution usage","State":"open","Body":"While testing out the new XPlat Code Coverage functionality in dotnet test via the collectors, I've run into a significant blocking bug in our workflow. We always run tests off a solution file, and generally speaking this works well in our scenarios - and it is several orders of magnitudes faster than attempting to run each test csproj serially.\r\n\r\nHowever, I've noticed that you cannot use a runsettings file and also use a sln file. It appears that, when you specify something like ` dotnet test --settings coverlet.runsettings tests.sln` it expects that the runsettings file lives in the test csproj folder, and not in the folder from which I kicked off the tests (the root, where the sln lives). \r\n\r\nNow, I'm lucky enough that some of my unit tests all live in a flat-enough folder structure that I can at least partially work around, but I'm sure not everyone is in that case. \r\n\r\n## Steps to reproduce\r\nFolder structure:\r\n -- tests.sln\r\n -- coverlet.runsettings\r\n   -- tests\\UnitTestA\\UnitTestA.csproj\r\n   -- tests\\UnitTestB\\UnitTestB.csproj\r\n\r\n`dotnet test --settings coverlet.runsettings tests.sln`\r\n   \r\n\r\n## Expected  behavior\r\nAll tests in csprojs are executed using the runsettings file from the root, that lives next to the sln\r\n\r\n## Actual behavior\r\nA coverlet.runsettings file is expected to live sibling to every test csproj file!\r\n\r\nIn my example, our workaround is `dotnet test --settings ..\\..\\coverlet.runsettings tests.sln`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\n>Runtime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\n>Host (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n>.NET Core SDKs installed:\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n>.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n>To install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11842","RelatedDescription":"Open issue \"Incompat with dotnet test settings files and solution usage\" (#11842)"},{"Id":"466536790","IsPullRequest":true,"CreatedAt":"2019-07-11T20:42:15","Actor":"jcagme","Number":"11826","RawContent":null,"Title":"Copy sources from Versions.props to NuGet.config","State":"closed","Body":"**TL;DR**\r\n\r\nWe need that all restore sources are located in `NuGet.config` since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/cli/pull/11826","RelatedDescription":"Closed or merged PR \"Copy sources from Versions.props to NuGet.config\" (#11826)"},{"Id":"467075263","IsPullRequest":true,"CreatedAt":"2019-07-11T20:24:17","Actor":"dotnet-maestro[bot]","Number":"11838","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.06\r\n- **Date Produced**: 7/11/2019 7:48 PM\r\n- **Commit**: b50ae399995d55d43504d7bdfc54dd0274b326d4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11838","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11838)"},{"Id":"467085070","IsPullRequest":true,"CreatedAt":"2019-07-11T20:13:41","Actor":"dotnet-bot","Number":"11839","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11839","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11839)"},{"Id":"467002571","IsPullRequest":true,"CreatedAt":"2019-07-11T19:02:01","Actor":"dotnet-maestro[bot]","Number":"11836","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.04\r\n- **Date Produced**: 7/11/2019 4:45 PM\r\n- **Commit**: 3ca720b8a2dc8f711a4762729d5c6a223ecc523a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-04\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-04\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-04\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11836","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11836)"},{"Id":"466852261","IsPullRequest":true,"CreatedAt":"2019-07-11T18:29:24","Actor":"dotnet-maestro[bot]","Number":"11832","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190710.3\r\n- **Date Produced**: 7/10/2019 9:21 PM\r\n- **Commit**: 81bb928af7d407cd4d53501b7d23cd3eec6bbdf6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19360.3\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11832","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11832)"},{"Id":"467028864","IsPullRequest":false,"CreatedAt":"2019-07-11T17:56:07","Actor":"rjmholt","Number":"11837","RawContent":null,"Title":"dotnet-sdk snap alias to 'dotnet'","State":"open","Body":"I just installed the dotnet-sdk snap and was a bit confused:\r\n\r\n```\r\n> sudo snap install --classic dotnet-sdk\r\ndotnet-sdk 2.2.301 from Microsoft .NET Core (dotnetcore✔️) installed\r\n> dotnet\r\n\r\nCommand 'dotnet' not found, but it can be installed with:\r\n\r\nsudo snap install dotnet-sdk\r\n\r\n> dotnet-sdk\r\ndotnet-sdk: command not found\r\n> echo $PATH\r\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/games:/usr/local/games:/snap/bin\r\n> ls /snap/bin\r\ndotnet-sdk.dotnet\r\n> dotnet-sdk.dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\n# Etc\r\n```\r\n\r\nApparently it's possible to [request aliases](https://forum.snapcraft.io/t/commands-and-aliases/3950) in snap. Ideally `dotnet` would be a snap alias for `dotnet-sdk.dotnet`.","Url":"https://github.com/dotnet/cli/issues/11837","RelatedDescription":"Open issue \"dotnet-sdk snap alias to 'dotnet'\" (#11837)"},{"Id":"466982364","IsPullRequest":true,"CreatedAt":"2019-07-11T16:50:32","Actor":"dotnet-maestro[bot]","Number":"11835","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.03\r\n- **Date Produced**: 7/11/2019 4:05 PM\r\n- **Commit**: 3ca720b8a2dc8f711a4762729d5c6a223ecc523a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11835","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11835)"},{"Id":"466929743","IsPullRequest":true,"CreatedAt":"2019-07-11T15:17:13","Actor":"dotnet-maestro[bot]","Number":"11834","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.02\r\n- **Date Produced**: 7/11/2019 2:31 PM\r\n- **Commit**: bcbc3aac1c347aa7a61088e692227d022a0d7d55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-02\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-02\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-02\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11834","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11834)"},{"Id":"466852049","IsPullRequest":true,"CreatedAt":"2019-07-11T12:36:24","Actor":"dotnet-maestro[bot]","Number":"11831","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11831","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11831)"},{"Id":"466854975","IsPullRequest":true,"CreatedAt":"2019-07-11T12:12:46","Actor":"dotnet-maestro[bot]","Number":"11833","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190710.2\r\n- **Date Produced**: 7/10/2019 9:47 PM\r\n- **Commit**: 4accedbb77a11eb852bbea9d1a825d7152170e2c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19360.2\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11833","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#11833)"},{"Id":"466709018","IsPullRequest":true,"CreatedAt":"2019-07-11T09:10:47","Actor":"dotnet-maestro[bot]","Number":"11830","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190711.01\r\n- **Date Produced**: 7/11/2019 8:40 AM\r\n- **Commit**: 85dba54a1c451c736ef4861d112337cdfd95b890\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27911-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27911-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27911-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11830","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11830)"},{"Id":"466654648","IsPullRequest":true,"CreatedAt":"2019-07-11T05:08:00","Actor":"dotnet-maestro[bot]","Number":"11829","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.11\r\n- **Date Produced**: 7/11/2019 4:22 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11829","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11829)"},{"Id":"466618963","IsPullRequest":true,"CreatedAt":"2019-07-11T04:19:31","Actor":"dotnet-maestro[bot]","Number":"11828","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 3:48 AM\r\n- **Commit**: d6f8dd9f1f304a28faf3a4f064fee0e45710f6b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27910-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27910-10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11828","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11828)"},{"Id":"466547752","IsPullRequest":false,"CreatedAt":"2019-07-10T22:10:39","Actor":"dseefeld","Number":"11827","RawContent":null,"Title":"Condition out NETStandard.Library.NETFramework for source-build","State":"open","Body":"NETStandard.Library.NETFramework is identified as a prebuilt in source-build.  This package is needed for building apps for net4x which use a netstandard libaray.  These should not be included in source-build and an error should be produced if this condition occurs.\r\n\r\nChanges to make:\r\n\r\n1.\tStop restoring the package during source builds\r\n2.\tIf the targets hit a case where these would be used, but they are not present, emit a clear error.\r\n","Url":"https://github.com/dotnet/cli/issues/11827","RelatedDescription":"Open issue \"Condition out NETStandard.Library.NETFramework for source-build\" (#11827)"},{"Id":"466444927","IsPullRequest":true,"CreatedAt":"2019-07-10T20:55:16","Actor":"peterhuene","Number":"11820","RawContent":null,"Title":"Update branding to 2.2.302.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11820","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.302.\" (#11820)"},{"Id":"466444403","IsPullRequest":true,"CreatedAt":"2019-07-10T20:55:01","Actor":"peterhuene","Number":"11819","RawContent":null,"Title":"Update branding to 2.2.206.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11819","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.206.\" (#11819)"},{"Id":"466443881","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:50","Actor":"peterhuene","Number":"11818","RawContent":null,"Title":"Update branding to 2.2.109.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11818","RelatedDescription":"Closed or merged PR \"Update branding to 2.2.109.\" (#11818)"},{"Id":"466508130","IsPullRequest":true,"CreatedAt":"2019-07-10T20:38:04","Actor":"dotnet-bot","Number":"11825","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11825","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11825)"},{"Id":"466508071","IsPullRequest":true,"CreatedAt":"2019-07-10T20:37:53","Actor":"dotnet-bot","Number":"11824","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11824","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11824)"},{"Id":"466489999","IsPullRequest":false,"CreatedAt":"2019-07-10T19:56:46","Actor":"genifycom","Number":"11822","RawContent":null,"Title":"dotnet publish gets access denied in only in release mode","State":"open","Body":"## Steps to reproduce\r\ndotnet publish works for -c Debug but gets ACCESS DENIED generating DLL for -c Release\r\n\r\n## Expected  behavior\r\nBuild would work for either configuration\r\n\r\n## Actual behavior\r\n-c Debug works but -c Release does not\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nPublish with -c Release fails with:\r\n... publish: C:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(4194,5): error MSB3021: Unable to copy file \"obj\\Release\\netcoreapp2.1\\Test.dll\" to \"bin\\Release\\netcoreapp2.1\\Test.dll\". Access to the path 'C:\\Dev\\Test\\bin\\Release\\netcoreapp2.1\\Test.dll' is denied. [C:\\Dev\\Test\\Test.csproj]\r\n\r\nTracing with Process Monitor shows the the same PID for dotnet.exe opens the output DLL and then opens it again and gets ACCESS DENIED\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11822","RelatedDescription":"Open issue \"dotnet publish gets access denied in only in release mode\" (#11822)"},{"Id":"466447813","IsPullRequest":true,"CreatedAt":"2019-07-10T19:01:46","Actor":"dotnet-maestro[bot]","Number":"11821","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 6:10 PM\r\n- **Commit**: d061d0d95b10aa4e6b5511e8e85cb0bbe5c06fd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11821","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11821)"},{"Id":"466438626","IsPullRequest":true,"CreatedAt":"2019-07-10T19:00:19","Actor":"peterhuene","Number":"11817","RawContent":null,"Title":"Merge release/2.2.3xx to release/2.2.4xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11817","RelatedDescription":"Closed or merged PR \"Merge release/2.2.3xx to release/2.2.4xx\" (#11817)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"466629123","IsPullRequest":false,"CreatedAt":"2019-07-11T23:32:56","Actor":"terrajobst","Number":"1330","RawContent":null,"Title":"Clarify .NET Standard 2.1 platform support","State":"closed","Body":"The current .NET Standard 2.1 platform support [is listed](https://github.com/dotnet/standard/blob/master/docs/versions.md) as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard @rowanmiller ","Url":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Closed issue \"Clarify .NET Standard 2.1 platform support\" (#1330)"},{"Id":"466944957","IsPullRequest":true,"CreatedAt":"2019-07-11T23:29:25","Actor":"akoeplinger","Number":"1333","RawContent":null,"Title":"Update Xamarin versions for NS2.1 support","State":"closed","Body":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?","Url":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Closed or merged PR \"Update Xamarin versions for NS2.1 support\" (#1333)"},{"Id":"466574515","IsPullRequest":true,"CreatedAt":"2019-07-11T17:42:06","Actor":"wtgodbe","Number":"1329","RawContent":null,"Title":"Add RefEmit nullability annotations to baseline","State":"closed","Body":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c","Url":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Closed or merged PR \"Add RefEmit nullability annotations to baseline\" (#1329)"},{"Id":"466956795","IsPullRequest":false,"CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Number":"1334","RawContent":null,"Title":"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll ","State":"open","Body":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?","Url":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Open issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334)"},{"Id":"466870629","IsPullRequest":true,"CreatedAt":"2019-07-11T12:55:38","Actor":"dotnet-maestro[bot]","Number":"1332","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 5:40 AM\r\n- **Commit**: e75dd151c9e5aa94cf33c7c9d14a53180df747dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1332","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1332)"},{"Id":"466851318","IsPullRequest":true,"CreatedAt":"2019-07-11T12:14:41","Actor":"dotnet-maestro[bot]","Number":"1331","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1331","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1331)"},{"Id":"466524102","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:52","Actor":"riarenas","Number":"1327","RawContent":null,"Title":"Add feeds from Versions.props to NuGet.config","State":"closed","Body":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Closed or merged PR \"Add feeds from Versions.props to NuGet.config\" (#1327)"},{"Id":"466572937","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:43","Actor":"wtgodbe","Number":"1328","RawContent":null,"Title":" Remove myget dotnet-core feed from restore sources in Versions.props","State":"closed","Body":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas ","Url":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Closed or merged PR \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328)"},{"Id":"466519567","IsPullRequest":true,"CreatedAt":"2019-07-10T21:03:21","Actor":"terrajobst","Number":"1326","RawContent":null,"Title":"Expose AesCcm and AesGcm","State":"open","Body":"Fixes #1295.\r\n\r\n/cc @alecgn","Url":"https://github.com/dotnet/standard/pull/1326","RelatedDescription":"Open PR \"Expose AesCcm and AesGcm\" (#1326)"},{"Id":"463893429","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:58","Actor":"terrajobst","Number":"1308","RawContent":null,"Title":"Expose new event counters","State":"closed","Body":"As requested offline:\r\n\r\n> While the EventCounter API is a part of .NET Standard 2.1 (and was present in .NET Standard 2.0), the new variants of the EventCounter class (PollingCounter, IncrementingEventCounter, and IncrementingPollingCounter) that were introduced in https://github.com/dotnet/corefx/issues/36129 are all not a part of .NET Standard 2.1.\r\n\r\nThis PR closes that gap.\r\n\r\n/cc @JamesNK @tommcdon @noahfalk @sywhang @shirhatti @JunTaoLuo","Url":"https://github.com/dotnet/standard/pull/1308","RelatedDescription":"Closed or merged PR \"Expose new event counters\" (#1308)"},{"Id":"465994202","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:41","Actor":"akeeton","Number":"1323","RawContent":null,"Title":"Fix \"compat shim\" link in FAQ","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1323","RelatedDescription":"Closed or merged PR \"Fix \"compat shim\" link in FAQ\" (#1323)"},{"Id":"466292622","IsPullRequest":true,"CreatedAt":"2019-07-10T13:04:35","Actor":"dotnet-maestro[bot]","Number":"1325","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:55 AM\r\n- **Commit**: dcf1c8f51bcdbd79e08cc672e327d50612690a25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1325)"},{"Id":"466269735","IsPullRequest":true,"CreatedAt":"2019-07-10T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1324","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1324","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1324)"},{"Id":"465762776","IsPullRequest":true,"CreatedAt":"2019-07-09T13:00:52","Actor":"dotnet-maestro[bot]","Number":"1322","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190708.6\r\n- **Date Produced**: 7/9/2019 4:54 AM\r\n- **Commit**: bfa7b12fb8a3424e4bc5c6e553d9999bb605d397\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19358.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19358.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19358.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1322","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1322)"},{"Id":"465741988","IsPullRequest":true,"CreatedAt":"2019-07-09T12:14:15","Actor":"dotnet-maestro[bot]","Number":"1321","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.1\r\n- **Date Produced**: 7/9/2019 7:41 AM\r\n- **Commit**: ef3834feb8615429a58808cdcf9ad9284d767654\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19359.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1321","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1321)"},{"Id":"465242195","IsPullRequest":true,"CreatedAt":"2019-07-08T13:05:38","Actor":"dotnet-maestro[bot]","Number":"1320","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190707.5\r\n- **Date Produced**: 7/8/2019 4:45 AM\r\n- **Commit**: 3b426f78a3aab1a45f797ac22e70fd203165d810\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19357.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19357.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19357.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1320","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1320)"},{"Id":"465219152","IsPullRequest":true,"CreatedAt":"2019-07-08T12:14:22","Actor":"dotnet-maestro[bot]","Number":"1319","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190708.1\r\n- **Date Produced**: 7/8/2019 7:34 AM\r\n- **Commit**: 4953cdf6c956adf69a0050c4df503048aed6b271\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19358.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19358.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1319","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1319)"},{"Id":"464949613","IsPullRequest":true,"CreatedAt":"2019-07-07T13:01:58","Actor":"dotnet-maestro[bot]","Number":"1318","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190706.5\r\n- **Date Produced**: 7/7/2019 1:21 AM\r\n- **Commit**: 15abdfc3816352c64098735b79a98dd97524ee36\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19356.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19356.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19356.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1318","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1318)"},{"Id":"464945513","IsPullRequest":true,"CreatedAt":"2019-07-07T12:14:11","Actor":"dotnet-maestro[bot]","Number":"1317","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190706.1\r\n- **Date Produced**: 7/6/2019 12:53 PM\r\n- **Commit**: a65d0966dc28861394ce78cfdcb9d5dff370957c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19356.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1317","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1317)"},{"Id":"464852128","IsPullRequest":true,"CreatedAt":"2019-07-06T13:13:54","Actor":"dotnet-maestro[bot]","Number":"1316","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190705.7\r\n- **Date Produced**: 7/6/2019 4:27 AM\r\n- **Commit**: 6c6d68558aaccbd16de6e84cf7e59c0fb32b8273\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19355.7\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19355.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19355.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1316","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1316)"},{"Id":"464847928","IsPullRequest":true,"CreatedAt":"2019-07-06T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1315","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190705.2\r\n- **Date Produced**: 7/5/2019 11:56 PM\r\n- **Commit**: 3e0cbbc6fd6c6d45d7083ee0deb71cec7ea2d91f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19355.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1315","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1315)"},{"Id":"464628179","IsPullRequest":true,"CreatedAt":"2019-07-05T13:04:38","Actor":"dotnet-maestro[bot]","Number":"1314","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190704.4\r\n- **Date Produced**: 7/4/2019 7:32 PM\r\n- **Commit**: 477abf147d8860fae35f975fddafb2711ee42bd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19354.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19354.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19354.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1314","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1314)"},{"Id":"464608260","IsPullRequest":true,"CreatedAt":"2019-07-05T12:10:56","Actor":"dotnet-maestro[bot]","Number":"1313","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190704.2\r\n- **Date Produced**: 7/4/2019 10:42 PM\r\n- **Commit**: 30553c0de34454fb8da5229962501af65eb1233f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19354.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1313","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1313)"},{"Id":"464366313","IsPullRequest":false,"CreatedAt":"2019-07-04T18:29:29","Actor":"PKYADAV","Number":"1311","RawContent":null,"Title":"DataAnnotation Validation in Xamarin.Forms","State":"open","Body":"Hi Team, \r\n\r\nI have class library in .net Standard 2.0 with EntityFrameworkCore. I have created class with Custom DataAnnotation as below:\r\n\r\n**Model Definition**\r\n\r\n```C#\r\n    public class UserLogin : NotificationObject\r\n    {\r\n        [DbRequired]\r\n        [Display(Name = \"USER NAME\", Prompt = \"ENTER USER NAME\")]\r\n        public string User_Name\r\n        {\r\n            get { return GetValue(() => User_Name); }\r\n            set { SetValue(() => User_Name, value); }\r\n        }\r\n\r\n        [Display(Name = \"PASSWORD\", Prompt = \"ENTER PASSWORD\")]\r\n        [DataType(DataType.Password)]\r\n        [DbRequired]\r\n        public string User_Password\r\n        {\r\n            get { return GetValue(() => User_Password); }\r\n            set { SetValue(() => User_Password, value); }\r\n        }\r\n    }\r\n```\r\n\r\n**But this data annotation validation is working in Asp.Net Core and WPF. But we want to use the same in Xamarin.Forms for Android & iOS and UWP. Is it possible or any workaround? As I heard that in .net Standard you need write once and can be reuse in all other environment**","Url":"https://github.com/dotnet/standard/issues/1311","RelatedDescription":"Open issue \"DataAnnotation Validation in Xamarin.Forms\" (#1311)"},{"Id":"464253942","IsPullRequest":true,"CreatedAt":"2019-07-04T13:09:50","Actor":"dotnet-maestro[bot]","Number":"1310","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190703.8\r\n- **Date Produced**: 7/4/2019 2:48 AM\r\n- **Commit**: b21ca5fddd281f835de98dbe950405bcf9397ac4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19353.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19353.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1310","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1310)"},{"Id":"464230062","IsPullRequest":true,"CreatedAt":"2019-07-04T12:14:16","Actor":"dotnet-maestro[bot]","Number":"1309","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190703.19\r\n- **Date Produced**: 7/3/2019 10:58 PM\r\n- **Commit**: 733f8297b68dd824044a77d955e62305b9dc43d5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19353.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19353.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1309","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1309)"},{"Id":"463741391","IsPullRequest":true,"CreatedAt":"2019-07-03T13:14:16","Actor":"dotnet-maestro[bot]","Number":"1307","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190702.11\r\n- **Date Produced**: 7/3/2019 7:27 AM\r\n- **Commit**: 1162dfc1b5da79dc29f3d28935b4c96c9d38a743\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19352.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19352.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1307","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1307)"},{"Id":"463713258","IsPullRequest":true,"CreatedAt":"2019-07-03T12:14:13","Actor":"dotnet-maestro[bot]","Number":"1306","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1306","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1306)"},{"Id":"463393350","IsPullRequest":true,"CreatedAt":"2019-07-02T19:23:52","Actor":"wtgodbe","Number":"1305","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Cherry-pick of https://github.com/dotnet/standard/pull/1304 for preview7\r\n\r\nCC @roji @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1305","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1305)"},{"Id":"463388556","IsPullRequest":true,"CreatedAt":"2019-07-02T19:14:09","Actor":"roji","Number":"1304","RawContent":null,"Title":"Remove cancellation token from System.Data CloseAsync() methods","State":"closed","Body":"Leftover from #1283, mirrors https://github.com/dotnet/corefx/pull/39070","Url":"https://github.com/dotnet/standard/pull/1304","RelatedDescription":"Closed or merged PR \"Remove cancellation token from System.Data CloseAsync() methods\" (#1304)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"467215812","IsPullRequest":false,"CreatedAt":"2019-07-12T04:31:33","Actor":"foxjazz","Number":"39422","RawContent":null,"Title":"Behavior differences between fileInfo and reading length","State":"open","Body":"[RepoSteps](https://github.com/evetoolsblue/WritingShared)\r\nTested on Windows 10\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39422","RelatedDescription":"Open issue \"Behavior differences between fileInfo and reading length\" (#39422)"},{"Id":"467165256","IsPullRequest":true,"CreatedAt":"2019-07-12T02:24:18","Actor":"dotnet-maestro[bot]","Number":"39418","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190711.4\r\n- **Date Produced**: 7/11/2019 11:45 PM\r\n- **Commit**: 90cd813874b98b92a75f5f6f5e0ada5cc8e43a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19361.4\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/standard\" (#39418)"},{"Id":"467173894","IsPullRequest":true,"CreatedAt":"2019-07-12T01:42:51","Actor":"dotnet-maestro-bot","Number":"39419","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to rel-27912-00, rel-27912-00, respectively (release/uwp6.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39419","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to rel-27912-00, rel-27912-00, respectively (release/uwp6.2)\" (#39419)"},{"Id":"467179623","IsPullRequest":true,"CreatedAt":"2019-07-12T01:42:42","Actor":"stephentoub","Number":"39421","RawContent":null,"Title":"Add (disabled) test for dropping Http2ReadStream","State":"open","Body":"The test may need tweaking as we enable the functionality.\r\nhttps://github.com/dotnet/corefx/issues/39420","Url":"https://github.com/dotnet/corefx/pull/39421","RelatedDescription":"Open PR \"Add (disabled) test for dropping Http2ReadStream\" (#39421)"},{"Id":"467178075","IsPullRequest":false,"CreatedAt":"2019-07-12T01:35:57","Actor":"stephentoub","Number":"39420","RawContent":null,"Title":"Dropped HTTP/2 response / response streams remain rooted","State":"open","Body":"SocketHttpHandler's Http2ReadStream doesn't have a finalizer to handle the case where the caller drops the stream without disposing of it.  But even if it did, it wouldn't be called today, because the response stream remains rooted: Http2Connection maintains a strong table of all active Http2Stream instances, each of which has a strong reference to its HttpResponseMessage, which has a strong reference to the Http2ReadStream.","Url":"https://github.com/dotnet/corefx/issues/39420","RelatedDescription":"Open issue \"Dropped HTTP/2 response / response streams remain rooted\" (#39420)"},{"Id":"467120426","IsPullRequest":true,"CreatedAt":"2019-07-12T00:28:47","Actor":"stephentoub","Number":"39411","RawContent":null,"Title":"Remove GetWaiterTask allocation for display class","State":"closed","Body":"Using an async local function here that accesses its outer function's state is resulting in the compiler allocating a display class at the beginning of GetWaiterTask.\r\n\r\ncc: @geoffkizer, @davidsh, @eiriktsarpalis, @scalablecory ","Url":"https://github.com/dotnet/corefx/pull/39411","RelatedDescription":"Closed or merged PR \"Remove GetWaiterTask allocation for display class\" (#39411)"},{"Id":"467131458","IsPullRequest":true,"CreatedAt":"2019-07-12T00:28:10","Actor":"stephentoub","Number":"39414","RawContent":null,"Title":"Avoid loading resources for an SslStream exception never thrown","State":"closed","Body":"SslStream's cctor creates an ObjectDisposedException it uses as a sentinel, but this instance is never actually thrown.  As such, we don't need to pay to load resources for it.\r\n\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/39414","RelatedDescription":"Closed or merged PR \"Avoid loading resources for an SslStream exception never thrown\" (#39414)"},{"Id":"467163033","IsPullRequest":true,"CreatedAt":"2019-07-12T00:21:54","Actor":"steveharter","Number":"39417","RawContent":null,"Title":"Fix writer depth issue on large stream async","State":"open","Body":"Fixes an issue report by @pranavkm where serializing to a stream may end up truncated.\r\n\r\nA regression from a few days ago from https://github.com/dotnet/corefx/commit/98937e7f1d4882395722dedadcf57df23d0ea13f\r\n","Url":"https://github.com/dotnet/corefx/pull/39417","RelatedDescription":"Open PR \"Fix writer depth issue on large stream async\" (#39417)"},{"Id":"467073667","IsPullRequest":false,"CreatedAt":"2019-07-11T23:49:07","Actor":"Mrxx99","Number":"39405","RawContent":null,"Title":"WPF Keyboard InputBinding not working on non-english system language","State":"closed","Body":"When using Inputbindings in XAML with for a Keyboard shortcut, there is an System.ArgumentException that the requested value for [localized name of a keyboard key] was not found.\r\nEverything works fine if I change my system language to english.\r\n\r\nMinimum working example can be found here: https://github.com/Mrxx99/WpfCoreKeyboardTest\r\n\r\nReproduction Steps:\r\n1. Change your system language to something not english (in my case it was German)\r\n2. Use Inputbindings from a textbox (or use my example)\r\n3. Run application and click into the textbox\r\n--> Exception\r\n\r\nAdditional Info:\r\n.Net Core Version: 3.0.100-preview6-012264\r\nOS: Windows 10 64bit (1903)\r\nSelected OS Language: German\r\nIDE: Visual Studio 2019 16.6\r\n\r\nException Details:\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=Requested value 'BILDAUF' was not found.\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.Enum.TryParseByName(RuntimeType enumType, String originalValueString, ReadOnlySpan`1 value, Boolean ignoreCase, Boolean throwOnFailure, UInt64& result)\r\n   at System.Enum.TryParseInt32Enum(RuntimeType enumType, String originalValueString, ReadOnlySpan`1 value, Int32 minInclusive, Int32 maxInclusive, Boolean ignoreCase, Boolean throwOnFailure, TypeCode type, Int32& result)\r\n   at System.Enum.TryParse(Type enumType, String value, Boolean ignoreCase, Boolean throwOnFailure, Object& result)\r\n   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)\r\n   at System.Windows.Input.KeyConverter.GetKey(String keyToken, CultureInfo culture)\r\n   at System.Windows.Input.KeyConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object source)\r\n   at System.Windows.Input.KeyGestureConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object source)\r\n   at System.ComponentModel.TypeConverter.ConvertFromInvariantString(String text)\r\n   at System.Windows.Input.KeyGesture.CreateFromResourceStrings(String keyGestureToken, String keyDisplayString)\r\n   at System.Windows.Input.KeyGesture.AddGesturesFromResourceStrings(String keyGestures, String displayStrings, InputGestureCollection gestures)\r\n   at System.Windows.Input.ComponentCommands.LoadDefaultGestureFromResource(Byte commandId)\r\n   at System.Windows.Input.RoutedCommand.GetInputGestures()\r\n   at System.Windows.Input.RoutedCommand.get_InputGesturesInternal()\r\n   at System.Windows.Input.CommandBindingCollection.FindMatch(Object targetElement, InputEventArgs inputEventArgs)\r\n   at System.Windows.Input.CommandManager.TranslateInput(IInputElement targetElement, InputEventArgs inputEventArgs)\r\n   at System.Windows.UIElement.OnMouseDownThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.RouteItem.InvokeHandler(RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.EventRoute.InvokeHandlers(Object source, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at WpfCoreKeyboardTest.App.Main()\r\n```","Url":"https://github.com/dotnet/corefx/issues/39405","RelatedDescription":"Closed issue \"WPF Keyboard InputBinding not working on non-english system language\" (#39405)"},{"Id":"467152859","IsPullRequest":false,"CreatedAt":"2019-07-11T23:35:58","Actor":"pranavkm","Number":"39416","RawContent":null,"Title":"Add a JsonAttribute to allow null-value handling on a per-property basis","State":"open","Body":"The ask is for an attribute that does the equivalent of `JsonSerializerOptions.IgnoreNullValues` on a per property basis.","Url":"https://github.com/dotnet/corefx/issues/39416","RelatedDescription":"Open issue \"Add a JsonAttribute to allow null-value handling on a per-property basis\" (#39416)"},{"Id":"467031354","IsPullRequest":true,"CreatedAt":"2019-07-11T23:13:22","Actor":"ViktorHofer","Number":"39399","RawContent":null,"Title":"Remove RestoreSources from Tools.props","State":"closed","Body":"Related to https://github.com/dotnet/arcade/pull/3041","Url":"https://github.com/dotnet/corefx/pull/39399","RelatedDescription":"Closed or merged PR \"Remove RestoreSources from Tools.props\" (#39399)"},{"Id":"467133030","IsPullRequest":true,"CreatedAt":"2019-07-11T22:18:38","Actor":"steveharter","Number":"39415","RawContent":null,"Title":"Javascript encoder","State":"open","Body":"Replacement for PR https://github.com/dotnet/corefx/pull/38947 which was started by @ahsonkhan \r\n\r\nThis is the first phase of https://github.com/dotnet/corefx/issues/37192; additional phases will allow the custom encoders to be specified in writer and serializer options.\r\n\r\n- Update tests to have them succeed (match semantics of JavaScriptEncoder) and add new tests.\r\n- Change encoding of forward slash from \"u002f\" to \"\\/\" to match current semantics of JavaScriptEncoder. Note this will likely change soon to not escape at all per @GrabYourPitchforks.\r\n- Improved perf of ascii scenarios in JavaScriptEncoder from being 4x slower to ~25% slower (1.25x) than the implementation in System.Text.Json.\r\n- In order to prevent a regression of ~25% by default for ascii (when not specifying a custom encoder) the current code in System.Text.Json was kept. In addition, the code was modified to improve custom encoding scenarios by ~15%. If a non-ascii (latin) chacter >= 128 is used, then the default JavaScriptEncoder is used.","Url":"https://github.com/dotnet/corefx/pull/39415","RelatedDescription":"Open PR \"Javascript encoder\" (#39415)"},{"Id":"467131216","IsPullRequest":false,"CreatedAt":"2019-07-11T22:12:42","Actor":"pranavkm","Number":"39413","RawContent":null,"Title":"JsonSerailizer.SerializeAsync truncates Json output","State":"open","Body":"Repro steps\r\n\r\n1) Clone https://github.com/pranavkm/json-truncate\r\n2) Run the project\r\n\r\nExpected:\r\n\r\nThe results of `JsonSerializer.Serialize` and `JsonSerializer.SerializeAsync` should be identical.","Url":"https://github.com/dotnet/corefx/issues/39413","RelatedDescription":"Open issue \"JsonSerailizer.SerializeAsync truncates Json output\" (#39413)"},{"Id":"467125128","IsPullRequest":true,"CreatedAt":"2019-07-11T21:54:11","Actor":"bartonjs","Number":"39412","RawContent":null,"Title":"Update cross-platform-cryptography document","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39412","RelatedDescription":"Open PR \"Update cross-platform-cryptography document\" (#39412)"},{"Id":"467106665","IsPullRequest":false,"CreatedAt":"2019-07-11T21:06:21","Actor":"GrabYourPitchforks","Number":"39410","RawContent":null,"Title":"API proposal: Allow JavaScriptEncoder to have relaxed escaping rules","State":"open","Body":"There are a few outstanding work items (mostly being tracked by https://github.com/dotnet/corefx/issues/37192 and issues linked from there) where for particular scenarios it would be ideal for the JSON serializer to relax the default escaping restrictions a bit.\r\n\r\n## API Proposal\r\n\r\n```cs\r\nnamespace System.Text.Encoding.Web\r\n{\r\n    // EXISTING type\r\n    public class JavaScriptEncoder\r\n    {\r\n        // NEW overload of EXISTING method\r\n        public static JavaScriptEncoder Create(TextEncoderSettings settings, JavaScriptEscapingBehavior escapingBehavior);\r\n    }\r\n\r\n    // NEW type\r\n    public enum JavaScriptEscapingBehavior\r\n    {\r\n        Default, // same logic as used by JavaScriptEncoder.Default\r\n        RelaxedJsonEscaping // relaxed behaviors as described below\r\n    }\r\n}\r\n```\r\n\r\n## Existing behavior\r\n\r\nThe `JavaScriptEncoder` type currently has the following logic to determine what Unicode scalar values to escape.\r\n\r\n1. Take the bitmap provided via `Create(TextEncoderSettings)` , or create a new bitmap from `Create(UnicodeRange[])`. This bitmap lists all code points which are _candidates_ for the allow list. (This list will be further filtered.) If using `JavaScriptEncoder.Default`, it's the same as having called `Create(UnicodeRange.BasicLatin)`.\r\n\r\n2. Forbid all Unicode characters which aren't in the \"allowed categories\" list, including control characters, non-ASCII whitespace, and so on. The full list of allowed categories can be found at https://github.com/dotnet/corefx/blob/bd30a3f458b6b0f71204fc3630b2d29b780c4167/src/System.Text.Encodings.Web/tools/GenDefinedCharList/Program.cs#L154. By \"forbid\", I mean that if any of these characters exist in the bitmap provided by step (1) they're removed from the bitmap.\r\n\r\n3. Forbid all HTML-sensitive characters: `<`, `>`, `&`, etc. Forbid UTF-7 sensitive characters like `+`.\r\n\r\n4. Forbid all JavaScript string-sensitive characters and JSON-sensitive characters: `\"`, `\\`, etc. Single-quote and backtick are also captured by this for compatibility with ECMAScript.\r\n\r\n5. Additionally, when escaping certain characters like `\"`, the library emits `\\u0022` instead of `\\\"` to provide extra protection when contained within an HTML wrapper or other envelope where the `\"` character is itself an escape character.\r\n\r\n## New behavior\r\n\r\nIf the new enum value `RelaxedJsonEscaping` is provided, the behavior of each of the above lines changes as described below.\r\n\r\n3. HTML-sensitive characters like `<`, `>`, `&`, etc. aren't forbidden unless they're also JSON-sensitive. The `+` character isn't forbidden. Whether these characters are escaped is controlled entirely by the bitmap provided by step (1).\r\n\r\n4. Single-quote and backtick aren't forbidden. If they're allowed by the bitmap provided by step (1), they can pass through unescaped.\r\n\r\n5. When escaping `\"` and `'` (if not allowed), the library emits `\\\"` and `\\'` instead of `\\uXXXX`. No extra envelope protection is afforded.\r\n\r\n6. If the default escaper forbids characters like `″ (U+2033)` in a future release to protect against best-fit mapping attacks, the relaxed escaper may instead opt to allow these characters to come through unescaped.\r\n\r\n## Discussion\r\n\r\nConsumers will be able to opt in to this behavior. ASP.NET and the SDK (see https://github.com/dotnet/core-setup/issues/7137) will probably want to do so in certain cases. I recommend we maintain the aggressive behavior of `JavaScriptEncoder.Default` because it does provide defense-in-depth against vulnerabilities which are common in real-world applications. See my comment at https://github.com/dotnet/corefx/issues/38354#issuecomment-504780719 for more information.\r\n\r\nIf possible, I recommend that we give this enum value a name which conveys the full weight of \"Hey, you're disabling default protections. Please consider your entire scenario top-to-bottom and only proceed if you know for certain the protections afforded aren't applicable to your scenario.\" I believe that the majority of our developer audience won't understand the full consequences of flipping this switch, and I don't want to end up in a world where well-meaning developers inadvertently introduce vulnerabilities into their web applications.\r\n\r\nInternally, we can modify SDL to have a rule that goes something along the lines of \"The `JavaScriptEncoder` type is SDL-approved unless you have passed the `RelaxedJsonEscaping` enum value. All usages of this enum value must be reviewed to avoid introducing vulnerabilities.\"","Url":"https://github.com/dotnet/corefx/issues/39410","RelatedDescription":"Open issue \"API proposal: Allow JavaScriptEncoder to have relaxed escaping rules\" (#39410)"},{"Id":"467045228","IsPullRequest":true,"CreatedAt":"2019-07-11T20:41:15","Actor":"ViktorHofer","Number":"39403","RawContent":null,"Title":"Condition failing test on Nano","State":"closed","Body":"This test shouldn't run on Nano: https://dnceng.visualstudio.com/public/_build/results?buildId=260574&view=ms.vss-test-web.build-test-results-tab&runId=6972534&resultId=196737&paneView=debug","Url":"https://github.com/dotnet/corefx/pull/39403","RelatedDescription":"Closed or merged PR \"Condition failing test on Nano\" (#39403)"},{"Id":"467094651","IsPullRequest":true,"CreatedAt":"2019-07-11T20:37:19","Actor":"ViktorHofer","Number":"39409","RawContent":null,"Title":"Set sdk version in global.json","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/39336\r\n\r\nWe did not specify the SDK version in the global.json which would result in desktop msbuild picking the latest stable SDK and not actually the one that we depend on.\r\n\r\ncc @davidsh ","Url":"https://github.com/dotnet/corefx/pull/39409","RelatedDescription":"Open PR \"Set sdk version in global.json\" (#39409)"},{"Id":"467088226","IsPullRequest":false,"CreatedAt":"2019-07-11T20:21:24","Actor":"JeremyKuhne","Number":"39408","RawContent":null,"Title":"Make all Json converters public","State":"open","Body":"It is difficult to compose new converters based on in-box functionality. You're currently stuck creating an new `JsonSerializerOptions` and calling `GetConverter()` on it to get built-in converters. We should look at making our built-in converters public in the next release.\r\n\r\nSee:\r\nhttps://github.com/dotnet/corefx/issues/39307#issuecomment-510638290","Url":"https://github.com/dotnet/corefx/issues/39408","RelatedDescription":"Open issue \"Make all Json converters public\" (#39408)"},{"Id":"467079881","IsPullRequest":true,"CreatedAt":"2019-07-11T20:00:13","Actor":"buyaa-n","Number":"39407","RawContent":null,"Title":"Code coverage for JsonWriterHelper JsonWriter","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39407","RelatedDescription":"Open PR \"Code coverage for JsonWriterHelper JsonWriter\" (#39407)"},{"Id":"467074045","IsPullRequest":true,"CreatedAt":"2019-07-11T19:46:01","Actor":"vicrdguez","Number":"39406","RawContent":null,"Title":"Scientific notation numbers with decimal separators support","State":"open","Body":"Writing Scientific notation numbers with decimal separators and exponent throwed an exception.\r\nThe decimal separator and the exponent separator were condition exclusive in the number validation","Url":"https://github.com/dotnet/corefx/pull/39406","RelatedDescription":"Open PR \"Scientific notation numbers with decimal separators support\" (#39406)"},{"Id":"467073635","IsPullRequest":false,"CreatedAt":"2019-07-11T19:44:59","Actor":"Tratcher","Number":"39404","RawContent":null,"Title":"Bidirectional HTTP/2 streaming truncates the request body if the response ends","State":"open","Body":"RE: https://github.com/dotnet/corefx/issues/38559. There's also a functional issue where as soon as the client disposes the response stream no future request data frames are sent to the server. The server eventually times out and aborts the connection.\r\n\r\n@stephentoub @geoffkizer \r\n\r\nThis is happening with Microsoft.NETCore.App 3.0.0-preview8-27904-06.\r\n\r\nFlow:\r\n- Client sends headers, Expect 100-Continue\r\n- Server sends 100-Continue\r\n- Client sends first message \"Hello World\"\r\n- Server echos \"Hello World\" and completes the response (END_STREAM)\r\n- Client consumes the response and disposes the response stream.\r\n- Client sends final message \"Hello World\" and closes the request.\r\nBug: this message is never sent. Nor does the client send a RST or otherwise indicate it is done with the request. The server times out and aborts the whole connection.\r\nExpected: the client would send the last message and END_STREAM. Alternatively it must at least send a RST.\r\nWorkaround: Do not Dispose the response stream after the last write returns 0.\r\n\r\nSee the 6 second gap in the logs after sending the response END_STREAM.\r\n```\r\n[0.003s] [TestLifetime] [Information] Starting test BidirectionalStreamingMoreClientData-http at 2019-07-11T18:47:34\r\n[0.006s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting starting\r\n[0.009s] [Microsoft.Hosting.Lifetime] [Information] Now listening on: http://127.0.0.1:21567\r\n[0.009s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Debug] Loaded hosting startup assembly Interop.FunctionalTests\r\n[0.009s] [Microsoft.Hosting.Lifetime] [Information] Application started. Press Ctrl+C to shut down.\r\n[0.010s] [Microsoft.Hosting.Lifetime] [Information] Hosting environment: Production\r\n[0.010s] [Microsoft.Hosting.Lifetime] [Information] Content root path: D:\\github\\AspNetCore\\artifacts\\bin\\Interop.FunctionalTests\\Debug\\netcoreapp3.0\\\r\n[0.011s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting started\r\n[0.015s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLO660SITO23\" started.\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending SETTINGS frame for stream ID 0 with length 18 and flags NONE\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending WINDOW_UPDATE frame for stream ID 0 with length 4 and flags 0x0\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" received SETTINGS frame for stream ID 0 with length 12 and flags NONE\r\n[0.017s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending SETTINGS frame for stream ID 0 with length 0 and flags ACK\r\n[0.018s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" received WINDOW_UPDATE frame for stream ID 0 with length 4 and flags 0x0\r\n[0.018s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" received HEADERS frame for stream ID 1 with length 35 and flags END_HEADERS\r\n[0.018s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" received SETTINGS frame for stream ID 0 with length 0 and flags ACK\r\n[0.020s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 POST http://127.0.0.1:21567/  \r\n[0.020s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLO660SITO23\", Request id \"0HLO660SITO23:00000001\": started reading request body.\r\n[0.021s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending HEADERS frame for stream ID 1 with length 5 and flags END_HEADERS\r\n[0.023s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" received DATA frame for stream ID 1 with length 11 and flags NONE\r\n[0.023s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending HEADERS frame for stream ID 1 with length 53 and flags END_HEADERS\r\n[0.024s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending DATA frame for stream ID 1 with length 11 and flags NONE\r\n[0.024s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending DATA frame for stream ID 1 with length 0 and flags END_STREAM\r\n[6.017s] [Microsoft.AspNetCore.Server.Kestrel] [Information] Connection id \"0HLO660SITO23\", Request id \"null\": the request timed out because it was not sent by the client at a minimum of 240 bytes/second.\r\n[6.019s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLO660SITO23\" is closed. The last processed stream ID was 1.\r\n[6.020s] [Microsoft.AspNetCore.Server.Kestrel] [Verbose] Connection id \"0HLO660SITO23\" sending GOAWAY frame for stream ID 0 with length 8 and flags 0x0\r\n[6.022s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets] [Debug] Connection id \"0HLO660SITO23\" sending FIN because: \"Reading the request body timed out due to data arriving too slowly. See MinRequestBodyDataRate.\"\r\n[6.025s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished in 6005.1414ms 200 \r\n[6.026s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLO660SITO23\", Request id \"0HLO660SITO23:00000001\": done reading request body.\r\n[6.026s] [Microsoft.AspNetCore.Server.Kestrel] [Information] Connection id \"0HLO660SITO23\", Request id \"0HLO660SITO23:00000001\": the application completed without reading the entire request body.\r\n[6.026s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Some connections failed to close gracefully during server shutdown.\r\n[6.027s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] Connection id \"0HLO660SITO23\" stopped.\r\n[6.032s] [TestLifetime] [Information] Finished test BidirectionalStreamingMoreClientData-http in 6.028651399999999s\r\n```\r\n\r\n<details><summary>Test code:</summary>\r\n\r\n```\r\n        public async Task BidirectionalStreamingMoreClientData(string scheme)\r\n        {\r\n            var lastPacket = new TaskCompletionSource<string>(TaskCreationOptions.RunContinuationsAsynchronously);\r\n            var hostBuilder = new HostBuilder()\r\n                .ConfigureWebHost(webHostBuilder =>\r\n                {\r\n                    ConfigureKestrel(webHostBuilder, scheme);\r\n                    webHostBuilder.ConfigureServices(AddTestLogging)\r\n                    .Configure(app => app.Run(async context =>\r\n                    {\r\n                        var reader = context.Request.BodyReader;\r\n\r\n                        var readResult = await reader.ReadAsync();\r\n                        while (!readResult.IsCompleted && readResult.Buffer.Length < \"Hello World\".Length)\r\n                        {\r\n                            reader.AdvanceTo(readResult.Buffer.Start, readResult.Buffer.End);\r\n                            readResult = await reader.ReadAsync();\r\n                        }\r\n\r\n                        var sequence = readResult.Buffer.Slice(0, \"Hello World\".Length);\r\n                        Assert.True(sequence.IsSingleSegment);\r\n                        await context.Response.BodyWriter.WriteAsync(sequence.First);\r\n                        reader.AdvanceTo(sequence.End);\r\n                        await context.Features.Get<IHttpResponseCompletionFeature>().CompleteAsync();\r\n\r\n                        try\r\n                        {\r\n                            // The client sends one more packet after the server completes\r\n                            readResult = await reader.ReadAsync();\r\n                            while (!readResult.IsCompleted && readResult.Buffer.Length < \"Hello World\".Length)\r\n                            {\r\n                                reader.AdvanceTo(readResult.Buffer.Start, readResult.Buffer.End);\r\n                                readResult = await reader.ReadAsync();\r\n                            }\r\n\r\n                            Assert.True(readResult.Buffer.IsSingleSegment);\r\n                            var result = Encoding.UTF8.GetString(readResult.Buffer.FirstSpan);\r\n                            reader.AdvanceTo(readResult.Buffer.End);\r\n\r\n                            var finalResult = await reader.ReadAsync();\r\n                            Assert.True(finalResult.IsCompleted && finalResult.Buffer.Length == 0);\r\n                            lastPacket.SetResult(result);\r\n                        }\r\n                        catch (Exception ex)\r\n                        {\r\n                            lastPacket.SetException(ex);\r\n                        }\r\n                    }));\r\n                });\r\n            using var host = await hostBuilder.StartAsync();\r\n\r\n            var url = $\"{scheme}://127.0.0.1:{host.GetPort().ToString(CultureInfo.InvariantCulture)}/\";\r\n\r\n            using var client = CreateClient();\r\n            client.DefaultRequestHeaders.ExpectContinue = true;\r\n\r\n            var streamingContent = new StreamingContent();\r\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\r\n            {\r\n                Version = HttpVersion.Version20,\r\n                Content = streamingContent,\r\n            };\r\n            var responseTask = client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).DefaultTimeout();\r\n            // The server doesn't respond until we send the first set of data\r\n            await streamingContent.SendAsync(\"Hello World\").DefaultTimeout();\r\n            var response = await responseTask;\r\n\r\n            Assert.Equal(HttpVersion.Version20, response.Version);\r\n            var stream = await response.Content.ReadAsStreamAsync();\r\n            var responseBuffer = new byte[\"Hello World\".Length];\r\n\r\n            var read = await stream.ReadAsync(responseBuffer, 0, responseBuffer.Length).DefaultTimeout();\r\n            Assert.Equal(responseBuffer.Length, read);\r\n            Assert.Equal(\"Hello World\", Encoding.UTF8.GetString(responseBuffer));\r\n\r\n            read = await stream.ReadAsync(responseBuffer, 0, responseBuffer.Length).DefaultTimeout();\r\n            Assert.Equal(0, read);\r\n            stream.Dispose();\r\n\r\n            // Send one more message after the server has finished.\r\n            await streamingContent.SendAsync(\"Hello World\").DefaultTimeout();\r\n            streamingContent.Complete();\r\n\r\n            var lastData = await lastPacket.Task.DefaultTimeout();\r\n            Assert.Equal(\"Hello World\", lastData);\r\n\r\n            await host.StopAsync();\r\n        }\r\n\r\n        private class StreamingContent : HttpContent\r\n        {\r\n            private TaskCompletionSource<int> _sendStarted = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);\r\n            private Func<string, Task> _sendContent;\r\n            private TaskCompletionSource<int> _sendComplete;\r\n\r\n            public StreamingContent()\r\n            {\r\n            }\r\n\r\n            public async Task SendAsync(string text)\r\n            {\r\n                await _sendStarted.Task;\r\n                await _sendContent(text);\r\n            }\r\n\r\n            public void Complete()\r\n            {\r\n                if (_sendComplete == null)\r\n                {\r\n                    throw new InvalidOperationException(\"Sending hasn't started yet.\");\r\n                }\r\n                _sendComplete.TrySetResult(0);\r\n            }\r\n\r\n            protected override Task SerializeToStreamAsync(Stream stream, TransportContext context)\r\n            {\r\n                _sendComplete = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);\r\n                _sendContent = async text =>\r\n                {\r\n                    try\r\n                    {\r\n                        var bytes = Encoding.UTF8.GetBytes(text);\r\n                        await stream.WriteAsync(bytes);\r\n                    }\r\n                    catch (Exception ex)\r\n                    {\r\n                        _sendComplete.TrySetException(ex);\r\n                    }\r\n                };\r\n                _sendStarted.SetResult(0);\r\n                return _sendComplete.Task;\r\n            }\r\n\r\n            protected override bool TryComputeLength(out long length)\r\n            {\r\n                length = 0;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        private static HttpClient CreateClient()\r\n        {\r\n            var handler = new HttpClientHandler();\r\n            handler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;\r\n            var client = new HttpClient(handler);\r\n            client.DefaultRequestVersion = HttpVersion.Version20;\r\n            return client;\r\n        }\r\n\r\n        private static void ConfigureKestrel(IWebHostBuilder webHostBuilder, string scheme)\r\n        {\r\n            webHostBuilder.UseKestrel(options =>\r\n            {\r\n                options.Listen(IPAddress.Loopback, 0, listenOptions =>\r\n                {\r\n                    listenOptions.Protocols = HttpProtocols.Http2;\r\n                    if (scheme == \"https\")\r\n                    {\r\n                        listenOptions.UseHttps(TestResources.GetTestCertificate());\r\n                    }\r\n                });\r\n            });\r\n        }\r\n```\r\n</details>\r\n","Url":"https://github.com/dotnet/corefx/issues/39404","RelatedDescription":"Open issue \"Bidirectional HTTP/2 streaming truncates the request body if the response ends\" (#39404)"},{"Id":"467041746","IsPullRequest":false,"CreatedAt":"2019-07-11T19:37:09","Actor":"ViktorHofer","Number":"39401","RawContent":null,"Title":"Several network tests fail on Debian 10 with authentication error","State":"closed","Body":"We want to get down to zero test failures on rolling builds for 3.0. Looking at the rolling builds results we currently have 64 test failures. Most of them are authentication errors on Debian 10.\r\n\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=260574&view=ms.vss-test-web.build-test-results-tab\r\n\r\ncc @wfurt @davidsh @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/39401","RelatedDescription":"Closed issue \"Several network tests fail on Debian 10 with authentication error\" (#39401)"},{"Id":"467044499","IsPullRequest":true,"CreatedAt":"2019-07-11T18:36:07","Actor":"Dotnet-GitSync-Bot","Number":"39402","RawContent":null,"Title":"Mirror changes from dotnet/corert,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/39402","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,coreclr\" (#39402)"},{"Id":"466984377","IsPullRequest":false,"CreatedAt":"2019-07-11T18:34:13","Actor":"MichalStrehovsky","Number":"39394","RawContent":null,"Title":"System.Native not compatible with macOS 10.12","State":"closed","Body":"System.Native references the utimensat API that was only introduced in macOS 10.13.\r\n\r\nhttps://github.com/dotnet/BenchmarkDotNet/issues/1195#issuecomment-510549672\r\n\r\nThere's also:\r\n\r\n```\r\n         _SystemNative_SysLog in System.Native.a(pal_process.c.o)\r\n     \"_syslog$DARWIN_EXTSN\", referenced from:\r\n```\r\n\r\nWhich is probably in the same bucket.\r\n\r\nNote that this was found in CoreRT, but I don't have a reason to doubt this is a problem for CoreCLR as well.","Url":"https://github.com/dotnet/corefx/issues/39394","RelatedDescription":"Closed issue \"System.Native not compatible with macOS 10.12\" (#39394)"},{"Id":"467010755","IsPullRequest":true,"CreatedAt":"2019-07-11T18:28:43","Actor":"Dotnet-GitSync-Bot","Number":"39396","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/39396","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#39396)"},{"Id":"467039024","IsPullRequest":true,"CreatedAt":"2019-07-11T18:20:43","Actor":"eiriktsarpalis","Number":"39400","RawContent":null,"Title":"Http2Connection: Wrap InvalidOperationExceptions","State":"open","Body":"To achieve parity with the v1.1 implementation. Fixes #39295.\r\n\r\nAlso added a couple of functional tests that validate the behaviour.","Url":"https://github.com/dotnet/corefx/pull/39400","RelatedDescription":"Open PR \"Http2Connection: Wrap InvalidOperationExceptions\" (#39400)"},{"Id":"467024947","IsPullRequest":true,"CreatedAt":"2019-07-11T17:46:33","Actor":"Anipik","Number":"39398","RawContent":null,"Title":"Added client operation for get query with parameters","State":"open","Body":"GetQueryWithParameters:- \r\n- the first parameter is always of the maxContentLength. The reason behind this that http2 was failing sometimes when the length of the content is around 8000 and http 1.1 was stable for that. i will create an issue and post the call stack there.\r\n- The number of parameters can be between 0 and 100 .\r\n","Url":"https://github.com/dotnet/corefx/pull/39398","RelatedDescription":"Open PR \"Added client operation for get query with parameters\" (#39398)"},{"Id":"467014035","IsPullRequest":false,"CreatedAt":"2019-07-11T17:19:02","Actor":"buyaa-n","Number":"39397","RawContent":null,"Title":"JsonElement.WriteValue(writer) writing wrong characters for invalid surrogate pairs","State":"open","Body":"I assume it should throw for invalid surrogates, so wrote the tests throwing ArgumentException. \r\nWhatever i believe that it souldn't write unexpected values. For both tests the written values were `\"\\\\ufffd\\\\ufffd\\\\ufffd\"` instead of `\"\\\\udc00\\\\ud800\\\\ud803\"` or throwing\r\n```csharp\r\n[Fact]\r\npublic static void WriteValueSequenceWithInvalidSurrogatesShouldThrow2()\r\n{\r\n    char[] chars = new char[] { '[', '\"', (char)0xDC00, (char)0xD800, (char)0xD803, '\"', ']' };\r\n    var buffer = new ArrayBufferWriter<byte>(128);\r\n    byte[] temp = Encoding.UTF8.GetBytes(chars);\r\n    ReadOnlySequence<byte> sequence = JsonTestHelper.GetSequence(temp, 1);\r\n\r\n    using (JsonDocument doc = JsonDocument.Parse(sequence, s_options))\r\n    {\r\n        JsonElement target = doc.RootElement[0];\r\n        var writer = new Utf8JsonWriter(buffer);\r\n\r\n        Assert.Throws<ArgumentException>(() => target.WriteValue(writer));\r\n    }\r\n}\r\n\r\n[Fact]\r\npublic static void WriteValueBytesWithInvalidSurrogatesShouldThrow()\r\n{\r\n    char[] chars = new char[] { '[', '\"', (char)0xDC00, (char)0xD800, (char)0xD803, '\"', ']' };\r\n    var buffer = new ArrayBufferWriter<byte>(128);\r\n    byte[] temp = Encoding.UTF8.GetBytes(chars);\r\n\r\n    using (JsonDocument doc = JsonDocument.Parse(temp, s_options))\r\n    {\r\n        JsonElement target = doc.RootElement[0];\r\n        var writer = new Utf8JsonWriter(buffer);\r\n        target.WriteValue(writer);\r\n\r\n        Assert.Throws<ArgumentException>(() => target.WriteValue(writer));\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/39397","RelatedDescription":"Open issue \"JsonElement.WriteValue(writer) writing wrong characters for invalid surrogate pairs\" (#39397)"},{"Id":"467005538","IsPullRequest":true,"CreatedAt":"2019-07-11T16:57:58","Actor":"safern","Number":"39395","RawContent":null,"Title":"Add tests for nullable metadata and unconditionally set nullablePublicOnly","State":"open","Body":"This consumes the new compiler which now only emits the `NullablePublicOnlyAttribute` into the module only if it is actually needed and I also added tests to make sure the facades doesn't have any type definitions nor this attribute, plus tests to make sure that internal APIs doesn't get nullable attributes.\r\n\r\nFixes: #39175 \r\n\r\ncc: @stephentoub @ericstj @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/39395","RelatedDescription":"Open PR \"Add tests for nullable metadata and unconditionally set nullablePublicOnly\" (#39395)"},{"Id":"466979425","IsPullRequest":false,"CreatedAt":"2019-07-11T16:00:00","Actor":"cston","Number":"39393","RawContent":null,"Title":"Allow for some variance in Microsoft.VisualBasic.Tests.FinancialTests","State":"open","Body":"See https://github.com/dotnet/corefx/pull/39391/files#r302621690","Url":"https://github.com/dotnet/corefx/issues/39393","RelatedDescription":"Open issue \"Allow for some variance in Microsoft.VisualBasic.Tests.FinancialTests\" (#39393)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"467200113","IsPullRequest":true,"CreatedAt":"2019-07-12T04:47:00","Actor":"RikkiGibson","Number":"37186","RawContent":null,"Title":"Full-ngen ResultProvider","State":"closed","Body":"Working around an optprof issue. The assembly seems to be just 150kb in size so it feels like we should be able to get away with a full ngen.","Url":"https://github.com/dotnet/roslyn/pull/37186","RelatedDescription":"Closed or merged PR \"Full-ngen ResultProvider\" (#37186)"},{"Id":"467173998","IsPullRequest":false,"CreatedAt":"2019-07-12T01:17:40","Actor":"jasonmalinowski","Number":"37185","RawContent":null,"Title":"Class view / object browser doesn't show ? for nullable annotated types","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/37185","RelatedDescription":"Open issue \"Class view / object browser doesn't show ? for nullable annotated types\" (#37185)"},{"Id":"467173397","IsPullRequest":false,"CreatedAt":"2019-07-12T01:15:02","Actor":"jasonmalinowski","Number":"37184","RawContent":null,"Title":"Navigate to decompiled source doesn't handle nullable attributes","State":"open","Body":"We'll need to update to a newer ILSpy library.","Url":"https://github.com/dotnet/roslyn/issues/37184","RelatedDescription":"Open issue \"Navigate to decompiled source doesn't handle nullable attributes\" (#37184)"},{"Id":"467173047","IsPullRequest":false,"CreatedAt":"2019-07-12T01:13:25","Actor":"jasonmalinowski","Number":"37183","RawContent":null,"Title":"Navigation bars should show nullable annotations","State":"open","Body":"Navigation bars don't show nullable annotations when showing method signatures. This is actually kinda useful if you're in a method since it shows you your signature if it's scrolled off the screen.","Url":"https://github.com/dotnet/roslyn/issues/37183","RelatedDescription":"Open issue \"Navigation bars should show nullable annotations\" (#37183)"},{"Id":"467172230","IsPullRequest":false,"CreatedAt":"2019-07-12T01:09:22","Actor":"jasonmalinowski","Number":"37182","RawContent":null,"Title":"Convert to full property loses nullability","State":"open","Body":"If you write:\r\n\r\n```\r\nstring? S { get; set; }\r\n```\r\n\r\nand try converting this to a full property, the backing field loses the ?.","Url":"https://github.com/dotnet/roslyn/issues/37182","RelatedDescription":"Open issue \"Convert to full property loses nullability\" (#37182)"},{"Id":"467171328","IsPullRequest":false,"CreatedAt":"2019-07-12T01:04:33","Actor":"jasonmalinowski","Number":"37181","RawContent":null,"Title":"Convert Get/Set to properties doesn't handle differing nullabilities well","State":"open","Body":"Consider a case like:\r\n\r\n```\r\n        public string? GetFoo() { return \"\"; }\r\n        public void SetFoo(string s) { }\r\n\r\n```\r\n\r\nWe suggest to convert this to a property of type string?, which loses the fact that SetFoo can't take nulls. If you reverse this and have SetFoo take the null we also throw that away too which seems bad.\r\n\r\nThe simple approach is just to not offer the refactoring if the top-level-nullabilities differ.","Url":"https://github.com/dotnet/roslyn/issues/37181","RelatedDescription":"Open issue \"Convert Get/Set to properties doesn't handle differing nullabilities well\" (#37181)"},{"Id":"467171214","IsPullRequest":false,"CreatedAt":"2019-07-12T01:04:03","Actor":"tmat","Number":"37180","RawContent":null,"Title":"Handle ImplicitStackAllocArrayCreationExpressionSyntax","State":"open","Body":"This is new syntax node in C# 7.3 and needs to be handled in `InlineTemporaryCodeRefactoringProvider`, `CSharpUseImplicitTypeHelper` and elsewhere where `StackAllocArrayCreationExpression` is:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/a393757e7056f390c5673a419e9d8c7c7536d496/src/Features/CSharp/Portable/CodeRefactorings/InlineTemporary/InlineTemporaryCodeRefactoringProvider.cs#L70","Url":"https://github.com/dotnet/roslyn/issues/37180","RelatedDescription":"Open issue \"Handle ImplicitStackAllocArrayCreationExpressionSyntax\" (#37180)"},{"Id":"467169169","IsPullRequest":false,"CreatedAt":"2019-07-12T00:53:15","Actor":"jasonmalinowski","Number":"37179","RawContent":null,"Title":"Generate overrides UI needs to show ?s for parameters","State":"open","Body":"![image](https://user-images.githubusercontent.com/201340/61094613-c563fe80-a404-11e9-91c6-bfc1e72f1456.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37179","RelatedDescription":"Open issue \"Generate overrides UI needs to show ?s for parameters\" (#37179)"},{"Id":"467168132","IsPullRequest":false,"CreatedAt":"2019-07-12T00:47:35","Actor":"jasonmalinowski","Number":"37178","RawContent":null,"Title":"The simplifier should simplify away ? annotations if in a nullable annotation disabled context","State":"open","Body":"Once #36101 is complete, we're going to update the simplifier to disregard generated ? annotations on nullable reference types. We definitely want to be smarter in some cases (see #37177 as an example) but this is a minimum bar we need to do to keep refactorings working.","Url":"https://github.com/dotnet/roslyn/issues/37178","RelatedDescription":"Open issue \"The simplifier should simplify away ? annotations if in a nullable annotation disabled context\" (#37178)"},{"Id":"467167115","IsPullRequest":false,"CreatedAt":"2019-07-12T00:42:49","Actor":"jasonmalinowski","Number":"37177","RawContent":null,"Title":"Extract interface needs to copy along #nullable context","State":"open","Body":"If you invoke extract interface into a new file, right now we aren't copying along the nullable context so you might get ?s where you don't support them.\r\n\r\nThis needs #36101 for us to implement it properly.","Url":"https://github.com/dotnet/roslyn/issues/37177","RelatedDescription":"Open issue \"Extract interface needs to copy along #nullable context\" (#37177)"},{"Id":"467166465","IsPullRequest":false,"CreatedAt":"2019-07-12T00:39:46","Actor":"jasonmalinowski","Number":"37176","RawContent":null,"Title":"Extract interface doesn't show nullability","State":"open","Body":"Extract interface doesn't show ?s for the types.\r\n\r\n![image](https://user-images.githubusercontent.com/201340/61094201-f17e8000-a402-11e9-8f36-b27b8b4f5270.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37176","RelatedDescription":"Open issue \"Extract interface doesn't show nullability\" (#37176)"},{"Id":"467084208","IsPullRequest":true,"CreatedAt":"2019-07-12T00:38:32","Actor":"dotnet-bot","Number":"37160","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37160","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37160)"},{"Id":"467164659","IsPullRequest":false,"CreatedAt":"2019-07-12T00:30:19","Actor":"jasonmalinowski","Number":"37175","RawContent":null,"Title":"Add classification support for the nullable suppression operator","State":"open","Body":"I'd love it if this was a separate classification type so I could make uses of it red. I'd propose the default is still to have the standard color since people may not like that.","Url":"https://github.com/dotnet/roslyn/issues/37175","RelatedDescription":"Open issue \"Add classification support for the nullable suppression operator\" (#37175)"},{"Id":"467164171","IsPullRequest":false,"CreatedAt":"2019-07-12T00:27:51","Actor":"jasonmalinowski","Number":"37174","RawContent":null,"Title":"Add tests for find references that it ignores nullability when searching for usages of types","State":"open","Body":"If you search on the usage of a type, we shouldn't be sensitive to nullability of that type. For example, if you invoke on a use of string? we should be finding both uses of string and string?.\r\n\r\nThis appears to be working today as expected; we should have a test or two just to make sure, especially around nested nullability.","Url":"https://github.com/dotnet/roslyn/issues/37174","RelatedDescription":"Open issue \"Add tests for find references that it ignores nullability when searching for usages of types\" (#37174)"},{"Id":"467159079","IsPullRequest":true,"CreatedAt":"2019-07-12T00:04:14","Actor":"tmat","Number":"37173","RawContent":null,"Title":"Disallow EnC in presence of switch expressions, implicit stackalloc","State":"open","Body":"Methods containing switch expressions can't be edited due to https://github.com/dotnet/roslyn/issues/37172.","Url":"https://github.com/dotnet/roslyn/pull/37173","RelatedDescription":"Open PR \"Disallow EnC in presence of switch expressions, implicit stackalloc\" (#37173)"},{"Id":"467117639","IsPullRequest":true,"CreatedAt":"2019-07-11T23:57:03","Actor":"agocke","Number":"37163","RawContent":null,"Title":"Fix master build","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37163","RelatedDescription":"Closed or merged PR \"Fix master build\" (#37163)"},{"Id":"467155833","IsPullRequest":false,"CreatedAt":"2019-07-11T23:49:30","Actor":"tmat","Number":"37172","RawContent":null,"Title":"Compiler emits incorrect PDB info for synthesized variable of kind SwitchCasePatternMatching ","State":"open","Body":"```C#\r\npublic class C\r\n{\r\n    static int F(int i)\r\n    {\r\n        return N(out var x) switch \r\n        {\r\n            0 => 0,\r\n            _ => x\r\n        };\r\n    }\r\n\r\n    static int N(out int x) => x = 1;\r\n}\r\n```\r\n\r\nThe compiler generates\r\n```\r\n{\r\n  // Code size       32 (0x20)\r\n  .maxstack  1\r\n  .locals init (int V_0, //x\r\n                int V_1,\r\n                int V_2,\r\n                int V_3,\r\n                int V_4)\r\n  IL_0000:  nop\r\n  IL_0001:  ldloca.s   V_0\r\n  IL_0003:  call       \"\"int C.N(out int)\"\"\r\n  IL_0008:  stloc.2\r\n  IL_0009:  ldloc.2\r\n  IL_000a:  brfalse.s  IL_000e\r\n  IL_000c:  br.s       IL_0012\r\n  IL_000e:  ldc.i4.0\r\n  IL_000f:  stloc.1\r\n  IL_0010:  br.s       IL_0016\r\n  IL_0012:  ldloc.0\r\n  IL_0013:  stloc.1\r\n  IL_0014:  br.s       IL_0016\r\n  IL_0016:  ldloc.1\r\n  IL_0017:  stloc.3\r\n  IL_0018:  ldloc.3\r\n  IL_0019:  stloc.s    V_4\r\n  IL_001b:  br.s       IL_001d\r\n  IL_001d:  ldloc.s    V_4\r\n  IL_001f:  ret\r\n}\r\n```\r\n\r\nand PDB info:\r\n\r\n```\r\n<encLocalSlotMap>\r\n          <slot kind=\"\"0\"\" offset=\"\"28\"\" />\r\n          <slot kind=\"\"35\"\" offset=\"\"18\"\" />\r\n          <slot kind=\"\"35\"\" offset=\"\"18\"\" /> \r\n          <slot kind=\"\"28\"\" offset=\"\"18\"\" />\r\n          <slot kind=\"\"21\"\" offset=\"\"0\"\" />\r\n</encLocalSlotMap>\r\n```\r\n\r\nThe temps `V_1` and `V_2` have the same type, kind and syntax offset, which is not allowed. (`CSharpDefinitionMap.CreateLocalSlotMap` fails with `System.ArgumentException : An item with the same key has already been added.` when this method is edited.)\r\n\r\nThe comment here is no longer valid:\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/CodeGen/EmitStatement.cs,1440\r\n\r\nDue to this issue we can't allow EnC of methods containing switch expressions.","Url":"https://github.com/dotnet/roslyn/issues/37172","RelatedDescription":"Open issue \"Compiler emits incorrect PDB info for synthesized variable of kind SwitchCasePatternMatching \" (#37172)"},{"Id":"467155705","IsPullRequest":false,"CreatedAt":"2019-07-11T23:48:54","Actor":"vsfeedback","Number":"37171","RawContent":null,"Title":"C#: Error check/scan/rename inactive #if blocks","State":"open","Body":"I realize there are going to be issues with this, but it isn't impossible.\n\nA typical developer will spend most of the time editing with DEBUG enabled. Particularly if the target platform/environment is using the native compiler which requires a pretty long build time.\n\nThe result is &quot;#if RELEASE&quot; blocks failing to undergo the real-time scanning the rest of the code receives. They also fail to participate in symbol renaming, and thus renaming can blindly produce errors.\n\nThis does lead to the issue of when does a developer want a conditional block to be considered &quot;currently dead code&quot; fully ignored versus it being &quot;live&quot; code simply dependent upon a build option. There is also the issue of how #if blocks interact in combination.\n\nA solution would seem to be supporting multiple secondary conditional compilation symbol lists with each list being a &quot;live&quot; build configuration, but the secondary lists wouldn't be used for the actual build.  There would be a &quot;primary&quot; list used for the actual build.\n\nThe most critical part of this is symbol renaming. There currently is no reasonable way to have a solution-wide symbol rename catch both DEBUG and RELEASE (or other) #if blocks.\n\nThe situation can even produce a runtime error not caught by the compiler.\n\nThe given symbol X might be renamed to Z, Y renamed to X, and Z renamed to Y (or a new X introduced after the old X was renamed to Y) -- either intentionally or just as things evolve during development. The currently active DEBUG/RELEASE blocks will track the change correctly and report any issues. However the inactive RELEASE/DEBUG blocks will be blind to the change. Once later made active by changing the build type, there will be no error reported.  The previously inactive blocks will find the symbol they were referencing, but not detect it's the wrong symbol now provided the type is compatible.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/627570/c-error-checkscanrename-inactive-if-blocks.html\nVSTS ticketId: 939897_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 7/1/2019, 04:14 AM (10 days ago): <markdown><p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n</markdown>\nMika Dumont [MSFT] on 7/11/2019, 10:45 AM (6 hours ago): <p>Thank you for filing this feedback! I'm going to move this to our open source repository on GitHub for further discussion with the community.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/37171","RelatedDescription":"Open issue \"C#: Error check/scan/rename inactive #if blocks\" (#37171)"},{"Id":"467155565","IsPullRequest":true,"CreatedAt":"2019-07-11T23:48:10","Actor":"jasonmalinowski","Number":"37170","RawContent":null,"Title":"Ensure that IVsContainedLanguage.SetHost(null) won't fail a second time","State":"open","Body":"If you called SetHost(null) we didn't null out our internal field, so a second call would call ontainedLanguage.OnDisconnect() a second time.\r\n\r\nFixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/857221","Url":"https://github.com/dotnet/roslyn/pull/37170","RelatedDescription":"Open PR \"Ensure that IVsContainedLanguage.SetHost(null) won't fail a second time\" (#37170)"},{"Id":"467155172","IsPullRequest":false,"CreatedAt":"2019-07-11T23:46:27","Actor":"vsfeedback","Number":"37169","RawContent":null,"Title":"Getting VB.net Controls Usage Examples","State":"open","Body":"<p>It's often frustrating when trying to get properties and methods of controls, or usage examples for using a control, from the online documentation - it's like looking for a needle in a haystack.  Why can't Microsoft provide complete info on a particular control that is within the Visual Studio toolbox by first a) right-clicking on the control in the control toolbox, then b) show a menu list with Properties, Methods, Constants, Usage examples, etc?  This would make the process of learning and using about the particular control so much more efficient.  And I would add that the the actual properties and examples pages should show not just for the C# language but for <strong>VB.Net as well</strong>, after all I prefer VB.  Please seriously consider this feature addition.  Thank you. </p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/632584/getting-vbnet-controls-usage-examples.html\nVSTS ticketId: 942201_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 7/4/2019, 02:54 AM (7 days ago): <markdown><p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n</markdown>","Url":"https://github.com/dotnet/roslyn/issues/37169","RelatedDescription":"Open issue \"Getting VB.net Controls Usage Examples\" (#37169)"},{"Id":"467153970","IsPullRequest":false,"CreatedAt":"2019-07-11T23:40:45","Actor":"vsfeedback","Number":"37168","RawContent":null,"Title":"Better code snippets (capitalize, uncapitalize)","State":"open","Body":"<p>I have created code snippet for typical MVVM property:</p> <pre>#region $field$ VM property\n\nprivate $type$ $field$;\n    public $type$ $property$\n    {\n        get { return $field$;}\n        set { $field$ = value; NotifyPropertyChanged(); }\n    }\n\n#endregion\n</pre><p>And I started wondering if some literal can be uncapitalized? Or capitalized? Maybe I don't have to type both field and property names?</p> <pre>#region $field$ VM property\n\nprivate $type$ $field$;\n    public $type$ $capitalize(field)$\n    {\n        get { return $field$;}\n        set { $field$ = value; NotifyPropertyChanged(); }\n    }\n\n#endregion</pre><p><b>Unfortunately it looks like NO.</b> </p> <p>I found here: <a href=\"https://social.msdn.microsoft.com/Forums/vstudio/en-US/ed82c670-4b75-42f5-ac24-4446ef56b453/how-to-capitalize-within-a-codesnippet-prop-snippet?forum=vsx%20\" target=_blank>link</a> that there is no such mechanism in Visual Studio IDE.</p> <p>Come on guys, there is still no such things in 2019? We have IntelliCode with artifical intelligence, but we can't create snippet that makes property with automatically generated backing field name? </p><p></p><p><b>Really? </b> <b>Or maybe I'm wrong? Maybe I can do that somehow?</b></p> <p>Visual Studio Code supports some grammar to transform literals in snippets (<a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_grammar\" target=_blank>link</a>).</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/635597/better-code-snippets-capitalize-uncapitalize.html\nVSTS ticketId: 943329_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 7/8/2019, 01:46 AM (3 days ago): <markdown><p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n</markdown>","Url":"https://github.com/dotnet/roslyn/issues/37168","RelatedDescription":"Open issue \"Better code snippets (capitalize, uncapitalize)\" (#37168)"},{"Id":"467153269","IsPullRequest":false,"CreatedAt":"2019-07-11T23:37:41","Actor":"vsfeedback","Number":"37167","RawContent":null,"Title":"Detect missing \"else\" in C# code","State":"open","Body":"<p>Is it possible for Visual Studio to detect a missing &quot;else&quot;?  For example, I accidentally deleted the &quot;else&quot; in the following code and sadly it took a bit of debugging for it to dawn on me what was wrong...</p> <p>if (x == 3) {</p><p>    //  Do something</p><p>}</p> <p>{</p><p>    MessageBox.Show(&quot;x is not equal to 3!&quot;);</p> <p>}</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/636837/detect-missing-else-in-c-code.html\nVSTS ticketId: 943622_\n_These are the original issue comments:_\n\nJay Buckman on 7/8/2019, 08:14 AM (3 days ago): <p>But, I do have to admit that I don't remember having done this before and failed to notice it while pursuing the code.</p>\n\nJane Wu [MSFT] on 7/9/2019, 03:13 AM (2 days ago): <markdown><p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n</markdown>\nJay Buckman on 7/9/2019, 04:07 AM (2 days ago): <p>Jane, Thanks!  I've been writing software for over 40 years and I think Visual Studio 2019 is spoiling me because it's so good.  Or I'm just getting old. But thanks for considering the suggestion.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/37167","RelatedDescription":"Open issue \"Detect missing \"else\" in C# code\" (#37167)"},{"Id":"467118445","IsPullRequest":true,"CreatedAt":"2019-07-11T22:51:16","Actor":"tmat","Number":"37164","RawContent":null,"Title":"Make test unconditional","State":"closed","Body":"Fixes build break introduced by the merge of https://github.com/dotnet/roslyn/pull/37025.","Url":"https://github.com/dotnet/roslyn/pull/37164","RelatedDescription":"Closed or merged PR \"Make test unconditional\" (#37164)"},{"Id":"467127268","IsPullRequest":true,"CreatedAt":"2019-07-11T22:00:21","Actor":"RikkiGibson","Number":"37166","RawContent":null,"Title":"Remove support for '#pragma warning enable' directive","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37166","RelatedDescription":"Open PR \"Remove support for '#pragma warning enable' directive\" (#37166)"},{"Id":"467119941","IsPullRequest":false,"CreatedAt":"2019-07-11T21:38:53","Actor":"tmat","Number":"37165","RawContent":null,"Title":"CS1935 message is misleading","State":"open","Body":"```\r\nerror CS1935: Could not find an implementation of the query pattern for source type 'int[]'. 'Join' not found. Are you missing a reference to 'System.Core.dll' or a using directive for 'System.Linq'?\r\n```\r\n\r\nSystem.Core.dll is not sufficient when targeting .NET Core, System.Linq.dll also must be present. \r\nRather than giving a misleading message we should remove the \"a reference to 'System.Core.dll' or\" part when building for .NET Core. ","Url":"https://github.com/dotnet/roslyn/issues/37165","RelatedDescription":"Open issue \"CS1935 message is misleading\" (#37165)"},{"Id":"467103454","IsPullRequest":true,"CreatedAt":"2019-07-11T20:58:14","Actor":"CyrusNajmabadi","Number":"37162","RawContent":null,"Title":"Move 'Wrapping' code actions down to 'Feature' layer.","State":"open","Body":"This had to be at the 'Editor' layer previous because 'indentation computation' was defined at the editor-layer.\r\n\r\nWe've since moved 'indentation computation' down to teh workspace layer (since it is only dependent on formatting), so we can move these actual code action features down to the appropriate layer where the rest of the code actions live.","Url":"https://github.com/dotnet/roslyn/pull/37162","RelatedDescription":"Open PR \"Move 'Wrapping' code actions down to 'Feature' layer.\" (#37162)"},{"Id":"467096570","IsPullRequest":false,"CreatedAt":"2019-07-11T20:41:54","Actor":"safern","Number":"37161","RawContent":null,"Title":"NullablePublicOnly feature emits nullable metadata for explicit implementations","State":"open","Body":"**Version Used**: latest version in master\r\n\r\nIt shouldn't emit metadata for explicit implemented members as they're not visible to the public through the instance and only through the interface directly.\r\n\r\ncc: @stephentoub @cston\r\n","Url":"https://github.com/dotnet/roslyn/issues/37161","RelatedDescription":"Open issue \"NullablePublicOnly feature emits nullable metadata for explicit implementations\" (#37161)"},{"Id":"467082327","IsPullRequest":true,"CreatedAt":"2019-07-11T20:06:40","Actor":"jcouv","Number":"37159","RawContent":null,"Title":"Tweak interaction of Maybe/NotNull with Not/MaybeNullWhen","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/36410","Url":"https://github.com/dotnet/roslyn/pull/37159","RelatedDescription":"Open PR \"Tweak interaction of Maybe/NotNull with Not/MaybeNullWhen\" (#37159)"},{"Id":"467081625","IsPullRequest":true,"CreatedAt":"2019-07-11T20:04:49","Actor":"333fred","Number":"37158","RawContent":null,"Title":"Rename TypeArgumentsNullableAnnotations to TypeArgumentNullableAnnotations","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/35927. @dotnet/roslyn-compiler @jasonmalinowski / @ryzngard for review.","Url":"https://github.com/dotnet/roslyn/pull/37158","RelatedDescription":"Open PR \"Rename TypeArgumentsNullableAnnotations to TypeArgumentNullableAnnotations\" (#37158)"},{"Id":"467078578","IsPullRequest":false,"CreatedAt":"2019-07-11T19:57:02","Actor":"RikkiGibson","Number":"37157","RawContent":null,"Title":"Quick Info shouldn't show the null state of non-nullable value types or constants","State":"open","Body":"Version used: 3.3.0-beta1-19354-02\r\n\r\nThe IDE shows the null-state for this enum member, which doesn't really make sense to me because\r\n\r\n1. it's a non-nullable value type, and\r\n2. it's a constant, so I can already see in Quick Info that its constant value is non-null.\r\n\r\n<img width=\"496\" alt=\"nullability-quick-info\" src=\"https://user-images.githubusercontent.com/5833655/61080947-faf3f200-a3da-11e9-93fe-a76b9d210023.PNG\">","Url":"https://github.com/dotnet/roslyn/issues/37157","RelatedDescription":"Open issue \"Quick Info shouldn't show the null state of non-nullable value types or constants\" (#37157)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"467152268","IsPullRequest":true,"CreatedAt":"2019-07-11T23:33:25","Actor":"trylek","Number":"7611","RawContent":null,"Title":"Exclude methods dependent on HW intrinsics from R2R compilation","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Open PR \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611)"},{"Id":"467053308","IsPullRequest":true,"CreatedAt":"2019-07-11T21:13:03","Actor":"cshung","Number":"7609","RawContent":null,"Title":"Converge to a single copy of volatile.h","State":"closed","Body":"Fixes #7607","Url":"https://github.com/dotnet/corert/pull/7609","RelatedDescription":"Closed or merged PR \"Converge to a single copy of volatile.h\" (#7609)"},{"Id":"466813265","IsPullRequest":false,"CreatedAt":"2019-07-11T21:13:03","Actor":"karanjitsingh","Number":"7607","RawContent":null,"Title":"build failing on mac os","State":"closed","Body":"Trying to build on mac os 10.14.5 (18F132)\r\n\r\n```bash\r\nNitins-MacBook-Pro-2:corert vstest$ ./build.sh release\r\nUnknown CPU i386 detected, configuring as if for x64\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for OSX.x64.Release\r\n~/github/corert/bin/obj/Native/OSX.x64.Release ~/github/corert\r\nInvoking cmake with arguments: \"/Users/vstest/github/corert/buildscripts/..\" Release\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/vstest/github/corert/bin/obj/Native/OSX.x64.Release\r\nExecuting make install -j 9 \r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target jitinterface\r\n[  4%] Built target bootstrapperdll\r\n[  6%] Built target bootstrapper\r\n[  8%] Built target bootstrappercpp\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o\r\n[ 11%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o\r\n/Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310error: :34: unexpected token\r\nerror: error: DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nunexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                    ^ \r\n                             ^\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o] Error 1\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o] Error 1\r\nmake[1]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 13%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.incerror: :310:34: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^ \r\n                          error:       ^\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o] Error 1/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: \r\nerror: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n[ 16%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o] Error 1\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n   DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h \r\n                             ^\r\n                                 ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nunexpected token\r\n                                 ^\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: error: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake: *** [all] Error 2\r\nFailed to build corert native components.\r\n```","Url":"https://github.com/dotnet/corert/issues/7607","RelatedDescription":"Closed issue \"build failing on mac os\" (#7607)"},{"Id":"467020988","IsPullRequest":true,"CreatedAt":"2019-07-11T20:42:15","Actor":"Dotnet-GitSync-Bot","Number":"7608","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7608","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7608)"},{"Id":"467070772","IsPullRequest":true,"CreatedAt":"2019-07-11T19:37:52","Actor":"MichalStrehovsky","Number":"7610","RawContent":null,"Title":"Enable generic inlining","State":"open","Body":"RyuJIT is capable of some limited generic inlining - we just have to make sure we're resolving tokens in the inlining context.","Url":"https://github.com/dotnet/corert/pull/7610","RelatedDescription":"Open PR \"Enable generic inlining\" (#7610)"},{"Id":"466031346","IsPullRequest":true,"CreatedAt":"2019-07-11T17:36:21","Actor":"Dotnet-GitSync-Bot","Number":"7606","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7606)"},{"Id":"465922181","IsPullRequest":true,"CreatedAt":"2019-07-10T19:10:17","Actor":"trylek","Number":"7604","RawContent":null,"Title":"Add CPAOT - Crossgen executable size comparison to SuperIlc","State":"closed","Body":"During investigation of the remaining bug buckets I noticed a test\r\napp that was about 3 times longer when compiled with CPAOT than\r\nwith Crossgen (on top of the fact that it was malfunctioning).\r\nI am working on a separate change to fix the size regression;\r\nin this change I'm adding monitoring of executable size comparisons\r\nto SuperIlc to help me monitor size comparisons on a regular basis.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7604","RelatedDescription":"Closed or merged PR \"Add CPAOT - Crossgen executable size comparison to SuperIlc\" (#7604)"},{"Id":"464568921","IsPullRequest":true,"CreatedAt":"2019-07-10T06:41:35","Actor":"trylek","Number":"7590","RawContent":null,"Title":"Miscellaneous CPAOT fixes for several Pri# bug buckets","State":"closed","Body":"1) We were missing support for structs with explicit layout. I have\r\nadded the appropriate logic.\r\n\r\n2) Nullable is not blittable (however it is managed sequential if\r\nits instantiation type is managed sequential).\r\n\r\n3) Structs with explicit layout aren't managed sequential.\r\n\r\n4) We were putting the cctor trigger helper into the wrong import\r\ntable - DispatchImports emits GC ref map and cctor trigger doesn't\r\nneed one because it's not a method call helper. This was crashing\r\nR2RDump when trying to disassemble some R2R executables.\r\n\r\n5) I have added two unit tests to the R2R unit test suite by\r\nadapting two CoreCLR tests that were crashing in interesting ways\r\nwhen manipulating explicit layouts and nullables.\r\n\r\n6) Instantiated type signature encoding was incorrect in large\r\nversion bubble case. As JanV described earlier, the context for\r\nencoding of the instantiation type parameters is the outer context,\r\nnot the generic type context.\r\n\r\n7) Always emit all import tables even when they are empty, otherwise\r\nthe fixup encoding gets out of sync as it refers to import table\r\nindices.\r\n\r\n8) When SuperIlc calls R2RDump in the large version bubble mode, it\r\nneeds to pass CORE_ROOT as the \"reference path\" parameter so that\r\nR2RDump can resolve framework assembly references.\r\n\r\n9) Field encoding was doing an unnecessarily strong check - replaced\r\nContainsType with VersionsWithType.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7590","RelatedDescription":"Closed or merged PR \"Miscellaneous CPAOT fixes for several Pri# bug buckets\" (#7590)"},{"Id":"465498463","IsPullRequest":true,"CreatedAt":"2019-07-09T23:42:42","Actor":"Dotnet-GitSync-Bot","Number":"7602","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @andy-ms","Url":"https://github.com/dotnet/corert/pull/7602","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7602)"},{"Id":"465992478","IsPullRequest":false,"CreatedAt":"2019-07-09T21:26:26","Actor":"OshoNot","Number":"7605","RawContent":null,"Title":"Build failing when Adding Npgsql","State":"open","Body":"Hello,\r\n\r\nI keep getting the same problem when running the HelloWorld Sample with Npgsql.\r\n\r\nRunning `dotnet publish -r linux-x64 -c Release -v d`\r\n\r\nI get this error during the \"Exec\" task of the publish command: \r\n`Task \"Exec\"\r\n         \"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\r\n         Killed\r\n   1:7>/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\" exited with code 137. [/DbPrototype/DbPrototype.fsproj]\r\n       Done executing task \"Exec\" -- FAILED.\r\n   1:7>Done building target \"IlcCompile\" in project \"DbPrototype.fsproj\" -- FAILED.\r\n   1:7>Done Building Project \"/DbPrototype/DbPrototype.fsproj\" (Publish target(s)) -- FAILED.`\r\n\r\n\r\nOS: Ubuntu 18.04 (All pre requisites installed based on [Helloworld sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld))\r\n","Url":"https://github.com/dotnet/corert/issues/7605","RelatedDescription":"Open issue \"Build failing when Adding Npgsql\" (#7605)"},{"Id":"465449956","IsPullRequest":true,"CreatedAt":"2019-07-09T18:55:39","Actor":"trylek","Number":"7599","RawContent":null,"Title":"ArgIterator hardening to gracefully handle indeterminate return types","State":"closed","Body":"When analyzing the remaining CPAOT error buckets, I noticed several\r\ntests that were still crashing CPAOT due to indeterminate types\r\nin the ArgIterator. I found out that I had previously only fixed\r\nthe argument types but I overlooked the need to fix the return value\r\nin a similar manner. I have also applied a tiny cleanup that Michal\r\nsuggested earlier - using InstanceFieldSize instead of GetElementSize.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I double-checked the other few callers of TypeHandle.GetSize\r\nand I believe this is the last remaining place that is not protected\r\nby an upfront indeterminate type check and graceful bail-out.","Url":"https://github.com/dotnet/corert/pull/7599","RelatedDescription":"Closed or merged PR \"ArgIterator hardening to gracefully handle indeterminate return types\" (#7599)"},{"Id":"465474015","IsPullRequest":true,"CreatedAt":"2019-07-09T08:51:20","Actor":"MichalStrehovsky","Number":"7601","RawContent":null,"Title":"Expose invariant globalization mode","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7601","RelatedDescription":"Closed or merged PR \"Expose invariant globalization mode\" (#7601)"},{"Id":"465473002","IsPullRequest":true,"CreatedAt":"2019-07-09T08:51:02","Actor":"MichalStrehovsky","Number":"7600","RawContent":null,"Title":"Make Enum.ToString work with reflection disabled","State":"closed","Body":"This will just use the numerical value.","Url":"https://github.com/dotnet/corert/pull/7600","RelatedDescription":"Closed or merged PR \"Make Enum.ToString work with reflection disabled\" (#7600)"},{"Id":"465653320","IsPullRequest":false,"CreatedAt":"2019-07-09T08:50:15","Actor":"MichalStrehovsky","Number":"7603","RawContent":null,"Title":"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator","State":"open","Body":"Seen in #7601 on Windows x64 Debug.\r\n\r\n```\r\nF:\\workspace\\_work\\1\\s\\tests_downloaded\\CoreCLR\\GC\\Scenarios\\StringCreator\\stringcreator\\\\*.dll \r\n                0 file(s) copied.\r\n        Test should return with ExitCode 100 ...\r\n        Creating Strings..\r\n        Created Strings: 0 : 580328\r\n        Created Strings: 100 : 604904\r\n        Created Strings: 200 : 678632\r\n        Created Strings: 300 : 817896\r\n        Created Strings: 400 : 1014504\r\n        Created Strings: 500 : 1268456\r\n        Created Strings: 600 : 1579752\r\n        Created Strings: 700 : 1956584\r\n        Created Strings: 800 : 2390760\r\n        Created Strings: 900 : 2890472\r\n        Created Strings: 1000 : 3447528\r\n        Created Strings: 1100 : 4070120\r\n        Created Strings: 1200 : 4774632\r\n        Created Strings: 1300 : 5561184\r\n        Created Strings: 1400 : 6432976\r\n        Created Strings: 1500 : 7376576\r\n        Created Strings: 1600 : 8408368\r\n        Created Strings: 1700 : 9511968\r\n        Created Strings: 1800 : 10695568\r\n        Created Strings: 1900 : 11967360\r\n        Creating More Strings..\r\n        Created Strings: 0 : 13392616\r\n        Created Strings: 100 : 13531880\r\n        Created Strings: 200 : 13916904\r\n        Created Strings: 300 : 14457576\r\n        Created Strings: 400 : 15159200\r\n        \r\n  slicer = 1\r\n        Creating Strings..\r\n        Created Strings: 0 : 16121000\r\n        Created Strings: 100 : 16145576\r\n        Created Strings: 200 : 16218856\r\n        Created Strings: 300 : 16358120\r\n        Created Strings: 400 : 16554728\r\n        Created Strings: 500 : 16808680\r\n        Created Strings: 600 : 17119976\r\n        Created Strings: 700 : 17496808\r\n        Created Strings: 800 : 17930984\r\n        Created Strings: 900 : 18430696\r\n        Created Strings: 1000 : 18987752\r\n        Created Strings: 1100 : 19610344\r\n        Created Strings: 1200 : 20314856\r\n        Created Strings: 1300 : 21101408\r\n        Created Strings: 1400 : 21973200\r\n        Created Strings: 1500 : 22916800\r\n        Created Strings: 1600 : 23948592\r\n        Created Strings: 1700 : 25052192\r\n        Created Strings: 1800 : 26235792\r\n        Created Strings: 1900 : 1389096\r\n        Creating More Strings..\r\n        Created Strings: 0 : 2765464\r\n        Created Strings: 100 : 2912920\r\n        Created Strings: 200 : 3289752\r\n        Created Strings: 300 : 3830424\r\n        Created Strings: 400 : 4540240\r\n        \r\n  slicer = 1\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/corert/issues/7603","RelatedDescription":"Open issue \"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator\" (#7603)"},{"Id":"464981240","IsPullRequest":true,"CreatedAt":"2019-07-09T06:35:00","Actor":"MichalStrehovsky","Number":"7597","RawContent":null,"Title":"Drop size of Hello World to 1.16 MB","State":"closed","Body":"Set of commits that allow us to drop the size of a fully self-contained native C# Hello World to 1.16 MB (with all the [documented](http://aka.ms/OptimizeCoreRT) size optimization switches enabled, that is).\r\n\r\nSee individual commits for descriptions.","Url":"https://github.com/dotnet/corert/pull/7597","RelatedDescription":"Closed or merged PR \"Drop size of Hello World to 1.16 MB\" (#7597)"},{"Id":"465081965","IsPullRequest":true,"CreatedAt":"2019-07-08T23:16:45","Actor":"Suchiman","Number":"7598","RawContent":null,"Title":"Port many core perf fixes","State":"closed","Body":"Ports dotnet/coreclr#25350","Url":"https://github.com/dotnet/corert/pull/7598","RelatedDescription":"Closed or merged PR \"Port many core perf fixes\" (#7598)"},{"Id":"464946822","IsPullRequest":true,"CreatedAt":"2019-07-08T04:03:23","Actor":"Suchiman","Number":"7596","RawContent":null,"Title":"Use the GC provided environments instead of the PAL ones","State":"closed","Body":"This fixes 3/6 from #7339","Url":"https://github.com/dotnet/corert/pull/7596","RelatedDescription":"Closed or merged PR \"Use the GC provided environments instead of the PAL ones\" (#7596)"},{"Id":"464870626","IsPullRequest":true,"CreatedAt":"2019-07-07T21:12:25","Actor":"MichalStrehovsky","Number":"7593","RawContent":null,"Title":"Change how we root all application libraries","State":"closed","Body":"When `rootallapplicationassemblies` is specified, we currently go over all assemblies passed to ILC as input or reference, find out which ones are not framework assemblies, and root all types in them so that they're available for arbitrary reflection at runtime.\r\n\r\nThe problem is that NuGet packages or SDKs can have many assemblies in them, but only some of them are actually used by user code. Good example is the Microsoft.WindowsDesktop.App SDK that has both WinForms and WPF in it.\r\n\r\nWith this change, we'll only root assemblies where we actually saw the app using something in them. This way a WinForms app will not include all of WPF.\r\n\r\nWith this, we could possibly regress apps that do `Assembly.Load` on an assembly that is otherwise unused. Those apps will have to use RD.XML. We could also add a simple data flow analysis for the simplest cases to avoid RD.XML if really needed.\r\n\r\nASP.NET still works without RD.XML for this.\r\n\r\nMost of this commit is just mechanically moving stuff around.","Url":"https://github.com/dotnet/corert/pull/7593","RelatedDescription":"Closed or merged PR \"Change how we root all application libraries\" (#7593)"},{"Id":"464932259","IsPullRequest":true,"CreatedAt":"2019-07-07T14:24:35","Actor":"MichalStrehovsky","Number":"7595","RawContent":null,"Title":"Add bodies for a couple more missing methods","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7595","RelatedDescription":"Closed or merged PR \"Add bodies for a couple more missing methods\" (#7595)"},{"Id":"464870932","IsPullRequest":true,"CreatedAt":"2019-07-06T22:35:40","Actor":"MichalStrehovsky","Number":"7594","RawContent":null,"Title":"Change error message for unsupported marshallers","State":"closed","Body":"We now support many marshallers that I would consider non-trivial. The error should just say the marshaller is not implemented...","Url":"https://github.com/dotnet/corert/pull/7594","RelatedDescription":"Closed or merged PR \"Change error message for unsupported marshallers\" (#7594)"},{"Id":"464587884","IsPullRequest":true,"CreatedAt":"2019-07-05T18:30:19","Actor":"mjsabby","Number":"7591","RawContent":null,"Title":"Harmonize ContainsPointers flags between CoreRT & CoreCLR","State":"closed","Body":"If there's no reason for these flags to be different between coreclr and corert, I'd like to have the same value across them.\r\n\r\nThis allows the frozen segment deserializer code to not have to be forked across the runtimes.","Url":"https://github.com/dotnet/corert/pull/7591","RelatedDescription":"Closed or merged PR \"Harmonize ContainsPointers flags between CoreRT & CoreCLR\" (#7591)"},{"Id":"464646387","IsPullRequest":true,"CreatedAt":"2019-07-05T15:40:24","Actor":"yowl","Number":"7592","RawContent":null,"Title":"WASM: Enable GCStaticsNode instead of llvm globals","State":"closed","Body":"In order to progress #7248 , this change enables GCStatics by uncommenting some code that was already present but commented due to the earlier problem of `InitializeModules` not being called at startup.  `InitializeModules` is now called for wasm at startup (I added a printf to be sure) and the commented GCStatics code worked as it was.  I added a test for static field access and it produces this snippet of llvm:\r\n\r\n```\r\n%LoadAddressOfSymbolNode4 = load i32*, i32** @__Str_first_string_31DAE213E988224C1F7CFBECD99A0DA573F5FDAB1922570E42F281A9DCFFC1E9___SYMBOL, !dbg !7923\r\n  %LoadAddressOfSymbolNode5 = load i32*, i32** @__GCStaticBase_HelloWasm_FieldStatics___SYMBOL, !dbg !7923\r\n  %castBasePtrPtr = bitcast i32* %LoadAddressOfSymbolNode5 to i8***, !dbg !7923\r\n  %basePtr = load i8**, i8*** %castBasePtrPtr, !dbg !7923\r\n  %base = load i8*, i8** %basePtr, !dbg !7923\r\n  %S1_addr = getelementptr i8, i8* %base, i32 4, !dbg !7923\r\n  %CastPtrstring = bitcast i8* %S1_addr to i8**, !dbg !7923\r\n  %CastPtr = bitcast i32* %LoadAddressOfSymbolNode4 to i8*, !dbg !7923\r\n  store i8* %CastPtr, i8** %CastPtrstring, !dbg !7923\r\n  %LoadAddressOfSymbolNode6 = load i32*, i32** @__Str_a_different_string_1B09B108E59054EEE2BADD80C449F869A0EEBD1B5472EF5FC727ED498E6D54C8___SYMBOL, !dbg !7924\r\n  %LoadAddressOfSymbolNode7 = load i32*, i32** @__GCStaticBase_HelloWasm_FieldStatics___SYMBOL, !dbg !7924\r\n  %castBasePtrPtr8 = bitcast i32* %LoadAddressOfSymbolNode7 to i8***, !dbg !7924\r\n  %basePtr9 = load i8**, i8*** %castBasePtrPtr8, !dbg !7924\r\n  %base10 = load i8*, i8** %basePtr9, !dbg !7924\r\n  %S2_addr = getelementptr i8, i8* %base10, i32 8, !dbg !7924\r\n```\r\n\r\nWhere we can see that it is going to the GCStaticBase for the class and has 2 different offsets in the `getelementptr` statements, 4 and 8, so looks fine to me.\r\n\r\n","Url":"https://github.com/dotnet/corert/pull/7592","RelatedDescription":"Closed or merged PR \"WASM: Enable GCStaticsNode instead of llvm globals\" (#7592)"},{"Id":"464418814","IsPullRequest":true,"CreatedAt":"2019-07-05T06:18:31","Actor":"mjsabby","Number":"7589","RawContent":null,"Title":"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment","State":"closed","Body":"Brings https://github.com/dotnet/coreclr/pull/22776 into CoreRT.","Url":"https://github.com/dotnet/corert/pull/7589","RelatedDescription":"Closed or merged PR \"Implement _RegisterFrozenSegment & _UnregisterFrozenSegment\" (#7589)"},{"Id":"464379081","IsPullRequest":true,"CreatedAt":"2019-07-04T19:57:45","Actor":"Suchiman","Number":"7588","RawContent":null,"Title":"Make CLRServices::GarbageCollect behave like CoreCLR's","State":"closed","Body":"fixes #7475","Url":"https://github.com/dotnet/corert/pull/7588","RelatedDescription":"Closed or merged PR \"Make CLRServices::GarbageCollect behave like CoreCLR's\" (#7588)"},{"Id":"463949789","IsPullRequest":true,"CreatedAt":"2019-07-04T19:50:37","Actor":"Suchiman","Number":"7587","RawContent":null,"Title":"Make fields readonly properties to avoid confusion, fixes #4811","State":"closed","Body":"fixes #4811","Url":"https://github.com/dotnet/corert/pull/7587","RelatedDescription":"Closed or merged PR \"Make fields readonly properties to avoid confusion, fixes #4811\" (#7587)"},{"Id":"463835483","IsPullRequest":true,"CreatedAt":"2019-07-03T20:22:39","Actor":"MichalStrehovsky","Number":"7585","RawContent":null,"Title":"Run CoreCLR tests in multimodule mode","State":"closed","Body":"This leg is currently taking 80 minutes to complete and that's quite a long time.","Url":"https://github.com/dotnet/corert/pull/7585","RelatedDescription":"Closed or merged PR \"Run CoreCLR tests in multimodule mode\" (#7585)"},{"Id":"463835743","IsPullRequest":true,"CreatedAt":"2019-07-03T18:15:57","Actor":"Dotnet-GitSync-Bot","Number":"7586","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7586","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7586)"},{"Id":"463792357","IsPullRequest":true,"CreatedAt":"2019-07-03T17:37:35","Actor":"MichalStrehovsky","Number":"7584","RawContent":null,"Title":"Prevent loading byref-like types with invalid layout","State":"closed","Body":"Port of dotnet/coreclr#25200.","Url":"https://github.com/dotnet/corert/pull/7584","RelatedDescription":"Closed or merged PR \"Prevent loading byref-like types with invalid layout\" (#7584)"},{"Id":"463792056","IsPullRequest":true,"CreatedAt":"2019-07-03T16:03:38","Actor":"MichalStrehovsky","Number":"7583","RawContent":null,"Title":"Allow CORINFO_BOX_THIS for primitives and enums","State":"closed","Body":"Port dotnet/coreclr#24644.","Url":"https://github.com/dotnet/corert/pull/7583","RelatedDescription":"Closed or merged PR \"Allow CORINFO_BOX_THIS for primitives and enums\" (#7583)"},{"Id":"463593271","IsPullRequest":true,"CreatedAt":"2019-07-03T13:39:58","Actor":"Dotnet-GitSync-Bot","Number":"7582","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7582","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7582)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"464419999","IsPullRequest":true,"CreatedAt":"2019-07-12T05:17:47","Actor":"drewnoakes","Number":"3398","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"closed","Body":"Design time builds are stopping if `ResolvePackageAssets` hits an error (https://github.com/dotnet/project-system/issues/4992). This PR sets `ContinueOnError` on `ResolvePackageAssets` to `ErrorAndContinue` for design time builds only.\r\n\r\nWould the property be better defined in `Microsoft.NET.Sdk.props` with a more general name for broader use?\r\n\r\nAlternatively, should this logic piggyback off the `DesignTimeBuild` property of the task itself?\r\n\r\nhttps://github.com/dotnet/sdk/blob/adf76a594158a742e2c22b49b0fb4942cb53317d/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L153","Url":"https://github.com/dotnet/sdk/pull/3398","RelatedDescription":"Closed or merged PR \"Continue design time builds if resolving package assets fails\" (#3398)"},{"Id":"467217501","IsPullRequest":true,"CreatedAt":"2019-07-12T04:57:33","Actor":"drewnoakes","Number":"3413","RawContent":null,"Title":"Document testing local builds and remove VS version","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3413","RelatedDescription":"Closed or merged PR \"Document testing local builds and remove VS version\" (#3413)"},{"Id":"467000319","IsPullRequest":true,"CreatedAt":"2019-07-12T01:34:29","Actor":"nguerrera","Number":"3410","RawContent":null,"Title":"Disable flaky test against bug","State":"closed","Body":"Good news: The test found a product bug (#3409) that it is designed to catch.\r\n\r\nBad news: It can still pass depending on what's in the nuget cache from prior tests. So the change that regressed it slipped through and now we have flaky CI.\r\n\r\nDisabling the test against the bug that it caught for now.","Url":"https://github.com/dotnet/sdk/pull/3410","RelatedDescription":"Closed or merged PR \"Disable flaky test against bug\" (#3410)"},{"Id":"467159353","IsPullRequest":true,"CreatedAt":"2019-07-12T00:05:24","Actor":"elinor-fung","Number":"3412","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"open","Body":"This is for dotnet/core-setup#7173\r\n\r\nSame change as #3411, but for Preview 7","Url":"https://github.com/dotnet/sdk/pull/3412","RelatedDescription":"Open PR \"Update Microsoft.NET.HostModel version\" (#3412)"},{"Id":"467142910","IsPullRequest":true,"CreatedAt":"2019-07-11T22:54:58","Actor":"elinor-fung","Number":"3411","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"open","Body":"This is for dotnet/core-setup#7173\r\n\r\nIt is also affecting Preview 7. This is just the change in master.","Url":"https://github.com/dotnet/sdk/pull/3411","RelatedDescription":"Open PR \"Update Microsoft.NET.HostModel version\" (#3411)"},{"Id":"465465681","IsPullRequest":true,"CreatedAt":"2019-07-11T16:37:12","Actor":"dsplaisted","Number":"3406","RawContent":null,"Title":"Supply rid graph to NuGet","State":"closed","Body":"Fix #3325","Url":"https://github.com/dotnet/sdk/pull/3406","RelatedDescription":"Closed or merged PR \"Supply rid graph to NuGet\" (#3406)"},{"Id":"466996372","IsPullRequest":false,"CreatedAt":"2019-07-11T16:36:25","Actor":"nguerrera","Number":"3409","RawContent":null,"Title":"Changing RID to one that hasn't been used before can cause design-time build failure","State":"open","Body":"I believe this regressed with #3394 \r\n\r\nIf you do not have the runtime pack in your nuget cache yet, and you change the RID of your project, the design time build will fail. Unfortunately the test that is specifically designed to test this case of changing RIDs is not reliable because dependening on state of nuget cache (say due to tests that have already run), it may pass even though the bug is present.\r\n\r\nWe need a better approach than just skipping ResolveRuntimePackAssets always in design-time builds as was done before #3394, but we can't have it fail as this will block the nomination that would restore the runtime pack.","Url":"https://github.com/dotnet/sdk/issues/3409","RelatedDescription":"Open issue \"Changing RID to one that hasn't been used before can cause design-time build failure\" (#3409)"},{"Id":"466851435","IsPullRequest":true,"CreatedAt":"2019-07-11T12:04:55","Actor":"dotnet-maestro[bot]","Number":"3408","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3408","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3408)"},{"Id":"466269901","IsPullRequest":true,"CreatedAt":"2019-07-10T18:42:26","Actor":"dotnet-maestro[bot]","Number":"3407","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3407","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3407)"},{"Id":"465287305","IsPullRequest":false,"CreatedAt":"2019-07-10T17:29:38","Actor":"vitek-karas","Number":"3405","RawContent":null,"Title":"Add a way to customize the path imprinted into apphost.exe","State":"closed","Body":"Currently there's no supported public way to customize the path to the app which is imprinted into the apphost.exe (to get the native executable). For normal apps it's always the name of the main application dll.\r\n\r\nThere are scenarios where it would be handy to be able to customize the path by redirecting it to a subfolder relative the native exe. See for example https://github.com/dotnet/core-setup/issues/5120 and https://github.com/dotnet/cli/issues/11713. It would not provide a full solution to the issue described there, but it would make it significantly easier to implement a custom solution.","Url":"https://github.com/dotnet/sdk/issues/3405","RelatedDescription":"Closed issue \"Add a way to customize the path imprinted into apphost.exe\" (#3405)"},{"Id":"465219313","IsPullRequest":true,"CreatedAt":"2019-07-10T12:04:12","Actor":"dotnet-maestro[bot]","Number":"3404","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.1\r\n- **Date Produced**: 7/9/2019 7:41 AM\r\n- **Commit**: ef3834feb8615429a58808cdcf9ad9284d767654\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3404","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3404)"},{"Id":"463478792","IsPullRequest":true,"CreatedAt":"2019-07-09T21:24:23","Actor":"dsplaisted","Number":"3389","RawContent":null,"Title":"Fix NullReferenceException in ResolvePackageFileConflicts","State":"closed","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/941481","Url":"https://github.com/dotnet/sdk/pull/3389","RelatedDescription":"Closed or merged PR \"Fix NullReferenceException in ResolvePackageFileConflicts\" (#3389)"},{"Id":"464024281","IsPullRequest":true,"CreatedAt":"2019-07-09T00:46:38","Actor":"MSLukeWest","Number":"3394","RawContent":null,"Title":"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds","State":"closed","Body":"Since this output group is meant to be used by installer projects which deal exclusively with design time builds we need ResolveRuntimePackAssets to always run when building it.\r\n\r\nAlso updating tests for this output group to set DesignTimeBuild=true to more accurately simulate this scenario.","Url":"https://github.com/dotnet/sdk/pull/3394","RelatedDescription":"Closed or merged PR \"Updating PublishItemsOutputGroup to resolve runtime assets during design time builds\" (#3394)"},{"Id":"464945545","IsPullRequest":true,"CreatedAt":"2019-07-07T13:55:07","Actor":"dotnet-maestro[bot]","Number":"3403","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190706.1\r\n- **Date Produced**: 7/6/2019 12:53 PM\r\n- **Commit**: a65d0966dc28861394ce78cfdcb9d5dff370957c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19356.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3403","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3403)"},{"Id":"464847952","IsPullRequest":true,"CreatedAt":"2019-07-06T14:20:21","Actor":"dotnet-maestro[bot]","Number":"3402","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190705.2\r\n- **Date Produced**: 7/5/2019 11:56 PM\r\n- **Commit**: 3e0cbbc6fd6c6d45d7083ee0deb71cec7ea2d91f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19355.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3402","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3402)"},{"Id":"464230214","IsPullRequest":true,"CreatedAt":"2019-07-06T12:04:13","Actor":"dotnet-maestro[bot]","Number":"3396","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190704.2\r\n- **Date Produced**: 7/4/2019 10:42 PM\r\n- **Commit**: 30553c0de34454fb8da5229962501af65eb1233f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19354.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19354.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3396","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3396)"},{"Id":"464827099","IsPullRequest":false,"CreatedAt":"2019-07-06T07:19:22","Actor":"vitek-karas","Number":"3401","RawContent":null,"Title":"Publishing for win fails with unhelpful error message","State":"open","Body":"Trying to publish an app for `win` RID like this:\r\n```\r\ndotnet publish -r win\r\n```\r\n\r\nFails with error like this:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(99,5): error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'win'. [E:\\AppModel\\repro\\ca5\\ca5.csproj]\r\n```\r\n\r\nWhile technically correct, the error doesn't help the user to figure out the solution. Ideally we would check that the specified RID exists and that it's not a leaf in the RID graph. In which case we could report an error with guidance that a more specific RID is required. Or even better list all the available apphost RIDs which are a more specific version of the specified RID. That way we could state that there's win-x86 and win-x64 and the user should pick one.","Url":"https://github.com/dotnet/sdk/issues/3401","RelatedDescription":"Open issue \"Publishing for win fails with unhelpful error message\" (#3401)"},{"Id":"464619133","IsPullRequest":false,"CreatedAt":"2019-07-05T12:30:18","Actor":"appel1","Number":"3400","RawContent":null,"Title":"MSBuild task restore target sometimes fails if multiple projects share a project reference","State":"open","Body":"As part of our build script for CI we do something like this to prepare our projects, about 1500 csproj projects using the 2017 format. They all share a project reference to a common project. \r\n\r\n```xml\r\n<ItemGroup>\r\n  <TargetProjects Include=\"src\\**\\*.csproj\"/>\r\n</ItemGroup>\r\n<MSBuild Projects=\"@(TargetProjects)\" Targets=\"Restore\" BuildInParallel=\"True\"/>\r\n```\r\n\r\nWhen we do this we sometimes, like every other build or so, one or more of the following errors. \r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(121,5): error : The process cannot access the file 'CommonProject\\obj\\CommonProject.csproj.nuget.dgspec.json' because it is being used by another process. [src\\proj1\\proj1.csproj]\r\n\r\nA workaround is to set BuildInParallel to False but that reduces performance quite a bit. \r\n\r\nIs BuildInParallel not supported or is this some other kind of configuration error?","Url":"https://github.com/dotnet/sdk/issues/3400","RelatedDescription":"Open issue \"MSBuild task restore target sometimes fails if multiple projects share a project reference\" (#3400)"},{"Id":"464463291","IsPullRequest":true,"CreatedAt":"2019-07-05T05:08:31","Actor":"drewnoakes","Number":"3399","RawContent":null,"Title":"Continue design time builds if resolving package assets fails","State":"open","Body":"(This is an alternative implementation of #3398.)\r\n\r\nDesign time builds are stopping if `ResolvePackageAssets` hits an error (dotnet/project-system#4992).\r\n\r\nThis PR uses the fact that design-time builds set the `ContinueOnError` property to `ErrorAndContinue`.\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3399","RelatedDescription":"Open PR \"Continue design time builds if resolving package assets fails\" (#3399)"},{"Id":"464416897","IsPullRequest":true,"CreatedAt":"2019-07-05T02:31:06","Actor":"dotnet-bot","Number":"3397","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3397","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3397)"},{"Id":"464066841","IsPullRequest":true,"CreatedAt":"2019-07-05T00:08:59","Actor":"drewnoakes","Number":"3395","RawContent":null,"Title":"Remove double computation of settings hash","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3395","RelatedDescription":"Closed or merged PR \"Remove double computation of settings hash\" (#3395)"},{"Id":"463915913","IsPullRequest":true,"CreatedAt":"2019-07-04T15:16:20","Actor":"dsplaisted","Number":"3392","RawContent":null,"Title":"Don't write the same framework multiple times to RuntimeConfig.json","State":"closed","Body":"Fix dotnet/cli#11709","Url":"https://github.com/dotnet/sdk/pull/3392","RelatedDescription":"Closed or merged PR \"Don't write the same framework multiple times to RuntimeConfig.json\" (#3392)"},{"Id":"464018687","IsPullRequest":true,"CreatedAt":"2019-07-04T01:35:13","Actor":"peterhuene","Number":"3393","RawContent":null,"Title":"Fix unhandled exception when RuntimeList.xml contains duplicates.","State":"open","Body":"This PR fixes an unhandled exception that results when RuntimeList.xml\r\ncontains entries that have the same destination subpath when resolving the\r\nruntime pack assets.  An error is now emitted instead of the unhandled\r\nexception.\r\n\r\nAdditionally, this fixes an unhandled exception that occurs when the\r\nRuntimeList.xml file is not present in the runtime pack that is caused by\r\nthe exception message not having a NETSDK prefix.\r\n\r\nAlso removed an unnecessary override of the `Execute` method for\r\n`GenerateDepsFile` task.  This override should have been removed with a\r\nprevious cleanup PR, but was overlooked.\r\n\r\nFixes dotnet/cli#11705.","Url":"https://github.com/dotnet/sdk/pull/3393","RelatedDescription":"Open PR \"Fix unhandled exception when RuntimeList.xml contains duplicates.\" (#3393)"},{"Id":"463190002","IsPullRequest":true,"CreatedAt":"2019-07-03T22:23:54","Actor":"dotnet-maestro[bot]","Number":"3385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3385)"},{"Id":"463386800","IsPullRequest":false,"CreatedAt":"2019-07-03T20:55:29","Actor":"crmann1","Number":"3388","RawContent":null,"Title":"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)","State":"closed","Body":"During a build of a project that has duplicate references where the duplicate reference is also a conflict the ResolvePackageFileConflicts task crashes with a null reference exception . \r\n\r\n\r\nC:\\Program   Files\\dotnet\\sdk\\3.0.100-preview7-012601\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets\r\n\r\nThe \"ResolvePackageFileConflicts\" task failed unexpectedly.System.NullReferenceException: Object reference not set to an instance of an object.   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.<>c.<ExecuteCore>b__44_0(ITaskItem r) in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()   at System.Collections.Generic.HashSet`1.UnionWith(IEnumerable`1 other)   at System.Collections.Generic.HashSet`1..ctor(IEnumerable`1 collection, IEqualityComparer`1 comparer)   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore() in /_/src/Tasks/Common/ConflictResolution/ResolvePackageFileConflicts.cs:line 160   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 47   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\nThe reason is that in ResolvePackageFileConflicts.cs\r\n      var result = new ITaskItem[original.Length - conflicts.Count]; \r\n\r\nThe assumption is that the length of the result array is just the original list minus the conflict list. But if the original list has duplicates then the result array will be too large and will have null entries in it. \r\n\r\nFurther down that array is processed and fails \r\n\r\nvar referenceItemSpecs = new HashSet<string>(ReferencesWithoutConflicts?.Select(r => r.ItemSpec) ?? Enumerable.Empty<string>(),\r\n                                                                     StringComparer.OrdinalIgnoreCase);\r\n\r\nr=> r.ItemSpec fails because r is null due to the ReferenceWithoutConflicts enumeration containing a null item  due to the problem above.\r\n\r\nRepro for example is to have a file with the following reference items in it\r\n\r\n```\r\n <ItemGroup>\r\n    <Reference Include=\"System.Runtime\" />\r\n    <Reference Include=\"System.Runtime\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3388","RelatedDescription":"Closed issue \"ResolvePackageFileConflicts task throw null reference exception when duplicate references are passed in (and conflicts exist)\" (#3388)"},{"Id":"463798216","IsPullRequest":true,"CreatedAt":"2019-07-03T14:50:59","Actor":"rynowak","Number":"3391","RawContent":null,"Title":"Add build perf test for server-side Blazor template","State":"open","Body":"Adds performance coverage for Blazor, which interacts with the compiler\r\nand SDK differently from other ASP.NET Core templates.\r\n\r\nThis is currently a draft waiting for https://github.com/aspnet/AspNetCore/pull/11550/files to be merged and inserted - that PR renames the template. ","Url":"https://github.com/dotnet/sdk/pull/3391","RelatedDescription":"Open PR \"Add build perf test for server-side Blazor template\" (#3391)"},{"Id":"463496606","IsPullRequest":true,"CreatedAt":"2019-07-03T01:03:09","Actor":"dsplaisted","Number":"3390","RawContent":null,"Title":"Support automatic Link metadata for Page and Resource items","State":"open","Body":"Fix #2697 \r\n","Url":"https://github.com/dotnet/sdk/pull/3390","RelatedDescription":"Open PR \"Support automatic Link metadata for Page and Resource items\" (#3390)"},{"Id":"463190351","IsPullRequest":true,"CreatedAt":"2019-07-02T14:31:35","Actor":"dotnet-bot","Number":"3386","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3386","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3386)"},{"Id":"462963954","IsPullRequest":true,"CreatedAt":"2019-07-02T03:30:51","Actor":"johnbeisner","Number":"3384","RawContent":null,"Title":"Branding update to \"preview8\"; SDK","State":"closed","Body":"Branding update to \"preview8\"; SDK","Url":"https://github.com/dotnet/sdk/pull/3384","RelatedDescription":"Closed or merged PR \"Branding update to \"preview8\"; SDK\" (#3384)"},{"Id":"463343691","IsPullRequest":false,"CreatedAt":"2019-05-30T19:40:42","Actor":"DualBrain","Number":"3387","RawContent":null,"Title":"VB.NET \"My\" not working as expected?","State":"open","Body":"@cston and @KathleenDollard,\r\n\r\nHere is an isolated example running on the most recent bits as far as I can tell (at least with regards to the Microsoft.VisualBasic side of things).\r\n\r\nModule Program\r\n  Sub Main(args As String())\r\n    Console.WriteLine(My.Computer.Name)\r\n    Console.WriteLine((New Microsoft.VisualBasic.Devices.ServerComputer).Name)\r\n    Console.WriteLine(System.Environment.MachineName)\r\n  End Sub\r\nEnd Module\r\n\r\nThe first line doesn’t work in .NET Core 3.0; however, the second and third lines do.  Playing with the same code in the full .NET Framework, all three lines work and when you jump to the reference for My.Computer.Name, it goes to Microsoft.VisualBasic.Devices.ServerComputer.Name.  I then jumped back over to the .NET Core source tree and that property simply returns System.Environment.MachineName.  One thing I find interesting about this is it’s not a 1:1 map… how does My.Computer.Name map to a property inside of an instantiated instance of Microsoft.VisualBasic.Devices.ServerComputer?  Some “magic” black-box stuff there?\r\n\r\nSo am I just missing something as far as how to \"light up\" the My side of things when working with a .NET Core 3.0 console project?  Or is there some additional work that still has to be done beyond the work that has taken place within the Microsoft.VisualBasic namespace?\r\n\r\n(BTW, @cston great work thus far!)\r\n\r\nThanks.\r\n\r\nCory Smith","Url":"https://github.com/dotnet/sdk/issues/3387","RelatedDescription":"Open issue \"VB.NET \"My\" not working as expected?\" (#3387)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1149432245909905409","CreatedAt":"2019-07-11T21:36:17+00:00","UserScreenname":"dotnet","Text":"Discover the world of .NET\n\n#dotNETConf is coming September 23 — 25\nCome celebrate the new .NET Core 3.0 launch wit… https://t.co/gVCxErAzFJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":89,"FavoriteCount":42,"RawContent":null},{"Id":"1148794653312868355","CreatedAt":"2019-07-10T03:22:43+00:00","UserScreenname":"dotnet","Text":"New .NET libraries for Azure. Check it out. The @AzureSdk team is looking for feedback. https://t.co/B6lEi9GIuA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1148301725071216640","CreatedAt":"2019-07-08T18:44:00+00:00","UserScreenname":"dotnet","Text":"Check out this episode of #OnDotNet 🚀🚀\n\n \"Understanding how to use Task and ValueTask\"\n https://t.co/hV7oFV3zdI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":17,"RawContent":null},{"Id":"1146463009100853249","CreatedAt":"2019-07-03T16:57:36+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":4,"RawContent":null},{"Id":"1146188625828147200","CreatedAt":"2019-07-02T22:47:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":18,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-07-12T05:30:44.6703851Z","RunDurationInMilliseconds":16503}