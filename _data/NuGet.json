{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10930064473","Type":"PullRequestEvent","CreatedAt":"2019-11-22T23:38:46","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7709","RelatedDescription":"Merged pull request \"Dropped the `DiagnosticMonitorTraceListener` usage.\" (#7709) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nRemoved some dead code. `DiagnosticMonitorTraceListener` needs to be configured, we don't have any configuration code in the project (or in web.config)."},{"Id":"10929792843","Type":"PullRequestEvent","CreatedAt":"2019-11-22T22:38:54","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7712","RelatedDescription":"Merged pull request \"Link to 'evaluate packages' documentation\" (#7712) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/737941/69391216-f55ec080-0c86-11ea-94d4-eeefcbe100a5.png)\r\n\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/2763"},{"Id":"10928200948","Type":"IssuesEvent","CreatedAt":"2019-11-22T18:28:55","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6094","RelatedDescription":"Closed issue \"NuGet.Server returns 406 instead of 409 on conflict\" (#6094) at NuGet/NuGetGallery","RelatedBody":"When using `nuget push` to publish a package with ID and version already existing on my feed, I receive a 406 (Not Acceptable) error instead of a 409 (Conflict). Because a 406 is also generated if you submit a non-nupkg file, this makes error handling difficult in my CI/CD process as I cannot be sure if I submitted a bad file or if the package already exists. I am not sure if this is an issue with the server or the client, hence posting here.\r\n\r\n```\r\nPS C:\\> nuget push C:\\pathto\\AwesomeLibrary.1.0.0.nupkg -verbosity detailed\r\nNuGet Version: 4.6.2.5055\r\nPushing AwesomeLibrary.1.0.0.nupkg to 'https://nuget.mydomain.com/nuget'...\r\n  PUT https://nuget.mydomain.com/nuget/\r\n  NotAcceptable https://nuget.mydomain.com/nuget/ 347ms\r\nnuget : Response status code does not indicate success: 406 (Not Acceptable).\r\nAt line:1 char:1\r\n+ nuget push C:\\pathto\\AwesomeLibrary.1.0.0.nupkg -verbosity detailed\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (Response status...ot Acceptable).:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n\r\nPS C:\\> nuget push C:\\pathto\\AwesomeLibrary.csproj -verbosity detailed\r\nNuGet Version: 4.6.2.5055\r\nPushing AwesomeLibrary.csproj to 'https://nuget.mydomain.com/nuget'...\r\n  PUT https://nuget.mydomain.com/nuget/\r\n  NotAcceptable https://nuget.mydomain.com/nuget/ 347ms\r\nnuget : Response status code does not indicate success: 406 (Not Acceptable).\r\nAt line:1 char:1\r\n+ nuget push C:\\pathto\\AwesomeLibrary.csproj -verbosity detailed\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (Response status...ot Acceptable).:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n```\r\n\r\nDoing some searching online, it looks like other people get 406 for conflicts, too, but [the API documentation](https://docs.microsoft.com/en-us/nuget/api/package-publish-resource#response) specifies a 409 for conflicts. I can live with the difficulty but would prefer the documented behavior.\r\n\r\n`nuget push` functions as expected if the package doesn't already exist.\r\n\r\n## Details about Problem\r\n\r\nUsing NuGet.exe version: 4.6.2.5055\r\nOS version: Win10 v1703 (15063.1112)\r\n\r\nUsing NuGet.Server version 3.1.2 running on Azure\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Stand up a NuGet.Server instance on Azure configured with an API key and to not allow package overrides.\r\n\r\n2. Publish a package to that server using `nuget push`\r\n\r\n3. Attempt to execute the same command again immediately.\r\n\r\n## web.config\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--\r\n  For more information on how to configure your ASP.NET application, please visit\r\n  https://go.microsoft.com/fwlink/?LinkId=169433\r\n  -->\r\n<configuration>\r\n  <!--\r\n    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.\r\n\r\n    The following attributes can be set on the <httpRuntime> tag.\r\n      <system.Web>\r\n        <httpRuntime targetFramework=\"4.6\" />\r\n      </system.Web>\r\n  --><system.web>    \r\n    <!-- maxRequestLength is specified in Kb --><httpRuntime targetFramework=\"4.6.1\" maxRequestLength=\"30720\" />\r\n  <compilation debug=\"true\" targetFramework=\"4.6\" /></system.web>\r\n  <system.codedom>\r\n    <compilers>\r\n      <compiler language=\"c#;cs;csharp\" extension=\".cs\" type=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" warningLevel=\"4\" compilerOptions=\"/langversion:default /nowarn:1659;1699;1701\" />\r\n      <compiler language=\"vb;vbs;visualbasic;vbscript\" extension=\".vb\" type=\"Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=1.0.7.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" warningLevel=\"4\" compilerOptions=\"/langversion:default /nowarn:41008 /define:_MYTYPE=\\&quot;Web\\&quot; /optionInfer+\" />\r\n    </compilers>\r\n  </system.codedom>\r\n<system.webServer>\r\n    <handlers>\r\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\r\n      <remove name=\"OPTIONSVerbHandler\" />\r\n      <remove name=\"TRACEVerbHandler\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n    <remove name=\"WebDAV\" /><!-- Depending on IIS configuration, these may have to be added.\r\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"GET,HEAD,POST,PUT,DEBUG\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n      <remove name=\"OPTIONSVerbHandler\" /><remove name=\"TRACEVerbHandler\" />\r\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\r\n      --></handlers>\r\n  <staticContent>\r\n      <mimeMap fileExtension=\".nupkg\" mimeType=\"application/zip\" />\r\n    </staticContent><modules runAllManagedModulesForAllRequests=\"true\">\r\n      <remove name=\"WebDAVModule\" />\r\n    </modules><security>\r\n      <requestFiltering>\r\n        <!-- maxAllowedContentLength is specified in Bytes -->\r\n        <requestLimits maxAllowedContentLength=\"31457280\" />\r\n      </requestFiltering>\r\n    </security></system.webServer><appSettings>\r\n    <!--\r\n    Determines if an Api Key is required to push\\delete packages from the server. \r\n    -->\r\n    <add key=\"requireApiKey\" value=\"true\" />\r\n\r\n    <!-- \r\n    Set the value here to allow people to push/delete packages from the server.\r\n    NOTE: This is a shared key (password) for all users.\r\n    -->\r\n    <add key=\"apiKey\" value=\"myapikeyvalue\" />\r\n\r\n    <!--\r\n    Change the path to the packages folder. Default is ~/Packages.\r\n    This can be a virtual or physical path.\r\n    -->\r\n    <add key=\"packagesPath\" value=\"\" />\r\n\r\n    <!--\r\n    Change the name of the internal cache file. Default is machine name (System.Environment.MachineName).\r\n    This is the name of the cache file in the packages folder. No paths allowed.\r\n    -->\r\n    <add key=\"cacheFileName\" value=\"\" />\r\n\r\n    <!--\r\n    Set allowOverrideExistingPackageOnPush to false to mimic NuGet.org's behaviour (do not allow overwriting packages with same id + version).\r\n    -->\r\n    <add key=\"allowOverrideExistingPackageOnPush\" value=\"false\" />\r\n\r\n    <!--\r\n    Set ignoreSymbolsPackages to true to filter out symbols packages. Since NuGet.Server does not come with a symbol server,\r\n    it makes sense to ignore this type of packages. When enabled, files named `.symbols.nupkg` or packages containing a `/src` folder will be ignored.\r\n    \r\n    If you only push .symbols.nupkg packages, set this to false so that packages can be uploaded.\r\n    -->\r\n    <add key=\"ignoreSymbolsPackages\" value=\"true\" />\r\n\r\n    <!--\r\n    Set enableDelisting to true to enable delist instead of delete as a result of a \"nuget delete\" command.\r\n    - delete: package is deleted from the repository's local filesystem.\r\n    - delist: \r\n      - \"nuget delete\": the \"hidden\" file attribute of the corresponding nupkg on the repository local filesystem is turned on instead of deleting the file.\r\n      - \"nuget list\" skips delisted packages, i.e. those that have the hidden attribute set on their nupkg.\r\n      - \"nuget install packageid -version version\" command will succeed for both listed and delisted packages.\r\n        e.g. delisted packages can still be downloaded by clients that explicitly specify their version.\r\n    -->\r\n    <add key=\"enableDelisting\" value=\"false\" />\r\n\r\n    <!--\r\n    Set enableFrameworkFiltering to true to enable filtering packages by their supported frameworks during search.\r\n    -->\r\n    <add key=\"enableFrameworkFiltering\" value=\"false\" />\r\n\r\n    <!--\r\n    When running NuGet.Server in a NAT network, ASP.NET may embed the server's internal IP address in the V2 feed.\r\n    Uncomment the following configuration entry to enable NAT support.\r\n    -->\r\n    <!-- <add key=\"aspnet:UseHostHeaderForRequestUrl\" value=\"true\" /> -->\r\n    <!--\r\n    Set enableFileSystemMonitoring to true (default) to enable file system monitoring (which will update the package cache appropriately on file system changes).\r\n    Set it to false to disable file system monitoring.\r\n    NOTE: Disabling file system monitoring may result in increased storage capacity requirements as package cache may only be purged by a background job running \r\n    on a fixed 1-hour interval.\r\n    -->\r\n    <add key=\"enableFileSystemMonitoring\" value=\"true\" />\r\n  </appSettings><system.serviceModel>\r\n    <serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\" />\r\n  </system.serviceModel><runtime>\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Newtonsoft.Json\" publicKeyToken=\"30ad4fe6b2a6aeed\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-9.0.0.0\" newVersion=\"9.0.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Web.Http\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.2.3.0\" newVersion=\"5.2.3.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Net.Http.Formatting\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.2.3.0\" newVersion=\"5.2.3.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Data.Edm\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Data.OData\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"System.Spatial\" publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-5.7.0.0\" newVersion=\"5.7.0.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n  </runtime></configuration>\r\n```"},{"Id":"10921884565","Type":"PullRequestEvent","CreatedAt":"2019-11-22T01:42:20","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7712","RelatedDescription":"Opened pull request \"Link to 'evaluate packages' documentation\" (#7712) at NuGet/NuGetGallery","RelatedBody":"Part of https://github.com/NuGet/Engineering/issues/2763"},{"Id":"10920207561","Type":"IssuesEvent","CreatedAt":"2019-11-21T20:44:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7699","RelatedDescription":"Closed issue \"Setup instructions cannot create database(s)\" (#7699) at NuGet/NuGetGallery","RelatedBody":"When I clone the project and go through the setup instructions, specifically running `.\\tools\\Setup-DevEnvironment.ps1` I get errors on the database creation steps:\r\n\r\n```\r\n[BEGIN] Running Migrations\r\nUpdating Nuget Gallery database...\r\nERROR: Method not found: 'System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasIndex(System.Linq.Expressions.Expression`1<System.Func`2<!0,!!0>>)'.\r\nUpdating Nuget Gallery Support request database...\r\nERROR: Method not found: 'System.Data.Common.DbConnection System.Data.Entity.Core.Common.DbProviderServices.CloneDbConnection(System.Data.Common.DbConnection)'.\r\nUpdate Complete!\r\n[DONE] Running Migrations\r\n```\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Clone project\r\n2. Run `.\\build`\r\n3. Run `.\\tools\\Setup-DevEnvironment.ps1`\r\n4. See error\r\n\r\n### Expected behavior\r\nExpect database creation to occur so that project can run successfully."},{"Id":"10920196052","Type":"PullRequestEvent","CreatedAt":"2019-11-21T20:42:24","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7711","RelatedDescription":"Merged pull request \"Use ef6.exe instead of migrate.exe\" (#7711) at NuGet/NuGetGallery","RelatedBody":"This addresses a breaking change introduced in 6.3.0 which eliminates migrate.exe and replaces it with ef6.exe.\r\nAddress https://github.com/NuGet/NuGetGallery/issues/7699\r\nMigration details available here: https://github.com/aspnet/EntityFramework.Docs/issues/1740#issuecomment-557204757\r\n\r\nI also removed some sad \"Nuget\" instances with \"NuGet\". You're welcome, marketing!"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10928988907","Type":"IssuesEvent","CreatedAt":"2019-11-22T20:23:27","Actor":"shaipetel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8852","RelatedDescription":"Opened issue \"Nuget package restore not working vs2019\" (#8852) at NuGet/Home","RelatedBody":"Building a project throws this error:\r\n\r\nThis project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is C:\\Repos\\***\\***\\\\.nuget\\NuGet.targets.\r\n\r\nI checked and nuget package restore is enabled.\r\n\r\nI closed and reopened visual studio, tried to build, opened nuget manager but it is not building and not restoring missing packages.\r\n\r\nI followed this article:\r\nhttps://docs.microsoft.com/en-us/nuget/consume-packages/package-restore-troubleshooting\r\nWhich suggests if the packages are not restored automatically to file an issue here.\r\n\r\nPlease advise.\r\n\r\nusing visual studio enterprise 2019 version 16.3.9\r\nthe project opens and works fine on a different computer with vs2017"},{"Id":"10928353023","Type":"IssuesEvent","CreatedAt":"2019-11-22T18:50:04","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8804","RelatedDescription":"Closed issue \"Logic in _GetRestoreProjectStyle should be in a task\" (#8804) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe `_GetRestoreProjectStyle` target in `NuGet.targets` has its logic declared as MSBuild XML rather than a task.  This makes it more difficult to unit test and reuse the logic.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Any\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\ndotnet.exe --version (if appropriate): Any\r\n\r\nVS version (if appropriate): Any\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Any\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10923466351","Type":"IssuesEvent","CreatedAt":"2019-11-22T07:47:17","Actor":"The-real-Urb","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8851","RelatedDescription":"Opened issue \"NuGet.exe list/push/... unable to connect to feed: Specified method is not supported\" (#8851) at NuGet/Home","RelatedBody":"NuGet Version: 4.7.3.5893\r\nNuGet Version: 4.9.4.5839\r\nNuGet Version: 5.3.1.6268\r\n\r\nOS version:\r\nLSB Version:    core-9.20170808ubuntu1-noarch:security-9.20170808ubuntu1-noarch\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.3 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n\r\nmono version:\r\nMono JIT compiler version 6.4.0.198 (tarball Tue Sep 24 01:21:28 UTC 2019)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n        TLS:           __thread\r\n        SIGSEGV:       altstack\r\n        Notifications: epoll\r\n        Architecture:  amd64\r\n        Disabled:      none\r\n        Misc:          softdebug\r\n        Interpreter:   yes\r\n        LLVM:          yes(610)\r\n        Suspend:       hybrid\r\n        GC:            sgen (concurrent by default)\r\n\r\nWe installed the Microsoft NuGet Credentials Provider with the automatic bash script.\r\nhttps://github.com/Microsoft/artifacts-credprovider/blob/master/README.md#automatic-bash-script\r\n\r\n## Problem\r\n\r\nWe have a new build-container for our Azure-DevOps-Pipelines. In our pipeline, we need to push nuget packages to our on-premise TFS-package-feed.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a PAT token in the on-premise VSTS/TFS for a tfs-user. Use the PAT and username in next step.\r\n2. Create the nuget.config.\r\n/usr/bin/mono /_work/_tool/NuGet/5.3.1/x64/nuget.exe sources Add -Name \"PackageFeed\" -Source \"http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json\"  -ConfigFile ~/my_nuget.config -username xxx_xxxx_xxxxxxxxxxxx@xxxxx.xx -password m32165498321654983216549832165498732165498732165498a\r\n3. Test by listing the feed:\r\n/usr/bin/mono /_work/_tool/NuGet/5.3.1/x64/nuget.exe list -ConfigFile ~/my_nuget.config -Source PackageFeed -Verbosity Detailed\r\n\r\nThis gives back the error: \r\nUnable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json.\r\n  Specified method is not supported.\r\n\r\n### Verbose Logs\r\n\r\nUnable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json.\r\n  Specified method is not supported.\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json. ---> System.NotSupportedException: Specified method is not supported.\r\n  at Microsoft.Win32.SafeHandles.SafeGssNameHandle.CreatePrincipal (System.String name) [0x0000e] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.SafeDeleteNegoContext..ctor (System.Net.Security.SafeFreeNegoCredentials credential, System.String targetName) [0x0001c] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext (System.Net.Security.SafeFreeNegoCredentials credential, System.Net.Security.SafeDeleteContext& context, System.String targetName, System.Net.ContextFlagsPal inFlags, System.Net.Security.SecurityBuffer inputBuffer, System.Net.Security.SecurityBuffer outputBuffer, System.Net.ContextFlagsPal& outFlags) [0x0000b] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.NegotiateStreamPal.InitializeSecurityContext (System.Net.Security.SafeFreeCredentials credentialsHandle, System.Net.Security.SafeDeleteContext& securityContext, System.String spn, System.Net.ContextFlagsPal requestedContextFlags, System.Net.Security.SecurityBuffer[] inSecurityBufferArray, System.Net.Security.SecurityBuffer outSecurityBuffer, System.Net.ContextFlagsPal& contextFlags) [0x0002a] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.NTAuthentication.GetOutgoingBlob (System.Byte[] incomingBlob, System.Boolean throwOnError, System.Net.SecurityStatusPal& statusCode) [0x00096] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.NTAuthentication.GetOutgoingBlob (System.String incomingBlob) [0x00033] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean isProxyAuth, System.Net.Http.HttpConnection connection, System.Net.Http.HttpConnectionPool connectionPool, System.Threading.CancellationToken cancellationToken) [0x00290] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x000b1] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean preAuthenticate, System.Boolean isProxyAuth, System.Boolean doRequestAuth, System.Net.Http.HttpConnectionPool pool, System.Threading.CancellationToken cancellationToken) [0x00112] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.DecompressionHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ca] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.ServerWarningLogHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00088] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.StsAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000bf] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000c4] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x000b3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T] (System.Func`2[T,TResult] getTask, System.TimeSpan timeout, System.String timeoutMessage, System.Threading.CancellationToken token) [0x001cd] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpRetryHandler.SendAsync (NuGet.Protocol.HttpRetryHandlerRequest request, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x004d5] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource.GetThrottledResponse (System.Func`1[TResult] requestFactory, System.TimeSpan requestTimeout, System.TimeSpan downloadTimeout, System.Int32 maxTries, System.Guid sessionId, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x001e0] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource+<>c__DisplayClass14_0`1[T].<GetAsync>b__0 (System.Threading.CancellationToken lockedToken) [0x00297] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T] (System.String filePath, System.Func`2[T,TResult] action, System.Threading.CancellationToken token) [0x00234] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource.GetAsync[T] (NuGet.Protocol.HttpSourceCachedRequest request, System.Func`2[T,TResult] processAsync, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x000ea] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3 (NuGet.Protocol.Core.Types.SourceRepository source, System.DateTime utcNow, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x0021a] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n   --- End of inner exception stack trace ---\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3 (NuGet.Protocol.Core.Types.SourceRepository source, System.DateTime utcNow, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x002ce] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate (NuGet.Protocol.Core.Types.SourceRepository source, System.Threading.CancellationToken token) [0x00213] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T] (System.Threading.CancellationToken token) [0x000b8] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.V3FeedListResourceProvider.TryCreate (NuGet.Protocol.Core.Types.SourceRepository source, System.Threading.CancellationToken token) [0x00082] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T] (System.Threading.CancellationToken token) [0x000b8] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Commands.ListCommandRunner.ExecuteCommand (NuGet.Commands.ListArgs listArgs) [0x000df] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.ListCommand.ExecuteCommandAsync () [0x0010a] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.Command.Execute () [0x000ea] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c1] in <ff502667b3fe4a85827635c6fe6b0d0d>:0"},{"Id":"10921703336","Type":"IssuesEvent","CreatedAt":"2019-11-22T01:00:39","Actor":"donnie-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8837","RelatedDescription":"Closed issue \"Add Missing PushCommand Functional Tests for snupkg and FileNotFound scenarios\" (#8837) at NuGet/Home","RelatedBody":"## Details about Problem\r\nPushCommandTests currently miss testing several features of Push involving snupkgs and FileNotFound errors. \r\n\r\nThese tests are needed so that there is existing test code that can be modified in the soon to be resolved bug fix: https://github.com/NuGet/Home/issues/8148"},{"Id":"10920962819","Type":"IssuesEvent","CreatedAt":"2019-11-21T22:32:27","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8782","RelatedDescription":"Closed issue \"vs/nuget/nugetaction telemetry doesn't adequately capture cancellation\" (#8782) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used VS UI\r\n\r\nNuGet version (x.x.x.xxx): \r\n\r\nVS version (if appropriate): 16.4.0 preview 3.0 \r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10 1909 build 18363.418\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Launch VS.  Open C# console app.  Manage nuget packages for project.  Use fiddler or another tool to examine VS telemetry leaving the machine.\r\n\r\n2. select a nuget package to install\r\n3. click install\r\n4. at one of the various promps, choose \"cancel\" instead of continue\r\n5. Look for the vs/nuget/nugetaction event\r\n\r\nExpected: install state doesn't indicate \"Success\"\r\nActual: event suggests that packages were actually installed\r\n\r\nWhen the user cancels for some reason, the event should indicate that they cancelled, and should give additional reasons on why/where they cancelled.\r\n\r\n"},{"Id":"10919489976","Type":"IssuesEvent","CreatedAt":"2019-11-21T19:08:22","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8841","RelatedDescription":"Closed issue \"Test with self-issued certificate didn't set KeyCertSign nor CrlSign \" (#8841) at NuGet/Home","RelatedBody":"From [RFC 5280, section 4.2.1.3](https://tools.ietf.org/html/rfc5280#section-4.2.1.3):\r\n```\r\n   If the keyUsage extension is present, then the subject public key\r\n   MUST NOT be used to verify signatures on certificates or CRLs unless\r\n   the corresponding keyCertSign or cRLSign bit is set.\r\n```\r\nBut SigningTestUtility.cs will generate self-issued certificate without setting IsCA=true, so X509KeyUsageFlags.CrlSign and X509KeyUsageFlags.KeyCertSign are not set. \r\n(It will generate PartialChain status when chain build on such self-issued certificate.)"},{"Id":"10912038255","Type":"IssuesEvent","CreatedAt":"2019-11-21T01:13:38","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8847","RelatedDescription":"Closed issue \"\"An item with the same key has already been added\" when restoring in Visual Studio\" (#8847) at NuGet/Home","RelatedBody":"Using latest internal preview, or built from latest dev branch only. Latest public preview not affected."},{"Id":"10911282551","Type":"IssuesEvent","CreatedAt":"2019-11-20T22:44:33","Actor":"karann-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8850","RelatedDescription":"Opened issue \"NuGet PM UI for Solution erroneously states \"Blocked by packages.config\" for a solution that contains a C++ project\" (#8850) at NuGet/Home","RelatedBody":"1. create a new c++ project\r\n2. open PM UI for solution\r\n3. search for \"curl\"\r\n4. Observer the \"version\" combobox\r\n\r\n![image](https://user-images.githubusercontent.com/16904420/69284766-3d58e700-0ba4-11ea-9e99-60701510844b.png)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-24T05:30:44.0006818Z","RunDurationInMilliseconds":1839}