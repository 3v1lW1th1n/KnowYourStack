{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7395883754","Type":"IssuesEvent","CreatedAt":"2018-03-18T04:26:55","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17020","RelatedDescription":"Opened issue \"[Arm/Arm64/Linux] Support running corefx tests\" (#17020) at dotnet/coreclr","RelatedBody":"@debayang & I are starting to look at this.\r\n\r\n@BruceForstall We would like to ask for you to help by helping us understand the [Arm/Windows] workflow.  And also for consultation on Linux specific issues.\r\n\r\n"},{"Id":"7395549289","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:22:52","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13809","RelatedDescription":"Closed issue \"Used in the DOCKER dotnet restore error Segmentation fault (core dumped)\" (#13809) at dotnet/coreclr","RelatedBody":"I built Jenkins in docker container, then entered the container to install the dotnet core 2.0 SDK, and when I used the dotnew new console - o hwapp in container, there was an error: \r\n`Running 'dotnet restore' on hwapp/hwapp.csproj...\r\nSegmentation fault (core dumped)\r\n`"},{"Id":"7395547039","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:21:09","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16806","RelatedDescription":"Closed issue \".Net Standard 2.1?\" (#16806) at dotnet/coreclr","RelatedBody":"I can't find any information about a .net standard 2.1.\r\n\r\nI really want to use the new Span-ified methods like Stream.Read in my class libraries, but it looks like that stuff isn't in System.Memory but rather the .net core 2.1 SDK. Any other way to get these APIs, or do I have to wait for .net standard 2.1. And is there any ETA on that?"},{"Id":"7395542604","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:17:14","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13542","RelatedDescription":"Closed issue \" An assembly specified in the application dependencies manifest (RhWeb.deps.json) was not found\" (#13542) at dotnet/coreclr","RelatedBody":"I got a weird error on IIS since I migrate my Asp.Net Core 1.1 to Asp.Net Core 2.0.\r\nI publish with MSBuild interface.\r\n\r\nI don't use ApplicationInsights.AspNetCore in my project....\r\n\r\nHere is the error message.\r\n\r\n```\r\nError:\r\n  An assembly specified in the application dependencies manifest (RhWeb.deps.json) was not found:\r\n    package: 'Microsoft.ApplicationInsights.AspNetCore', version: '2.1.1'\r\n    path: 'lib/netstandard1.6/Microsoft.ApplicationInsights.AspNetCore.dll'\r\n\r\n  This assembly was expected to be in the local runtime store as the application was published using the following target manifest files:\r\n    aspnetcore-store-2.0.0-linux-x64.xml;aspnetcore-store-2.0.0-osx-x64.xml;aspnetcore-store-2.0.0-win7-x64.xml;aspnetcore-store-2.0.0-win7-x86.xm\r\n```"},{"Id":"7395531612","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:08:24","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16679","RelatedDescription":"Closed issue \"Tizen legs are failing in CoreFX CI\" (#16679) at dotnet/coreclr","RelatedBody":"Tizen armel Debug Build \r\n\r\n@RussKeldorph who sponsors this leg? \r\n\r\n```\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: Unable to find package runtime.tizen.4.0.0-armel.Microsoft.NETCore.DotNetHost with version (>= 2.1.0-preview2-26228-04)\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 109 version(s) in https://tizen.myget.org/F/dotnet-core/api/v3/index.json [ Nearest version: 2.1.0-preview2-26228-03 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 3 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: Unable to find package runtime.tizen.4.0.0-armel.Microsoft.NETCore.DotNetHostPolicy with version (>= 2.1.0-preview2-26228-04)\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 109 version(s) in https://tizen.myget.org/F/dotnet-core/api/v3/index.json [ Nearest version: 2.1.0-preview2-26228-03 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 3 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: Unable to find package runtime.tizen.4.0.0-armel.Microsoft.NETCore.DotNetHostResolver with version (>= 2.1.0-preview2-26228-04)\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 109 version(s) in https://tizen.myget.org/F/dotnet-core/api/v3/index.json [ Nearest version: 2.1.0-preview2-26228-03 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 3 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: Unable to find package runtime.tizen.4.0.0-armel.Microsoft.NETCore.DotNetAppHost with version (>= 2.1.0-preview2-26228-04)\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 109 version(s) in https://tizen.myget.org/F/dotnet-core/api/v3/index.json [ Nearest version: 2.1.0-preview2-26228-03 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 3 version(s) in nuget.org [ Nearest version: 2.0.0 ]\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n/opt/corefx/external/runtime/runtime.depproj : error NU1102: - Found 0 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\r\n/opt/corefx/Tools/packageresolve.targets(48,5): error MSB3073: The command \"\"/opt/corefx/Tools/dotnetcli/dotnet\" restore --packages \"/opt/corefx/packages\" --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json --source https://tizen.myget.org/F/dotnet-core/api/v3/index.json /opt/corefx/external/runtime/runtime.depproj /p:TargetGroup=netcoreapp /p:ConfigurationGroup=Debug /p:ArchGroup=armel /p:OSGroup=Unix /p:TargetFramework=netcoreapp2.1 -r tizen.4.0.0-armel \" exited with code 1. [/opt/corefx/external/runtime/runtime.depproj]\r\n```\r\n\r\n"},{"Id":"7395530913","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:07:49","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16298","RelatedDescription":"Closed issue \"macOS dotnet restore SIGILL (exit code 132) after crossgen in CoreCLR official build\" (#16298) at dotnet/coreclr","RelatedBody":"Broken build: https://devdiv.visualstudio.com/DevDiv/_build?buildId=1363918:\r\n\r\n```\r\nCommencing build of managed components for OSX.x64.Release\r\nRunning init-tools.sh\r\nTools are already initialized\r\nRunning: /Users/buildagent/agent/_work/382/s/Tools/dotnetcli/dotnet /Users/buildagent/agent/_work/382/s/Tools/run.exe ...\r\nRunning: /Users/buildagent/agent/_work/382/s/Tools/msbuild.sh /nologo /verbosity:minimal /clp:Summary ...\r\n/Users/buildagent/agent/_work/382/s/Tools/packageresolve.targets(48,5): error MSB3073: The command \"\"/Users/buildagent/agent/_work/382/s/Tools/dotnetcli/dotnet\" restore --packages \"/Users/buildagent/agent/_work/382/s/packages\" --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json /Users/buildagent/agent/_work/382/s/src/ToolBox/SOS/NETCore/SOS.NETCore.csproj /p:TargetGroup= /p:ConfigurationGroup= /p:ArchGroup= /p:OSGroup= /p:TargetFramework=  \" exited with code 132. [/Users/buildagent/agent/_work/382/s/src/ToolBox/SOS/NETCore/SOS.NETCore.csproj]\r\n  System.Private.CoreLib -> /Users/buildagent/agent/_work/382/s/bin/Product/OSX.x64.Release/System.Private.CoreLib.dll\r\n  Potentially Dangerous Compiler Definitions in clrdefinitions.cmake (omitted in native build):\r\n  Potentially Dangerous Compiler Definitions in clr.defines.targets (omitted in managed build):\r\n  Definition Check Completed.\r\n\r\nBuild FAILED.\r\n\r\n/Users/buildagent/agent/_work/382/s/Tools/packageresolve.targets(48,5): error MSB3073: The command \"\"/Users/buildagent/agent/_work/382/s/Tools/dotnetcli/dotnet\" restore --packages \"/Users/buildagent/agent/_work/382/s/packages\" --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json --source https://api.nuget.org/v3/index.json /Users/buildagent/agent/_work/382/s/src/ToolBox/SOS/NETCore/SOS.NETCore.csproj /p:TargetGroup= /p:ConfigurationGroup= /p:ArchGroup= /p:OSGroup= /p:TargetFramework=  \" exited with code 132. [/Users/buildagent/agent/_work/382/s/src/ToolBox/SOS/NETCore/SOS.NETCore.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nBased on other issues about SIGILL I assume this has to do with crossgen, but I don't know for sure.\r\n\r\nThis appears to be flakiness, and isn't blocking the builds. .NET CLI tools version is 2.0.0. I wasn't able to find any more relevant info in the logs the build saved.\r\n\r\nMoved from https://github.com/dotnet/core-eng/issues/2618."},{"Id":"7395488592","Type":"PullRequestEvent","CreatedAt":"2018-03-17T22:33:34","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17019","RelatedDescription":"Opened pull request \"Fix BuildConfiguration casing so publishing works\" (#17019) at dotnet/coreclr","RelatedBody":"Tough to be sure this is a real fix.  My private official build run got past the point of failure, though that could have been luck since it wasn't 100% repro.  Ultimately, the build failed due to dotnet/core-eng#2923, but I think it would have succeeded had it not been for that.\r\n\r\nFixes #16990 "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7395549266","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:22:51","Actor":"RussKeldorph","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8834","RelatedDescription":"Opened issue \"Used in the DOCKER dotnet restore error Segmentation fault (core dumped)\" (#8834) at dotnet/cli","RelatedBody":"_From @Loongle on September 6, 2017 14:3_\n\nI built Jenkins in docker container, then entered the container to install the dotnet core 2.0 SDK, and when I used the dotnew new console - o hwapp in container, there was an error: \r\n`Running 'dotnet restore' on hwapp/hwapp.csproj...\r\nSegmentation fault (core dumped)\r\n`\n\n_Copied from original issue: dotnet/coreclr#13809_"},{"Id":"7395229162","Type":"PullRequestEvent","CreatedAt":"2018-03-17T19:34:10","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8833","RelatedDescription":"Opened pull request \"Change --source to --source-feed and make it additional\" (#8833) at dotnet/cli","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8561\r\n\r\nOther than change source to source-feed and make it additional instead of exclusive. I changed source to be multiple. Because restore support multiple source https://github.com/Microsoft/dotnet/issues/361\r\n\r\nAs for mock. The offline feed and source feed is considered the same, so remove the category of “source”. \r\n\r\nI renamed source to “AdditionalFeed” because that is more accurate on implementation level.\r\n\r\nNote:\r\nNuGet feed don’t have order. Whichever responses the fastest, is the first.\r\nNo change on restore.\r\n\r\nscripts/cli-test-env.sh change is due to mac 10.13 is finally added to RID graph. And it is “considered” one of the CLI supported RID\r\n\r\n"},{"Id":"7395036425","Type":"IssuesEvent","CreatedAt":"2018-03-17T17:35:57","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8832","RelatedDescription":"Opened issue \".NET Core application name does not change in taskbar?\" (#8832) at dotnet/cli","RelatedBody":"@mudasir111 commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1351)\n\n.NET Core application name does not change in taskbar?\r\n\r\nEven after the self contained publishing the process name doesn't change, the assembly name property seems to work only on changing the .dll file name.\r\n\r\nI have four applications running, but for each process it shows dotnet as shown in the picture\r\n\r\n\r\n\r\n\r\n![attachment](https://user-images.githubusercontent.com/25227248/37447441-223afbf2-2848-11e8-99af-5f4ae191a37a.PNG)\r\n\r\n\r\n\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373345760)\n\nI think this is a duplicate of https://github.com/dotnet/core-setup/issues/2007.\n\n---\n\n@Petermarcu commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373487316)\n\n@steveharter @nguerrera is this something for the host or something that needs to be fixed in publish. Host doesn't know the name of the app until publish.\n\n---\n\n@Petermarcu commented on [Thu Mar 15 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373490032)\n\nI think the different here is that for a self-contained application or any application where the host is renamed to match the program name, we should be able to give something better in task manager.\n\n---\n\n@Petermarcu commented on [Sat Mar 17 2018](https://github.com/dotnet/core/issues/1351#issuecomment-373938344)\n\n@nguerrera @livarcocc I'm going to move this to the CLI repo because I think this is about what happens when the apphost exe is renamed and updated to \"look like the app\".\n\n"},{"Id":"7394972561","Type":"PullRequestEvent","CreatedAt":"2018-03-17T16:58:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8831","RelatedDescription":"Closed pull request \"WIP Source to source feed\" (#8831) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7394877666","Type":"PullRequestEvent","CreatedAt":"2018-03-17T16:02:36","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8831","RelatedDescription":"Opened pull request \"WIP Source to source feed\" (#8831) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7393901722","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:16:48","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8830","RelatedDescription":"Opened pull request \"Implement the --tool-path option for list tool command.\" (#8830) at dotnet/cli","RelatedBody":"This PR implements the missing `--tool-path` option for the list tool command.  This enables the command to list locally installed tools.\r\n\r\nFixes #8803.\r\n\r\nAlso fixes #8829."},{"Id":"7393856458","Type":"IssuesEvent","CreatedAt":"2018-03-17T02:39:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8829","RelatedDescription":"Opened issue \"Tool installation with relative --tool-path option fails to install.\" (#8829) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `dotnet install tool --tool-path foo dotnetsay`\r\n\r\n## Expected  behavior\r\nExpected the tool to install into `$(pwd)/foo`.\r\n\r\n## Actual behavior\r\nThe installation fails:\r\n\r\n```\r\n$ dotnet install tool --tool-path foo dotnetsay\r\nFailed to install tool package 'dotnetsay': Could not find a part of the path '/Users/peterhuene/src/cli/test/dotnet.Tests/foo/.store/.stage/5xnuzw3m.n3c/dotnetsay'.\r\nTool 'dotnetsay' failed to install.\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008366\r\n Commit:    680e72993b\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-preview2-008366/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26313-01\r\n  Commit:  3c802455b2\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008366 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30338 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30338 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26313-01 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n## Bug\r\n\r\nThe tool package store is storing a relative path instead of a full path, causing a relative path to be passed to NuGet via the temp project.  Thus NuGet restores relative to the temp project directory and not the current working directory."},{"Id":"7393713921","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:57:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8828","RelatedDescription":"Opened pull request \"Update SDK to 2.1.200-preview-62717-01\" (#8828) at dotnet/cli","RelatedBody":""},{"Id":"7393675480","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:34:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8811","RelatedDescription":"Merged pull request \"Update SDK to 2.1.200-preview-62715-08\" (#8811) at dotnet/cli","RelatedBody":"Addresses https://devdiv.visualstudio.com/DevDiv/Managed%20Project%20System/_queries?id=580176&fullScreen=false&_a=edit"},{"Id":"7393671621","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:32:31","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8822","RelatedDescription":"Merged pull request \"Merge master into release/2.1.3xx\" (#8822) at dotnet/cli","RelatedBody":"This was a clean merge."},{"Id":"7393646018","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:19:15","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8827","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to master\" (#8827) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7395784656","Type":"IssuesEvent","CreatedAt":"2018-03-18T02:51:21","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/683","RelatedDescription":"Opened issue \"netstandard2.0 library, dependent on Microsoft.Win32.Registry, doesn't work from net471 when loaded via MEF\" (#683) at dotnet/standard","RelatedBody":"@jherby2k commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1311)\n\n# Issue Title\r\n\r\nI'm building a .net standard 2.0 library that uses MEF to load extensions. The MEF parts are also .net standard 2.0.\r\n\r\nEverything works fine when called from netcore2.0 test project. But if i have the test project also target net471, calls to Microsoft.Win32.Registry from the MEF part fail (Registry.LocalMachine returns null). I assume this is because Microsoft.Win32.Registry has a net461-specific library that isn't present.\r\n\r\nI see this problem doesn't exist if, instead of using MEF, i just directly depend on the part. I imagine MEF prevents the framework-specific dependencies from flowing through correctly. Any suggestions?\r\n\r\n# General\r\n\r\nYou can repro this by cloning https://github.com/jherby2k/AudioWorks.git then changing the AudioWorks.Api.Tests projects to also target net471. Tests using the AudioWorks.Extensions.Apple extension will fail because it can't read the registry.\n\n"},{"Id":"7395546948","Type":"IssuesEvent","CreatedAt":"2018-03-17T23:21:04","Actor":"RussKeldorph","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/682","RelatedDescription":"Opened issue \".Net Standard 2.1?\" (#682) at dotnet/standard","RelatedBody":"_From @jherby2k on March 7, 2018 19:35_\n\nI can't find any information about a .net standard 2.1.\r\n\r\nI really want to use the new Span-ified methods like Stream.Read in my class libraries, but it looks like that stuff isn't in System.Memory but rather the .net core 2.1 SDK. Any other way to get these APIs, or do I have to wait for .net standard 2.1. And is there any ETA on that?\n\n_Copied from original issue: dotnet/coreclr#16806_"},{"Id":"7393599747","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:57:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/681","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02616-02 (master)\" (#681) at dotnet/standard","RelatedBody":""},{"Id":"7392651460","Type":"IssuesEvent","CreatedAt":"2018-03-16T19:27:19","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/680","RelatedDescription":"Opened issue \"Not able to get non-framework assemblies to be trimmed\" (#680) at dotnet/standard","RelatedBody":"Using the latest prerelease and on the option `<TrimUnusedDependencies>true</TrimUnusedDependencies>` in each root project, I'm now getting three non-framework assemblies (with pdbs) in the output which should have been trimmed.\r\n\r\nTwo of these assemblies are only referenced transitively via package references.  The other assembly is from a directly-referenced NuGet package, but `<RootPackageReference>false</RootPackageReference>` seems to have no effect on it. This last assembly is one of two lib assemblies in that directly-referenced NuGet package. I'm expecting the trimmer to trim this assembly and not trim the other assembly from the same package.\r\n\r\nI remember these three assemblies being trimmed by your trimmer before I started using packages from the MyGet feed, which I'm doing to preserve reference-related items.\r\n\r\n/cc @ericstj "},{"Id":"7387185013","Type":"IssuesEvent","CreatedAt":"2018-03-15T20:30:55","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/679","RelatedDescription":"Opened issue \"Update standard build definitions to not use deprecated nuget publisher\" (#679) at dotnet/standard","RelatedBody":"The nuget publisher vsts task is deprecated and we need to use the newer one. As part of that we also need to be pulling the api-key from key vault instead of the vsts connection pool. "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7395624344","Type":"PullRequestEvent","CreatedAt":"2018-03-18T00:30:35","Actor":"svick","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28177","RelatedDescription":"Opened pull request \"Improve inling in ImmutableArray<T>.Builder\" (#28177) at dotnet/corefx","RelatedBody":"The issue https://github.com/dotnet/corefx/issues/28064 is about a benchmark whose performance is so bad that a new dangerous method was considered to improve that situation. But almost the same effect can be achieved just by ensuring that the `Add()` method and the indexer setter on `ImmutableArray<T>.Builder` can be inlined (see https://github.com/dotnet/corefx/issues/28064#issuecomment-373950250 for more details). This PR does that.\r\n\r\nI have only verified that extracting the `throw` is useful for the indexer setter. But the indexer getter and `ItemRef` are very similar, so I assumed it makes sense for them too.\r\n\r\nPerformance results using BenchmarkDotNet ([source](https://github.com/svick/Benchmark/blob/3504a3c/Program.cs)):\r\n\r\nBefore:\r\n\r\n|  Method |      Mean |     Error |    StdDev |    Median |\r\n|-------- |----------:|----------:|----------:|----------:|\r\n|     Add | 11.053 us | 0.4281 us | 1.2623 us | 11.004 us |\r\n| Indexer |  6.246 us | 0.1827 us | 0.5242 us |  6.063 us |\r\n\r\nAfter:\r\n\r\n|  Method |     Mean |     Error |    StdDev |   Median |\r\n|-------- |---------:|----------:|----------:|---------:|\r\n|     Add | 5.538 us | 0.1310 us | 0.3863 us | 5.422 us |\r\n| Indexer | 3.159 us | 0.0631 us | 0.1138 us | 3.188 us |\r\n\r\nRelevant portions of JIT dumps:\r\n\r\nBefore:\r\n\r\n```\r\n*************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 28 : state  24 [ ldc.i4.1 ]\r\nweight=-12 : state  76 [ add ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 20 : state 199 [ stloc.0 -> ldloc.0 ]\r\nweight= 28 : state  24 [ ldc.i4.1 ]\r\nweight=-12 : state  76 [ add ]\r\nweight= 31 : state 111 [ stfld ]\r\nweight= 12 : state   7 [ ldloc.0 ]\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 65 : state 141 [ stelem ]\r\nweight= 19 : state  42 [ ret ]\r\n\r\nInline candidate callsite is in a loop.  Multiplier increased to 3.\r\ncalleeNativeSizeEstimate=445\r\ncallsiteNativeSizeEstimate=115\r\nbenefit multiplier=3\r\nthreshold=345\r\nNative estimate for function size exceeds threshold for inlining 44.5 > 34.5 (multiplier = 3)\r\n\r\n\r\nInline expansion aborted, inline not profitable\r\nINLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this'\r\nINLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'\r\n\r\n…\r\n\r\nINLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B1B089D1.\r\n*************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 28 : state  50 [ blt.s ]\r\nweight=227 : state 103 [ newobj ]\r\nweight=210 : state 108 [ throw ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 35 : state   5 [ ldarg.2 ]\r\nweight= 65 : state 141 [ stelem ]\r\nweight= 19 : state  42 [ ret ]\r\n\r\nInline candidate callsite is in a loop.  Multiplier increased to 3.\r\ncalleeNativeSizeEstimate=736\r\ncallsiteNativeSizeEstimate=145\r\nbenefit multiplier=3\r\nthreshold=435\r\nNative estimate for function size exceeds threshold for inlining 73.6 > 43.5 (multiplier = 3)\r\n\r\n\r\nInline expansion aborted, inline not profitable\r\nINLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this'\r\nINLINER: during 'fgInline' result 'failed this call site' reason 'unprofitable inline'\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nINLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:Add(long):this is 0x00007FF8B8698A39.\r\n*************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:Add(long):this\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 28 : state  24 [ ldc.i4.1 ]\r\nweight=-12 : state  76 [ add ]\r\nweight=  6 : state  11 [ stloc.0 ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 12 : state   7 [ ldloc.0 ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 65 : state 141 [ stelem ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 12 : state   7 [ ldloc.0 ]\r\nweight= 31 : state 111 [ stfld ]\r\nweight= 19 : state  42 [ ret ]\r\n\r\nInline candidate is mostly loads and stores.  Multiplier increased to 3.\r\nInline candidate callsite is in a loop.  Multiplier increased to 6.\r\ncalleeNativeSizeEstimate=369\r\ncallsiteNativeSizeEstimate=115\r\nbenefit multiplier=6\r\nthreshold=690\r\nNative estimate for function size is within threshold for inlining 36.9 <= 69 (multiplier = 6)\r\n…\r\nSuccessfully inlined Builder[Int64][System.Int64]:Add(long):this (42 IL bytes) (depth 1) [profitable inline]\r\n--------------------------------------------------------------------------------------------\r\n\r\nINLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Add():this' calling 'Builder[Int64][System.Int64]:Add(long):this'\r\nINLINER: during 'fgInline' result 'success' reason 'profitable inline'\r\n\r\n…\r\n\r\nINLINER impTokenLookupContextHandle for Builder[Int64][System.Int64]:set_Item(int,long):this is 0x00007FF8B8698A39.\r\n*************** In fgFindBasicBlocks() for Builder[Int64][System.Int64]:set_Item(int,long):this\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 10 : state   3 [ ldarg.0 ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 28 : state  50 [ blt.s ]\r\nweight= 79 : state  40 [ call ]\r\nweight= 31 : state 191 [ ldarg.0 -> ldfld ]\r\nweight= 16 : state   4 [ ldarg.1 ]\r\nweight= 35 : state   5 [ ldarg.2 ]\r\nweight= 65 : state 141 [ stelem ]\r\nweight= 19 : state  42 [ ret ]\r\n\r\nInline candidate callsite is in a loop.  Multiplier increased to 3.\r\ncalleeNativeSizeEstimate=378\r\ncallsiteNativeSizeEstimate=145\r\nbenefit multiplier=3\r\nthreshold=435\r\nNative estimate for function size is within threshold for inlining 37.8 <= 43.5 (multiplier = 3)\r\n…\r\nSuccessfully inlined Builder[Int64][System.Int64]:set_Item(int,long):this (28 IL bytes) (depth 1) [profitable inline]\r\n--------------------------------------------------------------------------------------------\r\n\r\nINLINER: during 'fgInline' result 'success' reason 'profitable inline' for 'Bench:Indexer():this' calling 'Builder[Int64][System.Int64]:set_Item(int,long):this'\r\nINLINER: during 'fgInline' result 'success' reason 'profitable inline'\r\n```"},{"Id":"7395622167","Type":"PullRequestEvent","CreatedAt":"2018-03-18T00:28:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28176","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#28176) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7395472360","Type":"PullRequestEvent","CreatedAt":"2018-03-17T22:21:05","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28176","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#28176) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7395926875","Type":"PullRequestEvent","CreatedAt":"2018-03-18T05:10:19","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25567","RelatedDescription":"Opened pull request \"recursive-patterns(9): Add tests and a slight optimization\" (#25567) at dotnet/roslyn","RelatedBody":"The following builds on previous code reviews, which may not have been integrated yet. These are the iterations that are new in this PR:\r\n\r\n- d90a32d84e5146e5fe1a02b04c11d8e7240057f5  Add a test to demonstrate that pattern-matching against a decimal constant is at least as efficient as simply using ==.\r\n- 41ee383d9d0ef963622a023f7c090459b7cb34c4 Demonstrate absence of redundant null check (Fixes #16878)\r\n- 39e8386eeff8187e8f48d1325cd588dc02f27d0c Verify that we do not box for integer \"is constant\" (Fixes #12813)\r\n- 10be6d6ea6978b4320d0eb2dee58f81a54eca18f  Add a test to demonstrate that we do not perform redundant type checks (Fixes #22654)\r\n- eb8c198b54c211e6cbbce1b6edc56b3e20e0e478  Add test to verify code generation for the discard designator in a pattern (Fixes #15437)\r\n- f8b978ea5879416d7e3573a98e3289454fb7cdf4  Add a test demonstrating that there is no redundant HasValue test (Fixes #19150)\r\n- 2f2c9b77878301c0109ab704562d85a7f44b4f14 Add a test to verify the number of times we box in the face of generics. (Fixes #19153)\r\n- 3ed1e4bbfbb382a072415813df8ba91c816ede79  Optimize a type test followed by a cast, a common situation in pattern-matching. (Fixes #20641)\r\n- d3a6dcefdbe78718d4a33e39d33be52ef27629ce Update comments in the binder to reflect that a qualified name can appear as an expression. (Fixes #16616)\r\n- d32d611f415a29d150b79093735e4101167269a4 Mark a test that confirms a bug fix (Fixes #9121)\r\n\r\n@cston @agocke Please review\r\n/cc @dotnet/roslyn-compiler Additional reviews welcome!\r\n\r\n"},{"Id":"7395894438","Type":"IssuesEvent","CreatedAt":"2018-03-18T04:37:30","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13333","RelatedDescription":"Closed issue \"Make the pattern switch statement produce at most one temp per type\" (#13333) at dotnet/roslyn","RelatedBody":"Under certain conditions, like this code\n\n``` cs\n    case \"hello\":\n    case var x when e:\n    case \"world\":\n```\n\nThe pattern switch statement produces more than one temp of a given type. Since these temps are not simultaneously alive, we can actually reuse the same temp. That would be slightly better code, and it would also make it easier for us to handle full fidelity edit-and-continue.\n"},{"Id":"7395892001","Type":"IssuesEvent","CreatedAt":"2018-03-18T04:35:04","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25566","RelatedDescription":"Opened issue \"Possible decision dag optimization\" (#25566) at dotnet/roslyn","RelatedBody":"One possible optimization would be to use pattern variables directly rather than using the pattern-matching temps to avoid a copy when the pattern matches.\r\n\r\nThis would probably help address https://github.com/dotnet/roslyn/issues/20641\r\n\r\nIt would require expanding the scope of those variables, but they are already expanded (not from the debugger's point of view) so capturing across sections works right (e.g. when a local function in one section captures some pattern variable but is called from another section).\r\n\r\nThis would have to be done carefully so the scopes work correctly in the new *switch expression*.\r\n"},{"Id":"7395664470","Type":"PullRequestEvent","CreatedAt":"2018-03-18T01:07:57","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25565","RelatedDescription":"Opened pull request \"[WIP] [Personal] ToListAndFree usage\" (#25565) at dotnet/roslyn","RelatedBody":"Usage of PR #25563 "},{"Id":"7395659107","Type":"PullRequestEvent","CreatedAt":"2018-03-18T01:02:41","Actor":"carlreinke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25564","RelatedDescription":"Opened pull request \"Fix some inline uses of block documentation XML tags\" (#25564) at dotnet/roslyn","RelatedBody":"You can view how this is broken in the [rendered documentation](https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.document)."},{"Id":"7395620110","Type":"IssuesEvent","CreatedAt":"2018-03-18T00:26:55","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/19153","RelatedDescription":"Closed issue \"Redundant box in pattern-match\" (#19153) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n15.3 (master)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Compile the following and examine the IL\r\n``` c#\r\n    public static void M<T, U>(U x) where T : U\r\n    {\r\n        // when T is not known to be a reference type, there is an unboxing conversion from\r\n        // a type parameter U to T, provided T depends on U.\r\n        switch (x)\r\n        {\r\n            case T i:\r\n                Console.Write(i);\r\n                break;\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nx is boxed once.\r\n\r\n**Actual Behavior**:\r\n\r\nx is boxed three times.\r\n"},{"Id":"7395608778","Type":"IssuesEvent","CreatedAt":"2018-03-18T00:15:53","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21552","RelatedDescription":"Closed issue \"Excessive value type copying in pattern matching\" (#21552) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nLast master of Roslyn (16 August 2017)\r\n\r\n**Steps to Reproduce**:\r\nI was trying this simple pattern matching code on TryRoslyn:\r\n\r\n```cs\r\nusing System;\r\npublic class C {\r\n\tvoid testMethod() \r\n       {\r\n           int xSourceSize = 4;\r\n           bool xSourceIsFloat = true;\r\n \t   switch (xSourceSize)\r\n\t   {       \r\n    \t\tcase 1:\r\n    \t\tcase 2:\r\n    \t\tcase 4 when !xSourceIsFloat:\r\n         \t\tConsole.WriteLine(\"Is byte, short, or int\");\r\n        \t\treturn;\r\n    \t\tcase 4:\r\n\t\t        Console.WriteLine(\"Is float\");\r\n        \t\treturn;\r\n    \t\tcase 8 when !xSourceIsFloat:\r\n \t\t        Console.WriteLine(\"Is long\");\r\n        \t\treturn;\r\n    \t\tcase 8:\r\n \t\t\tConsole.WriteLine(\"Is double\");\r\n        \t\treturn;\r\n    \t\tdefault:\r\n        \t\tthrow new NotImplementedException($\"Error: StackSize ${xSourceSize} for ${(xSourceIsFloat ? \"float\" : \"non float\")} not supported\");\r\n\t}    \r\n    }\r\n}\r\n```\r\n\r\nRoslyn creates this not optimal code:\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Security;\r\nusing System.Security.Permissions;\r\n\r\n[assembly: AssemblyVersion(\"0.0.0.0\")]\r\n[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]\r\n[assembly: CompilationRelaxations(8)]\r\n[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\r\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]\r\n[module: UnverifiableCode]\r\npublic class C\r\n{\r\n    private void testMethod()\r\n    {\r\n        int num = 4;\r\n        bool flag = true;\r\n        **int num2 = num;\r\n        int num3 = num2;\r\n        switch (num3)**\r\n        {\r\n        case 1:\r\n            goto IL_3C;\r\n        case 2:\r\n            goto IL_3C;\r\n        case 3:\r\n            break;\r\n        case 4:\r\n            if (flag)\r\n            {\r\n                Console.WriteLine(\"Is float\");\r\n                return;\r\n            }\r\n            goto IL_3C;\r\n        default:\r\n            if (num3 == 8)\r\n            {\r\n                if (flag)\r\n                {\r\n                    Console.WriteLine(\"Is double\");\r\n                    return;\r\n                }\r\n                Console.WriteLine(\"Is long\");\r\n                return;\r\n            }\r\n            break;\r\n        }\r\n        throw new NotImplementedException(string.Format(\"Cosmos.IL2CPU.x86->IL->Conv_I1.cs->Error: StackSize ${0} for ${1} not supported\", num, flag ? \"float\" : \"non float\"));\r\n        IL_3C:\r\n        Console.WriteLine(\"Is byte, short, or int\");\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThe variable 'num' should be used in the switch direcly num2 and num3 are not needed!\r\nBeing in this case xSourceSize does not matter much but it could have been a 16 Byte struct and then all this copying would have been a problem.\r\n\r\n**Actual Behavior**:\r\nTwo copies of the value type are done.\r\n"},{"Id":"7395600532","Type":"IssuesEvent","CreatedAt":"2018-03-18T00:08:12","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20642","RelatedDescription":"Closed issue \"[Compilers] Generated IL for is check against constant\" (#20642) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nd8c89de9bf165693a92f31bcef036bebd031780f\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Check the code/IL gen here https://gist.github.com/Therzok/6562398fb9a1fe87b407bda9d1c6a3db\r\n2. Or here: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACh8jiA6AJQFcA7GNMOOgSTcQHsADgGVEANzQBjOFAqUqOAEwEAshDQsAwhmhQqAbyoECk/i1gENMAmACep89YC8BAKxzjsCO0lEALKrqLAAUJHgA2gC6BBAIAOZQAJRGBIaUAJDpVgQAHgQuAMxymWgAZgTBeWhQNvZmsImpVFSZAL4p7ZSdQA=\r\n3. See that the generated IL is inefficient\r\n\r\n**Expected Behavior**:\r\nIf a value type implements IEquatable<T>, I'd assume that `IEquatable<T>.Equals (T other)` would be used on the left expression with the right expression as a parameter. This could be done via `EqualityComparer<T>.Default.Equals (T a, T b)`\r\n\r\n**Actual Behavior**:\r\n`object.Equals(object, object)` is being used, which leads to inefficient code when using value types.\r\n"},{"Id":"7395577959","Type":"PullRequestEvent","CreatedAt":"2018-03-17T23:48:08","Actor":"AdamSpeight2008","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25563","RelatedDescription":"Opened pull request \"Add overload of ToListAndFree, to handle SeparatedSyntaxList.\" (#25563) at dotnet/roslyn","RelatedBody":"Add overload of ToListAndFree, to handle SeparatedSyntaxList, this enables similar usage to the existing SyntaxList of using it in a return statement. `Return _pool.ToListAndFree( _examples_ )`"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7395945504","Type":"PullRequestEvent","CreatedAt":"2018-03-18T05:29:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5566","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5566) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7395877284","Type":"IssuesEvent","CreatedAt":"2018-03-18T04:20:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5567","RelatedDescription":"Opened issue \"objwriter build breaks in dwarfAbbrev.cpp\" (#5567) at dotnet/corert","RelatedBody":"I am getting these build errors while building objwriter using instructions from https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-ObjectWriter.md :\r\n\r\n```\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:42:33: error: non-constant-expression cannot be narrowed from type 'llvm::dwarf::Form' to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_stmt_list, (DwarfVersion >= 4 ? dwarf::DW_FORM_sec_offset : dwarf::DW_FORM_data4),\r\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:42:33: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_stmt_list, (DwarfVersion >= 4 ? dwarf::DW_FORM_sec_offset : dwarf::DW_FORM_data4),\r\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n                                static_cast<char>(                                                    )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:93:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:93:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:102:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:102:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:259:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:259:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:265:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:265:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:271:31: error: non-constant-expression cannot be narrowed from type 'uint16_t' (aka 'unsigned short') to 'char' in initializer list [-Wc++11-narrowing]\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n/home/jkotas/llvm/tools/ObjWriter/debugInfo/dwarf/dwarfAbbrev.cpp:271:31: note: insert an explicit cast to silence this issue\r\n        dwarf::DW_AT_high_pc, DW_FORM_size,\r\n                              ^~~~~~~~~~~~\r\n                              static_cast<char>( )\r\n6 errors generated.\r\nmake[3]: *** [tools/ObjWriter/CMakeFiles/objwriter.dir/debugInfo/dwarf/dwarfAbbrev.cpp.o] Error 1\r\n```"},{"Id":"7395625728","Type":"PullRequestEvent","CreatedAt":"2018-03-18T00:31:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5566","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5566) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7395577246","Type":"PullRequestEvent","CreatedAt":"2018-03-17T23:47:25","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5565","RelatedDescription":"Opened pull request \"Make Server GC component optional\" (#5565) at dotnet/corert","RelatedBody":"Make the Server GC an optional component by building two flavors of the runtime and selecting a specific one in the build via the `ServerGarbageCollection` MSBuild property. Don't build the Server GC flavor for Web Assembly.\r\n\r\nFixes #5182, Fixes #5306."},{"Id":"7395306020","Type":"IssuesEvent","CreatedAt":"2018-03-17T20:24:12","Actor":"sgf","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5564","RelatedDescription":"Opened issue \"Could be let the compiled output be smaller?\" (#5564) at dotnet/corert","RelatedBody":"its too big now,\r\n\r\nwhen  im testing a hello world with webapi Program,\r\nthe last output filesize need **21mb+.**\r\nwhen im create a HelloWorld Program,\r\nthe last output file size got about **3.86mb.**\r\n\r\n**oh my god,im just want it say hello,But its carry such a heavy burden.**\r\n\r\n_even golang or dlang is much more smaller._\r\n\r\nthats too big,any chance to let them smaller?\r\n\r\n\r\n"},{"Id":"7395203867","Type":"PullRequestEvent","CreatedAt":"2018-03-17T19:18:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5563","RelatedDescription":"Merged pull request \"Fix warning, add assert\" (#5563) at dotnet/corert","RelatedBody":""},{"Id":"7395105982","Type":"PullRequestEvent","CreatedAt":"2018-03-17T18:17:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5563","RelatedDescription":"Opened pull request \"Fix warning, add assert\" (#5563) at dotnet/corert","RelatedBody":""},{"Id":"7395011231","Type":"PullRequestEvent","CreatedAt":"2018-03-17T17:21:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5562","RelatedDescription":"Merged pull request \"Filter out bogus control PCs passed to CodeManagers\" (#5562) at dotnet/corert","RelatedBody":""},{"Id":"7394064939","Type":"PullRequestEvent","CreatedAt":"2018-03-17T05:45:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5562","RelatedDescription":"Opened pull request \"Filter out bogus control PCs passed to CodeManagers\" (#5562) at dotnet/corert","RelatedBody":""},{"Id":"7393981115","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:26:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5557","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5557) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7393980901","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:25:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5559","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5559) at dotnet/corert","RelatedBody":""},{"Id":"7393976403","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:21:42","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5561","RelatedDescription":"Opened pull request \"[WIP] Automate building and running ILVerification tests\" (#5561) at dotnet/corert","RelatedBody":"I'm trying to get the ILVerification tests run as part of CI.\r\n\r\nSo far, I'm able to get `SwitchTests.il` file to compile into an assembly, and copied to the `ILVerification.Tests` output folder, when the test project is built (ie. running `msbuild /v:m /m ILVerification.Tests.csproj /target:Restore` and `msbuild /v:m /m ILVerification.Tests.csproj /target:Build`, or building in VS).\r\n\r\nThen I'm able to run the IL verification tests that assembly with `dotnet xunit.console.netcore.exe ILVerification.Tests.dll`\r\n\r\nTwo questions for @MichalStrehovsky and ILVerify crew:\r\n- Would you know how to get the xunit binaries placed to the output folder (like `TypeSystem.Tests` does)? Currently, the test output folder only contains the files shown below.\r\n- Would you know how to hook this invocation of xunit to the CI test process?\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/37551600-ea0c8de0-295f-11e8-9888-6b249f6009f7.png)"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7393674586","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:34:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2039","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1.4982 into sdk\" (#2039) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1.4982 into sdk release/2.1.2xx branch"},{"Id":"7393532481","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:28:48","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2040","RelatedDescription":"Merged pull request \"Support filtering satellite assemblies from publish via SatelliteResourceLanguages property\" (#2040) at dotnet/sdk","RelatedBody":"Fixes #774\r\n\r\nThanks to @wli3 for pairing on this."},{"Id":"7393487364","Type":"IssuesEvent","CreatedAt":"2018-03-16T23:11:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2061","RelatedDescription":"Opened issue \"Instead of generating an error saying a 2.x SDK is needed, we generate an error loading the NETBuildExtensionsError task\" (#2061) at dotnet/sdk","RelatedBody":"# Repro steps\r\n\r\nCheck out the `build_fail` branch of https://github.com/multiarc/SDKRepro/\r\n\r\nBuild with full Framework MSBuild:\r\n\r\n`msbuild /restore`\r\n\r\n# Expected\r\n\r\nError message: The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK.\r\n\r\n# Actual\r\n\r\nError message:\r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets(65,5): error MSB4062: The \"NETBuildExtensionsError\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\\\tools\\net46\\Microsoft.NET.Build.Extensions.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n>\r\n> C:\\Program Files\\dotnet\\sdk\\1.1.7\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(92,5): Cannot find project info for 'C:\\git\\repro\\2045-Pagination\\src\\B\\B.csproj'. This can indicate a missing project reference. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n\r\n# Root cause\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll no longer includes the `NETBuildExtensionsError` task.  Instead it includes the `NETSdkError` task.  This is because the `DefineConstants` property in the project is no longer applying because it was moved before the `Sdk.props` import, and there is a `DefineConstants` in repo toolset that is overriding it.\r\n\r\n# Meme\r\n\r\n![image](https://user-images.githubusercontent.com/145043/37548198-77a0bbe0-2933-11e8-8af4-4b48dda6ebac.png)\r\n"},{"Id":"7393090287","Type":"PullRequestEvent","CreatedAt":"2018-03-16T21:10:15","Actor":"ericstj","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2060","RelatedDescription":"Opened pull request \"Fix package override resolver desktop\" (#2060) at dotnet/sdk","RelatedBody":"In desktop projects the PackageOverrideResolver was throwing ArgumentNullException due to \r\none item coming from a package and the other not.\r\n\r\nMoreover I noticed that the one that was thought to come from a package was actually a platform item\r\nand the reason we thought it came from a package was that I had a *.nuspec in the root of the drive where I was building from.\r\n\r\nWe need tests to cover these cases.\r\n\r\nFixes #1854"},{"Id":"7392911058","Type":"PullRequestEvent","CreatedAt":"2018-03-16T20:27:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2059","RelatedDescription":"Opened pull request \"Merge master into release/2.1.3xx\" (#2059) at dotnet/sdk","RelatedBody":"This was a clean merge."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"974694823067246592","CreatedAt":"2018-03-16T17:12:09+00:00","UserScreenname":"dotnet","Text":"Check out the latest On .NET show with @jeremylikness &amp; @jplane talking .NET Core and containers. #dotnetcore https://t.co/NfFbKIsLTw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"974414421245095936","CreatedAt":"2018-03-15T22:37:56+00:00","UserScreenname":"dotnet","Text":"Transport Layer Security (TLS) best practices with the .NET Framework article published https://t.co/SbAZXvK8n7 #security","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":183,"FavoriteCount":91,"RawContent":null},{"Id":"974274431127302145","CreatedAt":"2018-03-15T13:21:40+00:00","UserScreenname":"dotnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/WyBUY4oGYv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"974176533270036480","CreatedAt":"2018-03-15T06:52:39+00:00","UserScreenname":"dotnet","Text":"Exciting news! https://t.co/wgCtuUTXcr","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-03-18T05:30:19.3545173Z","RunDurationInMilliseconds":7795}